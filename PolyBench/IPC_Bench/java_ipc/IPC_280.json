{
  "Task_id": 280,
  "Github_ID": "710898979",
  "Github_Project_Name": "HyperCeiler",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "ProcessBuilder in java.io",
  "Instruction": "Task Description: Implement a Java function that executes a shell command with root privileges using ProcessBuilder, handles input/output streams, and properly manages process lifecycle and error handling.\n\nFunction Description: The function executes a given shell command with root privileges by spawning a new process through ProcessBuilder. It uses 'su' to gain root access and 'nsenter' to enter the root namespace. The function handles command safety checks, process I/O streams, error redirection, and proper resource cleanup. It returns the command output or error messages.\n\nInput: \n- cmd: String - The shell command to be executed with root privileges\n\nOutput: \n- String - The output of the executed command (stdout) or error message if execution fails. The output string is cleaned to remove trailing newlines and unnecessary error prefixes.\n\nNote: The function includes a safety check (isSafeCommand) to prevent dangerous operations, though its implementation isn't shown in the reference code.",
  "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\n\npublic static String rootExecCmd(String cmd) {\n    if (!isSafeCommand(cmd)) return \"Cannot exec this command: Dangerous operation\";\n    StringBuilder result = new StringBuilder();\n    ProcessBuilder pb = new ProcessBuilder(\"su\");\n    Process p;\n    DataOutputStream dos = null;\n    DataInputStream dis = null;\n    try {\n        pb.redirectErrorStream(true);\n        p = pb.start();\n        dos = new DataOutputStream(p.getOutputStream());\n        dis = new DataInputStream(p.getInputStream());\n        dos.writeBytes(\"nsenter --mount=/proc/1/ns/mnt -- \" + cmd + \"\\n\");\n        dos.flush();\n        dos.writeBytes(\"exit\\n\");\n        dos.flush();\n        String line;\n        while ((line = dis.readLine()) != null) {\n            result.append(line).append(\"\\n\");\n        }\n        p.waitFor();\n    } catch (Exception e) {\n        if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n            return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n        } else {\n            return String.valueOf(e);\n        }\n    } finally {\n        if (dos != null) {\n            try {\n                dos.close();\n            } catch (IOException e) {\n                if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n                    return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n                } else {\n                    return String.valueOf(e);\n                }\n            }\n        }\n        if (dis != null) {\n            try {\n                dis.close();\n            } catch (IOException e) {\n                if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n                    return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n                } else {\n                    return String.valueOf(e);\n                }\n            }\n        }\n    }\n    if (result.length() > 0) {\n        result = new StringBuilder(result.substring(0, result.length() - 1));\n    }\n    if (!cmd.contains(\"nsenter\") && result.toString().contains(\"nsenter: exec \")) {\n        return result.toString().replace(\"nsenter: exec \", \"\");\n    } else {\n        return result.toString();\n    }\n}",
  "FSMID_for_test": 44,
  "Code_level": "Function-level"
}