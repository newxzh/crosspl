{
  "Task_id": 267,
  "Github_ID": "272493701",
  "Github_Project_Name": "learning-note",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "NIO HTTP Server in Java",
  "Instruction": "Task Description: Implement a Java NIO HTTP server that handles multiple client connections asynchronously using non-blocking I/O operations.\n\nClass Description: NIOServer is a class that implements a non-blocking HTTP server using Java NIO (New I/O) components. It manages multiple client connections efficiently through a single thread using a Selector to monitor events on channels.\n\nAttributes:\n- serverSocketChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The multiplexor that monitors registered channels for I/O events\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port, initializes the ServerSocketChannel and Selector, and begins the event loop\n- handleAccept(SelectionKey key) -> void - Handles new client connections by accepting the channel and registering it for read operations\n- handleRead(SelectionKey key) -> void - Handles incoming data from clients by reading from the channel and processing the request\n- handleWrite(SelectionKey key) -> void - Handles writing responses back to clients by preparing and sending data through the channel",
  "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NIOServer {\n\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        selector = Selector.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        try {\n            while (true) {\n                if (selector.select(1) > 0) {\n                    Set<SelectionKey> set = selector.selectedKeys();\n                    Iterator<SelectionKey> keyIterator = set.iterator();\n\n                    while (keyIterator.hasNext()) {\n                        SelectionKey key = keyIterator.next();\n                        if (key.isAcceptable()) {\n                            handleAccept(key);\n                        } else if (key.isReadable()) {\n                            handleRead(key);\n                        } else if (key.isWritable()) {\n                            handleWrite(key);\n                        }\n                        keyIterator.remove();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        clientChannel.read(byteBuffer);\n        byteBuffer.flip();\n        System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = ((SocketChannel) key.channel());\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        String msg = \"server channel write: current time mill\" + System.currentTimeMillis();\n        byteBuffer.put(msg.getBytes());\n        byteBuffer.flip();\n        clientChannel.write(byteBuffer);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n}",
  "FSMID_for_test": 21,
  "Code_level": "Class-level"
}