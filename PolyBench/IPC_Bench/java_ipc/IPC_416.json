{
  "Task_id": 416,
  "Github_ID": "75989169",
  "Github_Project_Name": "KuaiChuan",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "TCP Client-side Java.io",
  "Instruction": "Task Description: Create a Java class that implements file transfer functionality over TCP/IP protocol, including connection establishment, header and body parsing, and proper resource cleanup. The class should support progress monitoring through callbacks.\n\nClass Description: FileSender is a class that handles sending files to a remote server using TCP sockets. It implements Runnable for asynchronous operation and extends BaseTransfer for common transfer functionality. The class manages the entire file transfer process including connection setup, metadata transmission, file content streaming, and cleanup.\n\nAttributes:\n- mServerIpAddress: String - IP address of the server to connect to\n- mPort: int - Port number of the server\n- mFileInfo: FileInfo - Contains metadata about the file to be sent\n- mSocket: Socket - TCP socket for communication with server\n- mOutputStream: OutputStream - Buffered output stream for sending data\n- mOnSendListener: OnSendListener - Callback interface for transfer events\n\nMethods:\n- FileSender(Context, FileInfo, String, int) -> None - Constructor that initializes the file transfer parameters\n- setOnSendListener(OnSendListener) -> None - Sets the callback listener for transfer events\n- run() -> None - Main execution method called when the thread starts (implements Runnable)\n- init() -> None - Initializes the socket connection and output stream\n- parseHeader() -> None - Sends file metadata in a formatted header\n- parseBody() -> None - Streams the file content to the server\n- finish() -> None - Cleans up resources (closes streams and socket)\n- OnSendListener: Interface - Callback interface with methods for transfer events:\n  - onStart() -> None - Called when transfer begins\n  - onProgress(long, long) -> None - Called with progress updates\n  - onSuccess(FileInfo) -> None - Called on successful transfer\n  - onFailure(Throwable, FileInfo) -> None - Called if transfer fails",
  "Canonical_solution": "import android.content.Context;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class FileSender extends BaseTransfer implements Runnable {\n\n    private String mServerIpAddress;\n    private int mPort;\n    private FileInfo mFileInfo;\n    private Socket mSocket;\n    private OutputStream mOutputStream;\n    private OnSendListener mOnSendListener;\n\n    public FileSender(Context context, FileInfo mFileInfo, String mServerIpAddress, int mPort) {\n        this.mFileInfo = mFileInfo;\n        this.mServerIpAddress = mServerIpAddress;\n        this.mPort = mPort;\n    }\n\n    public void setOnSendListener(OnSendListener mOnSendListener) {\n        this.mOnSendListener = mOnSendListener;\n    }\n\n    @Override\n    public void run() {\n        try {\n            if(mOnSendListener != null) mOnSendListener.onStart();\n            init();\n            parseHeader();\n            parseBody();\n            finish();\n            if(mOnSendListener != null) mOnSendListener.onSuccess(mFileInfo);\n        } catch (Exception e) {\n            if(mOnSendListener != null) mOnSendListener.onFailure(e, mFileInfo);\n        }\n    }\n\n    @Override\n    public void init() throws Exception {\n        this.mSocket = new Socket(mServerIpAddress, mPort);\n        OutputStream os = this.mSocket.getOutputStream();\n        mOutputStream = new BufferedOutputStream(os);\n    }\n\n    @Override\n    public void parseHeader() throws Exception {\n        StringBuilder headerSb = new StringBuilder();\n        String jsonStr = FileInfo.toJsonStr(mFileInfo);\n        jsonStr = TYPE_FILE + SPERATOR + jsonStr;\n        headerSb.append(jsonStr);\n        int leftLen = BYTE_SIZE_HEADER - jsonStr.getBytes(UTF_8).length;\n        for(int i=0; i < leftLen; i++){\n            headerSb.append(\" \");\n        }\n        byte[] headbytes = headerSb.toString().getBytes(UTF_8);\n        mOutputStream.write(headbytes);\n    }\n\n    @Override\n    public void parseBody() throws Exception {\n        InputStream fis = new FileInputStream(new File(mFileInfo.getFilePath()));\n        byte[] bytes = new byte[BYTE_SIZE_DATA];\n        int len = 0;\n        while((len=fis.read(bytes)) != -1){\n            mOutputStream.write(bytes, 0, len);\n            if(mOnSendListener != null) mOnSendListener.onProgress(fis.available(), mFileInfo.getSize());\n        }\n        mOutputStream.flush();\n        mOutputStream.close();\n    }\n\n    @Override\n    public void finish() {\n        try {\n            if(mOutputStream != null) mOutputStream.close();\n            if(mSocket != null && mSocket.isConnected()) mSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public interface OnSendListener {\n        void onStart();\n        void onProgress(long progress, long total);\n        void onSuccess(FileInfo fileInfo);\n        void onFailure(Throwable t, FileInfo fileInfo);\n    }\n}",
  "FSMID_for_test": 15,
  "Code_level": "Class-level"
}