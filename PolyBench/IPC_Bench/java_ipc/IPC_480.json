{
  "Task_id": 480,
  "Github_ID": "481412",
  "Github_Project_Name": "Java-WebSocket",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Server Handler using org.java_websocket",
  "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library to handle client connections, messages, and disconnections.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It provides lifecycle methods for managing WebSocket connections and handling communication events.\n\nAttributes:\n- address: InetSocketAddress - The network address and port on which the server listens for connections\n\nMethods:\n- Constructor: MyWebSocketServer(InetSocketAddress address) -> void - Initializes the WebSocket server with the specified address\n- onOpen: onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new WebSocket connection is established\n- onClose: onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a WebSocket connection is closed\n- onMessage: onMessage(WebSocket conn, String message) -> void - Called when a message is received from a WebSocket client\n- onError: onError(WebSocket conn, Exception ex) -> void - Called when an error occurs with a WebSocket connection\n- onStart: onStart() -> void - Called when the server starts successfully",
  "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new WebSocket connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle WebSocket connection closing\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Handle incoming WebSocket message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle WebSocket errors\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        // Handle server startup\n    }\n}",
  "FSMID_for_test": 28,
  "Code_level": "Class-level"
}