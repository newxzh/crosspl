{
  "Task_id": 222,
  "Github_ID": "30628859",
  "Github_Project_Name": "netty-4-user-guide-demos",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Implement a TCP server using Java Netty framework that can handle custom protocol messages with proper encoding/decoding and processing.\n\nClass Description: ProtocolServer is a Netty-based TCP server implementation that listens on a specified port, handles incoming connections, and processes custom protocol messages using dedicated encoder/decoder and handler components.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nMAX_FRAME_LENGTH: static final int - Maximum allowed frame length for incoming messages (1MB)\nLENGTH_FIELD_LENGTH: static final int - Length of the length field in the protocol (4 bytes)\nLENGTH_FIELD_OFFSET: static final int - Offset of the length field in the protocol (6 bytes)\nLENGTH_ADJUSTMENT: static final int - Adjustment value for the length field (0)\nINITIAL_BYTES_TO_STRIP: static final int - Number of bytes to strip from the beginning of the message (0)\n\nMethods:\nProtocolServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() -> void - Starts the Netty server, configures the pipeline with protocol handlers, and begins listening for connections (throws Exception)",
  "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class ProtocolServer {\n\n    private int port;\n    \n    private static final int MAX_FRAME_LENGTH = 1024 * 1024;\n    private static final int LENGTH_FIELD_LENGTH = 4;\n    private static final int LENGTH_FIELD_OFFSET = 6;\n    private static final int LENGTH_ADJUSTMENT = 0;\n    private static final int INITIAL_BYTES_TO_STRIP = 0;\n    \n    public ProtocolServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"decoder\",\n                            new ProtocolDecoder(MAX_FRAME_LENGTH,\n                                    LENGTH_FIELD_OFFSET,LENGTH_FIELD_LENGTH, \n                                    LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                    ch.pipeline().addLast(\"encoder\", new ProtocolEncoder());\n                    ch.pipeline().addLast(new ProtocolServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            System.out.println(\"Server start listen at \" + port);\n            f.channel().closeFuture().sync();\n\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}