{
  "Task_id": 205,
  "Github_ID": "148496687",
  "Github_Project_Name": "SpringBoot-Labs",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections and messages, with proper initialization and graceful shutdown.\n\nClass Description: NettyServer is a Spring component that sets up and manages a Netty-based TCP server. It handles server lifecycle including startup and shutdown, and delegates incoming connection handling to a specified handler initializer.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging server events\n- port: Integer - Port number on which the server will listen (injected from configuration)\n- nettyServerHandlerInitializer: NettyServerHandlerInitializer - Handler for initializing channel pipelines (Spring-injected)\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- channel: Channel - Active server channel instance\n\nMethods:\n- start() -> void - Initializes and starts the Netty server (annotated with @PostConstruct)\n  - Input: None\n  - Output: None\n  - Throws: InterruptedException if thread is interrupted during startup\n- shutdown() -> void - Gracefully shuts down the server (annotated with @PreDestroy)\n  - Input: None\n  - Output: None",
  "Canonical_solution": "import cn.iocoder.springboot.lab67.nettyserverdemo.server.handler.NettyServerHandlerInitializer;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.net.InetSocketAddress;\n\n@Component\npublic class NettyServer {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Value(\"${netty.port}\")\n    private Integer port;\n\n    @Autowired\n    private NettyServerHandlerInitializer nettyServerHandlerInitializer;\n\n    private EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private Channel channel;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(port))\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .childHandler(nettyServerHandlerInitializer);\n        ChannelFuture future = bootstrap.bind().sync();\n        if (future.isSuccess()) {\n            channel = future.channel();\n            logger.info(\"[start][Netty Server started on port {}]\", port);\n        }\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}