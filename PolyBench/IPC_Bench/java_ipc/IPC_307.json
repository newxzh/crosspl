{
  "Task_id": 307,
  "Github_ID": "19641638",
  "Github_Project_Name": "lettuce",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Redis in Java",
  "Instruction": "Task Description: Create a Java class that implements a Redis publisher using the Lettuce client library, capable of publishing elements to a Redis list and providing a reactive stream publisher for consuming these elements.\n\nClass Description: The RedisPublisher class provides functionality to connect to a Redis server, publish elements to a Redis list, and create a reactive stream publisher for these elements. It handles connection management and resource cleanup.\n\nAttributes:\n- client: [RedisClient] - The Redis client instance used to establish connections with the Redis server.\n- connection: [StatefulRedisConnection<String, String>] - The active connection to the Redis server for executing commands.\n\nMethods:\n- RedisPublisher() - [Constructor] -> [void] - Initializes the Redis client and establishes a connection to the Redis server. Also flushes all existing data in Redis.\n- createPublisher(long elements) -> [Publisher<String>] - Creates and returns a reactive stream Publisher that emits elements from a Redis list. The method creates a new Redis list with the specified number of elements and sets up a supplier for LRANGE commands to retrieve them.\n- close() -> [void] - Closes the Redis connection and shuts down the client to release resources.\n\nInput: \n- For createPublisher: elements [long] - The number of elements to publish to the Redis list.\n\nOutput:\n- For createPublisher: A Publisher<String> that emits the elements from the Redis list. Returns null if elements equals Long.MAX_VALUE.",
  "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.output.ValueListOutput;\nimport io.lettuce.core.protocol.Command;\nimport io.lettuce.core.protocol.CommandArgs;\nimport io.lettuce.core.protocol.CommandType;\nimport io.lettuce.test.resource.FastShutdown;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.lettuce.test.settings.TestSettings;\nimport org.reactivestreams.Publisher;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.function.Supplier;\n\npublic class RedisPublisher {\n\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create(TestClientResources.get(), RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = client.connect();\n        connection.sync().flushall();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        RedisCommands<String, String> sync = connection.sync();\n\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n\n        String id = UUID.randomUUID().toString();\n        String key = \"PublisherVerification-\" + id;\n\n        for (int i = 0; i < elements; i++) {\n            sync.lpush(key, \"element-\" + i);\n        }\n\n        Supplier<Command<String, String, List<String>>> supplier = () -> {\n            CommandArgs<String, String> args = new CommandArgs<>(StringCodec.UTF8).addKey(key).add(0).add(-1);\n            return new Command<>(CommandType.LRANGE, new ValueListOutput<>(StringCodec.UTF8), args);\n        };\n\n        return new TestRedisPublisher(supplier, connection, true);\n    }\n\n    public void close() {\n        connection.close();\n        FastShutdown.shutdown(client);\n    }\n}",
  "FSMID_for_test": 37,
  "Code_level": "Class-level"
}