{
  "Task_id": 473,
  "Github_ID": "481412",
  "Github_Project_Name": "Java-WebSocket",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Server Handler using org.java_websocket",
  "Instruction": "Task Description: Implement a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library.\n\nClass Description: The SocketActivation class extends WebSocketServer to create a custom WebSocket server. It manages client connections, broadcasts messages to all connected clients, and handles server lifecycle events. The server tracks the number of connected clients and shuts down when no clients remain.\n\nAttributes:\n- clients: AtomicInteger - Tracks the number of currently connected clients\n\nMethods:\n- SocketActivation(ServerSocketChannel chan) -> None - Constructor that initializes the WebSocket server with the given ServerSocketChannel\n- onOpen(WebSocket conn, ClientHandshake handshake) -> None - Handles new client connections, sends welcome message, and broadcasts connection event\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> None - Handles client disconnections, broadcasts departure event, and shuts down server if no clients remain\n- onMessage(WebSocket conn, String message) -> None - Broadcasts received text messages to all clients and logs the message\n- onMessage(WebSocket conn, ByteBuffer message) -> None - Broadcasts received binary messages to all clients and logs the message\n- onError(WebSocket conn, Exception ex) -> None - Handles and logs any errors that occur during WebSocket operations\n- onStart() -> None - Called when the server starts successfully, logs server startup",
  "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class SocketActivation extends WebSocketServer {\n\n    private AtomicInteger clients = new AtomicInteger(0);\n\n    public SocketActivation(ServerSocketChannel chan) {\n        super(chan);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Welcome to the server!\");\n        broadcast(\"new connection: \" + handshake.getResourceDescriptor());\n        if(clients.get() == 0) {\n            broadcast(\"You are the first client to join\");\n        }\n        System.out.println(conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n        clients.incrementAndGet();\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        broadcast(conn + \" has left the room!\");\n        System.out.println(conn + \" has left the room!\");\n        if(clients.decrementAndGet() <= 0) {\n            System.out.println(\"No more clients left, exiting\");\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(message.array());\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}",
  "FSMID_for_test": 28,
  "Code_level": "Class-level"
}