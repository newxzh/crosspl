{
  "Task_id": 197,
  "Github_ID": "9278888",
  "Github_Project_Name": "brave",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a simple HTTP server using Netty framework, capable of handling incoming HTTP requests and providing graceful shutdown functionality.\n\nClass Description: NettyHttpServer is a class that sets up and manages a Netty-based HTTP server. It initializes the server with configurable options, handles incoming HTTP requests through a pipeline of handlers, and provides methods to control the server lifecycle.\n\nAttributes:\n- bossGroup: EventLoopGroup - Handles incoming connections and accepts them\n- workerGroup: EventLoopGroup - Handles the traffic of accepted connections\n- port: int - The port number on which the server is listening\n\nMethods:\n- init() -> void - Initializes and starts the HTTP server on an available port, setting up the necessary event loop groups and channel pipeline\n- stop() -> void - Shuts down the server gracefully by releasing all resources and closing the event loop groups\n- getUrl(String path) -> String - Constructs and returns a complete URL string using the server's address and the provided path",
  "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public void init() {\n        stop();\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(NettyHttpTracing.create(httpTracing).serverHandler());\n                    p.addLast(new TestHandler(httpTracing));\n                }\n            });\n\n        try {\n            Channel ch = b.bind(0).sync().channel();\n            port = ((InetSocketAddress) ch.localAddress()).getPort();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new AssertionError(e);\n        }\n    }\n\n    public String getUrl(String path) {\n        return \"http://127.0.0.1:\" + port + path;\n    }\n\n    public void stop() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}