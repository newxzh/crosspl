{
  "Task_id": 17,
  "Github_ID": "9342529",
  "Github_Project_Name": "crate",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "FileChannel usage in java.nio",
  "Instruction": "Task Description: Create a Java class that provides file channel operations using Java NIO's FileChannel for efficient file I/O operations, including reading, writing, positioning, truncating, and memory mapping.\n\nClass Description: TranslogFileChannel is a wrapper class for FileChannel that simplifies file operations while maintaining the performance benefits of Java NIO. It implements Closeable to ensure proper resource cleanup.\n\nAttributes:\n- location: Path - The file path associated with the FileChannel\n- channel: FileChannel - The underlying FileChannel instance for performing I/O operations\n\nMethods:\n- TranslogFileChannel(Path location) -> void - Constructor that opens a FileChannel for both reading and writing at the specified path\n- write(ByteBuffer src) -> void - Writes data from the given ByteBuffer to the file\n- read(ByteBuffer dst) -> int - Reads data from the file into the given ByteBuffer, returning the number of bytes read\n- position() -> long - Returns the current position in the file\n- position(long newPosition) -> void - Sets the position in the file\n- size() -> long - Returns the current size of the file\n- truncate(long size) -> void - Truncates the file to the specified size\n- force(boolean metaData) -> void - Forces any updates to be written to the storage device\n- transferTo(long position, long count, WritableByteChannel target) -> long - Transfers bytes from this channel to the given writable channel\n- transferFrom(ReadableByteChannel src, long position, long count) -> long - Transfers bytes into this channel from the given readable channel\n- map(FileChannel.MapMode mode, long position, long size) -> MappedByteBuffer - Maps a region of this channel's file directly into memory\n- close() -> void - Closes the FileChannel and releases associated resources",
  "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class TranslogFileChannel implements Closeable {\n\n    private final Path location;\n    private FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() throws IOException {\n        return channel.position();\n    }\n\n    public void position(long newPosition) throws IOException {\n        channel.position(newPosition);\n    }\n\n    public long size() throws IOException {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n}",
  "FSMID_for_test": 9,
  "Code_level": "Class-level"
}