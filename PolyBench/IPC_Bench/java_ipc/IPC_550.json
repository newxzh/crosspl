{
  "Task_id": 550,
  "Github_ID": "64864962",
  "Github_Project_Name": "freeline",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net ServerSocket",
  "Instruction": "Task Description: Implement a simple embedded HTTP server class that can handle incoming HTTP requests, parse request information, and provide a framework for custom request handling.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP request headers and content, and provides hooks for custom request processing. It handles the low-level socket communication while delegating the actual request handling to subclasses or implementations.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections\n- serverSocket: ServerSocket - The server socket instance used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a dedicated thread for handling connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- run() -> void - The main server loop that accepts connections and processes requests (runs in a separate thread)\n- handle(String method, String path, HashMap<String,String> headers, Map<String,String> queries, InputStream input, OutputStream response) -> void - Abstract method meant to be overridden for custom request handling (does nothing in base implementation)\n- parsePath(String path) -> Map<String,String> - Helper method that parses the request path and extracts query parameters",
  "Canonical_solution": "import android.text.TextUtils;\nimport com.antfortune.freeline.router.ISchemaAction;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EmbedHttpServer {\n\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this::run, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    private void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                OutputStream response = new ResponseOutputStream(os);\n\n                Map<String, String> queries = parsePath(path);\n                handle(method, path, headers, queries, input, response);\n                response.close();\n\n                conn.close();\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {}\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    protected void handle(String method, String path,\n                         HashMap<String, String> headers, Map<String, String> queries, InputStream input,\n                         OutputStream response) throws Exception {\n    }\n\n    private static Map<String, String> parsePath(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return null;\n        }\n        int descriptionIndex = path.indexOf(\"/\");\n        if (descriptionIndex == -1) {\n            return null;\n        }\n        String description = path.substring(descriptionIndex + 1);\n        Map<String, String> queries = new HashMap<>();\n        int queryIndex = description.indexOf(\"?\");\n        if (queryIndex == -1) {\n            queries.put(ISchemaAction.DESCRIPTION, description);\n        } else {\n            queries.put(ISchemaAction.DESCRIPTION, description.substring(0, queryIndex));\n            description = description.substring(queryIndex + 1);\n        }\n        String[] arr = description.split(\"&\");\n        for (String segment : arr) {\n            String[] query = segment.split(\"=\");\n            if (query.length == 2) {\n                queries.put(query[0], query[1]);\n            } else if (query.length == 1) {\n                queries.put(query[0], \"\");\n            }\n        }\n        return queries;\n    }\n}",
  "FSMID_for_test": 0,
  "Code_level": "Class-level"
}