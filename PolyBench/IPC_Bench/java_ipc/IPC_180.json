{
  "Task_id": 180,
  "Github_ID": "55224431",
  "Github_Project_Name": "whatsmars",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling Telnet connections with optional SSL encryption.\n\nClass Description: The TelnetServer class is a Netty-based TCP server implementation that listens for incoming Telnet connections. It supports optional SSL encryption and uses separate thread groups for connection acceptance and request processing. The server logs connection events and properly manages resources during shutdown.\n\nAttributes:\n- SSL: static final boolean - Flag indicating whether SSL encryption should be enabled (configured via system property)\n- PORT: static final int - The port number the server will bind to (configurable via system property, defaults to 8023 or 8992 for SSL)\n\nMethods:\n- start(): void - Starts the Telnet server, binds to the configured port, and begins accepting connections. Throws Exception if any error occurs during startup.\n  Input: None\n  Output: None (void)\n  Description: Initializes SSL context if enabled, creates event loop groups, configures server bootstrap with channel type and handlers, binds to port, and waits for server shutdown. Ensures proper resource cleanup during shutdown.",
  "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class TelnetServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new TelnetServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}