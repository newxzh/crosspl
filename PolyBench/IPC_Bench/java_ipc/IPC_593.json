{
  "Task_id": 593,
  "Github_ID": "1059430",
  "Github_Project_Name": "JGroups",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net UDP Server or Client",
  "Instruction": "Task Description: Implement a UDP-based transport class for inter-process communication that can function as either a server or client, handling both sending and receiving of datagram packets.\n\nClass Description: UdpTransport is a class that provides UDP communication capabilities, allowing processes to send and receive datagram packets. It can be configured as either a server (listening on a specific port) or a client (sending to a server). The class maintains a list of cluster members and supports asynchronous packet reception through a dedicated receiver thread.\n\nAttributes:\n- sock: DatagramSocket - The UDP socket used for communication\n- receiver_thread: Receiver - Thread for handling incoming packets\n- receiver: RtReceiver - Callback interface for received packets\n- host: InetAddress - The host address for communication\n- port: int - The port number for communication (default: 7800)\n- server: boolean - Flag indicating whether this instance is a server\n- log: Log - Logger instance for logging messages\n- members: List<SocketAddress> - List of cluster member addresses\n\nMethods:\n- receiver(RtReceiver) -> void - Sets the receiver callback for incoming packets\n- localAddress() -> Object - Returns the local socket address\n- clusterMembers() -> List<? extends Object> - Returns the list of cluster members\n- start(String...) -> void - Initializes the transport with given options and starts the receiver thread\n- stop() -> void - Stops the transport and closes the socket\n- send(Object, byte[], int, int) -> void - Sends a datagram packet to the specified destination\n- Receiver.run() -> void - Internal thread method that continuously receives packets (private class method)",
  "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.tests.rt.RtTransport;\nimport org.jgroups.util.Util;\n\nimport java.io.IOException;\nimport java.net.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UdpTransport implements RtTransport {\n    protected DatagramSocket      sock;\n    protected Receiver            receiver_thread;\n    protected RtReceiver          receiver;\n    protected InetAddress         host;\n    protected int                 port=7800;\n    protected boolean             server;\n    protected final Log           log=LogFactory.getLog(UdpTransport.class);\n    protected List<SocketAddress> members=new ArrayList<>();\n\n    public UdpTransport() {\n    }\n\n    public void receiver(RtReceiver receiver) {\n        this.receiver=receiver;\n    }\n\n    public Object localAddress() {return members != null? members.get(0) : null;}\n\n    public List<? extends Object> clusterMembers() {\n        return members;\n    }\n\n    public void start(String ... options) throws Exception {\n        options(options);\n        if(server) {\n            sock=new DatagramSocket(port, host);\n            System.out.println(\"server started (ctrl-c to kill)\");\n        }\n        else {\n            sock=new DatagramSocket();\n            members.add(sock.getLocalSocketAddress());\n            members.add(new InetSocketAddress(host, port));\n        }\n        receiver_thread=new Receiver();\n        receiver_thread.start();\n    }\n\n    public void stop() {\n        Util.close(sock);\n    }\n\n    public void send(Object dest, byte[] buf, int offset, int length) throws Exception {\n        DatagramPacket packet=new DatagramPacket(buf, offset, length, (SocketAddress)dest);\n        sock.send(packet);\n    }\n\n    protected class Receiver extends Thread {\n        public void run() {\n            byte[] buf=new byte[RoundTrip.PAYLOAD];\n            DatagramPacket packet=new DatagramPacket(buf, 0, buf.length);\n            for(;;) {\n                try {\n                    sock.receive(packet);\n                    if(packet.getLength() != RoundTrip.PAYLOAD)\n                        throw new IllegalStateException(\"expected \" + RoundTrip.PAYLOAD + \" bytes, but got only \" + packet.getLength());\n                    if(receiver != null)\n                        receiver.receive(packet.getSocketAddress(), buf, packet.getOffset(), packet.getLength());\n                }\n                catch(IOException ex) {\n                    break;\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
  "FSMID_for_test": 2,
  "Code_level": "Class-level"
}