{
  "Task_id": 227,
  "Github_ID": "9278888",
  "Github_Project_Name": "brave",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Implement a Netty-based HTTP server in Java that handles incoming HTTP requests with tracing capabilities for specific endpoints.\n\nClass Description: NettyHttpServer is a TCP server implementation using Netty framework that listens for HTTP requests. It provides tracing functionality for specific endpoints (\"/unsampled\" and \"/traced\") while serving regular requests for other paths. The server manages its lifecycle through start and stop methods.\n\nAttributes:\n- bossGroup: [EventLoopGroup] - Handles incoming connections (accept loop)\n- workerGroup: [EventLoopGroup] - Handles I/O operations for established connections\n\nMethods:\n- startServer() -> [int] - Starts the HTTP server on an available port, returns the bound port number\n- stopServer() -> [void] - Shuts down the server gracefully, releasing all resources\n- TracingDispatchHandler (inner class) - Handles request tracing for specific endpoints\n  - channelRead(ChannelHandlerContext, Object) -> [void] - Processes incoming messages and routes them to appropriate tracing handlers\n  - write(ChannelHandlerContext, Object, ChannelPromise) -> [void] - Processes outgoing messages with tracing context",
  "Canonical_solution": "import brave.Tracing;\nimport brave.baggage.BaggagePropagation;\nimport brave.baggage.BaggagePropagationConfig.SingleBaggageField;\nimport brave.propagation.B3Propagation;\nimport brave.sampler.Sampler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.AttributeKey;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public int startServer() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(new TracingDispatchHandler());\n                    p.addLast(new HelloWorldHandler());\n                }\n            });\n\n        Channel ch = b.bind(0).sync().channel();\n        return ((InetSocketAddress) ch.localAddress()).getPort();\n    }\n\n    public void stopServer() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n\n    static class TracingDispatchHandler extends ChannelDuplexHandler {\n        static final AttributeKey<String> URI_ATTRIBUTE = AttributeKey.valueOf(\"uri\");\n\n        final ChannelDuplexHandler unsampled = NettyHttpTracing.create(\n            Tracing.newBuilder().sampler(Sampler.NEVER_SAMPLE).build()\n        ).serverHandler();\n        final ChannelDuplexHandler traced = NettyHttpTracing.create(\n            Tracing.newBuilder()\n                .propagationFactory(BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY)\n                .build()\n        ).serverHandler();\n\n        @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (!(msg instanceof HttpRequest)) {\n                ctx.fireChannelRead(msg);\n                return;\n            }\n            String uri = ((HttpRequest) msg).uri();\n            if (\"/unsampled\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                unsampled.channelRead(ctx, msg);\n            } else if (\"/traced\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                traced.channelRead(ctx, msg);\n            } else {\n                ctx.fireChannelRead(msg);\n            }\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise prm) throws Exception {\n            String uri = ctx.channel().attr(URI_ATTRIBUTE).get();\n            if (uri == null) {\n                ctx.write(msg, prm);\n                return;\n            }\n            if (\"/unsampled\".equals(uri)) {\n                unsampled.write(ctx, msg, prm);\n            } else if (\"/traced\".equals(uri)) {\n                traced.write(ctx, msg, prm);\n            } else {\n                ctx.write(msg, prm);\n            }\n        }\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}