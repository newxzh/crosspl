{
  "Task_id": 36,
  "Github_ID": "419152443",
  "Github_Project_Name": "planetiler",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "FileChannel usage in java.nio",
  "Instruction": "Task Description: Implement a memory-mapped file-based key-value store for long-to-long mappings using Java NIO's FileChannel and MappedByteBuffer.\n\nClass Description: ArrayLongLongMapMmap provides a memory-efficient way to store and retrieve long-to-long mappings using memory-mapped files. It segments large files into manageable chunks for efficient random access.\n\nAttributes:\n- path: Path - The filesystem path where the memory-mapped file will be stored\n- writeChannel: FileChannel - Channel for writing to the file during initialization\n- segmentsArray: MappedByteBuffer[] - Array of memory-mapped buffers for reading data\n- readChannel: FileChannel - Channel for reading from the file after initialization\n\nMethods:\n- ArrayLongLongMapMmap(Path path, boolean madvise) - Constructor - Initializes the map with the given file path\n- init() -> void - Initializes the memory mapping by closing the write channel and opening read channels with segmented mappings\n- get(long key) -> long - Retrieves the value associated with the given key from memory-mapped segments\n- close() -> void - Cleans up resources including unmapping buffers and closing channels, then deletes the file\n\nThe implementation uses memory-mapped files (1<<27 byte segments) for efficient random access to large datasets while minimizing memory usage. The close() method ensures proper resource cleanup including buffer unmapping and file deletion.",
  "Canonical_solution": "import com.onthegomap.planetiler.util.ByteBufferUtil;\nimport com.onthegomap.planetiler.util.FileUtils;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.Semaphore;\n\nclass ArrayLongLongMapMmap {\n\n  private final Path path;\n  private FileChannel writeChannel;\n  private MappedByteBuffer[] segmentsArray;\n  private FileChannel readChannel = null;\n\n  ArrayLongLongMapMmap(Path path, boolean madvise) {\n    this.path = path;\n    try {\n      writeChannel = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  public void init() {\n    try {\n      writeChannel.close();\n      readChannel = FileChannel.open(path, StandardOpenOption.READ);\n      segmentsArray = ByteBufferUtil.mapFile(readChannel, readChannel.size(), 1L << 27, false, null);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  @Override\n  public long get(long key) {\n    long byteOffset = key << 3;\n    int idx = (int) (byteOffset >>> 27);\n    if (idx >= segmentsArray.length) {\n      return 0;\n    }\n    MappedByteBuffer mappedByteBuffer = segmentsArray[idx];\n    if (mappedByteBuffer == null) {\n      return 0;\n    }\n    int offset = (int) (byteOffset & ((1L << 27) - 1));\n    return mappedByteBuffer.getLong(offset);\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (segmentsArray != null) {\n      ByteBufferUtil.free(segmentsArray);\n      segmentsArray = null;\n    }\n    if (writeChannel != null) {\n      writeChannel.close();\n      writeChannel = null;\n    }\n    if (readChannel != null) {\n      readChannel.close();\n      readChannel = null;\n    }\n    FileUtils.delete(path);\n  }\n}",
  "FSMID_for_test": 9,
  "Code_level": "Class-level"
}