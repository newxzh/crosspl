{
  "Task_id": 157,
  "Github_ID": "30628859",
  "Github_Project_Name": "netty-4-user-guide-demos",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Client",
  "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send periodic messages, and handle graceful shutdown.\n\nClass Description: The MyClient class represents a Netty-based TCP client that connects to a specified host and port, sends periodic messages containing Chinese poetry, and manages network resources properly.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- Constructor: MyClient(String host, int port) -> void - Initializes the client with target host and port information\n- run: run() -> void - Main method that:\n  1. Initializes Netty client components\n  2. Establishes TCP connection\n  3. Periodically sends message objects containing Chinese poetry\n  4. Handles graceful shutdown of network resources\n  5. Throws InterruptedException if interrupted during operation",
  "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.nio.charset.Charset;\n\npublic class MyClient {\n\n    private String host;\n    private int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"codec\", new MyCodec());\n                    ch.pipeline().addLast(new MyClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (true) {\n                Msg msg = new Msg();\n                MsgHeader msgHeader = new MsgHeader();\n                msgHeader.setMsgType(MsgType.EMGW_LOGIN_REQ.getValue());\n                String body = \"\u5e8a\u524d\u660e\u6708\u5149\uff0c\u7591\u662f\u5730\u4e0a\u971c\u3002\u4e3e\u5934\u671b\u660e\u6708\uff0c\u4f4e\u5934\u601d\u6545\u4e61\u3002\";\n\n                byte[] bodyBytes = body.getBytes(Charset.forName(\"utf-8\"));\n                int bodySize = bodyBytes.length;\n                msgHeader.setLen(bodySize);\n                msg.setMsgHeader(msgHeader);\n                msg.setBody(body);\n\n                f.channel().writeAndFlush(msg);\n                Thread.sleep(2000);\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
  "FSMID_for_test": 3,
  "Code_level": "Class-level"
}