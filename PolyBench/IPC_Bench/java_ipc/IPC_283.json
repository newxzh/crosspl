{
  "Task_id": 283,
  "Github_ID": "164091262",
  "Github_Project_Name": "Quicksql",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "ProcessBuilder in java.io",
  "Instruction": "Task Description: Create a Java class that executes shell commands, handling both simple commands and those requiring shell interpretation (with wildcards or special characters). The class should manage process execution, input/output streams, and error handling.\n\nClass Description: ShellCommand is a concrete implementation of AbstractCommand that executes shell commands either directly or through a shell interpreter when needed. It handles command tokenization, process building, and execution status reporting.\n\nAttributes:\n- command: String - The raw shell command to be executed\n- argv: List<String> - The tokenized command arguments, potentially including shell interpreter when needed\n- shellWildcardPattern: Pattern - Compiled regex pattern to detect shell special characters\n\nMethods:\n- ShellCommand(String command) -> None - Constructor that initializes the command and determines if shell interpretation is needed\n- hasWildcard(String command) -> boolean - Checks if the command contains shell wildcard characters that require interpretation\n- tokenize(String s) -> List<String> - Splits a command string into individual tokens for process execution\n- doExecute(ConcurrentTestCommandExecutor executor) -> None - Executes the command using ProcessBuilder, handles I/O streams, and reports execution status",
  "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nprivate final Pattern shellWildcardPattern = Pattern.compile(\"[*?$|<>&]\");\n\nstatic int runAppProcess(\n    ProcessBuilder pb,\n    Logger logger,\n    Reader appInput,\n    Writer appOutput) throws IOException, InterruptedException {\n  pb.redirectErrorStream(true);\n  if (logger != null) {\n    logger.info(\"start process: \" + pb.command());\n  }\n  Process p = pb.start();\n\n  if (appInput != null) {\n    OutputStream out =\n        new BufferedOutputStream(\n            p.getOutputStream(),\n            100 * 1024);\n    int c;\n    while ((c = appInput.read()) != -1) {\n      out.write(c);\n    }\n    out.flush();\n  }\n  if (appOutput != null) {\n    InputStream in =\n        new BufferedInputStream(\n            p.getInputStream(),\n            100 * 1024);\n    int c;\n    while ((c = in.read()) != -1) {\n      appOutput.write(c);\n    }\n    appOutput.flush();\n    in.close();\n  }\n  p.waitFor();\n\n  int status = p.exitValue();\n  if (logger != null) {\n    logger.info(\"exit status=\" + status + \" from \" + pb.command());\n  }\n  return status;\n}\n\nprivate class ShellCommand extends AbstractCommand {\n  private final String command;\n  private List<String> argv;\n\n  private ShellCommand(String command) {\n    this.command = command;\n    boolean needShell = hasWildcard(command);\n    if (needShell) {\n      argv = new ArrayList<>();\n      argv.add(\"/bin/sh\");\n      argv.add(\"-c\");\n      argv.add(command);\n    } else {\n      argv = tokenize(command);\n    }\n  }\n\n  private boolean hasWildcard(String command) {\n    return shellWildcardPattern.matcher(command).find();\n  }\n\n  private List<String> tokenize(String s) {\n    List<String> result = new ArrayList<>();\n    StringTokenizer tokenizer = new StringTokenizer(s);\n    while (tokenizer.hasMoreTokens()) {\n      result.add(tokenizer.nextToken());\n    }\n    return result;\n  }\n\n  protected void doExecute(ConcurrentTestCommandExecutor executor) {\n    Integer threadId = executor.getThreadId();\n    storeMessage(threadId, command);\n\n    ProcessBuilder pb = new ProcessBuilder(argv);\n    pb.directory(scriptDirectory);\n    try {\n      int status = runAppProcess(pb, null, null, getThreadWriter(threadId));\n      if (status != 0) {\n        storeMessage(threadId,\n            \"command \" + command + \": exited with status \" + status);\n      }\n    } catch (Exception e) {\n      storeMessage(threadId,\n          \"command \" + command + \": failed with exception \" + e.getMessage());\n    }\n  }\n}",
  "FSMID_for_test": 44,
  "Code_level": "Function-level"
}