{
  "Task_id": 120,
  "Github_ID": "30628859",
  "Github_Project_Name": "netty-4-user-guide-demos",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Client",
  "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a server, calculate factorials, and handle secure connections when required.\n\nClass Description: The FactorialClient class establishes a TCP connection to a specified server using Netty's non-blocking I/O. It supports optional SSL encryption and calculates factorials through server communication. The class manages connection lifecycle and resource cleanup.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server (default: 8322)\n- COUNT: int - The number for which factorial should be calculated (default: 1000)\n\nMethods:\n- start(): void - Initializes the Netty client, establishes connection, handles SSL if enabled, and calculates factorial. Throws Exception if any error occurs during the process.\n  - Input: None\n  - Output: None (prints factorial result to stderr)\n  - Description: Creates event loop group, configures bootstrap with channel type and handler, connects to server, retrieves factorial result from handler, and ensures proper resource cleanup.",
  "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class FactorialClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n    static final int COUNT = Integer.parseInt(System.getProperty(\"count\", \"1000\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx = SSL ? SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE) : null;\n        EventLoopGroup group = new NioEventLoopGroup();\n        \n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new FactorialClientInitializer(sslCtx));\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            FactorialClientHandler handler = (FactorialClientHandler) f.channel().pipeline().last();\n            System.err.format(\"Factorial of %,d is: %,d\", COUNT, handler.getFactorial());\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
  "FSMID_for_test": 3,
  "Code_level": "Class-level"
}