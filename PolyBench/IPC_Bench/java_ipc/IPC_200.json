{
  "Task_id": 200,
  "Github_ID": "134164777",
  "Github_Project_Name": "cim",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework for handling client connections and message passing in a chat application.\n\nClass Description: The CIMServer class is a Spring component that initializes and manages a Netty-based TCP server. It handles client connections, maintains session information, and provides functionality to send messages to connected clients.\n\nAttributes:\n- boss: [EventLoopGroup] - Handles incoming connections and distributes them to worker threads\n- work: [EventLoopGroup] - Handles I/O operations for established connections\n- nettyPort: [int] - The port number on which the server listens for incoming connections\n\nMethods:\n- start(): [void]() -> [void] - Initializes and starts the Netty server (annotated with @PostConstruct)\n- destroy(): [void]() -> [void] - Shuts down the server gracefully (annotated with @PreDestroy)\n- sendMsg(): [void]([SendMsgReqVO sendMsgReqVO]) -> [void] - Sends a message to a specific client identified by user ID",
  "Canonical_solution": "import com.crossoverjie.cim.common.protocol.BaseCommand;\nimport com.crossoverjie.cim.common.protocol.Request;\nimport com.crossoverjie.cim.server.api.vo.req.SendMsgReqVO;\nimport com.crossoverjie.cim.server.init.CIMServerInitializer;\nimport com.crossoverjie.cim.server.util.SessionSocketHolder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport jakarta.annotation.PostConstruct;\nimport jakarta.annotation.PreDestroy;\nimport java.net.InetSocketAddress;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CIMServer {\n\n    private EventLoopGroup boss = new NioEventLoopGroup();\n    private EventLoopGroup work = new NioEventLoopGroup();\n\n    @Value(\"${cim.server.port}\")\n    private int nettyPort;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap()\n                .group(boss, work)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(nettyPort))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childHandler(new CIMServerInitializer());\n\n        ChannelFuture future = bootstrap.bind().sync();\n        if (future.isSuccess()) {\n            log.info(\"Start cim server success!!!\");\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        boss.shutdownGracefully().syncUninterruptibly();\n        work.shutdownGracefully().syncUninterruptibly();\n        log.info(\"Close cim server success!!!\");\n    }\n\n    public void sendMsg(SendMsgReqVO sendMsgReqVO) {\n        NioSocketChannel socketChannel = SessionSocketHolder.get(sendMsgReqVO.getUserId());\n\n        if (null == socketChannel) {\n            log.error(\"client {} offline!\", sendMsgReqVO.getUserId());\n            return;\n        }\n        Request protocol = Request.newBuilder()\n                .setRequestId(sendMsgReqVO.getUserId())\n                .setReqMsg(sendMsgReqVO.getMsg())\n                .putAllProperties(sendMsgReqVO.getProperties())\n                .setCmd(BaseCommand.MESSAGE)\n                .build();\n\n        ChannelFuture future = socketChannel.writeAndFlush(protocol);\n        future.addListener((ChannelFutureListener) channelFuture ->\n                log.info(\"server push msg:[{}]\", sendMsgReqVO.toString()));\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}