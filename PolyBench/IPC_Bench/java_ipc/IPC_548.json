{
  "Task_id": 548,
  "Github_ID": "186765948",
  "Github_Project_Name": "jmh",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net ServerSocket",
  "Instruction": "Task Description: Create a Java class that implements a TCP server for binary data communication, capable of handling client connections and data exchange using object serialization.\n\nClass Description: BinaryLinkServer is a TCP server implementation that listens for incoming client connections, establishes communication channels, and handles binary data exchange using Java's object serialization. It manages connection lifecycle and provides thread-safe termination.\n\nAttributes:\n- acceptor: Acceptor - Thread responsible for accepting incoming client connections\n- handler: AtomicReference<Handler> - Thread-safe reference to the current connection handler\n\nMethods:\n- BinaryLinkServer() -> void - Constructor that initializes the server and starts the acceptor thread\n- terminate() -> void - Shuts down the server by closing all active connections and stopping threads\n- getListenAddress() -> InetAddress - Determines the server's listening address from system properties or defaults to loopback\n- getListenPort() -> int - Retrieves the server's listening port from system properties or uses ephemeral port\n\nNested Classes:\n1. Acceptor (extends Thread):\n   Attributes:\n   - server: ServerSocket - The server socket listening for connections\n   - listenAddress: InetAddress - The address the server is bound to\n\n   Methods:\n   - Acceptor() -> void - Constructor that creates the server socket\n   - run() -> void - Main acceptor loop that handles incoming connections\n   - close() -> void - Closes the server socket\n\n2. Handler (extends Thread):\n   Attributes:\n   - socket: Socket - The client connection socket\n   - is: InputStream - Input stream from the client\n   - os: OutputStream - Output stream to the client\n   - ois: ObjectInputStream - Object input stream for deserialization\n   - oos: ObjectOutputStream - Object output stream for serialization\n\n   Methods:\n   - Handler(Socket) -> void - Constructor that initializes communication streams\n   - run() -> void - Main handler loop that processes incoming objects\n   - close() -> void - Closes the client connection and releases resources",
  "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic final class BinaryLinkServer {\n\n    private final Acceptor acceptor;\n    private final AtomicReference<Handler> handler;\n\n    public BinaryLinkServer() throws IOException {\n        acceptor = new Acceptor();\n        acceptor.start();\n        handler = new AtomicReference<>();\n    }\n\n    public void terminate() {\n        acceptor.close();\n        Handler h = handler.getAndSet(null);\n        if (h != null) {\n            h.close();\n        }\n        try {\n            acceptor.join();\n            if (h != null) {\n                h.join();\n            }\n        } catch (InterruptedException e) {\n            // ignore\n        }\n    }\n\n    private InetAddress getListenAddress() throws UnknownHostException {\n        String addr = System.getProperty(\"jmh.link.address\");\n        if (addr != null) {\n            return InetAddress.getByName(addr);\n        }\n        try {\n            Method m = InetAddress.class.getMethod(\"getLoopbackAddress\");\n            return (InetAddress) m.invoke(null);\n        } catch (Exception e) {\n            // fall through\n        }\n        return InetAddress.getByAddress(new byte[] {127, 0, 0, 1});\n    }\n\n    private int getListenPort() {\n        return Integer.getInteger(\"jmh.link.port\", 0);\n    }\n\n    private final class Acceptor extends Thread {\n        private final ServerSocket server;\n        private final InetAddress listenAddress;\n\n        public Acceptor() throws IOException {\n            listenAddress = getListenAddress();\n            server = new ServerSocket(getListenPort(), 50, listenAddress);\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!Thread.interrupted()) {\n                    Socket clientSocket = server.accept();\n                    Handler r = new Handler(clientSocket);\n                    if (!handler.compareAndSet(null, r)) {\n                        throw new IllegalStateException(\"Handler already registered\");\n                    }\n                    r.start();\n                }\n            } catch (SocketException e) {\n                // assume \"Socket closed\"\n            } catch (IOException e) {\n                throw new IllegalStateException(e);\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                server.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n\n    private final class Handler extends Thread {\n        private final Socket socket;\n        private final InputStream is;\n        private final OutputStream os;\n        private ObjectInputStream ois;\n        private ObjectOutputStream oos;\n\n        public Handler(Socket socket) throws IOException {\n            this.socket = socket;\n            this.is = socket.getInputStream();\n            this.os = socket.getOutputStream();\n            this.oos = new ObjectOutputStream(new BufferedOutputStream(os));\n            oos.flush();\n        }\n\n        @Override\n        public void run() {\n            try {\n                ois = new ObjectInputStream(new BufferedInputStream(is));\n                while (true) {\n                    Object obj = ois.readObject();\n                    if (obj == null) break;\n                    // Handle different frame types here\n                }\n            } catch (Exception e) {\n                // Handle exceptions\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n}",
  "FSMID_for_test": 0,
  "Code_level": "Class-level"
}