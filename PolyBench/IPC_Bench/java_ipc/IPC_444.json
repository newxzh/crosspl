{
  "Task_id": 444,
  "Github_ID": "537800",
  "Github_Project_Name": "metrics",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "UDP sender based on java.nio",
  "Instruction": "Task Description: Create a Java class that implements UDP-based communication for sending metrics to a Graphite server using Java NIO's non-blocking DatagramChannel.\n\nClass Description: The GraphiteUDP class provides functionality to connect to a Graphite server via UDP, send metric data in the correct format, and handle connection management. It implements non-blocking UDP communication using Java NIO's DatagramChannel and includes error tracking and resource cleanup.\n\nAttributes:\n- hostname: [String] - The hostname of the Graphite server\n- port: [int] - The port number of the Graphite server\n- address: [InetSocketAddress] - The resolved socket address of the Graphite server\n- datagramChannel: [DatagramChannel] - The NIO channel used for UDP communication\n- failures: [int] - Counter for tracking failed send attempts\n\nMethods:\n- connect(): [void] -> [void] - Establishes a connection to the Graphite server by opening a DatagramChannel\n- isConnected(): [void] -> [boolean] - Checks if the connection to the Graphite server is active\n- send(): [String name, String value, long timestamp] -> [void] - Formats and sends a metric to the Graphite server\n- getFailures(): [void] -> [int] - Returns the count of failed send attempts\n- flush(): [void] -> [void] - Placeholder method (no action needed for UDP)\n- close(): [void] -> [void] - Closes the DatagramChannel and cleans up resources\n- sanitize(): [String s] -> [String] - Sanitizes metric names and values (delegates to GraphiteSanitize)\n- getDatagramChannel(): [void] -> [DatagramChannel] - Returns the current DatagramChannel instance\n- setDatagramChannel(): [DatagramChannel datagramChannel] -> [void] - Sets the DatagramChannel instance\n- getAddress(): [void] -> [InetSocketAddress] - Returns the current target address\n- setAddress(): [InetSocketAddress address] -> [void] - Sets the target address",
  "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class GraphiteUDP implements GraphiteSender {\n\n    private final String hostname;\n    private final int port;\n    private InetSocketAddress address;\n\n    private DatagramChannel datagramChannel = null;\n    private int failures;\n\n    public GraphiteUDP(String hostname, int port) {\n        this.hostname = hostname;\n        this.port = port;\n        this.address = null;\n    }\n\n    public GraphiteUDP(InetSocketAddress address) {\n        this.hostname = null;\n        this.port = -1;\n        this.address = address;\n    }\n\n    @Override\n    public void connect() throws IllegalStateException, IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n\n        if (hostname != null) {\n            address = new InetSocketAddress(InetAddress.getByName(hostname), port);\n        }\n\n        datagramChannel = DatagramChannel.open();\n    }\n\n    @Override\n    public boolean isConnected() {\n        return datagramChannel != null && !datagramChannel.socket().isClosed();\n    }\n\n    @Override\n    public void send(String name, String value, long timestamp) throws IOException {\n        try {\n            String str = sanitize(name) + ' ' + sanitize(value) + ' ' + Long.toString(timestamp) + '\\n';\n            ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes(UTF_8));\n            datagramChannel.send(byteBuffer, address);\n            this.failures = 0;\n        } catch (IOException e) {\n            failures++;\n            throw e;\n        }\n    }\n\n    @Override\n    public int getFailures() {\n        return failures;\n    }\n\n    @Override\n    public void flush() throws IOException {\n        // Nothing to do\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (datagramChannel != null) {\n            try {\n                datagramChannel.close();\n            } finally {\n                datagramChannel = null;\n            }\n        }\n    }\n\n    protected String sanitize(String s) {\n        return GraphiteSanitize.sanitize(s);\n    }\n\n    DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    InetSocketAddress getAddress() {\n        return address;\n    }\n\n    void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n}",
  "FSMID_for_test": 8,
  "Code_level": "Class-level"
}