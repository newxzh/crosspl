{
  "Task_id": 538,
  "Github_ID": "3116751",
  "Github_Project_Name": "androidannotations",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net ServerSocket",
  "Instruction": "Task Description: Create a TCP server class that handles multiple client connections concurrently, processes incoming requests, and sends responses back to clients.\n\nClass Description: The ViewServer class implements a multi-threaded TCP server that listens on a specified port, accepts client connections, and processes client requests using a thread pool. Each client connection is handled by a separate worker thread.\n\nAttributes:\n- VIEW_SERVER_MAX_CONNECTIONS: [int] - Maximum number of concurrent client connections allowed\n- mServer: [ServerSocket] - Server socket instance for accepting client connections\n- mPort: [int] - Port number on which the server listens\n- mThread: [Thread] - Main server thread\n- mThreadPool: [ExecutorService] - Thread pool for handling client connections\n\nMethods:\n- ViewServer([int port]) -> [void] - Constructor that initializes the server with the specified port\n- start() -> [boolean] - Starts the server thread and thread pool, returns true if successful\n- run() -> [void] - Main server loop that accepts client connections and delegates to worker threads\n- writeValue([Socket client, String value]) -> [boolean] - Helper method to write a response to a client socket\n- ViewServerWorker([Socket client]) -> [void] - Nested class constructor for handling individual client connections\n- run() -> [void] - Worker thread method that processes client requests and sends responses",
  "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n\n        return true;\n    }\n\n    @Override\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            return;\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } catch (Exception e) {\n                break;\n            }\n        }\n    }\n\n    private static boolean writeValue(Socket client, String value) {\n        boolean result;\n        BufferedWriter out = null;\n        try {\n            OutputStream clientStream = client.getOutputStream();\n            out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024);\n            out.write(value);\n            out.write(\"\\n\");\n            out.flush();\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    result = false;\n                }\n            }\n        }\n        return result;\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        private ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        @Override\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                final String request = in.readLine();\n\n                String command;\n                String parameters;\n\n                int index = request.indexOf(' ');\n                if (index == -1) {\n                    command = request;\n                    parameters = \"\";\n                } else {\n                    command = request.substring(0, index);\n                    parameters = request.substring(index + 1);\n                }\n\n                boolean result = writeValue(mClient, \"RESPONSE\");\n            } catch (IOException e) {\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
  "FSMID_for_test": 0,
  "Code_level": "Class-level"
}