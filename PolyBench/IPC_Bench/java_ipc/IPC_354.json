{
  "Task_id": 354,
  "Github_ID": "715605",
  "Github_Project_Name": "jedis",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Redis in Java",
  "Instruction": "Task Description: Create a Java class that manages Redis connections and operations using the Jedis client library, providing connection pooling and basic CRUD functionality.\n\nClass Description: RedisConnectionManager is a utility class that handles Redis connection management, authentication, and basic operations. It uses JedisPooled for connection pooling and provides thread-safe access to Redis resources.\n\nAttributes:\n- jedisPool: JedisPooled - The pooled Redis connection manager\n- poolConfig: GenericObjectPoolConfig<Connection> - Configuration for the connection pool\n\nMethods:\n- RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig) -> void - Constructor that initializes the connection with host/port and client configuration\n- RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig, GenericObjectPoolConfig<Connection> poolConfig) -> void - Constructor with additional pool configuration\n- getConnection() -> Connection - Gets a connection from the pool\n- closeConnection(Connection connection) -> void - Returns a connection to the pool\n- setCredentialsProvider(RedisCredentialsProvider credentialsProvider) -> void - Updates the authentication credentials\n- executeCommand(String key, String value) -> void - Executes a SET command\n- getValue(String key) -> String - Executes a GET command and returns the value\n- close() -> void - Closes all connections and releases resources",
  "Canonical_solution": "import redis.clients.jedis.JedisPooled;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.DefaultJedisClientConfig;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.util.RedisCredentialsProvider;\nimport redis.clients.jedis.util.DefaultRedisCredentialsProvider;\nimport redis.clients.jedis.util.DefaultRedisCredentials;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\npublic class RedisConnectionManager {\n\n    private JedisPooled jedisPool;\n    private GenericObjectPoolConfig<Connection> poolConfig;\n\n    public RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig) {\n        this.jedisPool = new JedisPooled(hostAndPort, clientConfig);\n    }\n\n    public RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig, \n                                GenericObjectPoolConfig<Connection> poolConfig) {\n        this.poolConfig = poolConfig;\n        this.jedisPool = new JedisPooled(hostAndPort, clientConfig, poolConfig);\n    }\n\n    public Connection getConnection() throws JedisException {\n        return jedisPool.getPool().getResource();\n    }\n\n    public void closeConnection(Connection connection) {\n        if (connection != null) {\n            connection.close();\n        }\n    }\n\n    public void setCredentialsProvider(RedisCredentialsProvider credentialsProvider) {\n        DefaultJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n            .credentialsProvider(credentialsProvider)\n            .build();\n        this.jedisPool = new JedisPooled(jedisPool.getPool().getAddress(), clientConfig);\n    }\n\n    public void executeCommand(String key, String value) {\n        try (Connection connection = getConnection()) {\n            connection.sendCommand(Command.SET, key, value);\n            String response = connection.getStatusCodeReply();\n            if (!\"OK\".equals(response)) {\n                throw new JedisException(\"Failed to set key: \" + key);\n            }\n        }\n    }\n\n    public String getValue(String key) {\n        try (Connection connection = getConnection()) {\n            connection.sendCommand(Command.GET, key);\n            return connection.getBulkReply();\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n}",
  "FSMID_for_test": 37,
  "Code_level": "Class-level"
}