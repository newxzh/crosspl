{
  "Task_id": 596,
  "Github_ID": "71560427",
  "Github_Project_Name": "org.quietmodem.Quiet",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net UDP Server or Client",
  "Instruction": "Task Description: Create a UDP communication class that can function as either a server or client, handling packet transmission and reception with proper error handling and resource management.\n\nClass Description: UDPCommunicator is a class that encapsulates UDP communication functionality, allowing an instance to operate as either a server (receiving packets) or client (sending packets). The class manages socket creation, packet transmission/reception, and proper cleanup.\n\nAttributes:\n- socket: DatagramSocket - The underlying UDP socket used for communication\n- isServer: boolean - Flag indicating whether this instance operates as a server (true) or client (false)\n\nMethods:\n- UDPCommunicator(boolean isServer, int port) -> void - Constructor that initializes the UDP socket. Binds to specified port if operating as server.\n- sendPacket(byte[] data, String destAddress, int destPort) -> void - Sends a UDP packet to the specified destination (client mode only). Throws IOException on network errors and IllegalStateException if called in server mode.\n- receivePacket() -> byte[] - Receives a UDP packet (server mode only). Returns the packet data as byte array. Throws IOException on network errors and IllegalStateException if called in client mode.\n- close() -> void - Closes the socket and releases system resources. Safe to call multiple times.",
  "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UDPCommunicator {\n    private DatagramSocket socket;\n    private boolean isServer;\n\n    public UDPCommunicator(boolean isServer, int port) throws SocketException {\n        this.isServer = isServer;\n        this.socket = new DatagramSocket(null);\n        if (isServer) {\n            socket.bind(new InetSocketAddress(\"0.0.0.0\", port));\n        }\n    }\n\n    public void sendPacket(byte[] data, String destAddress, int destPort) throws IOException {\n        if (isServer) {\n            throw new IllegalStateException(\"Server cannot send packets without first receiving\");\n        }\n        DatagramPacket packet = new DatagramPacket(data, data.length, \n            new InetSocketAddress(destAddress, destPort));\n        socket.send(packet);\n    }\n\n    public byte[] receivePacket() throws IOException {\n        if (!isServer) {\n            throw new IllegalStateException(\"Client should not be receiving packets\");\n        }\n        byte[] buffer = new byte[800];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}",
  "FSMID_for_test": 2,
  "Code_level": "Class-level"
}