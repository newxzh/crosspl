{
  "Task_id": 147,
  "Github_ID": "5103785",
  "Github_Project_Name": "undertow",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Client",
  "Instruction": "Task Description: Create a Java class that implements an HTTP/2 client using Netty framework, capable of establishing TCP connections, sending HTTP requests, and handling responses.\n\nClass Description: NettyHttp2Client is a HTTP/2 client implementation using Netty's non-blocking I/O. It manages connection lifecycle, sends HTTP requests, and processes responses through configured handlers.\n\nAttributes:\n- workerGroup: [NioEventLoopGroup] - Manages client-side I/O threads\n- initializer: [Http2ClientInitializer] - Configures the client pipeline with HTTP/2 handlers\n- bootstrap: [Bootstrap] - Configures and manages the TCP client connection\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- NettyHttp2Client(String host, int port) -> [Constructor] - Initializes the client with target host and port\n- configureBootstrap(String host, int port) -> [void] - Configures the bootstrap with connection parameters\n- connect() -> [void] - Establishes connection to the server\n- sendRequest(URI hostName) -> [void] - Sends HTTP GET request to specified URI\n- disconnect() -> [void] - Closes connection and releases resources\n\nNested Classes:\n- Http2ClientInitializer: [ChannelInitializer<SocketChannel>] - Configures the pipeline for HTTP/2 communication\n- Http2SettingsHandler: [SimpleChannelInboundHandler<Http2Settings>] - Handles HTTP/2 settings negotiation\n- UpgradeRequestHandler: [ChannelInboundHandlerAdapter] - Manages HTTP upgrade to HTTP/2\n- UserEventLogger: [ChannelInboundHandlerAdapter] - Logs channel events",
  "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpClientUpgradeHandler;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http2.DefaultHttp2Connection;\nimport io.netty.handler.codec.http2.DefaultHttp2FrameReader;\nimport io.netty.handler.codec.http2.DefaultHttp2FrameWriter;\nimport io.netty.handler.codec.http2.DelegatingDecompressorFrameListener;\nimport io.netty.handler.codec.http2.Http2ClientUpgradeCodec;\nimport io.netty.handler.codec.http2.Http2Connection;\nimport io.netty.handler.codec.http2.Http2FrameLogger;\nimport io.netty.handler.codec.http2.Http2FrameReader;\nimport io.netty.handler.codec.http2.Http2FrameWriter;\nimport io.netty.handler.codec.http2.Http2InboundFrameLogger;\nimport io.netty.handler.codec.http2.Http2OutboundFrameLogger;\nimport io.netty.handler.codec.http2.Http2Settings;\nimport io.netty.handler.codec.http2.HttpConversionUtil;\nimport io.netty.handler.codec.http2.HttpToHttp2ConnectionHandler;\nimport io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder;\nimport io.netty.handler.codec.http2.InboundHttp2ToHttpAdapterBuilder;\nimport io.netty.handler.logging.LogLevel;\nimport java.net.URI;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttp2Client {\n\n    private final EventLoopGroup workerGroup;\n    private final Http2ClientInitializer initializer;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public NettyHttp2Client(String host, int port) {\n        this.workerGroup = new NioEventLoopGroup();\n        this.initializer = new Http2ClientInitializer(Integer.MAX_VALUE);\n        this.bootstrap = new Bootstrap();\n        configureBootstrap(host, port);\n    }\n\n    private void configureBootstrap(String host, int port) {\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .remoteAddress(host, port)\n                .handler(initializer);\n    }\n\n    public void connect() {\n        channel = bootstrap.connect().syncUninterruptibly().channel();\n        Http2SettingsHandler http2SettingsHandler = initializer.settingsHandler();\n        http2SettingsHandler.awaitSettings(5, TimeUnit.SECONDS);\n    }\n\n    public void sendRequest(URI hostName) throws Exception {\n        HttpResponseHandler responseHandler = initializer.responseHandler();\n        int streamId = 3;\n        final ChannelPromise promise = channel.newPromise();\n        responseHandler.put(streamId, promise);\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, hostName.toString());\n        request.headers().add(HttpHeaderNames.HOST, hostName);\n        request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.DEFLATE);\n        channel.writeAndFlush(request);\n        promise.await(10, TimeUnit.SECONDS);\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n    }\n\n    static class Http2ClientInitializer extends ChannelInitializer<SocketChannel> {\n        private static final Http2FrameLogger logger = new Http2FrameLogger(LogLevel.INFO, Http2ClientInitializer.class);\n        private final int maxContentLength;\n        private HttpToHttp2ConnectionHandler connectionHandler;\n        private HttpResponseHandler responseHandler;\n        private Http2SettingsHandler settingsHandler;\n\n        Http2ClientInitializer(int maxContentLength) {\n            this.maxContentLength = maxContentLength;\n        }\n\n        @Override\n        public void initChannel(SocketChannel ch) throws Exception {\n            final Http2Connection connection = new DefaultHttp2Connection(false);\n            connectionHandler = new HttpToHttp2ConnectionHandlerBuilder()\n                    .connection(connection)\n                    .frameListener(new DelegatingDecompressorFrameListener(connection,\n                            new InboundHttp2ToHttpAdapterBuilder(connection)\n                                    .maxContentLength(maxContentLength)\n                                    .propagateSettings(true)\n                                    .build()))\n                    .build();\n            responseHandler = new HttpResponseHandler();\n            settingsHandler = new Http2SettingsHandler(ch.newPromise());\n            configureClearText(ch);\n        }\n\n        public HttpResponseHandler responseHandler() {\n            return responseHandler;\n        }\n\n        public Http2SettingsHandler settingsHandler() {\n            return settingsHandler;\n        }\n\n        protected void configureEndOfPipeline(ChannelPipeline pipeline) {\n            pipeline.addLast(settingsHandler, responseHandler);\n        }\n\n        private void configureClearText(SocketChannel ch) {\n            HttpClientCodec sourceCodec = new HttpClientCodec();\n            Http2ClientUpgradeCodec upgradeCodec = new Http2ClientUpgradeCodec(connectionHandler);\n            HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(sourceCodec, upgradeCodec, 65536);\n            ch.pipeline().addLast(sourceCodec, upgradeHandler, new UpgradeRequestHandler(), new UserEventLogger());\n        }\n\n        private static Http2FrameReader frameReader() {\n            return new Http2InboundFrameLogger(new DefaultHttp2FrameReader(), logger);\n        }\n\n        private static Http2FrameWriter frameWriter() {\n            return new Http2OutboundFrameLogger(new DefaultHttp2FrameWriter(), logger);\n        }\n\n        private final class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {\n            @Override\n            public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                DefaultFullHttpRequest upgradeRequest =\n                        new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/sdf\");\n                upgradeRequest.headers().add(\"Host\", \"default\");\n                ctx.writeAndFlush(upgradeRequest);\n                ctx.fireChannelActive();\n                ctx.pipeline().remove(this);\n                configureEndOfPipeline(ctx.pipeline());\n            }\n        }\n\n        private static class UserEventLogger extends ChannelInboundHandlerAdapter {\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                ctx.fireUserEventTriggered(evt);\n            }\n        }\n    }\n\n    static class Http2SettingsHandler extends SimpleChannelInboundHandler<Http2Settings> {\n        private final ChannelPromise promise;\n\n        Http2SettingsHandler(ChannelPromise promise) {\n            this.promise = promise;\n        }\n\n        public void awaitSettings(long timeout, TimeUnit unit) throws Exception {\n            if (!promise.awaitUninterruptibly(timeout, unit)) {\n                throw new IllegalStateException(\"Timed out waiting for settings\");\n            }\n            if (!promise.isSuccess()) {\n                throw new RuntimeException(promise.cause());\n            }\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Http2Settings msg) throws Exception {\n            promise.setSuccess();\n            ctx.pipeline().remove(this);\n        }\n    }\n}",
  "FSMID_for_test": 3,
  "Code_level": "Class-level"
}