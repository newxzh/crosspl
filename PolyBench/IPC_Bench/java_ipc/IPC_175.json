{
  "Task_id": 175,
  "Github_ID": "19641638",
  "Github_Project_Name": "lettuce",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling multiple client connections with configurable channel handlers.\n\nClass Description: MockTcpServer is a Netty-based TCP server implementation that provides flexible handler configuration and proper resource management. It uses NIO event loop groups for efficient connection handling and includes graceful shutdown capabilities.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Handles the traffic of accepted connections\n- channel: [Channel] - Represents the server's listening channel\n- handlers: [List<Supplier<? extends ChannelHandler>>] - List of handler suppliers for processing incoming data\n\nMethods:\n- addHandler(Supplier<? extends ChannelHandler> supplier) -> [void] - Adds a channel handler supplier to the pipeline configuration\n- initialize(int port) -> [void] throws InterruptedException - Starts the server on specified port and initializes all configured handlers\n- shutdown() -> [void] - Closes the server channel and triggers graceful shutdown of event loops\n- Resources (static inner class) -> [NioEventLoopGroup] - Manages shared event loop groups and shutdown hooks for resource cleanup",
  "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.DefaultThreadFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Supplier;\n\npublic class MockTcpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n    private List<Supplier<? extends ChannelHandler>> handlers = new ArrayList<>();\n\n    public void addHandler(Supplier<? extends ChannelHandler> supplier) {\n        handlers.add(supplier);\n    }\n\n    public void initialize(int port) throws InterruptedException {\n        bossGroup = Resources.bossGroup;\n        workerGroup = Resources.workerGroup;\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .option(ChannelOption.SO_BACKLOG, 100)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             public void initChannel(SocketChannel ch) {\n                 ChannelPipeline p = ch.pipeline();\n                 for (Supplier<? extends ChannelHandler> handler : handlers) {\n                     p.addLast(handler.get());\n                 }\n             }\n         });\n\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n    }\n\n    public void shutdown() {\n        channel.close();\n    }\n\n    private static class Resources {\n        private static final EventLoopGroup bossGroup;\n        private static final EventLoopGroup workerGroup;\n\n        static {\n            bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory(NioEventLoopGroup.class, true));\n            workerGroup = new NioEventLoopGroup(5, new DefaultThreadFactory(NioEventLoopGroup.class, true));\n\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                bossGroup.shutdownGracefully(0, 0, TimeUnit.MILLISECONDS);\n                workerGroup.shutdownGracefully(0, 0, TimeUnit.MILLISECONDS);\n            }, \"MockRedisServer-shutdown\"));\n        }\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}