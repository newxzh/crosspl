{
  "Task_id": 512,
  "Github_ID": "113356740",
  "Github_Project_Name": "rejoiner",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "gRPC Server in java",
  "Instruction": "Task Description: Create a Java class that implements a gRPC server for a simple \"Hello World\" service, following the gRPC framework conventions. The server should handle incoming requests, process them, and send back appropriate responses, while also managing server lifecycle operations.\n\nClass Description: The HelloWorldServer class is a gRPC server implementation that listens on a specified port, handles incoming gRPC requests for a greeting service, and manages server startup and shutdown operations. It includes an inner class that implements the actual gRPC service logic.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on a predefined port (50051) and registers the Greeter service implementation. Also adds a shutdown hook for graceful termination.\n- stop() -> [void] - Stops the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the main thread until the server is terminated\n- main(String[] args) -> [void] - Entry point that creates and starts the server instance\n- GreeterImpl.sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) -> [void] - Implementation of the gRPC service method that processes HelloRequest and sends HelloReply",
  "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.examples.helloworld.GreeterGrpc;\nimport io.grpc.examples.helloworld.HelloReply;\nimport io.grpc.examples.helloworld.HelloRequest;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new GreeterImpl()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread() {\n              @Override\n              public void run() {\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                HelloWorldServer.this.stop();\n                System.err.println(\"*** server shut down\");\n              }\n            });\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final HelloWorldServer server = new HelloWorldServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n\n  static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n      HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n      responseObserver.onNext(reply);\n      responseObserver.onCompleted();\n    }\n  }\n}",
  "FSMID_for_test": 24,
  "Code_level": "Class-level"
}