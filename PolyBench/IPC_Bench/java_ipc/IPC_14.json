{
  "Task_id": 14,
  "Github_ID": "419152443",
  "Github_Project_Name": "planetiler",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "FileChannel usage in java.nio",
  "Instruction": "Task Description: Implement a class that provides memory-mapped file operations for efficient random read access while supporting sequential write operations. The class should manage file segments, handle resource cleanup, and provide disk usage information.\n\nClass Description: AppendStoreMmap is an abstract class that implements memory-mapped file operations for large files divided into segments. It combines sequential writing with random reading capabilities using memory mapping for efficient access. The class handles file channel management, segment mapping, and resource cleanup.\n\nAttributes:\n- outputStream: DataOutputStream - Used for sequential writing operations\n- segmentBits: int - Number of bits representing segment size (log2 of segment size)\n- segmentMask: long - Bitmask for segment calculations\n- segmentBytes: long - Size of each segment in bytes\n- path: Path - File path being operated on\n- madvise: boolean - Whether to use memory advice for mapped buffers\n- outIdx: long - Current output index position\n- segments: MappedByteBuffer[] - Array of mapped byte buffers for file segments\n- channel: FileChannel - File channel for memory mapping operations\n- LOGGER: Logger - Logger instance for error reporting\n\nMethods:\n- AppendStoreMmap(Path path, boolean madvise) -> None - Constructor with default segment size (1GB)\n- AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) -> None - Constructor with custom segment size\n- getSegments() -> MappedByteBuffer[] - Returns mapped segments, initializing them if needed\n- close() -> None - Closes all resources and unmaps segments\n- diskUsageBytes() -> long - Returns current disk usage of the file",
  "Canonical_solution": "import java.io.BufferedOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Arrays;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nabstract class AppendStoreMmap implements AppendStore {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(AppendStoreMmap.class);\n\n  final DataOutputStream outputStream;\n  final int segmentBits;\n  final long segmentMask;\n  final long segmentBytes;\n  private final Path path;\n  private final boolean madvise;\n  long outIdx = 0;\n  private volatile MappedByteBuffer[] segments;\n  private volatile FileChannel channel;\n\n  AppendStoreMmap(Path path, boolean madvise) {\n    this(path, 1 << 30, madvise);\n  }\n\n  AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) {\n    this.path = path;\n    this.madvise = madvise;\n    segmentBits = (int) (Math.log(segmentSizeBytes) / Math.log(2));\n    segmentMask = (1L << segmentBits) - 1;\n    segmentBytes = segmentSizeBytes;\n    try {\n      this.outputStream = new DataOutputStream(new BufferedOutputStream(Files.newOutputStream(path), 50_000));\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Could not create SequentialWriteRandomReadFile output stream\", e);\n    }\n  }\n\n  MappedByteBuffer[] getSegments() {\n    if (segments == null) {\n      synchronized (this) {\n        if (segments == null) {\n          try {\n            outputStream.close();\n            channel = FileChannel.open(path, StandardOpenOption.READ);\n            segments = ByteBufferUtil.mapFile(channel, outIdx, segmentBytes, madvise);\n          } catch (IOException e) {\n            throw new UncheckedIOException(e);\n          }\n        }\n      }\n    }\n    return segments;\n  }\n\n  @Override\n  public void close() throws IOException {\n    outputStream.close();\n    synchronized (this) {\n      if (channel != null) {\n        channel.close();\n      }\n      if (segments != null) {\n        try {\n          ByteBufferUtil.free(segments);\n        } catch (IOException e) {\n          LOGGER.info(\"Unable to unmap {} {}\", path, e);\n        }\n        Arrays.fill(segments, null);\n      }\n    }\n  }\n\n  @Override\n  public long diskUsageBytes() {\n    return FileUtils.size(path);\n  }\n}",
  "FSMID_for_test": 9,
  "Code_level": "Class-level"
}