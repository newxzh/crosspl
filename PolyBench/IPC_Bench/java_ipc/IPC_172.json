{
  "Task_id": 172,
  "Github_ID": "222578036",
  "Github_Project_Name": "datax-web",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Implement a Netty-based TCP server class that handles RPC (Remote Procedure Call) requests and responses, including server startup, shutdown, and connection management.\n\nClass Description: NettyServer is a TCP server implementation using Netty framework that provides RPC functionality. It manages server lifecycle, connection handling, and request processing through a thread pool.\n\nAttributes:\n- thread: Thread - The thread running the Netty server instance\n\nMethods:\n- start(XxlRpcProviderFactory) -> void - Starts the Netty server with the specified RPC provider configuration. Initializes thread pools, event loops, and server bootstrap.\n  Input: \n    - xxlRpcProviderFactory: XxlRpcProviderFactory - Configuration factory providing server parameters and serializer\n  Output: None (server runs asynchronously in background thread)\n\n- stop() -> void - Stops the Netty server gracefully by interrupting the server thread and shutting down resources.\n  Input: None\n  Output: None (performs cleanup operations)\n\nThe class should handle:\n1. Server bootstrap configuration with NIO transport\n2. Connection pipeline setup with idle state detection\n3. Request/response serialization\n4. Thread pool management for request processing\n5. Graceful shutdown procedures",
  "Canonical_solution": "import com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcResponse;\nimport com.wugui.datax.rpc.remoting.provider.XxlRpcProviderFactory;\nimport com.wugui.datax.rpc.util.ThreadPoolUtil;\nimport com.wugui.datax.rpc.remoting.net.Server;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyServer extends Server {\n\n    private Thread thread;\n\n    @Override\n    public void start(final XxlRpcProviderFactory xxlRpcProviderFactory) throws Exception {\n        thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                final ThreadPoolExecutor serverHandlerPool = ThreadPoolUtil.makeServerThreadPool(\n                        NettyServer.class.getSimpleName(),\n                        xxlRpcProviderFactory.getCorePoolSize(),\n                        xxlRpcProviderFactory.getMaxPoolSize());\n                EventLoopGroup bossGroup = new NioEventLoopGroup();\n                EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n                try {\n                    ServerBootstrap bootstrap = new ServerBootstrap();\n                    bootstrap.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new ChannelInitializer<SocketChannel>() {\n                                @Override\n                                public void initChannel(SocketChannel channel) throws Exception {\n                                    channel.pipeline()\n                                            .addLast(new IdleStateHandler(0,0, Beat.BEAT_INTERVAL*3, TimeUnit.SECONDS))\n                                            .addLast(new NettyDecoder(XxlRpcRequest.class, xxlRpcProviderFactory.getSerializerInstance()))\n                                            .addLast(new NettyEncoder(XxlRpcResponse.class, xxlRpcProviderFactory.getSerializerInstance()))\n                                            .addLast(new NettyServerHandler(xxlRpcProviderFactory, serverHandlerPool));\n                                }\n                            })\n                            .childOption(ChannelOption.TCP_NODELAY, true)\n                            .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                    ChannelFuture future = bootstrap.bind(xxlRpcProviderFactory.getPort()).sync();\n                    onStarted();\n                    future.channel().closeFuture().sync();\n                } catch (Exception e) {\n                    if (e instanceof InterruptedException) {\n                        logger.info(\">>>>>>>>>>> xxl-rpc remoting server stop.\");\n                    } else {\n                        logger.error(\">>>>>>>>>>> xxl-rpc remoting server error.\", e);\n                    }\n                } finally {\n                    try {\n                        serverHandlerPool.shutdown();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                    try {\n                        workerGroup.shutdownGracefully();\n                        bossGroup.shutdownGracefully();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public void stop() throws Exception {\n        if (thread != null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        onStopped();\n        logger.info(\">>>>>>>>>>> xxl-rpc remoting server destroy success.\");\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}