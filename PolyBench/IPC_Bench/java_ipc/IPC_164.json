{
  "Task_id": 164,
  "Github_ID": "56679521",
  "Github_Project_Name": "motan",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements an HTTP server using Netty framework, capable of handling HTTP requests with configurable thread pool settings and connection management.\n\nClass Description: Netty4HttpServer is a Netty-based HTTP server implementation that handles incoming HTTP requests using configurable worker threads and connection pooling. It extends AbstractServer and implements StatisticCallback for monitoring purposes.\n\nAttributes:\n- httpMessageHandler: HttpMessageHandler - Handler for processing HTTP requests\n- url: URL - Server configuration URL containing parameters like port, thread settings\n- channel: Channel - Netty channel for server communication\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- standardThreadExecutor: StandardThreadExecutor - Thread pool for request processing\n\nMethods:\n- open() -> boolean - Initializes and starts the HTTP server, returns true if successful\n  Input: None\n  Output: boolean indicating success/failure of server startup\n\n- close(int timeout) -> void - Shuts down the server gracefully within specified timeout\n  Input: timeout - maximum time to wait for shutdown (in milliseconds)\n  Output: None\n\n- processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) -> void - Processes incoming HTTP requests\n  Input: \n    ctx - ChannelHandlerContext for the connection\n    httpRequest - Full HTTP request object\n  Output: None\n\n- sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) -> void - Sends HTTP response to client\n  Input:\n    ctx - ChannelHandlerContext for the connection\n    httpResponse - Full HTTP response object\n  Output: None\n\n- getUrl() -> URL - Returns server configuration URL\n  Input: None\n  Output: URL object containing server configuration",
  "Canonical_solution": "import com.weibo.api.motan.common.ChannelState;\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.common.URLParamType;\nimport com.weibo.api.motan.core.DefaultThreadFactory;\nimport com.weibo.api.motan.core.StandardThreadExecutor;\nimport com.weibo.api.motan.exception.MotanFrameworkException;\nimport com.weibo.api.motan.rpc.Request;\nimport com.weibo.api.motan.rpc.Response;\nimport com.weibo.api.motan.rpc.URL;\nimport com.weibo.api.motan.transport.AbstractServer;\nimport com.weibo.api.motan.transport.TransportException;\nimport com.weibo.api.motan.util.LoggerUtil;\nimport com.weibo.api.motan.util.StatisticCallback;\nimport com.weibo.api.motan.util.StatsUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\nimport java.net.InetSocketAddress;\n\npublic class Netty4HttpServer extends AbstractServer implements StatisticCallback {\n    private HttpMessageHandler httpMessageHandler;\n    private URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private StandardThreadExecutor standardThreadExecutor;\n\n    public Netty4HttpServer(URL url, HttpMessageHandler httpMessageHandler) {\n        this.url = url;\n        this.httpMessageHandler = httpMessageHandler;\n    }\n\n    @Override\n    public synchronized boolean open() {\n        if (isAvailable()) {\n            return true;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n        }\n        boolean shareChannel = url.getBooleanParameter(URLParamType.shareChannel.getName(), URLParamType.shareChannel.getBooleanValue());\n        int workerQueueSize = url.getIntParameter(URLParamType.workerQueueSize.getName(), 500);\n\n        int minWorkerThread, maxWorkerThread;\n\n        if (shareChannel) {\n            minWorkerThread = url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread = url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MAX_WORKDER);\n        } else {\n            minWorkerThread =\n                    url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread =\n                    url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MAX_WORKDER);\n        }\n        final int maxContentLength = url.getIntParameter(URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.getIntValue());\n        standardThreadExecutor = (standardThreadExecutor != null && !standardThreadExecutor.isShutdown()) ? standardThreadExecutor\n                : new StandardThreadExecutor(minWorkerThread, maxWorkerThread, workerQueueSize, new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        standardThreadExecutor.prestartAllCoreThreads();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(\"http-decoder\", new HttpRequestDecoder());\n                ch.pipeline().addLast(\"http-aggregator\", new HttpObjectAggregator(maxContentLength));\n                ch.pipeline().addLast(\"http-encoder\", new HttpResponseEncoder());\n                ch.pipeline().addLast(\"http-chunked\", new ChunkedWriteHandler());\n                ch.pipeline().addLast(\"serverHandler\", new SimpleChannelInboundHandler<FullHttpRequest>() {\n                    protected void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest httpRequest) {\n                        httpRequest.content().retain();\n                        try {\n                            standardThreadExecutor.execute(() -> processHttpRequest(ctx, httpRequest));\n                        } catch (Exception e) {\n                            LoggerUtil.error(\"request is rejected by threadPool!\", e);\n                            httpRequest.content().release();\n                            sendResponse(ctx, NettyHttpUtil.buildErrorResponse(\"request is rejected by thread pool!\"));\n                        }\n                    }\n                });\n            }\n        }).option(ChannelOption.SO_BACKLOG, 1024).childOption(ChannelOption.SO_KEEPALIVE, false);\n\n        ChannelFuture f;\n        try {\n            f = b.bind(url.getPort()).sync();\n            channel = f.channel();\n        } catch (InterruptedException e) {\n            LoggerUtil.error(\"init http server fail.\", e);\n            return false;\n        }\n        setLocalAddress((InetSocketAddress) channel.localAddress());\n        if (url.getPort() == 0) {\n            url.setPort(getLocalAddress().getPort());\n        }\n        state = ChannelState.ALIVE;\n        StatsUtil.registryStatisticCallback(this);\n        LoggerUtil.info(\"Netty4HttpServer ServerChannel finish Open: url=\" + url);\n        return true;\n    }\n\n    private void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        FullHttpResponse httpResponse;\n        try {\n            httpRequest.headers().set(URLParamType.host.getName(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress().getHostAddress());\n            httpResponse = httpMessageHandler.handle(this, httpRequest);\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler process http request fail.\", e);\n            httpResponse = NettyHttpUtil.buildErrorResponse(e.getMessage());\n        } finally {\n            httpRequest.content().release();\n        }\n        sendResponse(ctx, httpResponse);\n    }\n\n    private void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        boolean close = false;\n        try {\n            ctx.write(httpResponse);\n            ctx.flush();\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler write response fail.\", e);\n            close = true;\n        } finally {\n            if (close || httpResponse == null || !httpResponse.headers().contains(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE, true)) {\n                ctx.close();\n            }\n        }\n    }\n\n    @Override\n    public synchronized void close(int timeout) {\n        if (state.isCloseState()) {\n            LoggerUtil.info(\"Netty4HttpServer close fail: already close, url={}\", url.getUri());\n            return;\n        }\n\n        if (state.isUnInitState()) {\n            LoggerUtil.info(\"Netty4HttpServer close Fail: don't need to close because node is unInit state: url={}\",\n                    url.getUri());\n            return;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (standardThreadExecutor != null) {\n            standardThreadExecutor.shutdownNow();\n        }\n        workerGroup = null;\n        bossGroup = null;\n        standardThreadExecutor = null;\n        channel = null;\n        state = ChannelState.CLOSE;\n        StatsUtil.unRegistryStatisticCallback(this);\n    }\n\n    @Override\n    public URL getUrl() {\n        return url;\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}