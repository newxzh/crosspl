{
  "Task_id": 379,
  "Github_ID": "55224431",
  "Github_Project_Name": "whatsmars",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "RocketMQ Consumer in Java",
  "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The Consumer class is a RocketMQ message consumer that uses push-based consumption model. It allows subscribing to topics, registering message listeners, and managing the consumer lifecycle (startup and shutdown).\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- Constructor: Consumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group name and NameServer address. Sets the consumption offset strategy to start from the first offset.\n- subscribe: subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering using a subscription expression.\n- registerMessageListener: registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages.\n- start: start() -> void - Starts the consumer to begin message consumption.\n- shutdown: shutdown() -> void - Shuts down the consumer gracefully.\n\nNested Class:\n- SimpleMessageListener: Implements MessageListenerConcurrently interface to provide basic message handling functionality. Prints received messages and returns CONSUME_SUCCESS status.",
  "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.println(String.format(\"Consumer %s Started.\", consumer.getConsumerGroup()));\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                                                       ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
  "FSMID_for_test": 43,
  "Code_level": "Class-level"
}