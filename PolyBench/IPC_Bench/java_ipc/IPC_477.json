{
  "Task_id": 477,
  "Github_ID": "481412",
  "Github_Project_Name": "Java-WebSocket",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Server Handler using org.java_websocket",
  "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library to handle real-time bidirectional communication between clients and the server.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It handles client connections, message processing, disconnections, and error scenarios in a WebSocket communication environment.\n\nAttributes:\nNone explicitly declared in this implementation (inherits attributes from WebSocketServer parent class)\n\nMethods:\n1. onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new client connects to the server\n   - conn: WebSocket - The client connection object\n   - handshake: ClientHandshake - The handshake data from the client\n\n2. onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a client disconnects from the server\n   - conn: WebSocket - The client connection object\n   - code: int - The status code for disconnection\n   - reason: String - The reason for disconnection\n   - remote: boolean - Whether the disconnection was initiated by the remote host\n\n3. onMessage(WebSocket conn, String message) -> void - Called when a message is received from a client\n   - conn: WebSocket - The client connection object\n   - message: String - The received message content\n\n4. onError(WebSocket conn, Exception ex) -> void - Called when an error occurs\n   - conn: WebSocket - The client connection object (may be null if error isn't associated with a specific connection)\n   - ex: Exception - The exception that occurred\n\n5. onStart() -> void - Called when the server starts successfully\n\n6. LocalWebSocketFactory (nested class) - Implements WebSocketServerFactory for custom WebSocket creation\n   Methods:\n   a. createWebSocket(WebSocketAdapter a, Draft d) -> WebSocketImpl\n   b. createWebSocket(WebSocketAdapter a, List<Draft> drafts) -> WebSocketImpl\n   c. wrapChannel(SocketChannel channel, SelectionKey key) -> ByteChannel\n   d. close() -> void",
  "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.ByteChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.List;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketAdapter;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.WebSocketServerFactory;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup logic\n    }\n}\n\nprivate class LocalWebSocketFactory implements WebSocketServerFactory {\n\n    @Override\n    public WebSocketImpl createWebSocket(WebSocketAdapter a, Draft d) {\n        return null;\n    }\n\n    @Override\n    public WebSocketImpl createWebSocket(WebSocketAdapter a, List<Draft> drafts) {\n        return null;\n    }\n\n    @Override\n    public ByteChannel wrapChannel(SocketChannel channel, SelectionKey key) throws IOException {\n        return null;\n    }\n\n    @Override\n    public void close() {\n        // Cleanup resources\n    }\n}",
  "FSMID_for_test": 28,
  "Code_level": "Class-level"
}