{
  "Task_id": 144,
  "Github_ID": "55224431",
  "Github_Project_Name": "whatsmars",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Client",
  "Instruction": "Task Description: Create a Java class that implements a HTTP client using Netty framework to send HTTP requests and receive responses.\n\nClass Description: The HttpSnoopClient class is a Netty-based HTTP client that establishes TCP connections, sends HTTP requests, and handles responses. It supports SSL/TLS connections and provides methods for connection management.\n\nAttributes:\n- group: [NioEventLoopGroup] - Manages event loops for client I/O operations\n- bootstrap: [Bootstrap] - Configures and initializes the Netty client\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- HttpSnoopClient(): [Constructor] -> [void] - Initializes the event loop group and bootstrap instance\n- connect(String host, int port, SslContext sslCtx): [void] -> [void] - Establishes a connection to the specified host and port with optional SSL context\n- sendRequest(URI uri, String host): [void] -> [void] - Sends an HTTP GET request to the specified URI with appropriate headers\n- waitForClose(): [void] -> [void] - Waits for the channel to close\n- shutdown(): [void] -> [void] - Shuts down the event loop group gracefully\n- createSslContext(): [static] -> [SslContext] - Creates and returns an SSL context with insecure trust manager for testing purposes",
  "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.cookie.ClientCookieEncoder;\nimport io.netty.handler.codec.http.cookie.DefaultCookie;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.net.URI;\n\npublic final class HttpSnoopClient {\n\n    static final String URL = System.getProperty(\"url\", \"http://127.0.0.1:8080/\");\n\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) throws InterruptedException {\n        bootstrap.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new HttpSnoopClientInitializer(sslCtx));\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void sendRequest(URI uri, String host) {\n        HttpRequest request = new DefaultFullHttpRequest(\n                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().set(\n                HttpHeaderNames.COOKIE,\n                ClientCookieEncoder.STRICT.encode(\n                        new DefaultCookie(\"my-cookie\", \"foo\"),\n                        new DefaultCookie(\"another-cookie\", \"bar\")));\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() throws InterruptedException {\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static SslContext createSslContext() throws Exception {\n        return SslContextBuilder.forClient()\n            .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n    }\n}",
  "FSMID_for_test": 3,
  "Code_level": "Class-level"
}