{
  "Task_id": 608,
  "Github_ID": "16462032",
  "Github_Project_Name": "mucommander",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net UDP Server or Client",
  "Instruction": "Task Description: Implement a UDP-based client class for network communication that can send and receive datagram packets, manage connections, and handle timeouts.\n\nClass Description: ConnectDatagram is a UDP client class that extends a base Connection class. It provides functionality for sending and receiving XDR-encoded data over UDP, managing socket connections, and handling peer address information.\n\nAttributes:\n- ds: DatagramSocket - The UDP socket used for communication\n- dp: DatagramPacket - The packet used for receiving data\n- addr: InetAddress - The IP address of the server/peer\n\nMethods:\n- ConnectDatagram(String server, int port, int maxSize) -> void - Constructor that initializes the UDP connection with server address, port, and maximum packet size\n- sendOne(Xdr x) -> void - Sends an XDR-encoded packet to the server\n- receiveOne(Xdr x, int timeout) -> void - Receives an XDR-encoded packet with a specified timeout\n- getPeer() -> InetAddress - Returns the address of the peer that sent the last received packet\n- dropConnection() -> void - Placeholder for connection cleanup (UDP is connectionless)\n- checkConnection() -> void - Placeholder for connection verification (UDP is connectionless)\n- finalize() -> void - Cleans up resources by closing the socket when the object is garbage collected",
  "Canonical_solution": "import java.io.*;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class ConnectDatagram extends Connection {\n\n    DatagramSocket ds;\n    DatagramPacket dp;\n    InetAddress addr;\n\n    public ConnectDatagram(String server, int port, int maxSize) throws IOException {\n        super(server, port, \"udp\", maxSize);\n        ds = new DatagramSocket();\n        addr = InetAddress.getByName(server);\n        start();\n    }\n\n    void sendOne(Xdr x) throws IOException {\n        ds.send(new DatagramPacket(x.xdr_buf(), x.xdr_offset(), addr, port));\n    }\n\n    void receiveOne(Xdr x, int timeout) throws IOException {\n        ds.setSoTimeout(timeout);\n        dp = new DatagramPacket(x.xdr_buf(), x.xdr_buf().length);\n        ds.receive(dp);\n    }\n\n    InetAddress getPeer() {\n        return dp.getAddress();\n    }\n\n    void dropConnection() {\n    }\n\n    void checkConnection() {\n    }\n\n    protected void finalize() throws Throwable {\n        if (ds != null) {\n            ds.close();\n            ds = null;\n        }\n        super.finalize();\n    }\n}",
  "FSMID_for_test": 2,
  "Code_level": "Class-level"
}