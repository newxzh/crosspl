{
  "Task_id": 182,
  "Github_ID": "30628859",
  "Github_Project_Name": "netty-4-user-guide-demos",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to echo back any received messages to clients.\n\nClass Description: The EchoServer class is a Netty-based TCP server that listens on a specified port and echoes back any data received from connected clients. It manages server lifecycle including startup, shutdown, and resource cleanup.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and distributes them to workerGroup\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for established connections\n- bootstrap: [ServerBootstrap] - Netty server configuration and management object\n- DEFAULT_PORT: [int] - Default port number (7) to use when no port is specified\n\nMethods:\n- EchoServer() -> [void] - Constructor that initializes bossGroup, workerGroup and bootstrap\n- start([int port]) -> [void] - Starts the server on specified port, configures channel pipeline and binds to port\n- shutdown() -> [void] - Gracefully shuts down the server and releases all resources\n- main([String[] args]) -> [void] - Entry point that parses command line arguments and starts the server",
  "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class EchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws InterruptedException {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new EchoServerHandler())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"EchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        EchoServer server = new EchoServer();\n        server.start(port);\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}