{
  "Task_id": 327,
  "Github_ID": "19641638",
  "Github_Project_Name": "lettuce",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Redis in Java",
  "Instruction": "Task Description: Create a Java class that establishes a secure SSL/TLS connection to a Redis server using Lettuce client library, with support for SNI (Server Name Indication) and custom truststore configuration.\n\nClass Description: The RedisSSLConnection class provides a secure way to connect to a Redis server using SSL/TLS encryption. It handles SSL configuration including truststore setup and SNI support, and manages the Redis client lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) -> void - Constructor that initializes the Redis client with SSL configuration\n  - redisUri: String - Redis server URI (e.g., \"rediss://host:port\")\n  - hostName: String - The hostname for SNI\n  - truststorePath: String - Path to the truststore file\n  - truststorePassword: String - Password for the truststore\n- getConnection() -> StatefulRedisConnection<String, String> - Returns the established Redis connection\n- close() -> void - Closes the connection and shuts down the Redis client",
  "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.SslOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport javax.net.ssl.SNIHostName;\nimport javax.net.ssl.SNIServerName;\nimport javax.net.ssl.SSLParameters;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RedisSSLConnection {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        this.redisClient = RedisClient.create(redisUri);\n\n        List<SNIServerName> serverNames = new ArrayList<>();\n        serverNames.add(new SNIHostName(hostName));\n        \n        SslOptions sslOptions = SslOptions.builder()\n                .jdkSslProvider()\n                .truststore(new File(truststorePath), truststorePassword)\n                .sslParameters(() -> {\n                    SSLParameters parameters = new SSLParameters();\n                    parameters.setServerNames(serverNames);\n                    return parameters;\n                }).build();\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .sslOptions(sslOptions)\n                .build();\n        \n        redisClient.setOptions(clientOptions);\n        this.connection = redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
  "FSMID_for_test": 37,
  "Code_level": "Class-level"
}