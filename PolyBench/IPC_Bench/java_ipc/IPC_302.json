{
  "Task_id": 302,
  "Github_ID": "17089728",
  "Github_Project_Name": "syncthing-android",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "ProcessBuilder in java.io",
  "Instruction": "Task Description: Create a Java class that handles process execution, logging, and management, with support for both regular and root-level execution on Android systems.\n\nClass Description: ProcessHandler is a utility class designed to manage external process execution in Android applications. It provides functionality to launch processes (with optional root privileges), capture and log their output, and retrieve process information. The class handles environment variables, stream management, and maintains a wake lock during process execution to prevent CPU sleep.\n\nAttributes:\n- mContext: [Context] - Android application context used for system services\n- mUseRoot: [boolean] - Flag indicating whether root privileges should be used\n- mPreferences: [SharedPreferences] - Shared preferences for configuration\n\nMethods:\n- setupAndLaunch([HashMap<String, String> env, String[] command]) -> [Process] - Configures and starts a process with the given environment variables and command, supporting both regular and root execution\n- log([InputStream is, int priority]) -> [Thread] - Starts a thread to continuously read and log input from the given stream at the specified log priority\n- runProcess([ProcessBuilder pb, boolean returnStdOut]) -> [String] - Executes a process, optionally capturing its standard output, while maintaining a wake lock and logging output\n- getProcessPIDs([String processName]) -> [List<String>] - Returns a list of process IDs matching the given process name, supporting both regular and root-level process listing",
  "Canonical_solution": "import android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.os.PowerManager;\nimport android.util.Log;\n\nimport com.google.common.base.Charsets;\nimport com.nutomic.syncthingandroid.service.Constants;\nimport com.nutomic.syncthingandroid.util.Util;\n\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.inject.Inject;\n\nimport eu.chainfire.libsuperuser.Shell;\n\npublic class ProcessHandler {\n\n    private static final String TAG = \"ProcessHandler\";\n    private final Context mContext;\n    private final boolean mUseRoot;\n    @Inject SharedPreferences mPreferences;\n\n    public ProcessHandler(Context context) {\n        mContext = context;\n        mUseRoot = mPreferences.getBoolean(Constants.PREF_USE_ROOT, false) && Shell.SU.available();\n    }\n\n    public Process setupAndLaunch(HashMap<String, String> env, String[] command) throws IOException {\n        if (mUseRoot) {\n            ProcessBuilder pb = new ProcessBuilder(\"su\");\n            Process process = pb.start();\n            DataOutputStream suOut = new DataOutputStream(process.getOutputStream());\n            for (Map.Entry<String, String> entry : env.entrySet()) {\n                suOut.writeBytes(String.format(\"export %s=\\\"%s\\\"\\n\", entry.getKey(), entry.getValue()));\n            }\n            suOut.flush();\n            suOut.writeBytes(\"exec \" + TextUtils.join(\" \", command) + \"\\n\");\n            suOut.flush();\n            return process;\n        } else {\n            ProcessBuilder pb = new ProcessBuilder(command);\n            pb.environment().putAll(env);\n            return pb.start();\n        }\n    }\n\n    public Thread log(final InputStream is, final int priority) {\n        Thread t = new Thread(() -> {\n            BufferedReader br = null;\n            try {\n                br = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));\n                String line;\n                while ((line = br.readLine()) != null) {\n                    Log.println(priority, TAG, line);\n                }\n            } catch (IOException e) {\n                Log.w(TAG, \"Failed to read process output\", e);\n            } finally {\n                if (br != null) {\n                    try {\n                        br.close();\n                    } catch (IOException e) {\n                        Log.w(TAG, \"Failed to close bufferedReader\", e);\n                    }\n                }\n            }\n        });\n        t.start();\n        return t;\n    }\n\n    @SuppressLint(\"WakelockTimeout\")\n    public String runProcess(ProcessBuilder pb, boolean returnStdOut) {\n        String capturedStdOut = \"\";\n        PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\n        PowerManager.WakeLock wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);\n        try {\n            wakeLock.acquire();\n            Process process = pb.start();\n\n            Thread lInfo = null;\n            Thread lWarn = null;\n            if (returnStdOut) {\n                BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream(), Charsets.UTF_8));\n                String line;\n                while ((line = br.readLine()) != null) {\n                    Log.println(Log.INFO, TAG, line);\n                    capturedStdOut = capturedStdOut + line + \"\\n\";\n                }\n                br.close();\n            } else {\n                lInfo = log(process.getInputStream(), Log.INFO);\n                lWarn = log(process.getErrorStream(), Log.WARN);\n            }\n\n            int ret = process.waitFor();\n            Log.i(TAG, \"Process exited with code \" + ret);\n            if (lInfo != null) lInfo.join();\n            if (lWarn != null) lWarn.join();\n        } catch (IOException | InterruptedException e) {\n            Log.e(TAG, \"Failed to execute process or read output\", e);\n        } finally {\n            wakeLock.release();\n        }\n        return capturedStdOut;\n    }\n\n    public List<String> getProcessPIDs(String processName) {\n        List<String> pids = new ArrayList<>();\n        Process ps = null;\n        DataOutputStream psOut = null;\n        BufferedReader br = null;\n        try {\n            ps = Runtime.getRuntime().exec((mUseRoot) ? \"su\" : \"sh\");\n            psOut = new DataOutputStream(ps.getOutputStream());\n            psOut.writeBytes(\"ps\\n\");\n            psOut.writeBytes(\"exit\\n\");\n            psOut.flush();\n            ps.waitFor();\n            br = new BufferedReader(new InputStreamReader(ps.getInputStream(), \"UTF-8\"));\n            String line;\n            while ((line = br.readLine()) != null) {\n                if (line.contains(processName)) {\n                    String pid = line.trim().split(\"\\\\s+\")[1];\n                    Log.v(TAG, \"getProcessPIDs: Found process PID [\" + pid + \"]\");\n                    pids.add(pid);\n                }\n            }\n        } catch (IOException | InterruptedException e) {\n            Log.w(TAG, \"Failed to list processes\", e);\n        } finally {\n            try {\n                if (br != null) br.close();\n                if (psOut != null) psOut.close();\n            } catch (IOException e) {\n                Log.w(TAG, \"Failed to close streams\", e);\n            }\n            if (ps != null) ps.destroy();\n        }\n        return pids;\n    }\n}",
  "FSMID_for_test": 44,
  "Code_level": "Class-level"
}