{
  "Task_id": 446,
  "Github_ID": "537800",
  "Github_Project_Name": "metrics",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "UDP sender based on java.nio",
  "Instruction": "Task Description: Create a Java class that implements a non-blocking UDP sender using Java NIO's DatagramChannel for asynchronous communication.\n\nClass Description: The Sender class provides functionality to establish a non-blocking UDP connection, send data packets to a specified host and port, and manage the connection lifecycle. It uses Java NIO's DatagramChannel for efficient network communication.\n\nAttributes:\n- host: [String] - The target hostname or IP address for UDP communication\n- port: [int] - The target port number for UDP communication\n- address: [InetSocketAddress] - The socket address combining host and port for the target\n- channel: [DatagramChannel] - The NIO channel used for UDP communication\n\nMethods:\n- connect(): [void] -> [void] - Opens a DatagramChannel and prepares it for communication. Throws IOException if connection fails and IllegalStateException if already connected.\n- isConnected(): [void] -> [boolean] - Checks if the channel is currently connected and not closed.\n- send(ByteBuffer buffer): [ByteBuffer] -> [void] - Sends the contents of the provided ByteBuffer to the target address. Throws IOException if sending fails.\n- disconnect(): [void] -> [void] - Closes the DatagramChannel and releases resources. Safe to call even if not connected.",
  "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class Sender {\n\n    private final String host;\n    private final int port;\n    private InetSocketAddress address;\n    private DatagramChannel channel;\n\n    public Sender(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void connect() throws IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        if (host != null) {\n            address = new InetSocketAddress(host, port);\n        }\n        channel = DatagramChannel.open();\n    }\n\n    public boolean isConnected() {\n        return channel != null && !channel.socket().isClosed();\n    }\n\n    public void send(ByteBuffer buffer) throws IOException {\n        channel.send(buffer, address);\n    }\n\n    public void disconnect() throws IOException {\n        if (channel == null) {\n            return;\n        }\n        try {\n            channel.close();\n        } finally {\n            channel = null;\n        }\n    }\n}",
  "FSMID_for_test": 8,
  "Code_level": "Class-level"
}