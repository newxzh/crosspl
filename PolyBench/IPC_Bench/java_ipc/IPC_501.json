{
  "Task_id": 501,
  "Github_ID": "115411826",
  "Github_Project_Name": "java-tron",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "gRPC Client in java",
  "Instruction": "Task Description: Create a gRPC client class in Java for interacting with a Tron blockchain wallet service, implementing various wallet operations through gRPC calls.\n\nClass Description: The WalletGrpcClient class provides a Java interface to interact with a Tron blockchain node's wallet service using gRPC. It handles connection management and provides methods for account queries, transaction creation, and blockchain data retrieval.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- walletBlockingStub: [WalletGrpc.WalletBlockingStub] - The blocking stub for making synchronous RPC calls\n\nMethods:\n- WalletGrpcClient(String host, int port) - Constructor - Creates a client connecting to specified host and port\n- WalletGrpcClient(String host) - Constructor - Creates a client connecting to specified host (using target format)\n- shutdown() -> void - Shuts down the channel with 5-second timeout\n- queryAccount(byte[] address) -> Account - Queries account information by address\n- createTransaction(TransferContract contract) -> Transaction - Creates a transfer transaction\n- createTransferAssetTransaction(TransferAssetContract contract) -> Transaction - Creates an asset transfer transaction\n- createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) -> Transaction - Creates an asset participation transaction\n- createAssetIssue(AssetIssueContract contract) -> Transaction - Creates an asset issuance transaction\n- voteWitnessAccount(VoteWitnessContract contract) -> Transaction - Creates a witness voting transaction\n- createWitness(WitnessCreateContract contract) -> Transaction - Creates a witness creation transaction\n- broadcastTransaction(Transaction signedTransaction) -> boolean - Broadcasts a signed transaction to network\n- getBlock(long blockNum) -> Block - Retrieves block by number (or latest if negative)\n- listNodes() -> Optional<NodeList> - Lists connected nodes\n- getAssetIssueByAccount(byte[] address) -> Optional<AssetIssueList> - Gets assets issued by account\n- getAssetIssueByName(String assetName) -> AssetIssueContract - Gets asset by name\n- getAssetIssueListByName(String assetName) -> Optional<AssetIssueList> - Gets asset list by name\n- getAssetIssueById(String assetId) -> AssetIssueContract - Gets asset by ID",
  "Canonical_solution": "import com.google.protobuf.ByteString;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI.AssetIssueList;\nimport org.tron.api.GrpcAPI.BytesMessage;\nimport org.tron.api.GrpcAPI.EmptyMessage;\nimport org.tron.api.GrpcAPI.NodeList;\nimport org.tron.api.GrpcAPI.NumberMessage;\nimport org.tron.api.GrpcAPI.Return;\nimport org.tron.api.WalletGrpc;\nimport org.tron.protos.Protocol.Account;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.Transaction;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.AssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.ParticipateAssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.TransferAssetContract;\nimport org.tron.protos.contract.BalanceContract.TransferContract;\nimport org.tron.protos.contract.WitnessContract.VoteWitnessContract;\nimport org.tron.protos.contract.WitnessContract.WitnessCreateContract;\n\npublic class WalletGrpcClient {\n\n  private final ManagedChannel channel;\n  private final WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n  public WalletGrpcClient(String host, int port) {\n    channel = ManagedChannelBuilder.forAddress(host, port)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public WalletGrpcClient(String host) {\n    channel = ManagedChannelBuilder.forTarget(host)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public Account queryAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    return walletBlockingStub.getAccount(request);\n  }\n\n  public Transaction createTransaction(TransferContract contract) {\n    return walletBlockingStub.createTransaction(contract);\n  }\n\n  public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n    return walletBlockingStub.transferAsset(contract);\n  }\n\n  public Transaction createParticipateAssetIssueTransaction(\n      ParticipateAssetIssueContract contract) {\n    return walletBlockingStub.participateAssetIssue(contract);\n  }\n\n  public Transaction createAssetIssue(AssetIssueContract contract) {\n    return walletBlockingStub.createAssetIssue(contract);\n  }\n\n  public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n    return walletBlockingStub.voteWitnessAccount(contract);\n  }\n\n  public Transaction createWitness(WitnessCreateContract contract) {\n    return walletBlockingStub.createWitness(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signedTransaction) {\n    Return response = walletBlockingStub.broadcastTransaction(signedTransaction);\n    return response.getResult();\n  }\n\n  public Block getBlock(long blockNum) {\n    if (blockNum < 0) {\n      return walletBlockingStub.getNowBlock(EmptyMessage.newBuilder().build());\n    }\n    NumberMessage.Builder builder = NumberMessage.newBuilder();\n    builder.setNum(blockNum);\n    return walletBlockingStub.getBlockByNum(builder.build());\n  }\n\n  public Optional<NodeList> listNodes() {\n    NodeList nodeList = walletBlockingStub\n        .listNodes(EmptyMessage.newBuilder().build());\n    if (nodeList != null) {\n      return Optional.of(nodeList);\n    }\n    return Optional.empty();\n  }\n\n  public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueByAccount(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n    return walletBlockingStub.getAssetIssueByName(request);\n  }\n\n  public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueListByName(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueById(String assetId) {\n    ByteString assetIdBs = ByteString.copyFrom(assetId.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetIdBs).build();\n    return walletBlockingStub.getAssetIssueById(request);\n  }\n}",
  "FSMID_for_test": 23,
  "Code_level": "Class-level"
}