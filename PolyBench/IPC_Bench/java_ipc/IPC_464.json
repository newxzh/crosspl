{
  "Task_id": 464,
  "Github_ID": "91674936",
  "Github_Project_Name": "servicecomb-java-chassis",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client Implementation using org.java_websocket",
  "Instruction": "Task Description: Implement a WebSocket client class that handles secure WebSocket connections with custom SSL configuration and event delegation.\n\nClass Description: WebSocketTransport is a WebSocket client implementation that extends the WebSocketClient class from the org.java_websocket library. It manages WebSocket connections with optional SSL/TLS encryption and delegates connection events to a listener interface. The class handles connection establishment, message reception, and connection termination events.\n\nAttributes:\n- CONNECT_TIMEOUT: int - Static constant defining the connection timeout in milliseconds (5000ms)\n- webSocketListener: WebSocketListener - Interface reference for handling WebSocket events (open, message, close, error)\n\nMethods:\n- WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) -> None - Constructor that initializes the WebSocket client with server URI, SSL properties, custom headers, and event listener. Throws URISyntaxException for invalid URIs.\n- onOpen(ServerHandshake serverHandshake) -> void - Callback when WebSocket connection is established. Delegates to webSocketListener.\n- onMessage(String s) -> void - Callback when a text message is received. Delegates to webSocketListener.\n- onClose(int code, String reason, boolean remote) -> void - Callback when connection is closed. Delegates to webSocketListener.\n- onError(Exception e) -> void - Callback when an error occurs. Delegates to webSocketListener.",
  "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\nimport javax.net.ssl.SSLSocketFactory;\n\nimport org.apache.servicecomb.foundation.ssl.SSLManager;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class WebSocketTransport extends WebSocketClient {\n  public static final int CONNECT_TIMEOUT = 5000;\n\n  private final WebSocketListener webSocketListener;\n\n  public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties,\n      Map<String, String> headers, WebSocketListener webSocketListener)\n      throws URISyntaxException {\n    super(new URI(serverUri), new Draft_6455(), headers, CONNECT_TIMEOUT);\n\n    if (sslProperties.isEnabled()) {\n      SSLSocketFactory sslSocketFactory = SSLManager\n          .createSSLSocketFactory(sslProperties.getSslOption(), sslProperties.getSslCustom());\n      URI uri = new URI(serverUri);\n      setSocketFactory(new SSLSocketFactoryExt(sslSocketFactory, uri.getHost(), uri.getPort()));\n    }\n\n    this.webSocketListener = webSocketListener;\n  }\n\n  @Override\n  public void onOpen(ServerHandshake serverHandshake) {\n    this.webSocketListener.onOpen(serverHandshake);\n  }\n\n  @Override\n  public void onMessage(String s) {\n    this.webSocketListener.onMessage(s);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    this.webSocketListener.onClose(code, reason, remote);\n  }\n\n  @Override\n  public void onError(Exception e) {\n    this.webSocketListener.onError(e);\n  }\n}",
  "FSMID_for_test": 27,
  "Code_level": "Class-level"
}