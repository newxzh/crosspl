{
  "Task_id": 448,
  "Github_ID": "57261362",
  "Github_Project_Name": "mpush",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "UDP sender based on java.nio",
  "Instruction": "Task Description: Implement a Java class for multicast UDP communication using Java NIO's DatagramChannel for both sending and receiving messages in a non-blocking manner.\n\nClass Description: The MulticastUDP class provides functionality for joining a multicast group, sending messages to specified targets, receiving messages from the group, and closing the communication channel. It utilizes Java NIO's non-blocking capabilities for efficient UDP communication.\n\nAttributes:\n- channel: DatagramChannel - The NIO channel used for UDP communication  \n- group: InetAddress - The multicast group address  \n- port: int - The port number for multicast communication  \n\nMethods:\n- MulticastUDP(String host, int port) -> void - Constructor that initializes the multicast group address and port, and opens a DatagramChannel  \n- joinGroup() -> void - Binds the channel to the specified port and joins the multicast group  \n- receive() -> String - Receives a message from the multicast group and returns it as a String  \n- send(String message, String targetHost, int targetPort) -> void - Sends a message to a specified target host and port  \n- close() -> void - Closes the DatagramChannel to release resources",
  "Canonical_solution": "import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic final class MulticastUDP {\n\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws Exception {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open(StandardProtocolFamily.INET);\n    }\n\n    public void joinGroup() throws Exception {\n        channel.bind(new InetSocketAddress(port));\n        channel.join(group, Utils.getLocalNetworkInterface());\n    }\n\n    public String receive() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        SocketAddress sender = channel.receive(buffer);\n        buffer.flip();\n        byte[] data = new byte[buffer.remaining()];\n        buffer.get(data);\n        return new String(data);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws Exception {\n        channel.configureBlocking(true);\n        InetSocketAddress sender = new InetSocketAddress(targetHost, targetPort);\n        channel.send(ByteBuffer.wrap(message.getBytes()), sender);\n    }\n\n    public void close() throws Exception {\n        channel.close();\n    }\n}",
  "FSMID_for_test": 8,
  "Code_level": "Class-level"
}