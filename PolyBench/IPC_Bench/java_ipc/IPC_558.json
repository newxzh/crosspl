{
  "Task_id": 558,
  "Github_ID": "40165346",
  "Github_Project_Name": "LayoutCast",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "java.net ServerSocket",
  "Instruction": "Task Description: Implement a simple embedded HTTP server in Java that can handle incoming HTTP requests, parse request headers, and delegate request handling to a customizable method.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP requests, and provides hooks for custom request handling.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- serverSocket: ServerSocket - The server socket used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a new thread to handle connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- handle(String method, String path, HashMap<String, String> headers, InputStream input, OutputStream response) -> void - Abstract method to be implemented for custom request handling (takes HTTP method, path, headers, request body stream, and response stream)\n- run() -> void - Main server loop that accepts connections, parses requests, and delegates to handle() method (implements Runnable interface)\n- BodyInputStream(InputStream ins, int n) -> None - Nested class constructor that creates an input stream with limited bytes to read\n- available() -> int - Returns the number of bytes available in the BodyInputStream\n- read() -> int - Reads a single byte from the BodyInputStream\n- read(byte[] b, int off, int len) -> int - Reads bytes into an array from the BodyInputStream\n- skip(long n) -> long - Throws IOException as skipping is not supported\n- close() -> void - Closes the underlying input stream",
  "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\n\npublic class EmbedHttpServer implements Runnable {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    protected void handle(String method, String path,\n            HashMap<String, String> headers, InputStream input,\n            OutputStream response) throws Exception {\n    }\n\n    @Override\n    public void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<String, String>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0\n                                && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                handle(method, path, headers, input, os);\n                os.close();\n\n                conn.close();\n                conn = null;\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {\n                    }\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    private static class BodyInputStream extends InputStream {\n        private InputStream ins;\n        private int n;\n\n        public BodyInputStream(InputStream ins, int n) {\n            this.ins = ins;\n            this.n = n;\n        }\n\n        @Override\n        public int available() throws IOException {\n            return n;\n        }\n\n        @Override\n        public int read() throws IOException {\n            if (n <= 0)\n                return -1;\n            int r = ins.read();\n            if (r != -1)\n                n--;\n            return r;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            if (n <= 0)\n                return -1;\n            int l = ins.read(b, off, len < n ? len : n);\n            if (l != -1)\n                n -= l;\n            return l;\n        }\n\n        @Override\n        public long skip(long n) throws IOException {\n            throw new IOException(\"unsupported\");\n        }\n\n        @Override\n        public void close() throws IOException {\n            ins.close();\n        }\n    }\n}",
  "FSMID_for_test": 0,
  "Code_level": "Class-level"
}