{
  "Task_id": 199,
  "Github_ID": "30628859",
  "Github_Project_Name": "netty-4-user-guide-demos",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "Java Netty TCP Server",
  "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle file-related operations over a network connection.\n\nClass Description: FileServer is a Netty-based TCP server that listens on a specified port for incoming connections, processes file-related requests using line-based text communication, and manages server resources efficiently.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Processes the accepted connections' I/O operations\n- port: [int] - The port number on which the server listens for connections\n\nMethods:\n- run: [run(int port)] -> [void] - Initializes and starts the Netty server on the specified port, configuring the server bootstrap with appropriate channel options and handlers\n  - Input: port [int] - The port number to bind the server to\n  - Output: None (void), but starts the server process\n- main: [main(String[] args)] -> [void] - Entry point that creates a FileServer instance and runs it on port 8082 (or a specified port if provided as command-line argument)\n  - Input: args [String[]] - Command line arguments (optional port number)\n  - Output: None (void), but initiates the server startup",
  "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LineBasedFrameDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\n\npublic class FileServer {\n\n    public void run(int port) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 100)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(\n                            new StringEncoder(CharsetUtil.UTF_8),\n                            new LineBasedFrameDecoder(1024),\n                            new StringDecoder(CharsetUtil.UTF_8),\n                            new FileServerHandler());\n                    }\n                });\n            ChannelFuture f = b.bind(port).sync();\n            System.out.println(\"Server start at port : \" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8082;\n        if (args.length > 0) {\n            try {\n                port = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                e.printStackTrace();\n            }\n        }\n        new FileServer().run(port);\n    }\n}",
  "FSMID_for_test": 4,
  "Code_level": "Class-level"
}