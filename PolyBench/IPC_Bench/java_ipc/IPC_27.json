{
  "Task_id": 27,
  "Github_ID": "318103",
  "Github_Project_Name": "pdfbox",
  "Programming_Language": "Java",
  "suffix": ".java",
  "Interface_class": "IPC",
  "Interface_name": "FileChannel usage in java.nio",
  "Instruction": "Task Description: Implement a class for memory-mapped file reading with random access capabilities using Java NIO's FileChannel and MappedByteBuffer.\n\nClass Description: RandomAccessReadMemoryMappedFile is a class that provides random access reading functionality for files using memory-mapped I/O. It maps a file into memory for efficient reading operations and implements common random access operations like seek, read, and position tracking.\n\nAttributes:\n- mappedByteBuffer: ByteBuffer - The memory-mapped buffer containing the file contents\n- size: long - The size of the file in bytes\n- fileChannel: FileChannel - The file channel used for memory mapping\n- unmapper: Consumer<? super ByteBuffer> - A consumer for properly unmapping the buffer when closing\n\nMethods:\n- Constructor(filename: String) -> void - Creates an instance by opening the specified file\n- Constructor(file: File) -> void - Creates an instance using the specified File object\n- Constructor(path: Path) -> void - Creates an instance using the specified Path object\n- close() -> void - Closes the file channel and unmaps the buffer\n- seek(position: long) -> void - Sets the reading position in the file\n- getPosition() -> long - Returns the current reading position\n- read() -> int - Reads a single byte from the current position\n- read(b: byte[], offset: int, length: int) -> int - Reads bytes into an array\n- length() -> long - Returns the file size\n- isClosed() -> boolean - Checks if the reader is closed\n- isEOF() -> boolean - Checks if the current position is at end of file\n- checkClosed() -> void - Internal method to verify the reader isn't closed (throws IOException if closed)",
  "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.EnumSet;\nimport java.util.Optional;\nimport java.util.function.Consumer;\n\npublic class RandomAccessReadMemoryMappedFile implements RandomAccessRead\n{\n    private ByteBuffer mappedByteBuffer;\n    private final long size;\n    private final FileChannel fileChannel;\n    private final Consumer<? super ByteBuffer> unmapper;\n\n    public RandomAccessReadMemoryMappedFile(String filename) throws IOException\n    {\n        this(new File(filename));\n    }\n\n    public RandomAccessReadMemoryMappedFile(File file) throws IOException\n    {\n        this(file.toPath());\n    }\n\n    public RandomAccessReadMemoryMappedFile(Path path) throws IOException\n    {\n        fileChannel = FileChannel.open(path, EnumSet.of(StandardOpenOption.READ));\n        size = fileChannel.size();\n        if (size > Integer.MAX_VALUE)\n        {\n            throw new IOException(getClass().getName() + \" doesn't yet support files bigger than \"\n                    + Integer.MAX_VALUE);\n        }\n        mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        unmapper = IOUtils::unmap;\n    }\n\n    @Override\n    public void close() throws IOException\n    {\n        if (fileChannel != null)\n        {\n            fileChannel.close();\n        }\n        if (mappedByteBuffer != null)\n        {\n            Optional.ofNullable(unmapper).ifPresent(u -> u.accept(mappedByteBuffer));\n            mappedByteBuffer = null;\n        }\n    }\n\n    @Override\n    public void seek(long position) throws IOException\n    {\n        checkClosed();\n        if (position < 0)\n        {\n            throw new IOException(\"Invalid position \"+position);\n        }\n        mappedByteBuffer.position((int) Math.min(position, size));\n    }\n\n    @Override\n    public long getPosition() throws IOException\n    {\n       checkClosed();\n       return mappedByteBuffer.position();\n    }\n\n    @Override\n    public int read() throws IOException\n    {\n        if (isEOF())\n        {\n            return -1;\n        }\n        return mappedByteBuffer.get() & 0xff;\n    }\n\n    @Override\n    public int read(byte[] b, int offset, int length) throws IOException\n    {\n        if (isEOF())\n        {\n            return -1;\n        }\n        int remainingBytes = (int)size - mappedByteBuffer.position();\n        remainingBytes = Math.min(remainingBytes, length);\n        mappedByteBuffer.get(b, offset, remainingBytes);\n        return remainingBytes;\n    }\n\n    @Override\n    public long length() throws IOException\n    {\n        checkClosed();\n        return size;\n    }\n\n    private void checkClosed() throws IOException\n    {\n        if (isClosed())\n        {\n            throw new IOException(getClass().getSimpleName() + \" already closed\");\n        }\n    }\n\n    @Override\n    public boolean isClosed()\n    {\n        return mappedByteBuffer == null;\n    }\n\n    @Override\n    public boolean isEOF() throws IOException\n    {\n        checkClosed();\n        return mappedByteBuffer.position() >= size;\n    }\n}",
  "FSMID_for_test": 9,
  "Code_level": "Class-level"
}