{
  "Task_id": 20,
  "Github_ID": "70655231",
  "Github_Project_Name": "libco",
  "Programming_Language": "C++",
  "suffix": ".cpp",
  "Interface_class": "IPC",
  "Interface_name": "TCP Client based on socket+inet in C++",
  "Instruction": "Task Description: Implement a TCP client function that establishes a connection to a server, sends data, and reads the server's response in a continuous loop, handling connection errors and reconnection attempts.\n\nFunction Description: The function `readwrite_routine` implements a TCP client that continuously attempts to connect to a specified server endpoint. Once connected, it sends a fixed message and reads the server's response. If the connection fails or is lost, it automatically attempts to reconnect. The function handles connection states and errors appropriately, including non-blocking connection scenarios.\n\nInput: \n- `arg` (void pointer): A pointer to a `stEndPoint` structure containing:\n  - `ip` (char pointer): The IP address of the server to connect to (can be NULL or special values for default behavior)\n  - `port` (unsigned short int): The port number of the server to connect to\n\nOutput: \n- Returns NULL (void pointer) when the loop exits (though the provided implementation has an infinite loop)\n- No explicit return value, but performs I/O operations through the socket\n\nNote: The function runs in an infinite loop and should typically be executed in a separate thread. It manages its own socket lifecycle, creating and closing sockets as needed during connection attempts and communication.",
  "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nstruct stEndPoint\n{\n    char *ip;\n    unsigned short int port;\n};\n\nstatic void SetAddr(const char *pszIP, const unsigned short shPort, struct sockaddr_in &addr)\n{\n    bzero(&addr, sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(shPort);\n    int nIP = 0;\n    if(!pszIP || '\\0' == *pszIP   \n            || 0 == strcmp(pszIP,\"0\") || 0 == strcmp(pszIP,\"0.0.0.0\") \n            || 0 == strcmp(pszIP,\"*\") \n      )\n    {\n        nIP = htonl(INADDR_ANY);\n    }\n    else\n    {\n        nIP = inet_addr(pszIP);\n    }\n    addr.sin_addr.s_addr = nIP;\n}\n\nstatic void *readwrite_routine(void *arg)\n{\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char str[8] = \"sarlmol\";\n    char buf[1024 * 16];\n    int fd = -1;\n    int ret = 0;\n    \n    for(;;)\n    {\n        if(fd < 0)\n        {\n            fd = socket(PF_INET, SOCK_STREAM, 0);\n            struct sockaddr_in addr;\n            SetAddr(endpoint->ip, endpoint->port, addr);\n            ret = connect(fd, (struct sockaddr*)&addr, sizeof(addr));\n            \n            if(errno == EALREADY || errno == EINPROGRESS)\n            {       \n                struct pollfd pf = {0};\n                pf.fd = fd;\n                pf.events = (POLLOUT|POLLERR|POLLHUP);\n                co_poll(co_get_epoll_ct(), &pf, 1, 200);\n                \n                int error = 0;\n                uint32_t socklen = sizeof(error);\n                errno = 0;\n                ret = getsockopt(fd, SOL_SOCKET, SO_ERROR, (void *)&error, &socklen);\n                if(ret == -1)\n                {       \n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n                if(error)\n                {       \n                    errno = error;\n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n            }\n        }\n        \n        ret = write(fd, str, 8);\n        if(ret > 0)\n        {\n            ret = read(fd, buf, sizeof(buf));\n            if(ret <= 0)\n            {\n                close(fd);\n                fd = -1;\n            }\n        }\n        else\n        {\n            close(fd);\n            fd = -1;\n        }\n    }\n    return 0;\n}",
  "FSMID_for_test": 149,
  "Code_level": "Function-level"
}