{
    "Task_id": 370,
    "Github_ID": "97128069",
    "Github_Project_Name": "glider",
    "Programming_Language": "Go",
    "suffix": ".go",
    "Interface_class": "IPC",
    "Interface_name": "net-based UDP Server in Go",
    "Instruction": "Task Description: Implement a UDP server in Go that listens for incoming packets, manages client sessions, and proxies the traffic to a remote destination using a provided proxy dialer.\n\nStruct Description: The UDP struct represents a UDP server that handles incoming connections, manages sessions, and proxies traffic. It maintains session state and coordinates communication between clients and the proxy server.\n\nFields:\n- addr: string - The local address to listen on\n- uaddr: *net.UDPAddr - The resolved UDP address\n- dialer: proxy.Dialer - The dialer used to establish connections\n- proxy: proxy.Proxy - The proxy implementation for forwarding traffic\n\nMethods:\n- NewUDP: (s string, d proxy.Dialer, p proxy.Proxy) -> (*UDP, error) - Creates a new UDP instance by parsing the URL and resolving the address\n- ListenAndServe: () -> () - Starts listening on the UDP port and handles incoming packets\n- serveSession: (session *session) -> () - Handles an individual client session and proxies its traffic\n- DialUDP: (network string, addr string) -> (net.PacketConn, error) - Creates a new packet connection for outbound traffic\n\nAdditional Structs:\n- session: Represents a client session with its communication channels\n  Fields:\n    - key: string - Session identifier\n    - src: *net.UDPAddr - Client address\n    - PacketConn: net.PacketConn - Underlying connection\n    - msgCh: chan []byte - Channel for incoming messages\n    - finCh: chan struct{} - Channel for session termination\n\n- PktConn: Wraps a net.PacketConn with a predefined destination address\n  Fields:\n    - PacketConn: net.PacketConn - Underlying connection\n    - uaddr: *net.UDPAddr - Destination address\n  Methods:\n    - WriteTo: (b []byte, addr net.Addr) -> (int, error) - Writes data to the predefined address",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\nvar nm sync.Map\n\ntype UDP struct {\n\taddr   string\n\tuaddr  *net.UDPAddr\n\tdialer proxy.Dialer\n\tproxy  proxy.Proxy\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\tlog.F(\"[udp] parse url err: %s\", err)\n\t\treturn nil, err\n\t}\n\n\tt := &UDP{\n\t\tdialer: d,\n\t\tproxy:  p,\n\t\taddr:   u.Host,\n\t}\n\n\tt.uaddr, err = net.ResolveUDPAddr(\"udp\", t.addr)\n\treturn t, err\n}\n\nfunc (s *UDP) ListenAndServe() {\n\tc, err := net.ListenPacket(\"udp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[udp] failed to listen on UDP %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\n\tlog.F(\"[udp] listening UDP on %s\", s.addr)\n\n\tfor {\n\t\tbuf := pool.GetBuffer(proxy.UDPBufSize)\n\t\tn, srcAddr, err := c.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\tlog.F(\"[udp] read error: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tvar sess *session\n\t\tsessKey := srcAddr.String()\n\n\t\tv, ok := nm.Load(sessKey)\n\t\tif !ok || v == nil {\n\t\t\tsess = newSession(sessKey, srcAddr, c)\n\t\t\tnm.Store(sessKey, sess)\n\t\t\tgo s.serveSession(sess)\n\t\t} else {\n\t\t\tsess = v.(*session)\n\t\t}\n\n\t\tsess.msgCh <- buf[:n]\n\t}\n}\n\nfunc (s *UDP) serveSession(session *session) {\n\tdstPC, dialer, err := s.proxy.DialUDP(\"udp\", session.src.String())\n\tif err != nil {\n\t\tlog.F(\"[udp] remote dial error: %v\", err)\n\t\tnm.Delete(session.key)\n\t\treturn\n\t}\n\tdefer dstPC.Close()\n\n\tgo func() {\n\t\tproxy.CopyUDP(session, session.src, dstPC, 2*time.Minute, 5*time.Second)\n\t\tnm.Delete(session.key)\n\t\tclose(session.finCh)\n\t}()\n\n\tlog.F(\"[udp] %s <-> %s\", session.src, dialer.Addr())\n\n\tfor {\n\t\tselect {\n\t\tcase p := <-session.msgCh:\n\t\t\t_, err = dstPC.WriteTo(p, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.F(\"[udp] writeTo error: %v\", err)\n\t\t\t}\n\t\t\tpool.PutBuffer(p)\n\t\tcase <-session.finCh:\n\t\t\treturn\n\t\t}\n\t}\n}\n\ntype session struct {\n\tkey string\n\tsrc *net.UDPAddr\n\tnet.PacketConn\n\tmsgCh chan []byte\n\tfinCh chan struct{}\n}\n\nfunc newSession(key string, src net.Addr, srcPC net.PacketConn) *session {\n\tsrcAddr, _ := net.ResolveUDPAddr(\"udp\", src.String())\n\treturn &session{key, srcAddr, srcPC, make(chan []byte, 32), make(chan struct{})}\n}\n\nfunc (s *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tpc, err := s.dialer.DialUDP(network, s.addr)\n\treturn &PktConn{pc, s.uaddr}, err\n}\n\ntype PktConn struct {\n\tnet.PacketConn\n\tuaddr *net.UDPAddr\n}\n\nfunc (pc *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn pc.PacketConn.WriteTo(b, pc.uaddr)\n}",
    "FSMID_for_test": 111,
    "Code_level": "Class-level"
}