{
    "Task_id": 367,
    "Github_ID": "316297217",
    "Github_Project_Name": "mosdns",
    "Programming_Language": "Go",
    "suffix": ".go",
    "Interface_class": "IPC",
    "Interface_name": "net-based UDP Client with DialUDP in Go",
    "Instruction": "Task Description: The task involves creating a DNS bootstrap resolver that can query DNS servers to resolve domain names to IP addresses using UDP protocol. The resolver should handle concurrent operations, retry failed queries, and manage connection lifecycle properly.\n\nStruct Description: The Bootstrap struct represents a DNS bootstrap resolver that maintains state for DNS queries, including target domain, server address, and query status. It handles concurrent resolution requests and manages connection retries.\n\nFields:\nfqdn: [string] - The fully qualified domain name to resolve\nport: [uint16] - The port number of the DNS server\nbootstrap: [*net.UDPAddr] - The UDP address of the DNS bootstrap server\nqt: [uint16] - The DNS query type (e.g., A or AAAA records)\nlogger: [*zap.Logger] - Logger for debugging and error reporting\nupdating: [atomic.Bool] - Atomic flag indicating if an update is in progress\nnextUpdate: [time.Time] - Timestamp for the next scheduled update\nreadyNotify: [chan struct{}] - Channel to notify when resolution is complete\nm: [sync.Mutex] - Mutex for protecting shared state\nready: [bool] - Flag indicating if resolution is complete\naddrStr: [string] - The resolved address string\n\nMethods:\nresolve: [Name](ctx context.Context, qt uint16) -> (netip.Addr, uint32, error) - Resolves the configured domain name to an IP address using the specified query type. Handles UDP communication with retries and timeout management. Returns the resolved address, its TTL, or an error.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/netip\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/IrineSistiana/mosdns/v5/pkg/dnsutils\"\n\t\"github.com/miekg/dns\"\n\t\"go.uber.org/zap\"\n)\n\ntype Bootstrap struct {\n\tfqdn      string\n\tport      uint16\n\tbootstrap *net.UDPAddr\n\tqt        uint16\n\tlogger    *zap.Logger\n\n\tupdating   atomic.Bool\n\tnextUpdate time.Time\n\n\treadyNotify chan struct{}\n\tm           sync.Mutex\n\tready       bool\n\taddrStr     string\n}\n\nfunc (sp *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tconst edns0UdpSize = 1200\n\n\tq := new(dns.Msg)\n\tq.SetQuestion(sp.fqdn, qt)\n\tq.SetEdns0(edns0UdpSize, false)\n\n\tc, err := net.DialUDP(\"udp\", nil, sp.bootstrap)\n\tif err != nil {\n\t\treturn netip.Addr{}, 0, err\n\t}\n\tdefer c.Close()\n\n\twriteErrC := make(chan error, 1)\n\ttype res struct {\n\t\tresp *dns.Msg\n\t\terr  error\n\t}\n\treadResC := make(chan res, 1)\n\n\tcancelWrite := make(chan struct{})\n\tdefer close(cancelWrite)\n\tgo func() {\n\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\twriteErrC <- err\n\t\t\treturn\n\t\t}\n\n\t\tretryTicker := time.NewTicker(time.Second)\n\t\tdefer retryTicker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-cancelWrite:\n\t\t\t\treturn\n\t\t\tcase <-retryTicker.C:\n\t\t\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\t\t\twriteErrC <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tm, _, err := dnsutils.ReadMsgFromUDP(c, edns0UdpSize)\n\t\treadResC <- res{resp: m, err: err}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn netip.Addr{}, 0, context.Cause(ctx)\n\tcase err := <-writeErrC:\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to write query, %w\", err)\n\tcase r := <-readResC:\n\t\tresp := r.resp\n\t\terr := r.err\n\t\tif err != nil {\n\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to read resp, %w\", err)\n\t\t}\n\n\t\tfor _, v := range resp.Answer {\n\t\t\tvar ip net.IP\n\t\t\tvar ttl uint32\n\t\t\tswitch rr := v.(type) {\n\t\t\tcase *dns.A:\n\t\t\t\tip = rr.A\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tcase *dns.AAAA:\n\t\t\t\tip = rr.AAAA\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\taddr, ok := netip.AddrFromSlice(ip)\n\t\t\tif ok {\n\t\t\t\treturn addr, ttl, nil\n\t\t\t}\n\t\t}\n\n\t\treturn netip.Addr{}, 0, errNoAddrInResp\n\t}\n}",
    "FSMID_for_test": 113,
    "Code_level": "Class-level"
}