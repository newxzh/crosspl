{
    "Task_id": 249,
    "Github_ID": "173582015",
    "Github_Project_Name": "octosql",
    "Programming_Language": "Go",
    "suffix": ".go",
    "Interface_class": "IPC",
    "Interface_name": "Official-based gRPC server in Go",
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both physical data source operations and execution of data processing tasks, using Unix domain sockets for inter-process communication.\n\nStruct Description: The implementation consists of two main structs: physicalServer handles the materialization of data sources, while executionServer manages the execution of data processing tasks.\n\nFields:\n\nphysicalServer:\n- database: physical.Database - The underlying database implementation\n- socketDir: string - Directory where Unix domain sockets will be created\n- wg: *sync.WaitGroup - WaitGroup for managing server goroutines\n\nexecutionServer:\n- node: execution.Node - The execution node to process data\n\nMethods:\n\nphysicalServer:\n- Materialize(context.Context, *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) - Materializes a data source and starts a gRPC server for execution\n\nexecutionServer:\n- Run(*plugins.RunRequest, plugins.ExecutionDatasource_RunServer) error - Executes the data processing task and streams results back to the client",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cube2222/octosql/execution\"\n\t\"github.com/cube2222/octosql/physical\"\n\t\"github.com/cube2222/octosql/plugins/internal/plugins\"\n)\n\ntype physicalServer struct {\n\tplugins.UnimplementedDatasourceServer\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, request *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\timpl, _, err := s.database.GetTable(ctx, request.TableContext.TableName, request.TableContext.Options)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't get table: %w\", err)\n\t}\n\n\tnode, err := impl.Materialize(\n\t\tctx,\n\t\tphysical.Environment{\n\t\t\tVariableContext: request.VariableContext.ToNativePhysicalVariableContext(),\n\t\t},\n\t\trequest.Schema.ToNativeSchema(),\n\t\tpushedDownPredicates,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't materialize datasource: %w\", err)\n\t}\n\n\tsocketName := ulid.MustNew(ulid.Now(), rand.Reader).String() + \".sock\"\n\tsocketPath := filepath.Join(s.socketDir, socketName)\n\tlog.Printf(\"Listening execution on %s\", socketPath)\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\texecServer := &executionServer{\n\t\tnode: node,\n\t}\n\ts.wg.Add(1)\n\n\tgrpcServer := grpc.NewServer()\n\tplugins.RegisterExecutionDatasourceServer(grpcServer, execServer)\n\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\ntype executionServer struct {\n\tplugins.UnimplementedExecutionDatasourceServer\n\tnode execution.Node\n}\n\nfunc (e *executionServer) Run(request *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tif err := e.node.Run(\n\t\texecution.ExecutionContext{\n\t\t\tContext:         stream.Context(),\n\t\t\tVariableContext: request.VariableContext.ToNativeExecutionVariableContext(),\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, record execution.Record) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tRecord: plugins.NativeRecordToProto(record),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send record to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, msg execution.MetadataMessage) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tMetadata: plugins.NativeMetadataMessageToProto(msg),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send metadata message to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t); err != nil {\n\t\treturn fmt.Errorf(\"couldn't run node: %w\", err)\n\t}\n\treturn nil\n}",
    "FSMID_for_test": 119,
    "Code_level": "Class-level"
}