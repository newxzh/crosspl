{
  "Task_id": 206,
  "Github_ID": "260751863",
  "Github_Project_Name": "ar-cutpaste",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Server - side by using Flask in python",
  "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles image pasting functionality, including image processing, screen projection detection, and integration with Photoshop.\n\nFunction Description: The paste() function handles POST requests to the '/paste' endpoint. It receives an image file, processes it to find matching screen coordinates, and sends it to Photoshop at the detected location. The function includes error handling, logging, and returns appropriate JSON responses.\n\nInput:\n- HTTP POST request containing:\n  - 'data' file: [binary] - Image file to be processed and pasted\n- Optional command line argument:\n  - '--photoshop_password': [str] - Password for Photoshop integration (default: '123456')\n\nOutput:\n- JSON response containing:\n  - 'status': [str] - Operation result ('ok', 'error', or 'screen not found')\n  - Optional 'error': [str] - Error description if status is 'error'\n- Possible HTTP status codes:\n  - 200: Successful operation\n  - 400: Bad request (missing file or empty image)",
  "Canonical_solution": "import io\nimport os\nfrom flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport logging\nimport argparse\nimport ps\n\nlogging.basicConfig(level=logging.INFO)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--photoshop_password', default='123456')\nargs = parser.parse_args()\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    start = time.time()\n    logging.info(' PASTE')\n\n    if 'data' not in request.files:\n        return jsonify({\n            'status': 'error',\n            'error': 'missing file param `data`'\n        }), 400\n    data = request.files['data'].read()\n    if len(data) == 0:\n        return jsonify({'status:': 'error', 'error': 'empty image'}), 400\n\n    with open('paste_received.jpg', 'wb') as f:\n        f.write(data)\n\n    view = Image.open(io.BytesIO(data))\n\n    if view.size[0] > max_view_size or view.size[1] > max_view_size:\n        view.thumbnail((max_view_size, max_view_size))\n\n    logging.info(' > grabbing screenshot...')\n    screen = pyscreenshot.grab()\n    screen_width, screen_height = screen.size\n\n    if screen.size[0] > max_screenshot_size or screen.size[1] > max_screenshot_size:\n        screen.thumbnail((max_screenshot_size, max_screenshot_size))\n\n    logging.info(' > finding projected point...')\n    view_arr = np.array(view.convert('L'))\n    screen_arr = np.array(screen.convert('L'))\n    x, y = screenpoint.project(view_arr, screen_arr, False)\n\n    found = x != -1 and y != -1\n\n    if found:\n        x = int(x / screen.size[0] * screen_width)\n        y = int(y / screen.size[1] * screen_height)\n        logging.info(f'{x}, {y}')\n\n        logging.info(' > sending to photoshop...')\n        name = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n        img_path = os.path.join(os.getcwd(), 'cut_current.png')\n        err = ps.paste(img_path, name, x, y, password=args.photoshop_password)\n        if err is not None:\n            logging.error('error sending to photoshop')\n            logging.error(err)\n            jsonify({'status': 'error sending to photoshop'})\n    else:\n        logging.info('screen not found')\n\n    logging.info(f'Completed in {time.time() - start:.2f}s')\n\n    if found:\n        return jsonify({'status': 'ok'})\n    else:\n        return jsonify({'status': 'screen not found'})",
  "FSMID_for_test": 60,
  "Code_level": "Function-level"
}