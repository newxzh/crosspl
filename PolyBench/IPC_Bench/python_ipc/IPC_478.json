{
  "Task_id": 478,
  "Github_ID": "669420857",
  "Github_Project_Name": "lightllm",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "ZeroMQ Consumer in Python(PUB/SUB)",
  "Instruction": "Task Description: Implement a ZeroMQ-based consumer class in Python that subscribes to messages from a publisher, processes token information from shared memory requests, and manages resource recycling.\n\nClass Description: The ZeroMQConsumer class is responsible for receiving and processing messages from a detokenization service via ZeroMQ's PUB/SUB pattern. It manages shared memory requests, tracks request statuses, and handles resource recycling when requests are completed.\n\nAttributes:\n- context: zmq.asyncio.Context - ZeroMQ asynchronous context for managing sockets\n- recv_from_detokenization: zmq.SUB - SUB socket for receiving messages from the publisher\n- shm_req_manager: ShmReqManager - Manager for shared memory request objects\n- req_id_to_out_inf: Dict[int, ReqStatus] - Dictionary mapping request IDs to their status objects\n- recycle_event: asyncio.Event - Event flag for triggering resource recycling\n\nMethods:\n- __init__(zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None - Initializes the consumer with ZeroMQ configuration and shared memory manager\n- handle_loop() -> None - Main processing loop that receives messages and manages token output\n- recycle_resource_loop() -> None - Background loop for recycling completed request resources\n\nHelper Class (ReqStatus):\n- __init__(group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None - Tracks status of a request group\n- can_release() -> bool - Determines if all requests in the group can be released",
  "Canonical_solution": "import zmq\nimport zmq.asyncio\nfrom typing import Dict\nfrom lightllm.server.core.objs import Req\nfrom lightllm.server.core.objs.shm_req_manager import ShmReqManager\nfrom lightllm.server.core.objs.io_objs import GroupReqObjs\nimport asyncio\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager):\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"{zmq_mode}127.0.0.1:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b\"\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self):\n        asyncio.create_task(self.recycle_resource_loop())\n        \n        while True:\n            try:\n                await asyncio.wait_for(self.recv_from_detokenization.recv_pyobj(), timeout=0.05)\n            except asyncio.TimeoutError:\n                pass\n\n            for req_status in self.req_id_to_out_inf.values():\n                token_list = []\n                for req in req_status.group_req_objs.shm_req_objs:\n                    req_id = req.request_id\n                    if not req.out_tokens_queue.is_empty():\n                        text, src_index, special, count_output_tokens = req.out_tokens_queue.peek()\n                        metadata = {\n                            \"id\": int(req.shm_prompt_ids.arr[src_index]),\n                            \"logprob\": float(req.shm_logprobs.arr[src_index]),\n                            \"special\": special,\n                            \"count_output_tokens\": count_output_tokens,\n                            \"prompt_cache_len\": req.prompt_cache_len,\n                        }\n                        req.out_tokens_queue.pop_no_ret()\n\n                        if req.finish_token_index != src_index:\n                            token_list.append((req_id, text, metadata, FinishStatus()))\n                        else:\n                            finish_status = FinishStatus(req.finish_status.status)\n                            token_list.append((req_id, text, metadata, finish_status))\n\n                async with req_status.lock:\n                    req_status.out_token_info_list.extend(token_list)\n                    req_status.event.set()\n\n            self.recycle_event.set()\n\n    async def recycle_resource_loop(self):\n        while True:\n            try:\n                await asyncio.wait_for(self.recycle_event.wait(), timeout=0.02)\n            except asyncio.TimeoutError:\n                pass\n            self.recycle_event.clear()\n\n            release_req_status = []\n            for req_status in self.req_id_to_out_inf.values():\n                if req_status.can_release():\n                    release_req_status.append(req_status)\n\n            for req_status in release_req_status:\n                self.req_id_to_out_inf.pop(req_status.group_req_objs.group_req_id, None)\n                for req in req_status.group_req_objs.shm_req_objs:\n                    await self.shm_req_manager.async_put_back_req_obj(req)\n                    await self.shm_req_manager.async_release_req_index(req.index_in_shm_mem)\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.lock = asyncio.Lock()\n        self.event = asyncio.Event()\n        self.group_req_objs = GroupReqObjs(\n            group_req_id=group_request_id,\n            multimodal_params=multimodal_params,\n            shm_req_objs=req_objs,\n            time_mark=start_time,\n        )\n        self.out_token_info_list = []\n\n    def can_release(self):\n        for req in self.group_req_objs.shm_req_objs:\n            if not req.can_release():\n                return False\n        return True",
  "FSMID_for_test": 85,
  "Code_level": "Class-level"
}