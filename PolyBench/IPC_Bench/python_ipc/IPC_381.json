{
  "Task_id": 381,
  "Github_ID": "329620403",
  "Github_Project_Name": "EasyMocap",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side by using socket in python",
  "Instruction": "Task Description: Create a TCP server class that can handle incoming client connections, receive data from clients in a line-based and length-prefixed format, and process the received data in a separate thread.\n\nClass Description: BaseSocket is a TCP server implementation that listens for incoming connections, receives data from clients, and queues the received data for processing. It uses threading to handle connections asynchronously and provides methods for data reception and processing.\n\nAttributes:\nserversocket: [socket.socket] - TCP socket object for server operations\nqueue: [Queue] - Thread-safe queue for storing received data\nt: [Thread] - Thread object for running the server's main loop\ndebug: [bool] - Flag for enabling debug mode\ndisconnect: [bool] - Flag indicating client disconnection status\n\nMethods:\n__init__: [host: str, port: int, debug: bool = False] -> None - Initializes the TCP server, binds to the specified host and port, and starts the server thread\nrecvLine: [sock: socket.socket] -> Tuple[bool, str] - Static method that receives a line of data ending with newline character from a socket\nrecvAll: [sock: socket.socket, l: str] -> str - Static method that receives exact number of bytes specified by length parameter l from a socket\nrun: [] -> None - Main server loop that accepts connections and receives data from clients\nupdate: [] -> None - Processes queued data by calling the main method\nmain: [datas: str] -> None - Placeholder method for processing received data (should be overridden by subclasses)\n__del__: [] -> None - Cleanup method that closes the server socket and joins the thread",
  "Canonical_solution": "import socket\nimport time\nfrom threading import Thread\nfrom queue import Queue\n\nclass BaseSocket:\n    def __init__(self, host, port, debug=False) -> None:\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(1)\n        self.queue = Queue()\n        self.t = Thread(target=self.run)\n        self.t.start()\n        self.debug = debug\n        self.disconnect = False\n    \n    @staticmethod\n    def recvLine(sock):\n        flag = True\n        result = b''\n        while not result.endswith(b'\\n'):\n            res = sock.recv(1)\n            if not res:\n                flag = False\n                break\n            result += res\n        return flag, result.strip().decode('ascii')\n\n    @staticmethod\n    def recvAll(sock, l):\n        l = int(l)\n        result = b''\n        while (len(result) < l):\n            t = sock.recv(l - len(result))\n            result += t\n        return result.decode('ascii')\n\n    def run(self):\n        while True:\n            clientsocket, addr = self.serversocket.accept()\n            self.disconnect = False\n            while True:\n                flag, l = self.recvLine(clientsocket)\n                if not flag:\n                    self.disconnect = True\n                    break\n                data = self.recvAll(clientsocket, l)\n                self.queue.put(data)\n            clientsocket.close()\n    \n    def update(self):\n        time.sleep(1)\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n    \n    def main(self, datas):\n        pass\n\n    def __del__(self):\n        self.serversocket.close()\n        self.t.join()",
  "FSMID_for_test": 66,
  "Code_level": "Class-level"
}