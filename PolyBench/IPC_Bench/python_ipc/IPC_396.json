{
  "Task_id": 396,
  "Github_ID": "12091187",
  "Github_Project_Name": "nicotine-plus",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side by using socket in python",
  "Instruction": "Task Description: Implement a TCP server in Python that handles multiple client connections asynchronously using sockets and selectors for efficient I/O multiplexing.\n\nClass Description: NetworkThread is a threading-based TCP server implementation that manages peer-to-peer connections, handles incoming and outgoing data, and processes network events asynchronously.\n\nAttributes:\n- pending_shutdown: [bool] - Flag indicating if the server is shutting down\n- upload_speed: [int] - Current upload speed limit\n- token: [str] - Authentication token for server connections\n- _pending_network_msgs: [deque] - Queue for pending network messages\n- _user_update_counter: [int] - Counter for user updates\n- _user_update_counters: [dict] - Dictionary of user-specific update counters\n- _upload_queue_timer_id: [int] - Timer ID for upload queue processing\n- _retry_failed_uploads_timer_id: [int] - Timer ID for retrying failed uploads\n- _message_queue: [deque] - Queue for internal messages\n- _pending_peer_conns: [dict] - Dictionary of pending peer connections\n- _pending_init_msgs: [defaultdict] - Dictionary of pending initialization messages\n- _token_init_msgs: [dict] - Dictionary of token-based initialization messages\n- _username_init_msgs: [dict] - Dictionary of username-based initialization messages\n- _user_addresses: [dict] - Dictionary mapping usernames to addresses\n- _should_process_queue: [bool] - Flag for message queue processing\n- _want_abort: [bool] - Flag for thread termination\n- _selector: [selectors.DefaultSelector] - I/O multiplexing selector\n- _listen_socket: [socket.socket] - Main listening socket\n- _listen_port: [int] - Listening port number\n- _interface_name: [str] - Network interface name\n- _interface_address: [str] - Network interface IP address\n- _portmapper: [object] - Port mapping service reference\n- _local_ip_address: [str] - Local IP address\n- _server_conn: [Connection] - Server connection object\n- _server_address: [tuple] - Server address (IP, port)\n- _server_username: [str] - Server username\n- _server_timeout_time: [float] - Server timeout timestamp\n- _server_timeout_value: [int] - Server timeout duration\n- _manual_server_disconnect: [bool] - Manual disconnect flag\n- _manual_server_reconnect: [bool] - Manual reconnect flag\n- _server_relogged: [bool] - Server reconnection flag\n- _num_sockets: [int] - Current number of active sockets\n- _last_cycle_time: [float] - Last processing cycle timestamp\n- _conns: [dict] - Dictionary of active connections\n\nMethods:\n- _create_listen_socket() -> [bool] - Creates and configures the listening socket\n- _bind_listen_port() -> [bool] - Binds the socket to the specified port and interface\n- _accept_incoming_peer_connections() -> [None] - Accepts new client connections\n- _init_peer_connection(addr: tuple, init: object, response_token: str=None) -> [None] - Initializes outgoing peer connection\n- _process_ready_sockets(current_time: float) -> [None] - Processes ready sockets using selector\n- _process_ready_input_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket read events\n- _process_ready_output_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket write events\n- _read_data(conn: Connection, current_time: float) -> [bool] - Reads data from connection\n- _write_data(conn: Connection, current_time: float) -> [bool] - Writes data to connection\n- _modify_connection_events(conn: Connection, io_events: int) -> [None] - Modifies socket event monitoring\n- _close_connection(conn: Connection) -> [None] - Closes and cleans up a connection\n- _close_socket(sock: socket.socket) -> [None] - Safely closes a socket\n- run() -> [None] - Main thread execution loop",
  "Canonical_solution": "import errno\nimport selectors\nimport socket\nimport time\nfrom collections import defaultdict\nfrom collections import deque\nfrom os import strerror\nfrom threading import Thread\n\nclass NetworkThread(Thread):\n    \"\"\"This is the networking thread that does all the communication with the\n    Soulseek server and peers. Communication with the core is done through\n    events.\"\"\"\n\n    __slots__ = (\"pending_shutdown\", \"upload_speed\", \"token\", \"_pending_network_msgs\",\n                 \"_user_update_counter\", \"_user_update_counters\", \"_upload_queue_timer_id\",\n                 \"_retry_failed_uploads_timer_id\")\n\n    CONNECTION_BACKLOG_LENGTH = 65535\n    ERROR_NOT_CONNECTED = OSError(errno.ENOTCONN, strerror(errno.ENOTCONN))\n    ERROR_TIMED_OUT = OSError(errno.ETIMEDOUT, strerror(errno.ETIMEDOUT))\n\n    def __init__(self):\n        super().__init__(name=\"NetworkThread\")\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(list)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = False\n        self._want_abort = False\n        self._selector = None\n        self._listen_socket = None\n        self._listen_port = None\n        self._interface_name = None\n        self._interface_address = None\n        self._portmapper = None\n        self._local_ip_address = \"\"\n        self._server_conn = None\n        self._server_address = None\n        self._server_username = None\n        self._server_timeout_time = None\n        self._server_timeout_value = -1\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = 0\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._listen_socket.setblocking(False)\n        self._num_sockets += 1\n\n        if sys.platform != \"win32\":\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        if not self._bind_listen_port():\n            self._close_listen_socket()\n            return False\n\n        self._selector.register(self._listen_socket, selectors.EVENT_READ)\n        return True\n\n    def _bind_listen_port(self):\n        if not self._bind_socket_interface(self._listen_socket):\n            return False\n\n        try:\n            ip_address = self._interface_address or self._find_local_ip_address()\n            self._listen_socket.bind((ip_address, self._listen_port))\n            self._listen_socket.listen(self.CONNECTION_BACKLOG_LENGTH)\n        except OSError as error:\n            self._listen_port = None\n            return False\n\n        self._local_ip_address = ip_address\n        return True\n\n    def _accept_incoming_peer_connections(self):\n        while True:\n            try:\n                incoming_sock, incoming_addr = self._listen_socket.accept()\n                incoming_sock.setblocking(False)\n                incoming_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n            except OSError as error:\n                if error.errno == errno.EWOULDBLOCK:\n                    break\n                continue\n\n            io_events = selectors.EVENT_READ\n            conn = self._conns[incoming_sock] = PeerConnection(\n                sock=incoming_sock, addr=incoming_addr, io_events=io_events\n            )\n            self._num_sockets += 1\n            self._selector.register(incoming_sock, io_events)\n            conn.is_established = True\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        io_events = selectors.EVENT_READ | selectors.EVENT_WRITE\n        conn = PeerConnection(\n            sock=sock, addr=addr, io_events=io_events,\n            init=init, request_token=None, response_token=response_token\n        )\n\n        sock.setblocking(False)\n        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n        try:\n            self._bind_socket_interface(sock)\n            sock.connect_ex(addr)\n        except OSError as error:\n            self._close_socket(sock)\n            return\n\n        init.sock = sock\n        self._conns[sock] = conn\n        self._selector.register(sock, io_events)\n        self._num_sockets += 1\n\n    def _process_ready_sockets(self, current_time):\n        if self._listen_socket is None:\n            return\n\n        for key, io_events in self._selector.select(timeout=0.05):\n            sock = key.fileobj\n\n            if io_events & selectors.EVENT_READ:\n                if sock is self._listen_socket:\n                    self._accept_incoming_peer_connections()\n                    continue\n                self._process_ready_input_socket(sock, current_time)\n\n            if io_events & selectors.EVENT_WRITE:\n                self._process_ready_output_socket(sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        try:\n            if self._read_data(conn, current_time):\n                self._process_conn_incoming_messages(conn)\n                return\n        except OSError as error:\n            pass\n\n        self._close_connection(conn)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        if not conn.is_established:\n            if conn is self._server_conn:\n                self._establish_outgoing_server_connection(conn)\n            else:\n                self._establish_outgoing_peer_connection(conn)\n            return\n\n        try:\n            if not self._write_data(conn, current_time):\n                self._close_connection(conn)\n        except (OSError, ValueError):\n            self._close_connection(conn)\n\n    def _read_data(self, conn, current_time):\n        data = conn.sock.recv(conn.recv_size)\n        if not data:\n            return False\n\n        conn.in_buffer += data\n        conn.last_active = current_time\n        return True\n\n    def _write_data(self, conn, current_time):\n        num_bytes_sent = conn.sock.send(conn.out_buffer)\n        del conn.out_buffer[:num_bytes_sent]\n\n        if not conn.out_buffer:\n            self._modify_connection_events(conn, selectors.EVENT_READ)\n\n        conn.last_active = current_time\n        return True\n\n    def _modify_connection_events(self, conn, io_events):\n        if conn.io_events != io_events:\n            self._selector.modify(conn.sock, io_events)\n            conn.io_events = io_events\n\n    def _close_connection(self, conn):\n        if not conn:\n            return\n\n        sock = conn.sock\n        del self._conns[sock]\n\n        self._selector.unregister(sock)\n        self._close_socket(sock)\n        self._num_sockets -= 1\n\n    @staticmethod\n    def _close_socket(sock):\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def run(self):\n        self._selector = selectors.DefaultSelector()\n        try:\n            while not self._want_abort:\n                current_time = time.monotonic()\n                self._process_queue_messages()\n                self._process_ready_sockets(current_time)\n                time.sleep(0.004)\n        finally:\n            self._selector.close()\n\nclass Connection:\n    __slots__ = (\"sock\", \"addr\", \"io_events\", \"is_established\", \"in_buffer\", \"out_buffer\",\n                 \"last_active\", \"recv_size\")\n\n    def __init__(self, sock=None, addr=None, io_events=None):\n        self.sock = sock\n        self.addr = addr\n        self.io_events = io_events\n        self.in_buffer = bytearray()\n        self.out_buffer = bytearray()\n        self.last_active = time.monotonic()\n        self.recv_size = 51200\n        self.is_established = False\n\nclass PeerConnection(Connection):\n    __slots__ = (\"init\", \"request_token\", \"response_token\", \"has_post_init_activity\")\n\n    def __init__(self, *args, init=None, request_token=None, response_token=None, **kwargs):\n        Connection.__init__(self, *args, **kwargs)\n        self.init = init\n        self.request_token = request_token\n        self.response_token = response_token\n        self.has_post_init_activity = False",
  "FSMID_for_test": 66,
  "Code_level": "Class-level"
}