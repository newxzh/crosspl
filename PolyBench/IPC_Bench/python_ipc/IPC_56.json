{
  "Task_id": 56,
  "Github_ID": "368008334",
  "Github_Project_Name": "zhenxun_bot",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Client-side by using httpx+asyncio in python",
  "Instruction": "Task Description: Create a Python class that provides asynchronous HTTP client functionality using httpx and asyncio, supporting common HTTP methods (GET, POST), file downloads, and proxy configuration.\n\nClass Description: AsyncHttpx is a utility class for making asynchronous HTTP requests with features like automatic retry on multiple URLs, proxy support, and file downloads. It handles connection timeouts and HTTP errors gracefully.\n\nAttributes:\n- proxy: ClassVar[dict[str, Union[str, None]]] - A class-level dictionary storing proxy configurations for HTTP and HTTPS protocols\n\nMethods:\n- get(url: Union[str, list[str]], *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous GET request to one or multiple URLs, returning the first successful response\n- _get_first_successful(urls: list[str], **kwargs) -> Response - Internal method to attempt requests on multiple URLs until first success\n- _get_single(url: str, *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Internal method to perform a single GET request\n- post(url: str, *, data: Optional[dict[str, Any]] = None, content: Any = None, files: Any = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, json: Optional[dict[str, Any]] = None, params: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous POST request with various payload options\n- download_file(url: Union[str, list[str]], path: Union[str, Path], *, params: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> bool - Downloads a file from a URL to the specified path, returning success status",
  "Canonical_solution": "import asyncio\nfrom asyncio.exceptions import TimeoutError\nimport httpx\nfrom httpx import ConnectTimeout, HTTPStatusError, Response\nfrom typing import Any, ClassVar, Optional, Union\nfrom pathlib import Path\nimport aiofiles\n\nclass AsyncHttpx:\n    proxy: ClassVar[dict[str, Union[str, None]]] = {\n        \"http://\": None,\n        \"https://\": None,\n    }\n\n    @classmethod\n    async def get(\n        cls,\n        url: Union[str, list[str]],\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        urls = [url] if isinstance(url, str) else url\n        return await cls._get_first_successful(\n            urls,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            verify=verify,\n            use_proxy=use_proxy,\n            proxy=proxy,\n            timeout=timeout,\n            **kwargs,\n        )\n\n    @classmethod\n    async def _get_first_successful(\n        cls,\n        urls: list[str],\n        **kwargs,\n    ) -> Response:\n        last_exception = None\n        for url in urls:\n            try:\n                return await cls._get_single(url, **kwargs)\n            except Exception as e:\n                last_exception = e\n        raise last_exception or Exception(\"All URLs failed\")\n\n    @classmethod\n    async def _get_single(\n        cls,\n        url: str,\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def post(\n        cls,\n        url: str,\n        *,\n        data: Optional[dict[str, Any]] = None,\n        content: Any = None,\n        files: Any = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        json: Optional[dict[str, Any]] = None,\n        params: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.post(\n                url,\n                content=content,\n                data=data,\n                files=files,\n                json=json,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def download_file(\n        cls,\n        url: Union[str, list[str]],\n        path: Union[str, Path],\n        *,\n        params: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> bool:\n        if isinstance(path, str):\n            path = Path(path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n        \n        try:\n            response = await cls.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                use_proxy=use_proxy,\n                proxy=proxy,\n                timeout=timeout,\n                **kwargs,\n            )\n            response.raise_for_status()\n            async with aiofiles.open(path, \"wb\") as wf:\n                await wf.write(response.content)\n            return True\n        except (TimeoutError, ConnectTimeout, HTTPStatusError) as e:\n            return False",
  "FSMID_for_test": 59,
  "Code_level": "Class-level"
}