{
  "Task_id": 167,
  "Github_ID": "262434885",
  "Github_Project_Name": "Moriarty-Project",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Server - side by using Flask in python",
  "Instruction": "The provided reference code is at the function level, specifically focusing on a Flask web application's route handling. Here's the structured instruction:\n\nTask Description: Create a Flask web application route handler that processes both GET and POST requests, implements various command-based functionalities, and returns appropriate HTML templates based on the input commands.\n\nFunction Description: The `index()` function serves as the main route handler for the root URL (\"/\"). It processes incoming HTTP requests, executes different actions based on the received commands (for POST requests), and returns corresponding HTML templates. The function handles feature activation, information display, and system operations through a command interface.\n\nInput:\n- HTTP request object (implicit through Flask)\n- For POST requests:\n  - Form data containing a command string (key: \"in\")\n- For GET requests:\n  - No explicit input parameters\n- Global variables (used in the function but not passed as parameters):\n  - redirectionMicrosoft (bool)\n  - redirectionMicrosoftFailed (bool)\n  - phone_number (str)\n  - email (str)\n  - password (str)\n  - Various feature flags (social_media, get_links, etc.)\n\nOutput:\n- HTTP responses containing:\n  - Rendered HTML templates (for successful operations)\n  - Redirects to other routes (for certain conditions)\n  - Error pages (for failed operations)\n\nThe function returns different responses based on:\n1. Request method (GET/POST)\n2. Specific command received (for POST requests)\n3. System state (global variables)\n4. Success/failure of operations",
  "Canonical_solution": "import os\nfrom flask import Flask, render_template, request, redirect, url_for\nimport threading\nimport subprocess\n\napp = Flask(__name__)\n\ndef run_flask_server():\n    app.run(str(subprocess.check_output(\"hostname -I | awk '{print $1}'\", shell=True).decode().strip()), 8080, debug=True)\n\n@app.route(\"/\", methods=[\"POST\", \"GET\"])\ndef index():\n    if request.method == \"GET\":\n        if redirectionMicrosoft == True:\n            return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n        if redirectionMicrosoftFailed == True:\n            return render_template(\"failed.html\")\n        return render_template(\"index.html\")\n    if request.method == \"POST\":\n        command = request.form[\"in\"]\n        if command == \"help\":\n            return render_template(\"help.html\")\n        elif command[0:15] == \"add PhoneNumber\":\n            phone_number = str(\"+\" + re.search(\"\\d+\", command).group(0))\n            return render_template(\"phoneNumberSuccess.html\", phone_number=phone_number)\n        elif command[0:21] == \"add feature FindOwner\":\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature SocialMedia\":\n            social_media = \"Added\"\n            try:\n                return render_template(\"socialMediaSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature GetLinks\":\n            get_links = \"Added\"\n            try:\n                return render_template(\"GetLinksSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature SpamRisk\":\n            spam_risk = \"Added\"\n            try:\n                return render_template(\"SpamRiskSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature GetComments\":\n            get_comments = \"Added\"\n            try:\n                return render_template(\"GetCommentsSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:12] == \"show options\":\n            try:\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n            except:\n                phone_number = \"Not Provided\"\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n        elif command[0:20] == \"add feature *\":\n            runall = \"Added\"\n            social_media = \"Added\"\n            spam_risk = \"Added\"\n            get_comments = \"Added\"\n            get_links = \"Added\"\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"featureAll.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:3] == \"run\":\n            Investigation.general.location(phone_number)\n            country = Investigation.general.returnCountry()\n            operator = Investigation.general.returnOperator()\n            timeZone = Investigation.general.returnTimeZone()\n            errNumber = Investigation.general.return_errNumber_()\n            currentTime = Investigation.general.returnCurrentTime()\n            if errNumber != \"False\":\n                threading.Thread(target=runScripts).start()\n                time.sleep(2)\n                return redirect(url_for(\"investigation\"))\n            else:\n                return redirect(url_for(\"investigationErr\"))\n        else:\n            return render_template(\"unkownCommand.html\")\n\nif __name__ == \"__main__\":\n    run_flask_server()",
  "FSMID_for_test": 60,
  "Code_level": "Function-level"
}