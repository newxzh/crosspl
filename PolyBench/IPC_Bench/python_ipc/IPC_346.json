{
  "Task_id": 346,
  "Github_ID": "8122790",
  "Github_Project_Name": "pyload",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "TCP Client - side by using socket in python",
  "Instruction": "Task Description: Implement a TCP client class for handling XDCC file downloads with progress tracking, speed calculation, and resumable download capabilities.\n\nClass Description: XDCCRequest is a class that manages file downloads over DCC (Direct Client-to-Client) protocol using TCP sockets. It provides functionality for establishing connections, downloading files with progress tracking, handling resumable downloads, and managing download speed calculations.\n\nAttributes:\n- proxies: dict - Proxy configuration for the connection\n- bucket: object - Rate limiting bucket for download speed control\n- fh: file object - File handle for writing downloaded data\n- dccsock: socket - TCP socket for DCC connection\n- filesize: int - Total size of the file being downloaded\n- received: int - Number of bytes received so far\n- speeds: list - List of recent download speeds (last three measurements)\n- sleep: float - Dynamic sleep interval for rate control\n- last_recv_size: int - Size of last received data chunk\n- send_64bits_ack: bool - Flag for using 64-bit ACK packets\n- abort: bool - Flag to indicate download abortion\n- status_notify: function - Callback for progress updates\n\nMethods:\n- create_socket() -> socket - Creates and returns a new TCP socket\n- _write_func(buf: bytes) -> None - Writes buffer to file with rate control\n- _send_ack() -> None - Sends acknowledgement of received bytes to server\n- download(ip: str, port: int, filename: str, status_notify: function=None, resume: function=None) -> str - Main download method\n- abort_downloads() -> None - Sets abort flag to stop current download\n- update_progress() -> None - Triggers progress notification callback\n- close() -> None - Cleanup method (currently empty)\n\nProperties:\n- size: int - Returns total file size\n- arrived: int - Returns bytes received so far\n- speed: int - Returns average download speed\n- percent: int - Returns download progress percentage",
  "Canonical_solution": "import errno\nimport os\nimport select\nimport socket\nimport struct\nimport time\n\nclass XDCCRequest:\n    def __init__(self, bucket=None, options={}):\n        self.proxies = options.get(\"proxies\", {})\n        self.bucket = bucket\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = [0, 0, 0]\n        self.sleep = 0.000\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        return sock\n\n    def _write_func(self, buf):\n        size = len(buf)\n        self.received += size\n        self.fh.write(buf)\n\n        if self.bucket:\n            time.sleep(self.bucket.consumed(size))\n        else:\n            if size < self.last_recv_size:\n                self.sleep += 0.002\n            else:\n                self.sleep *= 0.7\n            self.last_recv_size = size\n            time.sleep(self.sleep)\n\n    def _send_ack(self):\n        try:\n            self.dccsock.send(\n                struct.pack(\"!Q\" if self.send_64bits_ack else \"!I\", self.received)\n            )\n        except socket.error:\n            pass\n\n    def download(self, ip, port, filename, status_notify=None, resume=None):\n        self.status_notify = status_notify\n        self.send_64bits_ack = not self.filesize < 1 << 32\n        chunk_name = filename + \".chunk0\"\n\n        if resume and os.path.exists(chunk_name):\n            self.fh = open(chunk_name, mode=\"ab\")\n            resume_position = self.fh.tell()\n            if not resume_position:\n                resume_position = os.stat(chunk_name).st_size\n            resume_position = resume(resume_position)\n            self.fh.truncate(resume_position)\n            self.received = resume_position\n        else:\n            self.fh = open(chunk_name, mode=\"wb\")\n\n        last_update = time.time()\n        num_recv_len = 0\n        self.dccsock = self.create_socket()\n        recv_list = [self.dccsock]\n        self.dccsock.connect((ip, port))\n        self.dccsock.setblocking(False)\n\n        while True:\n            if self.abort:\n                self.dccsock.close()\n                self.fh.close()\n                raise Abort\n\n            fdset = select.select(recv_list, [], [], 0.1)\n            if self.dccsock in fdset[0]:\n                try:\n                    data = self.dccsock.recv(16384)\n                except socket.error as exc:\n                    if exc.errno in (errno.EAGAIN, errno.EWOULDBLOCK):\n                        continue\n                    else:\n                        raise\n\n                data_len = len(data)\n                if data_len == 0 or self.received + data_len > self.filesize > 0:\n                    break\n\n                num_recv_len += data_len\n                self._write_func(data)\n                self._send_ack()\n\n            now = time.time()\n            timespan = now - last_update\n            if timespan > 1:\n                self.speeds[2] = self.speeds[1]\n                self.speeds[1] = self.speeds[0]\n                self.speeds[0] = num_recv_len // timespan\n                num_recv_len = 0\n                last_update = now\n                self.update_progress()\n\n        self.dccsock.close()\n        self.fh.close()\n        os.rename(chunk_name, filename)\n        return filename\n\n    def abort_downloads(self):\n        self.abort = True\n\n    def update_progress(self):\n        if self.status_notify:\n            self.status_notify({\"progress\": self.percent})\n\n    @property\n    def size(self):\n        return self.filesize\n\n    @property\n    def arrived(self):\n        return self.received\n\n    @property\n    def speed(self):\n        speeds = [x for x in self.speeds if x]\n        return sum(speeds) // len(speeds)\n\n    @property\n    def percent(self):\n        if not self.filesize:\n            return 0\n        return (self.received * 100) // self.filesize\n\n    def close(self):\n        pass",
  "FSMID_for_test": 67,
  "Code_level": "Class-level"
}