{
  "Task_id": 85,
  "Github_ID": "104670977",
  "Github_Project_Name": "blockchain",
  "Programming_Language": "Python",
  "suffix": ".py",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Client-side by using requests in python",
  "Instruction": "Task Description: Create a Python class that implements a client for interacting with a blockchain network, capable of registering nodes, resolving chain conflicts, retrieving chain data, posting transactions, and registering multiple nodes.\n\nClass Description: The BlockchainClient class provides functionality to interact with nodes in a blockchain network. It maintains a set of node addresses and offers methods to communicate with these nodes using HTTP requests.\n\nAttributes:\n\nnodes: [set] - A set containing the network addresses of all known blockchain nodes\n\nMethods:\n\nregister_node: [register_node](address: str) -> None - Adds a new node to the list of known nodes. The address should be a valid URL.\n\nresolve_conflicts: [resolve_conflicts]() -> Tuple[bool, Optional[list]] - Resolves conflicts by finding and adopting the longest valid chain from the network. Returns a tuple indicating whether the chain was replaced and the new chain if applicable.\n\nget_chain: [get_chain](node: str) -> Tuple[bool, Optional[dict]] - Retrieves the blockchain data from a specific node. Returns a tuple indicating success status and the chain data.\n\npost_transaction: [post_transaction](node: str, sender: str, recipient: str, amount: float) -> Tuple[bool, Optional[dict]] - Posts a new transaction to a specified node. Returns a tuple indicating success status and the response data.\n\nregister_nodes: [register_nodes](node: str, nodes: list) -> Tuple[bool, Optional[dict]] - Registers multiple nodes with a specified node. Returns a tuple indicating success status and the response data.",
  "Canonical_solution": "import requests\n\nclass BlockchainClient:\n    def __init__(self, nodes=None):\n        self.nodes = set(nodes) if nodes else set()\n\n    def register_node(self, address):\n        \"\"\"\n        Add a new node to the list of nodes\n\n        :param address: Address of node. Eg. 'http://192.168.0.5:5000'\n        \"\"\"\n        parsed_url = urlparse(address)\n        if parsed_url.netloc:\n            self.nodes.add(parsed_url.netloc)\n        elif parsed_url.path:\n            self.nodes.add(parsed_url.path)\n        else:\n            raise ValueError('Invalid URL')\n\n    def resolve_conflicts(self):\n        \"\"\"\n        Resolve conflicts by replacing our chain with the longest one in the network.\n\n        :return: Tuple of (True if chain was replaced, new chain if replaced)\n        \"\"\"\n        new_chain = None\n        max_length = 0\n\n        for node in self.nodes:\n            try:\n                response = requests.get(f'http://{node}/chain')\n                if response.status_code == 200:\n                    data = response.json()\n                    length = data['length']\n                    chain = data['chain']\n\n                    if length > max_length:\n                        max_length = length\n                        new_chain = chain\n            except requests.exceptions.RequestException:\n                continue\n\n        return (True, new_chain) if new_chain else (False, None)\n\n    def get_chain(self, node):\n        \"\"\"\n        Get the blockchain from a specific node\n\n        :param node: Node address\n        :return: Tuple of (status, chain data)\n        \"\"\"\n        try:\n            response = requests.get(f'http://{node}/chain')\n            if response.status_code == 200:\n                return (True, response.json())\n            return (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)\n\n    def post_transaction(self, node, sender, recipient, amount):\n        \"\"\"\n        Post a new transaction to a node\n\n        :param node: Node address\n        :param sender: Sender address\n        :param recipient: Recipient address\n        :param amount: Transaction amount\n        :return: Tuple of (status, response data)\n        \"\"\"\n        try:\n            response = requests.post(\n                f'http://{node}/transactions/new',\n                json={\n                    'sender': sender,\n                    'recipient': recipient,\n                    'amount': amount\n                }\n            )\n            return (True, response.json()) if response.status_code == 201 else (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)\n\n    def register_nodes(self, node, nodes):\n        \"\"\"\n        Register multiple nodes with a node\n\n        :param node: Node address to register with\n        :param nodes: List of nodes to register\n        :return: Tuple of (status, response data)\n        \"\"\"\n        try:\n            response = requests.post(\n                f'http://{node}/nodes/register',\n                json={'nodes': list(nodes)}\n            )\n            return (True, response.json()) if response.status_code == 201 else (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)",
  "FSMID_for_test": 57,
  "Code_level": "Class-level"
}