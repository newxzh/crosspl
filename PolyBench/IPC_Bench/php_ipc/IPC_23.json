{
  "Task_id": 23,
  "Github_ID": "249877309",
  "Github_Project_Name": "Sakurairo",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Create a PHP class that handles HTTP requests to the OpenAI API using cURL, with support for different content types, streaming, and proxy configuration.\n\nClass Description: The OpenAi class is designed to interact with OpenAI's API by sending HTTP requests. It manages API keys, content types, headers, and request configurations. The class supports both JSON and multipart/form-data content types, allows for request streaming, and can be configured to use a proxy.\n\nAttributes:\n\nengine: string - The default OpenAI engine to use (default: \"davinci\")\nmodel: string - The default model for completions (default: \"text-davinci-002\")\nchatModel: string - The default model for chat completions (default: \"gpt-3.5-turbo\")\nassistantsBetaVersion: string - The version for assistants API (default: \"v1\")\nheaders: array - Array of HTTP headers to be sent with requests\ncontentTypes: array - Mapping of content types to their header strings\ntimeout: int - cURL timeout in seconds (default: 0)\nstream_method: object - Callback method for streaming responses\ncustomUrl: string - Custom base URL to override the default OpenAI API URL\nproxy: string - Proxy server address if needed\ncurlInfo: array - Information about the last cURL request\n\nMethods:\n\n__construct: __construct(string $OPENAI_API_KEY) -> void - Initializes the class with the OpenAI API key and sets default headers\nsendRequest: sendRequest(string $url, string $method, array $opts = []) -> bool|string - Sends an HTTP request to the specified URL with given method and options\nbaseUrl: baseUrl(string &$url) -> void - Modifies the base URL if a custom URL is set",
  "Canonical_solution": "namespace Orhanerday\\OpenAi;\n\nuse Exception;\n\nclass OpenAi\n{\n    private string $engine = \"davinci\";\n    private string $model = \"text-davinci-002\";\n    private string $chatModel = \"gpt-3.5-turbo\";\n    private string $assistantsBetaVersion = \"v1\";\n    private array $headers;\n    private array $contentTypes;\n    private int $timeout = 0;\n    private object $stream_method;\n    private string $customUrl = \"\";\n    private string $proxy = \"\";\n    private array $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY)\n    {\n        $this->contentTypes = [\n            \"application/json\" => \"Content-Type: application/json\",\n            \"multipart/form-data\" => \"Content-Type: multipart/form-data\",\n        ];\n\n        $this->headers = [\n            $this->contentTypes[\"application/json\"],\n            \"Authorization: Bearer $OPENAI_API_KEY\",\n        ];\n    }\n\n    /**\n     * @param  string  $url\n     * @param  string  $method\n     * @param  array   $opts\n     * @return bool|string\n     */\n    private function sendRequest(string $url, string $method, array $opts = [])\n    {\n        $post_fields = json_encode($opts);\n\n        if (array_key_exists('file', $opts) || array_key_exists('image', $opts)) {\n            $this->headers[0] = $this->contentTypes[\"multipart/form-data\"];\n            $post_fields = $opts;\n        } else {\n            $this->headers[0] = $this->contentTypes[\"application/json\"];\n        }\n        $curl_info = [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => '',\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => $this->timeout,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => $method,\n            CURLOPT_POSTFIELDS => $post_fields,\n            CURLOPT_HTTPHEADER => $this->headers,\n        ];\n\n        if ($opts == []) {\n            unset($curl_info[CURLOPT_POSTFIELDS]);\n        }\n\n        if (! empty($this->proxy)) {\n            $curl_info[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if (array_key_exists('stream', $opts) && $opts['stream']) {\n            $curl_info[CURLOPT_WRITEFUNCTION] = $this->stream_method;\n        }\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, $curl_info);\n        $response = curl_exec($curl);\n\n        $info = curl_getinfo($curl);\n        $this->curlInfo = $info;\n\n        curl_close($curl);\n\n        if (! $response) {\n            throw new Exception(curl_error($curl));\n        }\n\n        return $response;\n    }\n\n    /**\n     * @param  string  $url\n     */\n    private function baseUrl(string &$url)\n    {\n        if ($this->customUrl != \"\") {\n            $url = str_replace(Url::ORIGIN, $this->customUrl, $url);\n        }\n    }\n}",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}