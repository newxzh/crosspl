{
  "Task_id": 89,
  "Github_ID": "32336433",
  "Github_Project_Name": "Diaspora",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for fetching remote resources with proper error handling and resource management.\n\nClass Description: The timthumb class provides functionality to download remote files using cURL with features like progress tracking, size limitations, and fallback to file_get_contents when cURL is unavailable. It handles various HTTP status codes and maintains error state.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing downloaded data\n- $curlDataWritten: [int] - Tracks the amount of data written during download\n- $lastURLError: [mixed] - Stores the last error encountered during URL fetching\n\nMethods:\n- curlWrite($h, $d) -> [int] - Static callback function for cURL write operations that writes data to file and tracks bytes written. Returns bytes processed or 0 if size limit exceeded.\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data chunk being written\n\n- getURL($url, $tempfile) -> [bool] - Main method to fetch a URL and save it to a temporary file. Returns true on success, false on failure.\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for storing downloaded content",
  "Canonical_solution": "Here's the extracted class-level code for the HTTP client using cURL in PHP:\n\n```php\nclass timthumb {\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d){\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if(self::$curlDataWritten > MAX_FILE_SIZE){\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile){\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if(function_exists('curl_init')){\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if(! self::$curlFH){\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt ($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt ($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt ($curl, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt ($curl, CURLOPT_HEADER, 0);\n            curl_setopt ($curl, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt ($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt ($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt ($curl, CURLOPT_MAXREDIRS, 10);\n            \n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if($httpStatus == 404){\n                $this->set404();\n            }\n            if($httpStatus == 302){\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if($curlResult){\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents ($url);\n            if($img === false){\n                $err = error_get_last();\n                if(is_array($err) && $err['message']){\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if(preg_match('/404/', $this->lastURLError)){\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if(! file_put_contents($tempfile, $img)){\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}\n```",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}