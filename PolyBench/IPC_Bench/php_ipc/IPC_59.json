{
  "Task_id": 59,
  "Github_ID": "84772499",
  "Github_Project_Name": "thinkcmf",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Implement an OAuth2 client class in PHP that handles HTTP requests for OAuth2 authentication flows, including obtaining authorization codes and access tokens.\n\nClass Description: This abstract class provides a base implementation for OAuth2 client functionality. It includes methods for making HTTP requests and stores OAuth2 configuration parameters. Concrete implementations should extend this class for specific OAuth2 providers.\n\nAttributes:\n- version: [string] - OAuth version being used (default: '2.0')\n- appKey: [string] - Application/client ID for OAuth2\n- appSecret: [string] - Application/client secret for OAuth2\n- responseType: [string] - OAuth2 response type (default: 'code')\n- grantType: [string] - OAuth2 grant type (default: 'authorization_code')\n- callback: [string] - Callback URL for OAuth2 flow\n- authorize: [string] - Authorization endpoint URL\n- getRequestCodeURL: [string] - URL to request authorization code\n- getAccessTokenURL: [string] - URL to exchange code for access token\n- apiBase: [string] - Base URL for API endpoints\n- token: [mixed] - Stores the access token (null by default)\n\nMethods:\n- http: [http](string $url, array $params, string $method = 'GET', array $header = [], bool $multi = false) -> string - Makes an HTTP request using cURL with the specified parameters. Handles both GET and POST methods, with support for multipart POST requests. Returns the response body or throws an exception on error.",
  "Canonical_solution": "namespace cmf\\lib;\n\nabstract class Oauth2\n{\n    protected $version = '2.0';\n    protected $appKey = '';\n    protected $appSecret = '';\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback = '';\n    protected $authorize = '';\n    protected $getRequestCodeURL = '';\n    protected $getAccessTokenURL = '';\n    protected $apiBase = '';\n    protected $token = null;\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false)\n    {\n        $opts = [\n            CURLOPT_TIMEOUT        => 30,\n            CURLOPT_RETURNTRANSFER => 1,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HTTPHEADER     => $header\n        ];\n\n        switch (strtoupper($method)) {\n            case 'GET':\n                $opts[CURLOPT_URL] = $url . '?' . http_build_query($params);\n                break;\n            case 'POST':\n                $params                   = $multi ? $params : http_build_query($params);\n                $opts[CURLOPT_URL]        = $url;\n                $opts[CURLOPT_POST]       = 1;\n                $opts[CURLOPT_POSTFIELDS] = $params;\n                break;\n            default:\n                throw new \\Exception('\u4e0d\u652f\u6301\u7684\u8bf7\u6c42\u65b9\u5f0f\uff01');\n        }\n\n        $ch = curl_init();\n        curl_setopt_array($ch, $opts);\n        $data  = curl_exec($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($error) throw new \\Exception('\u8bf7\u6c42\u53d1\u751f\u9519\u8bef\uff1a' . $error);\n        return $data;\n    }\n}",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}