{
  "Task_id": 53,
  "Github_ID": "4549925",
  "Github_Project_Name": "psysh",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Create a PHP class that handles file downloads using cURL with proper error handling and resource management.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using PHP's cURL library. It manages temporary file creation, download execution, and cleanup of resources. The class includes methods to set a custom temporary directory, perform the download, retrieve the downloaded filename, and clean up downloaded files.\n\nAttributes:\n- tempDir: ?string - Optional custom directory for storing temporary files. If not set, uses system temp directory.\n- outputFile: ?string - Path to the downloaded file. Null until download is completed.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets a custom temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file. Throws RuntimeException if called before download().\n- cleanup() -> void - Removes the downloaded file if it exists.",
  "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Exception\\RuntimeException;\nuse Psy\\Shell;\n\nclass CurlDownloader\n{\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        if ($this->outputFile === null) {\n            throw new RuntimeException('Call download() first');\n        }\n\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if ($this->outputFile !== null && \\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}