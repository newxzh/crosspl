{
  "Task_id": 96,
  "Github_ID": "111898781",
  "Github_Project_Name": "alipay",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's API to process refund requests, including request signing and HTTP communication using cURL.\n\nClass Description: The AlipayService class provides functionality to prepare and send refund requests to Alipay's payment gateway. It handles request signing, parameter encoding, and HTTP communication while maintaining necessary configuration parameters.\n\nAttributes:\n- appId: string - Alipay application ID\n- returnUrl: string - URL for returning after payment\n- notifyUrl: string - URL for payment notifications\n- charset: string - Character encoding (default: 'utf-8')\n- rsaPrivateKey: string - RSA private key for request signing\n- outTradeNo: string - Merchant's unique order number\n- tradeNo: string - Alipay's transaction number\n- refundAmount: string - Amount to be refunded\n\nMethods:\n- __construct() -> void - Initializes the class with default charset\n- setAppid(string $appid) -> void - Sets the Alipay application ID\n- setRsaPrivateKey(string $saPrivateKey) -> void - Sets the RSA private key\n- setOutTradeNo(string $outTradeNo) -> void - Sets the merchant's order number\n- settradeNo(string $tradeNo) -> void - Sets Alipay's transaction number\n- setRefundAmount(string $refundAmount) -> void - Sets the refund amount\n- doRefund() -> array - Processes refund request and returns response\n- generateSign(array $params, string $signType = \"RSA\") -> string - Generates request signature\n- sign(string $data, string $signType = \"RSA\") -> string - Signs the request data\n- checkEmpty(mixed $value) -> bool - Checks if value is empty\n- getSignContent(array $params) -> string - Prepares string for signing\n- characet(string $data, string $targetCharset) -> string - Handles character encoding conversion\n- curlPost(string $url = '', mixed $postData = '', array $options = array()) -> string - Executes cURL POST request",
  "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $returnUrl;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $outTradeNo;\n    protected $tradeNo;\n    protected $refundAmount;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n    public function settradeNo($tradeNo)\n    {\n        $this->tradeNo = $tradeNo;\n    }\n    public function setRefundAmount($refundAmount)\n    {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund()\n    {\n        $requestConfigs = array(\n            'trade_no'=>$this->tradeNo,\n            'out_trade_no'=>$this->outTradeNo,\n            'refund_amount'=>$this->refundAmount,\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        $resultArr = json_decode($result,true);\n        return $resultArr;\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('\u60a8\u4f7f\u7528\u7684\u79c1\u94a5\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5RSA\u79c1\u94a5\u914d\u7f6e');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}