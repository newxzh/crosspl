{
  "Task_id": 22,
  "Github_ID": "2536618",
  "Github_Project_Name": "thinkphp",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Implement a Qiniu storage client class in PHP that handles HTTP requests to Qiniu's cloud storage service, including file uploads, downloads, and management operations.\n\nClass Description: QiniuStorage is a client class for interacting with Qiniu's cloud storage service. It provides methods for making HTTP requests to Qiniu's API endpoints with proper headers and request handling.\n\nAttributes:\n- QINIU_RSF_HOST: string - Qiniu's RSF (Resource List) API host\n- QINIU_RS_HOST: string - Qiniu's RS (Resource Management) API host  \n- QINIU_UP_HOST: string - Qiniu's file upload API host\n- timeout: string - Request timeout duration\n- error: string - Last error message\n- errorStr: string - Detailed error information\n\nMethods:\n- request(string $path, string $method, array|null $headers = null, mixed $body = null) -> mixed - Makes an HTTP request to Qiniu's API. Handles request setup, execution, and response processing.\n- response(string $text) -> array - Processes the response text and extracts JSON data from headers.\n- error(string $header, string $body) -> void - Handles error responses by parsing status codes and error messages.\n\nInput Parameters for request():\n- $path: string - The API endpoint path\n- $method: string - HTTP method (GET, POST, PUT, HEAD)\n- $headers: array|null - Optional request headers\n- $body: mixed - Request payload (can be string or resource)\n\nOutput for request():\n- Returns response body for successful GET requests\n- Returns parsed response array for other successful requests  \n- Returns false on failure and sets error information\n\nInput Parameters for response():\n- $text: string - Raw response text with headers\n\nOutput for response():\n- array - Parsed JSON data from response\n\nInput Parameters for error():\n- $header: string - Response header\n- $body: string - Response body\n\nOutput for error():\n- void - Sets error and errorStr properties",
  "Canonical_solution": "namespace Think\\Upload\\Driver\\Qiniu;\n\nclass QiniuStorage\n{\n    public $QINIU_RSF_HOST = 'http://rsf.qbox.me';\n    public $QINIU_RS_HOST = 'http://rs.qbox.me';\n    public $QINIU_UP_HOST = 'http://up.qiniu.com';\n    public $timeout = '';\n\n    private function request($path, $method, $headers = null, $body = null)\n    {\n        $ch = curl_init($path);\n\n        $_headers = array('Expect:');\n        if (!is_null($headers) && is_array($headers)) {\n            foreach ($headers as $k => $v) {\n                array_push($_headers, \"{$k}: {$v}\");\n            }\n        }\n\n        $length = 0;\n        $date = gmdate('D, d M Y H:i:s \\G\\M\\T');\n\n        if (!is_null($body)) {\n            if (is_resource($body)) {\n                fseek($body, 0, SEEK_END);\n                $length = ftell($body);\n                fseek($body, 0);\n\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_INFILE, $body);\n                curl_setopt($ch, CURLOPT_INFILESIZE, $length);\n            } else {\n                $length = @strlen($body);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } else {\n            array_push($_headers, \"Content-Length: {$length}\");\n        }\n\n        array_push($_headers, \"Date: {$date}\");\n\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $_headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ('PUT' == $method || 'POST' == $method) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, 0);\n        }\n\n        if ('HEAD' == $method) {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        }\n\n        $response = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (200 == $status) {\n            if ('GET' == $method) {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    private function response($text)\n    {\n        $headers = explode(PHP_EOL, $text);\n        $items = array();\n        foreach ($headers as $header) {\n            $header = trim($header);\n            if (strpos($header, '{') !== false) {\n                $items = json_decode($header, 1);\n                break;\n            }\n        }\n        return $items;\n    }\n\n    private function error($header, $body)\n    {\n        list($status, $stash) = explode(\"\\r\\n\", $header, 2);\n        list($v, $code, $message) = explode(\" \", $status, 3);\n        $message = is_null($message) ? 'File Not Found' : \"[{$status}]:{$message}]\";\n        $this->error = $message;\n        $this->errorStr = json_decode($body, 1);\n        $this->errorStr = $this->errorStr['error'];\n    }\n}",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}