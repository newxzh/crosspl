{
  "Task_id": 79,
  "Github_ID": "11340559",
  "Github_Project_Name": "deployer",
  "Programming_Language": "PHP",
  "suffix": ".php",
  "Interface_class": "IPC",
  "Interface_name": "HTTP client using cURL in PHP",
  "Instruction": "Task Description: Create a PHP class that provides a fluent interface for making HTTP requests using cURL, supporting various HTTP methods, request configurations, and response handling.\n\nClass Description: The Httpie class is a fluent HTTP client wrapper for cURL in PHP that simplifies making HTTP requests with method chaining. It supports GET, POST, PUT, PATCH, and DELETE methods, allows setting headers, query parameters, and different body types (raw, JSON, form), and provides options for error handling and response processing.\n\nAttributes:\n- method: string - The HTTP method to use for the request (GET, POST, etc.)\n- url: string - The target URL for the request\n- headers: array - Associative array of HTTP headers\n- body: string - The request body content\n- curlopts: array - Additional cURL options to set\n- nothrow: bool - Whether to suppress exceptions on errors\n\nMethods:\n- __construct() -> void - Constructor that checks for cURL extension availability\n- get(string $url) -> Httpie - Static constructor for GET requests\n- post(string $url) -> Httpie - Static constructor for POST requests\n- patch(string $url) -> Httpie - Static constructor for PATCH requests\n- put(string $url) -> Httpie - Static constructor for PUT requests\n- delete(string $url) -> Httpie - Static constructor for DELETE requests\n- query(array $params) -> self - Adds query parameters to the URL\n- header(string $header, string $value) -> self - Adds a single header\n- body(string $body) -> self - Sets raw request body\n- jsonBody(array $data) -> self - Sets JSON request body\n- formBody(array $data) -> self - Sets form-urlencoded request body\n- setopt(int $key, mixed $value) -> self - Sets custom cURL option\n- nothrow(bool $on = true) -> self - Configures error throwing behavior\n- send(?array &$info = null) -> string - Executes the request and returns response\n- getJson() -> mixed - Executes request and returns parsed JSON response",
  "Canonical_solution": "namespace Deployer\\Utility;\n\nuse Deployer\\Exception\\HttpieException;\n\nclass Httpie\n{\n    private string $method = 'GET';\n    private string $url = '';\n    private array $headers = [];\n    private string $body = '';\n    private array $curlopts = [];\n    private bool $nothrow = false;\n\n    public function __construct()\n    {\n        if (!extension_loaded('curl')) {\n            throw new \\Exception(\n                \"Please, install curl extension.\\n\" .\n                \"https://php.net/curl.installation\",\n            );\n        }\n    }\n\n    public static function get(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'GET';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function post(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'POST';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function patch(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'PATCH';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function put(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'PUT';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function delete(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'DELETE';\n        $http->url = $url;\n        return $http;\n    }\n\n    public function query(array $params): self\n    {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self\n    {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self\n    {\n        $this->body = $body;\n        $this->headers = array_merge($this->headers, [\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function jsonBody(array $data): self\n    {\n        $this->body = json_encode($data, JSON_PRETTY_PRINT);\n        $this->headers = array_merge($this->headers, [\n            'Content-Type' => 'application/json',\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function formBody(array $data): self\n    {\n        $this->body = http_build_query($data);\n        $this->headers = array_merge($this->headers, [\n            'Content-type' => 'application/x-www-form-urlencoded',\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self\n    {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self\n    {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string\n    {\n        if ($this->url === '') {\n            throw new \\RuntimeException('URL must not be empty to Httpie::send()');\n        }\n        $ch = curl_init($this->url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Deployer ' . DEPLOYER_VERSION);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 10);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $result = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        if ($result === false) {\n            if ($this->nothrow) {\n                $result = '';\n            } else {\n                $error = curl_error($ch);\n                $errno = curl_errno($ch);\n                curl_close($ch);\n                throw new HttpieException($error, $errno);\n            }\n        }\n        curl_close($ch);\n        return $result;\n    }\n\n    public function getJson(): mixed\n    {\n        $result = $this->send();\n        $response = json_decode($result, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            throw new HttpieException(\n                'JSON Error: ' . json_last_error_msg() . '\\n' .\n                'Response: ' . $result,\n            );\n        }\n        return $response;\n    }\n}",
  "FSMID_for_test": 132,
  "Code_level": "Class-level"
}