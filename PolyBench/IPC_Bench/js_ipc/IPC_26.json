{
  "Task_id": 26,
  "Github_ID": "347434932",
  "Github_Project_Name": "epg",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Client-side based on Axios",
  "Instruction": "Task Description: Implement a function to fetch and process subscribed TV channels from a streaming service API, including authentication and data extraction.\n\nFunction Description: This asynchronous function retrieves subscribed TV channel information from a streaming service by:\n1. Scraping initial configuration data from a webpage\n2. Authenticating with the service using extracted credentials\n3. Fetching subscribed channel packages\n4. Processing and deduplicating channel information\n5. Returning formatted channel data\n\nInput: \n- lang: [String] (optional, default='id') - Language code for the returned channel data\n\nOutput: \n- Returns: [Array<Object>] - An array of channel objects containing:\n  - lang: [String] - The language code\n  - site_id: [String] - The channel ID\n  - name: [String] - The channel name\n- Throws: [Error] - If any HTTP request fails or data parsing fails",
  "Canonical_solution": "function async channels({ lang = 'id' }) {\n    const axios = require('axios')\n    const cheerio = require('cheerio')\n    const result = await axios\n      .get('https://cubmu.com/live-tv')\n      .then(response => response.data)\n      .catch(console.error)\n\n    const $ = cheerio.load(result)\n\n    const config = JSON.parse($('#__NEXT_DATA__').text()).runtimeConfig || {}\n\n    const options = {\n      headers: {\n        Origin: 'https://cubmu.com',\n        Referer: 'https://cubmu.com/live-tv'\n      }\n    }\n    await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/login/external?email=${config.email}&password=${config.password}&deviceId=${config.deviceId}&deviceType=${config.deviceType}&deviceModel=${config.deviceModel}&deviceToken=&serial=&platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n    const subscribedChannels = await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/subscribe_product/list?platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n\n    const channels = []\n    const included = []\n    if (Array.isArray(subscribedChannels.channelPackageList)) {\n      subscribedChannels.channelPackageList.forEach(pkg => {\n        pkg.channelList.forEach(channel => {\n          if (included.indexOf(channel.id) < 0) {\n            included.push(channel.id)\n            channels.push({\n              lang,\n              site_id: channel.id,\n              name: channel.name\n            })\n          }\n        })\n      })\n    }\n\n    return channels\n}",
  "FSMID_for_test": 94,
  "Code_level": "Function-level"
}