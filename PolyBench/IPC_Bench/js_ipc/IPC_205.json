{
  "Task_id": 205,
  "Github_ID": "18102026",
  "Github_Project_Name": "winjs",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Create a JavaScript function that manages parallel execution of tests using WebSocket communication to coordinate test runs and report results.\n\nFunction Description: The function establishes a WebSocket connection to a test server, manages a queue of tests to run in parallel (with configurable parallelism), opens test cases in separate windows, and processes test results and status updates received through the WebSocket connection. It handles test queuing, parallel execution, status tracking, and result reporting.\n\nInput: None (The function operates on DOM elements and uses a hardcoded WebSocket URL)\n\nOutput: None (The function modifies the DOM to display test statuses and results)\n\nAttributes (internal variables used by the function):\n- socket: WebSocket - The WebSocket connection to the test server\n- maxParallelRuns: Number - Maximum number of tests to run simultaneously\n- subscriptionKey: Number - Unique identifier for this test session\n- queue: Array - Queue of tests waiting to be executed\n- numRunning: Number - Count of currently running tests\n\nMethods (internal functions):\n- processQueue() -> void - Processes the test queue by opening test windows up to the maximum parallel limit\n- WebSocket.onopen handler -> void - Handles WebSocket connection establishment\n- WebSocket.onmessage handler -> void - Processes incoming WebSocket messages (test results and status updates)",
  "Canonical_solution": "function runAllTests() {\n    var socket = null;\n    var maxParallelRuns = 4;\n    var subscriptionKey = Date.now();\n    var queue = [];\n    var numRunning = 0;\n\n    function processQueue() {\n        var toRun = queue.splice(0, Math.min(maxParallelRuns - numRunning, queue.length));\n        toRun.forEach(function (linkDiv) {\n            linkDiv.querySelector(\".status\").textContent = \"- Running...\";\n            window.open(linkDiv.querySelector(\".testLink\").href + \"&autostart=true&subscriptionKey=\" + subscriptionKey, \"\", \"width=800, height=800, top=0, left=400\")\n            numRunning++;\n        });\n    }\n\n    socket = new WebSocket(\"ws://localhost:9998\");\n    socket.onopen = function () {\n        socket.send(JSON.stringify({ \n            id: \"Dashboard\", \n            type: \"registerSubscriber\", \n            args: { subscriptionKey: subscriptionKey } \n        }));\n\n        var linkDivs = document.querySelectorAll(\".testLinkDiv\");\n        for (var i = 0, l = linkDivs.length; i < l; i++) {\n            var linkDiv = linkDivs[i];\n            linkDiv.querySelector(\".status\").textContent = \"- Queued to run\";\n            queue.push(linkDiv);\n        }\n        processQueue();\n    };\n    socket.onmessage = function (m) {\n        var message = JSON.parse(m.data);\n\n        switch (message.type) {\n            case \"osinfo\":\n                processQueue();\n                break;\n\n            case \"report\":\n                var li = document.querySelector(\"#id_\" + message.id);\n                var data = message.args.data;\n                switch (data.type) {\n                    case \"singleFailure\":\n                        li.classList.add(\"failed\");\n                        break;\n                    case \"finished\":\n                        li.classList.add(\"reported\");\n                        li.querySelector(\".status\").textContent = \"- \" + (((+data.runtime / 1000) + 1) | 0) + \"s\";\n                        if (data.failures) {\n                            li.classList.add(\"failed\");\n                        } else {\n                            li.classList.add(\"passed\");\n                        }\n                        break;\n                }\n                break;\n\n            case \"reporterDisconnected\":\n                var li = document.querySelector(\"#id_\" + message.id);\n                if (!li.classList.contains(\"reported\")) {\n                    li.classList.add(\"reported\");\n                    li.classList.add(\"failed\");\n                    var status = li.querySelector(\".status\");\n                    status.textContent = \"- Canceled\";\n                }\n                numRunning--;\n                processQueue();\n                break;\n        }\n    };\n}",
  "FSMID_for_test": 89,
  "Code_level": "Function-level"
}