{
  "Task_id": 86,
  "Github_ID": "127689297",
  "Github_Project_Name": "guess",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a function that sets up an Express server with middleware configuration, route handling, and database interactions for tracking page views and predictions.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js server with CORS support and body parsing middleware. It establishes routes for handling POST requests to track page views, interact with a MongoDB database to store/view predictions, and determine prefetch paths based on user navigation patterns. The server listens on a configured port.\n\nInput: None (The function doesn't take any direct parameters, but relies on external configuration files for database connection and server port)\n\nOutput: Returns the Express application instance (app) that has been configured and started.\n\nNote: The function assumes the existence of several external dependencies:\n- express, body-parser, and cors npm packages\n- MongoDB connection configuration in './config'\n- Mongoose models Prediction and PageView in './src/models'\n- A helper function `shouldPrefetch` (not shown in reference code)\n- A helper function `getPreviousPageId` (not shown in reference code)",
  "Canonical_solution": "function setupExpressServer() {\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const app = express()\n\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(cors())\n\n    app.all('/', function (req, res, next) {\n        res.header('Access-Control-Allow-Origin', '*')\n        res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS')\n        res.header('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type')\n        next()\n    })\n\n    app.post('/', async (req, res) => {\n        const mongoose = require('mongoose')\n        const Prediction = require('./src/models/prediction')\n        const PageView = require('./src/models/pageView')\n        const config = require('./config')\n\n        mongoose.connect(config.db.mongoURL)\n        const prediction = await Prediction.findOne({'pagePath': req.body['pagePath']})\n        const prefetchPath = shouldPrefetch(req, prediction) ? prediction['nextPagePath'] : ''\n\n        const pageView = await PageView.create({\n            pagePath: req.body['pagePath'],\n            clientInfo: req.body['clientInfo'],\n            userFlow: req.body['userFlow'],\n            prefetchPath: prefetchPath\n        })\n\n        if (req.body.userFlow.length > 0) {\n            const id = getPreviousPageId(req.body.userFlow)\n            await PageView.findByIdAndUpdate(id, {'actualNextPagePath': req.body.pagePath})\n        }\n\n        res.json({\n            'pageViewId': pageView._id,\n            'prefetchPath': prefetchPath\n        })\n    })\n\n    app.listen(config.server.port)\n    return app\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}