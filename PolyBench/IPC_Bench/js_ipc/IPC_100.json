{
  "Task_id": 100,
  "Github_ID": "1145302",
  "Github_Project_Name": "Locker",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a function that sets up an Express server with various route handlers for handling HTTP requests related to email functionality, including authentication, sending test emails, and managing email server configurations.\n\nFunction Description: The function `setupExpressServer` initializes an Express server with middleware for parsing request bodies and cookies. It defines several route handlers for different HTTP methods (GET, POST) that handle email-related operations such as authentication, sending test emails, and saving email server configurations. The server listens on a specified port.\n\nInput: None (The function uses module-level variables like `processInfo.port` for configuration)\n\nOutput: None (The function starts a server that listens on the specified port and handles incoming HTTP requests)\n\nNote: The function relies on several external modules and variables that should be available in the scope:\n- `express`: The Express framework\n- `connect`: Middleware for Express\n- `fs`: File system module\n- `nodemailer`: For sending emails\n- `lcrypto`: For encryption\n- `lutil`: For file operations\n- `auth`: A variable storing authentication details\n- `processInfo`: An object containing server configuration (like port number)\n- `locker`: An object containing base URL for locker service\n- `request`: For making HTTP requests",
  "Canonical_solution": "function setupExpressServer() {\n    var express = require('express');\n    var connect = require('connect');\n    var app = express.createServer(connect.bodyParser(), connect.cookieParser());\n    \n    app.set('views', __dirname);\n    \n    app.get('/', function(req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!auth || req.param(\"change\")) return res.end(fs.readFileSync(__dirname + '/auth.html'));\n        res.write(\"<p>Using \"+auth.host+\":\"+auth.port+\" \");\n        if(auth.ssl) res.write(\"(ssl)\");\n        if(auth.user) res.write(\"authenticating as \"+auth.user);\n        res.write(\"<br><a href='?change=1'>change</a> or <a href='javascript:window.location=\\\"test?to=\\\"+window.prompt(\\\"recipient email address\\\")'>send test message</a>\");\n        res.end();\n    });\n    \n    app.post('/save', function(req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!req.body || !req.body.host || !req.body.port) return res.end(\"missing minimum required host/port :(\");\n        nodemailer.SMTP = auth = {host:req.body.host, port:req.body.port, ssl:false};\n        if(req.body.ssl) auth.ssl = true;\n        if(req.body.user && req.body.pass) {\n            auth.use_authentication = true;\n            auth.user = req.body.user;\n            auth.pass = lcrypto.encrypt(req.body.pass);\n        }\n        lutil.atomicWriteFileSync(\"auth.json\", JSON.stringify(auth, null, 4));\n        if(auth.pass) auth.pass = req.body.pass;\n        res.end(\"saved! <a href='./'>continue</a>\");\n    });\n    \n    app.get('/state', function (req, res) {\n        var ready = (auth) ? 1 : 0;\n        res.send({ready:ready});\n    });\n    \n    app.get('/test', function (req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!req.param(\"to\") || req.param(\"to\").indexOf(\"@\") <= 0) return res.end(\"invalid recipient\")\n        var message = {\n            sender: 'Testificate <42@awesome.com>',\n            to: req.param(\"to\"),\n            subject: 'test message  \u2714',\n            body: 'Hello to you!',\n            html:'<p>it <b>WORKED</b></p>',\n            debug: true\n        };\n        request.post({url:locker.lockerBase + \"/Me/smtp/send\", json:message}, function(err, r, body){\n            if(err || !body) return res.end(\"failed \"+err);\n            return res.end(\"sent!\");\n        });\n    });\n    \n    app.post('/send', function (req, res) {\n        if(!auth) return res.send(false);\n        if (!req.body || !req.body.to) return res.send(false);\n        console.error(\"DEBUG SMTP: \"+JSON.stringify(req.body));\n        var sent = false;\n        nodemailer.send_mail(req.body, function(err, ok){\n            if(sent) return;\n            sent=true;\n            if(err || !ok){\n                console.error('Error occured: '+err);\n                return res.send(false);\n            }\n            res.send(true);\n        })\n    });\n    \n    app.listen(processInfo.port,function() {\n        var returnedInfo = {};\n        console.log(JSON.stringify(returnedInfo));\n    });\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}