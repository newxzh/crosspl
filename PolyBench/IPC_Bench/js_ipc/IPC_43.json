{
  "Task_id": 43,
  "Github_ID": "33502554",
  "Github_Project_Name": "classic-react-workshop",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Server - side based on XMLHttpRequest in JavaScript",
  "Instruction": "Task Description: Create a JavaScript class that implements HTTP client functionality for making JSON-based requests (GET, POST, DELETE) with token-based authorization.\n\nClass Description: The JSONHttpClient class provides methods for making HTTP requests to interact with JSON APIs. It handles request configuration, authorization headers, response parsing, and error handling. The class maintains an authorization token that is automatically included in all requests.\n\nAttributes:\ntoken: [String] - An authorization token stored in localStorage or generated randomly if not available\n\nMethods:\nconstructor: [] -> [void] - Initializes the client instance and sets/retrieves the authorization token\n\nsetToken: [req: XMLHttpRequest] -> [void] - Sets the authorization header on the given request object\n\ngetJSON: [url: String, callback: Function] -> [void] - Makes a GET request to the specified URL and invokes the callback with parsed JSON response or error\n\npostJSON: [url: String, obj: Object, callback: Function] -> [void] - Makes a POST request with JSON payload to the specified URL and invokes the callback with parsed response\n\ndeleteJSON: [url: String, callback: Function] -> [void] - Makes a DELETE request to the specified URL and invokes the callback with response text or error after a random delay",
  "Canonical_solution": "const XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;\n\nclass JSONHttpClient {\n  constructor() {\n    this.token = localStorage.token || Date.now() * Math.random();\n    localStorage.token = this.token;\n  }\n\n  setToken(req) {\n    req.setRequestHeader(\"authorization\", this.token);\n  }\n\n  getJSON(url, callback) {\n    const req = new XMLHttpRequest();\n    req.onload = function() {\n      if (req.status === 404) {\n        callback(new Error(\"not found\"));\n      } else {\n        callback(null, JSON.parse(req.response));\n      }\n    };\n    req.open(\"GET\", url);\n    this.setToken(req);\n    req.send();\n  }\n\n  postJSON(url, obj, callback) {\n    const req = new XMLHttpRequest();\n    req.onload = function() {\n      callback(JSON.parse(req.response));\n    };\n    req.open(\"POST\", url);\n    req.setRequestHeader(\n      \"Content-Type\",\n      \"application/json;charset=UTF-8\"\n    );\n    this.setToken(req);\n    req.send(JSON.stringify(obj));\n  }\n\n  deleteJSON(url, callback) {\n    const req = new XMLHttpRequest();\n    req.onload = function() {\n      setTimeout(() => {\n        if (req.status === 500) {\n          callback(new Error(req.responseText));\n        } else {\n          callback(null, req.responseText);\n        }\n      }, Math.random() * 5000);\n    };\n    req.open(\"DELETE\", url);\n    this.setToken(req);\n    req.send();\n  }\n}",
  "FSMID_for_test": 93,
  "Code_level": "Class-level"
}