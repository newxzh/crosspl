{
  "Task_id": 151,
  "Github_ID": "26642716",
  "Github_Project_Name": "shadowsocks-manager",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side based on node.js net",
  "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data with authentication, and responds to commands.\n\nFunction Description: The code provides functions to create and manage a TCP server that listens for client connections, receives and validates data packets, processes commands, and sends responses. It includes packet validation using MD5 hashing with a timestamp and password for security.\n\nInput:\n- createTCPServer:\n  - host: string - The host address to bind to\n  - port: number - The port number to listen on\n  - password: string - The authentication password\n  - commandHandler: function - Async function to handle commands (accepts data and code parameters)\n\n- receiveData:\n  - receive: object - Contains accumulated data Buffer and socket reference\n  - data: Buffer - New data chunk received\n  - password: string - Authentication password\n  - commandHandler: function - Command handler function\n\n- checkData:\n  - receive: object - Contains accumulated data Buffer and socket reference\n  - password: string - Authentication password\n  - commandHandler: function - Command handler function\n\n- checkCode:\n  - data: Buffer - Received command data\n  - password: string - Authentication password\n  - code: Buffer - Received authentication code\n\n- pack:\n  - data: object - Response data to package (contains code and optional data)\n\nOutput:\n- createTCPServer: Returns a net.Server instance\n- receiveData: void (modifies receive.data in place)\n- checkData: void (may send responses via socket)\n- checkCode: boolean - Returns true if authentication is valid\n- pack: Buffer - Returns formatted packet Buffer",
  "Canonical_solution": "const net = require('net');\n\nfunction createTCPServer(host, port, password, commandHandler) {\n  const server = net.createServer(socket => {\n    const receive = {\n      data: Buffer.from(''),\n      socket,\n    };\n    socket.on('data', data => {\n      receiveData(receive, data, password, commandHandler);\n    });\n    socket.on('error', (err) => {\n      throw err;\n    });\n  }).on('error', (err) => {\n    throw err;\n  });\n\n  server.listen({\n    port,\n    host,\n  }, () => {\n    console.log(`server listen on ${ host }:${ port }`);\n  });\n\n  return server;\n}\n\nfunction receiveData(receive, data, password, commandHandler) {\n  receive.data = Buffer.concat([receive.data, data]);\n  checkData(receive, password, commandHandler);\n}\n\nfunction checkData(receive, password, commandHandler) {\n  const buffer = receive.data;\n  let length = 0;\n  let data;\n  let code;\n  if(buffer.length < 2) { return; }\n  length = buffer[0] * 256 + buffer[1];\n  if(buffer.length >= length + 2) {\n    data = buffer.slice(2, length - 2);\n    code = buffer.slice(length - 2);\n    if(!checkCode(data, password, code)) {\n      receive.socket.end(pack({ code: 2 }));\n      return;\n    }\n    commandHandler(data, code).then(s => {\n      receive.socket.end(pack({ code: 0, data: s }));\n    }).catch(err => {\n      let code = -1;\n      if(err === 'invalid command') { code = 1; }\n      receive.socket.end(pack({ code }));\n    });\n    if(buffer.length > length + 2) {\n      checkData(receive, password, commandHandler);\n    }\n  }\n}\n\nfunction checkCode(data, password, code) {\n  const time = Number.parseInt(data.slice(0, 6).toString('hex'), 16);\n  if(Math.abs(Date.now() - time) > 10 * 60 * 1000) {\n    return false;\n  }\n  const command = data.slice(6).toString();\n  const md5 = crypto.createHash('md5').update(time + command + password).digest('hex');\n  return md5.substr(0, 8) === code.toString('hex');\n}\n\nfunction pack(data) {\n  const message = JSON.stringify(data);\n  const dataBuffer = Buffer.from(message);\n  const length = dataBuffer.length;\n  const lengthBuffer = Buffer.from(('0000000000000000' + length.toString(16)).substr(-8), 'hex');\n  const pack = Buffer.concat([lengthBuffer, dataBuffer]);\n  return pack;\n}",
  "FSMID_for_test": 97,
  "Code_level": "Function-level"
}