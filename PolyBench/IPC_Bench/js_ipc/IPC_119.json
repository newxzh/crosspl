{
  "Task_id": 119,
  "Github_ID": "624122214",
  "Github_Project_Name": "Neurite",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a function to set up an Express server that handles HTTP requests for Wikipedia summaries, including CORS configuration and route handling.\n\nFunction Description: The function `setupExpressServer` initializes an Express application, configures CORS middleware with specific options, defines a route handler for GET requests to '/wikipedia_summaries', and starts the server on a specified port. The route handler retrieves Wikipedia links based on a keyword, fetches summaries and categories for those links, and returns them as JSON.\n\nInput: None (The function does not take any direct input parameters, but the route handler within the function processes query parameters from the HTTP request.)\n\nOutput: None (The function does not return a value, but it starts an HTTP server that listens on the specified port and responds to requests with JSON data.)",
  "Canonical_solution": "function setupExpressServer() {\n    const express = require('express');\n    const cors = require('cors');\n    const axios = require('axios');\n    \n    const app = express();\n    \n    const corsOptions = {\n        origin: ['https://neurite.network', 'http://localhost:8080'],\n        methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n        credentials: true,\n        optionsSuccessStatus: 204\n    };\n    \n    app.use(cors(corsOptions));\n    \n    app.get('/wikipedia_summaries', async (req, res) => {\n        const keyword = req.query.keyword;\n        const topNLinks = parseInt(req.query.top_n_links) || 2;\n        const srwhat = req.query.srwhat || null;\n        const srsort = req.query.srsort || 'relevance';\n        const exsentences = parseInt(req.query.exsentences) || 3;\n        const topExsentences = parseInt(req.query.top_exsentences) || 6;\n        const topNCategories = parseInt(req.query.top_n_categories) || 5;\n        \n        const topLinks = await getWikipediaLinks(keyword, topNLinks, srwhat, srsort);\n        const selectedLinks = topLinks.slice(0, topNLinks);\n        \n        const summaries = await Promise.all(\n            selectedLinks.map(async (link, i) => {\n                const summaryExsentences = i === 0 ? topExsentences : exsentences;\n                const summary = await getWikipediaSummary(link, summaryExsentences);\n                const cleanSummary = removeHtmlTags(summary);\n                const categories = await getWikipediaCategories(link, keyword, topNCategories);\n                return { title: link, summary: cleanSummary, categories };\n            })\n        );\n        \n        res.json(summaries);\n    });\n    \n    const port = process.env.PORT || 5000;\n    app.listen(port, () => {\n        console.log(`Server is running on port ${port}`);\n    });\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}