{
  "Task_id": 247,
  "Github_ID": "614826827",
  "Github_Project_Name": "New-Bing-Anywhere",
  "Programming_Language": "JavaScript",
  "suffix": ".ts",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class for managing connections to a chat service, handling message exchange, and maintaining connection state.\n\nClass Description: The `BingChatWebSocket` class provides functionality to establish, maintain, and close WebSocket connections to a chat service. It manages multiple connections through unique socket IDs and supports sending messages, receiving responses, and connection health checks.\n\nAttributes:\n- `webSockets`: Record<string, WebSocket | null> - A dictionary mapping socket IDs to their corresponding WebSocket connections, allowing management of multiple connections.\n\nMethods:\n- `getSocketId()`: () -> Promise<string> - Establishes a new WebSocket connection, initializes it with a handshake message, and returns a unique socket ID for the connection. Handles connection errors and validation.\n- `ping(socketId: string)`: (string) -> Promise<void> - Sends a ping message to the WebSocket connection identified by `socketId` to maintain or check the connection.\n- `send(socketId: string, msg: object, onMessage: (data: any) => void)`: (string, object, function) -> Promise<any> - Sends a message through the WebSocket connection identified by `socketId` and sets up a callback `onMessage` to handle incoming messages. Resolves when a type 2 message is received.\n- `close(socketId: string)`: (string) -> Promise<void> - Closes the WebSocket connection identified by `socketId` and cleans up its reference in the `webSockets` dictionary.",
  "Canonical_solution": "import { v4 as uuidv4 } from 'uuid';\n\nclass BingChatWebSocket {\n  private webSockets: Record<string, WebSocket | null> = {};\n\n  async getSocketId(): Promise<string> {\n    const socketUrl = 'wss://sydney.bing.com/sydney/ChatHub';\n    return await new Promise((resolve, reject) => {\n      try {\n        const ws = new WebSocket(socketUrl);\n        const socketId = uuidv4();\n        \n        ws.onopen = (_e) => {\n          const hello = JSON.stringify({ protocol: 'json', version: 1 }) + '\\x1e';\n          ws.send(hello);\n        };\n\n        ws.onclose = () => {\n          this.webSockets[socketId] = null;\n        };\n        \n        ws.onerror = (e) => {\n          if (e.type === 'error') {\n            reject(new Error(`WebSocket \\`${socketUrl}\\` did not connect successfully.`));\n            return;\n          }\n          reject(e);\n        };\n\n        ws.onmessage = (e) => {\n          const msg = e.data;\n          if (msg === '{}\\x1e') {\n            this.webSockets[socketId] = ws;\n            resolve(socketId);\n            return;\n          }\n          ws.close();\n          this.webSockets[socketId] = null;\n          reject(new Error('WebSocket did not connect successfully'));\n        };\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async ping(socketId: string): Promise<void> {\n    return await new Promise((resolve, _reject) => {\n      const ws = this.webSockets[socketId];\n      if (ws == null) throw new Error(`WebSocket ${socketId} not found`);\n\n      ws.send(JSON.stringify({ type: 6 }) + '\\x1e');\n      resolve(null);\n    });\n  }\n\n  async send(\n    socketId: string,\n    msg: object,\n    onMessage: (data: any) => void\n  ): Promise<any> {\n    return await new Promise((resolve, _reject) => {\n      const ws = this.webSockets[socketId];\n      if (ws == null) throw new Error(`WebSocket ${socketId} not found`);\n\n      ws.onmessage = (e) => {\n        const msg = e.data;\n        for (const item of msg.split('\\x1e').filter(Boolean)) {\n          const data = JSON.parse(item.replaceAll('\\n', '\\\\n'));\n          onMessage(data);\n\n          if (data.type === 2) {\n            setTimeout(() => {\n              resolve(data);\n            });\n          }\n        }\n      };\n      ws.send(JSON.stringify(msg) + '\\x1e');\n    });\n  }\n\n  async close(socketId: string): Promise<void> {\n    const ws = this.webSockets[socketId];\n    ws?.close();\n    this.webSockets[socketId] = null;\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}