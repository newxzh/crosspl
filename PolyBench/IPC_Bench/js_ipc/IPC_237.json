{
  "Task_id": 237,
  "Github_ID": "4190976",
  "Github_Project_Name": "webui-aria2",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Create a WebSocketRPC class that handles WebSocket communication for JSON-RPC 2.0 protocol, including connection management, message handling, and error recovery.\n\nClass Description: The WebSocketRPC class provides a wrapper around browser WebSocket API to facilitate JSON-RPC 2.0 communication. It manages WebSocket connections, handles message serialization/deserialization, and provides callback mechanisms for RPC operations.\n\nAttributes:\n- _: [Object] - Lodash/underscore utility library\n- JSON: [Object] - JSON object for serialization/deserialization\n- utils: [Object] - Utility functions including UUID generation\n- alerts: [Object] - Alert/notification system\n- initialized: [Boolean] - Connection status flag\n- handles: [Array] - Pending RPC request handlers\n- sock: [WebSocket|null] - WebSocket connection instance\n- conf: [Object|null] - Connection configuration\n- scheme: [String] - WebSocket protocol scheme (ws/wss)\n- onready: [Function|null] - Callback when connection is ready\n\nMethods:\n- onerror(ev): [Function]([Event]) -> [void] - Handles WebSocket errors and cleans up pending requests\n- onclose(ev): [Function]([Event]) -> [void] - Handles WebSocket connection closure\n- onopen(): [Function]() -> [void] - Handles successful WebSocket connection\n- onmessage(message): [Function]([MessageEvent]) -> [void] - Processes incoming WebSocket messages\n- invoke(opts): [Function]([Object]) -> [void] - Sends JSON-RPC request\n  - opts: [Object] - Request options containing:\n    - name: [String] - RPC method name\n    - params: [Array] - RPC parameters\n    - success: [Function] - Success callback\n    - error: [Function] - Error callback\n- init(conf, onready): [Function]([Object], [Function]) -> [void] - Initializes WebSocket connection\n  - conf: [Object] - Connection configuration containing:\n    - host: [String] - Server host\n    - port: [Number] - Server port\n    - path: [String] - Optional path\n    - encrypt: [Boolean] - Use SSL/TLS\n    - auth: [Object] - Optional authentication credentials\n      - user: [String] - Username\n      - pass: [String] - Password\n  - onready: [Function] - Callback when initialization completes",
  "Canonical_solution": "import angular from \"angular\";\n\nclass WebSocketRPC {\n  constructor(_, JSON, name, utils, alerts) {\n    this._ = _;\n    this.JSON = JSON;\n    this.utils = utils;\n    this.alerts = alerts;\n    \n    this.initialized = false;\n    this.handles = [];\n    this.sock = null;\n    this.conf = null;\n    this.scheme = \"ws\";\n    this.onready = null;\n  }\n\n  onerror(ev) {\n    this._.each(this.handles, function(h) {\n      h.error();\n    });\n    this.handles = [];\n    this.initialized = false;\n    if (this.onready) {\n      this.onready();\n      this.onready = null;\n    }\n  }\n\n  onclose(ev) {\n    if (this.handles && this.handles.length)\n      this.onerror(\"Connection reset while calling aria2\");\n    this.initialized = false;\n    if (this.onready) {\n      this.onready();\n      this.onready = null;\n    }\n  }\n\n  onopen() {\n    console.log(\"websocket initialized!!!\");\n    this.initialized = true;\n    if (this.onready) {\n      this.onready();\n      this.onready = null;\n    }\n  }\n\n  onmessage(message) {\n    var data = this.JSON.parse(message.data);\n\n    for (var i = this.handles.length - 1; i >= 0; i--) {\n      if (this.handles[i].id === data.id) {\n        this.handles[i].success(data);\n        this.handles.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  invoke(opts) {\n    var data = {\n      jsonrpc: 2.0,\n      id: this.utils.uuid(),\n      method: opts.name,\n      params: opts.params && opts.params.length ? opts.params : undefined\n    };\n\n    if (data.params && !data.params.length) data.params = undefined;\n\n    this.handles.push({\n      success: opts.success || angular.noop,\n      error: opts.error || angular.noop,\n      id: data.id\n    });\n    this.sock.send(this.JSON.stringify(data));\n  }\n\n  init(conf, onready) {\n    this.initialized = false;\n    if (this.onready) {\n      this.onready();\n      this.onready = null;\n    }\n\n    if (typeof WebSocket == \"undefined\") {\n      this.alerts.addAlert(\"Web sockets are not supported! Falling back to JSONP.\", \"info\");\n      onready();\n      return;\n    }\n    this.conf = conf || this.conf;\n    this.scheme = this.conf.encrypt ? \"wss\" : \"ws\";\n\n    if (this.sock) {\n      this.sock.onopen = this.sock.onmessage = this.sock.onerror = this.sock.onclose = null;\n      this.onerror({ message: \"Changing the websocket aria2 server details\" });\n    }\n\n    try {\n      var authUrl =\n        this.scheme + \"://\" + conf.host + \":\" + conf.port + (conf.path || \"/jsonrpc\");\n      if (this.conf.auth && this.conf.auth.user && this.conf.auth.pass) {\n        authUrl =\n          this.scheme +\n          \"://\" +\n          this.conf.auth.user +\n          \":\" +\n          this.conf.auth.pass +\n          \"@\" +\n          this.conf.host +\n          \":\" +\n          this.conf.port +\n          (conf.path || \"/jsonrpc\");\n      }\n\n      this.sock = new WebSocket(authUrl);\n      this.sock.onopen = this.onopen.bind(this);\n      this.sock.onclose = this.onclose.bind(this);\n      this.sock.onerror = this.onerror.bind(this);\n      this.sock.onmessage = this.onmessage.bind(this);\n      this.onready = onready;\n    } catch (ex) {\n      console.log(\"not using websocket for aria2 rpc due to: \", ex);\n      this.alerts.addAlert(\"Web sockets not working due to \" + ex.message, \"info\");\n      onready();\n    }\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}