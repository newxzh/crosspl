{
  "Task_id": 189,
  "Github_ID": "1356074",
  "Github_Project_Name": "cluster",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "UDP based on node.js dgram",
  "Instruction": "Task Description: Create a class that implements inter-process communication (IPC) using UDP sockets in Node.js, allowing communication between a master process and worker processes.\n\nClass Description: The MasterIPC class facilitates communication between a master process and worker processes using UDP sockets. It handles socket creation, message parsing, method invocation, and event emission for worker connections and restarts.\n\nAttributes:\n- options: [Object] - Configuration options including socket port and address.\n- _sock: [dgram.Socket] - The UDP socket instance for communication.\n- children: [Array] - List of connected worker processes.\n- sock: [dgram.Socket] - Alternative socket reference used for sending messages.\n\nMethods:\n- IPCSocket() -> [dgram.Socket] - Creates and configures a UDP socket if not already created, setting up message event handling.\n- setupIPC() -> [void] - Binds the socket to the specified port and address, emits 'start' event when listening.\n- call(id, method, ...args) -> [void] - Sends a message to a worker process with the specified ID, method, and arguments.\n- invoke(method, args, worker) -> [void] - Invokes the specified method with given arguments and worker context if the method exists.\n- connect(worker) -> [void] - Emits a 'worker connected' event for the specified worker.\n- connectMaster(sig) -> [void] - Kills the parent process with the specified signal, either immediately or after the socket is listening.\n- masterKilled(data) -> [void] - Emits a 'restart' event with the provided data.",
  "Canonical_solution": "var dgram = require('dgram');\nvar net = require('net');\nvar utils = require('./utils');\n\nclass MasterIPC {\n  constructor(options) {\n    this.options = options;\n    this._sock = null;\n    this.children = [];\n  }\n\n  IPCSocket() {\n    var self = this;\n    if (this._sock) return this._sock;\n    \n    this._sock = dgram.createSocket('udp4');\n    this._sock.on('message', function(msg, info) {\n      try {\n        msg = JSON.parse(msg.toString('ascii'));\n        self.invoke(msg.method, msg.args, self.children[msg.id]);\n      } catch (err) {\n        console.error(err.stack || String(err));\n      }\n    });\n    return this._sock;\n  }\n\n  setupIPC() {\n    var self = this;\n    this.IPCSocket().on('listening', function() {\n      process.nextTick(function() {\n        self.emit('start');\n      });\n    });\n    this.IPCSocket().bind(\n      this.options['socket port'],\n      this.options['socket addr']\n    );\n  }\n\n  call(id, method) {\n    this.sock = this.sock || dgram.createSocket('udp4');\n    var msg = new Buffer(utils.frame({\n      args: utils.toArray(arguments, 2),\n      method: method,\n      id: id\n    }));\n    this.sock.send(\n      msg,\n      0,\n      msg.length,\n      this.options['socket port'],\n      this.options['socket addr']\n    );\n  }\n\n  invoke(method, args, worker) {\n    if (this[method]) {\n      this[method].apply(this, args.concat(worker));\n    }\n  }\n\n  connect(worker) {\n    this.emit('worker connected', worker);\n  }\n\n  connectMaster(sig) {\n    var self = this;\n    function kill() {\n      process.kill(self.ppid, sig);\n    }\n    if (this.listening) return kill();\n    this.on('listening', kill);\n  }\n\n  masterKilled(data) {\n    this.emit('restart', data);\n  }\n}",
  "FSMID_for_test": 98,
  "Code_level": "Class-level"
}