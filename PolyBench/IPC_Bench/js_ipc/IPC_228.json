{
  "Task_id": 228,
  "Github_ID": "10020773",
  "Github_Project_Name": "gekko",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client with automatic reconnection capabilities for robust browser-based communication. The solution should handle connection drops, implement exponential backoff for reconnection attempts, and provide event-based notification of connection states.\n\nClass Description: ReconnectingWebSocket is a WebSocket wrapper class that automatically reconnects when the connection is lost, with configurable reconnection timing and event handling. It maintains connection state and provides standard WebSocket-like interface.\n\nAttributes:\n- url: [String] - The WebSocket server URL to connect to\n- protocols: [Array/String] - Optional subprotocols for WebSocket\n- debug: [Boolean] - Whether to enable debug logging (default: false)\n- automaticOpen: [Boolean] - Whether to automatically open connection (default: true)\n- reconnectInterval: [Number] - Initial delay before reconnection in ms (default: 1000)\n- maxReconnectInterval: [Number] - Maximum delay between reconnections in ms (default: 30000)\n- reconnectDecay: [Number] - Multiplier for reconnection delay (default: 1.5)\n- timeoutInterval: [Number] - Connection timeout in ms (default: 2000)\n- reconnectAttempts: [Number] - Count of reconnection attempts\n- readyState: [Number] - Current connection state (matching WebSocket constants)\n- protocol: [String] - Selected subprotocol (set after connection)\n\nMethods:\n- constructor(url, protocols, options) -> [ReconnectingWebSocket] - Initializes new instance with connection parameters and options\n- addEventListener(type, listener) -> [void] - Adds event listener for connection events\n- removeEventListener(type, listener) -> [void] - Removes event listener\n- dispatchEvent(event) -> [void] - Triggers event handlers\n- open(reconnecting) -> [void] - Opens WebSocket connection (internal use)\n- send(data) -> [void] - Sends data through WebSocket connection\n- close(code, reason) -> [void] - Closes connection (no automatic reconnection)\n- refresh() -> [void] - Forces reconnection by closing current connection\n- onopen() -> [void] - Placeholder for open event handler\n- onclose() -> [void] - Placeholder for close event handler\n- onconnecting() -> [void] - Placeholder for connecting event handler\n- onmessage() -> [void] - Placeholder for message event handler\n- onerror() -> [void] - Placeholder for error event handler",
  "Canonical_solution": "class ReconnectingWebSocket {\n  constructor(url, protocols, options) {\n    const defaults = {\n      debug: false,\n      automaticOpen: true,\n      reconnectInterval: 1000,\n      maxReconnectInterval: 30000,\n      reconnectDecay: 1.5,\n      timeoutInterval: 2000\n    };\n    \n    options = options || {};\n    for (let key in defaults) {\n      this[key] = typeof options[key] !== 'undefined' ? options[key] : defaults[key];\n    }\n\n    this.url = url;\n    this.reconnectAttempts = 0;\n    this.readyState = WebSocket.CONNECTING;\n    this.protocol = null;\n\n    let forcedClose = false;\n    let timedOut = false;\n    let eventTarget = document.createElement('div');\n\n    this.addEventListener = eventTarget.addEventListener.bind(eventTarget);\n    this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);\n    this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);\n\n    this.open = function(reconnecting) {\n      let ws = new WebSocket(this.url, protocols || []);\n      if (!reconnecting) {\n        this.dispatchEvent(new Event('connecting'));\n      }\n\n      let timeout = setTimeout(() => {\n        timedOut = true;\n        ws.close();\n        timedOut = false;\n      }, this.timeoutInterval);\n\n      ws.onopen = () => {\n        clearTimeout(timeout);\n        this.protocol = ws.protocol;\n        this.readyState = WebSocket.OPEN;\n        this.reconnectAttempts = 0;\n        let event = new Event('open');\n        event.isReconnect = reconnecting;\n        this.dispatchEvent(event);\n      };\n\n      ws.onclose = (event) => {\n        clearTimeout(timeout);\n        ws = null;\n        if (forcedClose) {\n          this.readyState = WebSocket.CLOSED;\n          this.dispatchEvent(new Event('close'));\n        } else {\n          this.readyState = WebSocket.CONNECTING;\n          let connectingEvent = new Event('connecting');\n          Object.assign(connectingEvent, {\n            code: event.code,\n            reason: event.reason,\n            wasClean: event.wasClean\n          });\n          this.dispatchEvent(connectingEvent);\n\n          if (!reconnecting && !timedOut) {\n            this.dispatchEvent(new Event('close'));\n          }\n\n          let timeout = this.reconnectInterval * Math.pow(this.reconnectDecay, this.reconnectAttempts);\n          setTimeout(() => {\n            this.reconnectAttempts++;\n            this.open(true);\n          }, Math.min(timeout, this.maxReconnectInterval));\n        }\n      };\n\n      ws.onmessage = (event) => {\n        let messageEvent = new Event('message');\n        messageEvent.data = event.data;\n        this.dispatchEvent(messageEvent);\n      };\n\n      ws.onerror = (event) => {\n        this.dispatchEvent(new Event('error'));\n      };\n    };\n\n    if (this.automaticOpen) {\n      this.open(false);\n    }\n\n    this.send = function(data) {\n      if (ws) {\n        return ws.send(data);\n      }\n      throw new Error('INVALID_STATE_ERR : Pausing to reconnect websocket');\n    };\n\n    this.close = function(code, reason) {\n      forcedClose = true;\n      if (ws) {\n        ws.close(code || 1000, reason);\n      }\n    };\n\n    this.refresh = function() {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }\n\n  onopen() {}\n  onclose() {}\n  onconnecting() {}\n  onmessage() {}\n  onerror() {}\n}\n\nReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;\nReconnectingWebSocket.OPEN = WebSocket.OPEN;\nReconnectingWebSocket.CLOSING = WebSocket.CLOSING;\nReconnectingWebSocket.CLOSED = WebSocket.CLOSED;",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}