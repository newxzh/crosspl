{
  "Task_id": 82,
  "Github_ID": "18394992",
  "Github_Project_Name": "web-development-with-node-and-express",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a function to start an Express server with REST API endpoints for managing tourist attractions, including retrieving approved attractions, adding new attractions, and fetching specific attraction details.\n\nFunction Description: The function initializes an Express application, configures middleware, sets up REST API routes using connect-rest, and starts an HTTP server. It handles GET and POST requests for attractions data, connects to a MongoDB model for data persistence, and implements error handling through domains.\n\nInput: None (The function takes no parameters but relies on environment variables like PORT and requires external modules)\n\nOutput: Returns the HTTP server instance that was created and started.\n\nMethods:\n\n- GET /attractions: Retrieves all approved attractions (returns array of attraction objects)\n- POST /attraction: Creates a new attraction (requires name, description, location, and email in request body, returns new attraction ID)\n- GET /attraction/:id: Retrieves details of a specific attraction (requires ID parameter, returns attraction object)\n\nError Handling:\n- Implements domain-based error handling that logs errors and gracefully shuts down the server\n- Returns appropriate error messages for database operations\n\nDependencies:\n- Requires Express, connect-rest, body-parser, and a MongoDB model (Attraction)\n- Uses cluster module for worker process management in case of errors",
  "Canonical_solution": "function startServer() {\n    var http = require('http'),\n        express = require('express'),\n        app = express();\n\n    app.set('port', process.env.PORT || 3000);\n\n    app.use(express.static(__dirname + '/public'));\n    app.use(require('body-parser')());\n\n    var rest = require('connect-rest');\n    var apiOptions = {\n        context: '/',\n        domain: require('domain').create(),\n    };\n\n    apiOptions.domain.on('error', function(err){\n        console.log('API domain error.\\n', err.stack);\n        setTimeout(function(){\n            console.log('Server shutting down after API domain error.');\n            process.exit(1);\n        }, 5000);\n        server.close();\n        var worker = require('cluster').worker;\n        if(worker) worker.disconnect();\n    });\n\n    var Attraction = require('./models/attraction.js');\n\n    rest.get('/attractions', function(req, content, cb){\n        Attraction.find({ approved: true }, function(err, attractions){\n            if(err) return cb({ error: 'Internal error.' });\n            cb(null, attractions.map(function(a){\n                return {\n                    name: a.name,\n                    description: a.description,\n                    location: a.location,\n                };\n            }));\n        });\n    });\n\n    rest.post('/attraction', function(req, content, cb){\n        var a = new Attraction({\n            name: req.body.name,\n            description: req.body.description,\n            location: { lat: req.body.lat, lng: req.body.lng },\n            history: {\n                event: 'created',\n                email: req.body.email,\n                date: new Date(),\n            },\n            approved: false,\n        });\n        a.save(function(err, a){\n            if(err) return cb({ error: 'Unable to add attraction.' });\n            cb(null, { id: a._id });\n        }); \n    });\n\n    rest.get('/attraction/:id', function(req, content, cb){\n        Attraction.findById(req.params.id, function(err, a){\n            if(err) return cb({ error: 'Unable to retrieve attraction.' });\n            cb(null, { \n                name: a.name,\n                description: a.description,\n                location: a.location,\n            });\n        });\n    });\n\n    var server = http.createServer(app).listen(app.get('port'), function(){\n        console.log( 'Express started in ' + app.get('env') +\n            ' mode on http://localhost:' + app.get('port') +\n            '; press Ctrl-C to terminate.' );\n    });\n\n    return server;\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}