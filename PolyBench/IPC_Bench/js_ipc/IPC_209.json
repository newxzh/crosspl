{
  "Task_id": 209,
  "Github_ID": "133619330",
  "Github_Project_Name": "Photon",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket-based RPC (Remote Procedure Call) client class in JavaScript that supports establishing connections, sending requests, handling responses, and managing event listeners.\n\nClass Description: The RPCWebSocket class provides a WebSocket client implementation for JSON-RPC 2.0 communication. It handles connection management, request/response patterns, and event-based notifications with automatic reconnection capabilities.\n\nAttributes:\n_namespace: String - The namespace prefix for all RPC methods\n_listeners: Object - Stores registered event listeners as key-value pairs\n_handles: Object - Tracks pending requests and their callbacks\n_socket: WebSocket - The underlying WebSocket connection instance\n\nMethods:\nconstructor(address, encryption, namespace) -> void - Initializes the WebSocket connection with the given address, encryption flag, and namespace prefix\n\nsetAddress(address, encryption) -> void - Sets or resets the WebSocket connection URL with optional encryption (wss/ws)\n\naddListener(method, callback) -> void - Registers a callback function for a specific method name\n\nremoveListener(method) -> void - Removes the listener for a specific method name\n\nrequest(method, params, id, successCallback, errorCallback) -> void - Sends a single JSON-RPC request with the given method, parameters, and callbacks\n\nbatchRequest(requests, successCallback, errorCallback) -> void - Sends multiple JSON-RPC requests in a batch with shared callbacks\n\n_formatData(method, params, id) -> Object - Formats the data into JSON-RPC 2.0 compliant structure\n\n_send(data) -> void - Internal method for sending data through the WebSocket connection with state handling\n\n_onerror(error, handles) -> void - Internal error handler that triggers all pending error callbacks\n\n_onmessage(message, handles, listeners) -> void - Internal message handler that processes responses and notifications",
  "Canonical_solution": "class RPCWebSocket {\n  constructor (address, encryption = false, namespace) {\n    this.namespace = namespace\n    this._listeners = {}\n    this.setAddress(address, encryption)\n  }\n\n  setAddress (address, encryption) {\n    this._handles = {}\n    if (typeof WebSocket !== 'function') throw Error('This client does not support WebSocket.')\n    else {\n      let url = (encryption ? 'wss://' : 'ws://') + address\n      try {\n        this._socket = new WebSocket(url)\n        let that = this\n        this._socket.onclose = event => {\n          setTimeout(() => {\n            if (that._socket.readyState > 1) that.setAddress(address, encryption)\n          }, 10000)\n        }\n        this._socket.onerror = error => that._onerror(error, that._handles)\n        this._socket.onmessage = message => that._onmessage(message, that._handles, that._listeners)\n      } catch (error) {\n        console.error(error.message)\n      }\n    }\n  }\n\n  addListener (method, callback) {\n    if (typeof callback === 'function') this._listeners[this.namespace + '.' + method] = callback\n  }\n\n  removeListener (method) {\n    delete this._listeners[this.namespace + '.' + method]\n  }\n\n  request (method, params = [], id, successCallback, errorCallback) {\n    this._handles[id] = {\n      success: successCallback,\n      error: errorCallback\n    }\n    let data = this._formatData(method, params, id)\n    this._send(data)\n  }\n\n  batchRequest (requests, successCallback, errorCallback) {\n    if (requests.constructor !== Array) requests = [requests]\n    requests.forEach(request => {\n      this._handles[request.id] = {\n        success: successCallback,\n        error: errorCallback\n      }\n    })\n    let data = requests.map(request => this._formatData(request.method, request.params, request.id))\n    this._send(data)\n  }\n\n  _formatData (method, params = [], id = '') {\n    return {\n      jsonrpc: '2.0',\n      id: id,\n      method: this.namespace + '.' + method,\n      params: params.constructor === Array ? params : [params]\n    }\n  }\n\n  _send (data) {\n    let that = this\n    let socket = this._socket\n    if (socket.readyState > 1) socket.onerror(Error('WebSocket is in state ' + socket.readyState + '.'))\n    else if (socket.readyState === 0) setTimeout(() => that._send(data), 1000)\n    else socket.send(JSON.stringify(data))\n  }\n\n  _onerror (error, handles) {\n    if (error.hasOwnProperty('message')) console.error(error.message)\n    Object.keys(handles).forEach(id => {\n      if (typeof handles[id].error === 'function') handles[id].error(error)\n      delete handles[id]\n    })\n  }\n\n  _onmessage (message, handles, listeners) {\n    let data = JSON.parse(message.data)\n    if (data.constructor === Array) {\n      data = data.reduce((last, cur) => {\n        if (last.hasOwnProperty(cur.id)) last[cur.id].push(cur)\n        else last[cur.id] = [cur]\n        return last\n      }, {})\n      for (let id in data) {\n        if (handles.hasOwnProperty(id)) {\n          if (typeof handles[id].success === 'function') handles[id].success(data[id])\n          delete handles[id]\n        }\n      }\n    } else if (data.hasOwnProperty('id')) {\n      if (handles.hasOwnProperty(data.id)) {\n        if (typeof handles[data.id].success === 'function') handles[data.id].success(data)\n        delete handles[data.id]\n      }\n    } else if (data.hasOwnProperty('method')) {\n      if (listeners.hasOwnProperty(data.method)) {\n        if (typeof listeners[data.method] === 'function') listeners[data.method](data)\n      }\n    }\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}