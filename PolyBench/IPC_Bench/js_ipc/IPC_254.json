{
  "Task_id": 254,
  "Github_ID": "111184073",
  "Github_Project_Name": "api",
  "Programming_Language": "JavaScript",
  "suffix": ".ts",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes and manages a WebSocket connection, handles events (open, message, error, close), and provides methods for sending data and disconnecting.\n\nClass Description: The WsProvider class encapsulates WebSocket functionality, providing a clean interface for WebSocket communication. It handles connection lifecycle events and ensures proper cleanup when disconnecting.\n\nAttributes:\n#websocket: WebSocket | null - Private field storing the active WebSocket connection instance\n\nMethods:\nconstructor(endpoint: string) -> void - Initializes the WebSocket connection to the specified endpoint\n#connect(endpoint: string) -> void - Private method that establishes the WebSocket connection and sets up event handlers\n#onSocketClose(event: CloseEvent) -> void - Private method handling WebSocket close events\n#onSocketError(error: Event) -> void - Private method handling WebSocket error events\n#onSocketMessage(message: MessageEvent<string>) -> void - Private method handling incoming WebSocket messages\n#onSocketOpen() -> boolean - Private method handling WebSocket open events\nsend(body: string) -> void - Public method for sending data through the WebSocket connection\ndisconnect() -> void - Public method for properly closing the WebSocket connection",
  "Canonical_solution": "import type { Class } from '@polkadot/util/types';\nimport type { JsonRpcResponse, ProviderInterfaceCallback } from '../types.js';\nimport { EventEmitter } from 'eventemitter3';\nimport { isChildClass, isNull, isUndefined } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\n\nclass WsProvider {\n  #websocket: WebSocket | null;\n\n  constructor(endpoint: string) {\n    this.#websocket = null;\n    this.#connect(endpoint);\n  }\n\n  #connect(endpoint: string): void {\n    try {\n      this.#websocket = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket as unknown as Class<WebSocket>, WebSocket)\n        ? new WebSocket(endpoint)\n        : new WebSocket(endpoint, undefined, {});\n\n      if (this.#websocket) {\n        this.#websocket.onclose = this.#onSocketClose;\n        this.#websocket.onerror = this.#onSocketError;\n        this.#websocket.onmessage = this.#onSocketMessage;\n        this.#websocket.onopen = this.#onSocketOpen;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  #onSocketClose(event: CloseEvent): void {\n    this.#websocket = null;\n  }\n\n  #onSocketError(error: Event): void {\n    // Handle error\n  }\n\n  #onSocketMessage(message: MessageEvent<string>): void {\n    const response = JSON.parse(message.data) as JsonRpcResponse<string>;\n    // Process message\n  }\n\n  #onSocketOpen(): boolean {\n    return true;\n  }\n\n  public send(body: string): void {\n    if (!this.#websocket) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.#websocket.send(body);\n  }\n\n  public disconnect(): void {\n    if (this.#websocket) {\n      this.#websocket.close(1000);\n    }\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}