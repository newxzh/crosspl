{
  "Task_id": 257,
  "Github_ID": "59996401",
  "Github_Project_Name": "yapi",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes a connection to a server, handles incoming messages, manages connection errors, and provides functionality to close the connection.\n\nClass Description: The WebSocketClient class encapsulates WebSocket functionality for establishing and managing a WebSocket connection. It handles connection events, message reception, and error scenarios, while providing a clean interface for external message handling through a callback.\n\nAttributes:\n- url: [String] - The server URL to connect to (without protocol)\n- actionId: [String] - An identifier for the specific WebSocket action/channel\n- onMessageCallback: [Function] - Callback function to handle incoming messages\n- socket: [WebSocket|null] - Reference to the WebSocket connection instance\n- initData: [Boolean] - Flag indicating whether initial data has been received\n- WebSocket: [WebSocket|null] - Alias for the socket instance (set after successful connection)\n\nMethods:\n- constructor(url, actionId, onMessageCallback) -> [void] - Initializes the WebSocketClient with connection URL, action ID, and message callback\n- connect() -> [void] - Establishes the WebSocket connection and sets up event handlers\n- close() -> [void] - Closes the WebSocket connection if it exists",
  "Canonical_solution": "import axios from 'axios';\n\nclass WebSocketClient {\n  constructor(url, actionId, onMessageCallback) {\n    this.url = url;\n    this.actionId = actionId;\n    this.onMessageCallback = onMessageCallback;\n    this.socket = null;\n    this.initData = false;\n  }\n\n  connect() {\n    try {\n      this.socket = new WebSocket(\n        `${location.protocol === 'https:' ? 'wss' : 'ws'}://${this.url}/api/interface/solve_conflict?id=${this.actionId}`\n      );\n\n      this.socket.onopen = () => {\n        this.WebSocket = this.socket;\n      };\n\n      this.socket.onmessage = (e) => {\n        this.initData = true;\n        const result = JSON.parse(e.data);\n        this.onMessageCallback(result);\n      };\n\n      this.socket.onerror = () => {\n        console.warn('websocket \u8fde\u63a5\u5931\u8d25\uff0c\u5c06\u5bfc\u81f4\u591a\u4eba\u7f16\u8f91\u540c\u4e00\u4e2a\u63a5\u53e3\u51b2\u7a81\u3002');\n      };\n\n    } catch (e) {\n      console.error('websocket \u8fde\u63a5\u5931\u8d25\uff0c\u5c06\u5bfc\u81f4\u591a\u4eba\u7f16\u8f91\u540c\u4e00\u4e2a\u63a5\u53e3\u51b2\u7a81\u3002');\n    }\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}