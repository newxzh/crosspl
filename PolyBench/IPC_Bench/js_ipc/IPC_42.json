{
  "Task_id": 42,
  "Github_ID": "58623321",
  "Github_Project_Name": "flv.js",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Server - side based on XMLHttpRequest in JavaScript",
  "Instruction": "Task Description: Implement a class for handling chunked data loading via XMLHttpRequest with support for range requests, progress tracking, and error handling.\n\nClass Description: The MozChunkedLoader class is designed to handle asynchronous loading of chunked binary data from a server using XMLHttpRequest with 'moz-chunked-arraybuffer' response type. It supports range requests, tracks loading progress, handles redirects, and provides comprehensive error handling.\n\nAttributes:\n- _seekHandler: [Object] - Handler for URL and range configuration\n- _config: [Object] - Configuration object for the loader\n- _needStash: [Boolean] - Flag indicating whether data needs to be stashed\n- _xhr: [XMLHttpRequest|null] - The XMLHttpRequest instance\n- _requestAbort: [Boolean] - Flag indicating if the request was aborted\n- _contentLength: [Number|null] - Total content length of the resource\n- _receivedLength: [Number] - Number of bytes received so far\n- _dataSource: [Object] - Data source configuration\n- _range: [Object] - Request range parameters\n- _requestURL: [String] - The URL used for the request\n\nMethods:\n- constructor(seekHandler, config) -> [MozChunkedLoader] - Initializes the loader with seek handler and configuration\n- open(dataSource, range) -> [void] - Opens a connection to the specified data source with range parameters\n- abort() -> [void] - Aborts the current request\n- _onReadyStateChange(e) -> [void] - Handles XMLHttpRequest ready state changes\n- _onProgress(e) -> [void] - Handles progress events during data loading\n- _onLoadEnd(e) -> [void] - Handles request completion\n- _onXhrError(e) -> [void] - Handles XMLHttpRequest errors\n\nEvent Callbacks (to be set externally):\n- _onURLRedirect: [Function] - Called when URL redirection occurs\n- _onError: [Function] - Called when an error occurs\n- _onContentLengthKnown: [Function] - Called when content length is determined\n- _onDataArrival: [Function] - Called when new data chunk arrives\n- _onComplete: [Function] - Called when loading completes successfully",
  "Canonical_solution": "class MozChunkedLoader {\n    constructor(seekHandler, config) {\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = true;\n        this._xhr = null;\n        this._requestAbort = false;\n        this._contentLength = null;\n        this._receivedLength = 0;\n    }\n\n    open(dataSource, range) {\n        this._dataSource = dataSource;\n        this._range = range;\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n            sourceURL = dataSource.redirectedURL;\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n        this._requestURL = seekConfig.url;\n\n        let xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = 'moz-chunked-arraybuffer';\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onprogress = this._onProgress.bind(this);\n        xhr.onloadend = this._onLoadEnd.bind(this);\n        xhr.onerror = this._onXhrError.bind(this);\n\n        if (dataSource.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if (typeof seekConfig.headers === 'object') {\n            let headers = seekConfig.headers;\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        if (typeof this._config.headers === 'object') {\n            let headers = this._config.headers;\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        xhr.send();\n    }\n\n    abort() {\n        this._requestAbort = true;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n    }\n\n    _onReadyStateChange(e) {\n        let xhr = e.target;\n        if (xhr.readyState === 2) {\n            if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n                if (this._onURLRedirect) {\n                    let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    this._onURLRedirect(redirectedURL);\n                }\n            }\n\n            if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\n                }\n            }\n        }\n    }\n\n    _onProgress(e) {\n        if (this._contentLength === null) {\n            if (e.total !== null && e.total !== 0) {\n                this._contentLength = e.total;\n                if (this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n        }\n\n        let chunk = e.target.response;\n        let byteStart = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if (this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n    }\n\n    _onLoadEnd(e) {\n        if (this._requestAbort === true) {\n            this._requestAbort = false;\n            return;\n        }\n\n        if (this._onComplete) {\n            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n        }\n    }\n\n    _onXhrError(e) {\n        let type = 0;\n        let info = null;\n\n        if (this._contentLength && e.loaded < this._contentLength) {\n            type = LoaderErrors.EARLY_EOF;\n            info = {code: -1, msg: 'Moz-Chunked stream meet Early-Eof'};\n        } else {\n            type = LoaderErrors.EXCEPTION;\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\n        }\n\n        if (this._onError) {\n            this._onError(type, info);\n        }\n    }\n}",
  "FSMID_for_test": 93,
  "Code_level": "Class-level"
}