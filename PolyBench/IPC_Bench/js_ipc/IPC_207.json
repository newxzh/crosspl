{
  "Task_id": 207,
  "Github_ID": "264125852",
  "Github_Project_Name": "Luckysheet",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that handles real-time communication with a server, including connection management, message handling, and error recovery.\n\nClass Description: The WebSocketClient class manages WebSocket connections to a server, providing methods to open/close connections, send messages, and handle various WebSocket events. It includes automatic reconnection logic and heartbeat mechanism to maintain connection.\n\nAttributes:\n- websocket: [WebSocket] - The WebSocket connection instance\n- wxErrorCount: [Number] - Counter for tracking connection errors\n- updateUrl: [String] - Base URL for WebSocket connection\n- gridKey: [String] - Identifier for the grid/session\n- retryTimer: [Number] - Timer ID for the heartbeat interval\n\nMethods:\n- constructor(updateUrl, gridKey) -> [WebSocketClient] - Initializes the WebSocket client with connection URL and grid key\n- openWebSocket() -> [void] - Establishes WebSocket connection and sets up event handlers\n- sendMessage(data) -> [void] - Sends compressed data through the WebSocket connection\n- closeConnection() -> [void] - Properly closes the WebSocket connection\n\nEvent Handlers:\n- onopen: [Function] - Handles connection establishment\n- onmessage: [Function] - Processes incoming messages from server\n- onerror: [Function] - Manages connection errors with retry logic\n- onclose: [Function] - Handles connection closure scenarios",
  "Canonical_solution": "import pako from 'pako';\n\nclass WebSocketClient {\n    constructor(updateUrl, gridKey) {\n        this.websocket = null;\n        this.wxErrorCount = 0;\n        this.updateUrl = updateUrl;\n        this.gridKey = gridKey;\n    }\n\n    openWebSocket() {\n        let _this = this;\n\n        if('WebSocket' in window) {\n            let wxUrl = _this.updateUrl + \"?t=111&g=\" + encodeURIComponent(_this.gridKey);\n            if(_this.updateUrl.indexOf('?') > -1) {\n                wxUrl = _this.updateUrl + \"&t=111&g=\" + encodeURIComponent(_this.gridKey);\n            }\n\n            _this.websocket = new WebSocket(wxUrl);\n\n            // Connection established\n            _this.websocket.onopen = function() {\n                console.info(locale().websocket.success);\n                hideloading();\n                _this.wxErrorCount = 0;\n\n                // Prevent WebSocket from disconnecting due to inactivity\n                _this.retryTimer = setInterval(function() {\n                    _this.websocket.send(\"rub\");\n                }, 60000);\n            }\n\n            // Client receives server data\n            _this.websocket.onmessage = function(result) {\n                Store.result = result;\n                let data = new Function(\"return \" + result.data)();\n                method.createHookFunction('cooperativeMessage', data);\n                console.info(data);\n                let type = data.type;\n                let {message, id} = data;\n                \n                // Handle different message types\n                if(message === '\u7528\u6237\u9000\u51fa') {\n                    $(\"#luckysheet-multipleRange-show-\" + id).hide();\n                    Store.cooperativeEdit.changeCollaborationSize = Store.cooperativeEdit.changeCollaborationSize.filter(value => {\n                        return value.id != id\n                    });\n                    Store.cooperativeEdit.checkoutData = Store.cooperativeEdit.checkoutData.filter(value => {\n                        return value.id != id\n                    });\n                }\n                \n                // Handle different message types (1: send success/failure, 2: update data, etc.)\n                // ... (rest of the message handling logic)\n            }\n\n            // Communication error occurred\n            _this.websocket.onerror = function() {\n                _this.wxErrorCount++;\n\n                if(_this.wxErrorCount > 3) {\n                    showloading(locale().websocket.refresh);\n                } else {\n                    showloading(locale().websocket.wait);\n                    _this.openWebSocket();\n                }\n            }\n\n            // Connection closed\n            _this.websocket.onclose = function(e) {\n                console.info(locale().websocket.close);\n                if(e.code === 1000) {\n                    clearInterval(_this.retryTimer);\n                    _this.retryTimer = null;\n                } else {\n                    alert(locale().websocket.contact);\n                }\n            }\n        } else {\n            alert(locale().websocket.support);\n        }\n    }\n\n    sendMessage(data) {\n        if(this.websocket != null) {\n            let msg = pako.gzip(encodeURIComponent(JSON.stringify(data)), {to: \"string\"});\n            this.websocket.send(msg);\n        }\n    }\n\n    closeConnection() {\n        if(this.websocket != null) {\n            this.websocket.close();\n        }\n    }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}