{
  "Task_id": 178,
  "Github_ID": "127364556",
  "Github_Project_Name": "awesome-blockchain",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side based on node.js net",
  "Instruction": "Task Description: Create a Node class that implements a TCP-based peer-to-peer communication system using Node.js's net module. The class should handle server creation, client connections, message passing, and peer management.\n\nClass Description: The Node class represents a network node that can both accept incoming connections and establish outgoing connections to other peers. It uses TCP sockets for communication and implements basic peer discovery and message broadcasting capabilities.\n\nAttributes:\n\nid_: [Number] - Unique identifier for this node\npeers_: [Object] - Dictionary mapping peer IDs to their socket connections\nPORT: [Number] - Base port number for node communication (actual port is PORT + id)\nserver_: [net.Server] - TCP server instance for accepting incoming connections\n\nMethods:\n\nconstructor(id) -> [void] - Initializes the node with given ID, sets up event emitter, and creates TCP server\nstart() -> [Promise] - Attempts to connect to random peers (up to 5) for network formation\non_data(data, socket) -> [void] - Handles incoming data from sockets, parses messages and emits events\nsend(socket, data) -> [void] - Sends data to a peer (either via socket object or peer ID)\nbroadcast(data) -> [void] - Sends data to all connected peers\nadd_peer(socket, remote_id) -> [void] - Adds a peer connection to the peers dictionary\nremove_peer(socket) -> [void] - Removes a peer connection from the peers dictionary\nlist_peers() -> [Array] - Returns an array of connected peer IDs",
  "Canonical_solution": "var net = require(\"net\");\nvar Msg = require(\"./message\");\nvar EventEmitter = require('events').EventEmitter;\nvar Promise = require(\"bluebird\");\n\nclass Node extends EventEmitter {\n    constructor(id) {\n        super();\n        this.id_ = id;\n        this.peers_ = {};\n        this.PORT = 8000;\n\n        let self = this;\n        this.server_ = net.createServer((socket) => {\n            socket.setEncoding('utf8');\n            socket.on('data', (data) => { self.on_data(data, socket); });\n            socket.on('end', () => { self.remove_peer(socket); });\n        });\n        this.server_.listen(this.PORT + id);\n    }\n\n    async start() {\n        for (var i = 0; i < 5; ++i) {\n            var remote_id = Math.floor(Math.random() * 20);\n            if (remote_id !== this.id_ && !this.peers_[remote_id]) {\n                let self = this;\n                var socket = net.createConnection({ port: (this.PORT + remote_id) });\n                await new Promise((resolve, reject) => {\n                    socket.on('connect', () => {\n                        resolve();\n                    });\n                    socket.on('error', function (e) {\n                        resolve();\n                    });\n                    socket.setEncoding('utf8');\n                    socket.on('data', (data) => { self.on_data(data, socket); });\n                });\n                let data = Msg.connection(self.id_);\n                self.send(socket, data);\n                self.add_peer(socket, remote_id);\n            }\n        }\n    }\n\n    on_data(data, socket) {\n        try {\n            var arr = data.split(\"\\r\\n\");\n            for (var i = 0; i < arr.length; ++i) {\n                if (arr[i] == '') continue;\n                let obj = JSON.parse(arr[i]);\n                if (obj.type == Msg.type.Connection) {\n                    let remote_id = obj.data;\n                    this.add_peer(socket, remote_id);\n                } else {\n                    this.emit(\"message\", obj);\n                }\n            }\n        } catch (err) {\n            console.log(\"=========================\");\n            console.log(`node: ${this.id_}\\t receive msg error`);\n            console.log(err);\n            console.log(err.message);\n            console.log(data);\n            console.log(arr.length);\n            console.log(\"=========================\");\n            throw new Error();\n        }\n    }\n\n    send(socket, data) {\n        if (typeof socket === 'number') {\n            socket = this.peers_[socket];\n        }\n        if (typeof data === 'object') {\n            data = JSON.stringify(data);\n        }\n        socket.write(data + \"\\r\\n\");\n    }\n\n    broadcast(data) {\n        for (var index in this.peers_) {\n            let socket = this.peers_[index];\n            this.send(socket, data);\n        }\n    }\n\n    add_peer(socket, remote_id) {\n        if (!this.peers_[remote_id]) {\n            this.peers_[remote_id] = socket;\n        }\n    }\n\n    remove_peer(socket) {\n        for (var index in this.peers_) {\n            if (this.peers_[index] == socket) {\n                delete this.peers_[index];\n                break;\n            }\n        }\n    }\n\n    list_peers() {\n        let peer_ids = [];\n        for (var index in this.peers_) {\n            peer_ids.push(index);\n        }\n        return peer_ids;\n    }\n}",
  "FSMID_for_test": 97,
  "Code_level": "Class-level"
}