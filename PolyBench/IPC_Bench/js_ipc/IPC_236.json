{
  "Task_id": 236,
  "Github_ID": "117591846",
  "Github_Project_Name": "server",
  "Programming_Language": "JavaScript",
  "suffix": ".ts",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that manages WebSocket connections, handles events (connection, messages, errors, closing), and provides methods to start listening and close the connection.\n\nClass Description: The WebSocketStore class manages WebSocket connections for real-time communication. It handles connection lifecycle events, automatically reconnects on failure, and provides clean connection closure. It integrates with authentication and notification systems.\n\nAttributes:\n- wsActive: boolean - Tracks whether a WebSocket connection is currently active.\n- ws: WebSocket | null - Holds the active WebSocket connection instance.\n\nMethods:\n- constructor(snack: SnackReporter, currentUser: CurrentUser) -> void - Initializes the WebSocketStore with notification and user authentication dependencies.\n- listen(callback: (msg: IMessage) => void) -> void - Establishes a WebSocket connection and sets up event handlers. Takes a callback function for incoming messages.\n- close() -> void - Properly closes the WebSocket connection with status code 1000 (normal closure).",
  "Canonical_solution": "import {SnackReporter} from '../snack/SnackManager';\nimport {CurrentUser} from '../CurrentUser';\nimport * as config from '../config';\nimport {AxiosError} from 'axios';\nimport {IMessage} from '../types';\n\nexport class WebSocketStore {\n    private wsActive = false;\n    private ws: WebSocket | null = null;\n\n    public constructor(\n        private readonly snack: SnackReporter,\n        private readonly currentUser: CurrentUser\n    ) {}\n\n    public listen = (callback: (msg: IMessage) => void) => {\n        if (!this.currentUser.token() || this.wsActive) {\n            return;\n        }\n        this.wsActive = true;\n\n        const wsUrl = config.get('url').replace('http', 'ws').replace('https', 'wss');\n        const ws = new WebSocket(wsUrl + 'stream?token=' + this.currentUser.token());\n\n        ws.onerror = (e) => {\n            this.wsActive = false;\n            console.log('WebSocket connection errored', e);\n        };\n\n        ws.onmessage = (data) => callback(JSON.parse(data.data));\n\n        ws.onclose = () => {\n            this.wsActive = false;\n            this.currentUser\n                .tryAuthenticate()\n                .then(() => {\n                    this.snack('WebSocket connection closed, trying again in 30 seconds.');\n                    setTimeout(() => this.listen(callback), 30000);\n                })\n                .catch((error: AxiosError) => {\n                    if (error?.response?.status === 401) {\n                        this.snack('Could not authenticate with client token, logging out.');\n                    }\n                });\n        };\n\n        this.ws = ws;\n    };\n\n    public close = () => this.ws?.close(1000, 'WebSocketStore#close');\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}