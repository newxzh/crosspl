{
  "Task_id": 216,
  "Github_ID": "64893263",
  "Github_Project_Name": "uirecorder",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Create a WebSocket client function in JavaScript that establishes a connection to a server, handles incoming messages, and manages connection events.\n\nFunction Description: The `connectServer` function initializes a WebSocket connection to a specified port on localhost. It sets up event handlers for connection opening, incoming messages, and connection closing. The function processes different types of messages (config, checkResult, moduleStart, moduleEnd, mobileAppInfo) and triggers appropriate actions including notifications and event emissions.\n\nInput:\n- port: Number - The port number to connect to on localhost (127.0.0.1)\n\nOutput: None (The function establishes a WebSocket connection and sets up event handlers but doesn't return any value)\n\nNote: The function maintains connection state through the global variable `wsSocket` and interacts with other parts of the system through the `GlobalEvents` emitter and Chrome notifications API.",
  "Canonical_solution": "function connectServer(port) {\n    if (!wsSocket) {\n        wsSocket = new WebSocket('ws://127.0.0.1:' + port, \"protocolOne\");\n        wsSocket.onopen = function(event) {\n            console.log('ws connected!');\n        }\n        wsSocket.onmessage = function(message) {\n            message = message.data;\n            try {\n                message = JSON.parse(message);\n            } catch (e) {}\n            var type = message.type;\n            var data = message.data;\n            switch (type) {\n                case 'config':\n                    recordConfig = data;\n                    i18n = recordConfig.i18n;\n                    GlobalEvents.emit('updateConfig', recordConfig);\n                    break;\n                case 'checkResult':\n                    chrome.notifications.create({\n                        type: 'basic',\n                        iconUrl: 'img/' + (data.success ? 'success' : 'fail') + '.png',\n                        title: data.success ? __('exec_succeed') : __('exec_failed'),\n                        message: data.title\n                    });\n                    GlobalEvents.emit('checkResult', data);\n                    break;\n                case 'moduleStart':\n                    isModuleLoading = true;\n                    recordConfig.isModuleLoading = true;\n                    chrome.notifications.create({\n                        type: 'basic',\n                        iconUrl: 'img/warn.png',\n                        title: __('module_start_title'),\n                        message: __('module_start_message', data.file)\n                    });\n                    GlobalEvents.emit('moduleStart');\n                    break;\n                case 'moduleEnd':\n                    isModuleLoading = false;\n                    recordConfig.isModuleLoading = false;\n                    chrome.notifications.create({\n                        type: 'basic',\n                        iconUrl: 'img/' + (data.success ? 'success' : 'fail') + '.png',\n                        title: __('module_end_title'),\n                        message: __('module_end_message', data.success ? __('succeed') : __('failed'), data.file)\n                    });\n                    GlobalEvents.emit('moduleEnd');\n                    break;\n                case 'mobileAppInfo':\n                    GlobalEvents.emit('mobileAppInfo', data);\n                    break;\n            }\n        }\n        wsSocket.onclose = function() {\n            wsSocket = null;\n            console.log('ws closed!');\n        }\n    }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Function-level"
}