{
  "Task_id": 243,
  "Github_ID": "70612113",
  "Github_Project_Name": "Home-AssistantConfig",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Create a WebSocket client class in JavaScript that manages WebSocket connections, including connection establishment, message handling, error handling, and reconnection logic.\n\nClass Description: The S class is a custom HTMLElement that encapsulates WebSocket functionality. It handles WebSocket connection lifecycle events, message processing (both text and binary), automatic reconnection, and provides methods for sending data.\n\nAttributes:\n- wsState: [Number] - Tracks the current state of the WebSocket connection (CLOSED, CONNECTING, OPEN)\n- ws: [WebSocket|null] - The active WebSocket connection instance\n- wsURL: [String] - The URL for the WebSocket server connection\n- onmessage: [Object|null] - Callback functions for handling incoming messages\n- connectTS: [Number] - Timestamp of when the connection was initiated\n- reconnectTID: [Number] - Timeout ID for reconnection attempts\n- RECONNECT_TIMEOUT: [Number] - Constant for reconnection delay (implied but not shown in code)\n- ondata: [Function|null] - Callback for binary data handling\n\nMethods:\n- onconnect() -> [Boolean] - Initiates a WebSocket connection. Returns true if connection attempt started.\n- onopen() -> [void] - Handles WebSocket open event, sets up message listeners.\n- onclose() -> [Boolean] - Handles WebSocket close event, initiates reconnection. Returns true if reconnection scheduled.\n- ondisconnect() -> [void] - Closes the WebSocket connection and cleans up resources.\n- send(e: [Object]) -> [void] - Sends a JSON-serialized message through the WebSocket connection.",
  "Canonical_solution": "class S extends HTMLElement {\n  constructor() {\n    super();\n    this.wsState = WebSocket.CLOSED;\n    this.ws = null;\n    this.wsURL = \"\";\n    this.onmessage = null;\n  }\n\n  onconnect() {\n    if (!this.isConnected || !this.wsURL || this.ws || this.pc) return false;\n    \n    this.wsState = WebSocket.CONNECTING;\n    this.connectTS = Date.now();\n    this.ws = new WebSocket(this.wsURL);\n    this.ws.binaryType = \"arraybuffer\";\n    \n    this.ws.addEventListener(\"open\", (e) => this.onopen(e));\n    this.ws.addEventListener(\"close\", (e) => this.onclose(e));\n    \n    return true;\n  }\n\n  onopen() {\n    this.wsState = WebSocket.OPEN;\n    \n    this.ws.addEventListener(\"message\", (e) => {\n      if (\"string\" == typeof e.data) {\n        const t = JSON.parse(e.data);\n        for (const e in this.onmessage) this.onmessage[e](t);\n      } else {\n        this.ondata(e.data);\n      }\n    });\n    \n    this.ondata = null;\n    this.onmessage = {};\n  }\n\n  onclose() {\n    if (this.wsState === WebSocket.CLOSED) return false;\n    \n    this.wsState = WebSocket.CONNECTING;\n    this.ws = null;\n    \n    const e = Math.max(this.RECONNECT_TIMEOUT - (Date.now() - this.connectTS), 0);\n    this.reconnectTID = setTimeout(() => {\n      this.reconnectTID = 0;\n      this.onconnect();\n    }, e);\n    \n    return true;\n  }\n\n  ondisconnect() {\n    this.wsState = WebSocket.CLOSED;\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  send(e) {\n    this.ws && this.ws.send(JSON.stringify(e));\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}