{
  "Task_id": 61,
  "Github_ID": "1145302",
  "Github_Project_Name": "Locker",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create an HTTP server using Express.js that handles various routes for data processing, API endpoints, and event handling. The server should dynamically generate API endpoints based on available utility functions and provide basic route handling for updates, embedding, and event processing.\n\nFunction Description: The `createServer` function initializes an Express.js server with middleware configuration, defines route handlers for specific endpoints, dynamically creates API routes based on utility functions, and starts the server on a random available port. It outputs the server's port information as JSON to stdout.\n\nInput: None (The function takes no parameters but relies on external modules and variables like `express`, `connect`, `dataIn`, `locker`, `oembed`, `async`, `logger`, and `util` being available in scope)\n\nOutput: \n- The function doesn't return anything directly\n- Writes server port information to stdout as JSON: `{port: [number]}`\n- Creates a running HTTP server listening on localhost\n- Provides the following endpoints:\n  - GET /update - Triggers reindexing\n  - GET /embed - Handles oEmbed requests\n  - POST /events - Processes queued events\n  - Dynamic GET routes based on utility functions",
  "Canonical_solution": "function createServer() {\n    var express = require('express'),\n        connect = require('connect');\n    var app = express.createServer(connect.bodyParser());\n    app.use(require(\"express-jsonstream\")());\n    app.set('views', __dirname);\n    app.get('/update', function (req, res) {\n        dataIn.reIndex(locker, function () {\n            res.writeHead(200);\n            res.end('Extra mince!');\n        });\n    });\n    app.get('/embed', function (req, res) {\n        if (!dataIn.process) return res.send({});\n        oembed.fetch({url:req.query.url}, function (e) {\n            if(e) return res.send(e);\n            res.send({});\n        });\n    });\n    app.post('/events', function (req, res) {\n        var q = async.queue(dataIn.processEvent, 1);\n        req.jsonStream(q.push, function (error) {\n            if(error) logger.error(error);\n            res.send(200);\n        });\n    });\n    function genericApi(name,f) {\n        app.get(name, function (req,res) {\n            var results = [];\n            f(req.query, function (item) { results.push(item); }, function (err) {\n                if(err) {\n                    res.writeHead(500, {'Content-Type': 'text/plain'});\n                    res.end(err);\n                } else {\n                    res.writeHead(200, {'Content-Type': 'application/json'});\n                    res.end(JSON.stringify(results));\n                }\n            });\n        });\n    }\n    for (var f in util) {\n        if (f == 'init') continue;\n        genericApi('/'+f,util[f]);\n    }\n    app.listen(0, 'localhost', function () {\n        var returnedInfo = {port: app.address().port};\n        process.stdout.write(JSON.stringify(returnedInfo));\n    });\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}