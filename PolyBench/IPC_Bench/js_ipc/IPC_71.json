{
  "Task_id": 71,
  "Github_ID": "107108009",
  "Github_Project_Name": "bottender",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a function to set up an Express server with Bottender integration for handling HTTP requests, including specific routes for sending an ID and serving a LIFF page.\n\nFunction Description: The function `setupServer` initializes an Express server with Bottender framework integration. It configures middleware for JSON body parsing, sets up route handlers for '/send-id' and '/liff' endpoints, and provides a catch-all handler for other routes. The server listens on a specified port (default 5000) and serves both API responses and static files.\n\nInput: None (The function uses environment variables: PORT for server port and LINE_LIFF_ID for the ID to be sent)\n\nOutput: None (The function starts an HTTP server that listens on the specified port and handles incoming requests)\n\nNote: The function requires the following npm packages to be installed: express, body-parser, path, bottender",
  "Canonical_solution": "function setupServer() {\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const { bottender } = require('bottender');\n\n    const app = bottender({\n        dev: process.env.NODE_ENV !== 'production',\n    });\n\n    const port = Number(process.env.PORT) || 5000;\n    const handle = app.getRequestHandler();\n\n    app.prepare().then(() => {\n        const server = express();\n\n        server.use(\n            bodyParser.json({\n                verify: (req, _, buf) => {\n                    req.rawBody = buf.toString();\n                },\n            })\n        );\n\n        server.get('/send-id', (req, res) => {\n            res.json({ id: process.env.LINE_LIFF_ID });\n        });\n\n        server.get('/liff', (req, res) => {\n            const filename = path.join(`${__dirname}/liff.html`);\n            res.sendFile(filename);\n        });\n\n        server.all('*', (req, res) => {\n            return handle(req, res);\n        });\n\n        server.listen(port, (err) => {\n            if (err) throw err;\n            console.log(`> Ready on http://localhost:${port}`);\n        });\n    });\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}