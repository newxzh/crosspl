{
  "Task_id": 168,
  "Github_ID": "98419904",
  "Github_Project_Name": "android_interview",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side based on node.js net",
  "Instruction": "Task Description: Create a TCP server using Node.js's `net` module to handle client connections and manage sessions with unique identifiers, while optionally supporting weak references for garbage collection.\n\nClass Description: The `DNodeServer` class is a TCP server implementation that manages client connections, assigns unique session IDs, and provides event-based interaction with connected clients. It supports optional weak reference handling for callbacks to prevent memory leaks.\n\nAttributes:\n- cons: [Function] - The constructor or function to be called for each new connection.\n- opts: [Object] - Configuration options for the server, including weak reference settings.\n- server: [net.Server] - The underlying TCP server instance.\n- server.sessions: [Object] - Dictionary of active sessions indexed by session IDs.\n\nMethods:\n- constructor(cons, opts) -> [DNodeServer] - Initializes the server with a connection handler and options. Sets up weak reference handling if enabled.\n- _handleConnection(stream) -> [void] - Handles new client connections, creates session with unique ID, and sets up data piping and event forwarding.\n- listen(port, host, callback) -> [net.Server] - Starts the server listening on specified port/host or UNIX socket path. Accepts optional callback for 'listening' event.\n- _randomId() -> [string] - Generates a random 16-character hexadecimal string for session identification.\n\nInput:\n- cons: [Function] - Required connection handler function\n- opts: [Object] - Optional configuration object (may contain 'weak' and 'proto' properties)\n- port: [number|string] - Port number or UNIX socket path to listen on\n- host: [string] - Optional hostname to bind to\n- callback: [Function] - Optional callback for listening event\n\nOutput:\n- Instance of DNodeServer when constructed\n- Instance of net.Server when calling listen()",
  "Canonical_solution": "var dnode = require('./lib/dnode');\nvar net = require('net');\nvar weak;\n\nclass DNodeServer {\n    constructor(cons, opts) {\n        if (!opts) opts = {};\n        \n        if (opts.weak !== false && !opts.proto) {\n            if (!weak) {\n                weak = require(\"weak\");\n            }\n            \n            opts.proto = {};\n            opts.proto.wrap = function (cb, id) {\n                var proto = this;\n                return weak(cb, function () {\n                    proto.cull(id);\n                });\n            };\n            opts.proto.unwrap = function (ref, id) {\n                var cb = weak.get(ref);\n                return cb || function () {};\n            };\n        }\n        \n        this.cons = cons;\n        this.opts = opts;\n        this.server = net.createServer(this._handleConnection.bind(this));\n        this.server.sessions = {};\n    }\n\n    _handleConnection(stream) {\n        var d = new dnode(this.cons, this.opts);\n        do { d.id = this._randomId(); }\n        while (this.server.sessions[d.id]);\n        \n        this.server.sessions[d.id] = d;\n        d.on('end', () => {\n            delete this.server.sessions[d.id];\n        });\n        \n        d.on('local', (ref) => {\n            this.server.emit('local', ref, d);\n        });\n        \n        d.on('remote', (remote) => {\n            this.server.emit('remote', remote, d);\n        });\n        \n        stream.on('error', (err) => {\n            if (err && err.code === 'EPIPE') return;\n            d.emit('error', err);\n        });\n        \n        d.stream = stream;\n        stream.pipe(d);\n        d.pipe(stream);\n    }\n\n    listen(port, host, callback) {\n        if (typeof port === 'number' && port >= 0) {\n            this.server.listen(port, host);\n        } else if (typeof port === 'string') {\n            this.server.listen(port);\n        } else {\n            throw new Error('no port or path provided');\n        }\n        \n        if (callback) {\n            this.server.on('listening', callback);\n        }\n        \n        return this.server;\n    }\n\n    _randomId() {\n        var s = '';\n        for (var i = 0; i < 4; i++) {\n            s += Math.random().toString(16).slice(2);\n        }\n        return s;\n    }\n}",
  "FSMID_for_test": 97,
  "Code_level": "Class-level"
}