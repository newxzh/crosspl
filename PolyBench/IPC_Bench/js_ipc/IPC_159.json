{
  "Task_id": 159,
  "Github_ID": "12618379",
  "Github_Project_Name": "node-red",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side based on node.js net",
  "Instruction": "Task Description: Create a TCP server class that handles authentication requests for Git or SSH operations, generating dynamic listening paths and managing server lifecycle events.\n\nClass Description: The ResponseServer class is designed to create a TCP server that responds to authentication prompts from Git or SSH clients. It generates platform-specific listening paths, handles incoming connection requests, and provides appropriate authentication credentials based on the server type.\n\nAttributes:\n- auth: [Object] - Contains authentication credentials (username, password, passphrase)\n- serverType: [String] - Specifies the server type ('git' or 'ssh')\n\nMethods:\n- constructor(auth, serverType = 'git') -> [void] - Initializes the server with authentication credentials and server type\n- getListenPath() -> [String] - Generates a platform-specific listening path with a random component for security\n- start() -> [Promise<Object>] - Starts the TCP server and returns a promise that resolves to an object containing the listening path and a close method\n\nMethods Details:\n1. constructor(auth, serverType = 'git'):\n   - auth: [Object] - Authentication credentials object\n   - serverType: [String] - Type of server ('git' or 'ssh'), defaults to 'git'\n   - Returns: [void]\n\n2. getListenPath():\n   - Returns: [String] - Platform-specific listening path (Windows named pipe or Unix domain socket path)\n\n3. start():\n   - Returns: [Promise<Object>] - Resolves to an object with:\n     - path: [String] - The listening path\n     - close: [Function] - Method to close the server\n   - The promise may reject with an error if server startup fails",
  "Canonical_solution": "var net = require(\"net\");\nvar fs = require(\"fs-extra\");\nvar path = require(\"path\");\nvar os = require(\"os\");\nconst crypto = require(\"crypto\");\n\nclass ResponseServer {\n    constructor(auth, serverType = 'git') {\n        this.auth = auth;\n        this.serverType = serverType;\n    }\n\n    getListenPath() {\n        var seed = crypto.randomBytes(8).toString('hex');\n        var fn = 'node-red-git-askpass-'+seed+'-sock';\n        var listenPath;\n        if (process.platform === 'win32') {\n            listenPath = '\\\\\\\\.\\\\pipe\\\\'+fn;\n        } else {\n            listenPath = path.join(process.env['XDG_RUNTIME_DIR'] || os.tmpdir(), fn);\n        }\n        return listenPath;\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            var server = net.createServer((connection) => {\n                connection.setEncoding('utf8');\n                var parts = [];\n                connection.on('data', (data) => {\n                    var m = data.indexOf(\"\\n\");\n                    if (m !== -1) {\n                        parts.push(data.substring(0, m));\n                        data = data.substring(m);\n                        var line = parts.join(\"\");\n                        parts = [];\n                        if (this.serverType === 'git') {\n                            if (line === 'Username') {\n                                connection.end(this.auth.username);\n                            } else if (line === 'Password') {\n                                connection.end(this.auth.password);\n                                server.close();\n                            }\n                        } else if (this.serverType === 'ssh') {\n                            if (line === 'The') {\n                                connection.end('yes');\n                            } else if (line === 'Enter') {\n                                connection.end(this.auth.passphrase);\n                            }\n                        }\n                    }\n                    if (data.length > 0) {\n                        parts.push(data);\n                    }\n                });\n            });\n\n            var listenPath = this.getListenPath();\n\n            server.listen(listenPath, (ready) => {\n                resolve({\n                    path: listenPath,\n                    close: () => { server.close(); }\n                });\n            });\n\n            server.on('close', () => {\n                fs.removeSync(listenPath);\n            });\n\n            server.on('error', (err) => {\n                console.log(\"ResponseServer unexpectedError:\", err.toString());\n                server.close();\n                reject(err);\n            });\n        });\n    }\n}",
  "FSMID_for_test": 97,
  "Code_level": "Class-level"
}