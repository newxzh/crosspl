{
  "Task_id": 157,
  "Github_ID": "1283503",
  "Github_Project_Name": "request",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side based on node.js net",
  "Instruction": "Task Description: Create a TCP proxy server that handles client connections, processes incoming data, and responds with HTTP-formatted messages. The server should be able to start and stop dynamically, track whether it was called, and store received data.\n\nFunction Description: The function creates and manages a TCP proxy server instance. It handles client connections, processes incoming data in two phases (initial connection and subsequent data), and responds with predefined HTTP responses. The server tracks all received data and whether any client has connected to it.\n\nInput: None (The function takes no parameters but returns an object with methods that can be called)\n\nOutput: Returns an object with the following methods:\n- start(callback): Starts the server on a random available port and executes the callback when ready\n- stop(callback): Stops the server and executes the callback when complete\n- getData(): Returns all data received from clients\n- wasCalled(): Returns a boolean indicating whether the server received any client connections\n\nThe server responds to client connections with:\n1. Initial response: 'HTTP/1.1 200 OK\\r\\n\\r\\n'\n2. Subsequent response: 'HTTP/1.1 200 OK\\r\\ncontent-type: text/plain\\r\\ncontent-length: 5\\r\\n\\r\\nderp\\n'",
  "Canonical_solution": "function createProxyServer() {\n    var called = false;\n    var proxiedHost = 'google.com';\n    var data = '';\n\n    var s = require('net').createServer(function (sock) {\n        called = true;\n        sock.once('data', function (c) {\n            data += c;\n\n            sock.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n\n            sock.once('data', function (c) {\n                data += c;\n\n                sock.write('HTTP/1.1 200 OK\\r\\n');\n                sock.write('content-type: text/plain\\r\\n');\n                sock.write('content-length: 5\\r\\n');\n                sock.write('\\r\\n');\n                sock.end('derp\\n');\n            });\n        });\n    });\n\n    return {\n        start: function(callback) {\n            s.listen(0, function () {\n                s.url = 'http://localhost:' + this.address().port;\n                callback();\n            });\n        },\n        stop: function(callback) {\n            s.close(function () {\n                callback();\n            });\n        },\n        getData: function() {\n            return data;\n        },\n        wasCalled: function() {\n            return called;\n        }\n    };\n}",
  "FSMID_for_test": 97,
  "Code_level": "Function-level"
}