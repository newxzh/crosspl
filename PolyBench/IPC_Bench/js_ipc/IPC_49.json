{
  "Task_id": 49,
  "Github_ID": "153322501",
  "Github_Project_Name": "web-clipper",
  "Programming_Language": "JavaScript",
  "suffix": ".ts",
  "Interface_class": "IPC",
  "Interface_name": "HTTP Server - side based on XMLHttpRequest in JavaScript",
  "Instruction": "Task Description: Implement a request service class that handles HTTP requests including downloading files and performing various HTTP methods (GET, PUT, POST) with proper headers and data handling.\n\nClass Description: The BasicRequestService class implements IRequestService interface to provide HTTP request functionality. It uses XMLHttpRequest for file downloads and umi-request for standard HTTP methods. The class handles permissions checking before downloads and supports configurable request options.\n\nAttributes:\n- requestMethod: RequestMethod - An instance of umi-request's RequestMethod used for standard HTTP requests\n\nMethods:\n- download(url: string) -> Promise<Blob> - Downloads a file from the specified URL after checking permissions. Returns a Promise that resolves with the downloaded Blob.\n  - url: string - The URL of the file to download\n  - Returns: Promise<Blob> - A promise resolving to the downloaded file as a Blob\n\n- request(url: string, options: TRequestOption) -> Promise<any> - Performs an HTTP request based on the specified options (method, headers, data).\n  - url: string - The target URL for the request\n  - options: TRequestOption - Configuration object containing:\n    - method: string - HTTP method ('get', 'put', or 'post')\n    - headers: object - Optional request headers\n    - data: any - Optional request payload\n    - requestType: string - Optional request type for POST requests\n  - Returns: Promise<any> - A promise resolving to the response data\n  - Throws: Error - When an unsupported request method is specified",
  "Canonical_solution": "import { IPermissionsService } from './../../common/permissions';\nimport { extend, RequestMethod } from 'umi-request';\nimport { IRequestService, IBasicRequestService, TRequestOption } from '@/service/common/request';\nimport Container, { Service } from 'typedi';\n\nclass BasicRequestService implements IRequestService {\n  private requestMethod: RequestMethod;\n  constructor() {\n    this.requestMethod = extend({});\n  }\n\n  async download(url: string) {\n    const permissionsService = Container.get(IPermissionsService);\n    await permissionsService.request({ origins: [`${new URL(url).origin}/*`] });\n    return new Promise<Blob>(resolve => {\n      let oReq = new XMLHttpRequest();\n      oReq.open('GET', url, true);\n      oReq.responseType = 'blob';\n      oReq.onload = function() {\n        let blob = oReq.response;\n        resolve(blob);\n      };\n      oReq.send();\n    });\n  }\n\n  request(url: string, options: TRequestOption) {\n    switch (options.method) {\n      case 'get': {\n        return this.requestMethod.get(url, {\n          headers: options.headers,\n        });\n      }\n      case 'put': {\n        return this.requestMethod.put(url, {\n          headers: options.headers,\n          data: options.data,\n        });\n      }\n      case 'post': {\n        return this.requestMethod.post(url, {\n          headers: options.headers,\n          data: options.data,\n          requestType: options.requestType,\n        });\n      }\n      default: {\n        throw new Error('Unsupported request method');\n      }\n    }\n  }\n}",
  "FSMID_for_test": 93,
  "Code_level": "Class-level"
}