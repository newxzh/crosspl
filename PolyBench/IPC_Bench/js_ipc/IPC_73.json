{
  "Task_id": 73,
  "Github_ID": "10932532",
  "Github_Project_Name": "primus",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a function that sets up an Express server with session management and WebSocket capabilities using Primus, and handles basic routing.\n\nFunction Description: The function `setupExpressServer` initializes an Express application with session management using `express-session` and `cookie-parser`, sets up a basic route, and integrates Primus for WebSocket communication. It also includes session handling for WebSocket connections.\n\nInput: None (This function does not take any input parameters.)\n\nOutput: None (This function does not return any value but starts an HTTP server listening on port 8080 and logs a message to the console.)",
  "Canonical_solution": "function setupExpressServer() {\n    var express = require('express');\n    var expressSession = require('express-session');\n    var cookieParser = require('cookie-parser');\n    var http = require('http');\n    var Primus = require('../..');\n    var primusSession = require('./session');\n\n    var app = express();\n    var secret = 'shhhh, very secret';\n    var cookies = cookieParser(secret);\n    var store = new expressSession.MemoryStore();\n\n    app.use(cookies);\n    app.use(expressSession({\n        saveUninitialized: true,\n        secret: secret,\n        resave: true,\n        store: store\n    }));\n\n    app.get('/', function index(req, res) {\n        req.session.timestamp = Date.now();\n        res.sendFile(__dirname + '/index.html');\n    });\n\n    var server = http.createServer(app);\n    var primus = new Primus(server);\n\n    primus.use('cookies', cookies);\n    primus.use('session', primusSession, { store: store });\n\n    primus.on('connection', function connection(spark) {\n        spark.write(JSON.stringify(spark.request.session, null, '  '));\n    });\n\n    server.listen(8080, function listening() {\n        console.log('Open http://localhost:8080 in your browser');\n    });\n}",
  "FSMID_for_test": 96,
  "Code_level": "Function-level"
}