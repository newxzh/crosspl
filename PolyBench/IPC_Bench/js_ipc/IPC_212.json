{
  "Task_id": 212,
  "Github_ID": "716968913",
  "Github_Project_Name": "AiEditor",
  "Programming_Language": "JavaScript",
  "suffix": ".ts",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes a connection to a WebSocket server, handles communication events (open, message, close, error), and provides methods to send messages and close the connection. The class should integrate with a listener interface to notify about connection events and received messages.\n\nClass Description: The WebSocketClient class is an implementation of the AiClient interface that manages WebSocket connections in a browser environment. It handles the WebSocket lifecycle, including connection establishment, message exchange, and error handling, while notifying a listener about these events.\n\nAttributes:\n- isStop: boolean - Indicates whether the connection has been stopped.\n- url: string - The WebSocket server URL to connect to.\n- webSocket: WebSocket | undefined - The WebSocket instance.\n- isOpen: boolean - Indicates whether the WebSocket connection is open.\n- payload: string | undefined - The initial message payload to send after connection.\n- listener: AiClientListener - The listener interface for event notifications.\n\nMethods:\n- constructor(url: string, listener: AiClientListener) -> void - Initializes the WebSocketClient with the server URL and a listener.\n- start(payload: string) -> void - Starts the WebSocket connection and sets up event handlers. Sends the initial payload once connected.\n- stop() -> void - Closes the WebSocket connection and notifies the listener.\n- send(message: string) -> void - Sends a message through the WebSocket if the connection is open.\n- onOpen(_: Event) -> void - Handles the WebSocket 'open' event, sets the connection state, and sends the initial payload.\n- onMessage(event: MessageEvent) -> void - Handles incoming messages and notifies the listener.\n- onClose(_: CloseEvent) -> void - Handles the WebSocket 'close' event, updates the connection state, and notifies the listener.\n- onError(_: Event) -> void - Handles WebSocket errors, updates the connection state, and notifies the listener.",
  "Canonical_solution": "import {AiClientListener} from \"../../AiClientListener.ts\";\nimport {AiClient} from \"../../AiClient.ts\";\n\nexport class WebSocketClient implements AiClient {\n    isStop: boolean = false\n    url: string;\n    webSocket?: WebSocket;\n    isOpen: boolean = false;\n    payload?: string;\n    listener: AiClientListener;\n\n    constructor(url: string, listener: AiClientListener) {\n        this.url = url;\n        this.listener = listener;\n    }\n\n    start(payload: string) {\n        this.listener.onStart(this);\n        this.payload = payload;\n        this.webSocket = new WebSocket(this.url);\n        this.webSocket.onopen = (e) => this.onOpen(e)\n        this.webSocket.onmessage = (e) => this.onMessage(e)\n        this.webSocket.onclose = (e) => this.onClose(e)\n        this.webSocket.onerror = (e) => this.onError(e)\n    }\n\n    stop() {\n        if (this.webSocket) {\n            this.webSocket.close();\n            this.webSocket = void 0;\n\n            if (!this.isStop) {\n                this.listener.onStop();\n                this.isStop = true;\n            }\n        }\n    }\n\n    send(message: string) {\n        if (this.webSocket && this.isOpen) {\n            this.webSocket.send(message);\n        }\n    }\n\n    protected onOpen(_: Event) {\n        this.isOpen = true;\n        this.send(this.payload!);\n    }\n\n    protected onMessage(event: MessageEvent) {\n        this.listener.onMessage(event.data)\n    }\n\n    protected onClose(_: CloseEvent) {\n        this.isOpen = false;\n        if (!this.isStop) {\n            this.listener.onStop();\n            this.isStop = true;\n        }\n    }\n\n    protected onError(_: Event) {\n        this.isOpen = false;\n        if (!this.isStop) {\n            this.listener.onStop();\n            this.isStop = true;\n        }\n    }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}