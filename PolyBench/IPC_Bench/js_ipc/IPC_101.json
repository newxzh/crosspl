{
  "Task_id": 101,
  "Github_ID": "18394992",
  "Github_Project_Name": "web-development-with-node-and-express",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "HTTP based on express in javascript",
  "Instruction": "Task Description: Create a class that implements an Express HTTP server with middleware configuration, route definitions, and server startup functionality.\n\nClass Description: The ExpressServer class encapsulates the creation and management of an Express.js web server. It handles server configuration, middleware setup, route definitions, and server startup. The class is designed to be modular, allowing for easy extension of middleware and routes.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number on which the server will listen, either from environment variables or defaulting to 3000\n\nMethods:\n- constructor() -> [void] - Initializes the Express application and sets the default port\n- configureMiddleware() -> [void] - Configures essential middleware including static file serving and body parsing\n- defineRoutes() -> [void] - Defines route handlers for various HTTP methods and paths including GET and POST requests\n- startServer() -> [void] - Starts the HTTP server and begins listening on the specified port\n\nMethods Details:\n- configureMiddleware(): \n  - Adds express.static middleware to serve static files from the 'public' directory\n  - Adds body-parser middleware for parsing request bodies\n  - No input parameters\n  - No return value\n\n- defineRoutes():\n  - Defines a GET route for the home page ('/')\n  - Defines a GET route for the about page ('/about') with dynamic content\n  - Defines a POST route for newsletter signup ('/newsletter') with validation logic\n  - No input parameters\n  - No return value\n\n- startServer():\n  - Starts the server listening on the configured port\n  - Logs server startup information to the console\n  - No input parameters\n  - No return value",
  "Canonical_solution": "var express = require('express');\n\nclass ExpressServer {\n    constructor() {\n        this.app = express();\n        this.port = process.env.PORT || 3000;\n    }\n\n    configureMiddleware() {\n        this.app.use(express.static(__dirname + '/public'));\n        this.app.use(require('body-parser')());\n    }\n\n    defineRoutes() {\n        this.app.get('/', function(req, res) {\n            res.render('home');\n        });\n        \n        this.app.get('/about', function(req,res){\n            res.render('about', { \n                fortune: fortune.getFortune(),\n                pageTestScript: '/qa/tests-about.js' \n            });\n        });\n\n        this.app.post('/newsletter', function(req, res){\n            var name = req.body.name || '', email = req.body.email || '';\n            if(!email.match(VALID_EMAIL_REGEX)) {\n                if(req.xhr) return res.json({ error: 'Invalid name email address.' });\n                req.session.flash = {\n                    type: 'danger',\n                    intro: 'Validation error!',\n                    message: 'The email address you entered was  not valid.',\n                };\n                return res.redirect(303, '/newsletter/archive');\n            }\n            new NewsletterSignup({ name: name, email: email }).save(function(err){\n                if(err) {\n                    if(req.xhr) return res.json({ error: 'Database error.' });\n                    req.session.flash = {\n                        type: 'danger',\n                        intro: 'Database error!',\n                        message: 'There was a database error; please try again later.',\n                    };\n                    return res.redirect(303, '/newsletter/archive');\n                }\n                if(req.xhr) return res.json({ success: true });\n                req.session.flash = {\n                    type: 'success',\n                    intro: 'Thank you!',\n                    message: 'You have now been signed up for the newsletter.',\n                };\n                return res.redirect(303, '/newsletter/archive');\n            });\n        });\n    }\n\n    startServer() {\n        this.app.listen(this.port, function(){\n            console.log('Express started on http://localhost:' + this.port + '; press Ctrl-C to terminate.');\n        });\n    }\n}",
  "FSMID_for_test": 96,
  "Code_level": "Class-level"
}