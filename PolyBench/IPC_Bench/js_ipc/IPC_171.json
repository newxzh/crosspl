{
  "Task_id": 171,
  "Github_ID": "119388337",
  "Github_Project_Name": "rats-search",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "TCP Server - side based on node.js net",
  "Instruction": "Task Description: Create a TCP-based P2P server class in JavaScript using Node.js's 'net' module and JsonSocket for message handling, capable of managing multiple client connections and processing structured JSON messages.\n\nClass Description: P2PServer is a TCP server implementation that handles peer-to-peer connections, manages client sockets, processes JSON-formatted messages with type-based routing, and provides lifecycle management for the server.\n\nAttributes:\n- tcpServer: [Object] - The underlying TCP server instance created using Node.js 'net' module\n- clients: [Array] - List of currently connected client sockets\n- send: [Function] - Callback function for sending messages (defaults to empty function)\n- messageHandlers: [Object] - Collection of registered message type handlers (implied by the code)\n\nMethods:\n- constructor([send: Function]) -> [P2PServer] - Initializes the TCP server with configuration, sets up connection handling, and prepares message processing infrastructure\n- listen(port: Number) -> [void] - Starts the server listening on the specified port and all network interfaces (0.0.0.0)\n- close() -> [Promise] - Gracefully shuts down the server, disconnects all clients, and returns a Promise that resolves when shutdown is complete\n- on(type: String, callback: Function) -> [void] - Registers a message handler function for a specific message type",
  "Canonical_solution": "const net = require('net');\nconst JsonSocket = require('json-socket');\n\nclass P2PServer {\n    constructor(send = () => {}) {\n        this.tcpServer = net.createServer();\n        this.tcpServer.maxConnections = config.p2pConnections * 2;\n        this.clients = [];\n        this.send = send;\n\n        this.tcpServer.on('connection', (socket) => {\n            if(!config.p2p) {\n                socket.destroy();\n                return;\n            }\n\n            this.tcpServer.getConnections((err, con) => {\n                logT('p2p', 'server connected', con, 'max', this.tcpServer.maxConnections);\n            });\n\n            socket = new JsonSocket(socket);\n            this.clients.push(socket);\n            \n            socket.on('close', () => {\n                this.clients.splice(this.clients.indexOf(socket), 1);\n            });\n            \n            socket.on('error', (err) => {});\n            \n            socket.on('message', (message) => {\n                if(message.type && this.messageHandlers[message.type]) {\n                    if(message.type != 'protocol' && !socket.rats) return;\n                    \n                    this.messageHandlers[message.type](message.data, (data) => {\n                        socket.sendMessage({\n                            id: message.id,\n                            data\n                        });\n                    }, socket, {\n                        version: message.version,\n                        info: message.info\n                    });\n                }\n            });\n            \n            socket.protocolTimeout = setTimeout(() => socket._socket.destroy(), 7000);\n        });\n    }\n\n    listen(port) {\n        this.tcpServer.listen(port, '0.0.0.0');\n    }\n\n    close() {\n        const promise = new Promise(resolve => this.tcpServer.close(resolve));\n        for (const client in this.clients) {\n            this.clients[client]._socket.destroy();\n        }\n        return promise;\n    }\n\n    on(type, callback) {\n        this.messageHandlers[type] = callback;\n    }\n}",
  "FSMID_for_test": 97,
  "Code_level": "Class-level"
}