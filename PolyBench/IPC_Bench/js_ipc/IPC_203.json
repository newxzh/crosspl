{
  "Task_id": 203,
  "Github_ID": "1280180",
  "Github_Project_Name": "phabricator",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that manages WebSocket connections with automatic reconnection capabilities and event handling.\n\nClass Description: The WebSocketClient class provides a wrapper around the browser's native WebSocket API, adding features like automatic reconnection with exponential backoff, connection state management, and customizable event handlers for connection events.\n\nAttributes:\n- URI: string - The WebSocket server URI to connect to\n- _socket: WebSocket - The underlying WebSocket connection instance\n- _isOpen: boolean - Tracks whether the connection is currently open\n- _shouldClose: boolean - Flag indicating if the connection was intentionally closed\n- _delayUntilReconnect: number - Current delay before attempting reconnection (in milliseconds)\n- openHandler: function - Callback for connection open events\n- messageHandler: function - Callback for incoming message events\n- closeHandler: function - Callback for connection close events\n\nMethods:\n- constructor(uri: string) -> void - Initializes the WebSocket client with the given URI\n- open() -> void - Establishes a new WebSocket connection and sets up event handlers\n- send(message: string) -> void - Sends a message through the WebSocket if connected\n- close() -> void - Closes the WebSocket connection intentionally\n- reconnect() -> void - Forces a reconnection by closing the current connection\n- getReconnectDelay() -> number - Returns the current reconnection delay\n- _onopen() -> void - Internal handler for WebSocket open events\n- _resetDelay() -> void - Resets the reconnection delay to initial value\n- _onmessage(e: MessageEvent) -> void - Internal handler for WebSocket message events\n- _onclose() -> void - Internal handler for WebSocket close events\n- _reconnect() -> void - Handles reconnection logic with exponential backoff",
  "Canonical_solution": "class WebSocketClient {\n  constructor(uri) {\n    this.URI = uri;\n    this._resetDelay();\n    this._socket = null;\n    this._isOpen = false;\n    this._shouldClose = false;\n    this._delayUntilReconnect = null;\n    this.openHandler = null;\n    this.messageHandler = null;\n    this.closeHandler = null;\n  }\n\n  open() {\n    if (!window.WebSocket) {\n      return;\n    }\n\n    this._shouldClose = false;\n\n    this._socket = new WebSocket(this.URI);\n    this._socket.onopen = this._onopen.bind(this);\n    this._socket.onmessage = this._onmessage.bind(this);\n    this._socket.onclose = this._onclose.bind(this);\n  }\n\n  send(message) {\n    if (this._isOpen) {\n      this._socket.send(message);\n    }\n  }\n\n  close() {\n    if (!this._isOpen) {\n      return;\n    }\n    this._shouldClose = true;\n    this._socket.close();\n  }\n\n  reconnect() {\n    if (!this._isOpen) {\n      return;\n    }\n    this._socket.close();\n  }\n\n  getReconnectDelay() {\n    return this._delayUntilReconnect;\n  }\n\n  _onopen() {\n    this._isOpen = true;\n    this._delayUntilReconnect = 0;\n\n    if (this.openHandler) {\n      this.openHandler();\n    }\n  }\n\n  _resetDelay() {\n    this._delayUntilReconnect = 2000;\n  }\n\n  _onmessage(e) {\n    var data = e.data;\n    if (this.messageHandler) {\n      this.messageHandler(data);\n    }\n  }\n\n  _onclose() {\n    this._isOpen = false;\n    var done = false;\n\n    if (this.closeHandler) {\n      done = this.closeHandler();\n    }\n\n    if (!done && !this._shouldClose) {\n      setTimeout(this._reconnect.bind(this), this._delayUntilReconnect);\n    }\n  }\n\n  _reconnect() {\n    if (!this._delayUntilReconnect) {\n      this._resetDelay();\n    } else {\n      this._delayUntilReconnect = this._delayUntilReconnect * 2;\n    }\n\n    this._delayUntilReconnect = Math.min(this._delayUntilReconnect, 300000);\n    this.open();\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}