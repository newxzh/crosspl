{
  "Task_id": 248,
  "Github_ID": "84531631",
  "Github_Project_Name": "web-editor",
  "Programming_Language": "JavaScript",
  "suffix": ".js",
  "Interface_class": "IPC",
  "Interface_name": "WebSocket Client-side based on browser native API in JavaScript",
  "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that manages communication with a Python backend server for executing and debugging Python code, handling console output, and managing kernel operations.\n\nClass Description: The PythonWebSocket class provides functionality to establish a WebSocket connection to a Python backend, execute Python code, handle debugging operations, manage console output, and control the Python kernel (restarting/interrupting). It maintains state about the current execution and provides methods to interact with the WebSocket server.\n\nAttributes:\n- running: [Boolean] - Indicates whether Python code is currently being executed\n- restarting: [Boolean] - Indicates whether the kernel is currently restarting\n- consoleData: [Array] - Stores console output messages with line numbers\n- wsOpen: [Boolean] - Indicates whether the WebSocket connection is open\n- ws: [WebSocket|null] - The WebSocket connection instance\n- lineno: [Object] - Tracks line numbers during debugging (offset and current)\n- editor: [Object] - Reference to the code editor instance (assumed to be set externally)\n\nMethods:\n- initPythonWebSocket() -> [void] - Initializes the WebSocket connection and sets up event handlers for open, message, and close events\n- runPython(code: String) -> [Promise] - Sends Python code to the backend for execution and returns a Promise\n- restartKernel() -> [void] - Sends a request to restart the Python kernel\n- stopDebugging() -> [void] - Sends an interrupt signal to stop current execution\n- appendConsole(text: String) -> [void] - Adds text to the console output and auto-scrolls\n- resetConsole() -> [void] - Clears the console output buffer\n- resetEditor() -> [void] - Resets editor state by clearing breakpoints\n- setLineGoThrough(lineno: Number) -> [void] - Marks a line as executed in the editor",
  "Canonical_solution": "const WebSocket = window.WebSocket;\n\nclass PythonWebSocket {\n  constructor() {\n    this.running = false;\n    this.restarting = false;\n    this.consoleData = [];\n    this.wsOpen = false;\n    this.ws = null;\n    this.lineno = {\n      offset: 0,\n      current: -1,\n    };\n  }\n\n  initPythonWebSocket() {\n    this.running = false;\n    this.restarting = false;\n\n    this.ws = new WebSocket(\"ws://\" + location.host + \"/ws/v1/python\");\n    this.ws.onopen = () => {\n      this.wsOpen = true;\n      this.resetConsole();\n      console.log(\"websocket opened\");\n    };\n    this.ws.onmessage = (message) => {\n      const data = JSON.parse(message.data);\n      switch (data.method) {\n        case \"gotoLine\":\n          let lineNumber = data.value + this.lineno.offset;\n          this.setLineGoThrough(this.lineno.current);\n          this.lineno.current = lineNumber;\n          this.editor.session.setBreakpoint(lineNumber);\n          break;\n        case \"resetContent\":\n          this.editor.setValue(data.value);\n          break;\n        case \"output\":\n          this.appendConsole(data.value);\n          break;\n        case \"finish\":\n          this.setLineGoThrough(this.lineno.current);\n          this.running = false;\n          let timeUsed = (data.value / 1000) + \"s\";\n          this.appendConsole(\"[Finished \" + timeUsed + \"]\");\n          break;\n        case \"restarted\":\n          this.restarting = false;\n          this.running = false;\n          this.resetEditor();\n          this.notifySuccess(\"\u91cd\u542f\u5185\u6838\", \"\u6210\u529f\");\n          this.runPython(this.generatePreloadCode());\n          break;\n        default:\n          console.error(\"Unknown method\", data.method);\n      }\n    };\n    this.ws.onclose = () => {\n      this.wsOpen = false;\n      this.ws = null;\n      this.running = false;\n      this.resetEditor();\n      console.log(\"websocket closed\");\n    };\n  }\n\n  runPython(code) {\n    return new Promise((resolve, reject) => {\n      this.resetConsole();\n      this.resetEditor();\n      this.running = true;\n      this.ws.send(JSON.stringify({ method: \"input\", value: code }));\n      resolve();\n    });\n  }\n\n  restartKernel() {\n    this.ws.send(JSON.stringify({ method: \"restartKernel\" }));\n    this.restarting = true;\n    setTimeout(() => {\n      this.restarting = false;\n    }, 500);\n  }\n\n  stopDebugging() {\n    this.ws.send(JSON.stringify({ method: \"keyboardInterrupt\" }));\n  }\n\n  appendConsole(text) {\n    this.consoleData.push({ lineno: this.lineno.current, value: text });\n    setTimeout(() => {\n      let c = this.$refs.console;\n      c.scrollTop = c.scrollHeight - c.clientHeight;\n    }, 1);\n  }\n\n  resetConsole() {\n    this.consoleData = [];\n  }\n\n  resetEditor() {\n    this.editor.session.clearBreakpoints();\n    this.lineno.current = -1;\n  }\n\n  setLineGoThrough(lineno) {\n    if (lineno >= 0) {\n      this.editor.session.setBreakpoint(lineno, \"ace_code_exercised\");\n    }\n  }\n}",
  "FSMID_for_test": 89,
  "Code_level": "Class-level"
}