#include <curl/curl.h>
#include <string>
#include <sstream>
#include "fs.hpp"
#include "download.hpp"
using json = nlohmann::ordered_json;
constexpr const char API_AGENT[] = "HamletDuFromage";
std::string mega_url(std::string url)
{
    std::string id = mega_id(url);

    json request = json::array({{
        {"a", "g"},
        {"g", 1},
        {"p", id},
    }});

    std::string body = request.dump();
    std::string output;

    auto curl = curl_easy_init();
    curl_easy_setopt(curl, CURLOPT_URL, "https://g.api.mega.co.nz/cs");
    curl_easy_setopt(curl, CURLOPT_POST, 1L);
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &output);
    curl_easy_setopt(curl, CURLOPT_USERAGENT, API_AGENT);
    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
    curl_easy_setopt(
        curl,
        CURLOPT_WRITEFUNCTION,
        +[](void* buffer, size_t size, size_t nmemb, void* userp) -> size_t {
            std::string* output = reinterpret_cast<std::string*>(userp);
            size_t actual_size = size * nmemb;
            output->append(reinterpret_cast<char*>(buffer), actual_size);
            return actual_size;
        });

    curl_easy_perform(curl);

    json response = json::parse(output);

    curl_easy_cleanup(curl);

    s64 freeStorage;
    s64 fileSize = response[0]["s"];
    if (R_SUCCEEDED(fs::getFreeStorageSD(freeStorage)) && fileSize * 2.5 > freeStorage)
        return "";

    return response[0]["g"];
}