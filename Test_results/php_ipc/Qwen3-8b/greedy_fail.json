[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a PHP class that interacts with an Ollama API to generate responses using HTTP requests through the Guzzle HTTP client.\n\nClass Description: The Ollama class is designed to communicate with an Ollama API endpoint to generate responses based on provided prompts. It handles the configuration of the API request and processes the response.\n\nAttributes:\n- model: string - The name of the AI model to be used for generating responses.\n- prompt: string - The input text prompt to be sent to the AI model.\n- temperature: float - Controls the randomness of the output (higher values make output more random).\n- stream: bool - Determines whether the response should be streamed.\n- raw: bool - Specifies whether to use raw mode for the prompt processing.\n\nMethods:\n- __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) -> void - Initializes the Ollama instance with the specified parameters for model interaction.\n- ask() -> string - Sends a POST request to the Ollama API with the configured parameters and returns the generated response from the AI model.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Ollama\n{\n    /**\n     * New service instance.\n     */\n    public function __construct(\n        protected string $model,\n        protected string $prompt,\n        protected float $temperature,\n        protected bool $stream,\n        protected bool $raw,\n    ) {}\n\n    /**\n     * Set LLM prompt text.\n     */\n    public function ask(): string\n    {\n        $httpClient = new Client;\n\n        $endpoint = core()->getConfigData('general.magic_ai.settings.api_domain').'/api/generate';\n\n        $result = $httpClient->request('POST', $endpoint, [\n            'headers' => [\n                'Accept' => 'application/json',\n            ],\n            'json'    => [\n                'model'  => $this->model,\n                'prompt' => $this->prompt,\n                'raw'    => $this->raw,\n                'stream' => $this->stream,\n            ],\n        ]);\n\n        $result = json_decode($result->getBody()->getContents(), true);\n\n        return $result['response'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "use GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $response = $client->post('http://localhost:11434/api/generate', [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ]\n        ]);\n\n        if ($this->stream) {\n            $result = '';\n            $stream = $response->getBody();\n            foreach ($stream as $chunk) {\n                $chunk = trim($chunk);\n                if (!empty($chunk)) {\n                    $data = json_decode($chunk, true);\n                    $result .= $data['response'] ?? '';\n                }\n            }\n            return $result;\n        } else {\n            $body = $response->getBody()->getContents();\n            $data = json_decode($body, true);\n            return $data['response'] ?? '';\n        }\n    }\n}"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client for sending payment requests to an e-payment API using Guzzle.\n\nClass Description: The EpayHttpClient class is designed to handle HTTP communication with an e-payment API. It encapsulates the functionality for sending payment requests and processing the responses. The class uses Guzzle HTTP client for making requests and handles potential exceptions that may occur during the process.\n\nAttributes:\n- epay: array - Stores the configuration for the e-payment API\n- client: Client - The Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct(array $epayConfig) -> void - Initializes the class with e-payment configuration and creates a new Guzzle Client instance\n- sendPaymentRequest(array $data) -> array - Sends a payment request to the API endpoint and processes the response. Returns an array indicating success/failure and containing either the payment URL or an error message",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass EpayHttpClient\n{\n    protected array $epay;\n    protected Client $client;\n\n    public function __construct(array $epayConfig)\n    {\n        $this->epay = $epayConfig;\n        $this->client = new Client();\n    }\n\n    public function sendPaymentRequest(array $data): array\n    {\n        try {\n            $res = $this->client->request('POST', $this->epay['apiurl'] . 'mapi.php', ['form_params' => $data]);\n\n            if ($res->getStatusCode() !== 200) {\n                throw new Exception();\n            }\n\n            $resData = json_decode($res->getBody()->__toString(), true);\n\n            if ($resData['code'] !== 1 || !isset($resData['payurl'])) {\n                throw new Exception();\n            }\n\n            return [\n                'success' => true,\n                'payurl' => $resData['payurl']\n            ];\n        } catch (Exception|GuzzleException) {\n            return [\n                'success' => false,\n                'error' => '\u8bf7\u6c42\u652f\u4ed8\u5931\u8d25'\n            ];\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new \\GuzzleHttp\\Client($epayConfig);\n    }\n\n    public function sendPaymentRequest(array $data) {\n        $url = $this->epay['base_uri'] . 'payment';\n        try {\n            $response = $this->client->post($url, ['json' => $data]);\n            $result = json_decode($response->getBody(), true);\n            if ($response->getStatusCode() === 200) {\n                return ['success' => true, 'url' => $result['payment_url']];\n            } else {\n                return ['success' => false, 'message' => 'Unexpected response code: ' . $response->getStatusCode()];\n            }\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            if ($e->hasResponse()) {\n                $response = $e->getResponse();\n                return ['success' => false, 'message' => 'API error: ' . $response->getBody()->getContents()];\n            } else {\n                return ['success' => false, 'message' => 'Network error: ' . $e->getMessage()];\n            }\n        } catch (\\Exception $e) {\n            return ['success' => false, 'message' => 'An error occurred: ' . $e->getMessage()];\n        }\n    }\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxies and basic authentication.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, proxy configuration, timeout settings, and basic authentication. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'assign': (string, optional) Template variable name to assign content to\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (int, optional) Proxy server port\n  - 'timeout': (int, optional) Connection timeout in seconds (default: 30)\n- $template: (object) The template object for assigning content (when 'assign' parameter is used)\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Assigns content to the specified template variable and returns nothing if 'assign' parameter is provided\n- Returns nothing and triggers notice on error conditions (invalid URL, connection failure)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            \n            $_is_proxy = false;\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        $proxy_port = (int)$param_value;\n                        break;\n                    case \"timeout\":\n                        $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "wrong_result": "function fetchContent($params, $template) {\n    if (!isset($params['file'])) {\n        trigger_error('Missing required parameter \"file\"', E_USER_NOTICE);\n        return;\n    }\n\n    $url = $params['file'];\n    $parsed = parse_url($url);\n    if ($parsed === false || !isset($parsed['scheme']) || $parsed['scheme'] != 'http') {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $proxy_host = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxy_port = isset($params['proxy_port']) ? (int)$params['proxy_port'] : null;\n    $timeout = isset($params['timeout']) ? (int)$params['timeout'] : 30;\n\n    $host = $proxy_host ?? $parsed['host'];\n    $port = $proxy_port ?? ($proxy_host ? 8080 : (isset($parsed['port']) ? (int)$parsed['port'] : 80));\n\n    $path = $parsed['path'] . (isset($parsed['query']) ? '?' . $parsed['query'] : '');\n\n    $user = isset($parsed['user']) ? $parsed['user'] : '';\n    $pass = isset($parsed['pass']) ? $parsed['pass'] : '';\n    $auth = '';\n    if ($user || $pass) {\n        $auth = base64_encode($user . ':' . $pass);\n    }\n\n    $headers = [\n        'Host: ' . $parsed['host'],\n        'User-Agent: PHP-Fetch'\n    ];\n\n    if ($auth) {\n        $headers[] = 'Authorization: Basic ' . $auth;\n    }\n\n    $request = \"GET $path HTTP/1.1\\r\\n\";\n    $headers_str = implode(\"\\r\\n\", $headers) . \"\\r\\n\";\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($fp, $request . $headers_str);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 8192);\n    }\n    fclose($fp);\n\n    $header_end = strpos($response, \"\\r\\n\\r\\n\");\n    $body = $header_end === false ? $response : substr($response, $header_end + 4);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Implement a class that handles HTTP POST requests to Google's reCAPTCHA verification service using low-level socket operations in PHP.\n\nClass Description: ReCaptchaSocketPostRequestMethod is a class that implements reCAPTCHA verification by establishing a direct socket connection to Google's servers, sending an HTTP POST request, and processing the response. It provides an alternative to higher-level HTTP clients.\n\nAttributes:\n- socket: [ReCaptchaSocket] - The socket connection handler used for HTTP communication\n- RECAPTCHA_HOST: [string] - Constant storing Google's reCAPTCHA hostname ('www.google.com')\n- SITE_VERIFY_PATH: [string] - Constant storing the reCAPTCHA verification endpoint path ('/recaptcha/api/siteverify')\n- BAD_REQUEST: [string] - Constant JSON response for failed requests\n- BAD_RESPONSE: [string] - Constant JSON response for invalid server responses\n\nMethods:\n- __construct([ReCaptchaSocket $socket = null]) -> [void] - Initializes the class with an optional socket dependency injection\n- submit(ReCaptchaRequestParameters $params) -> [string] - Performs the reCAPTCHA verification by:\n  1. Opening an SSL socket connection to Google's server\n  2. Formatting and sending an HTTP POST request with verification parameters\n  3. Reading and parsing the server response\n  4. Returning the verification result as JSON string\n  Returns either the server response or error JSON if the request/response fails",
    "Canonical_solution": "class ReCaptchaSocketPostRequestMethod implements ReCaptchaRequestMethod\n{\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\": false, \"error-codes\": [\"invalid-request\"]}';\n    const BAD_RESPONSE = '{\"success\": false, \"error-codes\": [\"invalid-response\"]}';\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null)\n    {\n        if (!is_null($socket)) {\n            $this->socket = $socket;\n        } else {\n            $this->socket = new ReCaptchaSocket();\n        }\n    }\n\n    public function submit(ReCaptchaRequestParameters $params)\n    {\n        $errno = 0;\n        $errstr = '';\n\n        if (false === $this->socket->fsockopen('ssl://' . self::RECAPTCHA_HOST, 443, $errno, $errstr, 30)) {\n            return self::BAD_REQUEST;\n        }\n\n        $content = $params->toQueryString();\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-length: \" . strlen($content) . \"\\r\\n\";\n        $request .= \"Connection: close\\r\\n\\r\\n\";\n        $request .= $content . \"\\r\\n\\r\\n\";\n\n        $this->socket->fwrite($request);\n        $response = '';\n\n        while (!$this->socket->feof()) {\n            $response .= $this->socket->fgets(4096);\n        }\n\n        $this->socket->fclose();\n\n        if (0 !== strpos($response, 'HTTP/1.1 200 OK')) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = preg_split(\"#\\n\\s*\\n#Uis\", $response);\n\n        return $parts[1];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"error\": \"bad_request\"}';\n    const BAD_RESPONSE = '{\"error\": \"bad_response\"}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket;\n    }\n\n    public function submit(ReCaptchaRequestParameters $params) {\n        $secret = $params->getSecret();\n        $response = $params->getResponse();\n        $postData = http_build_query(['secret' => $secret, 'response' => $response]);\n\n        $context = stream_context_create([\n            'ssl' => [\n                'verify_peer' => true,\n                'verify_peer_name' => true,\n                'allow_self_signed' => false,\n            ],\n        ]);\n\n        $socket = stream_socket_client(\"ssl://www.google.com:443\", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $context);\n        if (!$socket) {\n            return self::BAD_REQUEST;\n        }\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: www.google.com\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n        $request .= \"Connection: close\\r\\n\\r\\n\";\n        $request .= $postData;\n\n        fwrite($socket, $request);\n\n        $response = '';\n        while ($line = fgets($socket, 4096)) {\n            $response .= $line;\n            if (substr($line, 0, 4) === \"HTTP\") {\n                break;\n            }\n        }\n\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n\n        fclose($socket);\n\n        $jsonResponse = json_decode($response, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            return json_encode($jsonResponse);\n        } else {\n            return self::BAD_RESPONSE;\n        }\n    }\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a PHP class for handling HTTP/HTTPS communications using either socket-based connections (via fsockopen) or cURL, supporting both standard and persistent connections, with proper header and cookie management.\n\nClass Description: The soap_transport_http class provides low-level HTTP transport capabilities for SOAP communications, supporting both socket and cURL implementations. It handles connection management, request/response processing, and error handling.\n\nAttributes:\n- url: string - The target URL for HTTP requests\n- uri: string - The URI portion of the URL\n- scheme: string - The protocol scheme (http/https)\n- host: string - The target hostname\n- port: string - The target port number\n- path: string - The path portion of the URL\n- request_method: string - HTTP method (default: POST)\n- protocol_version: string - HTTP version (default: 1.0)\n- outgoing_headers: array - Headers to be sent with the request\n- incoming_headers: array - Headers received in the response\n- outgoing_payload: string - Data to be sent in the request\n- incoming_payload: string - Data received in the response\n- persistentConnection: bool - Flag for persistent connections\n- use_curl: bool - Flag to use cURL instead of sockets\n- proxy: array|null - Proxy configuration if used\n\nMethods:\n- __construct(string $url, array $curl_options=null, bool $use_curl=false) -> void - Initializes the transport with target URL and options\n- connect(int $connection_timeout=0, int $response_timeout=30) -> bool - Establishes connection to server\n- send(string $data, int $timeout=0, int $response_timeout=30, array $cookies=null) -> mixed - Sends data and returns response\n- sendRequest(string $data, array $cookies=null) -> bool - Sends the HTTP request with headers\n- getResponse() -> string|bool - Reads and processes the server response\n- setHeader(string $name, string $value) -> void - Adds a header to outgoing request\n- setCurlOption(mixed $option, mixed $value) -> void - Sets cURL option when using cURL\n- parseCookie(string $cookie_str) -> array|bool - Parses Set-Cookie header into array",
    "Canonical_solution": "class soap_transport_http extends nusoap_base {\n    var $url = '';\n    var $uri = '';\n    var $digest_uri = '';\n    var $scheme = '';\n    var $host = '';\n    var $port = '';\n    var $path = '';\n    var $request_method = 'POST';\n    var $protocol_version = '1.0';\n    var $encoding = '';\n    var $outgoing_headers = array();\n    var $incoming_headers = array();\n    var $incoming_cookies = array();\n    var $outgoing_payload = '';\n    var $incoming_payload = '';\n    var $response_status_line;\n    var $useSOAPAction = true;\n    var $persistentConnection = false;\n    var $ch = false;\n    var $ch_options = array();\n    var $use_curl = false;\n    var $proxy = null;\n    var $username = '';\n    var $password = '';\n    var $authtype = '';\n    var $digestRequest = array();\n    var $certRequest = array();\n\n    function soap_transport_http($url, $curl_options = NULL, $use_curl = false) {\n        parent::nusoap_base();\n        $this->debug(\"ctor url=$url use_curl=$use_curl curl_options:\");\n        $this->appendDebug($this->varDump($curl_options));\n        $this->setURL($url);\n        if (is_array($curl_options)) {\n            $this->ch_options = $curl_options;\n        }\n        $this->use_curl = $use_curl;\n        preg_match('/\\$Revisio' . 'n: ([^ ]+)/', $this->revision, $rev);\n        $this->setHeader('User-Agent', $this->title.'/'.$this->version.' ('.$rev[1].')');\n    }\n\n    function connect($connection_timeout=0,$response_timeout=30) {\n        $this->debug(\"connect connection_timeout $connection_timeout, response_timeout $response_timeout, scheme $this->scheme, host $this->host, port $this->port\");\n        if ($this->io_method() == 'socket') {\n            if (!is_array($this->proxy)) {\n                $host = $this->host;\n                $port = $this->port;\n            } else {\n                $host = $this->proxy['host'];\n                $port = $this->proxy['port'];\n            }\n\n            if($this->persistentConnection && isset($this->fp) && is_resource($this->fp)){\n                if (!feof($this->fp)) {\n                    $this->debug('Re-use persistent connection');\n                    return true;\n                }\n                fclose($this->fp);\n                $this->debug('Closed persistent connection at EOF');\n            }\n\n            if ($this->scheme == 'ssl') {\n                $host = 'ssl://' . $host;\n            }\n            $this->debug('calling fsockopen with host ' . $host . ' connection_timeout ' . $connection_timeout);\n\n            if($connection_timeout > 0){\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str, $connection_timeout);\n            } else {\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str);\n            }\n            \n            if(!$this->fp) {\n                $msg = 'Couldn\\'t open socket connection to server ' . $this->url;\n                if ($this->errno) {\n                    $msg .= ', Error ('.$this->errno.'): '.$this->error_str;\n                } else {\n                    $msg .= ' prior to connect().  This is often a problem looking up the host name.';\n                }\n                $this->debug($msg);\n                $this->setError($msg);\n                return false;\n            }\n            \n            $this->debug('set response timeout to ' . $response_timeout);\n            socket_set_timeout( $this->fp, $response_timeout);\n\n            $this->debug('socket connected');\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            if (!extension_loaded('curl')) {\n                $this->setError('The PHP cURL Extension is required for HTTPS or NLTM.  You will need to re-build or update your PHP to include cURL or change php.ini to load the PHP cURL extension.');\n                return false;\n            }\n            $this->debug('connect using cURL');\n            $this->ch = curl_init();\n            $hostURL = ($this->port != '') ? \"$this->scheme://$this->host:$this->port\" : \"$this->scheme://$this->host\";\n            $hostURL .= $this->path;\n            $this->setCurlOption(CURLOPT_URL, $hostURL);\n            if (ini_get('safe_mode') || ini_get('open_basedir')) {\n                $this->debug('safe_mode or open_basedir set, so do not set CURLOPT_FOLLOWLOCATION');\n            } else {\n                $this->setCurlOption(CURLOPT_FOLLOWLOCATION, 1);\n            }\n            $this->setCurlOption(CURLOPT_HEADER, 1);\n            $this->setCurlOption(CURLOPT_RETURNTRANSFER, 1);\n            if ($this->persistentConnection) {\n                $this->persistentConnection = false;\n                $this->setHeader('Connection', 'close');\n            }\n            if ($connection_timeout != 0) {\n                $this->setCurlOption(CURLOPT_CONNECTIONTIMEOUT, $connection_timeout);\n            }\n            if ($response_timeout != 0) {\n                $this->setCurlOption(CURLOPT_TIMEOUT, $response_timeout);\n            }\n            $this->debug('cURL connection set up');\n            return true;\n        } else {\n            $this->setError('Unknown scheme ' . $this->scheme);\n            $this->debug('Unknown scheme ' . $this->scheme);\n            return false;\n        }\n    }\n\n    function send($data, $timeout=0, $response_timeout=30, $cookies=NULL) {\n        $this->debug('entered send() with data of length: '.strlen($data));\n        $this->tryagain = true;\n        $tries = 0;\n        while ($this->tryagain) {\n            $this->tryagain = false;\n            if ($tries++ < 2) {\n                if (!$this->connect($timeout, $response_timeout)){\n                    return false;\n                }\n                if (!$this->sendRequest($data, $cookies)){\n                    return false;\n                }\n                $respdata = $this->getResponse();\n            } else {\n                $this->setError(\"Too many tries to get an OK response ($this->response_status_line)\");\n            }\n        }        \n        $this->debug('end of send()');\n        return $respdata;\n    }\n\n    function sendRequest($data, $cookies = NULL) {\n        $cookie_str = $this->getCookiesForRequest($cookies, (($this->scheme == 'ssl') || ($this->scheme == 'https')));\n        $this->buildPayload($data, $cookie_str);\n        if ($this->io_method() == 'socket') {\n            if(!fputs($this->fp, $this->outgoing_payload, strlen($this->outgoing_payload))) {\n                $this->setError('couldn\\'t write message data to socket');\n                $this->debug('couldn\\'t write message data to socket');\n                return false;\n            }\n            $this->debug('wrote data to socket, length = ' . strlen($this->outgoing_payload));\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            $curl_headers = array();\n            foreach($this->outgoing_headers as $k => $v){\n                if ($k == 'Connection' || $k == 'Content-Length' || $k == 'Host' || $k == 'Authorization' || $k == 'Proxy-Authorization') {\n                    $this->debug(\"Skip cURL header $k: $v\");\n                } else {\n                    $curl_headers[] = \"$k: $v\";\n                }\n            }\n            if ($cookie_str != '') {\n                $curl_headers[] = 'Cookie: ' . $cookie_str;\n            }\n            $this->setCurlOption(CURLOPT_HTTPHEADER, $curl_headers);\n            $this->debug('set cURL HTTP headers');\n            if ($this->request_method == \"POST\") {\n                $this->setCurlOption(CURLOPT_POST, 1);\n                $this->setCurlOption(CURLOPT_POSTFIELDS, $data);\n                $this->debug('set cURL POST data');\n            }\n            foreach ($this->ch_options as $key => $val) {\n                $this->setCurlOption($key, $val);\n            }\n            $this->debug('set cURL payload');\n            return true;\n        }\n    }\n\n    function getResponse(){\n        $this->incoming_payload = '';\n        if ($this->io_method() == 'socket') {\n            $data = '';\n            while (!isset($lb)){\n                if(feof($this->fp)) {\n                    $this->incoming_payload = $data;\n                    $this->debug('found no headers before EOF after length ' . strlen($data));\n                    $this->debug(\"received before EOF:\\n\" . $data);\n                    $this->setError('server failed to send headers');\n                    return false;\n                }\n                $tmp = fgets($this->fp, 256);\n                $tmplen = strlen($tmp);\n                $this->debug(\"read line of $tmplen bytes: \" . trim($tmp));\n                if ($tmplen == 0) {\n                    $this->incoming_payload = $data;\n                    $this->debug('socket read of headers timed out after length ' . strlen($data));\n                    $this->debug(\"read before timeout: \" . $data);\n                    $this->setError('socket read of headers timed out');\n                    return false;\n                }\n                $data .= $tmp;\n                $pos = strpos($data,\"\\r\\n\\r\\n\");\n                if($pos > 1){\n                    $lb = \"\\r\\n\";\n                } else {\n                    $pos = strpos($data,\"\\n\\n\");\n                    if($pos > 1){\n                        $lb = \"\\n\";\n                    }\n                }\n                if (isset($lb) && preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    unset($lb);\n                    $data = '';\n                }\n            }\n            $this->incoming_payload .= $data;\n            $this->debug('found end of headers after length ' . strlen($data));\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $this->incoming_headers = array();\n            $this->incoming_cookies = array();\n            foreach($header_array as $header_line){\n                $arr = explode(':',$header_line, 2);\n                if(count($arr) > 1){\n                    $header_name = strtolower(trim($arr[0]));\n                    $this->incoming_headers[$header_name] = trim($arr[1]);\n                    if ($header_name == 'set-cookie') {\n                        $cookie = $this->parseCookie(trim($arr[1]));\n                        if ($cookie) {\n                            $this->incoming_cookies[] = $cookie;\n                            $this->debug('found cookie: ' . $cookie['name'] . ' = ' . $cookie['value']);\n                        } else {\n                            $this->debug('did not find cookie in ' . trim($arr[1]));\n                        }\n                    }\n                } else if (isset($header_name)) {\n                    $this->incoming_headers[$header_name] .= $lb . ' ' . $header_line;\n                }\n            }\n            if (isset($this->incoming_headers['transfer-encoding']) && strtolower($this->incoming_headers['transfer-encoding']) == 'chunked') {\n                $content_length =  2147483647;\n                $chunked = true;\n                $this->debug(\"want to read chunked content\");\n            } elseif (isset($this->incoming_headers['content-length'])) {\n                $content_length = $this->incoming_headers['content-length'];\n                $chunked = false;\n                $this->debug(\"want to read content of length $content_length\");\n            } else {\n                $content_length =  2147483647;\n                $chunked = false;\n                $this->debug(\"want to read content to EOF\");\n            }\n            $data = '';\n            do {\n                if ($chunked) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk line of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk length timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk length timed out');\n                        return false;\n                    }\n                    $content_length = hexdec(trim($tmp));\n                    $this->debug(\"chunk length $content_length\");\n                }\n                $strlen = 0;\n                while (($strlen < $content_length) && (!feof($this->fp))) {\n                    $readlen = min(8192, $content_length - $strlen);\n                    $tmp = fread($this->fp, $readlen);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read buffer of $tmplen bytes\");\n                    if (($tmplen == 0) && (!feof($this->fp))) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of body timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of body timed out');\n                        return false;\n                    }\n                    $strlen += $tmplen;\n                    $data .= $tmp;\n                }\n                if ($chunked && ($content_length > 0)) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk terminator of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk terminator timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk terminator timed out');\n                        return false;\n                    }\n                }\n            } while ($chunked && ($content_length > 0) && (!feof($this->fp)));\n            if (feof($this->fp)) {\n                $this->debug('read to EOF');\n            }\n            $this->debug('read body of length ' . strlen($data));\n            $this->incoming_payload .= $data;\n            $this->debug('received a total of '.strlen($this->incoming_payload).' bytes of data from server');\n            if(\n                (isset($this->incoming_headers['connection']) && strtolower($this->incoming_headers['connection']) == 'close') || \n                (! $this->persistentConnection) || feof($this->fp)){\n                fclose($this->fp);\n                $this->fp = false;\n                $this->debug('closed socket');\n            }\n            if($this->incoming_payload == ''){\n                $this->setError('no response from server');\n                return false;\n            }\n            return $data;\n        } else if ($this->io_method() == 'curl') {\n            $this->debug('send and receive with cURL');\n            $this->incoming_payload = curl_exec($this->ch);\n            $data = $this->incoming_payload;\n            $cErr = curl_error($this->ch);\n            if ($cErr != '') {\n                $err = 'cURL ERROR: '.curl_errno($this->ch).': '.$cErr.'<br>';\n                foreach(curl_getinfo($this->ch) as $k => $v){\n                    $err .= \"$k: $v<br>\";\n                }\n                $this->debug($err);\n                $this->setError($err);\n                curl_close($this->ch);\n                return false;\n            }\n            $this->debug('No cURL error, closing cURL');\n            curl_close($this->ch);\n            $savedata = $data;\n            while ($this->isSkippableCurlHeader($data)) {\n                $this->debug(\"Found HTTP header to skip\");\n                if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                    $data = ltrim(substr($data,$pos));\n                } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                    $data = ltrim(substr($data,$pos));\n                }\n            }\n            if ($data == '') {\n                $data = $savedata;\n                while (preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                        $data = ltrim(substr($data,$pos));\n                    } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                        $data = ltrim(substr($data,$pos));\n                    }\n                }\n            }\n            if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                $lb = \"\\r\\n\";\n            } elseif( $pos = strpos($data,\"\\n\\n\")) {\n                $lb = \"\\n\";\n            } else {\n                $this->debug('no proper separation of headers and document');\n                $this->setError('no proper separation of headers and document');\n                return false;\n            }\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $data = ltrim(substr($data,$pos));\n            $this->debug('found proper separation of headers and document');\n            $this->debug('cleaned data, stringlen: '.strlen($data));\n            foreach ($header_array as $header_line) {\n                $arr = explode(':',$header_line",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload = '';\n    public $incoming_payload = '';\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n\n    public function __construct(string $url, array $curl_options = null, bool $use_curl = false) {\n        $this->use_curl = $use_curl;\n        $parsed = parse_url($url);\n        if (!$parsed) {\n            trigger_error(\"Invalid URL\", E_USER_ERROR);\n            return;\n        }\n        $this->scheme = isset($parsed['scheme']) ? $parsed['scheme'] : 'http';\n        $this->host = isset($parsed['host']) ? $parsed['host'] : '';\n        $this->port = isset($parsed['port']) ? $parsed['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed['path']) ? $parsed['path'] : '/';\n        $this->uri = $parsed['path'] ?? '/';\n        $this->url = $url;\n        if ($curl_options) {\n            foreach ($curl_options as $option => $value) {\n                $this->setCurlOption($option, $value);\n            }\n        }\n    }\n\n    public function connect(int $connection_timeout = 0, int $response_timeout = 30): bool {\n        if ($this->use_curl) {\n            $this->ch = curl_init();\n            curl_setopt($this->ch, CURLOPT_URL, $this->url);\n            curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->ch, CURLOPT_HEADER, true);\n            curl_setopt($this->ch, CURLOPT_TIMEOUT, $connection_timeout ?: 30);\n            curl_setopt($this->ch, CURLOPT_CONNECTTIMEOUT, $connection_timeout ?: 30);\n            if ($this->proxy) {\n                curl_setopt($this->ch, CURLOPT_PROXY, $this->proxy['host'] . ':' . $this->proxy['port']);\n                curl_setopt($this->ch, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n            return true;\n        } else {\n            $this->socket = fsockopen(\n                $this->scheme === 'https' ? 'ssl://' . $this->host : $this->host,\n                $this->port,\n                $errno,\n                $errstr,\n                $connection_timeout\n            );\n            if (!$this->socket) {\n                trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_ERROR);\n                return false;\n            }\n            stream_set_timeout($this->socket, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send(string $data, int $timeout = 0, int $response_timeout = 30, array $cookies = null): mixed {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest(string $data, array $cookies = null): bool {\n        if ($this->use_curl) {\n            curl_setopt($this->ch, CURLOPT_POST, true);\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->ch, CURLOPT_HTTPHEADER, $this->formatHeaders());\n            if ($cookies) {\n                curl_setopt($this->ch, CURLOPT_COOKIE, http_build_query($cookies));\n            }\n            return true;\n        } else {\n            $request = $this->buildRequestLine();\n            $headers = $this->formatHeaders();\n            foreach ($headers as $header) {\n                fwrite($this->socket, $header . \"\\r\\n\");\n            }\n            fwrite($this->socket, \"\\r\\n\");\n            fwrite($this->socket, $data);\n            return true;\n        }\n    }\n\n    private function buildRequestLine(): string {\n        return sprintf(\n            \"%s %s HTTP/%s\",\n            $this->request_method,\n            $this->uri,\n            $this->protocol_version\n        );\n    }\n\n    private function formatHeaders(): array {\n        $headers = [];\n        $headers[] = \"Host: {$this->host}:{$this->port}\";\n        $headers[] = \"User-Agent: PHP-SOAP-Client\";\n        $headers[] = \"Accept: */*\";\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponse(): string|bool {\n        if ($this->use_curl) {\n            $response = curl_exec($this->ch);\n            if ($response === false) {\n                return false;\n            }\n            $this->incoming_payload = $response;\n            $this->parseResponseHeaders();\n            return $this->incoming_payload;\n        } else {\n            $response = '';\n            $header = '';\n            while (!feof($this->socket)) {\n                $line = fgets($this->socket);\n                if (trim($line) === '') {\n                    break;\n                }\n                $header .= $line;\n            }\n            $this->incoming_headers = $this->parseHeaders($header);\n            $this->incoming_payload = '';\n            while (!feof($this->socket)) {\n                $this->incoming_payload .= fgets($this->socket);\n            }\n            return $this->incoming_payload;\n        }\n    }\n\n    private function parseHeaders(string $header): array {\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $header) as $line) {\n            if (strpos($line, ':') === false) continue;\n            list($name, $value) = explode(':', $line, 2);\n            $headers[strtolower($name)] = trim($value);\n        }\n        return $headers;\n    }\n\n    public function setHeader(string $name, string $value): void {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption(mixed $option, mixed $value): void {\n        if ($this->use_curl && is_int($option)) {\n            curl_setopt($this->ch, $option, $value);\n        }\n    }\n\n    public function parseCookie(string $cookie_str): array|bool {\n        if (empty($cookie_str)) return [];\n        $cookies = [];\n        $parts = explode(';', $cookie_str);\n        foreach ($parts as $part) {\n            $pair = explode('=', $part, 2);\n            if (count($pair) < 2) continue;\n            $name = trim($pair[0]);\n            $value = trim($pair[1]);\n            $cookies[$name] = $value;\n        }\n        return $cookies;\n    }\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a PHP function that fetches content from a remote HTTP server using low-level socket operations, with support for various HTTP request parameters and proxy configuration.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request with customizable headers, reads the response, and returns the content body. It supports authentication, custom headers, timeout settings, and proxy configuration. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: [array] - An associative array containing the following possible keys:\n  - 'file': [string] - The URL to fetch (required)\n  - 'assign': [string] - Template variable name to assign content to (optional)\n  - 'assign_headers': [string] - Template variable name to assign response headers to (optional)\n  - 'user': [string] - Username for HTTP authentication (optional)\n  - 'pass': [string] - Password for HTTP authentication (optional)\n  - 'accept': [string] - Accept header value (optional)\n  - 'header': [string|array] - Additional HTTP headers (optional)\n  - 'proxy_host': [string] - Proxy server hostname (optional)\n  - 'proxy_port': [int] - Proxy server port (optional)\n  - 'agent': [string] - User-Agent header value (optional)\n  - 'referer': [string] - Referer header value (optional)\n  - 'timeout': [int] - Connection timeout in seconds (optional)\n- $template: [object] - Template engine object for variable assignment (optional)\n\nOutput:\n- If 'assign' parameter is provided: [void] - Assigns content to template variable\n- If 'assign' parameter is not provided: [string] - Returns the fetched content\n- On error: [void] - Triggers notice and returns nothing",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n            $proxy_host = $proxy_port = null;\n            $extra_headers = array();\n            $accept = \"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*\";\n            $agent = \"Smarty Template Engine \" . Smarty::SMARTY_VERSION;\n            $referer = \"\";\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"file\":\n                    case \"assign\":\n                    case \"assign_headers\":\n                        break;\n                    case \"user\":\n                        if (!empty($param_value)) $user = $param_value;\n                        break;\n                    case \"pass\":\n                        if (!empty($param_value)) $pass = $param_value;\n                        break;\n                    case \"accept\":\n                        if (!empty($param_value)) $accept = $param_value;\n                        break;\n                    case \"header\":\n                        if (!empty($param_value) && preg_match('![\\w\\d-]+: .+!', $param_value)) {\n                            $extra_headers[] = $param_value;\n                        }\n                        break;\n                    case \"proxy_host\":\n                        if (!empty($param_value)) $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) $proxy_port = (int)$param_value;\n                        break;\n                    case \"agent\":\n                        if (!empty($param_value)) $agent = $param_value;\n                        break;\n                    case \"referer\":\n                        if (!empty($param_value)) $referer = $param_value;\n                        break;\n                    case \"timeout\":\n                        if (!preg_match('!\\D!', $param_value)) $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            if (!empty($host)) fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($accept)) fputs($fp, \"Accept: $accept\\r\\n\");\n            if (!empty($agent)) fputs($fp, \"User-Agent: $agent\\r\\n\");\n            if (!empty($referer)) fputs($fp, \"Referer: $referer\\r\\n\");\n            foreach ($extra_headers as $curr_header) {\n                fputs($fp, $curr_header . \"\\r\\n\");\n            }\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n\n            fputs($fp, \"\\r\\n\");\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n\n            if (!empty($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], preg_split(\"!\\r\\n!\", $csplit[0]));\n            }\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "wrong_result": "function fetch_content($params, $template = null) {\n    if (!isset($params['file'])) {\n        trigger_error(\"Missing 'file' parameter\", E_USER_NOTICE);\n        return;\n    }\n\n    $url = $params['file'];\n    $parsed = parse_url($url);\n    if (!$parsed || !isset($parsed['host'])) {\n        trigger_error(\"Invalid URL\", E_USER_NOTICE);\n        return;\n    }\n\n    $host = $parsed['host'];\n    $path = isset($parsed['path']) ? $parsed['path'] : '/';\n    $query = isset($parsed['query']) ? '?' . $parsed['query'] : '';\n    $port = isset($parsed['port']) ? $parsed['port'] : 80;\n\n    $proxy_host = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxy_port = isset($params['proxy_port']) ? $params['proxy_port'] : null;\n\n    $socket = null;\n    $target_host = $host;\n    $target_port = $port;\n\n    if ($proxy_host !== null) {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if ($socket === false) {\n            trigger_error(\"Failed to create socket\", E_USER_NOTICE);\n            return;\n        }\n\n        $proxy_ip = gethostbyname($proxy_host);\n        $result = socket_connect($socket, $proxy_ip, $proxy_port);\n        if ($result === false) {\n            trigger_error(\"Failed to connect to proxy\", E_USER_NOTICE);\n            return;\n        }\n\n        $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, array('sec' => $timeout, 'usec' => 0));\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, array('sec' => $timeout, 'usec' => 0));\n    } else {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if ($socket === false) {\n            trigger_error(\"Failed to create socket\", E_USER_NOTICE);\n            return;\n        }\n\n        $target_ip = gethostbyname($host);\n        $result = socket_connect($socket, $target_ip, $target_port);\n        if ($result === false) {\n            trigger_error(\"Failed to connect to server\", E_USER_NOTICE);\n            return;\n        }\n\n        $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, array('sec' => $timeout, 'usec' => 0));\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, array('sec' => $timeout, 'usec' => 0));\n    }\n\n    $headers = array();\n\n    $agent = isset($params['agent']) ? $params['agent'] : 'Mozilla/5.0';\n    $headers[] = \"User-Agent: $agent\";\n\n    if (isset($params['accept'])) {\n        $headers[] = \"Accept: \" . $params['accept'];\n    }\n\n    if (isset($params['referer'])) {\n        $headers[] = \"Referer: \" . $params['referer'];\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n        } else {\n            $headers[] = $params['header'];\n        }\n    }\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode($params['user'] . ':' . $params['pass']);\n        $headers[] = \"Authorization: Basic $auth\";\n    }\n\n    $host_header = $target_host;\n    if ($target_port != 80) {\n        $host_header .= \":$target_port\";\n    }\n    $headers[] = \"Host: $host_header\";\n\n    $request = \"GET $path HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host_header\\r\\n\";\n    foreach ($headers as $header) {\n        $request .= \"$header\\r\\n\";\n    }\n    $request .= \"\\r\\n\";\n\n    $request_length = strlen($request);\n    $sent = socket_write($socket, $request, $request_length);\n    if ($sent !== $request_length) {\n        trigger_error(\"Failed to send request\", E_USER_NOTICE);\n        return;\n    }\n\n    $response = '';\n    while ($out = socket_read($socket, 8192)) {\n        $response .= $out;\n    }\n\n    if (empty($response)) {\n        trigger_error(\"No response received\", E_USER_NOTICE);\n        return;\n    }\n\n    $header_end = strpos($response, \"\\r\\n\\r\\n\");\n    if ($header_end === false) {\n        trigger_error(\"No headers found in response\", E_USER_NOTICE);\n        return;\n    }\n    $headers_part = substr($response, 0, $header_end);\n    $body = substr($response, $header_end + 4);\n\n    $headers_array = array();\n    $header_lines = explode(\"\\r\\n\", $headers_part);\n    $status_line = array_shift($header_lines);\n    foreach ($header_lines as $line) {\n        if (trim($line) === '') continue;\n        list($key, $value) = explode(':', $line, 2);\n        $headers_array[trim($key)] = trim($value);\n    }\n\n    socket_close($socket);\n\n    if (isset($params['assign'])) {\n        if ($template instanceof Template) {\n            $template->assign($params['assign'], $body);\n        } else {\n            trigger_error(\"Template object is required for assignment\", E_USER_NOTICE);\n            return;\n        }\n    } elseif (isset($params['assign_headers'])) {\n        if ($template instanceof Template) {\n            $template->assign($params['assign_headers'], $headers_array);\n        } else {\n            trigger_error(\"Template object is required for assignment\", E_USER_NOTICE);\n            return;\n        }\n    } else {\n        return $body;\n    }\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a PHP class that handles file uploads to a specified host using HTTP PUT requests with Guzzle HTTP client, including CRC32 checksum verification.\n\nClass Description: ImageX is a class that extends V4Curl and provides functionality to upload files to a remote server. It handles file validation, CRC32 checksum generation, and HTTP communication using Guzzle's HTTP client.\n\nAttributes: (No explicit attributes in this class - it inherits from V4Curl)\n\nMethods:\nupload: [upload](string $uploadHost, array $storeInfo, string $filePath) -> int - Uploads a file to the specified host using HTTP PUT request. Validates file existence, calculates CRC32 checksum, and sends the file with appropriate headers. Returns 0 on success, -1 if file doesn't exist, or -2 if upload fails.\n\nParameters:\n- $uploadHost: string - The host address to upload to\n- $storeInfo: array - Contains 'StoreUri' for upload endpoint and 'Auth' for authorization\n- $filePath: string - Local path to the file to be uploaded\n\nReturn:\n- int: 0 for success, -1 for file not found, -2 for upload failure",
    "Canonical_solution": "use Volc\\Base\\V4Curl;\nuse GuzzleHttp\\Client;\n\nclass ImageX extends V4Curl\n{\n    public function upload(string $uploadHost, $storeInfo, string $filePath)\n    {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n        $content = file_get_contents($filePath);\n        $crc32 = sprintf(\"%08x\", crc32($content));\n\n        $body = fopen($filePath, \"r\");\n        $tosClient = new Client([\n            'base_uri' => \"https://\" . $uploadHost,\n            'timeout' => 5.0,\n        ]);\n\n        $response = $tosClient->request('PUT', $storeInfo[\"StoreUri\"], [\"body\" => $body, \"headers\" => ['Authorization' => $storeInfo[\"Auth\"], 'Content-CRC32' => $crc32]]);\n        $uploadResponse = json_decode((string) $response->getBody(), true);\n        if (!isset($uploadResponse[\"success\"]) || $uploadResponse[\"success\"] != 0) {\n            return -2;\n        }\n        return 0;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "use GuzzleHttp\\Client;\n\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $content = file_get_contents($filePath);\n        $crc32 = crc32($content);\n\n        $url = $uploadHost . $storeInfo['StoreUri'];\n\n        $client = new Client();\n        try {\n            $response = $client->put($url, [\n                'body' => $content,\n                'headers' => [\n                    'Content-Type' => 'application/octet-stream',\n                    'X-CRC32' => $crc32,\n                    'Authorization' => $storeInfo['Auth']\n                ]\n            ]);\n            return $response->getStatusCode() === 200 ? 0 : -2;\n        } catch (\\Exception $e) {\n            return -2;\n        }\n    }\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using low-level socket operations (fsockopen) to send HTTP requests and handle responses, with logging capabilities.\n\nClass Description: SocketHttpClient is a PSR-compatible HTTP client that establishes direct socket connections to HTTP servers, sends requests, and processes responses. It implements both a custom HTTP client interface and PSR-18's ClientInterface, while also supporting PSR-3 logging.\n\nAttributes:\n- logger: [LoggerInterface] - PSR-3 logger instance for tracking connection attempts, errors, and debug information\n\nMethods:\n- __construct([LoggerInterface $logger]) -> [void] - Initializes the client with a PSR-3 logger instance\n- sendRequest([RequestInterface $request]) -> [ResponseInterface] - Sends an HTTP request and returns the response. Handles both HTTP and HTTPS connections, processes headers and body, and manages socket lifecycle. Returns a PSR-7 response object.",
    "Canonical_solution": "use Mpdf\\Log\\Context as LogContext;\nuse Mpdf\\PsrHttpMessageShim\\Response;\nuse Mpdf\\PsrHttpMessageShim\\Stream;\nuse Mpdf\\PsrLogAwareTrait\\PsrLogAwareTrait;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements \\Mpdf\\Http\\ClientInterface, \\Psr\\Log\\LoggerAwareInterface\n{\n    use PsrLogAwareTrait;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request)\n    {\n        if (null === $request->getUri()) {\n            return (new Response());\n        }\n\n        $url = $request->getUri();\n\n        if (is_string($url)) {\n            $url = new Uri($url);\n        }\n\n        $timeout = 1;\n\n        $file = $url->getPath() ?: '/';\n        $scheme = $url->getScheme();\n        $port = $url->getPort() ?: 80;\n        $prefix = '';\n\n        if ($scheme === 'https') {\n            $prefix = 'ssl://';\n            $port = $url->getPort() ?: 443;\n        }\n\n        $query = $url->getQuery();\n        if ($query) {\n            $file .= '?' . $query;\n        }\n\n        $socketPath = $prefix . $url->getHost();\n\n        $this->logger->debug(sprintf('Opening socket on %s:%s of URL \"%s\"', $socketPath, $port, $request->getUri()), ['context' => LogContext::REMOTE_CONTENT]);\n\n        $response = new Response();\n\n        if (!($fh = @fsockopen($socketPath, $port, $errno, $errstr, $timeout))) {\n            $this->logger->error(sprintf('Socket error \"%s\": \"%s\"', $errno, $errstr), ['context' => LogContext::REMOTE_CONTENT]);\n            return $response;\n        }\n\n        $getRequest = 'GET ' . $file . ' HTTP/1.1' . \"\\r\\n\" .\n            'Host: ' . $url->getHost() . \" \\r\\n\" .\n            'Connection: close' . \"\\r\\n\\r\\n\";\n\n        fwrite($fh, $getRequest);\n\n        $httpHeader = fgets($fh, 1024);\n        if (!$httpHeader) {\n            return $response;\n        }\n\n        preg_match('@HTTP/(?P<protocolVersion>[\\d\\.]+) (?P<httpStatusCode>[\\d]+) .*@', $httpHeader, $parsedHeader);\n\n        if (!$parsedHeader) {\n            return $response;\n        }\n\n        $response = $response->withStatus($parsedHeader['httpStatusCode']);\n\n        while (!feof($fh)) {\n            $s = fgets($fh, 1024);\n            if ($s === \"\\r\\n\") {\n                break;\n            }\n            preg_match('/^(?P<headerName>.*?): ?(?P<headerValue>.*)$/', $s, $parsedHeader);\n            if (!$parsedHeader) {\n                continue;\n            }\n            $response = $response->withHeader($parsedHeader['headerName'], trim($parsedHeader['headerValue']));\n        }\n\n        $body = '';\n\n        while (!feof($fh)) {\n            $line = fgets($fh, 1024);\n            $body .= $line;\n        }\n\n        fclose($fh);\n\n        $stream = Stream::create($body);\n        $stream->rewind();\n\n        return $response\n            ->withBody($stream);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class SocketHttpClient implements \\Psr\\Http\\Client\\ClientInterface {\n    private $logger;\n\n    public function __construct(\\Psr\\Log\\LoggerInterface $logger) {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(\\Psr\\Http\\Message\\RequestInterface $request): \\Psr\\Http\\Message\\ResponseInterface {\n        $uri = $request->getUri();\n        $parsed = parse_url($uri);\n        if ($parsed === false) {\n            $this->logger->error('Invalid URI');\n            throw new \\RuntimeException('Invalid URI');\n        }\n\n        $host = $parsed['host'] ?? 'localhost';\n        $port = $parsed['port'] ?? ($parsed['scheme'] === 'https' ? 443 : 80);\n        $path = $parsed['path'] ?? '/';\n        $query = $parsed['query'] ?? '';\n        $scheme = $parsed['scheme'] ?? 'http';\n\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[] = $name . ': ' . implode(', ', $values);\n        }\n\n        if (!isset($headers['Host'])) {\n            $headers[] = 'Host: ' . $host;\n        }\n\n        $requestLine = $request->getMethod() . ' ' . $path . ($query ? '?' . $query : '') . ' HTTP/1.1';\n\n        $this->logger->debug('Sending request: ' . $requestLine);\n        foreach ($headers as $header) {\n            $this->logger->debug('Header: ' . $header);\n        }\n\n        $context = stream_context_create([\n            'ssl' => [\n                'verify_peer' => false,\n                'verify_depth' => 0,\n                'allow_self_signed' => true,\n            ],\n        ]);\n\n        $fp = null;\n        if ($scheme === 'https') {\n            $fp = @stream_socket_client(\"ssl://{$host}:{$port}\", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $context);\n        } else {\n            $fp = @fsockopen($host, $port, $errno, $errstr, 30);\n        }\n\n        if (!$fp) {\n            $this->logger->error(\"Connection failed: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Connection failed: {$errstr} ({$errno})\");\n        }\n\n        fwrite($fp, $requestLine . \"\\r\\n\");\n        foreach ($headers as $header) {\n            fwrite($fp, $header . \"\\r\\n\");\n        }\n        fwrite($fp, \"\\r\\n\");\n\n        $body = $request->getBody()->getContents();\n        if ($body) {\n            fwrite($fp, $body);\n        }\n\n        $statusLine = '';\n        $headersResponse = [];\n        $bodyResponse = '';\n\n        while (!feof($fp)) {\n            $line = fgets($fp, 4096);\n            if (substr($line, 15, 1) === ' ') {\n                $statusLine = $line;\n            } elseif ($line === \"\\r\\n\") {\n                break;\n            } else {\n                $headersResponse[] = $line;\n            }\n        }\n\n        $this->logger->debug('Received response: ' . $statusLine);\n        foreach ($headersResponse as $header) {\n            $this->logger->debug('Header: ' . $header);\n        }\n\n        while (!feof($fp)) {\n            $bodyResponse .= fgets($fp, 4096);\n        }\n\n        $parts = explode(' ', $statusLine, 3);\n        $statusCode = (int) $parts[1];\n        $protocolVersion = $parts[0];\n\n        return new class($statusCode, $protocolVersion, $headersResponse, $bodyResponse) implements \\Psr\\Http\\Message\\ResponseInterface {\n            private $statusCode;\n            private $protocolVersion;\n            private $headers;\n            private $body;\n\n            public function __construct(int $statusCode, string $protocolVersion, array $headers, string $body) {\n                $this->statusCode = $statusCode;\n                $this->protocolVersion = $protocolVersion;\n                $this->headers = $headers;\n                $this->body = $body;\n            }\n\n            public function getStatusCode(): int {\n                return $this->statusCode;\n            }\n\n            public function getProtocolVersion(): string {\n                return $this->protocolVersion;\n            }\n\n            public function getHeader(string $name): array {\n                $name = strtolower($name);\n                foreach ($this->headers as $header) {\n                    if (stripos($header, $name) === 0) {\n                        return explode(':', $header, 2);\n                    }\n                }\n                return [];\n            }\n\n            public function getHeaderLine(string $name): string {\n                $name = strtolower($name);\n                foreach ($this->headers as $header) {\n                    if (stripos($header, $name) === 0) {\n                        return $header;\n                    }\n                }\n                return '';\n            }\n\n            public function getHeaders(): array {\n                return $this->headers;\n            }\n\n            public function withHeader(string $name, string $value): static {\n                return new static($this->statusCode, $this->protocolVersion, array_merge($this->headers, [$name . ': ' . $value]), $this->body);\n            }\n\n            public function withAddedHeader(string $name, string $value): static {\n                return new static($this->statusCode, $this->protocolVersion, array_merge($this->headers, [$name . ': ' . $value]), $this->body);\n            }\n\n            public function withoutHeader(string $name): static {\n                return new static($this->statusCode, $this->protocolVersion, array_values(array_filter($this->headers, function ($header) use ($name) {\n                    return stripos($header, $name) !== 0;\n                })), $this->body);\n            }\n\n            public function getBody(): \\Psr\\Http\\Message\\StreamInterface {\n                return new class($this->body) implements \\Psr\\Http\\Message\\StreamInterface {\n                    private $body;\n\n                    public function __construct(string $body) {\n                        $this->body = $body;\n                    }\n\n                    public function __toString(): string {\n                        return $this->body;\n                    }\n\n                    public function close(): void {\n                        // No-op\n                    }\n\n                    public function detach(): ?string {\n                        return $this->body;\n                    }\n\n                    public function getContents(): string {\n                        return $this->body;\n                    }\n\n                    public function getSize(): ?int {\n                        return strlen($this->body);\n                    }\n\n                    public function isSeekable(): bool {\n                        return false;\n                    }\n\n                    public function seek($offset, $whence = SEEK_SET): void {\n                        throw new \\RuntimeException('Not supported');\n                    }\n\n                    public function eof(): bool {\n                        return $this->getSize() === 0;\n                    }\n\n                    public function tell(): int {\n                        return 0;\n                    }\n\n                    public function rewind(): void {\n                        throw new \\RuntimeException('Not supported');\n                    }\n\n                    public function getMetadata($key = null): array|string|null {\n                        return $key === 'uri' ? 'php://temp' : null;\n                    }\n                };\n            }\n\n            public function withBody(\\Psr\\Http\\Message\\StreamInterface $body): static {\n                return new static($this->statusCode, $this->protocolVersion, $this->headers, $body);\n            }\n        };\n    }\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a RabbitMQ consumer class in PHP that connects to a RabbitMQ server, declares a queue and exchange, binds them, and processes incoming messages until a termination signal is received.\n\nClass Description: The RabbitMQConsumer class handles the consumption of messages from a RabbitMQ queue. It establishes a connection to the server, sets up the necessary queue and exchange, processes messages, and provides shutdown functionality.\n\nAttributes:\n- msgCount: [int] - Tracks the number of messages processed\n- startTime: [float|null] - Records the start time of message processing\n- conn: [AMQPStreamConnection] - Holds the RabbitMQ server connection\n- ch: [AMQPChannel] - Represents the communication channel\n- exchange: [string] - Name of the exchange to bind to\n- queue: [string] - Name of the queue to consume from\n- consumer_tag: [string] - Identifier for the consumer (empty in this implementation)\n\nMethods:\n- __construct() -> [void] - Initializes the RabbitMQ connection, channel, exchange, and queue\n- process_message([AMQPMessage] $msg) -> [void] - Processes incoming messages and handles termination signal\n- startConsuming() -> [void] - Starts consuming messages from the queue\n- shutdown() -> [void] - Closes the channel and connection cleanly",
    "Canonical_solution": "use PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/../tests/config.php';\n\nclass RabbitMQConsumer\n{\n    protected $msgCount = 0;\n    protected $startTime = null;\n    protected $conn;\n    protected $ch;\n    protected $exchange = 'bench_exchange';\n    protected $queue = 'bench_queue';\n    protected $consumer_tag = '';\n\n    public function __construct()\n    {\n        $this->conn = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $this->ch = $this->conn->channel();\n        $this->ch->queue_declare($this->queue, false, false, false, false);\n        $this->ch->exchange_declare($this->exchange, 'direct', false, false, false);\n        $this->ch->queue_bind($this->queue, $this->exchange);\n    }\n\n    public function process_message($msg)\n    {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n\n        if ($msg->body == 'quit') {\n            echo sprintf(\"Pid: %s, Count: %s, Time: %.4f\\n\", getmypid(), $this->msgCount, microtime(true) - $this->startTime);\n            $this->shutdown();\n            die;\n        }\n        $this->msgCount++;\n    }\n\n    public function startConsuming()\n    {\n        $this->ch->basic_consume($this->queue, '', false, true, false, false, array($this, 'process_message'));\n        while ($this->ch->is_consuming()) {\n            $this->ch->wait();\n        }\n    }\n\n    protected function shutdown()\n    {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 143,
    "wrong_result": "class RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, false, false);\n        $this->ch->queue_declare($this->queue, false, false, false, false);\n        $this->ch->queue_bind($this->queue, $this->exchange, $this->queue);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        $this->msgCount++;\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n        if ($msg->body === 'terminate') {\n            $this->shutdown();\n            return;\n        }\n        echo \"Received message: \" . $msg->body . \"\\n\";\n    }\n\n    public function startConsuming() {\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, [$this, 'process_message']);\n        while (count($this->ch->callbacks) > 0) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a PHP function that implements a RabbitMQ consumer to process messages from a specified queue, with the ability to acknowledge or reject messages based on their content, and properly handle connection shutdown.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them together, and starts consuming messages. It processes each message by acknowledging \"good\" messages and rejecting others. If the message body is \"quit\", it stops consuming. The function includes proper cleanup by closing the channel and connection on shutdown.\n\nInput:\n- $host: string - RabbitMQ server hostname\n- $port: int - RabbitMQ server port\n- $user: string - RabbitMQ username\n- $pass: string - RabbitMQ password  \n- $vhost: string - RabbitMQ virtual host\n- $exchange: string - Exchange name to bind to\n- $queue: string - Queue name to consume from\n- $consumerTag: string - Identifier for this consumer\n\nOutput: None (This is a long-running consumer process that handles messages asynchronously)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        if ($message->body == 'good') {\n            $message->ack();\n        } else {\n            $message->nack();\n        }\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "function rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost,\n    ]);\n    $connection->connect();\n    $channel = new AMQPChannel($connection);\n\n    $exchange = new AMQPExchange($channel);\n    $exchange->setName($exchange);\n    $exchange->setType(AMQP_EX_TYPE_DIRECT);\n    $exchange->declare();\n\n    $queue = new AMQPQueue($channel);\n    $queue->setName($queue);\n    $queue->declare();\n    $queue->bind($exchange, $queue);\n\n    $queue->consume(function ($message) use ($consumerTag, $channel) {\n        if ($message->body === 'quit') {\n            $channel->basic_cancel($consumerTag);\n            return;\n        }\n        $channel->basic_ack($message->delivery_tag);\n    }, AMQP_NOPARAM, $consumerTag);\n\n    register_shutdown_function(function () use ($connection) {\n        $connection->close();\n    });\n}"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): RabbitMQ server hostname or IP address\n- `$port` (int): RabbitMQ server port number\n- `$user` (string): RabbitMQ username for authentication\n- `$pass` (string): RabbitMQ password for authentication\n- `$vhost` (string): RabbitMQ virtual host\n- `$exchange` (string): Name of the exchange to bind to\n- `$queue` (string): Name of the queue to consume messages from\n\nOutput: None (The function runs continuously until terminated or until receiving a 'quit' message)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    require_once __DIR__ . '/vendor/autoload.php';\n\n    pcntl_signal(SIGINT, function () {\n        echo \"Shutting down...\\n\";\n        exit;\n    });\n\n    pcntl_signal(SIGTERM, function () {\n        echo \"Shutting down...\\n\";\n        exit;\n    });\n\n    $connection = new \\PhpAmqpLib\\Connection\\AMQPStreamConnection(\n        $host,\n        $port,\n        $user,\n        $pass,\n        $vhost\n    );\n\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, false, false);\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) {\n        if ($msg->body === 'quit') {\n            echo \"Received quit message, shutting down...\\n\";\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n            $msg->delivery_info['channel']->close();\n            $msg->delivery_info['channel']->connection->close();\n            exit;\n        } else {\n            echo \"Received: \" . $msg->body . \"\\n\";\n            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n        }\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks) > 0) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): The hostname of the RabbitMQ server.\n- `$port` (int): The port number of the RabbitMQ server.\n- `$user` (string): The username for RabbitMQ authentication.\n- `$pass` (string): The password for RabbitMQ authentication.\n- `$vhost` (string): The virtual host to connect to.\n- `$exchange` (string): The name of the exchange to declare.\n- `$queue` (string): The name of the queue to declare and consume from.\n\nOutput: None. The function runs indefinitely until a 'quit' message is received or the process is terminated. Messages are processed and acknowledged, and connections are closed upon shutdown.",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    require_once 'vendor/autoload.php';\n\n    $connection = new \\PhpAmqpLib\\Connection\\AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, false, false);\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) {\n        $body = $msg->body;\n        if ($body === 'quit') {\n            $msg->delivery_info['channel']->close();\n            $connection->close();\n            exit;\n        }\n        echo \"Processing message: $body\\n\";\n        $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    if (PHP_SAPI === 'cli') {\n        pcntl_signal(SIGINT, function () use ($channel, $connection) {\n            $channel->close();\n            $connection->close();\n            exit;\n        });\n    }\n\n    while (count($channel->callbacks) > 0) {\n        $connection->wait();\n    }\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a PHP function that consumes messages from a RabbitMQ queue using headers-based routing. The function should establish a connection to RabbitMQ, declare an exchange and queue, bind the queue with specified headers, and process incoming messages with a callback function.\n\nFunction Description: The function `consume_rabbitmq_messages` connects to a RabbitMQ server, sets up a headers-based exchange, declares a temporary queue, binds the queue with the provided headers, and starts consuming messages. It processes each message using a callback function that displays the message body and headers. The function handles timeouts gracefully and cleans up resources after processing.\n\nInput: \n- `$headers` (array): An array of strings in the format \"key=value\" representing the headers to bind the queue with.\n\nOutput: \n- Returns `true` if the function executes successfully.\n- Returns `false` if the input headers are empty.\n- Outputs message details to stdout and may write errors to stderr.",
    "Canonical_solution": "function consume_rabbitmq_messages($headers)\n{\n    require __DIR__ . '/config.php';\n    \n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exception\\AMQPTimeoutException;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    if (empty($headers)) {\n        file_put_contents('php://stderr', \"Usage: $argv[0] [header1=value1] [header2=value2]\\n\");\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchangeName = 'topic_headers_test';\n    $channel->exchange_declare($exchangeName, AMQPExchangeType::HEADERS);\n\n    list($queueName, ,) = $channel->queue_declare('', false, false, true);\n\n    $bindArguments = [];\n    foreach ($headers as $header) {\n        list ($key, $value) = explode('=', $header, 2);\n        $bindArguments[$key] = $value;\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', false, new AMQPTable($bindArguments));\n\n    $callback = function (AMQPMessage $message) {\n        echo PHP_EOL . ' [x] ', $message->getRoutingKey(), ':', $message->getBody(), \"\\n\";\n        echo 'Message headers follows' . PHP_EOL;\n        var_dump($message->get('application_headers')->getNativeData());\n        echo PHP_EOL;\n    };\n\n    $channel->basic_consume($queueName, '', false, true, true, false, $callback);\n    while ($channel->is_consuming()) {\n        try {\n            $channel->wait(null, false, 2);\n        } catch (AMQPTimeoutException $exception) {\n        }\n        echo '*' . PHP_EOL;\n    }\n\n    $channel->close();\n    $connection->close();\n    return true;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "function consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $headers_array = array();\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header, 2);\n        $headers_array[$key] = $value;\n    }\n\n    try {\n        $connection = new AMQPConnection([\n            'host' => 'localhost',\n            'port' => 5672,\n            'login' => 'guest',\n            'password' => 'guest'\n        ]);\n        $connection->connect();\n\n        $channel = new AMQPChannel($connection);\n\n        $exchange = new AMQPExchange($channel);\n        $exchange->setName('headers_exchange');\n        $exchange->setType(AMQP_EX_TYPE_HEADERS);\n        $exchange->declare();\n\n        $queue = new AMQPQueue($channel);\n        $queue->setName(uniqid());\n        $queue->declare();\n\n        $queue->bind('headers_exchange', '', $headers_array);\n\n        $queue->consume(function ($envelope, $queue) {\n            $body = $envelope->getBody();\n            $headers = $envelope->getHeaders();\n            echo \"Received: \" . $body . \"\\n\";\n            echo \"Headers: \" . print_r($headers, true) . \"\\n\";\n        }, array('timeout' => 30));\n\n        return true;\n    } catch (Exception $e) {\n        fwrite(STDERR, \"Error: \" . $e->getMessage() . \"\\n\");\n        return false;\n    }\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a function that sends multiple messages to a RabbitMQ queue using PHP and measures the execution time for the operation.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, creates a temporary queue, sends a specified number of messages with the given content, and returns the total time taken to complete the operation. Each message is sent through a newly created channel, and the temporary queue is automatically deleted after use.\n\nInput:\n- $max_messages: [int] - The number of messages to send.\n- $host: [string] - The hostname or IP address of the RabbitMQ server.\n- $port: [int] - The port number of the RabbitMQ server.\n- $user: [string] - The username for RabbitMQ authentication.\n- $pass: [string] - The password for RabbitMQ authentication.\n- $vhost: [string] - The virtual host to connect to on the RabbitMQ server.\n- $message_body: [string] - The content of the message to be sent.\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages, or false if the connection fails.",
    "Canonical_solution": "function send_rabbitmq_messages($max_messages, $host, $port, $user, $pass, $vhost, $message_body)\n{\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    if (!$conn) {\n        return false;\n    }\n\n    $time = microtime(true);\n\n    for ($i = 0; $i < $max_messages; $i++) {\n        $ch = $conn->channel();\n        list($queue,) = $ch->queue_declare('', false, false, true, true);\n        $msg = new AMQPMessage($message_body);\n        $ch->basic_publish($msg, '', $queue);\n        $ch->close();\n    }\n\n    $execution_time = microtime(true) - $time;\n    $conn->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "function sendMessages($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $startTime = microtime(true);\n\n    try {\n        $conn = new AMQPConnection($host, $port, $user, $pass, $vhost);\n        $conn->connect();\n\n        $queue = new AMQPQueue($conn);\n        $queue->setName(uniqid('msg_queue_'));\n        $queue->setAutoDelete(true);\n        $queue->declare();\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $channel = new AMQPChannel($conn);\n            $channel->basic_publish(new AMQPMessage($message_body), '', $queue->getName());\n            $channel->close();\n        }\n\n        $conn->close();\n\n        $endTime = microtime(true);\n        return $endTime - $startTime;\n    } catch (Exception $e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a CAPTCHA validation class that verifies user-submitted CAPTCHA responses using Google's reCAPTCHA API.\n\nClass Description: The Captcha class implements Laravel's Rule interface to provide CAPTCHA validation functionality. It sends the user's CAPTCHA response to Google's verification endpoint and checks the success status in the response.\n\nAttributes: (This class has no explicit attributes as it uses configuration values directly)\n\nMethods:\n1: passes(string $attribute, mixed $value) -> bool - Validates the CAPTCHA response by sending it to Google's verification API along with the secret key and client IP. Returns true if verification succeeds.\n   - $attribute: The name of the attribute being validated\n   - $value: The CAPTCHA response token to be validated\n\n2: message() -> string - Returns the validation error message to be displayed when CAPTCHA validation fails. The message is localized using Laravel's translation system.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        if (empty($value)) {\n            return false;\n        }\n\n        $response = json_decode((new Client([\n            'timeout' => config('boilerplate.access.captcha.configs.options.timeout'),\n        ]))->post('https://www.google.com/recaptcha/api/siteverify', [\n            'form_params' => [\n                'secret' => config('boilerplate.access.captcha.configs.secret_key'),\n                'remoteip' => request()->getClientIp(),\n                'response' => $value,\n            ],\n        ])->getBody(), true);\n\n        return isset($response['success']) && $response['success'] === true;\n    }\n\n    public function message()\n    {\n        return __('The captcha was invalid.');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule {\n    public function passes($attribute, $value): bool {\n        $data = [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ];\n\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', $data);\n        $result = $response->json();\n\n        return $result['success'] ?? false;\n    }\n\n    public function message(): string {\n        return __('captcha.failed');\n    }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a function that sends a delayed message to a RabbitMQ queue using PHP and the PhpAmqpLib library. The function should establish a connection to RabbitMQ, declare a delayed exchange and queue, and publish a message with a specified delay time.\n\nFunction Description: The function `send_delayed_message` sends a message to a RabbitMQ queue with a specified delay. It uses a delayed exchange to achieve the delay functionality. The function handles the connection setup, exchange and queue declaration, message creation with delay headers, and cleanup of resources.\n\nInput:\n- `$message_content` [string] - The content of the message to be sent.\n- `$delay_ms` [int] - The delay time in milliseconds before the message is delivered to the queue.\n\nOutput: None. The function does not return any value but publishes the message to the specified RabbitMQ queue with the given delay.\n\nNote: The function assumes the existence of a `config.php` file containing the RabbitMQ connection parameters (HOST, PORT, USER, PASS, VHOST).",
    "Canonical_solution": "function send_delayed_message($message_content, $delay_ms)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare(\n        'delayed_exchange',\n        'x-delayed-message',\n        false,\n        true,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-delayed-type' => AMQPExchangeType::FANOUT])\n    );\n\n    $channel->queue_declare(\n        'delayed_queue',\n        false,\n        false,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-dead-letter-exchange' => 'delayed'])\n    );\n\n    $channel->queue_bind('delayed_queue', 'delayed_exchange');\n\n    $headers = new AMQPTable(['x-delay' => $delay_ms]);\n    $message = new AMQPMessage($message_content, ['delivery_mode' => 2]);\n    $message->set('application_headers', $headers);\n    $channel->basic_publish($message, 'delayed_exchange');\n\n    $channel->close();\n    $connection->close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "include 'config.php';\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $conn = new AMQPConnection(HOST, PORT, USER, PASS, VHOST);\n    $conn->connect();\n    $channel = new AMQPChannel($conn);\n\n    $exchange = new AMQPExchange($channel);\n    $exchange->setName('delayed_exchange');\n    $exchange->setType('x-delayed-message');\n    $exchange->setArguments(array('x-dead-letter-exchange' => ''));\n    $exchange->declare();\n\n    $queue = new AMQPQueue($channel);\n    $queue->setName('delayed_queue');\n    $queue->declare();\n\n    $queue->bind('delayed_exchange', '');\n\n    $headers = array('x-delay' => $delay_ms);\n    $exchange->publish($message_content, '', AMQP_MANDATORY, $headers);\n\n    $channel->close();\n    $conn->disconnect();\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a function that sends a message to a RabbitMQ queue using PHP and the PhpAmqpLib library.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them, publishes a message with persistent delivery mode, and then closes the connection. It handles errors gracefully by returning false if an exception occurs.\n\nInput:  \n- $messageBody: [string] - The content of the message to be sent  \n- $exchange: [string] - The name of the exchange (default: 'router')  \n- $queue: [string] - The name of the queue (default: 'msgs')  \n\nOutput:  \n- [bool] - Returns true if the message was successfully sent, false if an error occurred",
    "Canonical_solution": "function send_rabbitmq_message($messageBody, $exchange = 'router', $queue = 'msgs')\n{\n    include(__DIR__ . '/config.php');\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    try {\n        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $channel = $connection->channel();\n\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $message = new AMQPMessage($messageBody, array(\n            'content_type' => 'text/plain',\n            'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT\n        ));\n        \n        $channel->basic_publish($message, $exchange);\n        \n        $channel->close();\n        $connection->close();\n        \n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "function sendMessage($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPConnection([\n            'host' => 'localhost',\n            'port' => 5672,\n            'user' => 'guest',\n            'password' => 'guest'\n        ]);\n        $connection->connect();\n        $channel = new AMQPChannel($connection);\n\n        $exchangeObj = new AMQPExchange($channel);\n        $exchangeObj->setName($exchange);\n        $exchangeObj->setType('direct');\n        $exchangeObj->declare();\n\n        $queueObj = new AMQPQueue($channel);\n        $queueObj->setName($queue);\n        $queueObj->declare();\n\n        $exchangeObj->bind($queue, $queue);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => 2]);\n        $exchangeObj->publish($msg);\n\n        $connection->close();\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a PHP function that publishes messages to a RabbitMQ queue in batches, measuring the total execution time for sending all messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares an exchange and queue, then publishes a specified number of messages in configurable batch sizes. It handles connection blocking scenarios and returns the total execution time. A special 'quit' message is sent at the end to signal completion.\n\nInput:\n- $msg_count: [integer] - The total number of messages to publish\n- $batch_size: [integer] - The number of messages to send in each batch\n- $host: [string] - RabbitMQ server hostname\n- $port: [integer] - RabbitMQ server port\n- $user: [string] - RabbitMQ username\n- $pass: [string] - RabbitMQ password\n- $vhost: [string] - RabbitMQ virtual host\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages",
    "Canonical_solution": "function publish_messages($msg_count, $batch_size, $host, $port, $user, $pass, $vhost)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Exception\\AMQPConnectionBlockedException;\n\n    $exchange = 'bench_exchange';\n    $queue = 'bench_queue';\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $messageBody = <<<EOT\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza\nEOT;\n\n    $message = new AMQPMessage($messageBody);\n    $time = microtime(true);\n\n    for ($i = 0; $i < $msg_count; $i++) {\n        $channel->batch_basic_publish($message, $exchange);\n\n        if ($i % $batch_size == 0) {\n            try {\n                $channel->publish_batch();\n            } catch (AMQPConnectionBlockedException $exception) {\n                do {\n                    sleep(10);\n                } while ($connection->isBlocked());\n                $channel->publish_batch();\n            }\n        }\n    }\n\n    $channel->publish_batch();\n    $channel->basic_publish(new AMQPMessage('quit'), $exchange);\n\n    $execution_time = microtime(true) - $time;\n    \n    $channel->close();\n    $connection->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "function publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost\n    ]);\n    try {\n        $connection->connect();\n        $channel = new AMQPChannel($connection);\n        $exchange = new AMQPExchange($channel);\n        $exchange->setName('my_exchange');\n        $exchange->setType(AMQP_EX_TYPE_DIRECT);\n        $exchange->setFlags(AMQP_DURABLE);\n        $queue = new AMQPQueue($channel);\n        $queue->setName('my_queue');\n        $queue->setFlags(AMQP_DURABLE);\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $batch_end = min($i + $batch_size, $msg_count);\n            for ($j = $i; $j < $batch_end; $j++) {\n                $exchange->publish(\"Message $j\");\n            }\n        }\n        $exchange->publish('quit');\n    } catch (Exception $e) {\n        return 0.0;\n    }\n    $end_time = microtime(true);\n    return $end_time - $start_time;\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Implement a PHP function that sends a message to a RabbitMQ queue using the PhpAmqpLib library. The function should handle connection establishment, message publishing, and resource cleanup.\n\nFunction Description: The function `send_rabbitmq_message` sends a given message to a predefined RabbitMQ queue. It establishes a connection to the RabbitMQ server, declares the necessary exchange and queue, publishes the message, and then closes the connection. The function returns a boolean indicating success or failure.\n\nInput:  \n- `$message_content` (string): The content of the message to be sent to the RabbitMQ queue.\n\nOutput:  \n- (bool): Returns `true` if the message was successfully sent, `false` if an error occurred.",
    "Canonical_solution": "function send_rabbitmq_message($message_content)\n{\n    include(__DIR__ . '/config.php');\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $exchange = 'basic_get_test';\n    $queue = 'basic_get_queue';\n\n    try {\n        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $channel = $connection->channel();\n\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $message = new AMQPMessage($message_content, array('content_type' => 'text/plain', 'delivery_mode' => 2));\n        $channel->basic_publish($message, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "function send_rabbitmq_message($message_content) {\n    $connection = new \\PhpAmqpLib\\Connection\\AMQPConnection([\n        'host' => 'localhost',\n        'port' => 5672,\n        'login' => 'guest',\n        'password' => 'guest',\n        'vhost' => '/'\n    ]);\n    try {\n        $connection->connect();\n        $channel = new \\PhpAmqpLib\\Channel\\AMQPChannel($connection);\n        $channel->exchange_declare('task_exchange', 'direct', true, false, false);\n        $channel->queue_declare('task_queue', false, true, false, false);\n        $channel->queue_bind('task_queue', 'task_exchange', 'task_key');\n        $channel->basic_publish(new \\PhpAmqpLib\\Message\\AMQPMessage($message_content), 'task_exchange', 'task_key');\n        $connection->disconnect();\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Redis wrapper class in PHP that provides a simplified interface for connecting to and interacting with a Redis server, including connection management, basic operations, and error handling.\n\nClass Description: The cls_redis class is a singleton-style wrapper for PHP's Redis extension that manages Redis connections, provides common Redis operations, and handles connection errors gracefully. It supports multiple connection configurations, automatic reconnection on failure, and key prefixing.\n\nAttributes:\n\nAttribute1: protected static $redis - Redis - Singleton Redis instance (deprecated)\nAttribute2: protected static $configs - array - Stores Redis connection configurations\nAttribute3: private static $links - array - Maintains active Redis connections\nAttribute4: private static $link_name - string - Current connection name (default 'default')\nAttribute5: public static $prefix - string - Default key prefix ('phpspider')\nAttribute6: public static $error - string - Stores last error message\n\nMethods:\n\nMethod1: init() -> Redis|false - Initializes and returns a Redis connection instance\nMethod2: set(string $key, mixed $value, int $expire = 0) -> bool|null - Stores a value in Redis with optional expiration\nMethod3: get(string $key) -> mixed|null - Retrieves a value from Redis by key\nMethod4: clear_link() -> void - Closes all active Redis connections\nMethod5: _get_default_config() -> array - Retrieves default Redis configuration from global settings",
    "Canonical_solution": "class cls_redis\n{\n    protected static $redis = NULL;\n    protected static $configs = array();\n    private static $links = array();\n    private static $link_name = 'default';\n    public static $prefix = \"phpspider\";\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!extension_loaded(\"redis\"))\n        {\n            self::$error = \"The redis extension was not found\";\n            return false;\n        }\n\n        $config = self::$link_name == 'default' ? self::_get_default_config() : self::$configs[self::$link_name];\n\n        if (empty(self::$links[self::$link_name]))\n        {\n            self::$links[self::$link_name] = new Redis();\n            if (!self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']))\n            {\n                self::$error = \"Unable to connect to redis server\\nPlease check the configuration file config/inc_config.php\";\n                unset(self::$links[self::$link_name]);\n                return false;\n            }\n\n            if ($config['pass'])\n            {\n                if (!self::$links[self::$link_name]->auth($config['pass'])) \n                {\n                    self::$error = \"Redis Server authentication failed\\nPlease check the configuration file config/inc_config.php\";\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            $prefix = empty($config['prefix']) ? self::$prefix : $config['prefix'];\n            self::$links[self::$link_name]->setOption(Redis::OPT_PREFIX, $prefix . \":\");\n            self::$links[self::$link_name]->setOption(Redis::OPT_READ_TIMEOUT, -1);\n            self::$links[self::$link_name]->select($config['db']);\n        }\n\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                if ($expire > 0)\n                {\n                    return self::$links[self::$link_name]->setex($key, $expire, $value);\n                }\n                else\n                {\n                    return self::$links[self::$link_name]->set($key, $value);\n                }\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::set($key, $value, $expire);\n            }\n        }\n        return NULL;\n    }\n\n    public static function get($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->get($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::get($key);\n            }\n        }\n        return NULL;\n    }\n\n    public static function clear_link()\n    {\n        if(self::$links) \n        {\n            foreach(self::$links as $k=>$v)\n            {\n                $v->close();\n                unset(self::$links[$k]);\n            }\n        }\n    }\n\n    protected static function _get_default_config()\n    {\n        if (empty(self::$configs['default']))\n        {\n            if (!is_array($GLOBALS['config']['redis']))\n            {\n                exit('cls_redis.php _get_default_config()' . '\u6ca1\u6709redis\u914d\u7f6e');\n            }\n            self::$configs['default'] = $GLOBALS['config']['redis'];\n        }\n        return self::$configs['default'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "wrong_result": "class cls_redis {\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    private static function _get_default_config() {\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'timeout' => 2.5,\n            'persistent' => false\n        ];\n    }\n\n    public static function init($link_name = 'default') {\n        self::$link_name = $link_name;\n        if (isset(self::$links[$link_name])) {\n            return self::$links[$link_name];\n        }\n\n        $config = self::get_config($link_name);\n        if (!$config) {\n            self::$error = 'Config not found for link: ' . $link_name;\n            return false;\n        }\n\n        $redis = new Redis();\n        try {\n            $connected = $redis->connect($config['host'], $config['port'], $config['timeout']);\n            if (!$connected) {\n                self::$error = 'Failed to connect to Redis for link: ' . $link_name;\n                return false;\n            }\n        } catch (Exception $e) {\n            self::$error = 'Redis connection error: ' . $e->getMessage();\n            return false;\n        }\n\n        self::$links[$link_name] = $redis;\n        return $redis;\n    }\n\n    private static function get_config($link_name) {\n        if (isset(self::$configs[$link_name])) {\n            return self::$configs[$link_name];\n        }\n        $default_config = self::_get_default_config();\n        self::$configs[$link_name] = $default_config;\n        return $default_config;\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return false;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            $result = $redis->set($key, $value);\n            if ($expire > 0) {\n                $redis->expire($key, $expire);\n            }\n            return $result;\n        } catch (Exception $e) {\n            self::$error = 'Redis set error: ' . $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = 'Redis get error: ' . $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->disconnect();\n        }\n        self::$links = [];\n    }\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a PHP class that implements a Redis client connection using TCP sockets and the phpiredis extension for efficient communication with a Redis server.\n\nClass Description: PhpiredisSocketConnection is a Redis client connection class that handles TCP socket communication with a Redis server. It manages socket creation, connection, data transmission, and response parsing using the phpiredis extension for optimal performance.\n\nAttributes:\n- reader: [resource] - The phpiredis reader resource used for parsing Redis protocol responses\n- parameters: [ParametersInterface] - Connection parameters including host, port, timeout, etc.\n\nMethods:\n- __construct(ParametersInterface $parameters) -> [void] - Initializes the connection and verifies required extensions\n- __destruct() -> [void] - Cleans up resources when the object is destroyed\n- assertExtensions() -> [void] - Verifies required PHP extensions are loaded\n- createReader() -> [resource] - Creates and configures a phpiredis reader resource\n- getStatusHandler() -> [callable] - Returns the handler for status responses\n- getErrorHandler() -> [callable] - Returns the handler for error responses\n- createResource() -> [resource] - Creates and connects the socket resource\n- connectWithTimeout(resource $socket, string $address, ParametersInterface $parameters) -> [void] - Establishes connection with timeout handling\n- write(string $buffer) -> [void] - Writes data to the socket connection\n- read() -> [mixed] - Reads and parses response from the server\n- writeRequest(CommandInterface $command) -> [void] - Formats and writes a Redis command to the server",
    "Canonical_solution": "use Predis\\Command\\CommandInterface;\nuse Predis\\NotSupportedException;\nuse Predis\\Response\\Error as ErrorResponse;\nuse Predis\\Response\\ErrorInterface as ErrorResponseInterface;\nuse Predis\\Response\\Status as StatusResponse;\n\nclass PhpiredisSocketConnection extends AbstractConnection\n{\n    private $reader;\n\n    public function __construct(ParametersInterface $parameters)\n    {\n        $this->assertExtensions();\n        parent::__construct($parameters);\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct()\n    {\n        parent::__destruct();\n        phpiredis_reader_destroy($this->reader);\n    }\n\n    protected function assertExtensions()\n    {\n        if (!extension_loaded('sockets')) {\n            throw new NotSupportedException(\n                'The \"sockets\" extension is required by this connection backend.'\n            );\n        }\n\n        if (!extension_loaded('phpiredis')) {\n            throw new NotSupportedException(\n                'The \"phpiredis\" extension is required by this connection backend.'\n            );\n        }\n    }\n\n    private function createReader()\n    {\n        $reader = phpiredis_reader_create();\n        phpiredis_reader_set_status_handler($reader, $this->getStatusHandler());\n        phpiredis_reader_set_error_handler($reader, $this->getErrorHandler());\n        return $reader;\n    }\n\n    protected function getStatusHandler()\n    {\n        static $statusHandler;\n\n        if (!$statusHandler) {\n            $statusHandler = function ($payload) {\n                return StatusResponse::get($payload);\n            };\n        }\n\n        return $statusHandler;\n    }\n\n    protected function getErrorHandler()\n    {\n        static $errorHandler;\n\n        if (!$errorHandler) {\n            $errorHandler = function ($errorMessage) {\n                return new ErrorResponse($errorMessage);\n            };\n        }\n\n        return $errorHandler;\n    }\n\n    protected function createResource()\n    {\n        $parameters = $this->parameters;\n\n        if ($parameters->scheme === 'unix') {\n            $address = $parameters->path;\n            $domain = AF_UNIX;\n            $protocol = 0;\n        } else {\n            if (false === $address = self::getAddress($parameters)) {\n                $this->onConnectionError(\"Cannot resolve the address of '$parameters->host'.\");\n            }\n\n            $domain = filter_var($address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) ? AF_INET6 : AF_INET;\n            $protocol = SOL_TCP;\n        }\n\n        if (false === $socket = @socket_create($domain, SOCK_STREAM, $protocol)) {\n            $this->emitSocketError();\n        }\n\n        $this->setSocketOptions($socket, $parameters);\n        $this->connectWithTimeout($socket, $address, $parameters);\n\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters)\n    {\n        socket_set_nonblock($socket);\n\n        if (@socket_connect($socket, $address, (int) $parameters->port) === false) {\n            $error = socket_last_error();\n            if ($error != SOCKET_EINPROGRESS && $error != SOCKET_EALREADY) {\n                $this->emitSocketError();\n            }\n        }\n\n        socket_set_block($socket);\n\n        $null = null;\n        $selectable = array($socket);\n\n        $timeout = (isset($parameters->timeout) ? (float) $parameters->timeout : 5.0);\n        $timeoutSecs = floor($timeout);\n        $timeoutUSecs = ($timeout - $timeoutSecs) * 1000000;\n\n        $selected = socket_select($selectable, $selectable, $null, $timeoutSecs, $timeoutUSecs);\n\n        if ($selected === 2) {\n            $this->onConnectionError('Connection refused.', SOCKET_ECONNREFUSED);\n        }\n\n        if ($selected === 0) {\n            $this->onConnectionError('Connection timed out.', SOCKET_ETIMEDOUT);\n        }\n\n        if ($selected === false) {\n            $this->emitSocketError();\n        }\n    }\n\n    protected function write($buffer)\n    {\n        $socket = $this->getResource();\n\n        while (($length = strlen($buffer)) > 0) {\n            $written = socket_write($socket, $buffer, $length);\n\n            if ($length === $written) {\n                return;\n            }\n\n            if ($written === false) {\n                $this->onConnectionError('Error while writing bytes to the server.');\n            }\n\n            $buffer = substr($buffer, $written);\n        }\n    }\n\n    public function read()\n    {\n        $socket = $this->getResource();\n        $reader = $this->reader;\n\n        while (PHPIREDIS_READER_STATE_INCOMPLETE === $state = phpiredis_reader_get_state($reader)) {\n            if (@socket_recv($socket, $buffer, 4096, 0) === false || $buffer === '' || $buffer === null) {\n                $this->emitSocketError();\n            }\n\n            phpiredis_reader_feed($reader, $buffer);\n        }\n\n        if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n            return phpiredis_reader_get_reply($reader);\n        } else {\n            $this->onProtocolError(phpiredis_reader_get_error($reader));\n            return;\n        }\n    }\n\n    public function writeRequest(CommandInterface $command)\n    {\n        $arguments = $command->getArguments();\n        array_unshift($arguments, $command->getId());\n        $this->write(phpiredis_format_command($arguments));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "class PhpiredisSocketConnection {\n    private $reader;\n    private $socket;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->parameters = $parameters;\n        $this->assertExtensions();\n        $this->reader = $this->createReader();\n        $this->socket = $this->createResource();\n        $this->connectWithTimeout($this->socket, $this->parameters->getAddress(), $this->parameters);\n    }\n\n    public function __destruct() {\n        if ($this->socket && is_resource($this->socket)) {\n            fclose($this->socket);\n        }\n        if ($this->reader && is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new RuntimeException('The phpiredis extension is required.');\n        }\n    }\n\n    private function createReader(): resource {\n        $reader = phpiredis_reader_create();\n        phpiredis_reader_set_status_handler($reader, $this->getStatusHandler());\n        phpiredis_reader_set_error_handler($reader, $this->getErrorHandler());\n        return $reader;\n    }\n\n    private function getStatusHandler(): callable {\n        return function($status) {\n            return $status;\n        };\n    }\n\n    private function getErrorHandler(): callable {\n        return function($error) {\n            throw new RedisException($error);\n        };\n    }\n\n    private function createResource(): resource {\n        $host = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $socket = stream_socket_client(\"tcp://$host:$port\", $errno, $errstr, 0, STREAM_CLIENT_CONNECT);\n        if (!$socket) {\n            throw new RuntimeException(\"Failed to create socket: $errstr\");\n        }\n        return $socket;\n    }\n\n    private function connectWithTimeout(resource $socket, string $address, ParametersInterface $parameters) {\n        stream_set_timeout($socket, $parameters->getTimeout());\n        $connected = stream_socket_connect($socket, $address);\n        if (!$connected) {\n            throw new RuntimeException(\"Connection failed.\");\n        }\n    }\n\n    public function write(string $buffer): void {\n        fwrite($this->socket, $buffer);\n    }\n\n    public function read(): mixed {\n        $result = phpiredis_reader_read($this->reader, $this->socket);\n        return $result;\n    }\n\n    public function writeRequest(CommandInterface $command): void {\n        $buffer = $command->getBuffer();\n        $this->write($buffer);\n    }\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Implement a Radius class in PHP that handles RADIUS protocol communication for authentication and accounting purposes using UDP sockets.\n\nClass Description: The Radius class provides functionality to communicate with a RADIUS server for authentication (Access-Request) and accounting operations. It handles packet construction, socket communication, and response parsing according to RADIUS protocol standards.\n\nAttributes:\n\n_ip_radius_server: [string] - IP address of the RADIUS server\n_shared_secret: [string] - Shared secret for communication with RADIUS server\n_radius_suffix: [string] - Suffix to append to usernames\n_udp_timeout: [int] - Timeout for UDP operations in seconds\n_authentication_port: [int] - Port for authentication requests (default 1812)\n_accounting_port: [int] - Port for accounting requests (default 1813)\n_nas_ip_address: [string] - NAS IP address to send in requests\n_nas_port: [int] - NAS port to send in requests\n_encrypted_password: [string] - Encrypted password for authentication\n_user_ip_address: [string] - User's IP address\n_request_authenticator: [string] - Request authenticator value\n_response_authenticator: [string] - Response authenticator value\n_username: [string] - Username for authentication\n_password: [string] - Password for authentication\n_identifier_to_send: [int] - Packet identifier to send\n_identifier_received: [int] - Received packet identifier\n_radius_packet_to_send: [int] - RADIUS packet code to send\n_radius_packet_received: [int] - Received RADIUS packet code\n_attributes_to_send: [array] - Attributes to include in outgoing packets\n_attributes_received: [array] - Attributes received from server\n_socket_to_server: [resource] - Socket connection to server\n_debug_mode: [bool] - Debug mode flag\ndebug_text: [array] - Debug messages\n_attributes_info: [array] - RADIUS attribute information\n_radius_packet_info: [array] - RADIUS packet type information\n_last_error_code: [int] - Last error code\n_last_error_message: [string] - Last error message\n\nMethods:\n\n__construct: [function]($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) -> [void] - Initializes the Radius object with server details and default values\n\nAccessRequest: [function]($username = '', $password = '', $udp_timeout = 0, $state = NULL) -> [bool] - Sends an Access-Request to the RADIUS server and returns true if authentication is successful (Access-Accept received)\n\nSetIpRadiusServer: [function]($ip_radius_server) -> [void] - Sets the RADIUS server IP address\n\nSetSharedSecret: [function]($shared_secret) -> [void] - Sets the shared secret for RADIUS communication\n\nSetAuthenticationPort: [function]($authentication_port) -> [void] - Sets the authentication port\n\nSetAccountingPort: [function]($accounting_port) -> [void] - Sets the accounting port\n\nSetRadiusSuffix: [function]($radius_suffix) -> [void] - Sets the username suffix\n\nSetUdpTimeout: [function]($udp_timeout) -> [void] - Sets the UDP timeout value\n\nSetUsername: [function]($username = '') -> [void] - Sets the username for authentication\n\nSetPassword: [function]($password = '') -> [void] - Sets the password for authentication\n\nSetNasIpAddress: [function]($nas_ip_address = '') -> [void] - Sets the NAS IP address\n\nSetNasPort: [function]($nas_port = 0) -> [void] - Sets the NAS port\n\nSetPacketCodeToSend: [function]($packet_code) -> [void] - Sets the RADIUS packet code to send\n\nSetAttribute: [function]($attribute_type, $attribute_value) -> [void] - Adds an attribute to the outgoing packet\n\nGetNextIdentifier: [function]() -> [int] - Returns the next packet identifier\n\nGenerateRequestAuthenticator: [function]() -> [void] - Generates a new request authenticator\n\nDecodeAttribute: [function]($attribute_raw_value, $attribute_type) -> [mixed] - Decodes a received attribute value\n\nClearLastError: [function]() -> [void] - Clears the last error information\n\nClearDataToSend: [function]() -> [void] - Clears all data to be sent\n\nClearDataReceived: [function]() -> [void] - Clears all received data",
    "Canonical_solution": "class Radius\n{\n    var $_ip_radius_server;\n    var $_shared_secret;\n    var $_radius_suffix;\n    var $_udp_timeout;\n    var $_authentication_port;\n    var $_accounting_port;\n    var $_nas_ip_address;\n    var $_nas_port;\n    var $_encrypted_password;\n    var $_user_ip_address;\n    var $_request_authenticator;\n    var $_response_authenticator;\n    var $_username;\n    var $_password;\n    var $_identifier_to_send;\n    var $_identifier_received;\n    var $_radius_packet_to_send;\n    var $_radius_packet_received;\n    var $_attributes_to_send;\n    var $_attributes_received;\n    var $_socket_to_server;\n    var $_debug_mode;\n    var $debug_text = [];\n    var $_attributes_info;\n    var $_radius_packet_info;\n    var $_last_error_code;\n    var $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813)\n    {\n        $this->_radius_packet_info[1] = 'Access-Request';\n        $this->_radius_packet_info[2] = 'Access-Accept';\n        $this->_radius_packet_info[3] = 'Access-Reject';\n        $this->_radius_packet_info[4] = 'Accounting-Request';\n        $this->_radius_packet_info[5] = 'Accounting-Response';\n        $this->_radius_packet_info[11] = 'Access-Challenge';\n        $this->_radius_packet_info[12] = 'Status-Server (experimental)';\n        $this->_radius_packet_info[13] = 'Status-Client (experimental)';\n        $this->_radius_packet_info[255] = 'Reserved';\n\n        $this->_identifier_to_send = 0;\n        $this->_user_ip_address = (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '0.0.0.0');\n\n        $this->GenerateRequestAuthenticator();\n        $this->SetIpRadiusServer($ip_radius_server);\n        $this->SetSharedSecret($shared_secret);\n        $this->SetAuthenticationPort($authentication_port);\n        $this->SetAccountingPort($accounting_port);\n        $this->SetRadiusSuffix($radius_suffix);\n        $this->SetUdpTimeout($udp_timeout);\n        $this->SetUsername();\n        $this->SetPassword();\n        $this->SetNasIpAddress();\n        $this->SetNasPort();\n\n        $this->ClearLastError();\n        $this->ClearDataToSend();\n        $this->ClearDataReceived();\n    }\n\n    function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL)\n    {\n        $this->ClearDataReceived();\n        $this->ClearLastError();\n\n        $this->SetPacketCodeToSend(1);\n\n        if (0 < strlen($username))\n        {\n            $this->SetUsername($username);\n        }\n\n        if (0 < strlen($password))\n        {\n            $this->SetPassword($password);\n        }\n\n        if ($state !== NULL)\n        {\n            $this->SetAttribute(24, $state);\n        }\n        else\n        {\n            $this->SetAttribute(6, 1);\n        }\n\n        if (intval($udp_timeout) > 0)\n        {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n\n        $attributes_content = '';\n        $attribute_count1 = count((array)$this->_attributes_to_send);\n        for ($attributes_loop = 0; $attributes_loop < $attribute_count1; $attributes_loop++)\n        {\n            $attributes_content .= $this->_attributes_to_send[$attributes_loop];\n        }\n\n        $packet_length  = 4;\n        $packet_length += strlen($this->_request_authenticator);\n        $packet_length += strlen($attributes_content);\n\n        $packet_data  = chr($this->_radius_packet_to_send);\n        $packet_data .= chr($this->GetNextIdentifier());\n        $packet_data .= chr(intval($packet_length / 256));\n        $packet_data .= chr(intval($packet_length % 256));\n        $packet_data .= $this->_request_authenticator;\n        $packet_data .= $attributes_content;\n\n        $_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, 17);\n\n        if ($_socket_to_server === FALSE)\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_connect($_socket_to_server, $this->_ip_radius_server, $this->_authentication_port))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_write($_socket_to_server, $packet_data, $packet_length))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        else\n        {\n            $read_socket_array   = array($_socket_to_server);\n            $write_socket_array  = NULL;\n            $except_socket_array = NULL;\n\n            $received_packet = chr(0);\n\n            if (!(FALSE === socket_select($read_socket_array, $write_socket_array, $except_socket_array, $this->_udp_timeout)))\n            {\n                if (in_array($_socket_to_server, $read_socket_array))\n                {\n                    if (FALSE === ($received_packet = @socket_read($_socket_to_server, 1024)))\n                    {\n                        $received_packet = chr(0);\n                        $this->_last_error_code    = socket_last_error();\n                        $this->_last_error_message = socket_strerror($this->_last_error_code);\n                    }\n                    else\n                    {\n                        socket_close($_socket_to_server);\n                    }\n                }\n            }\n            else\n            {\n                socket_close($_socket_to_server);\n            }\n        }\n\n        $this->_radius_packet_received = intval(ord(substr($received_packet, 0, 1)));\n\n        if ($this->_radius_packet_received > 0)\n        {\n            $this->_identifier_received = intval(ord(substr($received_packet, 1, 1)));\n            $packet_length = (intval(ord(substr($received_packet, 2, 1))) * 256) + (intval(ord(substr($received_packet, 3, 1)));\n            $this->_response_authenticator = substr($received_packet, 4, 16);\n            $attributes_content = substr($received_packet, 20, ($packet_length - 4 - 16));\n            while (strlen($attributes_content) > 2)\n            {\n                $attribute_type = intval(ord(substr($attributes_content, 0, 1)));\n                $attribute_length = intval(ord(substr($attributes_content, 1, 1)));\n                $attribute_raw_value = substr($attributes_content, 2, $attribute_length - 2);\n                $attributes_content = substr($attributes_content, $attribute_length);\n\n                $attribute_value = $this->DecodeAttribute($attribute_raw_value, $attribute_type);\n\n                $this->_attributes_received[] = array($attribute_type, $attribute_value);\n            }\n        }\n\n        return (2 == ($this->_radius_packet_received));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $_debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->_debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        $this->SetUdpTimeout($udp_timeout);\n        $this->SetRadiusSuffix($this->_radius_suffix);\n        $this->SetNasIpAddress($this->_nas_ip_address);\n        $this->SetNasPort($this->_nas_port);\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->ClearDataToSend();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix);\n        $this->SetAttribute(2, $this->_encrypted_password);\n        $this->SetAttribute(4, $this->_nas_ip_address);\n        $this->SetAttribute(5, $this->_nas_port);\n        $this->GenerateRequestAuthenticator();\n        $packet = $this->BuildRadiusPacket();\n        if ($packet === false) {\n            $this->ClearLastError();\n            return false;\n        }\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->ClearLastError();\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_REUSEADDR, 1);\n        socket_set_timeout($this->_socket_to_server, $this->_udp_timeout);\n        $sent = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $this->_authentication_port);\n        if ($sent === false) {\n            $this->ClearLastError();\n            return false;\n        }\n        $response = $this->ReceiveResponse();\n        if ($response === false) {\n            $this->ClearLastError();\n            return false;\n        }\n        $this->ParseRadiusPacket($response);\n        if ($this->_radius_packet_received === 2) { // Access-Accept\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[] = ['type' => $attribute_type, 'value' => $attribute_value];\n    }\n\n    public function GetNextIdentifier() {\n        return ++$this->_identifier_to_send;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $code = $this->_radius_packet_to_send;\n        $identifier = $this->GetNextIdentifier();\n        $attributes = '';\n        foreach ($this->_attributes_to_send as $attr) {\n            $attributes .= pack('Cn', $attr['type'], strlen($attr['value'])) . $attr['value'];\n        }\n        $length = 1 + 1 + 2 + 16 + strlen($attributes);\n        $data_for_hmac = pack('CCn', $code, $identifier, $length) . $attributes;\n        $this->_request_authenticator = hash_hmac('sha1', $data_for_hmac, $this->_shared_secret, true);\n    }\n\n    public function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n                return substr($attribute_raw_value, 0, strlen($attribute_raw_value) - 2);\n            case 2: // Password\n                return substr($attribute_raw_value, 0, strlen($attribute_raw_value) - 2);\n            case 4: // NAS-IP-Address\n                return long2ip(substr($attribute_raw_value, 0, 4));\n            case 5: // NAS-Port\n                return unpack('n', substr($attribute_raw_value, 0, 2))[1];\n            default:\n                return substr($attribute_raw_value, 0, strlen($attribute_raw_value) - 2);\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildRadiusPacket() {\n        $code = $this->_radius_packet_to_send;\n        $identifier = $this->GetNextIdentifier();\n        $attributes = '';\n        foreach ($this->_attributes_to_send as $attr) {\n            $attributes .= pack('Cn', $attr['type'], strlen($attr['value'])) . $attr['value'];\n        }\n        $length = 1 + 1 + 2 + 16 + strlen($attributes);\n        $data_for_hmac = pack('CCn', $code, $identifier, $length) . $attributes;\n        $authenticator = hash_hmac('sha1', $data_for_hmac, $this->_shared_secret, true);\n        $packet = pack('CCn', $code, $identifier, $length) . $authenticator . $attributes;\n        return $packet;\n    }\n\n    private function ReceiveResponse() {\n        $response = '';\n        $response_length = 0;\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_REUSEADDR, 1);\n        socket_set_timeout($this->_socket_to_server, $this->_udp_timeout);\n        $response = socket_read($this->_socket_to_server, 65535);\n        if ($response === false || strlen($response) === 0) {\n            return false;\n        }\n        return $response;\n    }\n\n    private function ParseRadiusPacket($response) {\n        $code = ord($response[0]);\n        $identifier = ord($response[1]);\n        $length = unpack('n', substr($response, 2, 2))[1];\n        $authenticator = substr($response, 4, 16);\n        $attributes = substr($response, 20, $length - 20);\n        $this->_radius_packet_received = $code;\n        $this->_identifier_received = $identifier;\n        $this->_response_authenticator = $authenticator;\n        $this->_attributes_received = [];\n        $offset = 0;\n        while ($offset < strlen($attributes)) {\n            $type = ord($attributes[$offset]);\n            $length = unpack('n', substr($attributes, $offset + 1, 2))[1];\n            $value = substr($attributes, $offset + 3, $length - 2);\n            $this->_attributes_received[] = ['type' => $type, 'value' => $value];\n            $offset += 3 + $length;\n        }\n    }\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Symfony's HTTP client components to handle HTTP requests and responses.\n\nClass Description: The HttpClientKernel class is an implementation of HttpKernelInterface that provides HTTP client capabilities using Symfony's HTTP client components. It handles HTTP requests by sending them to a remote server and returning the response, supporting various request methods, headers, cookies, and body content (including form data and file uploads).\n\nAttributes:\n- client: [HttpClientInterface] - The Symfony HTTP client instance used to send requests\n\nMethods:\n- __construct(?HttpClientInterface $client = null) -> [void] - Initializes the HTTP client. If no client is provided, creates a default HttpClient instance. Throws an exception if the HttpClient component is not installed.\n- handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true) -> [Response] - Processes an HTTP request by sending it to the target server and returns the response. Handles headers, cookies, and request body preparation.\n- getBody(Request $request) -> [?AbstractPart] - Prepares the request body content. Returns null for GET/HEAD requests, a TextPart for raw content, or a FormDataPart for form data including file uploads. Throws an exception if the Mime component is not installed when needed.\n- getHeaders(Request $request) -> [array] - Extracts and formats headers from the request object, including cookies, into an array suitable for the HTTP client.",
    "Canonical_solution": "use Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client && !class_exists(HttpClient::class)) {\n            throw new \\LogicException(sprintf('You cannot use \"%s\" as the HttpClient component is not installed. Try running \"composer require symfony/http-client\".', __CLASS__));\n        }\n\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $headers = $this->getHeaders($request);\n        $body = '';\n        if (null !== $part = $this->getBody($request)) {\n            $headers = array_merge($headers, $part->getPreparedHeaders()->toArray());\n            $body = $part->bodyToIterable();\n        }\n        $response = $this->client->request($request->getMethod(), $request->getUri(), [\n            'headers' => $headers,\n            'body' => $body,\n        ] + $request->attributes->get('http_client_options', []));\n\n        $response = new Response($response->getContent(!$catch), $response->getStatusCode(), $response->getHeaders(!$catch));\n\n        $response->headers->remove('X-Body-File');\n        $response->headers->remove('X-Body-Eval');\n        $response->headers->remove('X-Content-Digest');\n\n        $response->headers = new class($response->headers->all()) extends ResponseHeaderBag {\n            protected function computeCacheControlValue(): string\n            {\n                return $this->getCacheControlHeader();\n            }\n        };\n\n        return $response;\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        if (!class_exists(AbstractPart::class)) {\n            throw new \\LogicException('You cannot pass non-empty bodies as the Mime component is not installed. Try running \"composer require symfony/mime\".');\n        }\n\n        if ($content = $request->getContent()) {\n            return new TextPart($content, 'utf-8', 'plain', '8bit');\n        }\n\n        $fields = $request->request->all();\n        foreach ($request->files->all() as $name => $file) {\n            $fields[$name] = DataPart::fromPath($file->getPathname(), $file->getClientOriginalName(), $file->getClientMimeType());\n        }\n\n        return new FormDataPart($fields);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = [];\n        foreach ($request->headers as $key => $value) {\n            $headers[$key] = $value;\n        }\n        $cookies = [];\n        foreach ($request->cookies->all() as $name => $value) {\n            $cookies[] = $name.'='.$value;\n        }\n        if ($cookies) {\n            $headers['cookie'] = implode('; ', $cookies);\n        }\n\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 134,
    "wrong_result": "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\HttpFoundation\\HeaderBag;\nuse Symfony\\Component\\HttpFoundation\\CookiesBag;\nuse Symfony\\Component\\HttpFoundation\\ParameterBag;\nuse Symfony\\Component\\HttpClient\\Client;\nuse Symfony\\Component\\HttpClient\\AbstractPart;\nuse Symfony\\Component\\HttpClient\\TextPart;\nuse Symfony\\Component\\HttpClient\\FormDataPart;\n\nclass HttpClientKernel implements HttpKernelInterface {\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null) {\n        if ($client === null) {\n            if (!class_exists('Symfony\\Component\\HttpClient\\Client')) {\n                throw new \\LogicException('The HttpClient component is required.');\n            }\n            $this->client = new Client();\n        } else {\n            $this->client = $client;\n        }\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response {\n        $uri = $request->getUri();\n        $method = $request->getMethod();\n        $headers = $this->getHeaders($request);\n        $body = $this->getBody($request);\n\n        $response = $this->client->request($method, $uri, [\n            'headers' => $headers,\n            'body' => $body,\n        ]);\n\n        return $response;\n    }\n\n    private function getBody(Request $request): ?AbstractPart {\n        $method = $request->getMethod();\n        if (in_array($method, ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $contentType = $request->headers->get('Content-Type', '');\n        if (str_contains($contentType, 'multipart/form-data')) {\n            if (!class_exists('Symfony\\Component\\Mime\\Encoder\\Encoder')) {\n                throw new \\LogicException('The Mime component is required to handle form data.');\n            }\n            $formData = $request->request->all();\n            $files = $request->files->all();\n            return new FormDataPart($formData, $files);\n        } else {\n            return new TextPart($request->getContent());\n        }\n    }\n\n    private function getHeaders(Request $request): array {\n        $headers = [];\n        foreach ($request->headers->keys() as $name) {\n            $headers[] = [$name, $request->headers->get($name)];\n        }\n        $cookies = $request->cookies->all();\n        if (!empty($cookies)) {\n            $headers[] = ['Cookie', http_build_query($cookies, '', '; ')];\n        }\n        return $headers;\n    }\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a MySQL proxy class that handles communication between a client and MySQL server using Swoole's coroutine client for TCP/UDP communication, implementing authentication and packet handling.\n\nClass Description: MysqlProxy - A class that manages MySQL protocol communication between client and server, handling connection establishment, authentication, packet processing, and error handling.\n\nAttributes:\n\nisDuplex: [bool] - Indicates whether duplex communication is supported by Swoole version\nserver: [swoole_server] - Swoole server instance\nserverFd: [int] - File descriptor of the server connection\ncharset: [string] - Character set for MySQL communication\naccount: [array] - MySQL account credentials\nauth: [bool] - Authentication status flag\nchan: [Swoole\\Coroutine\\Channel] - Coroutine channel for communication\nserverPublicKey: [string] - Server's public key for authentication\nsalt: [array] - Salt used for password encryption\nconnected: [bool] - Connection status flag\ntimeout: [float] - Connection timeout value\nmysqlClient: [Swoole\\Coroutine\\Channel] - Channel for MySQL client communication\nmysqlServer: [HandshakePacket] - Server handshake information\nclient: [Swoole\\Coroutine\\Client] - Coroutine client instance\n\nMethods:\n\n__construct: [function](swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) -> [void] - Initializes the proxy with server, file descriptor and channel\nconnect: [function](string $host, int $port, float $timeout = 0.1, int $tryStep = 0) -> [Client|bool] - Establishes connection to MySQL server with retry logic\nonClientReceive: [function](Swoole\\Coroutine\\Client $cli, string $data) -> [void] - Handles incoming data from MySQL server\nprocessAuth: [function](string $pluginName) -> [array] - Processes authentication based on plugin type\nsend: [function](...$data) -> [bool] - Sends data to MySQL server\nrecv: [function](&$remain) -> [mixed] - Receives data from MySQL server\nonClientClose: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client connection closure\nonClientError: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client errors",
    "Canonical_solution": "use Swoole\\Coroutine\\Client;\nuse SMProxy\\MysqlPacket\\AuthPacket;\nuse SMProxy\\MysqlPacket\\BinaryPacket;\nuse SMProxy\\MysqlPacket\\ErrorPacket;\nuse SMProxy\\MysqlPacket\\HandshakePacket;\nuse SMProxy\\MysqlPacket\\MySQLMessage;\nuse SMProxy\\MysqlPacket\\OkPacket;\nuse SMProxy\\MysqlPacket\\Util\\Capabilities;\nuse SMProxy\\MysqlPacket\\Util\\CharsetUtil;\nuse SMProxy\\MysqlPacket\\Util\\SecurityUtil;\nuse SMProxy\\MysqlPool\\MySQLException;\nuse SMProxy\\MysqlPool\\MySQLPool;\n\nclass MysqlProxy\n{\n    private $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth = false;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected = false;\n    public $timeout = 0.1;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(\\swoole_server $server, int $fd, \\Swoole\\Coroutine\\Channel $chan)\n    {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->client = new Client(CONFIG['server']['swoole_client_sock_setting']['sock_type'] ?? SWOOLE_SOCK_TCP);\n        $this->client->set(CONFIG['server']['swoole_client_setting'] ?? []);\n        $this->client->set(packageLengthSetting());\n        $this->isDuplex = version_compare(SWOOLE_VERSION, '4.2.13', '>=');\n        if (!$this->isDuplex) {\n            $this->mysqlClient = new Channel(1);\n        }\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0)\n    {\n        $this->timeout = $timeout;\n        if (!$this->client->connect($host, $port, $timeout)) {\n            if ($tryStep < 3) {\n                $this->client->close();\n                return $this->connect($host, $port, $timeout, ++$tryStep);\n            } else {\n                $this->onClientError($this->client);\n                return false;\n            }\n        } else {\n            if (!$this->isDuplex) {\n                $this->mysqlClient->push($this->client);\n            }\n            self::go(function () {\n                $remain = '';\n                while (true) {\n                    $data = $this->recv($remain);\n                    if ($data === '' || $data === false) {\n                        break;\n                    }\n                }\n            });\n            return $this->client;\n        }\n    }\n\n    public function onClientReceive(\\Swoole\\Coroutine\\Client $cli, string $data)\n    {\n        self::go(function () use ($cli, $data) {\n            $fd = $this->serverFd;\n            $binaryPacket = new BinaryPacket();\n            $binaryPacket->data = getBytes($data);\n            $binaryPacket->packetLength = $binaryPacket->calcPacketSize();\n            if (isset($binaryPacket->data[4])) {\n                $send = true;\n                if ($binaryPacket->data[4] == ErrorPacket::$FIELD_COUNT) {\n                    $errorPacket = new ErrorPacket();\n                    $errorPacket->read($binaryPacket);\n                    $data = getString($errorPacket->write());\n                } elseif (!$this->connected) {\n                    if ($binaryPacket->data[4] == OkPacket::$FIELD_COUNT) {\n                        $send = false;\n                        $this->connected = true;\n                        $this->chan->push($this);\n                    } elseif ($binaryPacket->data[4] == 0x01) {\n                        if ($binaryPacket->packetLength == 6) {\n                            if ($binaryPacket->data[$binaryPacket->packetLength - 1] == 4) {\n                                $data = getString(array_merge(getMysqlPackSize(1), [3, 2]));\n                                $this->send($data);\n                            }\n                        } else {\n                            $this->serverPublicKey = substr($data, 5, strlen($data) - 2);\n                            $encryptData = SecurityUtil::sha2RsaEncrypt($this->account['password'], $this->salt, $this->serverPublicKey);\n                            $data = getString(array_merge(getMysqlPackSize(strlen($encryptData)), [5])) . $encryptData;\n                            $this->send($data);\n                        }\n                        $send = false;\n                    } elseif ($binaryPacket->data[4] == 0xfe) {\n                        $mm = new MySQLMessage($binaryPacket->data);\n                        $mm->move(5);\n                        $pluginName = $mm->readStringWithNull();\n                        $this->salt = $mm->readBytesWithNull();\n                        $password = $this->processAuth($pluginName ?: 'mysql_native_password');\n                        $this->send(getString(array_merge(getMysqlPackSize(count($password)), [3], $password)));\n                        $send = false;\n                    } elseif (!$this->auth) {\n                        $handshakePacket = (new HandshakePacket())->read($binaryPacket);\n                        $this->mysqlServer = $handshakePacket;\n                        $this->salt = array_merge($handshakePacket->seed, $handshakePacket->restOfScrambleBuff);\n                        $password = $this->processAuth($handshakePacket->pluginName);\n                        $clientFlag = Capabilities::CLIENT_CAPABILITIES;\n                        $authPacket = new AuthPacket();\n                        $authPacket->pluginName = $handshakePacket->pluginName;\n                        $authPacket->packetId = 1;\n                        if (isset($this->database) && $this->database) {\n                            $authPacket->database = $this->database;\n                        } else {\n                            $authPacket->database = 0;\n                        }\n                        if ($authPacket->database) {\n                            $clientFlag |= Capabilities::CLIENT_CONNECT_WITH_DB;\n                        }\n                        if (version_compare($handshakePacket->serverVersion, '5.0', '>=')) {\n                            $clientFlag |= Capabilities::CLIENT_MULTI_RESULTS;\n                        }\n                        $authPacket->clientFlags = $clientFlag;\n                        $authPacket->serverCapabilities = $handshakePacket->serverCapabilities;\n                        $authPacket->maxPacketSize =\n                            CONFIG['server']['swoole_client_setting']['package_max_length'] ?? 16777215;\n                        $authPacket->charsetIndex = CharsetUtil::getIndex($this->charset ?? 'utf8mb4');\n                        $authPacket->user = $this->account['user'];\n                        $authPacket->password = $password;\n                        $this->auth = true;\n                        $this->send(getString($authPacket->write()));\n                        $send = false;\n                    }\n                }\n                if ($send && $this->server->exist($fd)) {\n                    $this->server->send($fd, $data);\n                }\n            }\n        });\n    }\n\n    public function processAuth(string $pluginName)\n    {\n        switch ($pluginName) {\n            case 'mysql_native_password':\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n            case 'caching_sha2_password':\n                $password = SecurityUtil::scrambleSha256($this->account['password'], $this->salt);\n                break;\n            case 'sha256_password':\n                throw new MySQLException('Sha256_password plugin is not supported yet');\n                break;\n            case 'mysql_old_password':\n                throw new MySQLException('mysql_old_password plugin is not supported yet');\n                break;\n            case 'mysql_clear_password':\n                $password = array_merge(getBytes($this->account['password']), [0]);\n                break;\n            default:\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n        }\n        return $password;\n    }\n\n    public function send(...$data)\n    {\n        if ($this->isDuplex) {\n            if ($this->client->isConnected()) {\n                return $this->client->send(...$data);\n            } else {\n                return false;\n            }\n        } else {\n            $client = self::coPop($this->mysqlClient);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $result = $client->send(...$data);\n                $this->mysqlClient->push($client);\n                return $result;\n            }\n            return false;\n        }\n    }\n\n    public function recv(&$remain)\n    {\n        if ($this->isDuplex) {\n            $client = $this->client;\n            $data = $client->recv(-1);\n        } else {\n            $client = self::coPop($this->mysqlClient, $this->timeout);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $data = $client->recv($this->timeout / 500);\n            } else {\n                $data = '';\n            }\n            $this->mysqlClient->push($client);\n            if ($data === false && $client->errCode == 110) {\n                $data = true;\n            }\n            if ($data === '' || $data === false) {\n                $this->mysqlClient->close();\n            }\n        }\n        if ($data === '' || $data === false) {\n            $this->onClientClose($client);\n        } elseif (is_string($data)) {\n            $this->onClientReceive($client, $data);\n        }\n        return $data;\n    }\n\n    public function onClientClose(\\Swoole\\Coroutine\\Client $cli)\n    {\n        MySQLPool::destruct($cli, $this->connName);\n    }\n\n    public function onClientError(\\Swoole\\Coroutine\\Client $cli)\n    {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "wrong_result": "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel();\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0) {\n        $this->timeout = $timeout;\n        $this->client->set([\n            'timeout' => $timeout,\n            'retry' => 3,\n            'retry_interval' => $tryStep\n        ]);\n        $this->client->connect($host, $port, 0, 0, SWOOLE_SOCK_TCP);\n        if (!$this->client->isConnected()) {\n            return false;\n        }\n        $this->connected = true;\n        return $this->client;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data) {\n        $this->mysqlClient->push($data);\n        while ($this->mysqlClient->length() > 0) {\n            $packet = $this->recv($data);\n            if ($packet === false) {\n                break;\n            }\n            $this->server->send($this->serverFd, $packet);\n        }\n    }\n\n    public function processAuth(string $pluginName) {\n        $authData = [];\n        if ($pluginName === 'mysql_native_password') {\n            $authData = $this->processNativePasswordAuth();\n        } elseif ($pluginName === 'caching_sha2_password') {\n            $authData = $this->processCachingSha2PasswordAuth();\n        }\n        return $authData;\n    }\n\n    public function send(...$data) {\n        $packet = $this->formatPacket($data);\n        return $this->client->send($packet);\n    }\n\n    public function recv(&$remain) {\n        $packet = $this->client->recv($remain);\n        if ($packet === false) {\n            return false;\n        }\n        return $packet;\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli) {\n        $this->connected = false;\n        $this->client->close();\n        $this->server->send($this->serverFd, \"\\x01\");\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli) {\n        $this->connected = false;\n        $this->client->close();\n        $this->server->send($this->serverFd, \"\\x02\");\n    }\n\n    private function formatPacket(array $data) {\n        $packet = pack('N', strlen(implode('', $data))) . implode('', $data);\n        return $packet;\n    }\n\n    private function processNativePasswordAuth() {\n        $authData = [];\n        // Native password authentication logic\n        return $authData;\n    }\n\n    private function processCachingSha2PasswordAuth() {\n        $authData = [];\n        // Caching_sha2_password authentication logic\n        return $authData;\n    }\n}"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a PHP class that implements a JSON-RPC client using Swoole's coroutine-based TCP client for asynchronous communication with a JSON-RPC server. The class should handle connection management, request/response serialization, and middleware processing.\n\nClass Description: The Connection class provides a JSON-RPC client implementation using Swoole's coroutine client for TCP communication. It manages the connection lifecycle, handles JSON-RPC protocol serialization/deserialization, and supports middleware processing for requests.\n\nAttributes:\n- host: [string] - The hostname or IP address of the JSON-RPC server\n- port: [int] - The port number of the JSON-RPC server\n- timeout: [float] - Connection timeout in seconds\n- callTimeout: [float] - Timeout for RPC calls in seconds\n- middleware: [array] - Array of middleware objects to process requests\n- client: [Swoole\\Coroutine\\Client] - The Swoole coroutine client instance (protected)\n\nMethods:\n- __construct([array $config = []]) -> [void] - Constructor that initializes the connection with optional configuration\n- connect() -> [void] - Establishes a TCP connection to the JSON-RPC server\n- call([Request $request]) -> [Response] - Sends a JSON-RPC request and returns the response, processing through middleware\n- close() -> [void] - Closes the connection to the server\n- recv([float $timeout = -1]) -> [string] - Receives data from the server with optional timeout (protected)\n- send([string $data]) -> [void] - Sends data to the server (protected)",
    "Canonical_solution": "use Mix\\Bean\\BeanInjector;\nuse Mix\\JsonRpc\\Constants;\nuse Mix\\JsonRpc\\Exception\\DeserializeException;\nuse Mix\\JsonRpc\\Helper\\JsonRpcHelper;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareDispatcher;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareInterface;\nuse Mix\\JsonRpc\\Message\\Request;\nuse Mix\\JsonRpc\\Message\\Response;\nuse Swoole\\Coroutine\\Client;\n\nclass Connection\n{\n    public $host = '';\n    public $port = 0;\n    public $timeout = 0.0;\n    public $callTimeout = 10.0;\n    public $middleware = [];\n    protected $client;\n\n    public function __construct(array $config = [])\n    {\n        BeanInjector::inject($this, $config);\n    }\n\n    public function connect()\n    {\n        $host    = $this->host;\n        $port    = $this->port;\n        $timeout = $this->timeout;\n        $client  = new Client(SWOOLE_SOCK_TCP);\n        $client->set([\n            'open_eof_check' => true,\n            'package_eof'    => Constants::EOF,\n        ]);\n        if (!$client->connect($host, $port, $timeout)) {\n            throw new \\Swoole\\Exception(sprintf(\"JSON-RPC: %s (host:%s, port: %s)\", $client->errMsg, $host, $port), $client->errCode);\n        }\n        $this->client = $client;\n    }\n\n    public function call(Request $request)\n    {\n        $process              = function (Request $request) {\n            $jsonString = JsonRpcHelper::encode($request) . Constants::EOF;\n            $this->send($jsonString);\n            $data = $this->recv($this->callTimeout);\n            return JsonRpcHelper::deserializeResponse($data);\n        };\n        $middlewareDispatcher = new MiddlewareDispatcher($this->middleware, $process, $request);\n        return $middlewareDispatcher->dispatch();\n    }\n\n    public function close()\n    {\n        if (!$this->client->close()) {\n            $errMsg  = $this->client->errMsg;\n            $errCode = $this->client->errCode;\n            if ($errMsg == '' && $errCode == 0) {\n                return;\n            }\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n    }\n\n    protected function recv(float $timeout = -1)\n    {\n        $data = $this->client->recv($timeout);\n        if ($data === false) {\n            $client = $this->client;\n            throw new \\Swoole\\Exception($client->errMsg, $client->errCode);\n        }\n        if ($data === \"\") {\n            $errCode = stripos(PHP_OS, 'Darwin') !== false ? 54 : 104;\n            $errMsg  = swoole_strerror($errCode, 9);\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n        return $data;\n    }\n\n    protected function send(string $data)\n    {\n        $len  = strlen($data);\n        $size = $this->client->send($data);\n        if ($size === false) {\n            throw new \\Swoole\\Exception($this->client->errMsg, $this->client->errCode);\n        }\n        if ($len !== $size) {\n            throw new \\Swoole\\Exception('The sending data is incomplete, it may be that the socket has been closed by the peer.');\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "wrong_result": "class Connection {\n    protected $host;\n    protected $port;\n    protected $timeout;\n    protected $callTimeout;\n    protected $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new \\Swoole\\Coroutine\\Client(\\Swoole\\Coroutine\\Client::TCP);\n        $this->client->set([\n            'timeout' => $this->timeout,\n        ]);\n    }\n\n    public function connect(): void {\n        if (!$this->client->isConnected()) {\n            $this->client->connect($this->host, $this->port, $this->timeout);\n        }\n    }\n\n    public function call(\\Request $request): \\Response {\n        foreach ($this->middleware as $middleware) {\n            $request = $middleware->process($request);\n        }\n\n        $jsonRequest = json_encode($request, JSON_UNESCAPED_UNICODE);\n        if ($jsonRequest === false) {\n            throw new \\Exception(\"Failed to serialize request\");\n        }\n\n        $this->connect();\n        $this->send($jsonRequest);\n\n        $jsonResponse = $this->recv($this->callTimeout);\n        $response = json_decode($jsonResponse, false);\n        if ($response === null) {\n            throw new \\Exception(\"Failed to deserialize response\");\n        }\n\n        foreach (array_reverse($this->middleware) as $middleware) {\n            $response = $middleware->process($response);\n        }\n\n        return $response;\n    }\n\n    public function close(): void {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        $timeoutToUse = $timeout === -1 ? $this->callTimeout : $timeout;\n        $data = $this->client->recv($timeoutToUse);\n        if ($data === false) {\n            throw new \\Exception(\"Failed to receive data\");\n        }\n        return $data;\n    }\n\n    protected function send(string $data): void {\n        $this->client->send($data);\n    }\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, providing methods to initialize, communicate with, and terminate the process, while handling errors and resource cleanup.\n\nClass Description: The ProcessStream class manages a subprocess execution through pipes for stdin, stdout, and stderr communication. It handles process initialization, error checking, and proper resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The stdin pipe for writing to the subprocess\n- out: resource - The stdout pipe for reading from the subprocess\n\nMethods:\n- setCommand(string $command) -> void - Sets the command to be executed by the subprocess\n- initialize() -> void - Starts the subprocess, sets up communication pipes, and checks for startup errors\n- terminate() -> void - Closes all pipes and terminates the subprocess\n- getReadConnectionDescription() -> string - Returns a description of the process connection (for logging/debugging)",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command)\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n    private $pipes;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = array(\n            0 => array('pipe', 'r'),\n            1 => array('pipe', 'w'),\n            2 => array('pipe', 'w')\n        );\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        $this->pipes = $pipes;\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->stream)) {\n            fclose($this->in);\n            fclose($this->out);\n            if (isset($this->pipes[2])) {\n                fclose($this->pipes[2]);\n            }\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        $status = proc_get_status($this->stream);\n        return \"ProcessStream: {$this->command} (PID: {$status['pid']})\";\n    }\n}"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Symfony's HTTP client components to handle HTTP requests and responses.\n\nClass Description: The `HttpClientKernel` class is a Symfony HTTP client implementation that handles HTTP requests by sending them to a server and processing the responses. It supports various request methods, headers, cookies, and body content (including form data and file uploads).\n\nAttributes:\n- client: [HttpClientInterface] - The Symfony HTTP client instance used to send requests\n\nMethods:\n- __construct([HttpClientInterface $client = null]) -> [void] - Initializes the HTTP client. If no client is provided, creates a new instance. Requires Symfony HTTP client component.\n- handle([Request $request], [int $type = HttpKernelInterface::MAIN_REQUEST], [bool $catch = true]) -> [Response] - Processes an HTTP request, sends it using the client, and returns the response. Handles headers, cookies, and request body.\n- getBody([Request $request]) -> [AbstractPart|null] - Prepares the request body content. Returns null for GET/HEAD requests, TextPart for raw content, or FormDataPart for form data including files.\n- getHeaders([Request $request]) -> [array] - Prepares request headers including cookies from the request object. Returns an array of headers.",
    "Canonical_solution": "use Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        if (null === $client && !class_exists(HttpClient::class)) {\n            throw new \\LogicException(sprintf('You cannot use \"%s\" as the HttpClient component is not installed. Try running \"composer require symfony/http-client\".', __CLASS__));\n        }\n\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $headers = $this->getHeaders($request);\n        $body = '';\n        if (null !== $part = $this->getBody($request)) {\n            $headers = array_merge($headers, $part->getPreparedHeaders()->toArray());\n            $body = $part->bodyToIterable();\n        }\n        $response = $this->client->request($request->getMethod(), $request->getUri(), [\n            'headers' => $headers,\n            'body' => $body,\n        ] + $request->attributes->get('http_client_options', []));\n\n        $response = new Response($response->getContent(!$catch), $response->getStatusCode(), $response->getHeaders(!$catch));\n\n        $response->headers->remove('X-Body-File');\n        $response->headers->remove('X-Body-Eval');\n        $response->headers->remove('X-Content-Digest');\n\n        $response->headers = new class($response->headers->all()) extends ResponseHeaderBag {\n            protected function computeCacheControlValue(): string\n            {\n                return $this->getCacheControlHeader();\n            }\n        };\n\n        return $response;\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        if (!class_exists(AbstractPart::class)) {\n            throw new \\LogicException('You cannot pass non-empty bodies as the Mime component is not installed. Try running \"composer require symfony/mime\".');\n        }\n\n        if ($content = $request->getContent()) {\n            return new TextPart($content, 'utf-8', 'plain', '8bit');\n        }\n\n        $fields = $request->request->all();\n        foreach ($request->files->all() as $name => $file) {\n            $fields[$name] = DataPart::fromPath($file->getPathname(), $file->getClientOriginalName(), $file->getClientMimeType());\n        }\n\n        return new FormDataPart($fields);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = [];\n        foreach ($request->headers as $key => $value) {\n            $headers[$key] = $value;\n        }\n        $cookies = [];\n        foreach ($request->cookies->all() as $name => $value) {\n            $cookies[] = $name.'='.$value;\n        }\n        if ($cookies) {\n            $headers['cookie'] = implode('; ', $cookies);\n        }\n\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 134,
    "wrong_result": "class HttpClientKernel {\n    protected $client;\n\n    public function __construct(HttpClientInterface $client = null) {\n        $this->client = $client ?: HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response {\n        try {\n            $headers = $this->getHeaders($request);\n            $body = $this->getBody($request);\n            $psrRequest = $this->createPsrRequest($request, $headers, $body);\n            $response = $this->client->send($psrRequest);\n        } catch (\\Exception $e) {\n            if (!$catch) {\n                throw $e;\n            }\n            $response = new Response($e->getMessage(), 500);\n        }\n        return $response;\n    }\n\n    protected function getBody(Request $request): ?AbstractPart {\n        if ($request->getMethod() === 'GET' || $request->getMethod() === 'HEAD') {\n            return null;\n        }\n        $contentType = $request->getHeaderLine('Content-Type');\n        if (str_contains($contentType, 'multipart/form-data')) {\n            return new FormDataPart($request->getParsedBody());\n        }\n        return new TextPart($request->getBody());\n    }\n\n    protected function getHeaders(Request $request): array {\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[$name] = implode(', ', $values);\n        }\n        $cookies = $request->cookies->all();\n        foreach ($cookies as $name => $value) {\n            $headers['Cookie'][] = sprintf('%s=%s', $name, $value);\n        }\n        return $headers;\n    }\n\n    protected function createPsrRequest(Request $request, array $headers, ?AbstractPart $body): RequestInterface {\n        $psrRequest = new \\GuzzleHttp\\Psr7\\Request(\n            $request->getMethod(),\n            $request->getUri(),\n            $headers,\n            $body instanceof TextPart ? $body->getContent() : ($body instanceof FormDataPart ? $body->getContent() : '')\n        );\n        return $psrRequest;\n    }\n}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a PHP class that handles process execution and communication using pipes, specifically designed for logging purposes. The class should manage subprocess creation, input/output streams, and error handling.\n\nClass Description: ProcessHandler is a logging handler that executes a subprocess and communicates with it through pipes (stdin, stdout, stderr). It ensures proper process management, handles startup errors, and provides methods for writing input and reading errors.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle\n- command: [string] - The command to execute as a subprocess\n- cwd: [string|null] - The working directory for the subprocess\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command, log level, and working directory\n- write(LogRecord $record) -> [void] - Writes formatted log record to the process stdin\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Ensures the subprocess is running (starts if not)\n- startProcess() -> [void] - Starts the subprocess using proc_open\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors the stderr pipe for activity\n- readProcessErrors() -> [string] - Reads and returns error output from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to the process stdin",
    "Canonical_solution": "use Monolog\\Level;\nuse Monolog\\LogRecord;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private string $command;\n    private ?string $cwd;\n    private array $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(LogRecord $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record->formatted);\n\n        $errors = $this->readProcessErrors();\n        if ($errors !== '') {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || $errors !== '') {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessHandler {\n    private $process;\n    private $command;\n    private $level;\n    private $bubble;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->level = $level;\n        $this->bubble = $bubble;\n        $this->cwd = $cwd;\n        $this->pipes = [];\n    }\n\n    public function write(LogRecord $record): void {\n        $data = $record->message . \"\\n\";\n        $this->writeProcessInput($data);\n    }\n\n    public function close(): void {\n        if ($this->process) {\n            proc_close($this->process);\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            $this->process = null;\n            $this->pipes = [];\n        }\n    }\n\n    public function ensureProcessIsStarted(): void {\n        if (!$this->process) {\n            $this->startProcess();\n        }\n    }\n\n    private function startProcess(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n        $this->pipes = [];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n        $this->handleStartupErrors();\n    }\n\n    private function handleStartupErrors(): void {\n        if (!$this->process) {\n            error_log(\"Failed to start process: \" . print_r($this->command, true));\n        }\n    }\n\n    public function selectErrorStream(): int|false {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors(): string {\n        $errorOutput = '';\n        if (is_resource($this->pipes[2])) {\n            $errorOutput = stream_get_contents($this->pipes[2]);\n        }\n        return $errorOutput;\n    }\n\n    public function writeProcessInput(string $string): void {\n        if (is_resource($this->pipes[0])) {\n            fwrite($this->pipes[0], $string);\n            fflush($this->pipes[0]);\n        }\n    }\n}"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, handling input/output streams and proper cleanup.\n\nClass Description: ProcessStream is a class that manages the lifecycle of a subprocess, including initialization, stream handling, and termination. It provides access to the subprocess's standard input and output streams while properly handling errors and resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The input stream (stdin) of the subprocess\n- out: resource - The output stream (stdout) of the subprocess\n\nMethods:\n- setCommand(string $command): void - Sets the command to be executed by the subprocess\n- initialize(): void - Starts the subprocess, sets up streams, and checks for startup errors\n- terminate(): void - Closes all streams and terminates the subprocess\n- getReadConnectionDescription(): string - Returns a description of the process connection",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command): void\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', '\\\\' === \\DIRECTORY_SEPARATOR ? 'a' : 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $process = proc_open($this->command, $descriptorspec, $pipes);\n        if (!$process) {\n            throw new Exception(\"Failed to start process\");\n        }\n        $this->stream = $process;\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"Process connection to command: \" . $this->command;\n    }\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a function that executes a shell command and captures its standard output and error streams using PHP's proc_open.\n\nFunction Description: The function should execute a given shell command, capture both stdout and stderr streams, properly close all resources, and return the exit code of the process. It should handle cases where process creation fails.\n\nInput:\n- $command: string - The shell command to execute\n- &$stdout: ?string (optional reference) - Variable to store the standard output\n- &$stderr: ?string (optional reference) - Variable to store the standard error\n\nOutput:\n- int - The exit code of the executed process. Returns -1 if process creation fails.",
    "Canonical_solution": "function execute(string $command, ?string &$stdout = null, ?string &$stderr = null) : int\n{\n    $process = proc_open($command, [\n        [\"pipe\", \"r\"],\n        [\"pipe\", \"w\"],\n        [\"pipe\", \"w\"]\n    ], $pipes);\n\n    if($process === false){\n        $stderr = \"Failed to open process\";\n        $stdout = \"\";\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    $stderr = stream_get_contents($pipes[2]);\n\n    foreach($pipes as $p){\n        fclose($p);\n    }\n\n    return proc_close($process);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "function executeCommand($command, &$stdout, &$stderr) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),\n        1 => array(\"pipe\", \"w\"),\n        2 => array(\"pipe\", \"w\")\n    );\n    $process = proc_open($command, $descriptorspec, $pipes);\n    if (!$process) {\n        return -1;\n    }\n    $stdoutCaptured = '';\n    $stderrCaptured = '';\n    if (isset($pipes[1])) {\n        while (!feof($pipes[1])) {\n            $stdoutCaptured .= fread($pipes[1], 8192);\n        }\n    }\n    if (isset($pipes[2])) {\n        while (!feof($pipes[2])) {\n            $stderrCaptured .= fread($pipes[2], 8192);\n        }\n    }\n    $exitCode = proc_close($process);\n    if ($stdout === null) {\n        $stdout = $stdoutCaptured;\n    }\n    if ($stderr === null) {\n        $stderr = $stderrCaptured;\n    }\n    return $exitCode;\n}"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a PHP class that handles inter-process communication (IPC) using proc_open to execute external commands, manage input/output streams, and handle errors.\n\nClass Description: The ProcessHandler class manages subprocess execution via proc_open, providing methods to write input to the process, read output/errors, and properly clean up resources. It extends Monolog's AbstractProcessingHandler for logging integration.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle or null if not running\n- command: [string] - The command to execute in the subprocess\n- cwd: [string|null] - The working directory for the subprocess or null for default\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command and optional working directory\n- write(array $record) -> [void] - Writes formatted log record to process stdin (inherited from AbstractProcessingHandler)\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Starts the process if not already running\n- startProcess() -> [void] - Executes proc_open to start the subprocess\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors stderr for error output\n- readProcessErrors() -> [string] - Reads and returns content from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to process stdin",
    "Canonical_solution": "use Monolog\\Logger;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n        $errors = $this->readProcessErrors();\n        if (empty($errors) === false) {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || empty($errors) === false) {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessHandler extends \\Monolog\\AbstractProcessingHandler {\n    protected $process;\n    protected $command;\n    protected $cwd;\n    protected $pipes;\n\n    public function __construct(string $command, $level = \\Monolog\\Logger::DEBUG, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        parent::__construct($level, $bubble);\n    }\n\n    public function write(array $record): void {\n        if ($this->process && isset($this->pipes[0])) {\n            fwrite($this->pipes[0], $record['message'] . \"\\n\");\n        }\n    }\n\n    public function close(): void {\n        if ($this->process) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    public function ensureProcessIsStarted(): void {\n        if (!$this->process) {\n            $this->startProcess();\n        }\n    }\n\n    public function startProcess(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n        $this->handleStartupErrors();\n    }\n\n    public function handleStartupErrors(): void {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: \" . proc_strerror(proc_get_last_error()));\n        }\n    }\n\n    public function selectErrorStream(): int|false {\n        $read = [$this->pipes[2] ?? null];\n        $null = null;\n        $except = null;\n        return stream_select($read, $null, $null, 0);\n    }\n\n    public function readProcessErrors(): string {\n        $errorOutput = '';\n        if (isset($this->pipes[2])) {\n            $errorOutput = stream_get_contents($this->pipes[2]);\n        }\n        return $errorOutput;\n    }\n\n    public function writeProcessInput(string $string): void {\n        if ($this->process && isset($this->pipes[0])) {\n            fwrite($this->pipes[0], $string);\n        }\n    }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests to interact with WeChat Pay API, supporting both GET and POST methods with proper SSL configuration.\n\nClass Description: The Wechatpay class provides methods for making HTTP requests to WeChat Pay API endpoints. It handles both GET and POST requests, with special consideration for HTTPS connections and SSL configuration. The class includes error handling through HTTP status codes.\n\nMethods:\n\nMethod1: http_get(string $url) -> string|false - Performs a GET request to the specified URL. Returns the response content if successful (HTTP 200), or false otherwise.\nMethod2: http_post(string $url, array $param, bool $post_file=false) -> string|false - Performs a POST request to the specified URL with given parameters. Handles both regular form data and file uploads. Returns the response content if successful (HTTP 200), or false otherwise.",
    "Canonical_solution": "class Wechatpay\n{\n    /**\n     * GET \u8bf7\u6c42\n     * @param string $url\n     */\n    private function http_get($url){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n\n    /**\n     * POST \u8bf7\u6c42\n     * @param string $url\n     * @param array $param\n     * @param boolean $post_file \u662f\u5426\u6587\u4ef6\u4e0a\u4f20\n     * @return string content\n     */\n    private function http_post($url,$param,$post_file=false){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, false);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        if (is_string($param) || $post_file) {\n            $strPOST = $param;\n        } else {\n            $aPOST = array();\n            foreach($param as $key=>$val){\n                $aPOST[] = $key.\"=\".urlencode($val);\n            }\n            $strPOST =  join(\"&\", $aPOST);\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        curl_setopt($oCurl, CURLOPT_POST,true);\n        curl_setopt($oCurl, CURLOPT_POSTFIELDS,$strPOST);\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Wechatpay {\n    public function http_get(string $url): string|false {\n        $context = stream_context_create([\n            'ssl' => [\n                'verify_peer' => true,\n                'verify_peer_name' => true,\n            ]\n        ]);\n        $response = file_get_contents($url, false, $context);\n        if ($response === false) {\n            return false;\n        }\n        $meta = stream_get_meta_data($context);\n        if ($meta['http_response_code'] === 200) {\n            return $response;\n        }\n        return false;\n    }\n\n    public function http_post(string $url, array $param, bool $post_file = false): string|false {\n        $data = $post_file ? http_build_query($param) : json_encode($param);\n        $headers = [];\n        if (!$post_file) {\n            $headers[] = 'Content-Type: application/json';\n        } else {\n            $headers[] = 'Content-Type: application/x-www-form-urlencoded';\n        }\n        $context = stream_context_create([\n            'ssl' => [\n                'verify_peer' => true,\n                'verify_peer_name' => true,\n            ],\n            'http' => [\n                'method' => 'POST',\n                'header' => implode(\"\\r\\n\", $headers),\n                'content' => $data,\n            ]\n        ]);\n        $response = file_get_contents($url, false, $context);\n        if ($response === false) {\n            return false;\n        }\n        $meta = stream_get_meta_data($context);\n        if ($meta['http_response_code'] === 200) {\n            return $response;\n        }\n        return false;\n    }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Guzzle library to download files and fetch GitHub release information.\n\nClass Description: The HttpClient class provides methods for downloading remote files via HTTP and retrieving GitHub release information (both stable and pre-release) using the Guzzle HTTP client library.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- getSourceFile(string $fileName, string $savePath, string $url) -> [bool] - Downloads a file from the specified URL and saves it to the given path\n- getLatestReleaseTagName(string $repo) -> [string] - Gets the latest stable release tag name from a GitHub repository\n- getLatestPreReleaseTagName(string $repo) -> [string] - Gets the latest pre-release tag name from a GitHub repository",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass HttpClient\n{\n    private Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client();\n    }\n\n    /**\n     * Download remote file via HTTP\n     *\n     * @param string $fileName\n     * @param string $savePath\n     * @param string $url\n     * @return bool\n     */\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool\n    {\n        try {\n            if (! file_exists($savePath)) {\n                echo '\u76ee\u6807\u6587\u4ef6\u5939 ' . $savePath . ' \u4e0d\u5b58\u5728\uff0c\u4e0b\u8f09\u5931\u8d25\u3002' . PHP_EOL;\n                return false;\n            }\n\n            echo '- \u5f00\u59cb\u4e0b\u8f7d ' . $fileName . '...' . PHP_EOL;\n            $request = $this->client->get($url);\n            echo '- \u4e0b\u8f7d ' . $fileName . ' \u6210\u529f\uff0c\u6b63\u5728\u4fdd\u5b58...' . PHP_EOL;\n            $result = file_put_contents($savePath . $fileName, $request->getBody()->getContents());\n\n            if (! $result) {\n                echo '- \u4fdd\u5b58 ' . $fileName . ' \u81f3 ' . $savePath . ' \u5931\u8d25\u3002' . PHP_EOL;\n            } else {\n                echo '- \u4fdd\u5b58 ' . $fileName . ' \u81f3 ' . $savePath . ' \u6210\u529f\u3002' . PHP_EOL;\n            }\n\n            return true;\n        } catch (GuzzleException $e) {\n            echo '- \u4e0b\u8f7d ' . $fileName . ' \u5931\u8d25...' . PHP_EOL;\n            echo $e->getMessage() . PHP_EOL;\n\n            return false;\n        }\n    }\n\n    /**\n     * Get latest GitHub release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases/latest' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n\n        return json_decode(\n            $request->getBody()->getContents(),\n            true\n        )['tag_name'];\n    }\n\n    /**\n     * Get latest GitHub pre-release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestPreReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n        $latest = json_decode(\n            $request->getBody()->getContents(),\n            true\n        )[0];\n\n        return $latest['tag_name'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new \\GuzzleHttp\\Client([\n            'headers' => [\n                'User-Agent' => 'PHPHttpClient/1.0'\n            ]\n        ]);\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->get($url, ['stream' => true]);\n            $output = fopen($savePath, 'wb');\n            fwrite($output, $response->getBody());\n            fclose($output);\n            return true;\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        $url = \"https://api.github.com/repos/{$repo}/releases/latest\";\n        try {\n            $response = $this->client->get($url);\n            $data = json_decode($response->getBody(), true);\n            return $data['tag_name'] ?? '';\n        } catch (\\Exception $e) {\n            return '';\n        }\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        $url = \"https://api.github.com/repos/{$repo}/releases\";\n        try {\n            $response = $this->client->get($url);\n            $data = json_decode($response->getBody(), true);\n            foreach ($data as $release) {\n                if (!$release['prerelease']) {\n                    continue;\n                }\n                return $release['tag_name'] ?? '';\n            }\n            return '';\n        } catch (\\Exception $e) {\n            return '';\n        }\n    }\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, supports streaming for large files, and includes proxy configuration.\n\nAttributes:\n- request_url: string - The URL to send the request to\n- request_headers: array - Associative array of request headers\n- request_body: string - The request body content\n- response: string - The complete response from the server\n- response_headers: array - Parsed response headers\n- response_body: string - The response body content\n- response_code: int - HTTP response status code\n- response_info: array - Additional cURL response information\n- curl_handle: resource - The cURL handle resource\n- method: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\n- proxy: array|null - Proxy configuration details\n- username: string|null - Authentication username\n- password: string|null - Authentication password\n- curlopts: array|null - Additional cURL options\n- debug_mode: bool - Whether to enable debug mode\n- request_class: string - Class name for request objects\n- response_class: string - Class name for response objects\n- useragent: string - User agent string\n- read_file: string|null - File path for reading data\n- read_stream: resource|null - Stream resource for reading data\n- read_stream_size: int|null - Size of read stream\n- read_stream_read: int - Bytes read from stream\n- write_file: string|null - File path for writing data\n- write_stream: resource|null - Stream resource for writing data\n- seek_position: int|null - Position to seek in read stream\n- cacert_location: mixed - CA certificate location\n- ssl_verification: bool - Whether to verify SSL\n- registered_streaming_read_callback: callable|null - Callback for streaming read\n- registered_streaming_write_callback: callable|null - Callback for streaming write\n\nMethods:\n- __construct(string|null $url, array|null $proxy, array|null $helpers) -> self - Initialize the request object\n- __destruct() -> self - Clean up resources\n- set_credentials(string $user, string $pass) -> self - Set authentication credentials\n- add_header(string $key, string $value) -> self - Add a request header\n- remove_header(string $key) -> self - Remove a request header\n- set_method(string $method) -> self - Set the HTTP method\n- set_useragent(string $ua) -> self - Set the user agent\n- set_body(string $body) -> self - Set the request body\n- set_request_url(string $url) -> self - Set the request URL\n- set_curlopts(array $curlopts) -> self - Set additional cURL options\n- set_read_stream_size(int $size) -> self - Set read stream size\n- set_read_stream(resource $resource, int|null $size) -> self - Set read stream resource\n- set_read_file(string $location) -> self - Set read file location\n- set_write_stream(resource $resource) -> self - Set write stream resource\n- set_write_file(string $location) -> self - Set write file location\n- set_proxy(string $proxy) -> self - Configure proxy settings\n- set_seek_position(int|null $position) -> self - Set seek position for read stream\n- register_streaming_read_callback(callable $callback) -> self - Register read callback\n- register_streaming_write_callback(callable $callback) -> self - Register write callback\n- streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Handle streaming read\n- streaming_write_callback(resource $curl_handle, string $data) -> int - Handle streaming write\n- prep_request() -> resource - Prepare and return cURL handle\n- process_response(resource|null $curl_handle, string|null $response) -> mixed - Process the response\n- send_request(bool $parse = false) -> mixed - Send the request and get response\n- get_response_header(string|null $header) -> mixed - Get response header(s)\n- get_response_body() -> string - Get response body\n- get_response_code() -> int - Get response status code",
    "Canonical_solution": "class RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request']))\n        {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response']))\n        {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy)\n        {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream))\n        {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream))\n        {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key]))\n        {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0)\n        {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0)\n            {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0)\n                {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size)\n        {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream))\n        {\n            if (fseek($this->read_stream, $this->seek_position) !== 0)\n            {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback)\n        {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length)\n        {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false)\n            {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback)\n        {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification)\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        }\n        else\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true)\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        }\n        elseif (is_string($this->cacert_location))\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode)\n        {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir'))\n        {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass']))\n            {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib'))\n        {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers))\n        {\n            $temp_headers = array();\n\n            foreach ($this->request_headers as $k => $v)\n            {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method)\n        {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream))\n                {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0)\n                    {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream))\n                {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0)\n        {\n            foreach ($this->curlopts as $k => $v)\n            {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response)\n        {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle))\n        {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header)\n            {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1])?$kv[1]:'';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response)\n            {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false)\n        {\n            throw new RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n\n        curl_close($curl_handle);\n\n        if ($parse)\n        {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header)\n        {\n            return $this->response_headers[strtolower($header)];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class RequestCore {\n    public string $request_url;\n    public array $request_headers;\n    public string $request_body;\n    public string $response;\n    public array $response_headers;\n    public string $response_body;\n    public int $response_code;\n    public array $response_info;\n    public resource $curl_handle;\n    public string $method;\n    public array|null $proxy;\n    public string|null $username;\n    public string|null $password;\n    public array|null $curlopts;\n    public bool $debug_mode;\n    public string $request_class;\n    public string $response_class;\n    public string $useragent;\n    public string|null $read_file;\n    public resource|null $read_stream;\n    public int|null $read_stream_size;\n    public int $read_stream_read;\n    public string|null $write_file;\n    public resource|null $write_stream;\n    public int|null $seek_position;\n    public mixed $cacert_location;\n    public bool $ssl_verification;\n    public callable|null $registered_streaming_read_callback;\n    public callable|null $registered_streaming_write_callback;\n\n    public function __construct(string|null $url, array|null $proxy, array|null $helpers) {\n        $this->request_url = $url ?? '';\n        $this->proxy = $proxy ?? [];\n        $this->debug_mode = false;\n        $this->request_class = 'Request';\n        $this->response_class = 'Response';\n        $this->useragent = 'PHP-CURL/1.0';\n        $this->read_file = null;\n        $this->read_stream = null;\n        $this->read_stream_size = null;\n        $this->read_stream_read = 0;\n        $this->write_file = null;\n        $this->write_stream = null;\n        $this->seek_position = null;\n        $this->cacert_location = null;\n        $this->ssl_verification = true;\n        $this->registered_streaming_read_callback = null;\n        $this->registered_streaming_write_callback = null;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->{$key} = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n    }\n\n    public function set_credentials(string $user, string $pass): self {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header(string $key, string $value): self {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header(string $key): self {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method(string $method): self {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent(string $ua): self {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body(string $body): self {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url(string $url): self {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts(array $curlopts): self {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size(int $size): self {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream(resource $resource, int|null $size): self {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file(string $location): self {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream(resource $resource): self {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file(string $location): self {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy(string $proxy): self {\n        $this->proxy = ['http' => $proxy];\n        return $this;\n    }\n\n    public function set_seek_position(int|null $position): self {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback(callable $callback): self {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback(callable $callback): self {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback(resource $curl_handle, resource $file_handle, int $length): string {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback(resource $curl_handle, string $data): int {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return fwrite($curl_handle, $data);\n    }\n\n    public function prep_request(): resource {\n        $this->curl_handle = curl_init();\n        curl_setopt_array($this->curl_handle, [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_HTTPHEADER => $this->request_headers,\n            CURLOPT_POST => ($this->method === 'POST'),\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_POSTFIELDS => $this->request_body,\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n            CURLOPT_PROXY => isset($this->proxy['http']) ? $this->proxy['http'] : null,\n            CURLOPT_PROXYUSERPWD => $this->username . ':' . $this->password,\n            CURLOPT_READFUNCTION => $this->read_stream ? [$this, 'streaming_read_callback'] : null,\n            CURLOPT_INFILE => $this->read_stream,\n            CURLOPT_INFILESIZE => $this->read_stream_size,\n            CURLOPT_WRITEFUNCTION => $this->write_stream ? [$this, 'streaming_write_callback'] : null,\n            CURLOPT_OUTFILE => $this->write_stream,\n            CURLOPT_FILE => $this->write_file ? fopen($this->write_file, 'w') : null,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_ENCODING => '',\n            CURLOPT_NOPROGRESS => false,\n            CURLOPT_PROGRESSFUNCTION => function($curl, $dltotal, $dlnow, $ultotal, $ulnow) {\n                return true;\n            },\n            CURLOPT_VERBOSE => $this->debug_mode,\n        ]);\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response(resource|null $curl_handle, string|null $response): mixed {\n        if (!$curl_handle || !$response) {\n            return false;\n        }\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = explode(\"\\r\\n\", substr($response, 0, $header_size));\n        $this->response_body = substr($response, $header_size);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_RESPONSE_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        return true;\n    }\n\n    public function send_request(bool $parse = false): mixed {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($response === false) {\n            $this->response = 'cURL error: ' . curl_error($this->curl_handle);\n            return false;\n        }\n        $this->process_response($this->curl_handle, $response);\n        if ($parse) {\n            $this->response_body = $this->get_response_body();\n        }\n        return $this->response;\n    }\n\n    public function get_response_header(string|null $header): mixed {\n        if ($header) {\n            foreach ($this->response_headers as $h) {\n                if (stripos($h, $header) === 0) {\n                    return trim(substr($h, strlen($header)));\n                }\n            }\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body(): string {\n        return $this->response_body;\n    }\n\n    public function get_response_code(): int {\n        return $this->response_code;\n    }\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a PHP class that interacts with the Coinbase API to handle payment processing using cURL for HTTP requests.\n\nClass Description: The Coinbase class implements the PaymentInterface and provides functionality to make POST requests to the Coinbase API. It handles API key authentication and request configuration.\n\nAttributes:\n- config: [array] - Stores the configuration settings including the Coinbase API key.\n\nMethods:\n- __construct($config): [void] - Initializes the class with the provided configuration.\n  - Input: $config [array] - Configuration array containing API credentials\n  - Output: None\n\n- _curlPost($url, $params = false): [mixed] - Makes a POST request to the specified URL with optional parameters.\n  - Input: \n    - $url [string] - The API endpoint URL\n    - $params [mixed|false] - Optional request payload parameters\n  - Output: [mixed] - The API response or false on failure",
    "Canonical_solution": "namespace App\\Payments;\n\nuse App\\Contracts\\PaymentInterface;\nuse App\\Exceptions\\ApiException;\n\nclass Coinbase implements PaymentInterface\n{\n    protected $config;\n    public function __construct($config)\n    {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch,\n            CURLOPT_HTTPHEADER,\n            array('X-CC-Api-Key:' . $this->config['coinbase_api_key'], 'X-CC-Version: 2018-03-22')\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Coinbase {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        if ($params !== false) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Content-Type: application/json',\n                'Authorization: Bearer ' . $this->config['apiKey']\n            ]);\n        } else {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Authorization: Bearer ' . $this->config['apiKey']\n            ]);\n        }\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            return false;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode !== 200) {\n            return false;\n        }\n\n        $result = json_decode($response, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement a class for interacting with a pretreatment API service that handles task processing and querying, using HTTP requests with Guzzle client in PHP.\n\nClass Description: The Pretreat class provides functionality to submit tasks for processing and query their status through an API service. It handles request signing, parameter preparation, and response processing.\n\nAttributes:\n\nAttribute1: Config $config - Configuration object containing service settings like timeout, service name, and endpoint URLs\n\nMethods:\n\nMethod1: __construct(Config $config) -> void - Initializes the Pretreat instance with configuration. Throws an exception if processNotifyUrl is not configured.\n\nMethod2: process(array $tasks, array $optionalParams = []) -> array - Submits tasks for processing. Takes an array of tasks and optional parameters, returns the API response as an associative array.\n\nMethod3: query(array $taskIds, string $path) -> array|bool - Queries the status of tasks by their IDs. Returns an array of tasks if successful, or false on failure.",
    "Canonical_solution": "namespace Upyun\\Api;\n\nuse GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\nuse Upyun\\Util;\n\nclass Pretreat\n{\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        if (!$config->processNotifyUrl) {\n            throw new \\Exception(\"should config prosessNotifyUrl first.\");\n        }\n        $this->config = $config;\n    }\n\n    public function process($tasks, $optionalParams = array())\n    {\n        $encodedTasks = Util::base64Json($tasks);\n\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'notify_url' => $this->config->processNotifyUrl,\n            'tasks' => $encodedTasks,\n        );\n\n        $params = array_merge($params, $optionalParams);\n\n        $path = '/pretreatment/';\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'form_params' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n\n    public function query($taskIds, $path)\n    {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'task_ids' => implode(',', $taskIds)\n        );\n        $path = $path . '?' . http_build_query($params);\n\n        $method = 'GET';\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders\n        ]);\n\n        if ($response->getStatusCode() === 200) {\n            $body = $response->getBody()->getContents();\n            $result = json_decode($body, true);\n            if (is_array($result)) {\n                return $result['tasks'];\n            }\n        }\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        if (!isset($config->processNotifyUrl)) {\n            throw new \\Exception(\"processNotifyUrl is required in config\");\n        }\n        $this->config = $config;\n        $this->client = new Client([\n            'base_uri' => $config->processEndpoint,\n            'timeout' => $config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []) {\n        $params = array_merge($tasks, $optionalParams);\n        $signature = $this->generateSignature($params);\n        try {\n            $response = $this->client->post('/process', [\n                'form_params' => array_merge($params, ['signature' => $signature]),\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return [];\n        }\n    }\n\n    public function query(array $taskIds, string $path) {\n        $params = [\n            'task_ids' => $taskIds,\n            'path' => $path,\n        ];\n        $signature = $this->generateSignature($params);\n        $url = $this->config->queryEndpoint . $path;\n        try {\n            $response = $this->client->get($url, [\n                'query' => array_merge($params, ['signature' => $signature]),\n            ]);\n            $data = json_decode($response->getBody(), true);\n            return $response->getStatusCode() === 200 ? $data : false;\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function generateSignature(array $params) {\n        $signingKey = $this->config->signingKey;\n        $data = http_build_query($params);\n        return hash_hmac('sha256', $data, $signingKey);\n    }\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for GET/POST methods, custom headers, cookies, and SSL configuration.\n\nFunction Description: The function should make HTTP requests to a specified URL with optional cookies and user agent. It should handle both HTTP and HTTPS protocols, with configurable SSL verification. The function should follow redirects (302 status) and return the response data or false on failure. Timeouts should be configurable for connection and request execution.\n\nInput:\n- $url: string - The target URL for the HTTP request\n- $cookies: string (optional) - Cookie string to be sent with the request\n- $useragent: string (optional) - User-Agent header value\n- $method: string (optional) - HTTP method ('GET' or 'POST'), defaults to 'GET'\n\nOutput:\n- Returns: mixed - The response data as string on success (HTTP 200), follows redirects automatically (HTTP 302), or returns false on failure",
    "Canonical_solution": "function download($url, $cookies='', $useragent='', $method = 'GET')\n{\n    $header = array(\n        \"Content-Type:application/x-www-form-urlencoded\",\n        'User-Agent: '.$useragent);\n    $ch = curl_init();\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n    }\n    if (stripos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_SSLVERSION, 1);\n    }\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 600);\n    $data = curl_exec($ch);\n    $status = curl_getinfo($ch);\n    curl_close($ch);\n    if (isset($status['http_code']) && $status['http_code'] == 200) {\n        return $data;\n    }\n    if (isset($status['http_code']) && $status['http_code'] == 302) {\n        return download($status['redirect_url'], $cookies, $useragent);\n    }\n    return $data;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "wrong_result": "function http_request($url, $cookies = null, $useragent = null, $method = 'GET') {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    $method = strtoupper($method);\n    curl_setopt($ch, CURLOPT_POST, $method === 'POST');\n    if ($cookies) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n    if ($useragent) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 60);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($httpCode === 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a PHP class that fetches currency conversion rates from an external API and stores them in a repository.\n\nClass Description: The FetchConversionRate class is responsible for retrieving currency conversion rates between a base currency and all other available currencies. It uses Guzzle HTTP client to make requests to an external currency API and stores the results in a conversion rate repository.\n\nAttributes:\n- baseCurrencyId: int - The ID of the base currency for which conversion rates will be fetched\n- currencyRepository: CurrencyRepository - Repository for accessing currency data\n- conversionRateRepository: ConversionRateRepository - Repository for storing conversion rates\n\nMethods:\n- __construct(int $baseCurrencyId) -> void - Constructor that initializes the base currency ID\n- handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) -> void - Main method that executes the conversion rate fetching process:\n  - Retrieves all currencies from the repository\n  - For each target currency, makes an API request to get the conversion rate\n  - Stores or updates the conversion rate in the repository\n  - Skips invalid currencies and handles API request failures gracefully",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Exception;\n\nclass FetchConversionRate\n{\n    protected $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n    }\n\n    public function handle(\n        CurrencyRepository $currencyRepository,\n        ConversionRateRepository $conversionRateRepository\n    ): void {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $baseCurrency = $this->currencyRepository->getById($this->baseCurrencyId);\n\n        if (!$baseCurrency || !$baseCurrency->iso) {\n            return;\n        }\n\n        $client = new Client();\n\n        foreach ($this->currencyRepository->getAll() as $targetCurrency) {\n            if (!$targetCurrency->iso || $baseCurrency->iso === $targetCurrency->iso) {\n                continue;\n            }\n\n            $url = sprintf(\n                'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/%s.json',\n                $baseCurrency->iso_lowercased,\n            );\n\n            try {\n                $response = $client->request('GET', $url);\n                $decoded_response = json_decode($response->getBody(), true);\n                $rate = $decoded_response[$baseCurrency->iso_lowercased][$targetCurrency->iso_lowercased];\n            } catch (Exception) {\n                continue;\n            }\n\n            $this->conversionRateRepository->createOrUpdate(\n                $baseCurrency->id,\n                $targetCurrency->id,\n                $rate\n            );\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class FetchConversionRate {\n    protected int $baseCurrencyId;\n    protected CurrencyRepository $currencyRepository;\n    protected ConversionRateRepository $conversionRateRepository;\n    protected Client $client;\n\n    public function __construct(int $baseCurrencyId) {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->client = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAllCurrencies();\n\n        foreach ($currencies as $currency) {\n            $currencyId = $currency->getId();\n            if ($currencyId === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->client->get('https://api.example.com/exchange-rates', [\n                    RequestOptions::QUERY => [\n                        'base' => $this->baseCurrencyId,\n                        'target' => $currencyId\n                    ]\n                ]);\n\n                if ($response->getStatusCode() === 200) {\n                    $data = json_decode($response->getBody(), true);\n                    $rate = $data['rate'] ?? 1.0;\n                    $this->conversionRateRepository->saveConversionRate($this->baseCurrencyId, $currencyId, $rate);\n                }\n            } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n                error_log('API request failed for currency ' . $currencyId . ': ' . $e->getMessage());\n                continue;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a PHP class that provides HTTP client functionality using Guzzle library, supporting various HTTP methods, request/response handling, and error logging.\n\nClass Description: The Guzzle class is an HTTP client implementation that wraps GuzzleHttp\\Client functionality. It supports GET, POST, PUT, PATCH, and DELETE methods, handles different content types (including multipart/form-data and JSON), manages request/response data, and provides logging capabilities.\n\nAttributes:\n- requestArguments: [array] - Stores request parameters including URI, method, parameters, and headers\n- requestHeader: [array] - Contains HTTP headers for the request\n- responseBody: [string] - Stores the response body content\n- responseHeader: [array] - Contains HTTP headers from the response\n- responseHttpCode: [int] - HTTP status code from the response\n- responseClientError: [string|null] - Stores any client error messages\n- responseClientInfo: [array] - Additional client information\n- logger: [object|null] - Logger instance for debugging and error logging\n- client: [GuzzleHttp\\Client] - Guzzle HTTP client instance\n\nMethods:\n- __construct([GuzzleHttp\\Client|null] $client, [array] $config) -> [void] - Initializes the HTTP client with optional existing client instance and configuration\n- request([string] $uri, [string] $method, [array] $parameters, [array] $headers, [bool] $multipart) -> [string] - Executes HTTP request and returns response body\n- getResponse() -> [array] - Returns complete request/response information including headers, body, and status code\n- setLogger([object] $logger) -> [void] - Sets a logger instance for debugging\n- getResponseBody() -> [string] - Returns the response body content\n- getResponseHeader() -> [array] - Returns response headers\n- getResponseHttpCode() -> [int] - Returns HTTP status code\n- getResponseClientError() -> [string|null] - Returns client error message if any\n- getResponseClientInfo() -> [array] - Returns additional client information (protected)\n- getRequestArguments() -> [array] - Returns request arguments (protected)",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse GuzzleHttp\\Exception\\TransferException;\n\nclass Guzzle implements HttpClientInterface\n{\n    protected $requestArguments = [];\n    protected $requestHeader = [];\n    protected $responseBody = '';\n    protected $responseHeader = [];\n    protected $responseHttpCode = 0;\n    protected $responseClientError = null;\n    protected $responseClientInfo = [];\n    protected $logger = null;\n    protected $client = null;\n\n    public function __construct($client = null, $config = [])\n    {\n        $this->client = $client ? $client : new Client($config);\n    }\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false)\n    {\n        $this->requestHeader = array_replace($this->requestHeader, (array)$headers);\n\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $this->requestHeader,\n        ];\n\n        $response = null;\n\n        try {\n            switch ($method) {\n                case 'GET':\n                case 'DELETE':\n                    $response = $this->client->request($method, $uri, [\n                        'query' => $parameters,\n                        'headers' => $this->requestHeader,\n                    ]);\n                    break;\n                case 'PUT':\n                case 'PATCH':\n                case 'POST':\n                    $body_type = $multipart ? 'multipart' : 'form_params';\n\n                    if (isset($this->requestHeader['Content-Type'])\n                        && $this->requestHeader['Content-Type'] === 'application/json'\n                    ) {\n                        $body_type = 'json';\n                    }\n\n                    $body_content = $parameters;\n                    if ($multipart) {\n                        $body_content = [];\n                        foreach ($parameters as $key => $val) {\n                            if ($val instanceof \\CURLFile) {\n                                $val = fopen($val->getFilename(), 'r');\n                            }\n\n                            $body_content[] = [\n                                'name' => $key,\n                                'contents' => $val,\n                            ];\n                        }\n                    }\n\n                    $response = $this->client->request($method, $uri, [\n                        $body_type => $body_content,\n                        'headers' => $this->requestHeader,\n                    ]);\n                    break;\n            }\n        } catch (\\Exception $e) {\n            $response = $e->getResponse();\n            $this->responseClientError = $e->getMessage();\n        }\n\n        if (!$this->responseClientError) {\n            $this->responseBody = $response->getBody();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseHeader = $response->getHeaders();\n        }\n\n        if ($this->logger) {\n            $this->logger->debug(sprintf('%s::request( %s, %s ), response:', get_class($this), $uri, $method), $this->getResponse());\n\n            if ($this->responseClientError) {\n                $this->logger->error(sprintf('%s::request( %s, %s ), error:', get_class($this), $uri, $method), [$this->responseClientError]);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse()\n    {\n        return [\n            'request' => $this->getRequestArguments(),\n            'response' => [\n                'code' => $this->getResponseHttpCode(),\n                'headers' => $this->getResponseHeader(),\n                'body' => $this->getResponseBody(),\n            ],\n            'client' => [\n                'error' => $this->getResponseClientError(),\n                'info' => $this->getResponseClientInfo(),\n                'opts' => null,\n            ],\n        ];\n    }\n\n    public function setLogger($logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader()\n    {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode()\n    {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError()\n    {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo()\n    {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments()\n    {\n        return $this->requestArguments;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class Guzzle {\n    protected $requestArguments;\n    protected $requestHeader;\n    protected $responseBody;\n    protected $responseHeader;\n    protected $responseHttpCode;\n    protected $responseClientError;\n    protected $responseClientInfo;\n    protected $logger;\n    protected $client;\n\n    public function __construct(?GuzzleHttp\\Client $client = null, array $config = []) {\n        $this->client = $client ?: new GuzzleHttp\\Client($config);\n    }\n\n    public function request($uri, $method, $parameters, $headers, $multipart) {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $headers,\n            'multipart' => $multipart,\n        ];\n\n        $this->requestHeader = $headers;\n\n        $options = [\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $options['form_params'] = $parameters;\n        } else {\n            $options['json'] = $parameters;\n        }\n\n        try {\n            $response = $this->client->request($method, $uri, $options);\n            $this->responseBody = (string) $response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientError = null;\n            $this->responseClientInfo = [];\n\n            if ($this->logger) {\n                $this->logger->log(\"Request to $uri with method $method\", $response);\n            }\n\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            $this->responseClientInfo = ['exception' => $e];\n            $this->responseHttpCode = 0;\n            $this->responseBody = '';\n\n            if ($this->logger) {\n                $this->logger->log(\"Request failed for $uri with method $method\", $e);\n            }\n\n            return $this->responseBody;\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'responseBody' => $this->responseBody,\n            'responseHeader' => $this->responseHeader,\n            'responseHttpCode' => $this->responseHttpCode,\n            'responseClientError' => $this->responseClientError,\n            'responseClientInfo' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement functions to verify transactions from different payment gateways (NowPayments, NextPay, and ZarinPal) using their respective APIs.\n\nFunction Description: The functions will interact with payment gateway APIs to verify transaction details and return the verification results.\n\nInput: \n- verify_nowpayment_transaction: \n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $hash_id (string): Unique transaction identifier from NowPayments\n\n- verify_nextpay_transaction:\n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $amount (numeric): Transaction amount to verify\n  - $payid (string): Transaction ID from NextPay\n\n- verify_zarinpal_transaction:\n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $Authority (string): Transaction authority code from ZarinPal\n  - $amount (numeric): Transaction amount to verify\n\nOutput:\n- All functions return the decoded API response from the respective payment gateway, typically containing transaction verification details and status.\n- Return type is object/mixed (decoded JSON response for NowPayments/NextPay, SOAP response object for ZarinPal)",
    "Canonical_solution": "function verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $base_url = 'https://api.nowpayments.io/v1/payment/' . $hash_id;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['X-API-KEY: ' . $paymentKeys['nowpayment']]);\n    curl_setopt($ch, CURLOPT_URL, $base_url);\n    \n    $res = json_decode(curl_exec($ch));\n    curl_close($ch);\n    \n    return $res;\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $curl = curl_init();\n    curl_setopt_array($curl, array(\n        CURLOPT_URL => 'https://nextpay.org/nx/gateway/verify',\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_ENCODING => '',\n        CURLOPT_MAXREDIRS => 10,\n        CURLOPT_TIMEOUT => 0,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n        CURLOPT_CUSTOMREQUEST => 'POST',\n        CURLOPT_POSTFIELDS => 'api_key='.$paymentKeys['nextpay'].'&amount='.$amount.'&currency=IRT&trans_id='.$payid,\n    ));\n    \n    $response = curl_exec($curl);\n    curl_close($curl);\n    \n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount,\n    ]);\n    \n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "wrong_result": "function verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $apiKey = $paymentKeys['nowpayments'];\n    $url = \"https://api.nowpayments.io/v1/verify/\" . urlencode($hash_id);\n    $headers = ['Authorization: Bearer ' . $apiKey, 'Content-Type: application/json'];\n    $context = stream_context_create(['http' => ['method' => 'GET', 'header' => implode(\"\\r\\n\", $headers)]]);\n    $response = file_get_contents($url, false, $context);\n    return json_decode($response, true);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $apiKey = $paymentKeys['nextpay'];\n    $url = \"https://api.nextpay.org/verify\";\n    $data = json_encode(['amount' => $amount, 'payid' => $payid]);\n    $headers = ['Authorization: Bearer ' . $apiKey, 'Content-Type: application/json'];\n    $context = stream_context_create([\n        'http' => [\n            'method' => 'POST',\n            'header' => implode(\"\\r\\n\", $headers),\n            'content' => $data\n        ]\n    ]);\n    $response = file_get_contents($url, false, $context);\n    return json_decode($response, true);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $apiKey = $paymentKeys['zarinpal'];\n    $wsdlUrl = \"https://api.zarinpal.com/pg/services/WebPayment/SaleVerificationService.php?wsdl\";\n    $client = new SoapClient($wsdlUrl, ['login' => $apiKey, 'password' => $apiKey, 'trace' => 1]);\n    $result = $client->__soapCall('VerifyTransaction', ['Authority' => $Authority, 'Amount' => $amount]);\n    return $result;\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL, supporting various HTTP methods, headers, cookies, proxies, and file uploads.\n\nClass Description: The `requests` class is a static HTTP client implementation that handles HTTP requests through cURL. It supports GET, POST, and other HTTP methods, manages cookies, headers, user agents, proxies, and file uploads. The class maintains connection settings and request history.\n\nAttributes:\n\nVERSION: [string] - The version number of the requests class\nch: [resource|null] - The cURL handle resource\ntimeout: [int|array] - Timeout settings for the connection\nencoding: [string|null] - Request encoding\noutput_encoding: [string|null] - Response encoding\ncookies: [array] - Global cookies to be sent with requests\nrawheaders: [array] - Request headers\ndomain_cookies: [array] - Domain-specific cookies\nheaders: [array] - Response headers\nuseragents: [array] - List of user agent strings\nclient_ips: [array] - List of client IP addresses for spoofing\nproxies: [array] - List of proxy servers\nraw: [string] - Raw response including headers\nhead: [string] - Response headers\ncontent: [string] - Response body\ntext: [string] - Processed response text\ninfo: [array] - cURL request information\nhistory: [int] - HTTP redirect history status code\nstatus_code: [int] - HTTP response status code\nerror: [string] - Error message if request fails\n\nMethods:\n\ninit(): [void] -> [resource] - Initializes the cURL session with default settings\nrequest($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL) -> [string|bool] - Executes an HTTP request to the specified URL with given parameters\n_is_url($url) -> [bool] - Validates if the input string is a valid URL\nget_cookies($domain = '') -> [array] - Retrieves cookies for a specific domain\nget_response_headers($header) -> [array] - Parses response headers\nget_response_cookies($header, $domain) -> [void] - Extracts cookies from response headers\nsplit_header_body() -> [array] - Splits response into headers and body\nget_history($header) -> [int] - Gets redirect history from response headers\nget_mimetype($filepath) -> [string] - Gets MIME type of a file",
    "Canonical_solution": "namespace phpspider\\core;\n\nclass requests\n{\n    const VERSION = '2.0.1';\n    protected static $ch = null;\n\n    public static $timeout = 15;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = array();\n    public static $rawheaders = array();\n    public static $domain_cookies = array();\n    public static $headers = array();\n    public static $useragents = array(\"requests/2.0.0\");\n    public static $client_ips = array();\n    public static $proxies = array();\n    public static $raw = \"\";\n    public static $head = \"\";\n    public static $content = \"\";\n    public static $text = \"\";\n    public static $info = array();\n    public static $history = 302;\n    public static $status_code = 0;\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!is_resource(self::$ch))\n        {\n            self::$ch = curl_init();\n            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt(self::$ch, CURLOPT_HEADER, false);\n            curl_setopt(self::$ch, CURLOPT_USERAGENT, \"phpspider-requests/\".self::VERSION);\n            if (is_array(self::$timeout))\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, self::$timeout[0]);\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout[1]);\n            }\n            else\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, ceil(self::$timeout / 2));\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n            }\n            curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt(self::$ch, CURLOPT_NOSIGNAL, true);\n        }\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL)\n    {\n        $method = strtoupper($method);\n        if(!self::_is_url($url))\n        {\n            self::$error = \"You have requested URL ({$url}) is not a valid HTTP address\";\n            return false;\n        }\n\n        if ($method == 'GET' && !empty($fields))\n        {\n            $url = $url.(strpos($url, '?') === false ? '?' : '&').http_build_query($fields);\n        }\n\n        $parse_url = parse_url($url);\n        if (empty($parse_url) || empty($parse_url['host']) || !in_array($parse_url['scheme'], array('http', 'https')))\n        {\n            self::$error = \"No connection adapters were found for '{$url}'\";\n            return false;\n        }\n\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n\n        if ($method != 'GET')\n        {\n            if ($method == 'POST')\n            {\n                $tmpheaders = array_change_key_case(self::$rawheaders, CASE_LOWER);\n                if (isset($tmpheaders['content-type']) && $tmpheaders['content-type'] == 'application/json')\n                {\n                    curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n                }\n                else\n                {\n                    curl_setopt(self::$ch, CURLOPT_POST, true);\n                }\n\n                $file_fields = array();\n                if (!empty($files))\n                {\n                    foreach ($files as $postname => $file)\n                    {\n                        $filepath = realpath($file);\n                        if (!file_exists($filepath))\n                        {\n                            continue;\n                        }\n                        $filename = basename($filepath);\n                        $type = self::get_mimetype($filepath);\n                        $file_fields[$postname] = curl_file_create($filepath, $type, $filename);\n                    }\n                }\n\n                if (empty($file_fields))\n                {\n                    if (is_array($fields))\n                    {\n                        $fields = http_build_query($fields);\n                    }\n                }\n                else\n                {\n                    if (is_array($fields) && !empty($fields))\n                    {\n                        $fields = array_merge($fields, $file_fields);\n                    }\n                    else\n                    {\n                        $fields = $file_fields;\n                    }\n                }\n                curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n            }\n            else\n            {\n                self::$rawheaders['X-HTTP-Method-Override'] = $method;\n                curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n            }\n        }\n\n        $cookies = self::get_cookies();\n        $domain_cookies = self::get_cookies($parse_url['host']);\n        $cookies = array_merge($cookies, $domain_cookies);\n        if (!empty($cookies))\n        {\n            foreach ($cookies as $key=>$value)\n            {\n                $cookie_arr[] = $key.'='.$value;\n            }\n            $cookies = implode('; ', $cookie_arr);\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);\n        }\n\n        if (!empty(self::$useragents))\n        {\n            $key = rand(0, count(self::$useragents) - 1);\n            self::$rawheaders['User-Agent'] = self::$useragents[$key];\n        }\n\n        if (!empty(self::$client_ips))\n        {\n            $key = rand(0, count(self::$client_ips) - 1);\n            self::$rawheaders['CLIENT-IP'] = self::$client_ips[$key];\n            self::$rawheaders['X-FORWARDED-FOR'] = self::$client_ips[$key];\n        }\n\n        if (self::$rawheaders)\n        {\n            $http_headers = array();\n            foreach (self::$rawheaders as $k=>$v)\n            {\n                $http_headers[] = $k.': '.$v;\n            }\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $http_headers);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_ENCODING, 'gzip');\n\n        if ($parse_url['scheme'] == 'https')\n        {\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if (self::$proxies)\n        {\n            $key = rand(0, count(self::$proxies) - 1);\n            $proxy = self::$proxies[$key];\n            curl_setopt(self::$ch, CURLOPT_PROXY, $proxy);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        if ($allow_redirects)\n        {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (self::$raw === false)\n        {\n            self::$error = 'Curl error: ' . curl_error(self::$ch);\n        }\n\n        curl_close(self::$ch);\n\n        list($header, $text) = self::split_header_body();\n        self::$history = self::get_history($header);\n        self::$headers = self::get_response_headers($header);\n        self::get_response_cookies($header, $parse_url['host']);\n        return $text;\n    }\n\n    private static function _is_url($url)\n    {\n        $pattern = \"/\\b(([\\w-]+:\\/\\/?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/)))/\";\n        return preg_match($pattern, $url) ? true : false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class requests {\n    public static $VERSION = '1.0.0';\n    private $ch;\n    private $timeout = 30;\n    private $encoding = null;\n    private $output_encoding = null;\n    private $cookies = [];\n    private $rawheaders = [];\n    private $domain_cookies = [];\n    private $headers = [];\n    private $useragents = ['User-Agent: Mozilla/5.0'];\n    private $client_ips = [];\n    private $proxies = [];\n    private $raw = '';\n    private $head = '';\n    private $content = '';\n    private $text = '';\n    private $info = [];\n    private $history = 0;\n    private $status_code = 0;\n    private $error = '';\n\n    public function init() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->ch, CURLOPT_HEADER, true);\n        return $this->ch;\n    }\n\n    public function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!$this->_is_url($url)) {\n            $this->error = 'Invalid URL';\n            return false;\n        }\n\n        if (!$this->ch) {\n            $this->ch = $this->init();\n        }\n\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n\n        $headers = $this->rawheaders;\n        $headers[] = 'User-Agent: ' . $this->useragents[0];\n        $headers[] = 'Accept: */*';\n        $headers[] = 'Connection: close';\n        $headers[] = 'Cookie: ' . http_build_query($this->cookies);\n        $this->rawheaders = $headers;\n\n        curl_setopt($this->ch, CURLOPT_HTTPHEADER, $headers);\n\n        if (!empty($this->proxies)) {\n            $proxy = $this->proxies[0];\n            curl_setopt($this->ch, CURLOPT_PROXY, $proxy['host'] . ':' . $proxy['port']);\n            if (!empty($proxy['user'])) {\n                curl_setopt($this->ch, CURLOPT_PROXYUSERPWD, $proxy['user'] . ':' . $proxy['password']);\n            }\n        }\n\n        if (!empty($files)) {\n            $post_fields = [];\n            foreach ($files as $name => $file) {\n                $post_fields[$name] = new CURLFile($file['tmp_name'], $file['type'], $file['name']);\n            }\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $post_fields);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($fields));\n        }\n\n        curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, $allow_redirects);\n        if ($cert) {\n            curl_setopt($this->ch, CURLOPT_SSLCERT, $cert);\n        }\n\n        $response = curl_exec($this->ch);\n        if ($response === false) {\n            $this->error = curl_error($this->ch);\n            return false;\n        }\n\n        $this->info = curl_getinfo($this->ch);\n        $this->status_code = $this->info['http_code'];\n        $this->raw = $response;\n        $this->split_header_body();\n\n        $this->get_response_cookies($this->head, '');\n\n        return $this->content;\n    }\n\n    private function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public function get_cookies($domain = '') {\n        if (empty($domain)) {\n            return $this->cookies;\n        }\n        return isset($this->domain_cookies[$domain]) ? $this->domain_cookies[$domain] : [];\n    }\n\n    public function get_response_headers($header) {\n        $headers = [];\n        $lines = explode(\"\\n\", $this->head);\n        foreach ($lines as $line) {\n            if (trim($line) === '') continue;\n            list($name, $value) = explode(':', $line, 2);\n            $headers[trim($name)] = trim($value);\n        }\n        if (isset($headers[$header])) {\n            return [$headers[$header]];\n        }\n        return [];\n    }\n\n    public function get_response_cookies($header, $domain) {\n        $cookies = [];\n        $lines = explode(\"\\n\", $this->head);\n        foreach ($lines as $line) {\n            if (stripos($line, 'set-cookie:') === 0) {\n                $cookie = trim(substr($line, 13));\n                parse_str($cookie, $cookie_data);\n                $cookies[] = $cookie_data;\n            }\n        }\n        if (!empty($domain)) {\n            $this->domain_cookies[$domain] = $cookies;\n        }\n        return $cookies;\n    }\n\n    private function split_header_body() {\n        $headers = '';\n        $body = '';\n        $lines = explode(\"\\n\", $this->raw);\n        $i = 0;\n        while ($i < count($lines) && trim($lines[$i]) !== '') {\n            $headers .= $lines[$i] . \"\\n\";\n            $i++;\n        }\n        $body = implode(\"\\n\", array_slice($lines, $i));\n        $this->head = trim($headers);\n        $this->content = $body;\n        return [$this->head, $this->content];\n    }\n\n    public function get_history($header) {\n        return $this->info['redirect_count'];\n    }\n\n    private function get_mimetype($filepath) {\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        $mimetype = finfo_file($finfo, $filepath);\n        finfo_close($finfo);\n        return $mimetype;\n    }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a PHP class that utilizes the Guzzle HTTP client to synchronize video processing tasks with a remote API endpoint, handling request signing and response parsing.\n\nClass Description: The SyncVideo class provides functionality to send video processing requests to a remote API endpoint using HTTP POST requests. It handles request signing, timeout configuration, and response parsing.\n\nAttributes:\n- config: [Upyun\\Config] - Configuration object containing service credentials, timeout settings, and endpoint information\n\nMethods:\n- __construct(Config $config) -> [void] - Initializes the class with the provided configuration object\n- process(array $params, string $path) -> [array] - Sends a synchronized video processing request to the specified path with the given parameters, returns the parsed JSON response",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\n\nclass SyncVideo {\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    public function process($params, $path) {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $path = '/' . $this->config->serviceName . $path;\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getSyncVideoEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'json' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'base_uri' => $config->getEndpoint(),\n            'timeout' => $config->getTimeout(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $sortedParams = $this->sortParams($params);\n        $stringToSign = $path . http_build_query($sortedParams);\n        $signature = hash_hmac('sha1', $stringToSign, $this->config->getSecretKey());\n        $params['signature'] = $signature;\n\n        $response = $this->client->post($path, ['form_params' => $params]);\n\n        $body = $response->getBody();\n        $result = json_decode($body, true);\n\n        if ($response->getStatusCode() !== 200) {\n            throw new \\Exception(\"Request failed with status code: \" . $response->getStatusCode());\n        }\n\n        return $result;\n    }\n\n    private function sortParams(array $params): array {\n        ksort($params);\n        return $params;\n    }\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL, supporting various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive HTTP client implementation using PHP's cURL extension. It supports standard HTTP methods (GET, POST, PUT, DELETE, HEAD), handles request/response processing, streaming uploads/downloads, authentication, proxy configuration, and SSL verification.\n\nAttributes:\n\nrequest_url: string - The URL to send the request to\nrequest_headers: array - Associative array of request headers\nrequest_body: string - The request body content\nresponse: string - The complete response including headers and body\nresponse_headers: array - Parsed response headers\nresponse_body: string - The response body content\nresponse_code: int - HTTP response status code\nresponse_info: array - Additional cURL response information\ncurl_handle: resource - The cURL handle resource\nmethod: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: array|null - Proxy configuration details\nusername: string|null - Username for authentication\npassword: string|null - Password for authentication\ncurlopts: array|null - Additional cURL options\ndebug_mode: bool - Whether to enable debug mode\nrequest_class: string - Class name for request handling\nresponse_class: string - Class name for response handling\nuseragent: string - User-Agent header value\nread_file: string|null - File path for streaming read\nread_stream: resource|null - Stream resource for reading\nread_stream_size: int|null - Size of read stream\nread_stream_read: int - Bytes read from stream\nwrite_file: string|null - File path for streaming write\nwrite_stream: resource|null - Stream resource for writing\nseek_position: int|null - Position to seek in read stream\ncacert_location: mixed - CA certificate location\nssl_verification: bool - Whether to verify SSL\nregistered_streaming_read_callback: callable|null - Callback for streaming read\nregistered_streaming_write_callback: callable|null - Callback for streaming write\ntimeout: int - Request timeout in seconds\nconnect_timeout: int - Connection timeout in seconds\n\nMethods:\n\n__construct(string $url = null, string $proxy = null, array $helpers = null) -> self - Initializes the request with URL and optional proxy/helpers\n__destruct() -> self - Cleans up open file handles\nset_credentials(string $user, string $pass) -> self - Sets authentication credentials\nadd_header(string $key, string $value) -> self - Adds a request header\nremove_header(string $key) -> self - Removes a request header\nset_method(string $method) -> self - Sets the HTTP method\nset_useragent(string $ua) -> self - Sets the User-Agent header\nset_body(string $body) -> self - Sets the request body\nset_request_url(string $url) -> self - Sets the request URL\nset_curlopts(array $curlopts) -> self - Sets additional cURL options\nset_read_stream_size(int $size) -> self - Sets the read stream size\nset_read_stream(resource $resource, int $size = null) -> self - Sets the read stream resource\nset_read_file(string $location) -> self - Sets a file for streaming read\nset_write_stream(resource $resource) -> self - Sets the write stream resource\nset_write_file(string $location) -> self - Sets a file for streaming write\nset_proxy(string $proxy) -> self - Configures proxy settings\nset_seek_position(int $position) -> self - Sets the seek position for read stream\nregister_streaming_read_callback(callable $callback) -> self - Registers streaming read callback\nregister_streaming_write_callback(callable $callback) -> self - Registers streaming write callback\nstreaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Callback for streaming read\nstreaming_write_callback(resource $curl_handle, string $data) -> int - Callback for streaming write\nprep_request() -> resource - Prepares and returns a cURL handle\nprocess_response(resource $curl_handle = null, string $response = null) -> mixed - Processes the cURL response\nsend_request(bool $parse = false) -> mixed - Sends the request and returns response\nsend_multi_request(array $handles, array $opt = null) -> array - Sends multiple requests in parallel",
    "Canonical_solution": "namespace NOS\\Http;\n\nclass RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'NOS\\Http\\RequestCore';\n    public $response_class = 'NOS\\Http\\ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n    public $timeout = 5184000;\n    public $connect_timeout = 10;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer)$position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false) {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification) {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        } else {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        } elseif (is_string($this->cacert_location)) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1]) ? $kv[1] : '';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                return new ResponseCore($this->response_headers, $this->response_body, $this->response_code);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false) {\n            throw new RequestCore_Exception('cURL resource: ' . (string)$curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null)\n    {\n        set_time_limit(0);\n        if (count($handles) === 0) return array();\n        if (!$opt) $opt = array();\n\n        $limit = isset($opt['limit']) ? $opt['limit'] : -1;\n        $handle_list = $handles;\n        $http = new $this->request_class();\n        $multi_handle = curl_multi_init();\n        $handles_post = array();\n        $added = count($handles);\n        $last_handle = null;\n        $count = 0;\n        $i = 0;\n\n        while ($i < $added) {\n            if ($limit > 0 && $i >= $limit) break;\n            curl_multi_add_handle($multi_handle, array_shift($handles));\n            $i++;\n        }\n\n        do {\n            $active = false;\n            while (($status = curl_multi_exec($multi_handle, $active)) === CURLM_CALL_MULTI_PERFORM) {\n                if (count($handles) > 0) break;\n            }\n\n            $to_process = array();\n            while ($done = curl_multi_info_read($multi_handle)) {\n                if ($done['result'] > 0) {\n                    throw new RequestCore_Exception('cURL resource: ' . (string)$done['handle'] . '; cURL error: ' . curl_error($done['handle']) . ' (' . $done['result'] . ')');\n                } elseif (!isset($to_process[(int)$done['handle']])) {\n                    $to_process[(int)$done['handle']] = $done;\n                }\n            }\n\n            foreach ($to_process as $pkey => $done) {\n                $response = $http->process_response($done['handle'], curl_multi_getcontent($done['handle']));\n                $key = array_search($done['handle'], $handle_list, true);\n                $handles_post[$key] = $response;\n\n                if (count($handles) > 0) {\n                    curl_multi_add_handle($multi_handle, array_shift($handles));\n                }\n\n                curl_multi_remove_handle($multi_handle, $done['handle']);\n                curl_close($done['handle']);\n            }\n        } while ($active || count($handles_post) < $added);\n\n        curl_multi_close($multi_handle);\n        ksort($handles_post, SORT_N",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class RequestCore {\n    public string $request_url = '';\n    public array $request_headers = [];\n    public string $request_body = '';\n    public string $response = '';\n    public array $response_headers = [];\n    public string $response_body = '';\n    public int $response_code = 0;\n    public array $response_info = [];\n    public resource $curl_handle;\n    public string $method = 'GET';\n    public ?array $proxy = null;\n    public ?string $username = null;\n    public ?string $password = null;\n    public ?array $curlopts = null;\n    public bool $debug_mode = false;\n    public string $request_class = '';\n    public string $response_class = '';\n    public string $useragent = 'RequestCore/1.0';\n    public ?string $read_file = null;\n    public ?resource $read_stream = null;\n    public ?int $read_stream_size = null;\n    public int $read_stream_read = 0;\n    public ?string $write_file = null;\n    public ?resource $write_stream = null;\n    public ?int $seek_position = null;\n    public mixed $cacert_location = null;\n    public bool $ssl_verification = true;\n    public ?callable $registered_streaming_read_callback = null;\n    public ?callable $registered_streaming_write_callback = null;\n    public int $timeout = 30;\n    public int $connect_timeout = 10;\n\n    public function __construct(string $url = null, string $proxy = null, array $helpers = null) {\n        if ($url !== null) $this->set_request_url($url);\n        if ($proxy !== null) $this->set_proxy($proxy);\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->{$key} = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) curl_close($this->curl_handle);\n        if ($this->read_file && is_resource($this->read_stream)) fclose($this->read_stream);\n        if ($this->write_file && is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials(string $user, string $pass): self {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header(string $key, string $value): self {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header(string $key): self {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method(string $method): self {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent(string $ua): self {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body(string $body): self {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url(string $url): self {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts(array $curlopts): self {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size(int $size): self {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream(resource $resource, int $size = null): self {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file(string $location): self {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream(resource $resource): self {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file(string $location): self {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy(string $proxy): self {\n        $this->proxy = explode(':', $proxy);\n        return $this;\n    }\n\n    public function set_seek_position(int $position): self {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback(callable $callback): self {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback(callable $callback): self {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public static function streaming_read_callback(resource $curl_handle, resource $file_handle, int $length): string {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        return $data;\n    }\n\n    public static function streaming_write_callback(resource $curl_handle, string $data): int {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return fwrite($curl_handle, $data);\n    }\n\n    public function prep_request(): resource {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy[0]);\n            if (isset($this->proxy[1])) curl_setopt($this->curl_handle, CURLOPT_PROXYPORT, $this->proxy[1]);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            if ($this->cacert_location) {\n                curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n            }\n        }\n\n        if ($this->read_file) {\n            $file = fopen($this->read_file, 'rb');\n            fseek($file, $this->seek_position ?? 0);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $file);\n            $this->read_stream = $file;\n        } elseif ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $this->read_stream);\n        }\n\n        if ($this->write_file) {\n            $file = fopen($this->write_file, 'wb');\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_WRITEDATA, $file);\n            $this->write_stream = $file;\n        } elseif ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_WRITEDATA, $this->write_stream);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response(resource $curl_handle = null, string $response = null): mixed {\n        if ($curl_handle === null) $curl_handle = $this->curl_handle;\n        if ($response === null) $response = curl_exec($curl_handle);\n\n        if ($this->debug_mode) {\n            $this->response = $response;\n        }\n\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = explode(\"\\r\\n\", substr($response, 0, $header_size));\n        $this->response_body = substr($response, $header_size);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n\n        return $this->response;\n    }\n\n    public function send_request(bool $parse = false): mixed {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            $this->response = $this->process_response();\n        }\n        return $this->response;\n    }\n\n    public function send_multi_request(array $handles, array $opt = null): array {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $key => $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n\n        $active = null;\n        $results = [];\n\n        do {\n            $mrc = curl_multi_exec($multi_handle, $active);\n            if ($mrc == CURLM_OK) {\n                while ($info = curl_multi_info_read($multi_handle)) {\n                    $index = $info['handle'];\n                    $results[$index] = $this->process_response($info['handle']);\n                }\n            }\n        } while ($mrc == CURLM_OK && $active);\n\n        curl_multi_close($multi_handle);\n        return $results;\n    }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a PHP class that handles webhook triggering using Guzzle HTTP client, including formatting headers and payload data, and processing responses or errors.\n\nClass Description: The WebhookService class provides functionality to trigger webhooks by sending HTTP requests to specified endpoints. It handles request configuration, response processing, and error handling.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- triggerWebhook(mixed $data) -> [array] - Sends an HTTP request to the specified endpoint with formatted headers and payload\n  Parameters:\n    - $data: [mixed] - Contains request details including method, endpoint, headers, and payload\n  Returns:\n    - [array] - Response status ('success' or 'error') and content or error message\n- formatHeaders(array $headers) -> [array] - Formats headers array into key-value pairs\n  Parameters:\n    - $headers: [array] - Raw headers array to be formatted\n  Returns:\n    - [array] - Formatted headers as key-value pairs\n- formatPayload($payload) -> [array|string] - Formats payload data into key-value pairs\n  Parameters:\n    - $payload: [mixed] - Raw payload data to be formatted\n  Returns:\n    - [array|string] - Formatted payload as key-value pairs or original string if not array",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Message;\n\nclass WebhookService\n{\n    protected Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client;\n    }\n\n    public function triggerWebhook(mixed $data): array\n    {\n        $options = [\n            'headers'     => $this->formatHeaders(json_decode($data['headers'], true)),\n            'form_params' => $this->formatPayload(json_decode($data['payload'], true)),\n        ];\n\n        try {\n            $response = $this->client->request(\n                $data['method'],\n                $data['end_point'],\n                $options,\n            );\n\n            return [\n                'status'   => 'success',\n                'response' => $response->getBody()->getContents(),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status'   => 'error',\n                'response' => $e->hasResponse() ? Message::toString($e->getResponse()) : $e->getMessage(),\n            ];\n        }\n    }\n\n    protected function formatHeaders(array $headers): array\n    {\n        $formattedHeaders = [];\n\n        foreach ($headers as $header) {\n            $formattedHeaders[$header['key']] = $header['value'];\n        }\n\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload): array|string\n    {\n        if (! is_array($payload)) {\n            $payload = json_decode($payload, true);\n        }\n\n        $formattedPayload = [];\n\n        if (\n            isset($payload['key'])\n            && isset($payload['value'])\n        ) {\n            $formattedPayload[$payload['key']] = $payload['value'];\n        } else {\n            foreach ($payload as $item) {\n                $formattedPayload[$item['key']] = $item['value'];\n            }\n        }\n\n        return $formattedPayload;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new \\GuzzleHttp\\Client([\n            'timeout' => 5.0,\n        ]);\n    }\n\n    public function triggerWebhook($data) {\n        $method = $data['method'];\n        $endpoint = $data['endpoint'];\n        $headers = $data['headers'] ?? [];\n        $payload = $data['payload'] ?? [];\n\n        $formattedHeaders = $this->formatHeaders($headers);\n        $formattedPayload = $this->formatPayload($payload);\n\n        try {\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $formattedHeaders,\n                'body' => $formattedPayload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => $response->getBody()->getContents(),\n            ];\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        return $headers;\n    }\n\n    private function formatPayload($payload): array|string {\n        if (is_array($payload)) {\n            return $payload;\n        } else {\n            return (string)$payload;\n        }\n    }\n}"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: BCS_RequestCore is a comprehensive HTTP client class that provides a flexible interface for making HTTP requests using PHP's cURL extension. It supports all major HTTP methods (GET, POST, PUT, DELETE, HEAD), handles authentication, proxy configuration, streaming uploads/downloads, and provides detailed response information.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [string] - The complete response from the server\nresponse_headers: [array] - Parsed response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - HTTP response status code\nresponse_info: [array] - Additional response information from cURL\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Username for authentication\npassword: [string|null] - Password for authentication\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Whether to enable debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for streaming upload\nread_stream: [resource|null] - Stream resource for reading\nread_stream_size: [int|null] - Size of the read stream\nread_stream_read: [int] - Bytes read from the stream\nwrite_file: [string|null] - File path for streaming download\nwrite_stream: [resource|null] - Stream resource for writing\nseek_position: [int|null] - Position to seek in the read stream\nregistered_streaming_read_callback: [callable|null] - Callback for streaming read\nregistered_streaming_write_callback: [callable|null] - Callback for streaming write\n\nMethods:\n\n__construct([string|null] $url, [array|null] $proxy, [array|null] $helpers) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct() -> [self] - Cleans up any open file handles\nset_credentials([string] $user, [string] $pass) -> [self] - Sets authentication credentials\nadd_header([string] $key, [string] $value) -> [self] - Adds a request header\nremove_header([string] $key) -> [self] - Removes a request header\nset_method([string] $method) -> [self] - Sets the HTTP method\nset_useragent([string] $ua) -> [self] - Sets the user agent string\nset_body([string] $body) -> [self] - Sets the request body\nset_request_url([string] $url) -> [self] - Sets the request URL\nset_curlopts([array] $curlopts) -> [self] - Sets additional cURL options\nset_read_stream_size([int] $size) -> [self] - Sets the read stream size\nset_read_stream([resource] $resource, [int|null] $size) -> [self] - Sets the read stream resource\nset_read_file([string] $location) -> [self] - Sets a file to read from\nset_write_stream([resource] $resource) -> [self] - Sets the write stream resource\nset_write_file([string] $location) -> [self] - Sets a file to write to\nset_proxy([string] $proxy) -> [self] - Configures proxy settings\nset_seek_position([int|null] $position) -> [self] - Sets the seek position for read stream\nregister_streaming_read_callback([callable] $callback) -> [self] - Registers a streaming read callback\nregister_streaming_write_callback([callable] $callback) -> [self] - Registers a streaming write callback\nstreaming_read_callback([resource] $curl_handle, [resource] $file_handle, [int] $length) -> [string] - Callback for reading from stream\nstreaming_write_callback([resource] $curl_handle, [string] $data) -> [int] - Callback for writing to stream\nprep_request() -> [resource] - Prepares and returns a cURL handle\nprocess_response([resource|null] $curl_handle, [string|null] $response) -> [mixed] - Processes the cURL response\nsend_request([bool] $parse) -> [mixed] - Sends the request and returns response\nisBaeEnv() -> [bool] - Checks if running in Baidu App Engine environment\nget_response_header([string|null] $header) -> [mixed] - Gets response header(s)\nget_response_body() -> [string] - Gets the response body\nget_response_code() -> [int] - Gets the response status code",
    "Canonical_solution": "namespace Think\\Upload\\Driver\\Bcs;\n\nclass BCS_RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new BCS_RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n            if ($written_last === false) {\n                return $written_total;\n            }\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new BCS_RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                $class = '\\Think\\Upload\\Driver\\Bcs\\\\' . $this->response_class;\n                return new $class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        if (false === $this->isBaeEnv()) {\n            set_time_limit(0);\n        }\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false ||\n            ($this->method === self::HTTP_GET &&\n             curl_errno($curl_handle) === CURLE_PARTIAL_FILE)) {\n            throw new BCS_RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    private function isBaeEnv()\n    {\n        if (isset($_SERVER['HTTP_HOST'])) {\n            $host = $_SERVER['HTTP_HOST'];\n            $pos = strpos($host, '.');\n            if ($pos !== false) {\n                $substr = substr($host, $pos + 1);\n                if ($substr == 'duapp.com') {\n                    return true;\n                }\n            }\n        }\n        if (isset($_SERVER[\"HTTP_BAE_LOGID\"])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = [];\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    public function __construct($url = null, $proxy = null, $helpers = []) {\n        $this->request_class = isset($helpers['request']) ? $helpers['request'] : 'BCS_Request';\n        $this->response_class = isset($helpers['response']) ? $helpers['response'] : 'BCS_Response';\n        $this->set_request_url($url);\n        $this->set_proxy($proxy);\n    }\n\n    public function __destruct() {\n        if ($this->read_file && is_resource($this->read_file)) fclose($this->read_file);\n        if ($this->write_file && is_resource($this->write_file)) fclose($this->write_file);\n        if ($this->read_stream && is_resource($this->read_stream)) fclose($this->read_stream);\n        if ($this->write_stream && is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        if (isset($this->request_headers[$key])) unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $allowed_methods = ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'];\n        if (in_array($method, $allowed_methods)) {\n            $this->method = strtoupper($method);\n        }\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = fopen($location, 'rb');\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = fopen($location, 'wb');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        if (is_string($proxy)) {\n            $parts = explode(':', $proxy);\n            $this->proxy = ['host' => $parts[0], 'port' => isset($parts[1]) ? $parts[1] : 8080];\n        } elseif (is_array($proxy)) {\n            $this->proxy = $proxy;\n        }\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->read_file && is_resource($this->read_file)) {\n            fseek($this->read_file, $this->seek_position ?? 0);\n            $data = fread($this->read_file, $length);\n            $this->read_stream_read += strlen($data);\n            return $data;\n        }\n        return '';\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->write_file && is_resource($this->write_file)) {\n            fwrite($this->write_file, $data);\n            return strlen($data);\n        } elseif ($this->write_stream && is_resource($this->write_stream)) {\n            fwrite($this->write_stream, $data);\n            return strlen($data);\n        }\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($this->curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        curl_setopt($this->curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, 30);\n        curl_setopt($this->curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        curl_setopt($this->curl_handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy['host'] . ':' . $this->proxy['port']);\n            if ($this->username && $this->password) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXYUSERPWD, $this->username . ':' . $this->password);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        if ($this->read_file || $this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_file || $this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = explode(\"\\r\\n\", substr($response, 0, $header_size));\n        $this->response_body = substr($response, $header_size);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        return $this;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($this->debug_mode) {\n            error_log(\"cURL Info: \" . print_r($this->response_info, true));\n        }\n        if ($parse) {\n            $this->process_response($this->curl_handle, $response);\n            $this->response = $this->response_body;\n            return $this;\n        } else {\n            return $response;\n        }\n    }\n\n    public function isBaeEnv() {\n        return defined('BAE_ENV') || (isset($_SERVER['HTTP_BAE_ENV']) && $_SERVER['HTTP_BAE_ENV'] !== '');\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            foreach ($this->response_headers as $h) {\n                if (stripos($h, $header) === 0) {\n                    return trim(substr($h, strlen($header)));\n                }\n            }\n            return null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}"
  }
]