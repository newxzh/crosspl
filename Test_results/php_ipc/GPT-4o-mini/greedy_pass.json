[
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a PHP class that handles downloading and processing images with size limitations and compression capabilities.\n\nClass Description: The Picture class is designed to download images from given URLs while enforcing size limits and compression thresholds. It uses cURL for HTTP requests and provides mechanisms to control download size and handle response data efficiently.\n\nAttributes:\n- compressLimit: [int] - The maximum size (in bytes) for downloaded content before compression is considered\n- sizeLimit: [int] - The maximum dimension (in pixels) for the image width/height\n\nMethods:\n- downloadImage: [downloadImage]($url: string) -> string - Downloads an image from the specified URL while respecting size limits. Returns the image body content.\n  - $url: The URL of the image to download\n  - Returns: The binary content of the downloaded image",
    "Canonical_solution": "namespace App\\Widgets\\Picture;\n\nuse Movim\\Image;\n\nclass Picture\n{\n    private $compressLimit = SMALL_PICTURE_LIMIT * 6;\n    private $sizeLimit = 1920;\n\n    public function downloadImage($url)\n    {\n        $headers = requestHeaders($url);\n        $chunks = '';\n\n        $max = $headers[\"download_content_length\"] > $this->compressLimit ? $this->compressLimit : $headers[\"download_content_length\"];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_RANGE, '0-' . $max);\n        curl_setopt($ch, CURLOPT_BUFFERSIZE, 12800);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_USERAGENT, DEFAULT_HTTP_USER_AGENT);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, function ($ch, $chunk) use (&$chunks) {\n            $chunks .= $chunk;\n            return (strlen($chunks) >= $this->compressLimit + 1) ? 0 : strlen($chunk);\n        });\n\n        curl_exec($ch);\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        curl_close($ch);\n\n        $headers = preg_split('/[\\r\\n]+/', substr($chunks, 0, $headerSize));\n        $body = substr($chunks, $headerSize);\n\n        return $body;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $imageData = curl_exec($ch);\n        curl_close($ch);\n\n        if (strlen($imageData) > $this->compressLimit) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        return $imageData;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        if ($image === false) {\n            return $imageData;\n        }\n\n        $width = imagesx($image);\n        $height = imagesy($image);\n\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            $ratio = min($this->sizeLimit / $width, $this->sizeLimit / $height);\n            $newWidth = (int)($width * $ratio);\n            $newHeight = (int)($height * $ratio);\n            $resizedImage = imagecreatetruecolor($newWidth, $newHeight);\n            imagecopyresampled($resizedImage, $image, 0, 0, 0, 0, $newWidth, $newHeight, $width, $height);\n            ob_start();\n            imagejpeg($resizedImage, null, 75);\n            $compressedData = ob_get_contents();\n            ob_end_clean();\n            imagedestroy($resizedImage);\n            imagedestroy($image);\n            return $compressedData;\n        }\n\n        ob_start();\n        imagejpeg($image, null, 75);\n        $compressedData = ob_get_contents();\n        ob_end_clean();\n        imagedestroy($image);\n        return $compressedData;\n    }\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxies and basic authentication.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, proxy configuration, timeout settings, and basic authentication. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'assign': (string, optional) Template variable name to assign content to\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (int, optional) Proxy server port\n  - 'timeout': (int, optional) Connection timeout in seconds (default: 30)\n- $template: (object) The template object for assigning content (when 'assign' parameter is used)\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Assigns content to the specified template variable and returns nothing if 'assign' parameter is provided\n- Returns nothing and triggers notice on error conditions (invalid URL, connection failure)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            \n            $_is_proxy = false;\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        $proxy_port = (int)$param_value;\n                        break;\n                    case \"timeout\":\n                        $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "right_result": "function fetchContent($params, $template) {\n    if (!isset($params['file']) || !filter_var($params['file'], FILTER_VALIDATE_URL)) {\n        trigger_error(\"Invalid URL\", E_USER_NOTICE);\n        return;\n    }\n\n    $url = parse_url($params['file']);\n    $host = $url['host'];\n    $port = isset($url['port']) ? $url['port'] : 80;\n    $path = isset($url['path']) ? $url['path'] : '/';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $host = $params['proxy_host'];\n        $port = $params['proxy_port'];\n        $path = $url['scheme'] . '://' . $url['host'] . $url['path'];\n    }\n\n    $fp = @fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET $path HTTP/1.1\\r\\n\";\n    $request .= \"Host: \" . $url['host'] . \"\\r\\n\";\n    if (isset($params['username']) && isset($params['password'])) {\n        $auth = base64_encode($params['username'] . ':' . $params['password']);\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"Connection: close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    \n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n        return;\n    }\n\n    return $body;\n}"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified URL or file path, with support for HTTP requests using fsockopen, including handling of proxy servers, authentication, and security checks.\n\nFunction Description: The function retrieves content from either a local file or a remote HTTP resource. For HTTP requests, it establishes a socket connection, sends a GET request with appropriate headers (including authentication if provided), reads the response, and extracts the content body. It includes security checks for trusted URIs and resource directories when operating within a Smarty template context.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string) Required. The URL or file path to fetch\n  - 'assign': (string) Optional. Template variable name to assign the content to\n  - 'assign_headers': (string) Optional. Template variable name to assign headers to\n  - 'user': (string) Optional. Username for HTTP authentication\n  - 'pass': (string) Optional. Password for HTTP authentication\n  - 'proxy_host': (string) Optional. Proxy server hostname\n  - 'proxy_port': (integer) Optional. Proxy server port\n- $template: The Smarty template object (used for security checks and variable assignment)\n\nOutput:\n- Returns the fetched content as a string if no 'assign' parameter is provided\n- Assigns the content to the specified template variable if 'assign' parameter is present\n- Returns nothing if security checks fail or if there are errors in fetching the content",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\",E_USER_NOTICE);\n        return;\n    }\n\n    if (stripos($params['file'], 'file://') === 0) {\n        $params['file'] = substr($params['file'], 7);\n    }\n\n    $protocol = strpos($params['file'], '://');\n    if ($protocol !== false) {\n        $protocol = strtolower(substr($params['file'], 0, $protocol));\n    }\n\n    if (isset($template->smarty->security_policy)) {\n        if ($protocol) {\n            if (!$template->smarty->security_policy->isTrustedUri($params['file'])) {\n                return;\n            }\n        } else {\n            if (!$template->smarty->security_policy->isTrustedResourceDir($params['file'])) {\n                return;\n            }\n        }\n    }\n\n    $content = '';\n    if ($protocol == 'http') {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = !empty($uri_parts['user']) ? $uri_parts['user'] : '';\n            $pass = !empty($uri_parts['pass']) ? $uri_parts['pass'] : '';\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"file\":\n                    case \"assign\":\n                    case \"assign_headers\":\n                        break;\n                    case \"user\":\n                        if (!empty($param_value)) $user = $param_value;\n                        break;\n                    case \"pass\":\n                        if (!empty($param_value)) $pass = $param_value;\n                        break;\n                    case \"proxy_host\":\n                        if (!empty($param_value)) $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $proxy_port = (int) $param_value;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host,$proxy_port,$errno,$errstr,$timeout);\n            } else {\n                $fp = fsockopen($server_name,$port,$errno,$errstr,$timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\",E_USER_NOTICE);\n                return;\n            } else {\n                if ($_is_proxy) {\n                    fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n                } else {\n                    fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n                }\n                fputs($fp, \"Host: $host\\r\\n\");\n                if (!empty($user) && !empty($pass)) {\n                    fputs($fp, \"Authorization: BASIC \".base64_encode(\"$user:$pass\").\"\\r\\n\");\n                }\n                fputs($fp, \"\\r\\n\");\n\n                while (!feof($fp)) {\n                    $content .= fgets($fp,4096);\n                }\n                fclose($fp);\n                $csplit = preg_split(\"!\\r\\n\\r\\n!\",$content,2);\n                $content = $csplit[1];\n            }\n        } else {\n            trigger_error(\"[plugin fetch] unable to parse URL, check syntax\",E_USER_NOTICE);\n            return;\n        }\n    } else {\n        $content = @file_get_contents($params['file']);\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "right_result": "function fetchContent($params, $template) {\n    if (empty($params['file'])) {\n        return;\n    }\n\n    $url = $params['file'];\n    $trustedUris = ['https://example.com', 'http://example.com']; // Add trusted URIs\n    $trustedDirs = ['/var/www/html']; // Add trusted directories\n\n    $isTrusted = false;\n    foreach ($trustedUris as $trustedUri) {\n        if (strpos($url, $trustedUri) === 0) {\n            $isTrusted = true;\n            break;\n        }\n    }\n\n    foreach ($trustedDirs as $trustedDir) {\n        if (strpos($url, $trustedDir) === 0) {\n            $isTrusted = true;\n            break;\n        }\n    }\n\n    if (!$isTrusted) {\n        return;\n    }\n\n    $proxy = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $port = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n\n    $urlParts = parse_url($url);\n    $host = $urlParts['host'];\n    $path = $urlParts['path'] ?? '/';\n    $scheme = $urlParts['scheme'] ?? 'http';\n\n    if ($proxy) {\n        $host = $proxy;\n        $port = $port;\n        $path = $url;\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, 30);\n    if (!$fp) {\n        return;\n    }\n\n    $auth = '';\n    if ($user && $pass) {\n        $auth = base64_encode(\"$user:$pass\");\n    }\n\n    $headers = \"GET $path HTTP/1.1\\r\\n\";\n    $headers .= \"Host: $host\\r\\n\";\n    if ($auth) {\n        $headers .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $headers .= \"Connection: close\\r\\n\\r\\n\";\n\n    fwrite($fp, $headers);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    if (isset($params['assign_headers'])) {\n        $template->assign($params['assign_headers'], $header);\n    }\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Implement a PHP class for handling trackback requests using low-level HTTP socket communication.\n\nClass Description: The CI_Trackback class provides functionality to send and process trackback pings to remote servers. It handles HTTP communication directly using fsockopen, processes responses, and manages errors.\n\nAttributes:\n- charset: string - Character encoding to use (default: 'UTF-8')\n- data: array - Trackback data including url, title, excerpt, blog_name, and charset\n- convert_ascii: bool - Whether to convert non-ASCII characters (default: TRUE)\n- response: string - Raw HTTP response from the trackback server\n- error_msg: array - Collection of error messages encountered during processing\n\nMethods:\n- process(string $url, string $data) -> bool - Sends a trackback ping to the specified URL with the given data. Returns TRUE on success, FALSE on failure.\n  Input: \n    $url: string - Target URL for the trackback\n    $data: string - URL-encoded trackback data\n  Output: bool - Success status\n\n- get_id(string $url) -> mixed - Extracts a numeric ID from the given URL. Returns the ID as string or FALSE if not found.\n  Input: $url: string - URL to parse for an ID\n  Output: mixed - Extracted ID string or FALSE\n\n- set_error(string $msg) -> void - Adds an error message to the error collection.\n  Input: $msg: string - Error message to store\n  Output: void",
    "Canonical_solution": "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = array(\n        'url' => '',\n        'title' => '',\n        'excerpt' => '',\n        'blog_name' => '',\n        'charset' => ''\n    );\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = array();\n\n    public function process($url, $data) {\n        $target = parse_url($url);\n\n        if ( ! $fp = @fsockopen($target['host'], 80)) {\n            $this->set_error('Invalid Connection: '.$url);\n            return FALSE;\n        }\n\n        $path = isset($target['path']) ? $target['path'] : $url;\n        empty($target['query']) OR $path .= '?'.$target['query'];\n\n        if ($id = $this->get_id($url)) {\n            $data = 'tb_id='.$id.'&'.$data;\n        }\n\n        fputs($fp, 'POST '.$path.\" HTTP/1.0\\r\\n\");\n        fputs($fp, 'Host: '.$target['host'].\"\\r\\n\");\n        fputs($fp, \"Content-type: application/x-www-form-urlencoded\\r\\n\");\n        fputs($fp, 'Content-length: '.strlen($data).\"\\r\\n\");\n        fputs($fp, \"Connection: close\\r\\n\\r\\n\");\n        fputs($fp, $data);\n\n        $this->response = '';\n        while ( ! feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        @fclose($fp);\n\n        if (stripos($this->response, '<error>0</error>') === FALSE) {\n            $message = preg_match('/<message>(.*?)<\\/message>/is', $this->response, $match)\n                ? trim($match[1])\n                : 'An unknown error was encountered';\n            $this->set_error($message);\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        $tb_id = '';\n\n        if (strpos($url, '?') !== FALSE) {\n            $tb_array = explode('/', $url);\n            $tb_end   = $tb_array[count($tb_array)-1];\n\n            if ( ! is_numeric($tb_end)) {\n                $tb_end  = $tb_array[count($tb_array)-2];\n            }\n\n            $tb_array = explode('=', $tb_end);\n            $tb_id    = $tb_array[count($tb_array)-1];\n        }\n        else {\n            $url = rtrim($url, '/');\n\n            $tb_array = explode('/', $url);\n            $tb_id    = $tb_array[count($tb_array)-1];\n\n            if ( ! is_numeric($tb_id)) {\n                $tb_id = $tb_array[count($tb_array)-2];\n            }\n        }\n\n        return ctype_digit((string) $tb_id) ? $tb_id : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "right_result": "class CI_Trackback {\n    private $charset = 'UTF-8';\n    private $data = [];\n    private $convert_ascii = true;\n    private $response = '';\n    private $error_msg = [];\n\n    public function process(string $url, string $data): bool {\n        $fp = fsockopen(parse_url($url, PHP_URL_HOST), 80, $errno, $errstr, 30);\n        if (!$fp) {\n            $this->set_error(\"Error: $errstr ($errno)\");\n            return false;\n        }\n        $out = \"POST \" . parse_url($url, PHP_URL_PATH) . \" HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . parse_url($url, PHP_URL_HOST) . \"\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded; charset={$this->charset}\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n        return strpos($this->response, '200 OK') !== false;\n    }\n\n    public function get_id(string $url) {\n        $parts = parse_url($url);\n        if (isset($parts['path'])) {\n            $segments = explode('/', trim($parts['path'], '/'));\n            return isset($segments[1]) ? $segments[1] : false;\n        }\n        return false;\n    }\n\n    public function set_error(string $msg): void {\n        $this->error_msg[] = $msg;\n    }\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a PHP class for handling HTTP/HTTPS communications using either socket-based connections (via fsockopen) or cURL, supporting both standard and persistent connections, with proper header and cookie management.\n\nClass Description: The soap_transport_http class provides low-level HTTP transport capabilities for SOAP communications, supporting both socket and cURL implementations. It handles connection management, request/response processing, and error handling.\n\nAttributes:\n- url: string - The target URL for HTTP requests\n- uri: string - The URI portion of the URL\n- scheme: string - The protocol scheme (http/https)\n- host: string - The target hostname\n- port: string - The target port number\n- path: string - The path portion of the URL\n- request_method: string - HTTP method (default: POST)\n- protocol_version: string - HTTP version (default: 1.0)\n- outgoing_headers: array - Headers to be sent with the request\n- incoming_headers: array - Headers received in the response\n- outgoing_payload: string - Data to be sent in the request\n- incoming_payload: string - Data received in the response\n- persistentConnection: bool - Flag for persistent connections\n- use_curl: bool - Flag to use cURL instead of sockets\n- proxy: array|null - Proxy configuration if used\n\nMethods:\n- __construct(string $url, array $curl_options=null, bool $use_curl=false) -> void - Initializes the transport with target URL and options\n- connect(int $connection_timeout=0, int $response_timeout=30) -> bool - Establishes connection to server\n- send(string $data, int $timeout=0, int $response_timeout=30, array $cookies=null) -> mixed - Sends data and returns response\n- sendRequest(string $data, array $cookies=null) -> bool - Sends the HTTP request with headers\n- getResponse() -> string|bool - Reads and processes the server response\n- setHeader(string $name, string $value) -> void - Adds a header to outgoing request\n- setCurlOption(mixed $option, mixed $value) -> void - Sets cURL option when using cURL\n- parseCookie(string $cookie_str) -> array|bool - Parses Set-Cookie header into array",
    "Canonical_solution": "class soap_transport_http extends nusoap_base {\n    var $url = '';\n    var $uri = '';\n    var $digest_uri = '';\n    var $scheme = '';\n    var $host = '';\n    var $port = '';\n    var $path = '';\n    var $request_method = 'POST';\n    var $protocol_version = '1.0';\n    var $encoding = '';\n    var $outgoing_headers = array();\n    var $incoming_headers = array();\n    var $incoming_cookies = array();\n    var $outgoing_payload = '';\n    var $incoming_payload = '';\n    var $response_status_line;\n    var $useSOAPAction = true;\n    var $persistentConnection = false;\n    var $ch = false;\n    var $ch_options = array();\n    var $use_curl = false;\n    var $proxy = null;\n    var $username = '';\n    var $password = '';\n    var $authtype = '';\n    var $digestRequest = array();\n    var $certRequest = array();\n\n    function soap_transport_http($url, $curl_options = NULL, $use_curl = false) {\n        parent::nusoap_base();\n        $this->debug(\"ctor url=$url use_curl=$use_curl curl_options:\");\n        $this->appendDebug($this->varDump($curl_options));\n        $this->setURL($url);\n        if (is_array($curl_options)) {\n            $this->ch_options = $curl_options;\n        }\n        $this->use_curl = $use_curl;\n        preg_match('/\\$Revisio' . 'n: ([^ ]+)/', $this->revision, $rev);\n        $this->setHeader('User-Agent', $this->title.'/'.$this->version.' ('.$rev[1].')');\n    }\n\n    function connect($connection_timeout=0,$response_timeout=30) {\n        $this->debug(\"connect connection_timeout $connection_timeout, response_timeout $response_timeout, scheme $this->scheme, host $this->host, port $this->port\");\n        if ($this->io_method() == 'socket') {\n            if (!is_array($this->proxy)) {\n                $host = $this->host;\n                $port = $this->port;\n            } else {\n                $host = $this->proxy['host'];\n                $port = $this->proxy['port'];\n            }\n\n            if($this->persistentConnection && isset($this->fp) && is_resource($this->fp)){\n                if (!feof($this->fp)) {\n                    $this->debug('Re-use persistent connection');\n                    return true;\n                }\n                fclose($this->fp);\n                $this->debug('Closed persistent connection at EOF');\n            }\n\n            if ($this->scheme == 'ssl') {\n                $host = 'ssl://' . $host;\n            }\n            $this->debug('calling fsockopen with host ' . $host . ' connection_timeout ' . $connection_timeout);\n\n            if($connection_timeout > 0){\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str, $connection_timeout);\n            } else {\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str);\n            }\n            \n            if(!$this->fp) {\n                $msg = 'Couldn\\'t open socket connection to server ' . $this->url;\n                if ($this->errno) {\n                    $msg .= ', Error ('.$this->errno.'): '.$this->error_str;\n                } else {\n                    $msg .= ' prior to connect().  This is often a problem looking up the host name.';\n                }\n                $this->debug($msg);\n                $this->setError($msg);\n                return false;\n            }\n            \n            $this->debug('set response timeout to ' . $response_timeout);\n            socket_set_timeout( $this->fp, $response_timeout);\n\n            $this->debug('socket connected');\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            if (!extension_loaded('curl')) {\n                $this->setError('The PHP cURL Extension is required for HTTPS or NLTM.  You will need to re-build or update your PHP to include cURL or change php.ini to load the PHP cURL extension.');\n                return false;\n            }\n            $this->debug('connect using cURL');\n            $this->ch = curl_init();\n            $hostURL = ($this->port != '') ? \"$this->scheme://$this->host:$this->port\" : \"$this->scheme://$this->host\";\n            $hostURL .= $this->path;\n            $this->setCurlOption(CURLOPT_URL, $hostURL);\n            if (ini_get('safe_mode') || ini_get('open_basedir')) {\n                $this->debug('safe_mode or open_basedir set, so do not set CURLOPT_FOLLOWLOCATION');\n            } else {\n                $this->setCurlOption(CURLOPT_FOLLOWLOCATION, 1);\n            }\n            $this->setCurlOption(CURLOPT_HEADER, 1);\n            $this->setCurlOption(CURLOPT_RETURNTRANSFER, 1);\n            if ($this->persistentConnection) {\n                $this->persistentConnection = false;\n                $this->setHeader('Connection', 'close');\n            }\n            if ($connection_timeout != 0) {\n                $this->setCurlOption(CURLOPT_CONNECTIONTIMEOUT, $connection_timeout);\n            }\n            if ($response_timeout != 0) {\n                $this->setCurlOption(CURLOPT_TIMEOUT, $response_timeout);\n            }\n            $this->debug('cURL connection set up');\n            return true;\n        } else {\n            $this->setError('Unknown scheme ' . $this->scheme);\n            $this->debug('Unknown scheme ' . $this->scheme);\n            return false;\n        }\n    }\n\n    function send($data, $timeout=0, $response_timeout=30, $cookies=NULL) {\n        $this->debug('entered send() with data of length: '.strlen($data));\n        $this->tryagain = true;\n        $tries = 0;\n        while ($this->tryagain) {\n            $this->tryagain = false;\n            if ($tries++ < 2) {\n                if (!$this->connect($timeout, $response_timeout)){\n                    return false;\n                }\n                if (!$this->sendRequest($data, $cookies)){\n                    return false;\n                }\n                $respdata = $this->getResponse();\n            } else {\n                $this->setError(\"Too many tries to get an OK response ($this->response_status_line)\");\n            }\n        }        \n        $this->debug('end of send()');\n        return $respdata;\n    }\n\n    function sendRequest($data, $cookies = NULL) {\n        $cookie_str = $this->getCookiesForRequest($cookies, (($this->scheme == 'ssl') || ($this->scheme == 'https')));\n        $this->buildPayload($data, $cookie_str);\n        if ($this->io_method() == 'socket') {\n            if(!fputs($this->fp, $this->outgoing_payload, strlen($this->outgoing_payload))) {\n                $this->setError('couldn\\'t write message data to socket');\n                $this->debug('couldn\\'t write message data to socket');\n                return false;\n            }\n            $this->debug('wrote data to socket, length = ' . strlen($this->outgoing_payload));\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            $curl_headers = array();\n            foreach($this->outgoing_headers as $k => $v){\n                if ($k == 'Connection' || $k == 'Content-Length' || $k == 'Host' || $k == 'Authorization' || $k == 'Proxy-Authorization') {\n                    $this->debug(\"Skip cURL header $k: $v\");\n                } else {\n                    $curl_headers[] = \"$k: $v\";\n                }\n            }\n            if ($cookie_str != '') {\n                $curl_headers[] = 'Cookie: ' . $cookie_str;\n            }\n            $this->setCurlOption(CURLOPT_HTTPHEADER, $curl_headers);\n            $this->debug('set cURL HTTP headers');\n            if ($this->request_method == \"POST\") {\n                $this->setCurlOption(CURLOPT_POST, 1);\n                $this->setCurlOption(CURLOPT_POSTFIELDS, $data);\n                $this->debug('set cURL POST data');\n            }\n            foreach ($this->ch_options as $key => $val) {\n                $this->setCurlOption($key, $val);\n            }\n            $this->debug('set cURL payload');\n            return true;\n        }\n    }\n\n    function getResponse(){\n        $this->incoming_payload = '';\n        if ($this->io_method() == 'socket') {\n            $data = '';\n            while (!isset($lb)){\n                if(feof($this->fp)) {\n                    $this->incoming_payload = $data;\n                    $this->debug('found no headers before EOF after length ' . strlen($data));\n                    $this->debug(\"received before EOF:\\n\" . $data);\n                    $this->setError('server failed to send headers');\n                    return false;\n                }\n                $tmp = fgets($this->fp, 256);\n                $tmplen = strlen($tmp);\n                $this->debug(\"read line of $tmplen bytes: \" . trim($tmp));\n                if ($tmplen == 0) {\n                    $this->incoming_payload = $data;\n                    $this->debug('socket read of headers timed out after length ' . strlen($data));\n                    $this->debug(\"read before timeout: \" . $data);\n                    $this->setError('socket read of headers timed out');\n                    return false;\n                }\n                $data .= $tmp;\n                $pos = strpos($data,\"\\r\\n\\r\\n\");\n                if($pos > 1){\n                    $lb = \"\\r\\n\";\n                } else {\n                    $pos = strpos($data,\"\\n\\n\");\n                    if($pos > 1){\n                        $lb = \"\\n\";\n                    }\n                }\n                if (isset($lb) && preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    unset($lb);\n                    $data = '';\n                }\n            }\n            $this->incoming_payload .= $data;\n            $this->debug('found end of headers after length ' . strlen($data));\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $this->incoming_headers = array();\n            $this->incoming_cookies = array();\n            foreach($header_array as $header_line){\n                $arr = explode(':',$header_line, 2);\n                if(count($arr) > 1){\n                    $header_name = strtolower(trim($arr[0]));\n                    $this->incoming_headers[$header_name] = trim($arr[1]);\n                    if ($header_name == 'set-cookie') {\n                        $cookie = $this->parseCookie(trim($arr[1]));\n                        if ($cookie) {\n                            $this->incoming_cookies[] = $cookie;\n                            $this->debug('found cookie: ' . $cookie['name'] . ' = ' . $cookie['value']);\n                        } else {\n                            $this->debug('did not find cookie in ' . trim($arr[1]));\n                        }\n                    }\n                } else if (isset($header_name)) {\n                    $this->incoming_headers[$header_name] .= $lb . ' ' . $header_line;\n                }\n            }\n            if (isset($this->incoming_headers['transfer-encoding']) && strtolower($this->incoming_headers['transfer-encoding']) == 'chunked') {\n                $content_length =  2147483647;\n                $chunked = true;\n                $this->debug(\"want to read chunked content\");\n            } elseif (isset($this->incoming_headers['content-length'])) {\n                $content_length = $this->incoming_headers['content-length'];\n                $chunked = false;\n                $this->debug(\"want to read content of length $content_length\");\n            } else {\n                $content_length =  2147483647;\n                $chunked = false;\n                $this->debug(\"want to read content to EOF\");\n            }\n            $data = '';\n            do {\n                if ($chunked) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk line of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk length timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk length timed out');\n                        return false;\n                    }\n                    $content_length = hexdec(trim($tmp));\n                    $this->debug(\"chunk length $content_length\");\n                }\n                $strlen = 0;\n                while (($strlen < $content_length) && (!feof($this->fp))) {\n                    $readlen = min(8192, $content_length - $strlen);\n                    $tmp = fread($this->fp, $readlen);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read buffer of $tmplen bytes\");\n                    if (($tmplen == 0) && (!feof($this->fp))) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of body timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of body timed out');\n                        return false;\n                    }\n                    $strlen += $tmplen;\n                    $data .= $tmp;\n                }\n                if ($chunked && ($content_length > 0)) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk terminator of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk terminator timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk terminator timed out');\n                        return false;\n                    }\n                }\n            } while ($chunked && ($content_length > 0) && (!feof($this->fp)));\n            if (feof($this->fp)) {\n                $this->debug('read to EOF');\n            }\n            $this->debug('read body of length ' . strlen($data));\n            $this->incoming_payload .= $data;\n            $this->debug('received a total of '.strlen($this->incoming_payload).' bytes of data from server');\n            if(\n                (isset($this->incoming_headers['connection']) && strtolower($this->incoming_headers['connection']) == 'close') || \n                (! $this->persistentConnection) || feof($this->fp)){\n                fclose($this->fp);\n                $this->fp = false;\n                $this->debug('closed socket');\n            }\n            if($this->incoming_payload == ''){\n                $this->setError('no response from server');\n                return false;\n            }\n            return $data;\n        } else if ($this->io_method() == 'curl') {\n            $this->debug('send and receive with cURL');\n            $this->incoming_payload = curl_exec($this->ch);\n            $data = $this->incoming_payload;\n            $cErr = curl_error($this->ch);\n            if ($cErr != '') {\n                $err = 'cURL ERROR: '.curl_errno($this->ch).': '.$cErr.'<br>';\n                foreach(curl_getinfo($this->ch) as $k => $v){\n                    $err .= \"$k: $v<br>\";\n                }\n                $this->debug($err);\n                $this->setError($err);\n                curl_close($this->ch);\n                return false;\n            }\n            $this->debug('No cURL error, closing cURL');\n            curl_close($this->ch);\n            $savedata = $data;\n            while ($this->isSkippableCurlHeader($data)) {\n                $this->debug(\"Found HTTP header to skip\");\n                if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                    $data = ltrim(substr($data,$pos));\n                } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                    $data = ltrim(substr($data,$pos));\n                }\n            }\n            if ($data == '') {\n                $data = $savedata;\n                while (preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                        $data = ltrim(substr($data,$pos));\n                    } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                        $data = ltrim(substr($data,$pos));\n                    }\n                }\n            }\n            if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                $lb = \"\\r\\n\";\n            } elseif( $pos = strpos($data,\"\\n\\n\")) {\n                $lb = \"\\n\";\n            } else {\n                $this->debug('no proper separation of headers and document');\n                $this->setError('no proper separation of headers and document');\n                return false;\n            }\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $data = ltrim(substr($data,$pos));\n            $this->debug('found proper separation of headers and document');\n            $this->debug('cleaned data, stringlen: '.strlen($data));\n            foreach ($header_array as $header_line) {\n                $arr = explode(':',$header_line",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "right_result": "class soap_transport_http {\n    private $url;\n    private $uri;\n    private $scheme;\n    private $host;\n    private $port;\n    private $path;\n    private $request_method = 'POST';\n    private $protocol_version = '1.0';\n    private $outgoing_headers = [];\n    private $incoming_headers = [];\n    private $outgoing_payload = '';\n    private $incoming_payload = '';\n    private $persistentConnection = false;\n    private $use_curl = false;\n    private $proxy = null;\n    private $connection;\n\n    public function __construct(string $url, array $curl_options = null, bool $use_curl = false) {\n        $this->url = $url;\n        $this->use_curl = $use_curl;\n        $this->parseUrl();\n        if ($use_curl && $curl_options) {\n            foreach ($curl_options as $option => $value) {\n                $this->setCurlOption($option, $value);\n            }\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = $parsed_url['scheme'];\n        $this->host = $parsed_url['host'];\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = $this->path;\n    }\n\n    public function connect(int $connection_timeout = 0, int $response_timeout = 30): bool {\n        if ($this->use_curl) {\n            $this->connection = curl_init();\n            curl_setopt($this->connection, CURLOPT_URL, $this->url);\n            curl_setopt($this->connection, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->connection, CURLOPT_TIMEOUT, $response_timeout);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            return $this->connection !== false;\n        }\n    }\n\n    public function send(string $data, int $timeout = 0, int $response_timeout = 30, array $cookies = null): mixed {\n        $this->outgoing_payload = $data;\n        if ($this->sendRequest($data, $cookies)) {\n            return $this->getResponse();\n        }\n        return false;\n    }\n\n    public function sendRequest(string $data, array $cookies = null): bool {\n        if ($this->use_curl) {\n            curl_setopt($this->connection, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->connection, CURLOPT_HTTPHEADER, $this->formatHeaders());\n            return true;\n        } else {\n            $headers = $this->formatHeaders();\n            $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\" . implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\" . $data;\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    public function getResponse(): string|bool {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->connection);\n            $this->incoming_headers = curl_getinfo($this->connection);\n            curl_close($this->connection);\n            return $this->incoming_payload;\n        } else {\n            $response = '';\n            while (!feof($this->connection)) {\n                $response .= fgets($this->connection, 128);\n            }\n            fclose($this->connection);\n            return $response;\n        }\n    }\n\n    public function setHeader(string $name, string $value): void {\n        $this->outgoing_headers[] = \"$name: $value\";\n    }\n\n    public function setCurlOption(mixed $option, mixed $value): void {\n        if ($this->use_curl) {\n            curl_setopt($this->connection, $option, $value);\n        }\n    }\n\n    public function parseCookie(string $cookie_str): array|bool {\n        $cookies = [];\n        foreach (explode('; ', $cookie_str) as $cookie) {\n            list($name, $value) = explode('=', $cookie, 2);\n            $cookies[$name] = $value;\n        }\n        return $cookies;\n    }\n\n    private function formatHeaders(): array {\n        return array_merge($this->outgoing_headers, [\"Content-Length: \" . strlen($this->outgoing_payload)]);\n    }\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a PHP function that fetches content from a remote HTTP server using low-level socket operations, with support for various HTTP request parameters and proxy configuration.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request with customizable headers, reads the response, and returns the content body. It supports authentication, custom headers, timeout settings, and proxy configuration. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: [array] - An associative array containing the following possible keys:\n  - 'file': [string] - The URL to fetch (required)\n  - 'assign': [string] - Template variable name to assign content to (optional)\n  - 'assign_headers': [string] - Template variable name to assign response headers to (optional)\n  - 'user': [string] - Username for HTTP authentication (optional)\n  - 'pass': [string] - Password for HTTP authentication (optional)\n  - 'accept': [string] - Accept header value (optional)\n  - 'header': [string|array] - Additional HTTP headers (optional)\n  - 'proxy_host': [string] - Proxy server hostname (optional)\n  - 'proxy_port': [int] - Proxy server port (optional)\n  - 'agent': [string] - User-Agent header value (optional)\n  - 'referer': [string] - Referer header value (optional)\n  - 'timeout': [int] - Connection timeout in seconds (optional)\n- $template: [object] - Template engine object for variable assignment (optional)\n\nOutput:\n- If 'assign' parameter is provided: [void] - Assigns content to template variable\n- If 'assign' parameter is not provided: [string] - Returns the fetched content\n- On error: [void] - Triggers notice and returns nothing",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n            $proxy_host = $proxy_port = null;\n            $extra_headers = array();\n            $accept = \"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*\";\n            $agent = \"Smarty Template Engine \" . Smarty::SMARTY_VERSION;\n            $referer = \"\";\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"file\":\n                    case \"assign\":\n                    case \"assign_headers\":\n                        break;\n                    case \"user\":\n                        if (!empty($param_value)) $user = $param_value;\n                        break;\n                    case \"pass\":\n                        if (!empty($param_value)) $pass = $param_value;\n                        break;\n                    case \"accept\":\n                        if (!empty($param_value)) $accept = $param_value;\n                        break;\n                    case \"header\":\n                        if (!empty($param_value) && preg_match('![\\w\\d-]+: .+!', $param_value)) {\n                            $extra_headers[] = $param_value;\n                        }\n                        break;\n                    case \"proxy_host\":\n                        if (!empty($param_value)) $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) $proxy_port = (int)$param_value;\n                        break;\n                    case \"agent\":\n                        if (!empty($param_value)) $agent = $param_value;\n                        break;\n                    case \"referer\":\n                        if (!empty($param_value)) $referer = $param_value;\n                        break;\n                    case \"timeout\":\n                        if (!preg_match('!\\D!', $param_value)) $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            if (!empty($host)) fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($accept)) fputs($fp, \"Accept: $accept\\r\\n\");\n            if (!empty($agent)) fputs($fp, \"User-Agent: $agent\\r\\n\");\n            if (!empty($referer)) fputs($fp, \"Referer: $referer\\r\\n\");\n            foreach ($extra_headers as $curr_header) {\n                fputs($fp, $curr_header . \"\\r\\n\");\n            }\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n\n            fputs($fp, \"\\r\\n\");\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n\n            if (!empty($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], preg_split(\"!\\r\\n!\", $csplit[0]));\n            }\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "right_result": "function fetchHttpContent($params, $template = null) {\n    if (!isset($params['file'])) {\n        trigger_error('File parameter is required', E_USER_NOTICE);\n        return;\n    }\n\n    $url = parse_url($params['file']);\n    $host = $url['host'];\n    $path = $url['path'] ?? '/';\n    $port = $url['port'] ?? 80;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $host = $params['proxy_host'];\n        $port = $params['proxy_port'];\n        $path = $url['scheme'] . '://' . $url['host'] . $path;\n    }\n\n    $timeout = $params['timeout'] ?? 30;\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr\", E_USER_NOTICE);\n        return;\n    }\n\n    $headers = \"GET $path HTTP/1.1\\r\\n\";\n    $headers .= \"Host: $url[host]\\r\\n\";\n    if (isset($params['user']) && isset($params['pass'])) {\n        $headers .= \"Authorization: Basic \" . base64_encode(\"{$params['user']}:{$params['pass']}\") . \"\\r\\n\";\n    }\n    if (isset($params['accept'])) {\n        $headers .= \"Accept: {$params['accept']}\\r\\n\";\n    }\n    if (isset($params['agent'])) {\n        $headers .= \"User-Agent: {$params['agent']}\\r\\n\";\n    }\n    if (isset($params['referer'])) {\n        $headers .= \"Referer: {$params['referer']}\\r\\n\";\n    }\n    if (isset($params['header'])) {\n        $additionalHeaders = is_array($params['header']) ? $params['header'] : [$params['header']];\n        foreach ($additionalHeaders as $header) {\n            $headers .= \"$header\\r\\n\";\n        }\n    }\n    $headers .= \"Connection: close\\r\\n\\r\\n\";\n\n    fwrite($fp, $headers);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    if (isset($params['assign_headers']) && $template) {\n        $template->{$params['assign_headers']} = $header;\n    }\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using fsockopen for making HTTP requests when CURL extension is not available. The class should support both GET and POST methods, handle headers, cookies, timeouts, and allow configuration of various connection parameters.\n\nClass Description: The Http class provides low-level HTTP client functionality using PHP's fsockopen function. It's designed as a fallback when CURL isn't available, offering stable performance for making HTTP requests. The class contains one static method that handles the complete HTTP request lifecycle from connection establishment to response processing.\n\nMethods:\n\nMethod1: fsockopenDownload(string $url, array $conf = []) -> mixed - Performs an HTTP request using fsockopen\n  Input Parameters:\n    - $url: string - The target URL to request\n    - $conf: array - Configuration options including:\n      - limit: int - Maximum bytes to read (0 for unlimited)\n      - post: mixed - POST data (array or string)\n      - cookie: string - Cookie header content\n      - ip: string - Force specific IP address\n      - timeout: int - Connection timeout in seconds\n      - block: bool - Whether to use blocking mode\n  Return Type: mixed - Returns the HTTP response body as string, or empty string on failure\n\nThe method follows these steps:\n1. Parses the URL and merges configuration with defaults\n2. Prepares appropriate HTTP request headers (GET/POST)\n3. Establishes TCP connection using fsockopen\n4. Sends the HTTP request\n5. Reads and processes the response\n6. Closes the connection and returns the response body",
    "Canonical_solution": "namespace Org\\Net;\n\nclass Http\n{\n    /**\n     * \u4f7f\u7528 fsockopen \u901a\u8fc7 HTTP \u534f\u8bae\u76f4\u63a5\u8bbf\u95ee(\u91c7\u96c6)\u8fdc\u7a0b\u6587\u4ef6\n     * \u5982\u679c\u4e3b\u673a\u6216\u670d\u52a1\u5668\u6ca1\u6709\u5f00\u542f CURL \u6269\u5c55\u53ef\u8003\u8651\u4f7f\u7528\n     * fsockopen \u6bd4 CURL \u7a0d\u6162,\u4f46\u6027\u80fd\u7a33\u5b9a\n     * @static\n     * @access public\n     * @param string $url \u8fdc\u7a0bURL\n     * @param array $conf \u5176\u4ed6\u914d\u7f6e\u4fe1\u606f\n     *        int   limit \u5206\u6bb5\u8bfb\u53d6\u5b57\u7b26\u4e2a\u6570\n     *        string post  post\u7684\u5185\u5bb9,\u5b57\u7b26\u4e32\u6216\u6570\u7ec4,key=value&\u5f62\u5f0f\n     *        string cookie \u643a\u5e26cookie\u8bbf\u95ee,\u8be5\u53c2\u6570\u662fcookie\u5185\u5bb9\n     *        string ip    \u5982\u679c\u8be5\u53c2\u6570\u4f20\u5165,$url\u5c06\u4e0d\u88ab\u4f7f\u7528,ip\u8bbf\u95ee\u4f18\u5148\n     *        int    timeout \u91c7\u96c6\u8d85\u65f6\u65f6\u95f4\n     *        bool   block \u662f\u5426\u963b\u585e\u8bbf\u95ee,\u9ed8\u8ba4\u4e3atrue\n     * @return mixed\n     */\n    static public function fsockopenDownload($url, $conf = array())\n    {\n        $return = '';\n        if(!is_array($conf)) return $return;\n\n        $matches = parse_url($url);\n        !isset($matches['host'])    && $matches['host']    = '';\n        !isset($matches['path'])    && $matches['path']    = '';\n        !isset($matches['query'])   && $matches['query']   = '';\n        !isset($matches['port'])     && $matches['port']    = '';\n        $host = $matches['host'];\n        $path = $matches['path'] ? $matches['path'].($matches['query'] ? '?'.$matches['query'] : '') : '/';\n        $port = !empty($matches['port']) ? $matches['port'] : 80;\n\n        $conf_arr = array(\n            'limit'     =>  0,\n            'post'      =>  '',\n            'cookie'    =>  '',\n            'ip'        =>  '',\n            'timeout'   =>  15,\n            'block'     =>  TRUE,\n            );\n\n        foreach (array_merge($conf_arr, $conf) as $k=>$v) ${$k} = $v;\n\n        if($post) {\n            if(is_array($post))\n            {\n                $post = http_build_query($post);\n            }\n            $out  = \"POST $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= 'Content-Length: '.strlen($post).\"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cache-Control: no-cache\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out  = \"GET $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n        }\n        $fp = @fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if(!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            stream_set_timeout($fp, $timeout);\n            @fwrite($fp, $out);\n            $status = stream_get_meta_data($fp);\n            if(!$status['timed_out']) {\n                while (!feof($fp)) {\n                    if(($header = @fgets($fp)) && ($header == \"\\r\\n\" ||  $header == \"\\n\")) {\n                        break;\n                    }\n                }\n\n                $stop = false;\n                while(!feof($fp) && !$stop) {\n                    $data = fread($fp, ($limit == 0 || $limit > 8192 ? 8192 : $limit));\n                    $return .= $data;\n                    if($limit) {\n                        $limit -= strlen($data);\n                        $stop = $limit <= 0;\n                    }\n                }\n            }\n            @fclose($fp);\n            return $return;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "right_result": "class Http {\n    public static function fsockopenDownload(string $url, array $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 30,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n        \n        $urlParts = parse_url($url);\n        $host = $urlParts['host'];\n        $path = $urlParts['path'] ?? '/';\n        $port = $urlParts['port'] ?? 80;\n        \n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n        \n        $fp = fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n        \n        $headers = \"Host: $host\\r\\n\";\n        if ($conf['cookie']) {\n            $headers .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        }\n        \n        if (is_array($conf['post'])) {\n            $postData = http_build_query($conf['post']);\n            $headers .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $headers .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n            $request = \"POST $path HTTP/1.1\\r\\n\" . $headers . \"\\r\\n\" . $postData;\n        } else {\n            $request = \"GET $path HTTP/1.1\\r\\n\" . $headers . \"\\r\\n\";\n        }\n        \n        fwrite($fp, $request);\n        \n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] > 0 && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        \n        fclose($fp);\n        \n        $responseBody = explode(\"\\r\\n\\r\\n\", $response, 2)[1] ?? '';\n        return $responseBody;\n    }\n}"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxy configuration and timeout settings.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy server if configured), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, connection establishment, request sending, response reading, and connection closing. The function can either return the fetched content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (integer, optional) Proxy server port\n  - 'timeout': (integer, optional) Connection timeout in seconds (default: 30)\n  - 'assign': (string, optional) Template variable name to assign the content to\n- $template: (object) The template object for assigning content when 'assign' parameter is used\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Returns nothing (void) if 'assign' parameter is provided (content is assigned to template instead)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        if (!empty($param_value)) {\n                            $proxy_host = $param_value;\n                        }\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $proxy_port = (int) $param_value;\n                        }\n                        break;\n                    case \"timeout\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $timeout = (int) $param_value;\n                        }\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "right_result": "function fetchContent($params, $template) {\n    $url = parse_url($params['file']);\n    $host = $url['host'];\n    $port = isset($url['port']) ? $url['port'] : 80;\n    $path = isset($url['path']) ? $url['path'] : '/';\n    $proxy = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $fp = fsockopen($proxy ? $proxy : $host, $proxy ? $proxyPort : $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $request = \"GET \" . ($proxy ? \"http://$host$path\" : $path) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    $request .= \"Connection: close\\r\\n\\r\\n\";\n    fwrite($fp, $request);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    $body = explode(\"\\r\\n\\r\\n\", $response, 2)[1];\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n        return;\n    }\n\n    return $body;\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a PHP function that retrieves content from a specified URL using low-level socket operations (fsockopen) rather than higher-level HTTP client libraries. The function should handle both HTTP and HTTPS protocols, manage connection timeouts, and properly process the HTTP response.\n\nFunction Description: The function establishes a TCP connection to the specified HTTP server, sends a GET request, reads the response (separating headers from body), and returns the content. It handles both HTTP and HTTPS connections with appropriate ports, includes basic error handling, and follows proper HTTP protocol for request/response cycles.\n\nInput:\n- $url (string): The URL to fetch content from (e.g., \"http://example.com\" or \"https://example.com\")\n- &$data (string, passed by reference): Variable that will contain the response body content\n\nOutput:\n- bool: Returns true if the request was successful and content was retrieved, false if any error occurred (connection failure, empty response, etc.)\n- The response body content is stored in the $data parameter passed by reference\n\nNote: The function does not return the content directly but instead modifies the $data parameter. This follows the pattern seen in the reference code where output is handled via parameter reference rather than return value.",
    "Canonical_solution": "function file_get_contents_by_socket($url, &$data)\n{\n    $timeout = 1;\n    $p = parse_url($url);\n    $file = $p['path'];\n    if ($p['scheme'] == 'https') {\n        $prefix = 'ssl://';\n        $port = ($p['port'] ? $p['port'] : 443);\n    } else {\n        $prefix = '';\n        $port = ($p['port'] ? $p['port'] : 80);\n    }\n    if ($p['query']) {\n        $file .= '?' . $p['query'];\n    }\n    if (!($fh = @fsockopen($prefix . $p['host'], $port, $errno, $errstr, $timeout))) {\n        return false;\n    }\n\n    $getstring =\n        \"GET \" . $file . \" HTTP/1.0 \\r\\n\" .\n        \"Host: \" . $p['host'] . \" \\r\\n\" .\n        \"Connection: close\\r\\n\\r\\n\";\n    fwrite($fh, $getstring);\n    $s = fgets($fh, 1024);\n    if (!$s) {\n        return false;\n    }\n    $httpheader .= $s;\n    while (!feof($fh)) {\n        $s = fgets($fh, 1024);\n        if ($s == \"\\r\\n\") {\n            break;\n        }\n    }\n    $data = '';\n    while (!feof($fh)) {\n        $data .= fgets($fh, 1024);\n    }\n    fclose($fh);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "right_result": "function fetchUrlContent($url, &$data) {\n    $parsedUrl = parse_url($url);\n    $host = $parsedUrl['host'];\n    $port = isset($parsedUrl['scheme']) && $parsedUrl['scheme'] === 'https' ? 443 : 80;\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    \n    $timeout = 10;\n    $data = '';\n    \n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n    \n    $request = \"GET $path HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    $request .= \"Connection: close\\r\\n\\r\\n\";\n    \n    fwrite($fp, $request);\n    \n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    \n    fclose($fp);\n    \n    $headerEnd = strpos($response, \"\\r\\n\\r\\n\");\n    if ($headerEnd === false) {\n        return false;\n    }\n    \n    $headers = substr($response, 0, $headerEnd);\n    $data = substr($response, $headerEnd + 4);\n    \n    return !empty($data);\n}"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Implement a PHP function that performs HTTP requests using either cURL (if available) or fsockopen as a fallback, supporting both GET and POST methods with various configurations.\n\nFunction Description: The function _dfsockopen performs HTTP requests to a specified URL with support for POST data, cookies, custom headers, file uploads, and timeout settings. It first attempts to use cURL if available, falling back to fsockopen for basic socket communication. The function handles both URL-encoded and multipart form data for POST requests.\n\nInput:\n- $url: (string) The target URL for the HTTP request\n- $limit: (int) Maximum number of bytes to read from response (0 for unlimited)\n- $post: (string|array) POST data to send (either query string or associative array)\n- $cookie: (string) Cookie header string\n- $bysocket: (bool) Force using fsockopen (unused in this implementation)\n- $ip: (string) Specific IP to connect to (bypassing DNS)\n- $timeout: (int) Connection timeout in seconds\n- $block: (bool) Whether to use blocking I/O\n- $encodetype: (string) POST data encoding type ('URLENCODE' or other for multipart)\n- $allowcurl: (bool) Whether to allow cURL usage\n- $position: (int) Unused parameter\n- $files: (array) Associative array of file paths for file uploads\n\nOutput:\n- Returns: (string) The HTTP response body (limited by $limit if specified)\n- Side effect: Sets $GLOBALS['filesockheader'] with response headers\n- Returns empty string on connection failure or non-200 status code (for cURL)",
    "Canonical_solution": "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = FALSE, $ip = '', $timeout = 15, $block = TRUE, $encodetype = 'URLENCODE', $allowcurl = TRUE, $position = 0, $files = array()) {\n    $matches = parse_url($url);\n    $scheme = $matches['scheme'];\n    $host = $matches['host'];\n    $path = $matches['path'] ? $matches['path'].($matches['query'] ? '?'.$matches['query'] : '') : '/';\n    $port = !empty($matches['port']) ? $matches['port'] : ($scheme == 'http' ? '80' : '');\n\n    if($post) {\n        if(!is_array($post)) {\n            parse_str($post, $post);\n        }\n        _format_postkey($post, $postnew);\n        $post = $postnew;\n    }\n\n    if(function_exists('curl_init') && function_exists('curl_exec') && $allowcurl) {\n        $ch = curl_init();\n        $httpheader = array();\n        if($ip) {\n            $httpheader[] = \"Host: \".$host;\n        }\n        curl_setopt($ch, CURLOPT_URL, $scheme.'://'.($ip ? $ip : $host).($port ? ':'.$port : '').$path);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        if($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            } else {\n                foreach($post as $k => $v) {\n                    if(isset($files[$k])) {\n                        $post[$k] = '@'.$files[$k];\n                    }\n                }\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            }\n        }\n        if($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n        $data = curl_exec($ch);\n        $status = curl_getinfo($ch);\n        curl_close($ch);\n        if($status['http_code'] != 200) {\n            return;\n        } else {\n            $GLOBALS['filesockheader'] = substr($data, 0, $status['header_size']);\n            $data = substr($data, $status['header_size']);\n            return !$limit ? $data : substr($data, 0, $limit);\n        }\n    }\n\n    $boundary = $encodetype == 'URLENCODE' ? '' : random(40);\n    if($post) {\n        if($encodetype == 'URLENCODE') {\n            $data = http_build_query($post);\n        } else {\n            $data = '';\n            foreach($post as $k => $v) {\n                $data .= \"--$boundary\\r\\n\";\n                $data .= 'Content-Disposition: form-data; name=\"'.$k.'\"'.(isset($files[$k]) ? '; filename=\"'.basename($files[$k]).'\"; Content-Type: application/octet-stream' : '').\"\\r\\n\\r\\n\";\n                $data .= $v.\"\\r\\n\";\n            }\n            $data .= \"--$boundary\\r\\n\";\n        }\n        $out = \"POST $path HTTP/1.0\\r\\n\";\n        $header = \"Content-Type: \".($encodetype == 'URLENCODE' ? \"application/x-www-form-urlencoded\" : \"multipart/form-data; boundary=$boundary\").\"\\r\\n\";\n        $header .= 'Content-Length: '.strlen($data).\"\\r\\n\";\n    } else {\n        $out = \"GET $path HTTP/1.0\\r\\n\";\n        $header = \"\";\n    }\n\n    $header .= \"Host: $host:$port\\r\\n\";\n    $header .= \"Connection: Close\\r\\n\";\n    $header .= \"Cookie: $cookie\\r\\n\\r\\n\";\n    $out .= $header;\n    if($post) $out .= $data;\n\n    if(!$fp = @fsocketopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout)) {\n        return '';\n    }\n\n    stream_set_blocking($fp, $block);\n    stream_set_timeout($fp, $timeout);\n    @fwrite($fp, $out);\n\n    $headers = '';\n    while (!feof($fp)) {\n        $header = @fgets($fp);\n        $headers .= $header;\n        if($header && ($header == \"\\r\\n\" || $header == \"\\n\")) {\n            break;\n        }\n    }\n    $GLOBALS['filesockheader'] = $headers;\n\n    $return = $limit ? stream_get_contents($fp, $limit) : stream_get_contents($fp);\n    @fclose($fp);\n    return $return;\n}\n\nfunction _format_postkey($post, &$result, $key = '') {\n    foreach($post as $k => $v) {\n        $_k = $key ? $key.'['.$k.']' : $k;\n        if(is_array($v)) {\n            _format_postkey($v, $result, $_k);\n        } else {\n            $result[$_k] = $v;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "right_result": "function _dfsockopen($url, $limit = 0, $post = null, $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = []) {\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if (!empty($cookie)) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if (!empty($post)) {\n            if (is_array($post)) {\n                if ($encodetype === 'URLENCODE') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));\n                } else {\n                    $multipart = [];\n                    foreach ($post as $key => $value) {\n                        if (isset($files[$key])) {\n                            $multipart[$key] = new CURLFile($files[$key]);\n                        } else {\n                            $multipart[$key] = $value;\n                        }\n                    }\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $multipart);\n                }\n                curl_setopt($ch, CURLOPT_POST, true);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n                curl_setopt($ch, CURLOPT_POST, true);\n            }\n        }\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $GLOBALS['filesockheader'] = curl_getinfo($ch, CURLINFO_HEADER_OUT);\n        curl_close($ch);\n        if ($http_code != 200) return '';\n        return ($limit > 0) ? substr($response, 0, $limit) : $response;\n    }\n\n    $url_parts = parse_url($url);\n    $hostname = $url_parts['host'];\n    $port = isset($url_parts['port']) ? $url_parts['port'] : 80;\n    $path = $url_parts['path'] . (isset($url_parts['query']) ? '?' . $url_parts['query'] : '');\n    $fp = fsockopen($ip ?: $hostname, $port, $errno, $errstr, $timeout);\n    if (!$fp) return '';\n    \n    $request = ($post ? 'POST' : 'GET') . \" $path HTTP/1.1\\r\\n\";\n    $request .= \"Host: $hostname\\r\\n\";\n    if (!empty($cookie)) {\n        $request .= \"Cookie: $cookie\\r\\n\";\n    }\n    if ($post) {\n        $request .= \"Content-Type: \" . ($encodetype === 'URLENCODE' ? \"application/x-www-form-urlencoded\" : \"multipart/form-data\") . \"\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n    }\n    $request .= \"Connection: close\\r\\n\\r\\n\";\n    if ($post) {\n        $request .= $post;\n    }\n    \n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 1024);\n        if ($limit > 0 && strlen($response) >= $limit) break;\n    }\n    fclose($fp);\n    \n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $GLOBALS['filesockheader'] = $headers;\n    \n    return (strpos($headers, '200 OK') === false) ? '' : $body;\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Implement a Redis-based session handler class that extends a base session driver and implements the SessionHandlerInterface for use in a web application framework.\n\nClass Description: The CI_Session_redis_driver class provides Redis-based session management functionality, including session data storage, retrieval, locking mechanisms, and cleanup. It handles connection management, session data persistence, and concurrency control through Redis operations.\n\nAttributes:\n- _redis: [Redis] - Instance of the Redis client used for all operations\n- _key_prefix: [string] - Prefix for all Redis keys used in session storage\n- _lock_key: [string] - Key used for the current session lock\n- _key_exists: [bool] - Flag indicating whether the current session key exists in Redis\n- _config: [array] - Configuration array containing connection parameters and settings\n- _session_id: [string] - Current session ID being handled\n- _fingerprint: [string] - MD5 hash of the current session data for change detection\n\nMethods:\n- __construct(&$params) -> [void] - Constructor that parses configuration parameters and sets up the Redis connection details\n- open($save_path, $name) -> [bool] - Opens a connection to the Redis server using configured parameters\n- read($session_id) -> [string] - Reads session data from Redis for the given session ID\n- write($session_id, $session_data) -> [bool] - Writes session data to Redis for the given session ID\n- close() -> [bool] - Closes the Redis connection and releases any locks\n- destroy($session_id) -> [bool] - Removes session data from Redis for the given session ID\n- gc($maxlifetime) -> [bool] - Garbage collection handler (not implemented for Redis)\n- _get_lock($session_id) -> [bool] - Internal method to acquire a lock for session operations\n- _release_lock() -> [bool] - Internal method to release the current session lock\n- _fail() -> [bool] - Internal method to handle operation failures\n- _success() -> [bool] - Internal method to handle operation successes",
    "Canonical_solution": "class CI_Session_redis_driver extends CI_Session_driver implements SessionHandlerInterface {\n\n    protected $_redis;\n    protected $_key_prefix = 'ci_session:';\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n\n    public function __construct(&$params)\n    {\n        parent::__construct($params);\n\n        if (empty($this->_config['save_path']))\n        {\n            log_message('error', 'Session: No Redis save path configured.');\n        }\n        elseif (preg_match('#(?:tcp://)?([^:?]+)(?:\\:(\\d+))?(\\?.+)?#', $this->_config['save_path'], $matches))\n        {\n            isset($matches[3]) OR $matches[3] = '';\n            $this->_config['save_path'] = array(\n                'host' => $matches[1],\n                'port' => empty($matches[2]) ? NULL : $matches[2],\n                'password' => preg_match('#auth=([^\\s&]+)#', $matches[3], $match) ? $match[1] : NULL,\n                'database' => preg_match('#database=(\\d+)#', $matches[3], $match) ? (int) $match[1] : NULL,\n                'timeout' => preg_match('#timeout=(\\d+\\.\\d+)#', $matches[3], $match) ? (float) $match[1] : NULL\n            );\n\n            preg_match('#prefix=([^\\s&]+)#', $matches[3], $match) && $this->_key_prefix = $match[1];\n        }\n        else\n        {\n            log_message('error', 'Session: Invalid Redis save path format: '.$this->_config['save_path']);\n        }\n\n        if ($this->_config['match_ip'] === TRUE)\n        {\n            $this->_key_prefix .= $_SERVER['REMOTE_ADDR'].':';\n        }\n    }\n\n    public function open($save_path, $name)\n    {\n        if (empty($this->_config['save_path']))\n        {\n            return $this->_fail();\n        }\n\n        $redis = new Redis();\n        if ( ! $redis->connect($this->_config['save_path']['host'], $this->_config['save_path']['port'], $this->_config['save_path']['timeout']))\n        {\n            log_message('error', 'Session: Unable to connect to Redis with the configured settings.');\n        }\n        elseif (isset($this->_config['save_path']['password']) && ! $redis->auth($this->_config['save_path']['password']))\n        {\n            log_message('error', 'Session: Unable to authenticate to Redis instance.');\n        }\n        elseif (isset($this->_config['save_path']['database']) && ! $redis->select($this->_config['save_path']['database']))\n        {\n            log_message('error', 'Session: Unable to select Redis database with index '.$this->_config['save_path']['database']);\n        }\n        else\n        {\n            $this->_redis = $redis;\n            return $this->_success;\n        }\n\n        return $this->_fail();\n    }\n\n    public function read($session_id)\n    {\n        if (isset($this->_redis) && $this->_get_lock($session_id))\n        {\n            $this->_session_id = $session_id;\n\n            $session_data = $this->_redis->get($this->_key_prefix.$session_id);\n\n            is_string($session_data)\n                ? $this->_key_exists = TRUE\n                : $session_data = '';\n\n            $this->_fingerprint = md5($session_data);\n            return $session_data;\n        }\n\n        return $this->_fail();\n    }\n\n    public function write($session_id, $session_data)\n    {\n        if ( ! isset($this->_redis, $this->_lock_key))\n        {\n            return $this->_fail();\n        }\n        elseif ($session_id !== $this->_session_id)\n        {\n            if ( ! $this->_release_lock() OR ! $this->_get_lock($session_id))\n            {\n                return $this->_fail();\n            }\n\n            $this->_key_exists = FALSE;\n            $this->_session_id = $session_id;\n        }\n\n        $this->_redis->setTimeout($this->_lock_key, 300);\n        if ($this->_fingerprint !== ($fingerprint = md5($session_data)) OR $this->_key_exists === FALSE)\n        {\n            if ($this->_redis->set($this->_key_prefix.$session_id, $session_data, $this->_config['expiration']))\n            {\n                $this->_fingerprint = $fingerprint;\n                $this->_key_exists = TRUE;\n                return $this->_success;\n            }\n\n            return $this->_fail();\n        }\n\n        return ($this->_redis->setTimeout($this->_key_prefix.$session_id, $this->_config['expiration']))\n            ? $this->_success\n            : $this->_fail();\n    }\n\n    public function close()\n    {\n        if (isset($this->_redis))\n        {\n            try {\n                if ($this->_redis->ping() === '+PONG')\n                {\n                    $this->_release_lock();\n                    if ($this->_redis->close() === FALSE)\n                    {\n                        return $this->_fail();\n                    }\n                }\n            }\n            catch (RedisException $e)\n            {\n                log_message('error', 'Session: Got RedisException on close(): '.$e->getMessage());\n            }\n\n            $this->_redis = NULL;\n            return $this->_success;\n        }\n\n        return $this->_success;\n    }\n\n    public function destroy($session_id)\n    {\n        if (isset($this->_redis, $this->_lock_key))\n        {\n            if (($result = $this->_redis->delete($this->_key_prefix.$session_id)) !== 1)\n            {\n                log_message('debug', 'Session: Redis::delete() expected to return 1, got '.var_export($result, TRUE).' instead.');\n            }\n\n            $this->_cookie_destroy();\n            return $this->_success;\n        }\n\n        return $this->_fail();\n    }\n\n    public function gc($maxlifetime)\n    {\n        return $this->_success;\n    }\n\n    protected function _get_lock($session_id)\n    {\n        if ($this->_lock_key === $this->_key_prefix.$session_id.':lock')\n        {\n            return $this->_redis->setTimeout($this->_lock_key, 300);\n        }\n\n        $lock_key = $this->_key_prefix.$session_id.':lock';\n        $attempt = 0;\n        do\n        {\n            if (($ttl = $this->_redis->ttl($lock_key)) > 0)\n            {\n                sleep(1);\n                continue;\n            }\n\n            $result = ($ttl === -2)\n                ? $this->_redis->set($lock_key, time(), array('nx', 'ex' => 300))\n                : $this->_redis->setex($lock_key, 300, time());\n\n            if ( ! $result)\n            {\n                log_message('error', 'Session: Error while trying to obtain lock for '.$this->_key_prefix.$session_id);\n                return FALSE;\n            }\n\n            $this->_lock_key = $lock_key;\n            break;\n        }\n        while (++$attempt < 30);\n\n        if ($attempt === 30)\n        {\n            log_message('error', 'Session: Unable to obtain lock for '.$this->_key_prefix.$session_id.' after 30 attempts, aborting.');\n            return FALSE;\n        }\n        elseif ($ttl === -1)\n        {\n            log_message('debug', 'Session: Lock for '.$this->_key_prefix.$session_id.' had no TTL, overriding.');\n        }\n\n        $this->_lock = TRUE;\n        return TRUE;\n    }\n\n    protected function _release_lock()\n    {\n        if (isset($this->_redis, $this->_lock_key) && $this->_lock)\n        {\n            if ( ! $this->_redis->delete($this->_lock_key))\n            {\n                log_message('error', 'Session: Error while trying to free lock for '.$this->_lock_key);\n                return FALSE;\n            }\n\n            $this->_lock_key = NULL;\n            $this->_lock = FALSE;\n        }\n\n        return TRUE;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "right_result": "class CI_Session_redis_driver implements SessionHandlerInterface {\n    private $_redis;\n    private $_key_prefix;\n    private $_lock_key;\n    private $_key_exists = false;\n    private $_config;\n    private $_session_id;\n    private $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = $params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n        $this->_redis->connect($params['host'], $params['port']);\n        if (isset($params['password'])) {\n            $this->_redis->auth($params['password']);\n        }\n    }\n\n    public function open($save_path, $name) {\n        return true;\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_key_exists = $this->_redis->exists($this->_key_prefix . $session_id);\n        return $this->_key_exists ? $this->_redis->get($this->_key_prefix . $session_id) : '';\n    }\n\n    public function write($session_id, $session_data) {\n        $this->_session_id = $session_id;\n        $this->_fingerprint = md5($session_data);\n        return $this->_redis->set($this->_key_prefix . $session_id, $session_data);\n    }\n\n    public function close() {\n        $this->_release_lock();\n        return true;\n    }\n\n    public function destroy($session_id) {\n        return $this->_redis->del($this->_key_prefix . $session_id) > 0;\n    }\n\n    public function gc($maxlifetime) {\n        return true;\n    }\n\n    private function _get_lock($session_id) {\n        $this->_lock_key = $this->_key_prefix . $session_id . ':lock';\n        return $this->_redis->set($this->_lock_key, 1, ['nx', 'ex' => 30]);\n    }\n\n    private function _release_lock() {\n        return $this->_redis->del($this->_lock_key) > 0;\n    }\n\n    private function _fail() {\n        return false;\n    }\n\n    private function _success() {\n        return true;\n    }\n}"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a PHP class that provides a Redis-based queue management system with connection handling, basic Redis operations, and error recovery mechanisms.\n\nClass Description: The `queue` class is a Redis wrapper that manages connections to Redis servers and provides common Redis operations with automatic reconnection on failure. It supports multiple Redis connections, connection pooling, and prefixing of keys.\n\nAttributes:\n- `$redis`: [static, mixed] - Placeholder for Redis instance (deprecated in favor of `$links`)\n- `$configs`: [static, array] - Stores configuration for different Redis connections\n- `$links`: [static, array] - Maintains active Redis connections\n- `$link_name`: [static, string] - Current connection name (defaults to 'default')\n- `$prefix`: [static, string] - Default prefix for Redis keys\n- `$error`: [static, string] - Stores the last error message\n\nMethods:\n- `init()` -> [bool|Redis] - Initializes Redis connection using current configuration. Returns Redis instance or false on failure.\n- `set($key, $value, $expire = 0)` -> [bool|null] - Sets a key-value pair in Redis with optional expiration. Returns true on success, null on failure.\n- `get($key)` -> [mixed|null] - Retrieves a value by key from Redis. Returns the value or null on failure.\n- `del($key)` -> [int|null] - Deletes a key from Redis. Returns number of deleted keys or null on failure.\n- `_get_default_config()` -> [array] - Retrieves default Redis configuration from global settings.\n- `clear_link()` -> [void] - Closes all active Redis connections and clears the connection pool.\n\nInput:\n- Configuration via `$GLOBALS['config']['redis']` for default connection\n- Method parameters as described above\n\nOutput:\n- For connection methods: Redis instance or boolean\n- For data operations: Various return types as described above\n- Error messages stored in `$error` property",
    "Canonical_solution": "namespace phpspider\\core;\n\nuse Exception;\nuse Redis;\n\nclass queue\n{\n    protected static $redis = NULL;\n    protected static $configs = array();\n    private static $links = array();\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init()\n    {\n        if (!extension_loaded('redis'))\n        {\n            self::$error = 'The redis extension was not found';\n            return false;\n        }\n\n        $config = self::$link_name == 'default' ? self::_get_default_config() : self::$configs[self::$link_name];\n\n        if (empty(self::$links[self::$link_name]))\n        {\n            self::$links[self::$link_name] = new Redis();\n            if (strstr($config['host'], '.sock'))\n            {\n                if (!self::$links[self::$link_name]->connect($config['host']))\n                {\n                    self::$error = 'Unable to connect to redis server';\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n            else\n            {\n                if (!self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']))\n                {\n                    self::$error = 'Unable to connect to redis server';\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            if ($config['pass'])\n            {\n                if (!self::$links[self::$link_name]->auth($config['pass']))\n                {\n                    self::$error = 'Redis Server authentication failed';\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            $prefix = empty($config['prefix']) ? self::$prefix : $config['prefix'];\n            self::$links[self::$link_name]->setOption(Redis::OPT_PREFIX, $prefix.':');\n            self::$links[self::$link_name]->setOption(Redis::OPT_READ_TIMEOUT, -1);\n            self::$links[self::$link_name]->select($config['db']);\n        }\n\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                if ($expire > 0)\n                {\n                    return self::$links[self::$link_name]->setex($key, $expire, $value);\n                }\n                else\n                {\n                    return self::$links[self::$link_name]->set($key, $value);\n                }\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error:  Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::set($key, $value, $expire);\n            }\n        }\n        return NULL;\n    }\n\n    public static function get($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->get($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error:  Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::get($key);\n            }\n        }\n        return NULL;\n    }\n\n    public static function del($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->del($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error:  Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::del($key);\n            }\n        }\n        return NULL;\n    }\n\n    protected static function _get_default_config()\n    {\n        if (empty(self::$configs['default']))\n        {\n            if (!is_array($GLOBALS['config']['redis']))\n            {\n                exit('cls_redis.php _get_default_config()' . '\u6ca1\u6709redis\u914d\u7f6e');\n            }\n            self::$configs['default'] = $GLOBALS['config']['redis'];\n        }\n        return self::$configs['default'];\n    }\n\n    public static function clear_link()\n    {\n        if(self::$links) \n        {\n            foreach(self::$links as $k=>$v)\n            {\n                $v->close();\n                unset(self::$links[$k]);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "right_result": "class queue {\n    private static $redis = null;\n    private static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    private static $prefix = '';\n    private static $error = '';\n\n    public static function init() {\n        if (isset(self::$links[self::$link_name])) {\n            return self::$links[self::$link_name];\n        }\n        $config = self::_get_default_config();\n        try {\n            self::$links[self::$link_name] = new Redis();\n            self::$links[self::$link_name]->connect($config['host'], $config['port']);\n            if (isset($config['password'])) {\n                self::$links[self::$link_name]->auth($config['password']);\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) return null;\n        $key = self::$prefix . $key;\n        return $expire > 0 ? $redis->setex($key, $expire, $value) : $redis->set($key, $value);\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) return null;\n        $key = self::$prefix . $key;\n        return $redis->get($key);\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) return null;\n        $key = self::$prefix . $key;\n        return $redis->del($key);\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => null\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Redis cache driver class for CodeIgniter that implements basic cache operations using Redis as the backend storage.\n\nClass Description: The CI_Cache_redis class extends CI_Driver and provides an interface for caching data in Redis. It handles connection management, serialization of complex data types, and standard cache operations like get, save, delete, increment, and decrement.\n\nAttributes:\n- $_default_config: [array] - Default configuration for Redis connection\n- $_redis: [Redis] - Redis client instance\n- $_serialized: [array] - Track which keys contain serialized data\n\nMethods:\n- __construct() -> [void] - Initializes Redis connection using configuration\n- get($key) -> [mixed] - Retrieves data from cache by key\n- save($id, $data, $ttl = 60, $raw = FALSE) -> [bool] - Stores data in cache with optional TTL\n- delete($key) -> [bool] - Removes data from cache by key\n- increment($id, $offset = 1) -> [int|bool] - Increments a numeric value in cache\n- decrement($id, $offset = 1) -> [int|bool] - Decrements a numeric value in cache\n- clean() -> [bool] - Clears all cache entries\n- cache_info($type = NULL) -> [array] - Returns Redis server information\n- get_metadata($key) -> [array|bool] - Returns metadata about a cache entry\n- is_supported() -> [bool] - Checks if Redis extension is loaded\n- __destruct() -> [void] - Closes Redis connection when object is destroyed",
    "Canonical_solution": "class CI_Cache_redis extends CI_Driver\n{\n    protected static $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'password' => NULL,\n        'port' => 6379,\n        'timeout' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if ( ! $this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to create Redis object; extension not loaded?');\n            return;\n        }\n\n        $CI =& get_instance();\n\n        if ($CI->config->load('redis', TRUE, TRUE))\n        {\n            $config = array_merge(self::$_default_config, $CI->config->item('redis'));\n        }\n        else\n        {\n            $config = self::$_default_config;\n        }\n\n        $this->_redis = new Redis();\n\n        try\n        {\n            if ($config['socket_type'] === 'unix')\n            {\n                $success = $this->_redis->connect($config['socket']);\n            }\n            else\n            {\n                $success = $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if ( ! $success)\n            {\n                log_message('error', 'Cache: Redis connection failed. Check your configuration.');\n            }\n\n            if (isset($config['password']) && ! $this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Redis authentication failed.');\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection refused ('.$e->getMessage().')');\n        }\n\n        $serialized = $this->_redis->sMembers('_ci_redis_serialized');\n        empty($serialized) OR $this->_serialized = array_flip($serialized);\n    }\n\n    public function get($key)\n    {\n        $value = $this->_redis->get($key);\n\n        if ($value !== FALSE && isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if (is_array($data) OR is_object($data))\n        {\n            if ( ! $this->_redis->sIsMember('_ci_redis_serialized', $id) && ! $this->_redis->sAdd('_ci_redis_serialized', $id))\n            {\n                return FALSE;\n            }\n\n            isset($this->_serialized[$id]) OR $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n        elseif (isset($this->_serialized[$id]))\n        {\n            $this->_serialized[$id] = NULL;\n            $this->_redis->sRemove('_ci_redis_serialized', $id);\n        }\n\n        return $this->_redis->set($id, $data, $ttl);\n    }\n\n    public function delete($key)\n    {\n        if ($this->_redis->delete($key) !== 1)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            $this->_serialized[$key] = NULL;\n            $this->_redis->sRemove('_ci_redis_serialized', $key);\n        }\n\n        return TRUE;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incr($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decr($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info();\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n\n        if ($value !== FALSE)\n        {\n            return array(\n                'expire' => time() + $this->_redis->ttl($key),\n                'data' => $value\n            );\n        }\n\n        return FALSE;\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "right_result": "class CI_Cache_redis extends CI_Driver {\n    protected $_default_config = array(\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'database' => 0,\n    );\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct($config = array()) {\n        $this->_default_config = array_merge($this->_default_config, $config);\n        $this->_redis = new Redis();\n        $this->_redis->connect($this->_default_config['host'], $this->_default_config['port']);\n        if (!empty($this->_default_config['password'])) {\n            $this->_redis->auth($this->_default_config['password']);\n        }\n        $this->_redis->select($this->_default_config['database']);\n    }\n\n    public function get($key) {\n        $data = $this->_redis->get($key);\n        return $data !== false ? (isset($this->_serialized[$key]) ? unserialize($data) : $data) : false;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE) {\n        if (!$raw) {\n            $this->_serialized[$id] = true;\n            $data = serialize($data);\n        }\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key) {\n        return $this->_redis->delete($key) > 0;\n    }\n\n    public function increment($id, $offset = 1) {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1) {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean() {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL) {\n        return $this->_redis->info();\n    }\n\n    public function get_metadata($key) {\n        $ttl = $this->_redis->ttl($key);\n        return $ttl >= 0 ? array('expire' => time() + $ttl, 'data' => $this->get($key)) : false;\n    }\n\n    public function is_supported() {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct() {\n        $this->_redis->close();\n    }\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Redis wrapper class in PHP that provides a simplified interface for connecting to and interacting with a Redis server, including connection management, basic operations, and error handling.\n\nClass Description: The cls_redis class is a singleton-style wrapper for PHP's Redis extension that manages Redis connections, provides common Redis operations, and handles connection errors gracefully. It supports multiple connection configurations, automatic reconnection on failure, and key prefixing.\n\nAttributes:\n\nAttribute1: protected static $redis - Redis - Singleton Redis instance (deprecated)\nAttribute2: protected static $configs - array - Stores Redis connection configurations\nAttribute3: private static $links - array - Maintains active Redis connections\nAttribute4: private static $link_name - string - Current connection name (default 'default')\nAttribute5: public static $prefix - string - Default key prefix ('phpspider')\nAttribute6: public static $error - string - Stores last error message\n\nMethods:\n\nMethod1: init() -> Redis|false - Initializes and returns a Redis connection instance\nMethod2: set(string $key, mixed $value, int $expire = 0) -> bool|null - Stores a value in Redis with optional expiration\nMethod3: get(string $key) -> mixed|null - Retrieves a value from Redis by key\nMethod4: clear_link() -> void - Closes all active Redis connections\nMethod5: _get_default_config() -> array - Retrieves default Redis configuration from global settings",
    "Canonical_solution": "class cls_redis\n{\n    protected static $redis = NULL;\n    protected static $configs = array();\n    private static $links = array();\n    private static $link_name = 'default';\n    public static $prefix = \"phpspider\";\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!extension_loaded(\"redis\"))\n        {\n            self::$error = \"The redis extension was not found\";\n            return false;\n        }\n\n        $config = self::$link_name == 'default' ? self::_get_default_config() : self::$configs[self::$link_name];\n\n        if (empty(self::$links[self::$link_name]))\n        {\n            self::$links[self::$link_name] = new Redis();\n            if (!self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']))\n            {\n                self::$error = \"Unable to connect to redis server\\nPlease check the configuration file config/inc_config.php\";\n                unset(self::$links[self::$link_name]);\n                return false;\n            }\n\n            if ($config['pass'])\n            {\n                if (!self::$links[self::$link_name]->auth($config['pass'])) \n                {\n                    self::$error = \"Redis Server authentication failed\\nPlease check the configuration file config/inc_config.php\";\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            $prefix = empty($config['prefix']) ? self::$prefix : $config['prefix'];\n            self::$links[self::$link_name]->setOption(Redis::OPT_PREFIX, $prefix . \":\");\n            self::$links[self::$link_name]->setOption(Redis::OPT_READ_TIMEOUT, -1);\n            self::$links[self::$link_name]->select($config['db']);\n        }\n\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                if ($expire > 0)\n                {\n                    return self::$links[self::$link_name]->setex($key, $expire, $value);\n                }\n                else\n                {\n                    return self::$links[self::$link_name]->set($key, $value);\n                }\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::set($key, $value, $expire);\n            }\n        }\n        return NULL;\n    }\n\n    public static function get($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->get($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::get($key);\n            }\n        }\n        return NULL;\n    }\n\n    public static function clear_link()\n    {\n        if(self::$links) \n        {\n            foreach(self::$links as $k=>$v)\n            {\n                $v->close();\n                unset(self::$links[$k]);\n            }\n        }\n    }\n\n    protected static function _get_default_config()\n    {\n        if (empty(self::$configs['default']))\n        {\n            if (!is_array($GLOBALS['config']['redis']))\n            {\n                exit('cls_redis.php _get_default_config()' . '\u6ca1\u6709redis\u914d\u7f6e');\n            }\n            self::$configs['default'] = $GLOBALS['config']['redis'];\n        }\n        return self::$configs['default'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "right_result": "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (isset(self::$links[self::$link_name])) {\n            return self::$links[self::$link_name];\n        }\n        try {\n            $config = self::_get_default_config();\n            $redis = new Redis();\n            $redis->connect($config['host'], $config['port']);\n            if (isset($config['password'])) {\n                $redis->auth($config['password']);\n            }\n            self::$links[self::$link_name] = $redis;\n            return $redis;\n        } catch (RedisException $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set(string $key, $value, int $expire = 0) {\n        $redis = self::init();\n        if (!$redis) return null;\n        $key = self::$prefix . ':' . $key;\n        return $expire ? $redis->set($key, $value, $expire) : $redis->set($key, $value);\n    }\n\n    public static function get(string $key) {\n        $redis = self::init();\n        if (!$redis) return null;\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => null\n        ];\n    }\n}"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a PHP function that implements a basic TCP socket server capable of handling client connections, executing commands, and managing directory changes.\n\nFunction Description: The function starts a TCP socket server on a specified port, accepts client connections, and provides an interactive shell-like interface. It handles 'cd' commands for directory navigation, 'exit'/'quit' commands for termination, and executes other system commands. The server sends command outputs and current working directory information back to the client.\n\nInput:\n- $port: integer - The port number to bind the server socket to\n- $wpxf_disabled: array - List of disabled functions/callables\n- $wpxf_exec: callable - Function to execute system commands\n\nOutput: None (The function runs indefinitely until the client disconnects or sends an exit command)",
    "Canonical_solution": "function start_socket_server($port, $wpxf_disabled, $wpxf_exec)\n{\n    $scl = 'socket_create_listen';\n    if (is_callable($scl) && !in_array($scl, $wpxf_disabled)) {\n        $sock = @$scl($port);\n    } else {\n        $sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        $ret = @socket_bind($sock, 0, $port);\n        $ret = @socket_listen($sock, 5);\n    }\n\n    $msg_sock = @socket_accept($sock);\n    @socket_close($sock);\n\n    $output = getcwd() . ' > ';\n    @socket_write($msg_sock, $output, strlen($output));\n\n    while (false !== @socket_select($r = array($msg_sock), $w = null, $e = null, null)) {\n        $output = '';\n        $cmd = @socket_read($msg_sock, 2048, PHP_NORMAL_READ);\n\n        if (false === $cmd) {\n            break;\n        }\n        if (substr($cmd, 0, 3) == 'cd ') {\n            chdir(substr($cmd, 3, -1));\n            $output = getcwd() . ' > ';\n        } elseif (substr($cmd, 0, 4) == 'quit' || substr($cmd, 0, 4) == 'exit') {\n            break;\n        } else {\n            if (false === strpos(strtolower(PHP_OS), 'win')) {\n                $cmd = rtrim($cmd) . ' 2>&1';\n            }\n\n            $output = $wpxf_exec($cmd);\n            $output .= getcwd() . ' > ';\n        }\n\n        @socket_write($msg_sock, $output, strlen($output));\n    }\n\n    @socket_close($msg_sock);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 136,
    "right_result": "function startTcpSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $server = socket_create(AF_INET, SOCK_STREAM, 0);\n    socket_bind($server, '0.0.0.0', $port);\n    socket_listen($server);\n    \n    while (true) {\n        $client = socket_accept($server);\n        socket_write($client, \"Welcome to the PHP TCP Socket Server. Type 'exit' to quit.\\n\");\n        \n        while (true) {\n            $cwd = getcwd();\n            socket_write($client, \"$cwd> \");\n            $input = socket_read($client, 1024);\n            $input = trim($input);\n            \n            if ($input === 'exit' || $input === 'quit') {\n                socket_write($client, \"Goodbye!\\n\");\n                break;\n            } elseif (strpos($input, 'cd ') === 0) {\n                $dir = substr($input, 3);\n                if (chdir($dir)) {\n                    socket_write($client, \"Changed directory to $dir\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to $dir\\n\");\n                }\n            } else {\n                if (in_array($input, $wpxf_disabled)) {\n                    socket_write($client, \"Command disabled.\\n\");\n                } else {\n                    $output = call_user_func($wpxf_exec, $input);\n                    socket_write($client, $output . \"\\n\");\n                }\n            }\n        }\n        \n        socket_close($client);\n    }\n    \n    socket_close($server);\n}"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a WebSocket server in PHP using stream_socket_server that handles client connections, processes requests, and sends responses.\n\nClass Description: The Server class implements a WebSocket server that listens for incoming connections, handles client requests through callbacks, and manages socket communication. It supports non-blocking operations and provides hooks for custom logic.\n\nAttributes:\n- host: string - The host address to bind the server to\n- port: int - The port number to listen on\n- output: OutputInterface - Interface for debug and status output\n- stop: bool - Flag to control server shutdown\n- socket: resource - The main server socket resource\n- clientSockets: array - Array of connected client sockets\n- afterCallback: Closure - Callback executed after server starts\n- tickerCallback: Closure - Periodic callback during server loop\n- routerCallback: Closure - Request routing callback\n\nMethods:\n- __construct(string $host, int $port, OutputInterface $output) -> void - Initializes server with host, port and output interface\n- checkRequiredExtensionsExists() -> void - Validates required PHP extensions are loaded\n- run() -> void - Starts the server main loop\n- createServerSocket() -> resource - Creates and configures the server socket\n- updatePort() -> void - Updates the port number from actual socket binding\n- acceptNewConnections() -> void - Accepts new client connections\n- handleClientRequests() -> void - Processes requests from connected clients\n- readClientRequest(resource $clientSocket) -> string - Reads complete request from client\n- parseRequest(string $request) -> array - Parses request into path and payload\n- sendResponse(resource $clientSocket, Response $response) -> void - Sends formatted response to client\n- closeClientSocket(resource $clientSocket, int $key) -> void - Closes and removes client socket\n- afterRun(Closure $param) -> void - Sets after-start callback\n- ticker(Closure $param) -> void - Sets periodic tick callback\n- router(Closure $param) -> void - Sets request routing callback\n- stop() -> void - Signals server to stop",
    "Canonical_solution": "use Closure;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass Server\n{\n    private string $host;\n    private int $port;\n    private OutputInterface $output;\n    private bool $stop = false;\n    private $socket;\n    private array $clientSockets = [];\n    private Closure $afterCallback;\n    private Closure $tickerCallback;\n    private Closure $routerCallback;\n\n    public function __construct($host, $port, OutputInterface $output)\n    {\n        self::checkRequiredExtensionsExists();\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n    }\n\n    public static function checkRequiredExtensionsExists(): void\n    {\n        if (!function_exists('socket_import_stream')) {\n            throw new Exception('Required PHP extension \"sockets\" is not loaded');\n        }\n        if (!function_exists('stream_set_blocking')) {\n            throw new Exception('Required PHP extension \"stream\" is not loaded');\n        }\n    }\n\n    public function run(): void\n    {\n        try {\n            $this->socket = $this->createServerSocket();\n            $this->updatePort();\n            if ($this->output->isDebug()) {\n                $this->output->writeln(\"[master] Starting server at http://{$this->host}:{$this->port}\");\n            }\n\n            ($this->afterCallback)($this->port);\n\n            while (true) {\n                $this->acceptNewConnections();\n                $this->handleClientRequests();\n                usleep(16_000);\n                ($this->tickerCallback)();\n                if ($this->stop) {\n                    break;\n                }\n            }\n\n            if ($this->output->isDebug()) {\n                $this->output->writeln(\"[master] Stopping server at http://{$this->host}:{$this->port}\");\n            }\n        } finally {\n            if (isset($this->socket)) {\n                fclose($this->socket);\n            }\n        }\n    }\n\n    private function createServerSocket()\n    {\n        $server = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$server) {\n            throw new Exception(\"Socket creation failed: $errstr ($errno)\");\n        }\n        if (!stream_set_blocking($server, false)) {\n            throw new Exception(\"Failed to set server socket to non-blocking mode\");\n        }\n        return $server;\n    }\n\n    private function updatePort(): void\n    {\n        $name = stream_socket_get_name($this->socket, false);\n        if ($name) {\n            list(, $port) = explode(':', $name);\n            $this->port = (int) $port;\n        } else {\n            throw new Exception(\"Failed to get the assigned port\");\n        }\n    }\n\n    private function acceptNewConnections(): void\n    {\n        $newClientSocket = @stream_socket_accept($this->socket, 0);\n        if ($newClientSocket) {\n            if (!stream_set_blocking($newClientSocket, false)) {\n                throw new Exception(\"Failed to set client socket to non-blocking mode\");\n            }\n            $this->clientSockets[] = $newClientSocket;\n        }\n    }\n\n    private function handleClientRequests(): void\n    {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            if (feof($clientSocket)) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $request = $this->readClientRequest($clientSocket);\n            list($path, $payload) = $this->parseRequest($request);\n            $response = ($this->routerCallback)($path, $payload);\n            $this->sendResponse($clientSocket, $response);\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    private function readClientRequest($clientSocket)\n    {\n        $request = '';\n        while (($chunk = @fread($clientSocket, 1024)) !== false) {\n            $request .= $chunk;\n            if (strpos($request, \"\\r\\n\\r\\n\") !== false) {\n                break;\n            }\n        }\n        if ($chunk === false && !feof($clientSocket)) {\n            throw new Exception(\"Socket read failed\");\n        }\n        return $request;\n    }\n\n    private function parseRequest($request)\n    {\n        $lines = explode(\"\\r\\n\", $request);\n        $requestLine = $lines[0];\n        $parts = explode(' ', $requestLine);\n        if (count($parts) !== 3) {\n            throw new Exception(\"Malformed request line: $requestLine\");\n        }\n        $path = $parts[1];\n\n        $headers = [];\n        for ($i = 1; $i < count($lines); $i++) {\n            $line = $lines[$i];\n            if (empty($line)) {\n                break;\n            }\n            [$key, $value] = explode(':', $line, 2);\n            $headers[$key] = trim($value);\n        }\n        if (empty($headers['Content-Type']) || $headers['Content-Type'] !== 'application/json') {\n            throw new Exception(\"Malformed request: invalid Content-Type\");\n        }\n\n        $payload = json_decode(implode(\"\\n\", array_slice($lines, $i + 1)), true, flags: JSON_THROW_ON_ERROR);\n        return [$path, $payload];\n    }\n\n    private function sendResponse($clientSocket, Response $response)\n    {\n        $code = $response->getStatus();\n        $content = json_encode($response->getBody(), flags: JSON_PRETTY_PRINT);\n        $headers = \"HTTP/1.1 $code OK\\r\\n\" .\n            \"Content-Type: application/json\\r\\n\" .\n            \"Content-Length: \" . strlen($content) . \"\\r\\n\" .\n            \"Connection: close\\r\\n\\r\\n\";\n        fwrite($clientSocket, $headers . $content);\n    }\n\n    private function closeClientSocket($clientSocket, $key): void\n    {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n    }\n\n    public function afterRun(Closure $param): void\n    {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param): void\n    {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param)\n    {\n        $this->routerCallback = $param;\n    }\n\n    public function stop(): void\n    {\n        $this->stop = true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 129,
    "right_result": "class Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop = false;\n    private $socket;\n    private $clientSockets = [];\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->checkRequiredExtensionsExists();\n        $this->socket = $this->createServerSocket();\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new \\Exception('The sockets extension is required.');\n        }\n    }\n\n    public function run() {\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\");\n        if ($this->afterCallback) {\n            ($this->afterCallback)();\n        }\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n            if ($this->tickerCallback) {\n                ($this->tickerCallback)();\n            }\n            usleep(100000); // Sleep for 100ms\n        }\n        fclose($this->socket);\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$socket) {\n            throw new \\Exception(\"Could not create server socket: $errstr\");\n        }\n        stream_set_blocking($socket, false);\n        return $socket;\n    }\n\n    private function acceptNewConnections() {\n        $clientSocket = @stream_socket_accept($this->socket);\n        if ($clientSocket) {\n            $this->clientSockets[] = $clientSocket;\n            $this->output->write(\"New client connected.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request) {\n                $this->processRequest($clientSocket, $request);\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $data = fread($clientSocket, 2048);\n        return $data ? $data : null;\n    }\n\n    private function processRequest($clientSocket, $request) {\n        $parsedRequest = $this->parseRequest($request);\n        if ($this->routerCallback) {\n            ($this->routerCallback)($clientSocket, $parsedRequest);\n        }\n    }\n\n    private function parseRequest($request) {\n        // Simple parsing logic\n        return ['path' => '/example', 'payload' => $request];\n    }\n\n    public function sendResponse($clientSocket, $response) {\n        fwrite($clientSocket, $response);\n    }\n\n    public function closeClientSocket($clientSocket, $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\");\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a function that executes a shell command and captures its output using PHP's proc_open for inter-process communication.\n\nFunction Description: The function executes a given shell command as a subprocess and returns its standard output. It handles both string and array command formats, manages Windows code page settings if applicable, and ensures proper cleanup of resources. The function returns null if proc_open is unavailable or if process creation fails.\n\nInput: \n- $command: string|array - The shell command to execute, either as a string or array of arguments\n\nOutput: \n- ?string - The captured standard output from the command, or null if execution failed",
    "Canonical_solution": "function readFromProcess(string|array $command): ?string\n{\n    if (!\\function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $cp = \\function_exists('sapi_windows_cp_set') ? sapi_windows_cp_get() : 0;\n\n    $process = proc_open($command, $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);\n    if (!\\is_resource($process)) {\n        return null;\n    }\n\n    $info = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    proc_close($process);\n\n    if ($cp) {\n        sapi_windows_cp_set($cp);\n    }\n\n    return $info;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "right_result": "function executeShellCommand($command) {\n    if (!is_callable('proc_open')) {\n        return null;\n    }\n\n    if (is_array($command)) {\n        $command = implode(' ', array_map('escapeshellarg', $command));\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin\n        1 => ['pipe', 'w'], // stdout\n        2 => ['pipe', 'w']  // stderr\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n        proc_close($process);\n        return $output;\n    }\n\n    return null;\n}"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a function that generates an image from a DOT script using the Graphviz `dot` command-line tool through inter-process communication in PHP.\n\nFunction Description: The function takes a DOT script and an image type as input, executes the `dot` command with the specified type, and returns the generated image data. It handles the subprocess communication using pipes for stdin, stdout, and stderr, ensuring proper resource cleanup and error handling.\n\nInput: \n- $dot_script: string - The DOT language script to be processed by Graphviz\n- $type: string - The output image type (e.g., 'png', 'svg', 'jpg')\n\nOutput: \n- Returns: string - The binary data of the generated image\n- On error: Prints error message to stderr and exits the program",
    "Canonical_solution": "function xhprof_generate_image_by_dot($dot_script, $type) {\n  $descriptorspec = array(\n       // stdin is a pipe that the child will read from\n       0 => array(\"pipe\", \"r\"),\n       // stdout is a pipe that the child will write to\n       1 => array(\"pipe\", \"w\"),\n       // stderr is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")\n       );\n\n  $cmd = \" dot -T\".$type;\n\n  $process = proc_open( $cmd, $descriptorspec, $pipes, sys_get_temp_dir(), array( 'PATH' => getenv( 'PATH' ) );\n  if (is_resource($process)) {\n    fwrite($pipes[0], $dot_script);\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n\n    $err = stream_get_contents($pipes[2]);\n    if (!empty($err)) {\n      print \"failed to execute cmd: \\\"$cmd\\\". stderr: `$err'\\n\";\n      exit;\n    }\n\n    fclose($pipes[2]);\n    fclose($pipes[1]);\n    proc_close($process);\n    return $output;\n  }\n  print \"failed to execute cmd \\\"$cmd\\\"\";\n  exit();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "right_result": "function generateImageFromDot($dot_script, $type) {\n    $descriptorspec = [\n        0 => [\"pipe\", \"r\"],  // stdin\n        1 => [\"pipe\", \"w\"],  // stdout\n        2 => [\"pipe\", \"w\"]   // stderr\n    ];\n\n    $process = proc_open(\"dot -T$type\", $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $image_data = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error_output = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0) {\n            fwrite(STDERR, \"Error generating image: $error_output\");\n            exit(1);\n        }\n\n        return $image_data;\n    } else {\n        fwrite(STDERR, \"Could not open process.\");\n        exit(1);\n    }\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a PHP class that manages subprocess execution using proc_open, handling input/output through pipes, with support for timeouts and temporary files.\n\nClass Description: The DefaultPhpProcess class provides functionality to execute subprocesses in PHP using proc_open, managing standard input/output/error streams through pipes. It supports timeout handling, environment variable configuration, and temporary file usage for large inputs.\n\nAttributes:\n- tempFile: [string|null] - Path to temporary file used for storing input when needed\n- stdin: [string|null] - Standard input content for the subprocess\n- env: [array|null] - Environment variables to pass to the subprocess\n- timeout: [int|null] - Maximum execution time in seconds before terminating the subprocess\n\nMethods:\n- runJob(string $job, array $settings = []): array - Executes a job with optional settings, returns output\n  Input: \n    - $job: [string] - The input content for the subprocess\n    - $settings: [array] - Additional execution settings\n  Output: [array] - Associative array containing 'stdout' and 'stderr' output\n\n- getHandles(): array - Returns additional stream handles for the subprocess\n  Output: [array] - Array of stream handles\n\n- runProcess(string $job, array $settings): array - Internal method to execute the subprocess\n  Input:\n    - $job: [string] - The input content\n    - $settings: [array] - Execution settings\n  Output: [array] - Associative array containing 'stdout' and 'stderr'\n\n- process(resource $pipe, string $job): void - Writes job content to the input pipe\n  Input:\n    - $pipe: [resource] - The input pipe resource\n    - $job: [string] - Content to write\n\n- cleanup(): void - Cleans up temporary resources (files)\n  \n- useTemporaryFile(): bool - Determines whether to use temporary files for input\n  Output: [bool] - True if temporary files should be used",
    "Canonical_solution": "use function array_merge;\nuse function fclose;\nuse function file_put_contents;\nuse function fread;\nuse function fwrite;\nuse function is_array;\nuse function is_resource;\nuse function proc_close;\nuse function proc_open;\nuse function proc_terminate;\nuse function rewind;\nuse function sprintf;\nuse function stream_get_contents;\nuse function stream_select;\nuse function sys_get_temp_dir;\nuse function tempnam;\nuse function unlink;\nuse PHPUnit\\Framework\\Exception;\n\nclass DefaultPhpProcess\n{\n    protected $tempFile;\n\n    public function runJob(string $job, array $settings = []): array\n    {\n        if ($this->stdin || $this->useTemporaryFile()) {\n            if (!($this->tempFile = tempnam(sys_get_temp_dir(), 'PHPUnit')) ||\n                file_put_contents($this->tempFile, $job) === false) {\n                throw new Exception(\n                    'Unable to write temporary file',\n                );\n            }\n\n            $job = $this->stdin;\n        }\n\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array\n    {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array\n    {\n        $handles = $this->getHandles();\n\n        $env = null;\n\n        if ($this->env) {\n            $env = $_SERVER ?? [];\n            unset($env['argv'], $env['argc']);\n            $env = array_merge($env, $this->env);\n\n            foreach ($env as $envKey => $envVar) {\n                if (is_array($envVar)) {\n                    unset($env[$envKey]);\n                }\n            }\n        }\n\n        $pipeSpec = [\n            0 => $handles[0] ?? ['pipe', 'r'],\n            1 => $handles[1] ?? ['pipe', 'w'],\n            2 => $handles[2] ?? ['pipe', 'w'],\n        ];\n\n        $process = proc_open(\n            $this->getCommand($settings, $this->tempFile),\n            $pipeSpec,\n            $pipes,\n            null,\n            $env,\n        );\n\n        if (!is_resource($process)) {\n            throw new Exception(\n                'Unable to spawn worker process',\n            );\n        }\n\n        if ($job) {\n            $this->process($pipes[0], $job);\n        }\n\n        fclose($pipes[0]);\n\n        $stderr = $stdout = '';\n\n        if ($this->timeout) {\n            unset($pipes[0]);\n\n            while (true) {\n                $r = $pipes;\n                $w = null;\n                $e = null;\n\n                $n = @stream_select($r, $w, $e, $this->timeout);\n\n                if ($n === false) {\n                    break;\n                }\n\n                if ($n === 0) {\n                    proc_terminate($process, 9);\n\n                    throw new Exception(\n                        sprintf(\n                            'Job execution aborted after %d seconds',\n                            $this->timeout,\n                        ),\n                    );\n                }\n\n                if ($n > 0) {\n                    foreach ($r as $pipe) {\n                        $pipeOffset = 0;\n\n                        foreach ($pipes as $i => $origPipe) {\n                            if ($pipe === $origPipe) {\n                                $pipeOffset = $i;\n\n                                break;\n                            }\n                        }\n\n                        if (!$pipeOffset) {\n                            break;\n                        }\n\n                        $line = fread($pipe, 8192);\n\n                        if ($line === '' || $line === false) {\n                            fclose($pipes[$pipeOffset]);\n\n                            unset($pipes[$pipeOffset]);\n                        } elseif ($pipeOffset === 1) {\n                            $stdout .= $line;\n                        } else {\n                            $stderr .= $line;\n                        }\n                    }\n\n                    if (empty($pipes)) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (isset($pipes[1])) {\n                $stdout = stream_get_contents($pipes[1]);\n\n                fclose($pipes[1]);\n            }\n\n            if (isset($pipes[2])) {\n                $stderr = stream_get_contents($pipes[2]);\n\n                fclose($pipes[2]);\n            }\n        }\n\n        if (isset($handles[1])) {\n            rewind($handles[1]);\n\n            $stdout = stream_get_contents($handles[1]);\n\n            fclose($handles[1]);\n        }\n\n        if (isset($handles[2])) {\n            rewind($handles[2]);\n\n            $stderr = stream_get_contents($handles[2]);\n\n            fclose($handles[2]);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    protected function process($pipe, string $job): void\n    {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void\n    {\n        if ($this->tempFile) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool\n    {\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "right_result": "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob(string $job, array $settings = []): array {\n        return $this->runProcess($job, $settings);\n    }\n\n    private function runProcess(string $job, array $settings): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $process = proc_open($settings['command'], $descriptorspec, $pipes, null, $this->env);\n        if (is_resource($process)) {\n            if ($this->useTemporaryFile()) {\n                $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process_');\n                file_put_contents($this->tempFile, $job);\n                $job = $this->tempFile;\n            }\n\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $return_value = proc_close($process);\n\n            $this->cleanup();\n\n            return ['stdout' => $stdout, 'stderr' => $stderr, 'return_value' => $return_value];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Process could not be started', 'return_value' => -1];\n    }\n\n    private function process($pipe, string $job): void {\n        if (is_file($job)) {\n            $jobContent = file_get_contents($job);\n            fwrite($pipe, $jobContent);\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup(): void {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile(): bool {\n        return is_null($this->stdin) || strlen($this->stdin) > 1024; // Example threshold\n    }\n\n    public function getHandles(): array {\n        return ['tempFile' => $this->tempFile, 'stdin' => $this->stdin, 'env' => $this->env, 'timeout' => $this->timeout];\n    }\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a PHP class that facilitates the execution of shell commands as subprocesses, handling input/output streams, and providing process execution details.\n\nClass Description: The Process class provides a way to execute shell commands as subprocesses, capturing their output streams (stdout and stderr), return codes, and execution time. It includes methods for basic execution and error-checked execution variants.\n\nAttributes:\n\ncommand: [string] - The shell command to be executed\ncwd: [string|null] - The working directory for the command execution\nenv: [array] - Environment variables for the command\ndescriptors: [array] - Static array defining I/O streams configuration\nlog_run_times: [bool] - Static flag to enable execution time logging\nrun_times: [array] - Static array storing command execution time statistics\n\nMethods:\n\ncreate: [static](string $command, string|null $cwd = null, array $env = []) -> [Process] - Factory method to create a new Process instance\nrun: [](void) -> [ProcessRun] - Executes the command and returns execution details including stdout, stderr, and return code\nrun_check: [](void) -> [ProcessRun] - Executes the command and throws RuntimeException if return code is non-zero\nrun_check_stderr: [](void) -> [ProcessRun] - Executes the command and throws RuntimeException if return code is non-zero or if stderr contains unexpected output (with specific exception for known PSR-0 deprecation warning)",
    "Canonical_solution": "namespace WP_CLI;\n\nuse RuntimeException;\n\nclass Process {\n\tprivate $command;\n\tprivate $cwd;\n\tprivate $env;\n\tprivate static $descriptors = [\n\t\t0 => STDIN,\n\t\t1 => [ 'pipe', 'w' ],\n\t\t2 => [ 'pipe', 'w' ],\n\t];\n\tpublic static $log_run_times = false;\n\tpublic static $run_times = [];\n\n\tpublic static function create( $command, $cwd = null, $env = [] ) {\n\t\t$proc = new self();\n\t\t$proc->command = $command;\n\t\t$proc->cwd = $cwd;\n\t\t$proc->env = $env;\n\t\treturn $proc;\n\t}\n\n\tprivate function __construct() {}\n\n\tpublic function run() {\n\t\tUtils\\check_proc_available( 'Process::run' );\n\n\t\t$start_time = microtime( true );\n\t\t$pipes = [];\n\t\t$proc = Utils\\proc_open_compat( $this->command, self::$descriptors, $pipes, $this->cwd, $this->env );\n\n\t\t$stdout = stream_get_contents( $pipes[1] );\n\t\tfclose( $pipes[1] );\n\n\t\t$stderr = stream_get_contents( $pipes[2] );\n\t\tfclose( $pipes[2] );\n\n\t\t$return_code = proc_close( $proc );\n\n\t\t$run_time = microtime( true ) - $start_time;\n\n\t\tif ( self::$log_run_times ) {\n\t\t\tif ( ! isset( self::$run_times[ $this->command ] ) ) {\n\t\t\t\tself::$run_times[ $this->command ] = [ 0, 0 ];\n\t\t\t}\n\t\t\tself::$run_times[ $this->command ][0] += $run_time;\n\t\t\t++self::$run_times[ $this->command ][1];\n\t\t}\n\n\t\treturn new ProcessRun( [\n\t\t\t'stdout' => $stdout,\n\t\t\t'stderr' => $stderr,\n\t\t\t'return_code' => $return_code,\n\t\t\t'command' => $this->command,\n\t\t\t'cwd' => $this->cwd,\n\t\t\t'env' => $this->env,\n\t\t\t'run_time' => $run_time,\n\t\t] );\n\t}\n\n\tpublic function run_check() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code ) {\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n\n\tpublic function run_check_stderr() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code ) {\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\tif ( ! empty( $r->stderr ) ) {\n\t\t\t$stderr_lines = array_filter( explode( \"\\n\", $r->stderr ) );\n\t\t\tif ( 1 === count( $stderr_lines ) ) {\n\t\t\t\t$stderr_line = $stderr_lines[0];\n\t\t\t\tif ( false !== strpos( $stderr_line, 'The PSR-0 `Requests_...` class names in the Request library are deprecated.' ) ) {\n\t\t\t\t\treturn $r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "right_result": "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [1 => ['pipe', 'w'], 2 => ['pipe', 'w']];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    private function __construct(string $command, ?string $cwd, array $env) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create(string $command, ?string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (is_resource($process)) {\n            fclose($pipes[1]);\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n            $return_code = proc_close($process);\n            $output = stream_get_contents($pipes[1]);\n            if (self::$log_run_times) {\n                self::$run_times[] = microtime(true) - $start_time;\n            }\n            return new ProcessRun($output, $stderr, $return_code);\n        }\n        throw new RuntimeException(\"Process could not be started.\");\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code: \" . $result->getReturnCode());\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0 || strpos($result->getStderr(), 'PSR-0 deprecation warning') !== false) {\n            throw new RuntimeException(\"Command failed with return code: \" . $result->getReturnCode() . \" and stderr: \" . $result->getStderr());\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $returnCode;\n\n    public function __construct(string $stdout, string $stderr, int $returnCode) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->returnCode = $returnCode;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->returnCode;\n    }\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a PHP class that manages subprocess execution with proper pipe handling for inter-process communication, including input/output streams and error handling.\n\nClass Description: The Process class provides a way to execute shell commands as subprocesses, capturing their output streams (stdout and stderr) and exit codes. It supports custom working directories and environment variables, and includes optional execution time tracking.\n\nAttributes:\n- command: string - The shell command to be executed\n- cwd: string|null - The working directory for the command execution\n- env: array - Environment variables for the command\n- descriptors: array - Static array defining I/O descriptors for proc_open\n- log_run_times: bool - Static flag to enable execution time logging\n- run_times: array - Static array storing aggregated execution times\n\nMethods:\n- create(string $command, string|null $cwd = null, array $env = array()) -> Process - Static factory method to create a new Process instance\n- run() -> ProcessRun - Executes the command and returns a ProcessRun object containing execution results\n- run_check() -> ProcessRun - Executes the command and throws RuntimeException if return code or stderr is non-empty\n- run_check_stderr() -> ProcessRun - Executes the command and throws RuntimeException if return code is non-zero or stderr exists\n\nNote: The ProcessRun return type refers to an object containing these properties:\n- stdout: string - Output from stdout\n- stderr: string - Output from stderr\n- return_code: int - Process exit code\n- command: string - The executed command\n- cwd: string|null - Working directory used\n- env: array - Environment variables used\n- run_time: float - Execution time in seconds",
    "Canonical_solution": "namespace EE;\n\nuse EE\\Utils;\n\nclass Process {\n\tprivate $command;\n\tprivate $cwd;\n\tprivate $env;\n\tprivate static $descriptors = array(\n\t\t0 => STDIN,\n\t\t1 => array( 'pipe', 'w' ),\n\t\t2 => array( 'pipe', 'w' ),\n\t);\n\tpublic static $log_run_times = false;\n\tpublic static $run_times = array();\n\n\tpublic static function create( $command, $cwd = null, $env = array() ) {\n\t\t$proc = new self;\n\t\t$proc->command = $command;\n\t\t$proc->cwd = $cwd;\n\t\t$proc->env = $env;\n\t\treturn $proc;\n\t}\n\n\tprivate function __construct() {}\n\n\tpublic function run() {\n\t\t$start_time = microtime( true );\n\t\t$proc = Utils\\proc_open_compat( $this->command, self::$descriptors, $pipes, $this->cwd, $this->env );\n\n\t\t$stdout = stream_get_contents( $pipes[1] );\n\t\tfclose( $pipes[1] );\n\n\t\t$stderr = stream_get_contents( $pipes[2] );\n\t\tfclose( $pipes[2] );\n\n\t\t$return_code = proc_close( $proc );\n\t\t$run_time = microtime( true ) - $start_time;\n\n\t\tif ( self::$log_run_times ) {\n\t\t\tif ( ! isset( self::$run_times[ $this->command ] ) ) {\n\t\t\t\tself::$run_times[ $this->command ] = array( 0, 0 );\n\t\t\t}\n\t\t\tself::$run_times[ $this->command ][0] += $run_time;\n\t\t\tself::$run_times[ $this->command ][1]++;\n\t\t}\n\n\t\treturn new ProcessRun( array(\n\t\t\t'stdout' => $stdout,\n\t\t\t'stderr' => $stderr,\n\t\t\t'return_code' => $return_code,\n\t\t\t'command' => $this->command,\n\t\t\t'cwd' => $this->cwd,\n\t\t\t'env' => $this->env,\n\t\t\t'run_time' => $run_time,\n\t\t) );\n\t}\n\n\tpublic function run_check() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code || ! empty( $r->STDERR ) ) {\n\t\t\tthrow new \\RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n\n\tpublic function run_check_stderr() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code || ! empty( $r->stderr ) ) {\n\t\t\tthrow new \\RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "right_result": "class ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct($stdout, $stderr, $return_code, $command, $cwd, $env, $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}\n\nclass Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        1 => ['pipe', 'w'], // stdout\n        2 => ['pipe', 'w'], // stderr\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    private function __construct($command, $cwd = null, $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (is_resource($process)) {\n            fclose($pipes[1]); // Close stdout pipe\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]); // Close stderr pipe\n            $return_code = proc_close($process);\n            $stdout = ''; // Capture stdout if needed\n            $run_time = microtime(true) - $start_time;\n\n            if (self::$log_run_times) {\n                self::$run_times[] = $run_time;\n            }\n\n            return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n        }\n\n        throw new RuntimeException(\"Failed to execute command: {$this->command}\");\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed: {$this->command}, Error: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a PHP class that provides a convenient way to execute shell commands with options for argument escaping, error capturing, and different execution methods (proc_open vs exec).\n\nClass Description: The Command class encapsulates shell command execution functionality, allowing for flexible command building, execution, and result handling. It supports both proc_open and exec methods, with options for capturing stderr, escaping arguments, and configuring process execution environment.\n\nAttributes:\n\nescapeArgs: [bool] - Whether to escape arguments automatically (default true)\nescapeCommand: [bool] - Whether to escape the command (default false)\nuseExec: [bool] - Whether to use exec() instead of proc_open() (default false)\ncaptureStdErr: [bool] - Whether to capture stderr output (default true)\nprocCwd: [string|null] - Working directory for the process\nprocEnv: [array|null] - Environment variables for the process\nprocOptions: [array|null] - Additional options for proc_open\n_command: [string] - The base command to execute\n_args: [array] - Array of command arguments\n_execCommand: [string|null] - The final constructed command string\n_stdOut: [string] - Captured stdout output\n_stdErr: [string] - Captured stderr output\n_exitCode: [int|null] - Process exit code\n_error: [string] - Last error message\n_executed: [bool] - Whether command has been executed\n\nMethods:\n\n__construct: [mixed $options = null] -> [void] - Constructor that accepts either configuration array or command string\nsetCommand: [string $command] -> [self] - Sets the base command to execute\ngetCommand: [void] -> [string] - Gets the current base command\ngetExecCommand: [void] -> [string|false] - Gets the fully constructed command string\naddArg: [string $key, mixed $value = null, bool $escape = null] -> [self] - Adds an argument to the command\nexecute: [void] -> [bool] - Executes the command and returns success status\ngetOutput: [void] -> [string] - Gets the stdout output\ngetError: [void] -> [string] - Gets the last error message\ngetStdErr: [void] -> [string] - Gets the stderr output\ngetExitCode: [void] -> [int|null] - Gets the process exit code",
    "Canonical_solution": "class Command\n{\n    public $escapeArgs = true;\n    public $escapeCommand = false;\n    public $useExec = false;\n    public $captureStdErr = true;\n    public $procCwd;\n    public $procEnv;\n    public $procOptions;\n\n    protected $_command;\n    protected $_args = array();\n    protected $_execCommand;\n    protected $_stdOut = '';\n    protected $_stdErr = '';\n    protected $_exitCode;\n    protected $_error = '';\n    protected $_executed = false;\n\n    public function __construct($options = null)\n    {\n        if (is_array($options)) {\n            $this->setOptions($options);\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand($command)\n    {\n        $this->_command = $this->escapeCommand ? escapeshellcmd($command) : $command;\n        return $this;\n    }\n\n    public function getCommand()\n    {\n        return $this->_command;\n    }\n\n    public function getExecCommand()\n    {\n        if ($this->_execCommand===null) {\n            $command = $this->getCommand();\n            if (!$command) {\n                $this->_error = 'Could not locate any executable command';\n                return false;\n            }\n            $args = $this->getArgs();\n            $this->_execCommand = $args ? $command.' '.$args : $command;\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg($key, $value = null, $escape = null)\n    {\n        $doEscape = $escape!==null ? $escape : $this->escapeArgs;\n        if ($value===null) {\n            $this->_args[] = $escape ? escapeshellarg($key) : $key;\n        } else {\n            $separator = substr($key, -1)==='=' ? '' : ' ';\n            if (is_array($value)) {\n                $params = array();\n                foreach ($value as $v) {\n                    $params[] = $doEscape ? escapeshellarg($v) : $v;\n                }\n                $this->_args[] = $key.$separator.implode(' ',$params);\n            } else {\n                $this->_args[] = $key.$separator.($doEscape ? escapeshellarg($value) : $value);\n            }\n        }\n        return $this;\n    }\n\n    public function execute()\n    {\n        $command = $this->getExecCommand();\n\n        if (!$command) {\n            return false;\n        }\n\n        if ($this->useExec) {\n            $execCommand = $this->captureStdErr ? \"$command 2>&1\" : $command;\n            exec($execCommand, $output, $this->_exitCode);\n            $this->_stdOut = trim(implode(\"\\n\", $output));\n            if ($this->_exitCode!==0) {\n                $this->_stdErr = $this->_stdOut;\n                $this->_error = empty($this->_stdErr) ? 'Command failed' : $this->_stdErr;\n                return false;\n            }\n        } else {\n            $descriptors = array(\n                1 => array('pipe','w'),\n                2 => array('pipe','a'),\n            );\n            $process = proc_open($command, $descriptors, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n            if (is_resource($process)) {\n                $this->_stdOut = trim(stream_get_contents($pipes[1]));\n                $this->_stdErr = trim(stream_get_contents($pipes[2]));\n                fclose($pipes[1]);\n                fclose($pipes[2]);\n\n                $this->_exitCode = proc_close($process);\n\n                if ($this->_exitCode!==0) {\n                    $this->_error = $this->_stdErr ? $this->_stdErr : \"Failed without error message: $command\";\n                    return false;\n                }\n            } else {\n                $this->_error = \"Could not run command $command\";\n                return false;\n            }\n        }\n\n        $this->_executed = true;\n        return true;\n    }\n\n    public function getOutput()\n    {\n        return $this->_stdOut;\n    }\n\n    public function getError()\n    {\n        return $this->_error;\n    }\n\n    public function getStdErr()\n    {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode()\n    {\n        return $this->_exitCode;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "right_result": "class Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                $this->$key = $value;\n            }\n        } elseif (is_string($options)) {\n            $this->_command = $options;\n        }\n    }\n\n    public function setCommand($command) {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand() {\n        return $this->_command;\n    }\n\n    public function getExecCommand() {\n        return $this->_execCommand;\n    }\n\n    public function addArg($key, $value = null, $escape = null) {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        $arg = $escape ? escapeshellarg($value) : $value;\n        $this->_args[$key] = $arg;\n        return $this;\n    }\n\n    public function execute() {\n        $this->_executed = true;\n        $this->_execCommand = $this->_command . ' ' . implode(' ', $this->_args);\n        if ($this->useExec) {\n            exec($this->_execCommand . ($this->captureStdErr ? ' 2>&1' : ''), $this->_stdOut, $this->_exitCode);\n            $this->_stdOut = implode(\"\\n\", $this->_stdOut);\n        } else {\n            $descriptorspec = [\n                1 => ['pipe', 'w'],\n                2 => $this->captureStdErr ? ['pipe', 'w'] : ['file', '/dev/null', 'a']\n            ];\n            $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n            if (is_resource($process)) {\n                $this->_stdOut = stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                if ($this->captureStdErr) {\n                    $this->_stdErr = stream_get_contents($pipes[2]);\n                    fclose($pipes[2]);\n                }\n                $this->_exitCode = proc_close($process);\n            } else {\n                $this->_error = 'Failed to open process';\n                return false;\n            }\n        }\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput() {\n        return $this->_stdOut;\n    }\n\n    public function getError() {\n        return $this->_error;\n    }\n\n    public function getStdErr() {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode() {\n        return $this->_exitCode;\n    }\n}"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a function that executes a shell command in a subprocess and captures its standard output while properly handling resources and errors.\n\nFunction Description: The function `readFromProcess` executes a given shell command as a subprocess using PHP's `proc_open`, captures the output from the subprocess's stdout stream, and ensures all resources are properly closed. It handles cases where the `proc_open` function is unavailable or fails to create the subprocess.\n\nInput: \n- `$command` (string): The shell command to be executed in the subprocess.\n\nOutput: \n- (string|null): Returns the captured output from the subprocess's stdout if successful, or null if the subprocess could not be created or if `proc_open` is unavailable.",
    "Canonical_solution": "function readFromProcess($command)\n{\n    if (!\\function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);\n    if (!\\is_resource($process)) {\n        return null;\n    }\n\n    $info = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    proc_close($process);\n\n    return $info;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "right_result": "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin\n        1 => ['pipe', 'w'], // stdout\n        2 => ['pipe', 'w']  // stderr\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fclose($pipes[0]); // Close stdin\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]); // Close stdout\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]); // Close stderr\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0) {\n            return null; // Command failed\n        }\n\n        return $output; // Return captured output\n    }\n\n    return null; // proc_open failed\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a function that executes a shell command and captures its standard output and error streams using PHP's proc_open.\n\nFunction Description: The function should execute a given shell command, capture both stdout and stderr streams, properly close all resources, and return the exit code of the process. It should handle cases where process creation fails.\n\nInput:\n- $command: string - The shell command to execute\n- &$stdout: ?string (optional reference) - Variable to store the standard output\n- &$stderr: ?string (optional reference) - Variable to store the standard error\n\nOutput:\n- int - The exit code of the executed process. Returns -1 if process creation fails.",
    "Canonical_solution": "function execute(string $command, ?string &$stdout = null, ?string &$stderr = null) : int\n{\n    $process = proc_open($command, [\n        [\"pipe\", \"r\"],\n        [\"pipe\", \"w\"],\n        [\"pipe\", \"w\"]\n    ], $pipes);\n\n    if($process === false){\n        $stderr = \"Failed to open process\";\n        $stdout = \"\";\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    $stderr = stream_get_contents($pipes[2]);\n\n    foreach($pipes as $p){\n        fclose($p);\n    }\n\n    return proc_close($process);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "right_result": "function executeShellCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = [\n        0 => [\"pipe\", \"r\"], // stdin\n        1 => [\"pipe\", \"w\"], // stdout\n        2 => [\"pipe\", \"w\"]  // stderr\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        $stdout = stream_get_contents($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n        return $return_value;\n    } else {\n        return -1; // Process creation failed\n    }\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a function that executes system commands using various PHP execution methods, with fallback options from most to least preferred, and returns the command output along with execution method information.\n\nFunction Description: The function attempts to execute a system command using multiple PHP execution methods in a prioritized order (COM, exec, shell_exec, system, passthru, popen, proc_open). It handles both Windows and Unix-like systems, sets the working directory, and properly manages process pipes and resources. The function returns the command output and indicates which execution method was successful.\n\nInput:\n- $cmd: [string] - The system command to be executed\n- $cwd: [string] - The working directory where the command should be executed\n- $com: [bool] (optional) - Flag to force using COM method on Windows (default: false)\n\nOutput:\n- Returns [array] with two elements:\n  - 'res': [string] - The output from the executed command\n  - 'msg': [string] - Status message indicating the execution method used or NULL if no output",
    "Canonical_solution": "function command($cmd, $cwd, $com = false) {\n    $iswin = substr(PHP_OS,0,3) == 'WIN' ? true : false;\n    $res = $msg = '';\n    \n    if($cwd == 'com' || $com) {\n        if($iswin && class_exists('COM')) {\n            $wscript = new COM('Wscript.Shell');\n            $exec = $wscript->exec('c:\\\\windows\\\\system32\\\\cmd.exe /c '.$cmd);\n            $stdout = $exec->StdOut();\n            $res = $stdout->ReadAll();\n            $msg = 'Wscript.Shell';\n        }\n    } else {\n        chdir($cwd);\n        $cwd = getcwd();\n        \n        if(function_exists('exec')) {\n            @exec($cmd, $res);\n            $res = join(\"\\n\", $res);\n            $msg = 'exec';\n        }\n        elseif(function_exists('shell_exec')) {\n            $res = @shell_exec($cmd);\n            $msg = 'shell_exec';\n        }\n        elseif(function_exists('system')) {\n            ob_start();\n            @system($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'system';\n        }\n        elseif(function_exists('passthru')) {\n            ob_start();\n            @passthru($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'passthru';\n        }\n        elseif(function_exists('popen')) {\n            $fp = @popen($cmd, 'r');\n            if($fp) {\n                while(!feof($fp)) {\n                    $res .= fread($fp, 1024);\n                }\n            }\n            @pclose($fp);\n            $msg = 'popen';\n        }\n        elseif(function_exists('proc_open')) {\n            $env = $iswin ? array('path' => 'c:\\\\windows\\\\system32') : array('path' => '/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin');\n            $des = array(\n                0 => array(\"pipe\", \"r\"),\n                1 => array(\"pipe\", \"w\"),\n                2 => array(\"pipe\", \"w\")\n            );\n            $process = @proc_open($cmd, $des, $pipes, $cwd, $env);\n            \n            if(is_resource($process)) {\n                fwrite($pipes[0], $cmd);\n                fclose($pipes[0]);\n                $res .= stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                $res .= stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n            @proc_close($process);\n            $msg = 'proc_open';\n        }\n    }\n    \n    $msg = $res == '' ? '<h1>NULL</h1>' : '<h2>\u5229\u7528'.$msg.'\u6267\u884c\u6210\u529f</h2>';\n    return array('res' => $res, 'msg' => $msg);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "right_result": "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = null;\n\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN' && $com) {\n        try {\n            $comObj = new COM(\"WScript.Shell\");\n            $output = $comObj->Exec($cmd)->StdOut->ReadAll();\n            $method = 'COM';\n        } catch (Exception $e) {\n            // COM failed, try next method\n        }\n    }\n\n    if (empty($output)) {\n        $output = exec($cmd, $outputArray, $returnVar);\n        if ($returnVar === 0) {\n            $method = 'exec';\n        } else {\n            $output = shell_exec($cmd);\n            if ($output !== null) {\n                $method = 'shell_exec';\n            } else {\n                $output = system($cmd, $returnVar);\n                if ($returnVar === 0) {\n                    $method = 'system';\n                } else {\n                    $output = passthru($cmd, $returnVar);\n                    if ($returnVar === 0) {\n                        $method = 'passthru';\n                    } else {\n                        $handle = popen($cmd, 'r');\n                        if (is_resource($handle)) {\n                            $output = fread($handle, 2096);\n                            pclose($handle);\n                            $method = 'popen';\n                        } else {\n                            $process = proc_open($cmd, [['pipe', 'r'], ['pipe', 'w'], ['pipe', 'w']], $pipes);\n                            if (is_resource($process)) {\n                                $output = stream_get_contents($pipes[1]);\n                                fclose($pipes[1]);\n                                proc_close($process);\n                                $method = 'proc_open';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return [\n        'res' => trim($output),\n        'msg' => $method ? \"Executed using: $method\" : null\n    ];\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a PHP helper class for executing system commands and handling inter-process communication using pipes.\n\nClass Description: ProcessHelper is a utility class designed to execute system commands in a cross-platform manner (supporting both Windows and Unix-like systems). It provides a clean interface for running commands, capturing their output and errors, and properly managing process resources.\n\nMethods:\n\nMethod1: run(string $command, string $cwd = null) -> array - Executes a system command and returns the exit code, output, and error messages. The method uses proc_open to create pipes for inter-process communication, properly handles resource cleanup, and returns trimmed output strings.\n\nInput:\n- $command: [string] - The system command to be executed\n- $cwd: [string|null] - The working directory for the command (optional)\n\nOutput:\n- Returns [array] containing three elements:\n  1. [int] Exit code of the process (0 typically indicates success)\n  2. [string] Standard output from the command (trimmed)\n  3. [string] Error output from the command (trimmed)\n\nThrows:\n- RuntimeException if the process cannot be started",
    "Canonical_solution": "namespace SMProxy\\Helper;\n\nclass ProcessHelper\n{\n    /**\n     * run a command. it is support windows\n     * @param string $command\n     * @param string|null $cwd\n     * @return array\n     * @throws \\RuntimeException\n     */\n    public static function run(string $command, string $cwd = null): array\n    {\n        $descriptors = [\n            0 => ['pipe', 'r'], // stdin - read channel\n            1 => ['pipe', 'w'], // stdout - write channel\n            2 => ['pipe', 'w'], // stdout - error channel\n            3 => ['pipe', 'r'], // stdin - This is the pipe we can feed the password into\n        ];\n\n        $process = proc_open($command, $descriptors, $pipes, $cwd);\n\n        if (!\\is_resource($process)) {\n            throw new \\RuntimeException('Can\\'t open resource with proc_open.');\n        }\n\n        // Nothing to push to input.\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        fclose($pipes[3]);\n\n        // Close all pipes before proc_close! $code === 0 is success.\n        $code = proc_close($process);\n\n        return [trim($code), trim($output), trim($error)];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "right_result": "class ProcessHelper {\n    public static function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        \n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n        \n        if (is_resource($process)) {\n            fclose($pipes[0]);\n            $output = stream_get_contents($pipes[1]);\n            $error = stream_get_contents($pipes[2]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            $return_value = proc_close($process);\n            \n            return [\n                $return_value,\n                trim($output),\n                trim($error)\n            ];\n        } else {\n            throw new RuntimeException(\"Unable to start process: $command\");\n        }\n    }\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for various HTTP methods, custom headers, and JSON response handling.\n\nFunction Description: The function should initialize a cURL session, configure it based on input parameters, execute the request, handle errors, process the response, and return a structured result including status, headers, and response body. It should support GET, POST, PUT, DELETE, PATCH, and OPTIONS methods, with options for custom headers, additional cURL options, JSON response parsing, and timeout configuration.\n\nInput:\n- $url (string): The target URL for the HTTP request\n- $method (string, optional, default='GET'): HTTP method (GET|POST|PUT|DELETE|PATCH|OPTIONS)\n- $data (mixed, optional, default=false): Request payload data\n- $headers (mixed, optional, default=false): Request headers (string or array)\n- $options (mixed, optional, default=false): Additional cURL options as array\n- $json (bool, optional, default=false): Whether to parse response as JSON\n- $timeout (int, optional, default=3600): Request timeout in seconds\n\nOutput:\nReturns an associative array containing:\n- 'data': Response body (parsed as array if $json=true and valid JSON)\n- 'status': Boolean indicating success (HTTP status 200-299)\n- 'code': HTTP status code\n- 'header': Parsed response headers as associative array\n\nIn case of cURL errors:\n- 'data': Error message\n- 'code': 0\n- 'header': cURL info array",
    "Canonical_solution": "function url_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, 1);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);\n    curl_setopt($ch, CURLINFO_HEADER_OUT, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_REFERER, get_url_link($url));\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n    if ($headers) {\n        if (is_string($headers)) {\n            $headers = array($headers);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    switch ($method) {\n        case 'GET':\n            curl_setopt($ch, CURLOPT_HTTPGET, 1);\n            break;\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PUT':\n        case 'DELETE':\n        case 'PATCH':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n    }\n\n    if (!empty($options)) {\n        curl_setopt_array($ch, $options);\n    }\n\n    $response = curl_exec($ch);\n    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $response_info = curl_getinfo($ch);\n    $http_body = substr($response, $header_size);\n    $http_header = substr($response, 0, $header_size);\n    $http_header = parse_headers($http_header);\n\n    if ($response_info['http_code'] == 0) {\n        $error_message = curl_error($ch);\n        if (!empty($error_message)) {\n            $error_message = \"API call to $url failed; $error_message\";\n        } else {\n            $error_message = \"API call to $url failed; maybe network error!\";\n        }\n        return array(\n            'data' => $error_message,\n            'code' => 0,\n            'header' => $response_info,\n        );\n    }\n\n    curl_close($ch);\n\n    if ($json && ($response_info['http_code'] >= 200 && $response_info['http_code'] <= 299)) {\n        $data = @json_decode($http_body, true);\n        if (json_last_error() == 0) {\n            $http_body = $data;\n        }\n    }\n\n    return array(\n        'data' => $http_body,\n        'status' => ($response_info['http_code'] >= 200 && $response_info['http_code'] <= 299),\n        'code' => $response_info['http_code'],\n        'header' => $http_header,\n    );\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpRequest($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    \n    if ($headers) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, is_array($headers) ? $headers : [$headers]);\n    }\n    \n    if ($data) {\n        switch (strtoupper($method)) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n                break;\n            case 'DELETE':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n                break;\n            case 'PATCH':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n                break;\n            case 'OPTIONS':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'OPTIONS');\n                break;\n        }\n    }\n    \n    if ($options && is_array($options)) {\n        curl_setopt_array($ch, $options);\n    }\n    \n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $header = substr($response, 0, $headerSize);\n    $body = substr($response, $headerSize);\n    \n    $result = [\n        'data' => null,\n        'status' => ($httpCode >= 200 && $httpCode < 300),\n        'code' => $httpCode,\n        'header' => array_reduce(explode(\"\\r\\n\", $header), function($carry, $item) {\n            if (strpos($item, ':') !== false) {\n                list($key, $value) = explode(': ', $item, 2);\n                $carry[$key] = $value;\n            }\n            return $carry;\n        }, [])\n    ];\n    \n    if ($result['status'] && $json) {\n        $result['data'] = json_decode($body, true);\n    } elseif (!$result['status']) {\n        $result['data'] = curl_error($ch);\n        $result['code'] = 0;\n        $result['header'] = curl_getinfo($ch);\n    } else {\n        $result['data'] = $body;\n    }\n    \n    curl_close($ch);\n    return $result;\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a PHP class that manages the execution of a subprocess using proc_open, handles input/output through pipes, and provides timeout functionality for process execution.\n\nClass Description: DefaultPhpProcess is a class that extends AbstractPhpProcess and provides concrete implementation for running PHP jobs in a subprocess. It handles process creation, I/O management through pipes, timeout enforcement, and resource cleanup.\n\nAttributes:\ntempFile: string - Temporary file path used for storing job input when stdin is not used\nstdin: mixed - Input source for the subprocess\nenv: array - Environment variables for the subprocess\ntimeout: int - Maximum execution time in seconds before process termination\n\nMethods:\nrunJob(string $job, array $settings = []) -> array - Executes a PHP job with optional settings, returns output and error\ngetHandles() -> array - Returns empty array by default, can be overridden to provide custom handles\nrunProcess(string $job, array $settings) -> array - Core method that manages process execution and I/O handling\nprocess(resource $pipe, string $job) -> void - Writes job input to the process pipe\ncleanup() -> void - Cleans up temporary resources (files)\nuseTemporaryFile() -> bool - Determines whether to use temporary files for input (default false)",
    "Canonical_solution": "use function array_merge;\nuse function fclose;\nuse function file_put_contents;\nuse function fread;\nuse function fwrite;\nuse function is_array;\nuse function is_resource;\nuse function proc_close;\nuse function proc_open;\nuse function proc_terminate;\nuse function rewind;\nuse function sprintf;\nuse function stream_get_contents;\nuse function stream_select;\nuse function sys_get_temp_dir;\nuse function tempnam;\nuse function unlink;\nuse PHPUnit\\Framework\\Exception;\n\nclass DefaultPhpProcess extends AbstractPhpProcess\n{\n    protected $tempFile;\n\n    public function runJob(string $job, array $settings = []): array\n    {\n        if ($this->stdin || $this->useTemporaryFile()) {\n            if (!($this->tempFile = tempnam(sys_get_temp_dir(), 'PHPUnit')) ||\n                file_put_contents($this->tempFile, $job) === false) {\n                throw new Exception(\n                    'Unable to write temporary file'\n                );\n            }\n\n            $job = $this->stdin;\n        }\n\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array\n    {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array\n    {\n        $handles = $this->getHandles();\n\n        $env = null;\n\n        if ($this->env) {\n            $env = $_SERVER ?? [];\n            unset($env['argv'], $env['argc']);\n            $env = array_merge($env, $this->env);\n\n            foreach ($env as $envKey => $envVar) {\n                if (is_array($envVar)) {\n                    unset($env[$envKey]);\n                }\n            }\n        }\n\n        $pipeSpec = [\n            0 => $handles[0] ?? ['pipe', 'r'],\n            1 => $handles[1] ?? ['pipe', 'w'],\n            2 => $handles[2] ?? ['pipe', 'w'],\n        ];\n\n        $process = proc_open(\n            $this->getCommand($settings, $this->tempFile),\n            $pipeSpec,\n            $pipes,\n            null,\n            $env\n        );\n\n        if (!is_resource($process)) {\n            throw new Exception(\n                'Unable to spawn worker process'\n            );\n        }\n\n        if ($job) {\n            $this->process($pipes[0], $job);\n        }\n\n        fclose($pipes[0]);\n\n        $stderr = $stdout = '';\n\n        if ($this->timeout) {\n            unset($pipes[0]);\n\n            while (true) {\n                $r = $pipes;\n                $w = null;\n                $e = null;\n\n                $n = @stream_select($r, $w, $e, $this->timeout);\n\n                if ($n === false) {\n                    break;\n                }\n\n                if ($n === 0) {\n                    proc_terminate($process, 9);\n\n                    throw new Exception(\n                        sprintf(\n                            'Job execution aborted after %d seconds',\n                            $this->timeout\n                        )\n                    );\n                }\n\n                if ($n > 0) {\n                    foreach ($r as $pipe) {\n                        $pipeOffset = 0;\n\n                        foreach ($pipes as $i => $origPipe) {\n                            if ($pipe === $origPipe) {\n                                $pipeOffset = $i;\n\n                                break;\n                            }\n                        }\n\n                        if (!$pipeOffset) {\n                            break;\n                        }\n\n                        $line = fread($pipe, 8192);\n\n                        if ($line === '' || $line === false) {\n                            fclose($pipes[$pipeOffset]);\n\n                            unset($pipes[$pipeOffset]);\n                        } elseif ($pipeOffset === 1) {\n                            $stdout .= $line;\n                        } else {\n                            $stderr .= $line;\n                        }\n                    }\n\n                    if (empty($pipes)) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (isset($pipes[1])) {\n                $stdout = stream_get_contents($pipes[1]);\n\n                fclose($pipes[1]);\n            }\n\n            if (isset($pipes[2])) {\n                $stderr = stream_get_contents($pipes[2]);\n\n                fclose($pipes[2]);\n            }\n        }\n\n        if (isset($handles[1])) {\n            rewind($handles[1]);\n\n            $stdout = stream_get_contents($handles[1]);\n\n            fclose($handles[1]);\n        }\n\n        if (isset($handles[2])) {\n            rewind($handles[2]);\n\n            $stderr = stream_get_contents($handles[2]);\n\n            fclose($handles[2]);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    protected function process($pipe, string $job): void\n    {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void\n    {\n        if ($this->tempFile) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool\n    {\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "right_result": "class DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 30) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob(string $job, array $settings = []): array {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array {\n        return [];\n    }\n\n    private function runProcess(string $job, array $settings): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            stream_set_blocking($pipes[1], true);\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            stream_set_blocking($pipes[2], true);\n            $error = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $return_value = proc_close($process);\n            return ['output' => $output, 'error' => $error, 'return_value' => $return_value];\n        }\n        return ['output' => '', 'error' => 'Process could not be started', 'return_value' => -1];\n    }\n\n    private function process(resource $pipe, string $job): void {\n        if ($this->useTemporaryFile()) {\n            $this->tempFile = tempnam(sys_get_temp_dir(), 'phpjob_');\n            file_put_contents($this->tempFile, $this->stdin);\n            $pipe = fopen($this->tempFile, 'r');\n        } else {\n            fwrite($pipe, $this->stdin);\n        }\n    }\n\n    public function cleanup(): void {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a PHP class that handles interactions with the Alipay payment gateway, specifically for transferring funds to Alipay accounts. The class should handle request signing, HTTP communication, and response processing.\n\nClass Description: The AlipayService class provides functionality to interact with Alipay's fund transfer API. It handles request signing using RSA, constructs proper API requests, and processes responses. The class manages authentication credentials and provides methods for executing fund transfers.\n\nAttributes:\n- appId: string - Alipay application ID\n- rsaPrivateKey: string - RSA private key for request signing\n- alipayRootCertSn: string - Alipay root certificate serial number\n- appCertSn: string - Application certificate serial number\n- charset: string - Character encoding (default: 'utf-8')\n\nMethods:\n- __construct(string $appid, string $saPrivateKey) -> void - Initializes the service with app ID and private key\n- setAlipayRootCertSn(string $alipayRootCertSn) -> void - Sets the Alipay root certificate serial number\n- setAppCertSn(string $appCertSn) -> void - Sets the application certificate serial number\n- doTransfer(float $totalFee, string $outTradeNo, string $account, string $realName, string $remark='') -> array - Executes a fund transfer with given parameters\n- curlPost(string $url='', mixed $postData='', array $options=array()) -> string - Sends a POST request using cURL\n- generateSign(array $params, string $signType=\"RSA\") -> string - Generates a signature for request parameters\n- sign(string $data, string $signType=\"RSA\") -> string - Signs data using RSA\n- checkEmpty(mixed $value) -> bool - Checks if a value is empty\n- getSignContent(array $params) -> string - Prepares parameters for signing\n- characet(string $data, string $targetCharset) -> string - Converts character encoding",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $rsaPrivateKey;\n    protected $alipayRootCertSn = '';\n    protected $appCertSn = '';\n    protected $charset = 'utf-8';\n\n    public function __construct($appid, $saPrivateKey)\n    {\n        $this->appId = $appid;\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn)\n    {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn)\n    {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark='')\n    {\n        $requestConfigs = array(\n            'out_biz_no'=>$outTradeNo,\n            'payee_type'=>'ALIPAY_LOGONID',\n            'trans_amount'=>$totalFee,\n            'product_code'=>'TRANS_ACCOUNT_NO_PWD',\n            'biz_scene'=>'DIRECT_TRANSFER',\n            'order_title'=>'\u7ec7\u68a6\u732b\u63d0\u73b0',\n            'payee_info'=>array(\n                'identity'=>$account,\n                'identity_type'=>'ALIPAY_LOGON_ID',\n                'name'=>$realName,\n            ),\n            'remark'=>$remark,\n        );\n        $commonConfigs = array(\n            'alipay_root_cert_sn' => $this->alipayRootCertSn,\n            'app_cert_sn' => $this->appCertSn,\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.uni.transfer',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n\n        ($res) or die('\u60a8\u4f7f\u7528\u7684\u79c1\u94a5\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5RSA\u79c1\u94a5\u914d\u7f6e');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset;\n\n    public function __construct(string $appid, string $rsaPrivateKey) {\n        $this->appId = $appid;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n        $this->charset = 'utf-8';\n    }\n\n    public function setAlipayRootCertSn(string $alipayRootCertSn): void {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn(string $appCertSn): void {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer(float $totalFee, string $outTradeNo, string $account, string $realName, string $remark=''): array {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', $params);\n        return json_decode($response, true);\n    }\n\n    private function curlPost(string $url='', mixed $postData='', array $options=array()): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign(array $params, string $signType=\"RSA\"): string {\n        $content = $this->getSignContent($params);\n        return $this->sign($content, $signType);\n    }\n\n    private function sign(string $data, string $signType=\"RSA\"): string {\n        openssl_sign($data, $signature, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        return base64_encode($signature);\n    }\n\n    private function checkEmpty(mixed $value): bool {\n        return empty($value);\n    }\n\n    private function getSignContent(array $params): string {\n        ksort($params);\n        $content = '';\n        foreach ($params as $key => $value) {\n            if (!$this->checkEmpty($value)) {\n                $content .= $key . '=' . $value . '&';\n            }\n        }\n        return rtrim($content, '&');\n    }\n\n    private function characet(string $data, string $targetCharset): string {\n        return mb_convert_encoding($data, $targetCharset, $this->charset);\n    }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL for sending upgrade notifications, with error handling and response processing capabilities.\n\nClass Description: UpgradeNoticeBehavior is a class designed to manage HTTP communications for upgrade notifications. It encapsulates cURL functionality to send requests to specified URLs, handle parameters and headers, process responses, and manage errors.\n\nAttributes:\nheader_: [string] - Stores HTTP headers for requests\nhttpCode_: [int] - Stores HTTP status code from responses\nhttpDesc_: [string] - Stores HTTP status description from responses\naccesskey_: [string] - Stores access key for authentication\nsecretkey_: [string] - Stores secret key for authentication\n\nMethods:\nsend: [send]([string $url, array $params = array(), array $headers = array()]) -> [mixed] - Sends an HTTP request to the specified URL with optional parameters and headers. Returns the decoded JSON response on success or false on failure. Handles cURL errors and invalid response formats.",
    "Canonical_solution": "namespace Behavior;\n\nclass UpgradeNoticeBehavior {\n    protected $header_ = '';\n    protected $httpCode_;\n    protected $httpDesc_;\n    protected $accesskey_;\n    protected $secretkey_;\n\n    private function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        if (!empty($params)) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        if (!empty($headers)) curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $txt = curl_exec($ch);\n        if (curl_errno($ch)) {\n            trace(curl_error($ch), '\u5347\u7ea7\u901a\u77e5\u51fa\u9519', 'NOTIC', true);\n            return false;\n        }\n        curl_close($ch);\n        $ret = json_decode($txt, true);\n        if (!$ret) {\n            trace('\u63a5\u53e3[' . $url . ']\u8fd4\u56de\u683c\u5f0f\u4e0d\u6b63\u786e', '\u5347\u7ea7\u901a\u77e5\u51fa\u9519', 'NOTIC', true);\n            return false;\n        }\n        return $ret;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n        $this->header_ = [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->accesskey_\n        ];\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        $options = [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HTTPHEADER => array_merge($this->header_, $headers),\n            CURLOPT_POST => true,\n            CURLOPT_POSTFIELDS => json_encode($params),\n            CURLOPT_FAILONERROR => true\n        ];\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_error($ch);\n        curl_close($ch);\n\n        if ($this->httpCode_ >= 200 && $this->httpCode_ < 300) {\n            $decodedResponse = json_decode($response, true);\n            if (json_last_error() === JSON_ERROR_NONE) {\n                return $decodedResponse;\n            }\n            return false;\n        }\n        return false;\n    }\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL with support for custom headers, payloads, and proxy configuration.\n\nClass Description: The Meting class provides functionality to make HTTP requests using PHP's cURL library. It supports GET/POST requests, custom headers, timeout settings, retry mechanism, and proxy configuration.\n\nAttributes:\n- header: array - Stores HTTP headers to be sent with the request\n- proxy: string - Stores proxy server address if configured\n- raw: mixed - Stores the raw response from the cURL request\n- info: array - Stores cURL request information\n- error: int - Stores cURL error code if any\n- status: string - Stores cURL error message if any\n\nMethods:\n- curl(string $url, mixed $payload = null, int $headerOnly = 0) -> self - Makes an HTTP request to the specified URL with optional payload and header-only response flag. Returns the class instance for method chaining.\n  Parameters:\n    - $url: string - The target URL for the request\n    - $payload: mixed - Optional request payload (array or string)\n    - $headerOnly: int - Flag to return only headers (1) or full response (0)",
    "Canonical_solution": "namespace Sakura\\API;\n\nclass Meting\n{\n    private function curl($url, $payload = null, $headerOnly = 0)\n    {\n        $header = array_map(function ($k, $v) {\n            return $k.': '.$v;\n        }, array_keys($this->header), $this->header);\n        $curl = curl_init();\n        if (!is_null($payload)) {\n            curl_setopt($curl, CURLOPT_POST, 1);\n            curl_setopt($curl, CURLOPT_POSTFIELDS, is_array($payload) ? http_build_query($payload) : $payload);\n        }\n        curl_setopt($curl, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 20);\n        curl_setopt($curl, CURLOPT_ENCODING, 'gzip');\n        curl_setopt($curl, CURLOPT_IPRESOLVE, 1);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HTTPHEADER, $header);\n        if ($this->proxy) {\n            curl_setopt($curl, CURLOPT_PROXY, $this->proxy);\n        }\n        for ($i = 0; $i < 3; $i++) {\n            $this->raw = curl_exec($curl);\n            $this->info = curl_getinfo($curl);\n            $this->error = curl_errno($curl);\n            $this->status = $this->error ? curl_error($curl) : '';\n            if (!$this->error) {\n                break;\n            }\n        }\n        curl_close($curl);\n\n        return $this;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Meting {\n    private $header = [];\n    private $proxy = '';\n    private $raw = null;\n    private $info = [];\n    private $error = 0;\n    private $status = '';\n\n    public function setHeader(array $headers) {\n        $this->header = $headers;\n        return $this;\n    }\n\n    public function setProxy(string $proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function curl(string $url, $payload = null, int $headerOnly = 0): self {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if (!empty($this->header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        }\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($payload) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n        if ($headerOnly) {\n            curl_setopt($ch, CURLOPT_HEADER, true);\n        }\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        \n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n        \n        curl_close($ch);\n        return $this;\n    }\n\n    public function getRaw() {\n        return $this->raw;\n    }\n\n    public function getInfo() {\n        return $this->info;\n    }\n\n    public function getError() {\n        return $this->error;\n    }\n\n    public function getStatus() {\n        return $this->status;\n    }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests to interact with WeChat Pay API, supporting both GET and POST methods with proper SSL configuration.\n\nClass Description: The Wechatpay class provides methods for making HTTP requests to WeChat Pay API endpoints. It handles both GET and POST requests, with special consideration for HTTPS connections and SSL configuration. The class includes error handling through HTTP status codes.\n\nMethods:\n\nMethod1: http_get(string $url) -> string|false - Performs a GET request to the specified URL. Returns the response content if successful (HTTP 200), or false otherwise.\nMethod2: http_post(string $url, array $param, bool $post_file=false) -> string|false - Performs a POST request to the specified URL with given parameters. Handles both regular form data and file uploads. Returns the response content if successful (HTTP 200), or false otherwise.",
    "Canonical_solution": "class Wechatpay\n{\n    /**\n     * GET \u8bf7\u6c42\n     * @param string $url\n     */\n    private function http_get($url){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n\n    /**\n     * POST \u8bf7\u6c42\n     * @param string $url\n     * @param array $param\n     * @param boolean $post_file \u662f\u5426\u6587\u4ef6\u4e0a\u4f20\n     * @return string content\n     */\n    private function http_post($url,$param,$post_file=false){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, false);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        if (is_string($param) || $post_file) {\n            $strPOST = $param;\n        } else {\n            $aPOST = array();\n            foreach($param as $key=>$val){\n                $aPOST[] = $key.\"=\".urlencode($val);\n            }\n            $strPOST =  join(\"&\", $aPOST);\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        curl_setopt($oCurl, CURLOPT_POST,true);\n        curl_setopt($oCurl, CURLOPT_POSTFIELDS,$strPOST);\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Wechatpay {\n    private $ssl_cert;\n    private $ssl_key;\n\n    public function __construct($ssl_cert, $ssl_key) {\n        $this->ssl_cert = $ssl_cert;\n        $this->ssl_key = $ssl_key;\n    }\n\n    public function http_get(string $url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->ssl_cert);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->ssl_key);\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code === 200 ? $response : false;\n    }\n\n    public function http_post(string $url, array $param, bool $post_file = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->ssl_cert);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->ssl_key);\n        \n        if ($post_file) {\n            $post_fields = [];\n            foreach ($param as $key => $value) {\n                if (is_file($value)) {\n                    $post_fields[$key] = new CURLFile($value);\n                } else {\n                    $post_fields[$key] = $value;\n                }\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);\n        } else {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code === 200 ? $response : false;\n    }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a PHP function that sends a POST request to a specified URL with given data using cURL and returns the response.\n\nFunction Description: The function initializes a cURL session, configures it for a POST request with the provided URL and data, sets various options including timeouts and SSL verification settings, executes the request, and returns the response. It handles the entire lifecycle of the cURL session from initialization to cleanup.\n\nInput:\n- $url (string): The target URL to which the POST request will be sent\n- $data (mixed): The data to be sent with the POST request (can be an array or string)\n\nOutput:\n- Returns the response from the server as a string if the request is successful\n- Returns false if the request fails (though error handling could be enhanced in a production environment)",
    "Canonical_solution": "function post2url($url, $data) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        return false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a class that handles file downloads using cURL in PHP, with support for temporary file management and cleanup.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using cURL, storing them in a temporary directory, and managing the downloaded files' lifecycle.\n\nAttributes:\n- tempDir: string - The directory path where temporary files will be stored. Defaults to system temp directory if not specified.\n- outputFile: string - The path to the downloaded file.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets the temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL using cURL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file.\n- cleanup() -> void - Removes the downloaded file if it exists.\n\nInput:\n- For setTempDir(): A string representing the directory path.\n- For download(): A string representing the URL to download from.\n\nOutput:\n- For download(): A boolean indicating success (true) or failure (false).\n- For getFilename(): A string representing the path to the downloaded file.\n- Other methods do not return values.",
    "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Shell;\n\nclass CurlDownloader implements Downloader\n{\n    private $tempDir = null;\n    private $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if (\\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir(string $tempDir): void {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir, 'download_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $result !== false;\n    }\n\n    public function getFilename(): string {\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests to the OpenAI API using cURL, with support for different content types, streaming, and proxy configuration.\n\nClass Description: The OpenAi class is designed to interact with OpenAI's API by sending HTTP requests. It manages API keys, content types, headers, and request configurations. The class supports both JSON and multipart/form-data content types, allows for request streaming, and can be configured to use a proxy.\n\nAttributes:\n\nengine: string - The default OpenAI engine to use (default: \"davinci\")\nmodel: string - The default model for completions (default: \"text-davinci-002\")\nchatModel: string - The default model for chat completions (default: \"gpt-3.5-turbo\")\nassistantsBetaVersion: string - The version for assistants API (default: \"v1\")\nheaders: array - Array of HTTP headers to be sent with requests\ncontentTypes: array - Mapping of content types to their header strings\ntimeout: int - cURL timeout in seconds (default: 0)\nstream_method: object - Callback method for streaming responses\ncustomUrl: string - Custom base URL to override the default OpenAI API URL\nproxy: string - Proxy server address if needed\ncurlInfo: array - Information about the last cURL request\n\nMethods:\n\n__construct: __construct(string $OPENAI_API_KEY) -> void - Initializes the class with the OpenAI API key and sets default headers\nsendRequest: sendRequest(string $url, string $method, array $opts = []) -> bool|string - Sends an HTTP request to the specified URL with given method and options\nbaseUrl: baseUrl(string &$url) -> void - Modifies the base URL if a custom URL is set",
    "Canonical_solution": "namespace Orhanerday\\OpenAi;\n\nuse Exception;\n\nclass OpenAi\n{\n    private string $engine = \"davinci\";\n    private string $model = \"text-davinci-002\";\n    private string $chatModel = \"gpt-3.5-turbo\";\n    private string $assistantsBetaVersion = \"v1\";\n    private array $headers;\n    private array $contentTypes;\n    private int $timeout = 0;\n    private object $stream_method;\n    private string $customUrl = \"\";\n    private string $proxy = \"\";\n    private array $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY)\n    {\n        $this->contentTypes = [\n            \"application/json\" => \"Content-Type: application/json\",\n            \"multipart/form-data\" => \"Content-Type: multipart/form-data\",\n        ];\n\n        $this->headers = [\n            $this->contentTypes[\"application/json\"],\n            \"Authorization: Bearer $OPENAI_API_KEY\",\n        ];\n    }\n\n    /**\n     * @param  string  $url\n     * @param  string  $method\n     * @param  array   $opts\n     * @return bool|string\n     */\n    private function sendRequest(string $url, string $method, array $opts = [])\n    {\n        $post_fields = json_encode($opts);\n\n        if (array_key_exists('file', $opts) || array_key_exists('image', $opts)) {\n            $this->headers[0] = $this->contentTypes[\"multipart/form-data\"];\n            $post_fields = $opts;\n        } else {\n            $this->headers[0] = $this->contentTypes[\"application/json\"];\n        }\n        $curl_info = [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => '',\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => $this->timeout,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => $method,\n            CURLOPT_POSTFIELDS => $post_fields,\n            CURLOPT_HTTPHEADER => $this->headers,\n        ];\n\n        if ($opts == []) {\n            unset($curl_info[CURLOPT_POSTFIELDS]);\n        }\n\n        if (! empty($this->proxy)) {\n            $curl_info[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if (array_key_exists('stream', $opts) && $opts['stream']) {\n            $curl_info[CURLOPT_WRITEFUNCTION] = $this->stream_method;\n        }\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, $curl_info);\n        $response = curl_exec($curl);\n\n        $info = curl_getinfo($curl);\n        $this->curlInfo = $info;\n\n        curl_close($curl);\n\n        if (! $response) {\n            throw new Exception(curl_error($curl));\n        }\n\n        return $response;\n    }\n\n    /**\n     * @param  string  $url\n     */\n    private function baseUrl(string &$url)\n    {\n        if ($this->customUrl != \"\") {\n            $url = str_replace(Url::ORIGIN, $this->customUrl, $url);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class OpenAi {\n    private $engine = \"davinci\";\n    private $model = \"text-davinci-002\";\n    private $chatModel = \"gpt-3.5-turbo\";\n    private $assistantsBetaVersion = \"v1\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'application/json',\n        'form' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl;\n    private $proxy;\n    private $curlInfo = [];\n    \n    public function __construct(string $OPENAI_API_KEY) {\n        $this->headers[] = \"Authorization: Bearer \" . $OPENAI_API_KEY;\n        $this->headers[] = \"Content-Type: \" . $this->contentTypes['json'];\n    }\n    \n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $this->baseUrl($url);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        \n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n        \n        if (strtoupper($method) === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $opts);\n        } elseif (strtoupper($method) === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $opts);\n        }\n        \n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n        \n        return $response;\n    }\n    \n    public function baseUrl(string &$url) {\n        if ($this->customUrl) {\n            $url = rtrim($this->customUrl, '/') . '/' . ltrim($url, '/');\n        }\n    }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL for making GET and POST requests, with error handling and resource management.\n\nClass Description: The HttpClient class encapsulates cURL functionality to perform HTTP requests. It includes methods for GET requests, POST requests, and POST requests with download capability. The class handles cURL initialization, option setting, execution, error checking, and resource cleanup.\n\nMethods:\n\nMethod1: getCurl(string $url) -> mixed - Performs a GET request to the specified URL and returns the response data. Throws an exception if cURL is not enabled.\n\nMethod2: postDownloadCurl(string $url, mixed $data) -> array - Performs a POST request with the given data to the specified URL, returns the response as a decoded JSON array. Throws an exception if cURL is not enabled.\n\nMethod3: postCurl(string $url, mixed $data) -> array - Performs a POST request with the given data to the specified URL, decrypts the response using Faveo private key, and returns it as a decoded JSON array. Throws an exception if cURL is not enabled.\n\nNote: All methods include error handling that returns error messages to the caller when exceptions occur. Each method follows proper cURL resource management by initializing, executing, and closing the cURL session.",
    "Canonical_solution": "use App\\Http\\Controllers\\Utility\\LibraryController as Utility;\nuse Exception;\n\nclass HttpClient\n{\n    public function getCurl($url)\n    {\n        try {\n            $curl = Utility::_isCurl();\n            if (!$curl) {\n                throw new Exception('Please enable your curl function to check latest update');\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($ch, CURLOPT_URL, $url);\n            if (curl_exec($ch) === false) {\n                echo 'Curl error: '.curl_error($ch);\n            }\n            $data = curl_exec($ch);\n            curl_close($ch);\n\n            return $data;\n        } catch (Exception $ex) {\n            return redirect()->back()->with('fails', $ex->getMessage());\n        }\n    }\n\n    public function postDownloadCurl($url, $data)\n    {\n        try {\n            $curl = Utility::_isCurl();\n            if (!$curl) {\n                throw new Exception('Please enable your curl function to check latest update');\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_URL, $url);\n            if (curl_exec($ch) === false) {\n                echo 'Curl error: '.curl_error($ch);\n            }\n            $data = curl_exec($ch);\n            curl_close($ch);\n\n            return json_decode($data, true);\n        } catch (Exception $ex) {\n            return redirect()->back()->with('fails', $ex->getMessage());\n        }\n    }\n\n    public function postCurl($url, $data)\n    {\n        try {\n            $curl = Utility::_isCurl();\n            if (!$curl) {\n                throw new Exception('Please enable your curl function to check latest update');\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_URL, $url);\n            if (curl_exec($ch) === false) {\n                echo 'Curl error: '.curl_error($ch);\n            }\n            $data = curl_exec($ch);\n            curl_close($ch);\n            $data = Utility::decryptByFaveoPrivateKey($data);\n\n            return json_decode($data, true);\n        } catch (Exception $ex) {\n            return redirect()->back()->with('fails', $ex->getMessage());\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class HttpClient {\n    private function checkCurl() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled on this server.');\n        }\n    }\n\n    public function getCurl(string $url) {\n        $this->checkCurl();\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: $error\");\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl(string $url, $data) {\n        $this->checkCurl();\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: $error\");\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl(string $url, $data) {\n        $this->checkCurl();\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: $error\");\n        }\n        curl_close($ch);\n        // Assuming decryption logic is implemented here\n        $decryptedResponse = $this->decryptResponse($response);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($response) {\n        // Decryption logic using Faveo private key\n        return $response; // Placeholder for actual decryption\n    }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL for making API requests to Facebook's various domains, with support for handling authentication, error management, and request configuration.\n\nClass Description: The BaseFacebook class provides core functionality for interacting with Facebook's APIs using cURL. It handles request construction, authentication, error handling, and includes utility methods for common operations. The class supports different Facebook domains and manages API credentials.\n\nAttributes:\n\nAttribute1: [array] - $CURL_OPTS - Default cURL options including timeout settings and user agent\nAttribute2: [array] - $DROP_QUERY_PARAMS - Query parameters to be removed from requests\nAttribute3: [array] - $DOMAIN_MAP - Mapping of Facebook API domains and their base URLs\nAttribute4: [string] - $appId - Facebook application ID\nAttribute5: [string] - $appSecret - Facebook application secret\nAttribute6: [mixed] - $user - Current authenticated user\nAttribute7: [mixed] - $signedRequest - Signed request data\nAttribute8: [mixed] - $state - Application state\nAttribute9: [string|null] - $accessToken - Current access token\nAttribute10: [bool] - $fileUploadSupport - Flag for file upload support\nAttribute11: [bool] - $trustForwarded - Flag for trusting forwarded headers\n\nMethods:\n\nMethod1: [makeRequest]($url, $params, $ch=null) -> [mixed] - Makes an HTTP request using cURL with the specified URL and parameters. Handles errors and SSL certificate verification.\nMethod2: [_oauthRequest]($url, $params) -> [mixed] - Makes an OAuth-authenticated request by adding access token and app secret proof to parameters before making the request.\nMethod3: [getAppSecretProof]($access_token) -> [string] - Generates an app secret proof using HMAC-SHA256 for the given access token.\nMethod4: [errorLog]($msg) -> [void] - Logs error messages, with special handling for CLI environments.",
    "Canonical_solution": "class BaseFacebook\n{\n    const VERSION = '3.2.2';\n    const SIGNED_REQUEST_ALGORITHM = 'HMAC-SHA256';\n\n    public static $CURL_OPTS = array(\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT        => 60,\n        CURLOPT_USERAGENT      => 'facebook-php-3.2',\n    );\n\n    protected static $DROP_QUERY_PARAMS = array(\n        'code',\n        'state',\n        'signed_request',\n    );\n\n    public static $DOMAIN_MAP = array(\n        'api'         => 'https://api.facebook.com/',\n        'api_video'   => 'https://api-video.facebook.com/',\n        'api_read'    => 'https://api-read.facebook.com/',\n        'graph'       => 'https://graph.facebook.com/',\n        'graph_video' => 'https://graph-video.facebook.com/',\n        'www'         => 'https://www.facebook.com/',\n    );\n\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken = null;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    protected function makeRequest($url, $params, $ch=null)\n    {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n\n        $opts = self::$CURL_OPTS;\n        if ($this->getFileUploadSupport()) {\n            $opts[CURLOPT_POSTFIELDS] = $params;\n        } else {\n            $opts[CURLOPT_POSTFIELDS] = http_build_query($params, null, '&');\n        }\n        $opts[CURLOPT_URL] = $url;\n\n        if (isset($opts[CURLOPT_HTTPHEADER])) {\n            $existing_headers = $opts[CURLOPT_HTTPHEADER];\n            $existing_headers[] = 'Expect:';\n            $opts[CURLOPT_HTTPHEADER] = $existing_headers;\n        } else {\n            $opts[CURLOPT_HTTPHEADER] = array('Expect:');\n        }\n\n        curl_setopt_array($ch, $opts);\n        $result = curl_exec($ch);\n\n        if (curl_errno($ch) == 60) {\n            self::errorLog('Invalid or no certificate authority found, using bundled information');\n            curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/fb_ca_chain_bundle.crt');\n            $result = curl_exec($ch);\n        }\n\n        if ($result === false && empty($opts[CURLOPT_IPRESOLVE])) {\n            $matches = array();\n            $regex = '/Failed to connect to ([^:].*): Network is unreachable/';\n            if (preg_match($regex, curl_error($ch), $matches)) {\n                if (strlen(inet_pton($matches[1]) ?? '') === 16) {\n                    self::errorLog('Invalid IPv6 configuration on server, Please disable or get native IPv6 on your server.');\n                    self::$CURL_OPTS[CURLOPT_IPRESOLVE] = CURL_IPRESOLVE_V4;\n                    curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);\n                    $result = curl_exec($ch);\n                }\n            }\n        }\n\n        if ($result === false) {\n            $e = new FacebookApiException(array(\n                'error_code' => curl_errno($ch),\n                'error' => array(\n                    'message' => curl_error($ch),\n                    'type' => 'CurlException',\n                ),\n            ));\n            curl_close($ch);\n            throw $e;\n        }\n        curl_close($ch);\n        return $result;\n    }\n\n    protected function _oauthRequest($url, $params)\n    {\n        if (!isset($params['access_token'])) {\n            $params['access_token'] = $this->getAccessToken();\n        }\n\n        if (isset($params['access_token'])) {\n            $params['appsecret_proof'] = $this->getAppSecretProof($params['access_token']);\n        }\n\n        foreach ($params as $key => $value) {\n            if (!is_string($value)) {\n                $params[$key] = json_encode($value);\n            }\n        }\n\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token)\n    {\n        return hash_hmac('sha256', $access_token, $this->getAppSecret());\n    }\n\n    protected static function errorLog($msg)\n    {\n        if (php_sapi_name() != 'cli') {\n            error_log($msg);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class BaseFacebook {\n    private $CURL_OPTS = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_USERAGENT => 'PHP-Facebook-Client'\n    ];\n    private $DROP_QUERY_PARAMS = ['access_token', 'appsecret_proof'];\n    private $DOMAIN_MAP = [\n        'graph' => 'https://graph.facebook.com/',\n        'marketing' => 'https://marketing-api.facebook.com/',\n        'instagram' => 'https://graph.instagram.com/'\n    ];\n    private $appId;\n    private $appSecret;\n    private $user;\n    private $signedRequest;\n    private $state;\n    private $accessToken;\n    private $fileUploadSupport = false;\n    private $trustForwarded = false;\n\n    public function __construct($appId, $appSecret) {\n        $this->appId = $appId;\n        $this->appSecret = $appSecret;\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (is_null($ch)) {\n            $ch = curl_init();\n        }\n        curl_setopt_array($ch, $this->CURL_OPTS);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n            return null;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    private function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    public function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    public function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            fwrite(STDERR, $msg . PHP_EOL);\n        } else {\n            error_log($msg);\n        }\n    }\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a PHP class that handles HTTP POST requests to the Coinbase API using cURL, including setting necessary headers and handling the response.\n\nClass Description: The Coinbase class encapsulates functionality for making authenticated POST requests to the Coinbase API. It manages API configuration and provides a method for executing cURL requests with proper headers and timeout settings.\n\nAttributes:\n- config: [array] - Stores configuration parameters including the Coinbase API key\n\nMethods:\n- __construct([array $config]) -> [void] - Initializes the class with configuration parameters\n- _curlPost([string $url], [mixed $params = false]) -> [mixed] - Executes a cURL POST request to the specified URL with given parameters and returns the response\n\nNote: The _curlPost method is private as it's an internal implementation detail of the class. The method handles the full cURL lifecycle including initialization, option setting, execution, error handling (implied by timeout), and resource cleanup.",
    "Canonical_solution": "namespace App\\Payments;\n\nclass Coinbase {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch, CURLOPT_HTTPHEADER, \n            array(\n                'X-CC-Api-Key:' . $this->config['coinbase_api_key'], \n                'X-CC-Version: 2018-03-22'\n            )\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'CB-ACCESS-KEY: ' . $this->config['api_key'],\n            'CB-ACCESS-SIGN: ' . $this->generateSignature($url, $params),\n            'CB-ACCESS-TIMESTAMP: ' . time(),\n        ]);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('Curl error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    private function generateSignature($url, $params) {\n        // Implement signature generation logic here\n        return 'generated_signature';\n    }\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for timeout, headers, and SSL verification.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes custom configurations such as a user agent header, disabled SSL verification, and a connection timeout. The function returns the response content from the requested URL.\n\nInput: \n- $url (string): The URL to which the HTTP GET request will be made.\n\nOutput: \n- string: The content returned from the HTTP request. Returns false if the request fails.",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('User-Agent: PHP-CURL-Request'));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        return false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a PHP class that interacts with the Coinbase API to handle payment processing using cURL for HTTP requests.\n\nClass Description: The Coinbase class implements the PaymentInterface and provides functionality to make POST requests to the Coinbase API. It handles API key authentication and request configuration.\n\nAttributes:\n- config: [array] - Stores the configuration settings including the Coinbase API key.\n\nMethods:\n- __construct($config): [void] - Initializes the class with the provided configuration.\n  - Input: $config [array] - Configuration array containing API credentials\n  - Output: None\n\n- _curlPost($url, $params = false): [mixed] - Makes a POST request to the specified URL with optional parameters.\n  - Input: \n    - $url [string] - The API endpoint URL\n    - $params [mixed|false] - Optional request payload parameters\n  - Output: [mixed] - The API response or false on failure",
    "Canonical_solution": "namespace App\\Payments;\n\nuse App\\Contracts\\PaymentInterface;\nuse App\\Exceptions\\ApiException;\n\nclass Coinbase implements PaymentInterface\n{\n    protected $config;\n    public function __construct($config)\n    {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch,\n            CURLOPT_HTTPHEADER,\n            array('X-CC-Api-Key:' . $this->config['coinbase_api_key'], 'X-CC-Version: 2018-03-22')\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a PHP function that downloads a file from a specified URL and saves it to a local file using cURL.\n\nFunction Description: The function `http_fetch` uses PHP's cURL library to make an HTTP request to a specified URL and writes the response directly to a local file. It includes custom headers (User-Agent and Referer) to mimic a browser request and handles the cURL session lifecycle properly.\n\nInput:\n- `$url` (string): The URL of the resource to download\n- `$filename` (string): The local file path where the downloaded content should be saved\n\nOutput:\n- The function does not explicitly return a value, but it writes the downloaded content to the specified file\n- The cURL session information is captured in `$ret` but not returned (could be modified to return this if needed)",
    "Canonical_solution": "function http_fetch($url, $filename)\n{\n    $fh = fopen($filename, 'w');\n\n    $options = array(\n        CURLOPT_FILE    => $fh,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_URL     => $url,\n    );\n\n    $options[CURLOPT_HTTPHEADER] = array(\n        'Referer: https://www.facebook.com/',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    );\n\n    $ch = curl_init();\n    curl_setopt_array($ch, $options);\n    curl_exec($ch);\n    $ret = curl_getinfo($ch);\n    curl_close($ch);\n\n    fclose($fh);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function http_fetch($url, $filename) {\n    $ch = curl_init($url);\n    $fp = fopen($filename, 'w');\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.com');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Implement a PHP class for sending notifications through the Pushover.net API using cURL for HTTP requests.\n\nClass Description: The Notifications_Pushover class implements push notification functionality through the Pushover.net service. It handles authentication, message formatting, and API communication to send notifications with different severity levels.\n\nAttributes:\n- token: string - The API token/key for Pushover.net authentication\n- user: string - The user key for Pushover.net authentication\n- priorities: static array - Mapping of priority levels to their string representations\n\nMethods:\n- __construct(string $token, string $user) -> void - Initializes the class with API credentials\n- static getName() -> string - Returns the service name \"pushover.net\"\n- static getParameters() -> array - Returns required configuration parameters for the service\n- notify(string $message, string $severity = 'info', ?string $event = null) -> void - Sends a notification with the given message, severity level, and optional event title",
    "Canonical_solution": "class Notifications_Pushover implements IPushNotification {\n    private $token;\n    private $user;\n    public function __construct($token, $user){\n        $this->token = $token;\n        $this->user = $user;\n    }\n    \n    static $priorities = array(\n        0 => 'info',\n        1 => 'warning',\n        2 => 'error',\n    );\n    \n    public static function getName(){\n        return \"pushover.net\";\n    }\n    \n    public static function getParameters(){\n        return array(\n            'token' => 'API Token/Key',\n            'user' => 'Your User Key',\n        );\n    }\n    \n    public function notify($message, $severity = 'info', $event = null){\n        curl_setopt_array($ch = curl_init(), array(\n            CURLOPT_URL => \"https://api.pushover.net/1/messages.json\",\n            CURLOPT_POST => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_POSTFIELDS => http_build_query($data = array(\n                \"token\" => $this->token,\n                \"user\" => $this->user,\n                \"message\" => $code = strip_tags(preg_replace('/<([\\/]?)span[^>]*>/i', '<\\1b>', $message), \"<b><i><u><a><font><p><br>\"),\n                \"title\" => strip_tags($event),\n                \"priority\" => (int)array_search($severity, self::$priorities),\n                \"timestamp\" => time(),\n                \"html\" => preg_match('/<[^>]+>/', $code),\n            )),\n        ));\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Notifications_Pushover {\n    private $token;\n    private $user;\n    private static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'quiet' => -2,\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return 'pushover.net';\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority,\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: The task involves creating PHP functions to interact with a logistics tracking API (kuaidi100.com) to retrieve shipping company information and tracking data for a given tracking number.\n\nFunction Description: The code consists of three functions that work together to:\n1. Identify the logistics company from a tracking number\n2. Retrieve tracking details for the shipment\n3. Generate random IP addresses for request headers\n\nInput: \n- For get_company(): A string representing the tracking number ($text)\n- For get_data(): Two strings - tracking number ($text) and company code ($com)\n- For Rand_IP(): No input parameters\n\nOutput:\n- get_company(): Returns a string representing the logistics company code\n- get_data(): Returns a JSON string containing the tracking information\n- Rand_IP(): Returns a string representing a randomly generated IP address\n\nMethods:\n1. get_company($text) -> string - Identifies the logistics company from a tracking number by making an HTTP request to kuaidi100.com's autocomplete API and extracting the company code from the response.\n2. get_data($text, $com) -> string - Retrieves tracking details for a given tracking number and company code by making an HTTP request to kuaidi100.com's query API.\n3. Rand_IP() -> string - Generates a random IP address to be used in request headers for bypassing potential IP-based restrictions.\n\nNote: The functions use cURL for HTTP requests with specific headers and options, including SSL verification disabled, custom user agent, and random IP addresses in headers to mimic browser requests.",
    "Canonical_solution": "function get_compary($text) {\n    $headerArray = array(\"Accept-Language: zh-CN,zh;q=0.8\",\"Cache-Control: no-cache\",\"Host:www.kuaidi100.com\",\"Referer:https://www.kuaidi100.com/\");\n    $curl = curl_init();\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\".$text;\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_HTTPHEADER, array('X-FORWARDED-FOR:'.Rand_IP(), 'CLIENT-IP:'.Rand_IP()));\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST,FALSE);\n    curl_setopt($curl, CURLOPT_USERAGENT,\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\");\n    curl_setopt($curl, CURLOPT_POST, 0);\n    curl_setopt($curl,CURLOPT_HTTPHEADER,$headerArray);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    $output = curl_exec($curl);\n    curl_close($curl);\n    preg_match_all('#\"comCode\":\"(.*?)\"#',$output,$match);\n    $company = $match[1][1];\n    return $company;\n}\n\nfunction get_data($text,$com) {\n    $rand = mt_rand(1111111111111111, 8888888888888888);\n    $temp =  '0.' . $rand;\n    $headerArray = array(\"Accept: application/json, text/javascript, */*; q=0.01\",\"Cache-Control: no-cache\",\"Host:www.kuaidi100.com\",\"Referer:https://www.kuaidi100.com/?from=openv\",\"Cookie: csrftoken=C8eAjWh2fyDqqOSMlSmKaJdMqtjW8iLLOIBsUmMsgHE; WWWID=WWW8A873C08880109D493D45E7B86FC5583; Hm_lvt_22ea01af58ba2be0fec7c11b25e88e6c=1574823124,1574827551; MOBID=B53E32216F579899AC3BF9579DF8E2C5; Hm_lpvt_22ea01af58ba2be0fec7c11b25e88e6c=1574827564\");\n    $curl = curl_init();\n    $url = \"https://www.kuaidi100.com/query?type=\".$com.\"&postid=\".$text.\"&temp=\".$temp.\"&phone=\";\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_HTTPHEADER, array('X-FORWARDED-FOR:'.Rand_IP(), 'CLIENT-IP:'.Rand_IP()));\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST,FALSE);\n    curl_setopt($curl, CURLOPT_USERAGENT,\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\");\n    curl_setopt($curl, CURLOPT_POST, 0);\n    curl_setopt($curl,CURLOPT_HTTPHEADER,$headerArray);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    $output = curl_exec($curl);\n    curl_close($curl);\n    return $output;\n}\n\nfunction Rand_IP() {\n    $ip2id= round(rand(600000, 2550000) / 10000);\n    $ip3id= round(rand(600000, 2550000) / 10000);\n    $ip4id= round(rand(600000, 2550000) / 10000);\n    $arr_1 = array(\"218\",\"218\",\"66\",\"66\",\"218\",\"218\",\"60\",\"60\",\"202\",\"204\",\"66\",\"66\",\"66\",\"59\",\"61\",\"60\",\"222\",\"221\",\"66\",\"59\",\"60\",\"60\",\"66\",\"218\",\"218\",\"62\",\"63\",\"64\",\"66\",\"66\",\"122\",\"211\");\n    $randarr= mt_rand(0,count($arr_1)-1);\n    $ip1id = $arr_1[$randarr];\n    return $ip1id.\".\".$ip2id.\".\".$ip3id.\".\".$ip4id;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function get_company($text) {\n    $url = \"https://api.kuaidi100.com/autocomplete?text=\" . urlencode($text);\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ));\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['com']) ? $data['auto'][0]['com'] : '';\n}\n\nfunction get_data($text, $com) {\n    $url = \"https://api.kuaidi100.com/query?type=\" . $com . \"&postid=\" . urlencode($text);\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ));\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return mt_rand(1, 223) . '.' . mt_rand(0, 255) . '.' . mt_rand(0, 255) . '.' . mt_rand(0, 255);\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a PHP class that monitors the availability of a URL by periodically checking its HTTP response code until it meets the desired state (available or unavailable) within a specified timeout period.\n\nClass Description: The URLChecker class provides functionality to wait for a URL to become available (returns HTTP 200) or unavailable (returns non-200) within a given timeout period, using cURL for HTTP requests with configurable polling intervals and connection timeouts.\n\nAttributes:\n- POLL_INTERVAL_MS: int - The interval in milliseconds between consecutive URL checks\n- CONNECT_TIMEOUT_MS: int - The connection timeout in milliseconds for each HTTP request\n\nMethods:\n- waitUntilAvailable(int $timeout_in_ms, string $url) -> self - Waits until the specified URL returns HTTP 200 status code or throws TimeoutException if not achieved within timeout\n- waitUntilUnavailable(int $timeout_in_ms, string $url) -> self - Waits until the specified URL returns non-200 status code or throws TimeoutException if not achieved within timeout\n- getHTTPResponseCode(string $url) -> ?int - Private method that makes the actual HTTP request and returns the response code (null if request fails)",
    "Canonical_solution": "use Exception;\nuse Facebook\\WebDriver\\Exception\\TimeoutException;\n\nclass URLChecker\n{\n    const POLL_INTERVAL_MS = 500;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    public function waitUntilAvailable($timeout_in_ms, $url)\n    {\n        $end = microtime(true) + $timeout_in_ms / 1000;\n\n        while ($end > microtime(true)) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS);\n        }\n\n        throw new TimeoutException(sprintf(\n            'Timed out waiting for %s to become available after %d ms.',\n            $url,\n            $timeout_in_ms\n        ));\n    }\n\n    public function waitUntilUnavailable($timeout_in_ms, $url)\n    {\n        $end = microtime(true) + $timeout_in_ms / 1000;\n\n        while ($end > microtime(true)) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS);\n        }\n\n        throw new TimeoutException(sprintf(\n            'Timed out waiting for %s to become unavailable after %d ms.',\n            $url,\n            $timeout_in_ms\n        ));\n    }\n\n    private function getHTTPResponseCode($url)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        if (!defined('CURLOPT_CONNECTTIMEOUT_MS')) {\n            define('CURLOPT_CONNECTTIMEOUT_MS', 156);\n        }\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n\n        $code = null;\n\n        try {\n            curl_exec($ch);\n            $info = curl_getinfo($ch);\n            $code = $info['http_code'];\n        } catch (Exception $e) {\n        }\n        curl_close($ch);\n\n        return $code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 5000;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while ((microtime(true) - $start_time) * 1000 < $timeout_in_ms) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n        throw new TimeoutException(\"Timeout waiting for URL to become available.\");\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while ((microtime(true) - $start_time) * 1000 < $timeout_in_ms) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n        throw new TimeoutException(\"Timeout waiting for URL to become unavailable.\");\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_setopt($ch, CURLOPT_TIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL to fetch data from a specified URL.\n\nFunction Description: The function initializes a cURL session, configures it with basic options (disabling SSL verification for simplicity), executes the request, and returns the response. It handles the entire cURL lifecycle from initialization to cleanup.\n\nInput: \n- $url (string): The URL to which the HTTP request will be made.\n\nOutput: \n- Returns the response from the HTTP request as a string if successful, or false on failure.",
    "Canonical_solution": "function make_curl_request($url)\n{\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $res = curl_exec($ch);\n    curl_close($ch);\n    return $res;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function fetchData($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's API to query fund transfer orders, including request signing and HTTP communication functionality.\n\nClass Description: The AlipayService class provides methods to interact with Alipay's payment API, specifically for querying fund transfer orders. It handles request signing, parameter encoding, and HTTP communication using cURL.\n\nAttributes:\n- appId: string - The application ID provided by Alipay\n- rsaPrivateKey: string - The RSA private key for request signing\n- charset: string - The character encoding to use (default: 'utf-8')\n\nMethods:\n- __construct(string $appid, string $saPrivateKey) -> void - Initializes the service with Alipay app ID and private key\n- doQuery(string $outBizBo='', string $orderId='') -> array - Queries a fund transfer order using either out business number or order ID\n- generateSign(array $params, string $signType='RSA') -> string - Generates a signature for the request parameters\n- sign(string $data, string $signType='RSA') -> string - Signs the given data using the configured private key\n- checkEmpty(mixed $value) -> bool - Checks if a value is empty or null\n- getSignContent(array $params) -> string - Prepares the parameter string for signing\n- characet(string $data, string $targetCharset) -> string - Converts character encoding if needed\n- curlPost(string $url='', mixed $postData='', array $options=[]) -> string - Executes a POST request using cURL",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $rsaPrivateKey;\n    protected $charset;\n\n    public function __construct($appid, $saPrivateKey)\n    {\n        $this->appId = $appid;\n        $this->charset = 'utf-8';\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function doQuery($outBizBo='', $orderId='')\n    {\n        $requestConfigs = array(\n            'out_biz_no'=>$outBizBo,\n            'order_id'=>$orderId,\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n\n        ($res) or die('\u60a8\u4f7f\u7528\u7684\u79c1\u94a5\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5RSA\u79c1\u94a5\u914d\u7f6e');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset;\n\n    public function __construct(string $appId, string $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n        $this->charset = 'utf-8';\n    }\n\n    public function doQuery(string $outBizNo = '', string $orderId = ''): array {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n        ];\n\n        if (!$this->checkEmpty($outBizNo)) {\n            $params['out_biz_no'] = $outBizNo;\n        }\n        if (!$this->checkEmpty($orderId)) {\n            $params['order_id'] = $orderId;\n        }\n\n        $params['sign'] = $this->generateSign($params);\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', $params);\n        return json_decode($response, true);\n    }\n\n    public function generateSign(array $params, string $signType = 'RSA'): string {\n        $content = $this->getSignContent($params);\n        return $this->sign($content, $signType);\n    }\n\n    public function sign(string $data, string $signType = 'RSA'): string {\n        openssl_sign($data, $signature, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        return base64_encode($signature);\n    }\n\n    public function checkEmpty(mixed $value): bool {\n        return empty($value);\n    }\n\n    public function getSignContent(array $params): string {\n        ksort($params);\n        $content = '';\n        foreach ($params as $key => $value) {\n            if ($this->checkEmpty($value)) continue;\n            $content .= \"$key=$value&\";\n        }\n        return rtrim($content, '&');\n    }\n\n    public function characet(string $data, string $targetCharset): string {\n        return mb_convert_encoding($data, $targetCharset, $this->charset);\n    }\n\n    public function curlPost(string $url = '', mixed $postData = '', array $options = []): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded; charset=' . $this->charset,\n        ]);\n        foreach ($options as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for GET/POST methods, custom headers, cookies, and SSL configuration.\n\nFunction Description: The function should make HTTP requests to a specified URL with optional cookies and user agent. It should handle both HTTP and HTTPS protocols, with configurable SSL verification. The function should follow redirects (302 status) and return the response data or false on failure. Timeouts should be configurable for connection and request execution.\n\nInput:\n- $url: string - The target URL for the HTTP request\n- $cookies: string (optional) - Cookie string to be sent with the request\n- $useragent: string (optional) - User-Agent header value\n- $method: string (optional) - HTTP method ('GET' or 'POST'), defaults to 'GET'\n\nOutput:\n- Returns: mixed - The response data as string on success (HTTP 200), follows redirects automatically (HTTP 302), or returns false on failure",
    "Canonical_solution": "function download($url, $cookies='', $useragent='', $method = 'GET')\n{\n    $header = array(\n        \"Content-Type:application/x-www-form-urlencoded\",\n        'User-Agent: '.$useragent);\n    $ch = curl_init();\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n    }\n    if (stripos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_SSLVERSION, 1);\n    }\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 600);\n    $data = curl_exec($ch);\n    $status = curl_getinfo($ch);\n    curl_close($ch);\n    if (isset($status['http_code']) && $status['http_code'] == 200) {\n        return $data;\n    }\n    if (isset($status['http_code']) && $status['http_code'] == 302) {\n        return download($status['redirect_url'], $cookies, $useragent);\n    }\n    return $data;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $timeout = 30, $connectTimeout = 10, $sslVerify = true) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n    if (strtoupper($method) === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n    }\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL for making GET and POST requests to external APIs, with basic error handling and resource management.\n\nClass Description: The ApiExceptAuthController class is designed to handle HTTP requests to external APIs using PHP's cURL library. It provides methods for making GET and POST requests with basic configuration options and error handling. The class is initialized with a Request object and maintains it as an instance variable.\n\nAttributes:\n- api_controller: [mixed] - Reserved for potential future use to reference an API controller instance\n- request: [Illuminate\\Http\\Request] - The HTTP request object injected during instantiation\n\nMethods:\n- __construct(Request $request) -> [void] - Initializes the class with the given HTTP request object\n- callGetApi(string $url) -> [string|bool] - Makes a GET request to the specified URL and returns the response or false on failure\n- callPostApi(string $url, mixed $data) -> [string|bool] - Makes a POST request to the specified URL with the given data and returns the response or false on failure",
    "Canonical_solution": "use Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\n\nclass ApiExceptAuthController\n{\n    public $api_controller;\n    public $request;\n\n    public function __construct(Request $request)\n    {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url)\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HEADER, 0);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($curl);\n\n        if (curl_errno($curl)) {\n            //echo 'error:' . curl_error($curl);\n        }\n\n        return $response;\n        curl_close($curl);\n    }\n\n    public function callPostApi($url, $data)\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HEADER, 0);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n        $response = curl_exec($curl);\n\n        if (curl_errno($curl)) {\n            echo 'error:'.curl_error($curl);\n        }\n\n        return $response;\n        curl_close($curl);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class ApiExceptAuthController {\n    protected $api_controller;\n    protected $request;\n\n    public function __construct($request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP POST request to a specified API endpoint to fetch content using cURL, with appropriate headers and request parameters.\n\nFunction Description: The function `curl_pipigaoxiao` initiates a cURL session to send a POST request to the 'http://h5.ippzone.com/ppapi/share/fetch_content' endpoint. It sets necessary headers including Content-Type, Origin, and User-Agent, along with a Referer header. The function sends JSON-formatted POST data containing a post ID and type, then returns the response from the server.\n\nInput: \n- `$id` (string|integer): The post ID to be included in the request payload\n\nOutput:\n- `$data` (string): The raw HTTP response including headers and body from the API endpoint",
    "Canonical_solution": "function curl_pipigaoxiao($id)\n{\n    $cl = curl_init();\n    curl_setopt($cl, CURLOPT_URL, 'http://h5.ippzone.com/ppapi/share/fetch_content');\n    curl_setopt($cl, CURLOPT_HEADER, 1);\n    curl_setopt($cl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($cl, CURLOPT_HTTPHEADER, array(\n        'Content-Type: application/json;charset=utf-8',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'\n    ));\n    curl_setopt($cl, CURLOPT_REFERER, 'http://h5.ippzone.com/pp/post/78266943052');\n    curl_setopt($cl, CURLOPT_POST, 1);\n    $post_data = \"{\\\"pid\\\":\".$id.\",\\\"type\\\":\\\"post\\\",\\\"mid\\\":null}\";\n    curl_setopt($cl, CURLOPT_POSTFIELDS, $post_data);\n    $data = curl_exec($cl);\n    curl_close($cl);\n    return $data;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $data = json_encode(['post_id' => $id, 'type' => 'some_type']);\n    \n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0',\n        'Referer: http://h5.ippzone.com/'\n    ]);\n    \n    $response = curl_exec($ch);\n    curl_close($ch);\n    \n    return $response;\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a PHP class that generates placeholder images by downloading them from a remote HTTP server using either cURL or file operations, with various customization options.\n\nClass Description: The Image class provides functionality to generate placeholder images with customizable dimensions, categories, formats, and other visual properties. It handles the download process using either cURL or file operations depending on server capabilities.\n\nAttributes:\n- BASE_URL: string - Base URL for the placeholder image service\n- FORMAT_JPG: string - Constant for JPG format\n- FORMAT_JPEG: string - Constant for JPEG format  \n- FORMAT_PNG: string - Constant for PNG format\n- categories: array - Available image categories\n\nMethods:\n- image(\n    string|null $dir = null,\n    int $width = 640,\n    int $height = 480,\n    string|null $category = null,\n    bool $fullPath = true,\n    bool $randomize = true,\n    string|null $word = null,\n    bool $gray = false,\n    string $format = 'png'\n  ) -> string|false - Downloads and saves an image with specified parameters, returning the file path or false on failure\n- imageUrl(\n    int $width,\n    int $height,\n    string|null $category,\n    bool $randomize,\n    string|null $word,\n    bool $gray,\n    string $format\n  ) -> string - Generates the URL for the placeholder image (assumed to exist based on reference code)",
    "Canonical_solution": "namespace Faker\\Provider;\n\nclass Image extends Base\n{\n    public const BASE_URL = 'https://via.placeholder.com';\n    public const FORMAT_JPG = 'jpg';\n    public const FORMAT_JPEG = 'jpeg';\n    public const FORMAT_PNG = 'png';\n\n    protected static $categories = [\n        'abstract', 'animals', 'business', 'cats', 'city', 'food', 'nightlife',\n        'fashion', 'people', 'nature', 'sports', 'technics', 'transport',\n    ];\n\n    public static function image(\n        $dir = null,\n        $width = 640,\n        $height = 480,\n        $category = null,\n        $fullPath = true,\n        $randomize = true,\n        $word = null,\n        $gray = false,\n        $format = 'png'\n    ) {\n        $dir = null === $dir ? sys_get_temp_dir() : $dir;\n        if (!is_dir($dir) || !is_writable($dir)) {\n            throw new \\InvalidArgumentException(sprintf('Cannot write to directory \"%s\"', $dir));\n        }\n\n        $name = md5(uniqid(empty($_SERVER['SERVER_ADDR']) ? '' : $_SERVER['SERVER_ADDR'], true));\n        $filename = sprintf('%s.%s', $name, $format);\n        $filepath = $dir . DIRECTORY_SEPARATOR . $filename;\n\n        $url = static::imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n\n        if (function_exists('curl_exec')) {\n            $fp = fopen($filepath, 'w');\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_FILE, $fp);\n            $success = curl_exec($ch) && curl_getinfo($ch, CURLINFO_HTTP_CODE) === 200;\n            fclose($fp);\n            curl_close($ch);\n\n            if (!$success) {\n                unlink($filepath);\n                return false;\n            }\n        } elseif (ini_get('allow_url_fopen')) {\n            $success = copy($url, $filepath);\n            if (!$success) {\n                return false;\n            }\n        } else {\n            return new \\RuntimeException('The image formatter downloads an image from a remote HTTP server. Therefore, it requires that PHP can request remote hosts, either via cURL or fopen()');\n        }\n\n        return $fullPath ? $filepath : $filename;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Image {\n    const BASE_URL = 'https://via.placeholder.com/';\n    const FORMAT_JPG = 'jpg';\n    const FORMAT_JPEG = 'jpeg';\n    const FORMAT_PNG = 'png';\n    public $categories = ['abstract', 'animals', 'business', 'cats', 'city', 'food', 'nature', 'people', 'sports', 'technics'];\n\n    public function image($dir = null, $width = 640, $height = 480, $category = null, $fullPath = true, $randomize = true, $word = null, $gray = false, $format = 'png') {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        $filePath = $dir ? rtrim($dir, '/') . '/' . uniqid('placeholder_') . '.' . $format : uniqid('placeholder_') . '.' . $format;\n\n        if (function_exists('curl_version')) {\n            $ch = curl_init($url);\n            $fp = fopen($filePath, 'wb');\n            curl_setopt($ch, CURLOPT_FILE, $fp);\n            curl_setopt($ch, CURLOPT_HEADER, 0);\n            curl_exec($ch);\n            curl_close($ch);\n            fclose($fp);\n        } else {\n            $image = file_get_contents($url);\n            file_put_contents($filePath, $image);\n        }\n\n        return $fullPath ? realpath($filePath) : $filePath;\n    }\n\n    public function imageUrl($width, $height, $category, $randomize, $word, $gray, $format) {\n        $url = self::BASE_URL . \"{$width}x{$height}\";\n        if ($gray) {\n            $url .= '/?grayscale';\n        }\n        if ($word) {\n            $url .= \"/?text=\" . urlencode($word);\n        }\n        if ($category && in_array($category, $this->categories)) {\n            $url .= \"/{$category}\";\n        }\n        if ($randomize) {\n            $url .= \"?random=\" . rand(1, 1000);\n        }\n        return $url . '.' . $format;\n    }\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a function that retrieves the content of a specified URL using PHP's cURL library, with appropriate settings for handling redirects and mimicking a mobile user agent.\n\nFunction Description: The function uses PHP's cURL functions to make an HTTP request to the specified URL. It configures the cURL session to return the response as a string rather than outputting it directly, follows any redirects, and sets a mobile user agent string to mimic a mobile browser. The function then executes the request, closes the cURL session, and returns the response content.\n\nInput: \n- $url (string): The URL from which to retrieve content\n\nOutput: \n- (string): The content retrieved from the specified URL, or false if the request fails",
    "Canonical_solution": "function GetUrlContent($url)\n{\n    $curl = curl_init($url);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16');\n    $res = curl_exec($curl);\n    curl_close($curl);\n    return $res;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function getUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1');\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a PHP class that implements Alipay payment integration using cURL for HTTP communication with Alipay's API.\n\nClass Description: The AlipayService class provides functionality to interact with Alipay's payment gateway. It handles payment request creation, signing, and communication with Alipay's API endpoints.\n\nAttributes:\n- appId: [string] - The application ID provided by Alipay\n- notifyUrl: [string] - The URL where Alipay will send payment notifications\n- charset: [string] - Character encoding (default: 'utf-8')\n- rsaPrivateKey: [string] - The RSA private key for signing requests\n- totalFee: [float] - The total payment amount\n- outTradeNo: [string] - The merchant's unique order number\n- orderName: [string] - Description of the order\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid(string $appid) -> [void] - Sets the Alipay application ID\n- setNotifyUrl(string $notifyUrl) -> [void] - Sets the notification URL\n- setRsaPrivateKey(string $saPrivateKey) -> [void] - Sets the RSA private key\n- setTotalFee(float $payAmount) -> [void] - Sets the payment amount\n- setOutTradeNo(string $outTradeNo) -> [void] - Sets the merchant order number\n- setOrderName(string $orderName) -> [void] - Sets the order description\n- doPay() -> [array] - Prepares and sends payment request to Alipay, returns response\n- curlPost(string $url, mixed $postData, array $options) -> [string] - Executes cURL POST request to specified URL\n- generateSign(array $params, string $signType) -> [string] - Generates signature for request parameters (implementation not shown in reference code)",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl)\n    {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName)\n    {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay()\n    {\n        $requestConfigs = array(\n            'out_trade_no'=>$this->outTradeNo,\n            'total_amount'=>$this->totalFee,\n            'subject'=>$this->orderName,\n            'timeout_express'=>'2h'\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.precreate',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {\n    }\n\n    public function setAppid(string $appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl(string $notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey(string $rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee(float $payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo(string $outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName(string $orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.create',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n            ])\n        ];\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return $this->curlPost($url, $params, []);\n    }\n\n    private function curlPost(string $url, mixed $postData, array $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        foreach ($options as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign(array $params, string $signType) {\n        // Implementation of signature generation\n    }\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for making HTTP requests with support for various methods (GET, POST, PUT, DELETE, PATCH), custom headers, and request/response logging.\n\nClass Description: The Curl class is an HTTP client implementation that uses PHP's cURL extension to send HTTP requests and handle responses. It supports common HTTP methods, allows configuration of cURL options, handles request headers and parameters, and provides detailed response information including headers, status code, and body.\n\nAttributes:\n\ncurlOptions: [array] - Default cURL options including timeout, SSL verification, redirects, etc.\nrequestArguments: [array] - Stores the current request parameters including URI, method, parameters, and headers.\nrequestHeader: [array] - Default request headers that can be extended or overridden.\nresponseBody: [string] - Stores the response body from the last request.\nresponseHeader: [array] - Stores the response headers from the last request.\nresponseHttpCode: [int] - Stores the HTTP status code from the last request.\nresponseClientError: [string|null] - Stores any cURL error from the last request.\nresponseClientInfo: [array] - Stores cURL info from the last request.\nlogger: [object|null] - Optional logger instance for request/response logging.\n\nMethods:\n\nrequest: [request](string $uri, string $method = 'GET', array $parameters = [], array $headers = [], bool $multipart = false) -> string - Makes an HTTP request to the specified URI with given method, parameters and headers. Returns the response body.\ngetResponse: [getResponse]() -> array - Returns complete request/response information including headers, status code, body, and client info.\nsetCurlOptions: [setCurlOptions](array $curlOptions) -> void - Sets additional cURL options.\nsetLogger: [setLogger](object $logger) -> void - Sets a logger instance for request/response logging.\ngetResponseBody: [getResponseBody]() -> string - Returns the response body from the last request.\ngetResponseHeader: [getResponseHeader]() -> array - Returns the response headers from the last request.\ngetResponseHttpCode: [getResponseHttpCode]() -> int - Returns the HTTP status code from the last request.\ngetResponseClientError: [getResponseClientError]() -> string|null - Returns any cURL error from the last request.\nfetchResponseHeader: [fetchResponseHeader](resource $curl, string $header) -> int - Callback function for processing response headers.\nprepareRequestHeaders: [prepareRequestHeaders]() -> array - Prepares request headers in cURL format.\ngetResponseClientInfo: [getResponseClientInfo]() -> array - Returns cURL info from the last request.\ngetRequestArguments: [getRequestArguments]() -> array - Returns the arguments used for the last request.",
    "Canonical_solution": "namespace Hybridauth\\HttpClient;\n\nclass Curl implements HttpClientInterface\n{\n    protected $curlOptions = [\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_CONNECTTIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => false,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n        CURLINFO_HEADER_OUT => true,\n        CURLOPT_ENCODING => 'identity',\n        CURLOPT_USERAGENT => 'Hybridauth, PHP Social Authentication Library (https://github.com/hybridauth/hybridauth)',\n    ];\n\n    protected $requestArguments = [];\n    protected $requestHeader = [\n        'Accept' => '*/*',\n        'Cache-Control' => 'max-age=0',\n        'Connection' => 'keep-alive',\n        'Expect' => '',\n        'Pragma' => '',\n    ];\n\n    protected $responseBody = '';\n    protected $responseHeader = [];\n    protected $responseHttpCode = 0;\n    protected $responseClientError = null;\n    protected $responseClientInfo = [];\n    protected $logger = null;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false)\n    {\n        $this->requestHeader = array_replace($this->requestHeader, (array)$headers);\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $this->requestHeader,\n        ];\n\n        $curl = curl_init();\n\n        switch ($method) {\n            case 'GET':\n            case 'DELETE':\n                unset($this->curlOptions[CURLOPT_POST]);\n                unset($this->curlOptions[CURLOPT_POSTFIELDS]);\n                $uri = $uri . (strpos($uri, '?') ? '&' : '?') . http_build_query($parameters);\n                if ($method === 'DELETE') {\n                    $this->curlOptions[CURLOPT_CUSTOMREQUEST] = 'DELETE';\n                }\n                break;\n            case 'PUT':\n            case 'POST':\n            case 'PATCH':\n                $body_content = $multipart ? $parameters : http_build_query($parameters);\n                if (isset($this->requestHeader['Content-Type'])\n                    && $this->requestHeader['Content-Type'] == 'application/json'\n                ) {\n                    $body_content = json_encode($parameters);\n                }\n\n                if ($method === 'POST') {\n                    $this->curlOptions[CURLOPT_POST] = true;\n                } else {\n                    $this->curlOptions[CURLOPT_CUSTOMREQUEST] = $method;\n                }\n                $this->curlOptions[CURLOPT_POSTFIELDS] = $body_content;\n                break;\n        }\n\n        $this->curlOptions[CURLOPT_URL] = $uri;\n        $this->curlOptions[CURLOPT_HTTPHEADER] = $this->prepareRequestHeaders();\n        $this->curlOptions[CURLOPT_HEADERFUNCTION] = [$this, 'fetchResponseHeader'];\n\n        foreach ($this->curlOptions as $opt => $value) {\n            curl_setopt($curl, $opt, $value);\n        }\n\n        $response = curl_exec($curl);\n\n        $this->responseBody = $response;\n        $this->responseHttpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        $this->responseClientError = curl_error($curl);\n        $this->responseClientInfo = curl_getinfo($curl);\n\n        if ($this->logger) {\n            $this->logger->debug(sprintf('%s::request( %s, %s ), response:', get_class($this), $uri, $method), $this->getResponse());\n            if (false === $response) {\n                $this->logger->error(sprintf('%s::request( %s, %s ), error:', get_class($this), $uri, $method), [$this->responseClientError]);\n            }\n        }\n\n        curl_close($curl);\n        return $this->responseBody;\n    }\n\n    public function getResponse()\n    {\n        $curlOptions = $this->curlOptions;\n        $curlOptions[CURLOPT_HEADERFUNCTION] = '*omitted';\n        return [\n            'request' => $this->getRequestArguments(),\n            'response' => [\n                'code' => $this->getResponseHttpCode(),\n                'headers' => $this->getResponseHeader(),\n                'body' => $this->getResponseBody(),\n            ],\n            'client' => [\n                'error' => $this->getResponseClientError(),\n                'info' => $this->getResponseClientInfo(),\n                'opts' => $curlOptions,\n            ],\n        ];\n    }\n\n    public function setCurlOptions($curlOptions)\n    {\n        foreach ($curlOptions as $opt => $value) {\n            $this->curlOptions[$opt] = $value;\n        }\n    }\n\n    public function setLogger($logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader()\n    {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode()\n    {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError()\n    {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo()\n    {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments()\n    {\n        return $this->requestArguments;\n    }\n\n    protected function fetchResponseHeader($curl, $header)\n    {\n        $pos = strpos($header, ':');\n        if (!empty($pos)) {\n            $key = str_replace('-', '_', strtolower(substr($header, 0, $pos)));\n            $value = trim(substr($header, $pos + 2));\n            $this->responseHeader[$key] = $value;\n        }\n        return strlen($header);\n    }\n\n    protected function prepareRequestHeaders()\n    {\n        $headers = [];\n        foreach ($this->requestHeader as $header => $value) {\n            $headers[] = trim($header) . ': ' . trim($value);\n        }\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_SSL_VERIFYPEER => false,\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type: application/json',\n        'Accept: application/json',\n    ];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n\n    public function request(string $uri, string $method = 'GET', array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $headers,\n        ];\n        $ch = curl_init($uri);\n        $this->setCurlMethod($ch, $method, $parameters, $multipart);\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders($headers));\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientError = curl_error($ch);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseHeader = $this->fetchResponseHeader($ch, $this->responseBody);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log($this->getRequestArguments(), $this->getResponse());\n        }\n        return $this->responseBody;\n    }\n\n    private function setCurlMethod($ch, $method, $parameters, $multipart) {\n        switch (strtoupper($method)) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $multipart ? $parameters : json_encode($parameters));\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($parameters));\n                break;\n            case 'DELETE':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n            case 'PATCH':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($parameters));\n                break;\n            default:\n                if (!empty($parameters)) {\n                    $uri = $this->requestArguments['uri'] . '?' . http_build_query($parameters);\n                    curl_setopt($ch, CURLOPT_URL, $uri);\n                }\n                break;\n        }\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setCurlOptions(array $curlOptions): void {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    private function fetchResponseHeader($ch, $header): int {\n        $this->responseHeader[] = $header;\n        return strlen($header);\n    }\n\n    private function prepareRequestHeaders(array $headers): array {\n        return array_merge($this->requestHeader, $headers);\n    }\n\n    public function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a function that performs an HTTP request using cURL in PHP, with support for proxy configuration and error handling.\n\nFunction Description: The function makes an HTTP GET request to a specified URL using PHP's cURL library. It includes configuration options for handling redirects, timeouts, SSL verification, and proxy settings. The function returns the content of the response or null if an error occurs.\n\nInput: \n- $encUrl: string - The URL to which the HTTP request will be made\n- $proxy: string|null - (Optional) Proxy server address if proxy is required\n- $proxyAuth: array|null - (Optional) Associative array containing 'user' and 'pwd' keys for proxy authentication\n\nOutput: \n- string|null - Returns the response content as a string if successful, or null if an error occurs",
    "Canonical_solution": "function parse($encUrl)\n{\n    global $proxy;\n    global $proxyAuth;\n    $options = array(\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HEADER         => false,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_ENCODING       => \"\",\n        CURLOPT_USERAGENT      => 'sharrre',\n        CURLOPT_AUTOREFERER    => true,\n        CURLOPT_CONNECTTIMEOUT => 5,\n        CURLOPT_TIMEOUT        => 10,\n        CURLOPT_MAXREDIRS      => 3,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_SSL_VERIFYPEER => false,\n    );\n    $ch = curl_init();\n    \n    if ($proxy != null) {\n        $options[CURLOPT_PROXY] = $proxy;\n        if (isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            $options[CURLOPT_PROXYUSERPWD] = $proxyAuth['user'] . ':' . $proxyAuth['pwd'];\n        }\n    }\n    \n    $options[CURLOPT_URL] = $encUrl;\n    curl_setopt_array($ch, $options);\n\n    $content = curl_exec($ch);\n    $err = curl_errno($ch);\n    $errmsg = curl_error($ch);\n\n    curl_close($ch);\n\n    return $content;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpGetRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    \n    if ($proxy) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified API endpoint using cURL in PHP, with configurable parameters and SSL verification settings.\n\nFunction Description: The function sends a POST request to a Taobao API endpoint to convert a Taobao share link (tkl) using provided authentication and configuration parameters. It handles SSL verification and returns the API response.\n\nInput:\n- $appkey (string): The application key for API authentication\n- $sid (string): The session ID or user identifier\n- $pid (string): The product ID or parameter\n- $tkl (string): The Taobao share link (tkl) to be converted\n\nOutput:\n- Returns the raw response from the API as a string, or false if the request fails",
    "Canonical_solution": "function reqApi($appkey, $sid, $pid, $tkl)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, \"https://api.zhetaoke.com:10001/api/open_gaoyongzhuanlian_tkl.ashx?appkey=\".$appkey.\"&sid=\".$sid.\"&pid=\".$pid.\"&tkl=\".$tkl.\"&signurl=5\");\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $curl_result = curl_exec($ch);\n    curl_close($ch);\n    return $curl_result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://api.taobao.com/router/rest\";\n    $data = array(\n        'appkey' => $appkey,\n        'sid' => $sid,\n        'pid' => $pid,\n        'tkl' => $tkl,\n        'method' => 'taobao.tbk.tpwd.convert',\n        'format' => 'json',\n        'v' => '2.0'\n    );\n\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a PHP class that interacts with the Xiami music API to fetch details about songs, albums, or collections using cURL for HTTP requests.\n\nClass Description: The HermitJson class provides functionality to make HTTP requests to the Xiami API and retrieve JSON responses containing music details. It handles different types of requests (song, album, or collection) through a single method.\n\nAttributes: \n[This class has no explicitly defined attributes in the reference code]\n\nMethods:\n1: xiami_http(int $type, string $id) -> array|bool - Makes an HTTP request to the Xiami API based on the specified type and ID. Returns the decoded JSON response as an array or false on failure.\n   - $type: Integer specifying request type (0 for song, 1 for album, 2 for collection)\n   - $id: String containing the ID of the requested item\n   - Returns: Array containing the API response data or false if the request fails",
    "Canonical_solution": "class HermitJson\n{\n    public function __construct()\n    {\n    }\n\n    private function xiami_http($type, $id)\n    {\n        switch($type){\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&r=song/detail\";\n                break;\n\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&r=album/detail\";\n                break;\n\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&type=collectId&r=collect/detail\";\n                break;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_REFERER, \"http://m.xiami.com/\");\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53');\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        $cexecute = curl_exec($ch);\n        @curl_close($ch);\n\n        if ($cexecute) {\n            $result = json_decode($cexecute, TRUE);\n            return $result;\n        } else {\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class HermitJson {\n    public function xiami_http(int $type, string $id) {\n        $url = \"https://api.xiami.com/v1/music/\";\n        switch ($type) {\n            case 0:\n                $url .= \"song?id=\" . $id;\n                break;\n            case 1:\n                $url .= \"album?id=\" . $id;\n                break;\n            case 2:\n                $url .= \"collection?id=\" . $id;\n                break;\n            default:\n                return false;\n        }\n        \n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        \n        return $response ? json_decode($response, true) : false;\n    }\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a PHP HTTP client class that handles various types of HTTP requests (GET, POST, DELETE, multipart POST) using cURL, with proper error handling and response processing.\n\nClass Description: The Client class provides static methods to send HTTP requests and process responses. It handles request construction, cURL session management, response parsing, and error handling. The class supports standard HTTP methods and multipart form data for file uploads.\n\nAttributes: (This class has no instance attributes as all methods are static)\n\nMethods:\n\nMethod1: get(string $url, array $headers = array()) -> Response - Sends a GET request to the specified URL with optional headers.\n\nMethod2: delete(string $url, array $headers = array()) -> Response - Sends a DELETE request to the specified URL with optional headers.\n\nMethod3: post(string $url, mixed $body, array $headers = array()) -> Response - Sends a POST request with the given body to the specified URL with optional headers.\n\nMethod4: multipartPost(string $url, array $fields, string $name, string $fileName, string $fileBody, string $mimeType = null, array $headers = array()) -> Response - Sends a multipart/form-data POST request for file upload with additional form fields.\n\nMethod5: sendRequest(Request $request) -> Response - Internal method that executes the cURL request and returns a Response object. Handles request setup, execution, and response processing.\n\nMethod6: userAgent() -> string - Generates a User-Agent string with SDK, system, and PHP version information.\n\nMethod7: parseHeaders(string $raw) -> array - Parses raw HTTP response headers into an associative array.\n\nMethod8: escapeQuotes(string $str) -> string - Escapes quotes in a string for use in HTTP headers.\n\nMethod9: ucwordsHyphen(string $str) -> string - Properly capitalizes hyphenated header names.",
    "Canonical_solution": "namespace Qiniu\\Http;\n\nuse Qiniu\\Config;\nuse Qiniu\\Http\\Request;\nuse Qiniu\\Http\\Response;\n\nfinal class Client\n{\n    public static function get($url, array $headers = array())\n    {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, array $headers = array())\n    {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, array $headers = array())\n    {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(\n        $url,\n        $fields,\n        $name,\n        $fileName,\n        $fileBody,\n        $mimeType = null,\n        array $headers = array()\n    ) {\n        $data = array();\n        $mimeBoundary = md5(microtime());\n\n        foreach ($fields as $key => $val) {\n            array_push($data, '--' . $mimeBoundary);\n            array_push($data, \"Content-Disposition: form-data; name=\\\"$key\\\"\");\n            array_push($data, '');\n            array_push($data, $val);\n        }\n\n        array_push($data, '--' . $mimeBoundary);\n        $finalMimeType = empty($mimeType) ? 'application/octet-stream' : $mimeType;\n        $finalFileName = self::escapeQuotes($fileName);\n        array_push($data, \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$finalFileName\\\"\");\n        array_push($data, \"Content-Type: $finalMimeType\");\n        array_push($data, '');\n        array_push($data, $fileBody);\n\n        array_push($data, '--' . $mimeBoundary . '--');\n        array_push($data, '');\n\n        $body = implode(\"\\r\\n\", $data);\n        $contentType = 'multipart/form-data; boundary=' . $mimeBoundary;\n        $headers['Content-Type'] = $contentType;\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    private static function userAgent()\n    {\n        $sdkInfo = \"QiniuPHP/\" . Config::SDK_VER;\n        $systemInfo = php_uname(\"s\");\n        $machineInfo = php_uname(\"m\");\n        $envInfo = \"($systemInfo/$machineInfo)\";\n        $phpVer = phpversion();\n        $ua = \"$sdkInfo $envInfo PHP/$phpVer\";\n        return $ua;\n    }\n\n    public static function sendRequest($request)\n    {\n        $t1 = microtime(true);\n        $ch = curl_init();\n        $options = array(\n            CURLOPT_USERAGENT => self::userAgent(),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST => $request->method,\n            CURLOPT_URL => $request->url,\n        );\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            $options[CURLOPT_FOLLOWLOCATION] = true;\n        }\n\n        if (!empty($request->headers)) {\n            $headers = array();\n            foreach ($request->headers as $key => $val) {\n                array_push($headers, \"$key: $val\");\n            }\n            $options[CURLOPT_HTTPHEADER] = $headers;\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));\n\n        if (!empty($request->body)) {\n            $options[CURLOPT_POSTFIELDS] = $request->body;\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $t2 = microtime(true);\n        $duration = round($t2 - $t1, 3);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $r = new Response(-1, $duration, array(), null, curl_error($ch));\n            curl_close($ch);\n            return $r;\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = self::parseHeaders(substr($result, 0, $header_size));\n        $body = substr($result, $header_size);\n        curl_close($ch);\n        return new Response($code, $duration, $headers, $body, null);\n    }\n\n    private static function parseHeaders($raw)\n    {\n        $headers = array();\n        $headerLines = explode(\"\\r\\n\", $raw);\n        foreach ($headerLines as $line) {\n            $headerLine = trim($line);\n            $kv = explode(':', $headerLine);\n            if (count($kv) > 1) {\n                $kv[0] =self::ucwordsHyphen($kv[0]);\n                $headers[$kv[0]] = trim($kv[1]);\n            }\n        }\n        return $headers;\n    }\n\n    private static function escapeQuotes($str)\n    {\n        $find = array(\"\\\\\", \"\\\"\");\n        $replace = array(\"\\\\\\\\\", \"\\\\\\\"\");\n        return str_replace($find, $replace, $str);\n    }\n    \n    private static function ucwordsHyphen($str)\n    {\n        return str_replace('- ', '-', ucwords(str_replace('-', '- ', $str)));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Client {\n    public static function get(string $url, array $headers = array()): Response {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete(string $url, array $headers = array()): Response {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post(string $url, mixed $body, array $headers = array()): Response {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(string $url, array $fields, string $name, string $fileName, string $fileBody, string $mimeType = null, array $headers = array()): Response {\n        $request = new Request('POST', $url, $headers, $fields);\n        $request->setFile($name, $fileName, $fileBody, $mimeType);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request): Response {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n        if ($request->getMethod() !== 'GET' && $request->getBody() !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseData = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        return new Response($httpCode, $responseData, $error);\n    }\n\n    public static function userAgent(): string {\n        return 'MySDK/' . phpversion() . ' (' . php_uname() . ')';\n    }\n\n    public static function parseHeaders(string $raw): array {\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $raw) as $header) {\n            if (strpos($header, ': ') !== false) {\n                list($key, $value) = explode(': ', $header, 2);\n                $headers[strtolower($key)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public static function escapeQuotes(string $str): string {\n        return str_replace(['\"', \"'\"], ['\\\"', \"\\'\"], $str);\n    }\n\n    public static function ucwordsHyphen(string $str): string {\n        return str_replace('-', ' ', ucwords($str));\n    }\n}"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement a PHP class for interacting with the BTCPay payment gateway to create invoices and process payments.\n\nClass Description: The BTCPay class encapsulates functionality for communicating with the BTCPay server API. It handles authentication, request formatting, and response processing for invoice creation.\n\nAttributes:\n- config: [array] - Stores configuration parameters including BTCPay server URL, store ID, and API key\n\nMethods:\n- __construct($config): [void] - Initializes the class with configuration parameters\n  - $config: [array] - Configuration array containing:\n    - btcpay_url: [string] - Base URL of BTCPay server\n    - btcpay_storeId: [string] - Store identifier\n    - btcpay_api_key: [string] - API authentication token\n\n- pay($order): [array] - Creates a payment invoice in BTCPay\n  - $order: [array] - Order details containing:\n    - total_amount: [numeric] - Order amount in smallest currency unit (e.g., cents)\n    - trade_no: [string] - Unique order identifier\n  - Returns: [array] - Payment response containing:\n    - type: [integer] - Response type identifier\n    - data: [string] - Checkout URL for payment\n\n- _curlPost($url, $params): [string] - Internal method for making HTTP POST requests\n  - $url: [string] - API endpoint URL\n  - $params: [string|false] - JSON-encoded request body or false for empty body\n  - Returns: [string] - Raw API response",
    "Canonical_solution": "namespace App\\Payments;\n\nclass BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $params = [\n            'jsonResponse' => true,\n            'amount' => sprintf('%.2f', $order['total_amount'] / 100),\n            'currency' => 'CNY',\n            'metadata' => [\n                'orderId' => $order['trade_no']\n            ]\n        ];\n\n        $params_string = @json_encode($params);\n        $ret_raw = $this->_curlPost($this->config['btcpay_url'] . 'api/v1/stores/' . $this->config['btcpay_storeId'] . '/invoices', $params_string);\n        $ret = @json_decode($ret_raw, true);\n        \n        if(empty($ret['checkoutLink'])) {\n            abort(500, \"error!\");\n        }\n        return [\n            'type' => 1,\n            'data' => $ret['checkoutLink'],\n        ];\n    }\n\n    private function _curlPost($url, $params=false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch, \n            CURLOPT_HTTPHEADER, \n            array(\n                'Authorization:' .'token '.$this->config['btcpay_api_key'], \n                'Content-Type: application/json'\n            )\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no']\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        \n        return [\n            'type' => isset($responseData['id']) ? 1 : 0,\n            'data' => $responseData['checkoutLink'] ?? ''\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for timeout, headers, SSL verification, and referer settings.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes custom headers (including a mobile user agent), disables SSL verification for development purposes, sets a referer header, and ensures the response is returned as a string. The function handles the complete cURL lifecycle from initialization to cleanup.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made\n\nOutput: \n- string: The contents of the response from the HTTP request, or false if the request fails",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.58pic.com/c/15990160');\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        $response = false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for timeout, headers, SSL verification, and referer settings.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes custom configurations such as a user agent string, disabled SSL verification, a referer header, and a connection timeout. The function returns the raw response content from the requested URL.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made.\n\nOutput: \n- string: The raw content returned from the HTTP request. Returns false if the request fails.",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.cctv.com/');\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: MyCustomUserAgent/1.0',\n        'Referer: http://example.com'\n    ]);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement functions to verify transactions from different payment gateways (NowPayments, NextPay, and ZarinPal) using their respective APIs.\n\nFunction Description: The functions will interact with payment gateway APIs to verify transaction details and return the verification results.\n\nInput: \n- verify_nowpayment_transaction: \n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $hash_id (string): Unique transaction identifier from NowPayments\n\n- verify_nextpay_transaction:\n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $amount (numeric): Transaction amount to verify\n  - $payid (string): Transaction ID from NextPay\n\n- verify_zarinpal_transaction:\n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $Authority (string): Transaction authority code from ZarinPal\n  - $amount (numeric): Transaction amount to verify\n\nOutput:\n- All functions return the decoded API response from the respective payment gateway, typically containing transaction verification details and status.\n- Return type is object/mixed (decoded JSON response for NowPayments/NextPay, SOAP response object for ZarinPal)",
    "Canonical_solution": "function verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $base_url = 'https://api.nowpayments.io/v1/payment/' . $hash_id;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['X-API-KEY: ' . $paymentKeys['nowpayment']]);\n    curl_setopt($ch, CURLOPT_URL, $base_url);\n    \n    $res = json_decode(curl_exec($ch));\n    curl_close($ch);\n    \n    return $res;\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $curl = curl_init();\n    curl_setopt_array($curl, array(\n        CURLOPT_URL => 'https://nextpay.org/nx/gateway/verify',\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_ENCODING => '',\n        CURLOPT_MAXREDIRS => 10,\n        CURLOPT_TIMEOUT => 0,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n        CURLOPT_CUSTOMREQUEST => 'POST',\n        CURLOPT_POSTFIELDS => 'api_key='.$paymentKeys['nextpay'].'&amount='.$amount.'&currency=IRT&trans_id='.$payid,\n    ));\n    \n    $response = curl_exec($curl);\n    curl_close($curl);\n    \n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount,\n    ]);\n    \n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/$hash_id\";\n    $headers = [\n        \"Content-Type: application/json\",\n        \"x-api-key: \" . $paymentKeys['nowpayments']\n    ];\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://nextpay.org/api/v1/verify\";\n    $data = [\n        'amount' => $amount,\n        'id' => $payid,\n        'api' => $paymentKeys['nextpay']\n    ];\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient(\"https://www.zarinpal.com/pg/services/WebGate/wsdl\");\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a PHP class for interacting with the GoDaddy DNS API to manage domain records, including retrieving domains, getting DNS records, and creating/updating records.\n\nClass Description: The GodaddyDns class provides methods to interact with GoDaddy's DNS API. It handles authentication, domain parsing, and various DNS record operations through HTTP requests using cURL.\n\nAttributes:\n- accessKeyId: [string] - The API access key ID for GoDaddy authentication\n- accessSecrec: [string] - The API secret key for GoDaddy authentication\n- DomainName: [string] - The domain name being managed\n- Host: [string] - The host portion of the domain (default empty)\n- Path: [string] - The path portion of the domain (default empty)\n\nMethods:\n- __construct([string]$accessKeyId, [string]$accessSecrec, [string]$domain = \"\") -> [void] - Initializes the class with API credentials and optional domain name\n- getDomain([string]$domain) -> [array] - Static method that parses a domain into its components (self domain, second-level domain)\n- curl([string]$url, [array]$header = '', [string]$data = '', [string]$method = 'get') -> [array] - Private method that handles cURL requests and returns response\n- getDomains() -> [array] - Retrieves all domains associated with the account\n- GetDNSRecord([string]$domain, [string]$record, [string]$recordType = 'TXT') -> [array] - Gets a specific DNS record for a domain\n- UpdateDNSRecord([string]$domain, [string]$name, [string]$value, [string]$recordType = 'TXT') -> [array] - Updates an existing DNS record\n- CreateDNSRecord([string]$domain, [string]$name, [string]$value, [string]$recordType = 'TXT') -> [array] - Creates a new DNS record",
    "Canonical_solution": "$domainfile = $dir . DIRECTORY_SEPARATOR . \"domain.ini\";\n\nclass GodaddyDns\n{\n    private $accessKeyId  = null;\n    private $accessSecrec = null;\n    private $DomainName   = null;\n    private $Host         = \"\";\n    private $Path         = \"\";\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\")\n    {\n        $this->accessKeyId  = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName   = $domain;\n    }\n\n    public static function getDomain($domain)\n    {\n        global $domainfile;\n        $tmp = file($domainfile);\n        $arr = array();\n        foreach ($tmp as $k=>$v) {\n            $v = trim($v);\n            if ($v!=\"\")\n                $arr[]= \".\" . $v;\n        }\n\n        $seconddomain = \"\";\n        $selfdomain   = \"\";\n        $rootdomain   = \"\";\n        foreach ($arr as $k => $v) {\n            $pos = stripos($domain, $v);\n            if ($pos) {\n                $rootdomain   = substr($domain, $pos);\n                $s            = explode(\".\", substr($domain, 0, $pos));\n                $seconddomain = $s[count($s) - 1].$rootdomain;\n                for ($i = 0; $i < count($s) - 1; $i++)\n                    $selfdomain .= $s[$i] . \".\";\n                $selfdomain = substr($selfdomain,0,strlen($selfdomain)-1);\n                break;\n            }\n        }\n        if ($rootdomain == \"\") {\n            $seconddomain = $domain;\n            $selfdomain   = \"\";\n        }\n        return array($selfdomain, $seconddomain);\n    }\n\n    private function curl($url, $header = '', $data = '', $method = 'get')\n    {\n        $ch       = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        $result   = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return array(\n            'result' => $result,\n            'httpCode' => $httpCode\n        );\n    }\n\n    public function getDomains()\n    {\n        $url    = \"https://api.godaddy.com/v1/domains\";\n        $header = ['accept: application/json', 'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT')\n    {\n        $url    = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$record\";\n        $header = ['accept: application/json', 'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT')\n    {\n        $url    = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$name\";\n        $header = ['accept: application/json', 'Content-Type: application/json',\n            'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        $data   = array(\n            array(\n                'data' => $value,\n                'name' => $name,\n                'ttl' => 3600,\n                'type' => $recordType)\n        );\n        return $this->curl($url, $header, json_encode($data), 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT')\n    {\n        $url    = \"https://api.godaddy.com/v1/domains/$domain/records\";\n        $header = ['accept: application/json', 'Content-Type: application/json',\n            'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        $data   = array(\n            array(\n                'data' => $value,\n                'name' => $name,\n                'ttl' => 3600,\n                'type' => $recordType)\n        );\n        return $this->curl($url, $header, json_encode($data), 'PATCH');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    private $DomainName;\n    private $Host = '';\n    private $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $secondLevelDomain = array_pop($parts);\n        $selfDomain = implode('.', $parts);\n        return ['selfDomain' => $selfDomain, 'secondLevelDomain' => $secondLevelDomain];\n    }\n\n    private function curl($url, $header = '', $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge(['Authorization: sso-key ' . $this->accessKeyId . ':' . $this->accessSecrec], (array)$header));\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function getDomains() {\n        $url = 'https://api.godaddy.com/v1/domains';\n        return $this->curl($url);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        return $this->curl($url);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = json_encode([['data' => $value]]);\n        return $this->curl($url, [], $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = json_encode([['name' => $name, 'data' => $value]]);\n        return $this->curl($url, [], $data, 'post');\n    }\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a PHP class that handles file downloads using cURL with proper error handling and resource management.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using PHP's cURL library. It manages temporary file creation, download execution, and cleanup of resources. The class includes methods to set a custom temporary directory, perform the download, retrieve the downloaded filename, and clean up downloaded files.\n\nAttributes:\n- tempDir: ?string - Optional custom directory for storing temporary files. If not set, uses system temp directory.\n- outputFile: ?string - Path to the downloaded file. Null until download is completed.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets a custom temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file. Throws RuntimeException if called before download().\n- cleanup() -> void - Removes the downloaded file if it exists.",
    "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Exception\\RuntimeException;\nuse Psy\\Shell;\n\nclass CurlDownloader\n{\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        if ($this->outputFile === null) {\n            throw new RuntimeException('Call download() first');\n        }\n\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if ($this->outputFile !== null && \\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        $this->tempDir = rtrim($tempDir, '/') . '/';\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'download_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new ErrorException(\"cURL error: $error\");\n        }\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download not completed. Call download() first.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Create a PHP class that implements OAuth 1.0 authentication for interacting with the Twitter API, handling both GET and POST requests with proper parameter encoding and signature generation.\n\nClass Description: TwitterAPIExchange is a PHP class that provides a convenient way to interact with Twitter's API using OAuth 1.0 authentication. It handles the construction of OAuth signatures, request headers, and performs HTTP requests using cURL.\n\nAttributes:\n- oauth_access_token: string - Twitter OAuth access token\n- oauth_access_token_secret: string - Twitter OAuth access token secret\n- consumer_key: string - Twitter API consumer key\n- consumer_secret: string - Twitter API consumer secret\n- postfields: array - Data to be sent in POST requests\n- getfield: string - Query string for GET requests\n- oauth: array - OAuth parameters for request signing\n- url: string - API endpoint URL\n\nMethods:\n- __construct(array $settings) -> void - Constructor that validates and sets OAuth credentials\n- setPostfields(array $array) -> self - Sets POST data and returns instance for method chaining\n- setGetfield(string $string) -> self - Sets GET query string and returns instance for method chaining\n- getGetfield() -> string|null - Returns current GET query string\n- getPostfields() -> array|null - Returns current POST data\n- buildOauth(string $url, string $requestMethod) -> self - Builds OAuth signature and parameters\n- performRequest(bool $return = true) -> string|void - Executes the API request and returns response\n- buildBaseString(string $baseURI, string $method, array $params) -> string - Private method to build base string for signature\n- buildAuthorizationHeader(array $oauth) -> string - Private method to build OAuth header",
    "Canonical_solution": "class TwitterAPIExchange \n{\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    protected $oauth;\n    public $url;\n\n    public function __construct(array $settings)\n    {\n        if (!in_array('curl', get_loaded_extensions())) \n        {\n            throw new Exception('You need to install cURL, see: http://curl.haxx.se/docs/install.html');\n        }\n        \n        if (!isset($settings['oauth_access_token'])\n            || !isset($settings['oauth_access_token_secret'])\n            || !isset($settings['consumer_key'])\n            || !isset($settings['consumer_secret']))\n        {\n            throw new Exception('Make sure you are passing in the correct parameters');\n        }\n\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n    \n    public function setPostfields(array $array)\n    {\n        if (!is_null($this->getGetfield())) \n        { \n            throw new Exception('You can only choose get OR post fields.'); \n        }\n        \n        if (isset($array['status']) && substr($array['status'], 0, 1) === '@')\n        {\n            $array['status'] = sprintf(\"\\0%s\", $array['status']);\n        }\n        \n        $this->postfields = $array;\n        \n        return $this;\n    }\n    \n    public function setGetfield($string)\n    {\n        if (!is_null($this->getPostfields())) \n        { \n            throw new Exception('You can only choose get OR post fields.'); \n        }\n        \n        $search = array('#', ',', '+', ':');\n        $replace = array('%23', '%2C', '%2B', '%3A');\n        $string = str_replace($search, $replace, $string);  \n        \n        $this->getfield = $string;\n        \n        return $this;\n    }\n    \n    public function getGetfield()\n    {\n        return $this->getfield;\n    }\n    \n    public function getPostfields()\n    {\n        return $this->postfields;\n    }\n    \n    public function buildOauth($url, $requestMethod)\n    {\n        if (!in_array(strtolower($requestMethod), array('post', 'get')))\n        {\n            throw new Exception('Request method must be either POST or GET');\n        }\n        \n        $consumer_key = $this->consumer_key;\n        $consumer_secret = $this->consumer_secret;\n        $oauth_access_token = $this->oauth_access_token;\n        $oauth_access_token_secret = $this->oauth_access_token_secret;\n        \n        $oauth = array( \n            'oauth_consumer_key' => $consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        \n        $getfield = $this->getGetfield();\n        \n        if (!is_null($getfield))\n        {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n            foreach ($getfields as $g)\n            {\n                $split = explode('=', $g);\n                $oauth[$split[0]] = $split[1];\n            }\n        }\n        \n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($consumer_secret) . '&' . rawurlencode($oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        \n        $this->url = $url;\n        $this->oauth = $oauth;\n        \n        return $this;\n    }\n    \n    public function performRequest($return = true)\n    {\n        if (!is_bool($return)) \n        { \n            throw new Exception('performRequest parameter must be true or false'); \n        }\n        \n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        \n        $getfield = $this->getGetfield();\n        $postfields = $this->getPostfields();\n\n        $options = array( \n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n\n        if (!is_null($postfields))\n        {\n            $options[CURLOPT_POSTFIELDS] = $postfields;\n        }\n        else\n        {\n            if ($getfield !== '')\n            {\n                $options[CURLOPT_URL] .= $getfield;\n            }\n        }\n\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n\n        if ($return) { return $json; }\n    }\n    \n    private function buildBaseString($baseURI, $method, $params) \n    {\n        $return = array();\n        ksort($params);\n        \n        foreach($params as $key=>$value)\n        {\n            $return[] = \"$key=\" . $value;\n        }\n        \n        return $method . \"&\" . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $return)); \n    }\n    \n    private function buildAuthorizationHeader($oauth) \n    {\n        $return = 'Authorization: OAuth ';\n        $values = array();\n        \n        foreach($oauth as $key => $value)\n        {\n            $values[] = \"$key=\\\"\" . rawurlencode($value) . \"\\\"\";\n        }\n        \n        $return .= implode(', ', $values);\n        return $return;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields = [];\n    private $getfield = '';\n    private $oauth = [];\n    private $url;\n\n    public function __construct(array $settings) {\n        if (empty($settings['oauth_access_token']) || empty($settings['oauth_access_token_secret']) || empty($settings['consumer_key']) || empty($settings['consumer_secret'])) {\n            throw new Exception('Invalid settings provided.');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $this->oauth = [\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_nonce' => (string)mt_rand(),\n            'oauth_timestamp' => (string)time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_version' => '1.0'\n        ];\n        $this->oauth['oauth_signature'] = $this->buildSignature($url, $requestMethod);\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = [$this->buildAuthorizationHeader($this->oauth), 'Expect:'];\n        $options = [\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url . '?' . $this->getfield,\n            CURLOPT_RETURNTRANSFER => $return,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_POST => !empty($this->postfields),\n            CURLOPT_POSTFIELDS => http_build_query($this->postfields)\n        ];\n        $ch = curl_init();\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $params = array_map('rawurlencode', $params);\n        ksort($params);\n        $baseString = strtoupper($method) . \"&\" . rawurlencode($baseURI) . '&' . rawurlencode(http_build_query($params));\n        return $baseString;\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $header = 'Authorization: OAuth ';\n        $values = [];\n        foreach ($oauth as $key => $value) {\n            $values[] = \"$key=\\\"\" . rawurlencode($value) . \"\\\"\";\n        }\n        $header .= implode(', ', $values);\n        return $header;\n    }\n\n    private function buildSignature(string $url, string $requestMethod) {\n        $baseInfo = $this->buildBaseString($url, $requestMethod, $this->oauth);\n        $compositeKey = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        return base64_encode(hash_hmac('sha1', $baseInfo, $compositeKey, true));\n    }\n}"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request to the OpenAI API using cURL, handles the response, and manages potential errors.\n\nFunction Description: The function `make_curl_request` initializes a cURL session to interact with the OpenAI API. It sets necessary headers including authentication, configures cURL options for the request, and implements a callback function to handle the response stream. The function processes both successful responses and errors, setting appropriate cookies for error conditions and returning the response data.\n\nInput:\n- `$postData` (string) - The JSON-encoded data to be sent in the POST request body.\n- `$OPENAI_API_KEY` (string) - The API key for authenticating with the OpenAI API.\n\nOutput:\n- `$responsedata` (string) - The raw response data from the API, which could be either a successful response or an error message. The function also sets cookies for error conditions when they occur.",
    "Canonical_solution": "function make_curl_request($postData, $OPENAI_API_KEY) {\n    $responsedata = \"\";\n    $ch = curl_init();\n    \n    $headers = [\n        'Accept: application/json',\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ];\n\n    setcookie(\"errcode\", \"\");\n    setcookie(\"errmsg\", \"\");\n\n    $callback = function ($ch, $data) {\n        global $responsedata;\n        $complete = json_decode($data);\n        if (isset($complete->error)) {\n            setcookie(\"errcode\", $complete->error->code);\n            setcookie(\"errmsg\", $data);\n            if (strpos($complete->error->message, \"Rate limit reached\") === 0) {\n                setcookie(\"errcode\", \"rate_limit_reached\");\n            }\n            if (strpos($complete->error->message, \"Your access was terminated\") === 0) {\n                setcookie(\"errcode\", \"access_terminated\");\n            }\n            if (strpos($complete->error->message, \"You didn't provide an API key\") === 0) {\n                setcookie(\"errcode\", \"no_api_key\");\n            }\n            if (strpos($complete->error->message, \"You exceeded your current quota\") === 0) {\n                setcookie(\"errcode\", \"insufficient_quota\");\n            }\n            if (strpos($complete->error->message, \"That model is currently overloaded\") === 0) {\n                setcookie(\"errcode\", \"model_overloaded\");\n            }\n            $responsedata = $data;\n        } else {\n            echo $data;\n            $responsedata .= $data;\n            flush();\n        }\n        return strlen($data);\n    };\n\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/chat/completions');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, $callback);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);\n    curl_setopt($ch, CURLOPT_MAXREDIRS, 3);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n\n    curl_exec($ch);\n    curl_close($ch);\n\n    return $responsedata;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/your-endpoint\"; // Replace with the actual endpoint\n    $ch = curl_init($url);\n    \n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    \n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    \n    if (curl_errno($ch)) {\n        $error_msg = curl_error($ch);\n        setcookie(\"error\", $error_msg, time() + 3600, \"/\");\n        $responsedata = json_encode([\"error\" => $error_msg]);\n    } elseif ($httpCode >= 400) {\n        setcookie(\"error\", \"HTTP Error: \" . $httpCode, time() + 3600, \"/\");\n        $responsedata = json_encode([\"error\" => \"HTTP Error: \" . $httpCode]);\n    } else {\n        $responsedata = $response;\n    }\n    \n    curl_close($ch);\n    return $responsedata;\n}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a PHP function that performs an HTTP GET request using cURL with secure SSL verification and returns the response.\n\nFunction Description: The function should initialize a cURL session, configure it with appropriate security settings (including SSL verification with a custom CA certificate), set a timeout, execute the request, handle errors, and return the response. The function should properly clean up resources after execution.\n\nInput: \n- $url (string): The URL to which the GET request will be sent\n\nOutput: \n- Returns the response from the server as a string if successful\n- Returns false if the request fails (though error handling should be implemented separately)",
    "Canonical_solution": "function curlGet($url)\n{\n    $curl = curl_init();\n\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($curl, CURLOPT_HEADER, 0);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($curl, CURLOPT_CAINFO, 'usr/plugins/TeStore/data/cacert.pem');\n    curl_setopt($curl, CURLOPT_TIMEOUT, 30);\n    curl_setopt($curl, CURLOPT_URL, $url);\n\n    $result = curl_exec($curl);\n    curl_close($curl);\n\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function secureHttpGet($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_CAINFO, 'path/to/your/ca_certificate.crt');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        // Handle error accordingly, for example:\n        // error_log('cURL error: ' . curl_error($ch));\n        curl_close($ch);\n        return false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a PHP function that uses cURL to make an HTTP request to a URL shortening service and return the shortened URL.\n\nFunction Description: The function `curl_sg` initializes a cURL session, configures it with appropriate options (including timeout settings, headers, and SSL verification), makes a GET request to the Sogou URL shortening service, and returns the response. The function handles the entire cURL lifecycle from initialization to cleanup.\n\nInput: \n- `$url` (string): The original URL to be shortened.\n\nOutput: \n- (string): The shortened URL returned by the Sogou service, or false if the request fails.",
    "Canonical_solution": "function curl_sg($url)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, \"https://sa.sogou.com/gettiny?url=\".$url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function curl_sg($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, \"http://sogou.com/urlapi?url=\" . urlencode($url));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    \n    if ($response === false) {\n        return false;\n    }\n    \n    $data = json_decode($response, true);\n    return isset($data['short_url']) ? $data['short_url'] : false;\n}"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests to the Heroku API using cURL, with support for various HTTP methods, custom headers, and error handling.\n\nFunction Description: The function `HerokuAPI` is designed to interact with the Heroku API by sending HTTP requests. It supports multiple HTTP methods (including PATCH and POST for sending data), sets appropriate headers including authorization, and handles the response. The function includes timeout settings and SSL verification options for secure communication.\n\nInput:\n- $method: [string] - The HTTP method to use (e.g., 'GET', 'POST', 'PATCH', etc.)\n- $url: [string] - The URL to which the request will be sent\n- $data: [string] - Optional. The payload to send with the request (typically for POST/PATCH methods)\n- $apikey: [string] - The Heroku API key used for authorization\n\nOutput:\n- Returns an associative array with two keys:\n  - 'body': [string] - The response body from the API\n  - 'stat': [int] - The HTTP status code of the response",
    "Canonical_solution": "function HerokuAPI($method, $url, $data = '', $apikey)\n{\n    if ($method=='PATCH'||$method=='POST') {\n        $headers['Content-Type'] = 'application/json';\n    } \n    $headers['Authorization'] = 'Bearer ' . $apikey;\n    $headers['Accept'] = 'application/vnd.heroku+json; version=3';\n    $sendHeaders = array();\n    foreach ($headers as $headerName => $headerVal) {\n        $sendHeaders[] = $headerName . ': ' . $headerVal;\n    }\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST,$method);\n    curl_setopt($ch, CURLOPT_POSTFIELDS,$data);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $sendHeaders);\n    $response['body'] = curl_exec($ch);\n    $response['stat'] = curl_getinfo($ch,CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    return $response;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Authorization: Bearer ' . $apikey,\n        'Content-Type: application/json'\n    ]);\n    if ($data) {\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n    }\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    \n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    \n    return [\n        'body' => $response,\n        'stat' => $httpCode\n    ];\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Implement an OAuth2 client class in PHP that handles HTTP requests for OAuth2 authentication flows, including obtaining authorization codes and access tokens.\n\nClass Description: This abstract class provides a base implementation for OAuth2 client functionality. It includes methods for making HTTP requests and stores OAuth2 configuration parameters. Concrete implementations should extend this class for specific OAuth2 providers.\n\nAttributes:\n- version: [string] - OAuth version being used (default: '2.0')\n- appKey: [string] - Application/client ID for OAuth2\n- appSecret: [string] - Application/client secret for OAuth2\n- responseType: [string] - OAuth2 response type (default: 'code')\n- grantType: [string] - OAuth2 grant type (default: 'authorization_code')\n- callback: [string] - Callback URL for OAuth2 flow\n- authorize: [string] - Authorization endpoint URL\n- getRequestCodeURL: [string] - URL to request authorization code\n- getAccessTokenURL: [string] - URL to exchange code for access token\n- apiBase: [string] - Base URL for API endpoints\n- token: [mixed] - Stores the access token (null by default)\n\nMethods:\n- http: [http](string $url, array $params, string $method = 'GET', array $header = [], bool $multi = false) -> string - Makes an HTTP request using cURL with the specified parameters. Handles both GET and POST methods, with support for multipart POST requests. Returns the response body or throws an exception on error.",
    "Canonical_solution": "namespace cmf\\lib;\n\nabstract class Oauth2\n{\n    protected $version = '2.0';\n    protected $appKey = '';\n    protected $appSecret = '';\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback = '';\n    protected $authorize = '';\n    protected $getRequestCodeURL = '';\n    protected $getAccessTokenURL = '';\n    protected $apiBase = '';\n    protected $token = null;\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false)\n    {\n        $opts = [\n            CURLOPT_TIMEOUT        => 30,\n            CURLOPT_RETURNTRANSFER => 1,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HTTPHEADER     => $header\n        ];\n\n        switch (strtoupper($method)) {\n            case 'GET':\n                $opts[CURLOPT_URL] = $url . '?' . http_build_query($params);\n                break;\n            case 'POST':\n                $params                   = $multi ? $params : http_build_query($params);\n                $opts[CURLOPT_URL]        = $url;\n                $opts[CURLOPT_POST]       = 1;\n                $opts[CURLOPT_POSTFIELDS] = $params;\n                break;\n            default:\n                throw new \\Exception('\u4e0d\u652f\u6301\u7684\u8bf7\u6c42\u65b9\u5f0f\uff01');\n        }\n\n        $ch = curl_init();\n        curl_setopt_array($ch, $opts);\n        $data  = curl_exec($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($error) throw new \\Exception('\u8bf7\u6c42\u53d1\u751f\u9519\u8bef\uff1a' . $error);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($config) {\n        $this->appKey = $config['appKey'];\n        $this->appSecret = $config['appSecret'];\n        $this->callback = $config['callback'];\n        $this->authorize = $config['authorize'];\n        $this->getRequestCodeURL = $config['getRequestCodeURL'];\n        $this->getAccessTokenURL = $config['getAccessTokenURL'];\n        $this->apiBase = $config['apiBase'];\n    }\n\n    protected function http($url, $params = [], $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'GET' && !empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        }\n        if (!empty($header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('HTTP request failed: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using Guzzle library, with error handling and testing capabilities.\n\nClass Description: The `SupportedApps` class is an abstract base class that provides HTTP client functionality using Guzzle. It handles HTTP requests with configurable timeouts and methods, includes error handling for connection and server exceptions, and provides a testing method to verify API connectivity.\n\nAttributes:\n- jar: [bool] - Flag indicating whether to use cookies (not implemented in current code)\n- method: [string] - Default HTTP method to use for requests (default: 'GET')\n- error: [string|null] - Stores the last error message encountered during request execution\n\nMethods:\n- execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) -> [ResponseInterface|null] - Executes an HTTP request to the specified URL with optional attributes, overriding variables and method. Returns the response or null on failure.\n- appTest($url, array $attrs = []) -> [object] - Tests the connection to a specified URL, returning an object with status code, status message, and response body. Handles various HTTP status codes with appropriate messages.",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps\n{\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error;\n\n    public function execute(\n        $url,\n        array $attrs = [],\n        $overridevars = null,\n        $overridemethod = null\n    ): ?ResponseInterface {\n        $res = null;\n\n        $vars = ($overridevars === null || $overridevars === false) ?\n         [\n            'http_errors' => false,\n            'timeout' => 15,\n            'connect_timeout' => 15,\n        ] : $overridevars;\n\n        $client = new Client($vars);\n\n        $method = ($overridemethod === null || $overridemethod === false) ? $this->method : $overridemethod;\n\n        try {\n            return $client->request($method, $url, $attrs);\n        } catch (ConnectException $e) {\n            $this->error = 'Connection refused - '.(string) $e->getMessage();\n        } catch (ServerException $e) {\n            $this->error = (string) $e->getResponse()->getBody();\n        }\n        $this->error = 'General error connecting with API';\n\n        return $res;\n    }\n\n    public function appTest($url, array $attrs = []): object\n    {\n        if (empty($this->config->url)) {\n            return (object) [\n                'code' => 404,\n                'status' => 'No URL has been specified',\n                'response' => 'No URL has been specified',\n            ];\n        }\n        $res = $this->execute($url, $attrs);\n        if ($res == null) {\n            return (object) [\n                'code' => null,\n                'status' => $this->error,\n                'response' => 'Connection failed',\n            ];\n        }\n        switch ($res->getStatusCode()) {\n            case 200:\n                $status = 'Successfully communicated with the API';\n                break;\n            case 401:\n                $status = 'Failed: Invalid credentials';\n                break;\n            case 404:\n                $status = 'Failed: Please make sure your URL is correct and that there is a trailing slash';\n                break;\n            default:\n                $status = 'Something went wrong... Code: '.$res->getStatusCode();\n                break;\n        }\n\n        return (object) [\n            'code' => $res->getStatusCode(),\n            'status' => $status,\n            'response' => $res->getBody(),\n        ];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "right_result": "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n    protected $client;\n\n    public function __construct() {\n        $this->client = new Client(['cookies' => $this->jar]);\n    }\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null): ?ResponseInterface {\n        $method = $overridemethod ?? $this->method;\n        $options = ['form_params' => $attrs];\n\n        try {\n            $response = $this->client->request($method, $url, $options);\n            return $response;\n        } catch (ConnectException $e) {\n            $this->error = 'Connection error: ' . $e->getMessage();\n        } catch (RequestException $e) {\n            $this->error = 'Request error: ' . $e->getMessage();\n        } catch (\\Exception $e) {\n            $this->error = 'General error: ' . $e->getMessage();\n        }\n        return null;\n    }\n\n    public function appTest($url, array $attrs = []): object {\n        $response = $this->execute($url, $attrs);\n        $result = new \\stdClass();\n\n        if ($response) {\n            $result->statusCode = $response->getStatusCode();\n            $result->statusMessage = $response->getReasonPhrase();\n            $result->body = (string) $response->getBody();\n        } else {\n            $result->statusCode = 500;\n            $result->statusMessage = 'Error';\n            $result->body = $this->error ?? 'Unknown error';\n        }\n\n        return $result;\n    }\n}"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a PHP class for interacting with Alipay's API to send red packets (digital cash gifts) with proper authentication and request handling.\n\nClass Description: The AlipayService class encapsulates functionality for sending red packets through Alipay's payment platform. It handles request configuration, signature generation, and API communication while maintaining security through proper certificate and key management.\n\nAttributes:\n- appId: [string] - Alipay application ID\n- alipayRootCertSn: [string] - Alipay root certificate serial number  \n- appCertSn: [string] - Application certificate serial number\n- notifyUrl: [string] - Callback URL for payment notifications\n- charset: [string] - Character encoding (default: utf-8)\n- rsaPrivateKey: [string] - RSA private key for signing requests\n- totalFee: [float] - Payment amount\n- outTradeNo: [string] - Merchant transaction number\n- orderName: [string] - Order description\n- userid: [string] - Recipient's Alipay user ID\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid(string $appid) -> [void] - Sets the Alipay application ID\n- setAlipayRootCertSn(string $alipayRootCertSn) -> [void] - Sets root certificate serial number\n- setAppCertSn(string $appCertSn) -> [void] - Sets application certificate serial number  \n- setNotifyUrl(string $notifyUrl) -> [void] - Sets notification callback URL\n- setRsaPrivateKey(string $saPrivateKey) -> [void] - Sets RSA private key\n- setTotalFee(float $payAmount) -> [void] - Sets payment amount\n- setOutTradeNo(string $outTradeNo) -> [void] - Sets merchant transaction number\n- setOrderName(string $orderName) -> [void] - Sets order description\n- setUserId(string $userid) -> [void] - Sets recipient's Alipay user ID\n- sendRedPacket() -> [array] - Sends red packet request and returns response\n- generateSign(array $params, string $signType) -> [string] - Generates request signature\n- sign(string $data, string $signType) -> [string] - Creates cryptographic signature\n- checkEmpty(mixed $value) -> [bool] - Checks if value is empty\n- getSignContent(array $params) -> [string] - Prepares string for signing\n- characet(string $data, string $targetCharset) -> [string] - Handles character encoding\n- curlPost(string $url, mixed $postData, array $options) -> [string] - Executes cURL request to API",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $alipayRootCertSn;\n    protected $appCertSn;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n    protected $userid;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn)\n    {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn)\n    {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl)\n    {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName)\n    {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid)\n    {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket()\n    {\n        $requestConfigs = array(\n            'out_biz_no'=>$this->outTradeNo,\n            'trans_amount'=>$this->totalFee,\n            'product_code'=>'STD_RED_PACKET',\n            'biz_scene'=>'DIRECT_TRANSFER',\n            'remark'=>$this->orderName,\n            'order_title'=>$this->orderName,\n            'payee_info'=>array(\n                'identity'=>$this->userid,\n                'identity_type'=>'ALIPAY_USER_ID',\n            ),\n            'business_params'=>array(\n                'sub_biz_scene'=>'REDPACKET',\n            )\n        );\n        $commonConfigs = array(\n            'alipay_root_cert_sn' => $this->alipayRootCertSn,\n            'app_cert_sn' => $this->appCertSn,\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.uni.transfer',\n            'format' => 'JSON',\n            'charset'=>'utf-8',\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('\u60a8\u4f7f\u7528\u7684\u79c1\u94a5\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5RSA\u79c1\u94a5\u914d\u7f6e');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid(string $appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn(string $alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn(string $appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl(string $notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey(string $rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee(float $payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo(string $outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName(string $orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId(string $userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redpacket.send',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'total_fee' => $this->totalFee,\n            'out_trade_no' => $this->outTradeNo,\n            'order_name' => $this->orderName,\n            'userid' => $this->userid,\n        ];\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', $params, []);\n    }\n\n    public function generateSign(array $params, string $signType) {\n        $content = $this->getSignContent($params);\n        return $this->sign($content, $signType);\n    }\n\n    public function sign(string $data, string $signType) {\n        openssl_sign($data, $signature, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        return base64_encode($signature);\n    }\n\n    public function checkEmpty(mixed $value) {\n        return empty($value);\n    }\n\n    public function getSignContent(array $params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $key => $value) {\n            if (!$this->checkEmpty($value)) {\n                $stringToBeSigned .= $key . '=' . $this->characet($value, $this->charset) . '&';\n            }\n        }\n        return rtrim($stringToBeSigned, '&');\n    }\n\n    public function characet(string $data, string $targetCharset) {\n        return mb_convert_encoding($data, $targetCharset, 'auto');\n    }\n\n    public function curlPost(string $url, mixed $postData, array $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge(['Content-Type: application/x-www-form-urlencoded'], $options));\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL, supporting various HTTP methods, headers, cookies, proxies, and file uploads.\n\nClass Description: The `requests` class is a static HTTP client implementation that handles HTTP requests through cURL. It supports GET, POST, and other HTTP methods, manages cookies, headers, user agents, proxies, and file uploads. The class maintains connection settings and request history.\n\nAttributes:\n\nVERSION: [string] - The version number of the requests class\nch: [resource|null] - The cURL handle resource\ntimeout: [int|array] - Timeout settings for the connection\nencoding: [string|null] - Request encoding\noutput_encoding: [string|null] - Response encoding\ncookies: [array] - Global cookies to be sent with requests\nrawheaders: [array] - Request headers\ndomain_cookies: [array] - Domain-specific cookies\nheaders: [array] - Response headers\nuseragents: [array] - List of user agent strings\nclient_ips: [array] - List of client IP addresses for spoofing\nproxies: [array] - List of proxy servers\nraw: [string] - Raw response including headers\nhead: [string] - Response headers\ncontent: [string] - Response body\ntext: [string] - Processed response text\ninfo: [array] - cURL request information\nhistory: [int] - HTTP redirect history status code\nstatus_code: [int] - HTTP response status code\nerror: [string] - Error message if request fails\n\nMethods:\n\ninit(): [void] -> [resource] - Initializes the cURL session with default settings\nrequest($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL) -> [string|bool] - Executes an HTTP request to the specified URL with given parameters\n_is_url($url) -> [bool] - Validates if the input string is a valid URL\nget_cookies($domain = '') -> [array] - Retrieves cookies for a specific domain\nget_response_headers($header) -> [array] - Parses response headers\nget_response_cookies($header, $domain) -> [void] - Extracts cookies from response headers\nsplit_header_body() -> [array] - Splits response into headers and body\nget_history($header) -> [int] - Gets redirect history from response headers\nget_mimetype($filepath) -> [string] - Gets MIME type of a file",
    "Canonical_solution": "namespace phpspider\\core;\n\nclass requests\n{\n    const VERSION = '2.0.1';\n    protected static $ch = null;\n\n    public static $timeout = 15;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = array();\n    public static $rawheaders = array();\n    public static $domain_cookies = array();\n    public static $headers = array();\n    public static $useragents = array(\"requests/2.0.0\");\n    public static $client_ips = array();\n    public static $proxies = array();\n    public static $raw = \"\";\n    public static $head = \"\";\n    public static $content = \"\";\n    public static $text = \"\";\n    public static $info = array();\n    public static $history = 302;\n    public static $status_code = 0;\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!is_resource(self::$ch))\n        {\n            self::$ch = curl_init();\n            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt(self::$ch, CURLOPT_HEADER, false);\n            curl_setopt(self::$ch, CURLOPT_USERAGENT, \"phpspider-requests/\".self::VERSION);\n            if (is_array(self::$timeout))\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, self::$timeout[0]);\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout[1]);\n            }\n            else\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, ceil(self::$timeout / 2));\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n            }\n            curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt(self::$ch, CURLOPT_NOSIGNAL, true);\n        }\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL)\n    {\n        $method = strtoupper($method);\n        if(!self::_is_url($url))\n        {\n            self::$error = \"You have requested URL ({$url}) is not a valid HTTP address\";\n            return false;\n        }\n\n        if ($method == 'GET' && !empty($fields))\n        {\n            $url = $url.(strpos($url, '?') === false ? '?' : '&').http_build_query($fields);\n        }\n\n        $parse_url = parse_url($url);\n        if (empty($parse_url) || empty($parse_url['host']) || !in_array($parse_url['scheme'], array('http', 'https')))\n        {\n            self::$error = \"No connection adapters were found for '{$url}'\";\n            return false;\n        }\n\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n\n        if ($method != 'GET')\n        {\n            if ($method == 'POST')\n            {\n                $tmpheaders = array_change_key_case(self::$rawheaders, CASE_LOWER);\n                if (isset($tmpheaders['content-type']) && $tmpheaders['content-type'] == 'application/json')\n                {\n                    curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n                }\n                else\n                {\n                    curl_setopt(self::$ch, CURLOPT_POST, true);\n                }\n\n                $file_fields = array();\n                if (!empty($files))\n                {\n                    foreach ($files as $postname => $file)\n                    {\n                        $filepath = realpath($file);\n                        if (!file_exists($filepath))\n                        {\n                            continue;\n                        }\n                        $filename = basename($filepath);\n                        $type = self::get_mimetype($filepath);\n                        $file_fields[$postname] = curl_file_create($filepath, $type, $filename);\n                    }\n                }\n\n                if (empty($file_fields))\n                {\n                    if (is_array($fields))\n                    {\n                        $fields = http_build_query($fields);\n                    }\n                }\n                else\n                {\n                    if (is_array($fields) && !empty($fields))\n                    {\n                        $fields = array_merge($fields, $file_fields);\n                    }\n                    else\n                    {\n                        $fields = $file_fields;\n                    }\n                }\n                curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n            }\n            else\n            {\n                self::$rawheaders['X-HTTP-Method-Override'] = $method;\n                curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n            }\n        }\n\n        $cookies = self::get_cookies();\n        $domain_cookies = self::get_cookies($parse_url['host']);\n        $cookies = array_merge($cookies, $domain_cookies);\n        if (!empty($cookies))\n        {\n            foreach ($cookies as $key=>$value)\n            {\n                $cookie_arr[] = $key.'='.$value;\n            }\n            $cookies = implode('; ', $cookie_arr);\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);\n        }\n\n        if (!empty(self::$useragents))\n        {\n            $key = rand(0, count(self::$useragents) - 1);\n            self::$rawheaders['User-Agent'] = self::$useragents[$key];\n        }\n\n        if (!empty(self::$client_ips))\n        {\n            $key = rand(0, count(self::$client_ips) - 1);\n            self::$rawheaders['CLIENT-IP'] = self::$client_ips[$key];\n            self::$rawheaders['X-FORWARDED-FOR'] = self::$client_ips[$key];\n        }\n\n        if (self::$rawheaders)\n        {\n            $http_headers = array();\n            foreach (self::$rawheaders as $k=>$v)\n            {\n                $http_headers[] = $k.': '.$v;\n            }\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $http_headers);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_ENCODING, 'gzip');\n\n        if ($parse_url['scheme'] == 'https')\n        {\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if (self::$proxies)\n        {\n            $key = rand(0, count(self::$proxies) - 1);\n            $proxy = self::$proxies[$key];\n            curl_setopt(self::$ch, CURLOPT_PROXY, $proxy);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        if ($allow_redirects)\n        {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (self::$raw === false)\n        {\n            self::$error = 'Curl error: ' . curl_error(self::$ch);\n        }\n\n        curl_close(self::$ch);\n\n        list($header, $text) = self::split_header_body();\n        self::$history = self::get_history($header);\n        self::$headers = self::get_response_headers($header);\n        self::get_response_cookies($header, $parse_url['host']);\n        return $text;\n    }\n\n    private static function _is_url($url)\n    {\n        $pattern = \"/\\b(([\\w-]+:\\/\\/?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/)))/\";\n        return preg_match($pattern, $url) ? true : false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class requests {\n    const VERSION = '1.0.0';\n    private static $ch = null;\n    private static $timeout = 30;\n    private static $encoding = null;\n    private static $output_encoding = null;\n    private static $cookies = [];\n    private static $rawheaders = [];\n    private static $domain_cookies = [];\n    private static $headers = [];\n    private static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    private static $client_ips = [];\n    private static $proxies = [];\n    private static $raw = '';\n    private static $head = '';\n    private static $content = '';\n    private static $text = '';\n    private static $info = [];\n    private static $history = 0;\n    private static $status_code = 0;\n    private static $error = '';\n\n    private static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n        if (!empty($fields)) {\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty($files)) {\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $files);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if ($allow_redirects) {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n        if ($cert) {\n            curl_setopt(self::$ch, CURLOPT_CAINFO, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$head = substr(self::$raw, 0, curl_getinfo(self::$ch, CURLINFO_HEADER_SIZE));\n        self::$content = substr(self::$raw, curl_getinfo(self::$ch, CURLINFO_HEADER_SIZE));\n        self::$text = self::$content;\n        self::$error = curl_error(self::$ch);\n        curl_close(self::$ch);\n        return self::$raw;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return !empty($domain) ? (self::$domain_cookies[$domain] ?? []) : self::$cookies;\n    }\n\n    private static function get_response_headers($header) {\n        $headers = explode(\"\\r\\n\", $header);\n        $result = [];\n        foreach ($headers as $h) {\n            if (strpos($h, ':') !== false) {\n                list($key, $value) = explode(': ', $h, 2);\n                $result[$key] = $value;\n            }\n        }\n        return $result;\n    }\n\n    private static function get_response_cookies($header, $domain) {\n        preg_match_all('/^Set-Cookie:\\s*([^;]*)/mi', $header, $matches);\n        foreach ($matches[1] as $cookie) {\n            list($name, $value) = explode('=', $cookie, 2);\n            self::$domain_cookies[$domain][$name] = $value;\n        }\n    }\n\n    private static function split_header_body() {\n        return explode(\"\\r\\n\\r\\n\", self::$raw, 2);\n    }\n\n    private static function get_history($header) {\n        preg_match('/HTTP\\/\\d\\.\\d\\s(\\d{3})/', $header, $matches);\n        return isset($matches[1]) ? (int)$matches[1] : 0;\n    }\n\n    private static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a PHP class that implements HTTP scraping functionality using cURL to make requests to a specified URL with query parameters and handle the response.\n\nClass Description: The HttpScraper class extends a BaseScraper and provides functionality to make HTTP GET requests using cURL. It includes timeout configuration and basic error handling for HTTP status codes.\n\nAttributes:\ntimeout: [int] - The maximum time in seconds the cURL request is allowed to take.\n\nMethods:\nrequest: [Name]([string $url, array $query]) -> [string|null] - Makes an HTTP GET request to the specified URL with the given query parameters. Returns the response body as a string if the request is successful (HTTP 200), or null otherwise.",
    "Canonical_solution": "use Rych\\Bencode\\Bencode;\nuse Rych\\Bencode\\Exception\\RuntimeException;\n\nclass HttpScraper extends BaseScraper\n{\n    protected $timeout = 30;\n\n    public function request($url, array $query)\n    {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $url . '?' . join('&', $query),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => $this->timeout,\n        ]);\n\n        $result = curl_exec($ch);\n\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($code != 200) {\n            $result = null;\n        }\n\n        curl_close($ch);\n\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class BaseScraper {\n    // Base functionality can be defined here if needed\n}\n\nclass HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct(int $timeout = 30) {\n        $this->timeout = $timeout;\n    }\n\n    public function request(string $url, array $query): ?string {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        return $httpCode === 200 ? $response : null;\n    }\n}"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Implement a class that handles file downloads using cURL in PHP, with support for temporary file management and cleanup.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using cURL, storing them in a temporary directory, and managing the downloaded files including cleanup operations.\n\nAttributes:\n- tempDir: string - The directory path where temporary files will be stored. Defaults to system temp directory if not specified.\n- outputFile: string - The path to the downloaded file.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets the temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL using cURL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file.\n- cleanup() -> void - Removes the downloaded file if it exists.\n\nInput:\n- For setTempDir(): A string representing the directory path.\n- For download(): A string representing the URL to download from.\n\nOutput:\n- For download(): A boolean indicating success (true) or failure (false).\n- For getFilename(): A string representing the path to the downloaded file.\n- setTempDir() and cleanup() have no return value.",
    "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Shell;\n\nclass CurlDownloader implements Downloader\n{\n    private $tempDir = null;\n    private $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if (\\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir(string $tempDir): void {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir, 'download_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $result !== false;\n    }\n\n    public function getFilename(): string {\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a PHP HTTP client class that handles various types of HTTP requests (GET, POST, PUT, DELETE, multipart POST) using cURL, with proper error handling and response processing.\n\nClass Description: The Client class provides static methods to send HTTP requests and process responses. It handles request construction, cURL session management, response parsing, and error handling.\n\nAttributes: (This class has no instance attributes as all methods are static)\n\nMethods:\n\n1. get(string $url, array $headers = array()) -> Response\n   - Sends a GET request to the specified URL with optional headers\n   - Returns a Response object containing status code, headers, body, and timing information\n\n2. delete(string $url, array $headers = array()) -> Response\n   - Sends a DELETE request to the specified URL with optional headers\n   - Returns a Response object\n\n3. post(string $url, mixed $body, array $headers = array()) -> Response\n   - Sends a POST request with body content to the specified URL\n   - Returns a Response object\n\n4. put(string $url, mixed $body, array $headers = array()) -> Response\n   - Sends a PUT request with body content to the specified URL\n   - Returns a Response object\n\n5. multipartPost(\n     string $url,\n     array $fields,\n     string $name,\n     string $fileName,\n     string $fileBody,\n     string $mimeType = null,\n     array $headers = array()\n   ) -> Response\n   - Sends a multipart/form-data POST request with file upload\n   - Returns a Response object\n\n6. sendRequest(Request $request) -> Response\n   - Internal method that executes the cURL request\n   - Handles cURL initialization, option setting, execution, and cleanup\n   - Returns a Response object with request results\n\n7. userAgent() -> string\n   - Generates a User-Agent string with SDK, system, and PHP version information\n   - Returns the formatted User-Agent string\n\n8. parseHeaders(string $raw) -> array\n   - Parses raw HTTP response headers into an associative array\n   - Returns array of headers with normalized keys\n\n9. escapeQuotes(string $str) -> string\n   - Escapes quotes in a string for use in multipart form data\n   - Returns the escaped string\n\n10. ucwordsHyphen(string $str) -> string\n    - Converts hyphenated header names to proper case (e.g., 'content-type' becomes 'Content-Type')\n    - Returns the properly cased string",
    "Canonical_solution": "namespace Qiniu\\Http;\n\nuse Qiniu\\Config;\n\nfinal class Client\n{\n    public static function get($url, array $headers = array())\n    {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, array $headers = array())\n    {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, array $headers = array())\n    {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function PUT($url, $body, array $headers = array())\n    {\n        $request = new Request('PUT', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(\n        $url,\n        $fields,\n        $name,\n        $fileName,\n        $fileBody,\n        $mimeType = null,\n        array $headers = array()\n    ) {\n        $data = array();\n        $mimeBoundary = md5(microtime());\n\n        foreach ($fields as $key => $val) {\n            array_push($data, '--' . $mimeBoundary);\n            array_push($data, \"Content-Disposition: form-data; name=\\\"$key\\\"\");\n            array_push($data, '');\n            array_push($data, $val);\n        }\n\n        array_push($data, '--' . $mimeBoundary);\n        $finalMimeType = empty($mimeType) ? 'application/octet-stream' : $mimeType;\n        $finalFileName = self::escapeQuotes($fileName);\n        array_push($data, \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$finalFileName\\\"\");\n        array_push($data, \"Content-Type: $finalMimeType\");\n        array_push($data, '');\n        array_push($data, $fileBody);\n\n        array_push($data, '--' . $mimeBoundary . '--');\n        array_push($data, '');\n\n        $body = implode(\"\\r\\n\", $data);\n        $contentType = 'multipart/form-data; boundary=' . $mimeBoundary;\n        $headers['Content-Type'] = $contentType;\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function sendRequest($request)\n    {\n        $t1 = microtime(true);\n        $ch = curl_init();\n        $options = array(\n            CURLOPT_USERAGENT => self::userAgent(),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST => $request->method,\n            CURLOPT_URL => $request->url,\n        );\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            $options[CURLOPT_FOLLOWLOCATION] = true;\n        }\n        if (!empty($request->headers)) {\n            $headers = array();\n            foreach ($request->headers as $key => $val) {\n                array_push($headers, \"$key: $val\");\n            }\n            $options[CURLOPT_HTTPHEADER] = $headers;\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));\n        if (!empty($request->body)) {\n            $options[CURLOPT_POSTFIELDS] = $request->body;\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $t2 = microtime(true);\n        $duration = round($t2 - $t1, 3);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $r = new Response(-1, $duration, array(), null, curl_error($ch));\n            curl_close($ch);\n            return $r;\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = self::parseHeaders(substr($result, 0, $header_size));\n        $body = substr($result, $header_size);\n        curl_close($ch);\n        return new Response($code, $duration, $headers, $body, null);\n    }\n\n    private static function userAgent()\n    {\n        $sdkInfo = \"QiniuPHP/\" . Config::SDK_VER;\n        $systemInfo = php_uname(\"s\");\n        $machineInfo = php_uname(\"m\");\n        $envInfo = \"($systemInfo/$machineInfo)\";\n        $phpVer = phpversion();\n        $ua = \"$sdkInfo $envInfo PHP/$phpVer\";\n        return $ua;\n    }\n\n    private static function parseHeaders($raw)\n    {\n        $headers = array();\n        $headerLines = explode(\"\\r\\n\", $raw);\n        foreach ($headerLines as $line) {\n            $headerLine = trim($line);\n            $kv = explode(':', $headerLine);\n            if (count($kv) > 1) {\n                $kv[0] =self::ucwordsHyphen($kv[0]);\n                $headers[$kv[0]] = trim($kv[1]);\n            }\n        }\n        return $headers;\n    }\n\n    private static function escapeQuotes($str)\n    {\n        $find = array(\"\\\\\", \"\\\"\");\n        $replace = array(\"\\\\\\\\\", \"\\\\\\\"\");\n        return str_replace($find, $replace, $str);\n    }\n    \n    private static function ucwordsHyphen($str)\n    {\n        return str_replace('- ', '-', ucwords(str_replace('-', '- ', $str)));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Client {\n    public static function get(string $url, array $headers = array()): Response {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete(string $url, array $headers = array()): Response {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post(string $url, mixed $body, array $headers = array()): Response {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function put(string $url, mixed $body, array $headers = array()): Response {\n        $request = new Request('PUT', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(\n        string $url,\n        array $fields,\n        string $name,\n        string $fileName,\n        string $fileBody,\n        string $mimeType = null,\n        array $headers = array()\n    ): Response {\n        $request = new Request('POST', $url, $headers);\n        $request->setMultipart($fields, $name, $fileName, $fileBody, $mimeType);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request): Response {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n        if ($request->getBody() !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $rawHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT);\n        $headers = self::parseHeaders($rawHeaders);\n        curl_close($ch);\n\n        return new Response($statusCode, $headers, $responseBody);\n    }\n\n    public static function userAgent(): string {\n        return 'MySDK/' . phpversion() . ' (' . php_uname() . ')';\n    }\n\n    public static function parseHeaders(string $raw): array {\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $raw) as $header) {\n            if (strpos($header, ':') !== false) {\n                list($key, $value) = explode(':', $header, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public static function escapeQuotes(string $str): string {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen(string $str): string {\n        return str_replace('-', ' ', ucwords($str));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $headers;\n    private $body;\n\n    public function __construct(string $method, string $url, array $headers, mixed $body = null) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->headers = $headers;\n        $this->body = $body;\n    }\n\n    public function getMethod(): string {\n        return $this->method;\n    }\n\n    public function getUrl(): string {\n        return $this->url;\n    }\n\n    public function getHeaders(): array {\n        return $this->headers;\n    }\n\n    public function getBody(): mixed {\n        return $this->body;\n    }\n\n    public function setMultipart(array $fields, string $name, string $fileName, string $fileBody, string $mimeType = null) {\n        $this->body = array_merge($fields, [\n            $name => new CURLFile($fileBody, $mimeType, $fileName)\n        ]);\n        $this->headers[] = 'Content-Type: multipart/form-data';\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n\n    public function __construct(int $statusCode, array $headers, string $body) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n    }\n\n    public function getStatusCode(): int {\n        return $this->statusCode;\n    }\n\n    public function getHeaders(): array {\n        return $this->headers;\n    }\n\n    public function getBody(): string {\n        return $this->body;\n    }\n}"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a PHP function that uploads a file to a cloud storage service using cURL with PUT method, including authentication and proper headers.\n\nFunction Description: The function `dogcloud_upload` uploads a specified file to DogeCloud's object storage service. It handles authentication using HMAC-SHA1, sets appropriate headers including content type, and manages the file upload via HTTP PUT request. The function checks file existence before proceeding with the upload.\n\nInput:\n- $object (string): The target path/name for the uploaded file in the cloud storage\n- $file (string): Local path to the file to be uploaded\n- $mime (string): MIME type of the file being uploaded\n\nOutput:\n- Returns the API response on successful upload (string)\n- Returns false if the file doesn't exist or if upload fails (boolean)",
    "Canonical_solution": "function dogcloud_upload($object, $file, $mime)\n{\n    if (!@file_exists($file)) {\n        return false;\n    }\n    if (@file_exists($file)) {\n        $accessKey = kratos_option('g_cos_fieldset')['g_cos_accesskey'];\n        $secretKey = kratos_option('g_cos_fieldset')['g_cos_secretkey'];\n        $bucket = kratos_option('g_cos_fieldset')['g_cos_bucketname'];\n\n        $filesize = fileSize($file);\n        $file = fopen($file, 'rb');\n\n        $signStr = \"/oss/upload/put.json?bucket=$bucket&key=$object\" . \"\\n\" . \"\";\n        $sign = hash_hmac('sha1', $signStr, $secretKey);\n        $authorization = \"TOKEN \" . $accessKey . \":\" . $sign;\n\n        $url = \"https://api.dogecloud.com/oss/upload/put.json?bucket=$bucket&key=$object\";\n        $headers = array(\"Host: api.dogecloud.com\", \"Content-Type: $mime\", \"Authorization: $authorization\");\n\n        $curl = curl_init();\n        curl_setopt_array($curl, array(\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_PUT => true,\n            CURLOPT_TIMEOUT => 0,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => \"PUT\",\n            CURLOPT_INFILE => $file,\n            CURLOPT_INFILESIZE => $filesize,\n            CURLOPT_HTTPHEADER => $headers,\n        ));\n        $response = curl_exec($curl);\n        curl_close($curl);\n    } else {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $url = \"https://api.dogecloud.com/upload/\" . urlencode($object);\n    $apiKey = \"your_api_key\";\n    $apiSecret = \"your_api_secret\";\n    $timestamp = time();\n    $signature = base64_encode(hash_hmac('sha1', $timestamp . $apiKey, $apiSecret, true));\n\n    $headers = [\n        \"Content-Type: $mime\",\n        \"Authorization: DogeCloud $apiKey:$signature\",\n        \"x-timestamp: $timestamp\"\n    ];\n\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_PUT, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_INFILE, fopen($file, 'r'));\n    curl_setopt($ch, CURLOPT_INFILESIZE, filesize($file));\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return $httpCode === 200 ? $response : false;\n}"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Implement a file downloader class in PHP that supports both regular and resumable downloads using either fopen or cURL, with proper error handling and support for gzip-compressed files.\n\nClass Description: The Downloader class provides functionality to download files from URLs with support for resuming interrupted downloads. It handles both HTTP and HTTPS protocols, checks for server-side range support, and manages temporary files during download.\n\nAttributes: (This class doesn't have explicit attributes as it uses static methods)\n\nMethods:\n\nMethod1: start(string|array $url, string $saveFile, int $timeout = 10) -> array - Main entry point that initiates the download process. Checks URL validity and determines the best download method (fopen or cURL) based on server capabilities.\n\nMethod2: fileDownloadFopen(string $url, string $fileName, int $headerSize = 0) -> array - Downloads a file using PHP's fopen function. Handles basic downloads when range requests aren't supported.\n\nMethod3: fileDownloadCurl(string $url, string $fileName, bool $supportRange = false, int $existsLength = 0, int $length = 0) -> array - Downloads a file using cURL with support for resumable downloads if the server supports range requests.\n\nMethod4: checkGzip(string $file) -> void - Checks if a file is gzip-compressed and decompresses it if necessary. This is an internal helper method.",
    "Canonical_solution": "class Downloader {\n    static function start($url,$saveFile,$timeout = 10) {\n        $dataFile = $saveFile . '.download.cfg';\n        $saveTemp = $saveFile . '.downloading';\n        \n        if(is_array($url)){\n            $fileHeader = $url;\n        }else{\n            $fileHeader = url_header($url);\n        }\n        $url = $fileHeader['url'];\n        if(!$url){\n            return array('code'=>false,'data'=>'url error!');\n        }\n        if(!$fileHeader['supportRange'] || $fileHeader['length'] == 0 ){\n            @unlink($saveTemp);@unlink($saveFile);\n            $result = self::fileDownloadFopen($url,$saveFile,$fileHeader['length']);\n            if($result['code']) {\n                return $result;\n            }else{\n                @unlink($saveTemp);@unlink($saveFile);\n                $result = self::fileDownloadCurl($url,$saveFile,false,0,$fileHeader['length']);\n                @unlink($saveTemp);@unlink($saveFile);\n                return $result;\n            }\n        }\n\n        $existsLength  = is_file($saveTemp) ? filesize($saveTemp) : 0;\n        $contentLength = intval($fileHeader['length']);\n        if( file_exists($saveTemp) && time() - filemtime($saveTemp) < 3) {\n            return array('code'=>false,'data'=>'downloading');\n        }\n        \n        $existsData = array();\n        if(is_file($dataFile)){\n            $tempData = file_get_contents($dataFile);\n            $existsData = json_decode($tempData, 1);\n        }\n        if( file_exists($saveFile) && $contentLength == filesize($saveFile)){\n            @unlink($saveTemp);\n            @unlink($dataFile);\n            return array('code'=>true,'data'=>'exist');\n        }\n\n        if ($existsData['length'] != $contentLength) {\n            $existsData = array('length' => $contentLength);\n        }\n        if($existsLength > $contentLength){\n            @unlink($saveTemp);\n        }\n        file_put_contents($dataFile, json_encode($existsData));\n        $result = self::fileDownloadCurl($url,$saveFile,true,$existsLength,$contentLength);\n        if($result['code']){\n            @unlink($dataFile);\n        }\n        return $result;\n    }\n\n    static function fileDownloadFopen($url, $fileName,$headerSize=0){\n        @ini_set('user_agent','Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n        $fileTemp = $fileName.'.downloading';\n        @set_time_limit(0);\n        @unlink($fileTemp);\n        if ($fp = @fopen ($url, \"rb\")){\n            if(!$downloadFp = @fopen($fileTemp, \"wb\")){\n                return array('code'=>false,'data'=>'open_downloading_error');\n            }\n            while(!feof($fp)){\n                if(!file_exists($fileTemp)){\n                    fclose($downloadFp);\n                    return array('code'=>false,'data'=>'stoped');\n                }\n                clearstatcache();\n                if( $headerSize>0 && $headerSize==get_filesize(iconv_system($fileTemp))){\n                    break;\n                }\n                fwrite($downloadFp, fread($fp, 1024 * 8 ), 1024 * 8);\n            }\n            fclose($downloadFp);\n            fclose($fp);\n            self::checkGzip($fileTemp);\n            if(!@rename($fileTemp,$fileName)){\n                usleep(round(rand(0,1000)*50));\n                @unlink($fileName);\n                $res = @rename($fileTemp,$fileName);\n                if(!$res){\n                    return array('code'=>false,'data'=>'rename error![open]');\n                }\n            }\n            return array('code'=>true,'data'=>'success');\n        }else{\n            return array('code'=>false,'data'=>'url_open_error');\n        }\n    }\n\n    static function fileDownloadCurl($url, $fileName,$supportRange=false,$existsLength=0,$length=0){\n        $fileTemp = $fileName.'.downloading';\n        @set_time_limit(0);\n        if ($fp = @fopen ($fileTemp, \"a\")){\n            $ch = curl_init($url);\n            if($supportRange){\n                curl_setopt($ch, CURLOPT_RANGE, $existsLength.\"-\");\n            }\n            curl_setopt($ch, CURLOPT_FILE, $fp);\n            curl_setopt($ch, CURLOPT_REFERER,get_url_link($url));\n            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n            curl_setopt($ch, CURLOPT_USERAGENT,'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n            $res = curl_exec($ch);\n            curl_close($ch);\n            fclose($fp);\n\n            $filesize = get_filesize(iconv_system($fileTemp));\n            if($filesize < $length && $length!=0){\n                return array('code'=>false,'data'=>'downloading');\n            }\n            if($res && filesize($fileTemp) != 0){\n                self::checkGzip($fileTemp);\n                if(!@rename($fileTemp,$fileName)){\n                    @unlink($fileName);\n                    $res = @rename($fileTemp,$fileName);\n                    if(!$res){\n                        return array('code'=>false,'data'=>'rename error![curl]');\n                    }\n                }\n                return array('code'=>true,'data'=>'success');\n            }\n            return array('code'=>false,'data'=>'curl exec error!');\n        }else{\n            return array('code'=>false,'data'=>'file create error');\n        }\n    }\n\n    static function checkGzip($file){\n        $char = \"\\x1f\\x8b\";\n        $str  = file_sub_str($file,0,2);\n        if($char != $str) return;\n\n        ob_start();   \n        readgzfile($file);   \n        $out = ob_get_clean();\n        file_put_contents($file,$out);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!filter_var($url, FILTER_VALIDATE_URL)) {\n            return ['success' => false, 'message' => 'Invalid URL'];\n        }\n        $headers = get_headers($url, 1);\n        $supportRange = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes';\n        $fileExists = file_exists($saveFile);\n        $existsLength = $fileExists ? filesize($saveFile) : 0;\n\n        if ($supportRange && $fileExists) {\n            return self::fileDownloadCurl($url, $saveFile, true, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url, $saveFile);\n        }\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $fp = fopen($fileName, 'w');\n        if (!$fp) {\n            return ['success' => false, 'message' => 'Failed to open file for writing'];\n        }\n        $stream = fopen($url, 'r');\n        if (!$stream) {\n            return ['success' => false, 'message' => 'Failed to open URL stream'];\n        }\n        stream_copy_to_stream($stream, $fp);\n        fclose($stream);\n        fclose($fp);\n        return ['success' => true, 'message' => 'Download completed'];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $ch = curl_init($url);\n        $fp = fopen($fileName, 'a');\n        if (!$fp) {\n            return ['success' => false, 'message' => 'Failed to open file for appending'];\n        }\n        if ($supportRange) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            fclose($fp);\n            return ['success' => false, 'message' => 'cURL error: ' . curl_error($ch)];\n        }\n        fclose($fp);\n        curl_close($ch);\n        return ['success' => true, 'message' => 'Download completed'];\n    }\n\n    private static function checkGzip($file) {\n        if (file_exists($file) && mime_content_type($file) === 'application/gzip') {\n            $data = file_get_contents($file);\n            $decompressed = gzdecode($data);\n            file_put_contents($file, $decompressed);\n        }\n    }\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a PHP class that implements a simple HTTP client using cURL for making GET requests, with configurable options and proper error handling.\n\nClass Description: The SimpleHttpClient class provides functionality to send HTTP GET requests using PHP's cURL extension. It includes default cURL options that can be customized, handles errors appropriately, and parses the response into status code, headers, and body.\n\nAttributes:\n\ncurlOptions: [array] - An associative array of default cURL options including settings for headers, redirects, timeouts, and response handling.\n\nMethods:\n\nhttpGet: [Name]($url, $options) -> [array] - Sends an HTTP GET request to the specified URL with optional configuration. Returns an associative array containing the response status code, headers, and body.\n- Parameters:\n  - $url: [string] - The target URL for the GET request\n  - $options: [array] - Optional configuration array (currently only supports 'timeout' override)\n- Return: [array] - Associative array with keys: 'statusCode' (int), 'headers' (array), and 'body' (string)\n- Throws: RuntimeException when cURL encounters an error",
    "Canonical_solution": "namespace Hhxsv5\\LaravelS\\Components\\HttpClient;\n\nuse Swoole\\Coroutine\\Http\\Client as CoroutineClient;\n\nclass SimpleHttpClient\n{\n    protected $curlOptions = [\n        CURLOPT_HEADER         => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_MAXREDIRS      => 3,\n        CURLOPT_TIMEOUT        => 5,\n        CURLOPT_CONNECTTIMEOUT => 3,\n    ];\n\n    public function httpGet($url, array $options)\n    {\n        $handle = curl_init();\n        $finalOptions = [\n                CURLOPT_URL     => $url,\n                CURLOPT_HTTPGET => true,\n            ] + $this->curlOptions;\n        if (isset($options['timeout'])) {\n            $finalOptions[CURLOPT_TIMEOUT] = $options['timeout'];\n        }\n        curl_setopt_array($handle, $finalOptions);\n        $responseStr = curl_exec($handle);\n        $errno = curl_errno($handle);\n        $errmsg = curl_error($handle);\n        if ($errno !== 0 || $errmsg !== '') {\n            curl_close($handle);\n            $msg = sprintf('Failed to send Http request(%s), errcode=%d, errmsg=%s', $url, $errno, $errmsg);\n            throw new \\RuntimeException($msg, $errno);\n        }\n\n        $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);\n        curl_close($handle);\n\n        $header = substr($responseStr, 0, $headerSize);\n        $body = substr($responseStr, $headerSize);\n        $lines = explode(\"\\n\", $header);\n        array_shift($lines);\n\n        $headers = [];\n        foreach ($lines as $part) {\n            $middle = explode(':', $part);\n            $key = trim($middle[0]);\n            if ($key === '') {\n                continue;\n            }\n            if (isset($headers[$key])) {\n                $headers[$key] = (array)$headers[$key];\n                $headers[$key][] = isset($middle[1]) ? trim($middle[1]) : '';\n            } else {\n                $headers[$key] = isset($middle[1]) ? trim($middle[1]) : '';\n            }\n        }\n        return ['statusCode' => $statusCode, 'headers' => $headers, 'body' => $body];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json']\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $curl = curl_init($url);\n        \n        if (isset($options['timeout'])) {\n            $this->curlOptions[CURLOPT_TIMEOUT] = $options['timeout'];\n        }\n\n        curl_setopt_array($curl, $this->curlOptions);\n        \n        $response = curl_exec($curl);\n        $statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        $headers = [];\n        \n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($curl));\n        }\n\n        $headerSize = curl_getinfo($curl, CURLINFO_HEADER_SIZE);\n        $headerString = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        \n        foreach (explode(\"\\r\\n\", $headerString) as $header) {\n            if (strpos($header, ':') !== false) {\n                list($key, $value) = explode(': ', $header, 2);\n                $headers[$key] = $value;\n            }\n        }\n\n        curl_close($curl);\n        \n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body\n        ];\n    }\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Implement a class for interacting with Baidu Cloud Storage (BCS) using HTTP requests through cURL in PHP, handling file uploads, downloads, and other operations with proper error handling and response parsing.\n\nClass Description: The Bcs class provides an interface to interact with Baidu Cloud Storage (BCS) service. It handles authentication, HTTP requests, and response processing for various operations on cloud storage.\n\nAttributes:\n- rootPath: [string] - The root path for storage operations\n- error: [string] - Stores the last error message encountered\n- config: [array] - Configuration array containing AccessKey, SecretKey, bucket, rename, and timeout settings\n- bcs: [BaiduBCS|null] - Instance of the BaiduBCS client\n\nMethods:\n- __construct([array $config]) -> [void] - Initializes the BCS client with configuration including AccessKey, SecretKey, and other settings\n- request([string $path], [string $method], [array|null $headers], [mixed $body]) -> [mixed] - Makes an HTTP request to BCS service and processes the response\n- response([string $text]) -> [array] - Parses the JSON response from BCS into an array\n- error([string $header]) -> [void] - Processes error responses from BCS and sets the error message\n\nThe request method specifically handles:\n1. Initializing cURL session\n2. Setting request headers and body\n3. Configuring request method (GET, POST, PUT, HEAD)\n4. Executing the request\n5. Processing response and errors\n6. Cleaning up resources",
    "Canonical_solution": "use Think\\Upload\\Driver\\Bcs\\BaiduBCS;\n\nclass Bcs\n{\n    private $rootPath;\n    const DEFAULT_URL = 'bcs.duapp.com';\n    private $error = '';\n    public $config = array(\n        'AccessKey'=> '',\n        'SecretKey'=> '',\n        'bucket'   => '',\n        'rename'   => false,\n        'timeout'  => 3600,\n    );\n    public $bcs = null;\n\n    public function __construct($config)\n    {\n        $this->config = array_merge($this->config, $config);\n        $bcsClass = dirname(__FILE__). \"/Bcs/bcs.class.php\";\n        if(is_file($bcsClass))\n            require_once($bcsClass);\n        $this->bcs = new BaiduBCS($this->config['AccessKey'], $this->config['SecretKey'], self::DEFAULT_URL);\n    }\n\n    private function request($path, $method, $headers = null, $body = null)\n    {\n        $ch = curl_init($path);\n        $_headers = array('Expect:');\n        if (!is_null($headers) && is_array($headers)){\n            foreach($headers as $k => $v) {\n                array_push($_headers, \"{$k}: {$v}\");\n            }\n        }\n\n        $length = 0;\n        $date = gmdate('D, d M Y H:i:s \\G\\M\\T');\n        if (!is_null($body)) {\n            if(is_resource($body)){\n                fseek($body, 0, SEEK_END);\n                $length = ftell($body);\n                fseek($body, 0);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_INFILE, $body);\n                curl_setopt($ch, CURLOPT_INFILESIZE, $length);\n            } else {\n                $length = @strlen($body);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } else {\n            array_push($_headers, \"Content-Length: {$length}\");\n        }\n\n        array_push($_headers, \"Date: {$date}\");\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $_headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout']);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($method == 'PUT' || $method == 'POST') {\n            curl_setopt($ch, CURLOPT_POST, 1);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, 0);\n        }\n\n        if ($method == 'HEAD') {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        }\n\n        $response = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($status == 200) {\n            if ($method == 'GET') {\n                return $body;\n            } else {\n                $data = $this->response($header);\n                return count($data) > 0 ? $data : true;\n            }\n        } else {\n            $this->error($header);\n            return false;\n        }\n    }\n\n    private function response($text)\n    {\n        $items = json_decode($text, true);\n        return $items;\n    }\n\n    private function error($header)\n    {\n        list($status, $stash) = explode(\"\\r\\n\", $header, 2);\n        list($v, $code, $message) = explode(\" \", $status, 3);\n        $message = is_null($message) ? 'File Not Found' : \"[{$status}]:{$message}\";\n        $this->error = $message;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey']);\n        $this->rootPath = isset($config['rootPath']) ? $config['rootPath'] : '';\n    }\n\n    private function request(string $path, string $method, array $headers = null, $body = null) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->bcs->getBaseUrl() . $this->rootPath . $path);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            curl_close($ch);\n            return null;\n        }\n        curl_close($ch);\n        return $this->response($response);\n    }\n\n    private function response(string $text) {\n        $data = json_decode($text, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            $this->error = 'Invalid JSON response';\n            return null;\n        }\n        return $data;\n    }\n\n    private function error(string $header) {\n        $this->error = 'Error: ' . $header;\n    }\n\n    public function upload($filePath) {\n        $headers = [\n            'Content-Type: application/octet-stream',\n            'Content-Length: ' . filesize($filePath)\n        ];\n        return $this->request('/upload/' . basename($filePath), 'PUT', $headers, fopen($filePath, 'r'));\n    }\n\n    public function download($fileName) {\n        return $this->request('/download/' . $fileName, 'GET');\n    }\n\n    public function getError() {\n        return $this->error;\n    }\n}"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a PHP class that handles interactions with the Alipay API, specifically for processing settlements and generating required signatures for secure communication.\n\nClass Description: The AlipayService class provides functionality to interact with Alipay's payment gateway, focusing on settlement operations. It handles request configuration, signature generation, and HTTP communication using cURL.\n\nAttributes:\n- appId: [string] - The application ID for Alipay API\n- charset: [string] - Character encoding (default: 'utf-8')\n- notifyUrl: [string] - Notification URL for callbacks\n- rsaPrivateKey: [string] - RSA private key for signing requests\n- totalFee: [float] - Total amount for the transaction\n- outTradeNo: [string] - Merchant's unique order number\n- orderName: [string] - Description of the order\n- tradeNo: [string] - Alipay's transaction number\n- tranOut: [string] - Account transferring funds\n- tranIn: [string] - Account receiving funds\n- amountPercentage: [float] - Percentage of amount to transfer\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid($appid) -> [void] - Sets the Alipay application ID\n- setTradeNo($tradeNo) -> [void] - Sets the Alipay transaction number\n- setTranOut($tranOut) -> [void] - Sets the transferring account\n- setTranIn($tranIn) -> [void] - Sets the receiving account\n- setRsaPrivateKey($rsaPrivateKey) -> [void] - Sets the RSA private key\n- setTotalFee($payAmount) -> [void] - Sets the transaction amount\n- setOutTradeNo($outTradeNo) -> [void] - Sets the merchant order number\n- doSettle() -> [array] - Executes the settlement request to Alipay\n- generateSign($params, $signType = \"RSA\") -> [string] - Generates signature for request\n- sign($data, $signType = \"RSA\") -> [string] - Creates RSA signature\n- checkEmpty($value) -> [bool] - Checks if a value is empty\n- getSignContent($params) -> [string] - Prepares content for signing\n- characet($data, $targetCharset) -> [string] - Handles character encoding conversion\n- curlPost($url = '', $postData = '', $options = array()) -> [string] - Executes HTTP POST request using cURL",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $charset;\n    protected $notifyUrl;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n    protected $tradeNo;\n    protected $tranOut;\n    protected $tranIn;\n    protected $amountPercentage;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo)\n    {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut)\n    {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn)\n    {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey)\n    {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle()\n    {\n        $requestConfigs = array(\n            'out_request_no'=>$this->outTradeNo,\n            'trade_no'=>$this->tradeNo,\n            'royalty_parameters'=>array(\n                array(\n                    'trans_out'=>$this->tranOut,\n                    'trans_in'=>$this->tranIn,\n                    'amount'=>$this->totalFee,\n                    'desc'=>'\u5206\u8d26\u7ed9'.$this->tranIn,\n                )\n            ),\n            'operator_id'=>'A001',\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.order.settle',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'app_auth_token'=>'',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('\u60a8\u4f7f\u7528\u7684\u79c1\u94a5\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5RSA\u79c1\u94a5\u914d\u7f6e');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.asset.account.settle',\n            'charset' => $this->charset,\n            'notify_url' => $this->notifyUrl,\n            'total_amount' => $this->totalFee,\n            'out_trade_no' => $this->outTradeNo,\n            'trade_no' => $this->tradeNo,\n            'tran_out' => $this->tranOut,\n            'tran_in' => $this->tranIn,\n            'amount_percentage' => $this->amountPercentage\n        );\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://api.alipay.com/gateway.do', $params);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        $content = $this->getSignContent($params);\n        return $this->sign($content, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        if ($signType == \"RSA\") {\n            openssl_sign($data, $signature, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n            return base64_encode($signature);\n        }\n        return null;\n    }\n\n    public function checkEmpty($value) {\n        return !isset($value) || trim($value) === '';\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $content = '';\n        foreach ($params as $key => $value) {\n            if (!$this->checkEmpty($value)) {\n                $content .= \"$key=$value&\";\n            }\n        }\n        return rtrim($content, '&');\n    }\n\n    public function characet($data, $targetCharset) {\n        return iconv($this->charset, $targetCharset, $data);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for making HTTP requests, handling cookies, headers, and connection management.\n\nClass Description: HproseHttpClient is a PHP class that extends HproseBaseHttpClient to provide HTTP client functionality using cURL. It handles request sending, response processing, cookie management, and connection settings.\n\nAttributes:\n- curl: resource - The cURL session handle\n- url: string - The target URL for HTTP requests\n- header: array - Additional HTTP headers to be sent with requests\n- keepAlive: bool - Whether to use keep-alive connection\n- keepAliveTimeout: int - Timeout for keep-alive connection in seconds\n- proxy: string - Proxy server address if configured\n- timeout: int - Request timeout in milliseconds\n\nMethods:\n- __construct(string $url = '') -> void - Initializes the client with optional target URL and creates a cURL session\n- formatCookie(array $cookies) -> string - Formats cookies into a header string\n- send(string $request) -> string - Sends an HTTP request and returns the response body\n  - Input: $request - The request payload to send\n  - Output: The response body from the server\n- __destruct() -> void - Cleans up by closing the cURL session\n\nThe class handles:\n1. cURL session initialization and configuration\n2. Request header construction (including cookies)\n3. SSL verification settings\n4. Connection management (keep-alive or close)\n5. Proxy configuration\n6. Timeout handling\n7. Response processing and error checking\n8. Resource cleanup",
    "Canonical_solution": "require_once('HproseCommon.php');\nrequire_once('HproseIO.php');\nrequire_once('HproseClient.php');\n\nclass HproseHttpClient extends HproseBaseHttpClient {\n    private $curl;\n    protected function formatCookie($cookies) {\n        if (count($cookies) > 0) {\n            return \"Cookie: \" . implode('; ', $cookies);\n        }\n        return '';\n    }\n    public function __construct($url = '') {\n        parent::__construct($url);\n        $this->curl = curl_init();\n    }\n    protected function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_HEADER, TRUE);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($this->curl, CURLOPT_POST, TRUE);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        $headers_array = array($this->getCookie(),\n                                \"Content-Length: \" . strlen($request));\n        if ($this->keepAlive) {\n            $headers_array[] = \"Connection: keep-alive\";\n            $headers_array[] = \"Keep-Alive: \" . $this->keepAliveTimeout;\n        }\n        else {\n            $headers_array[] = \"Connection: close\";\n        }\n        foreach ($this->header as $name => $value) {\n            $headers_array[] = $name . \": \" . $value;\n        }\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $headers_array);\n        if ($this->proxy) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n        if (defined(CURLOPT_TIMEOUT_MS)) {\n            curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n        }\n        else {\n            curl_setopt($this->curl, CURLOPT_TIMEOUT, $this->timeout / 1000);\n        }\n        $response = curl_exec($this->curl);\n        $errno = curl_errno($this->curl);\n        if ($errno) {\n            throw new HproseException($errno . \": \" . curl_error($this->curl));\n        }\n        do {\n            list($response_headers, $response) = explode(\"\\r\\n\\r\\n\", $response, 2); \n            $http_response_header = explode(\"\\r\\n\", $response_headers);\n            $http_response_firstline = array_shift($http_response_header); \n            if (preg_match('@^HTTP/[0-9]\\.[0-9]\\s([0-9]{3})\\s(.*)@',\n                           $http_response_firstline, $matches)) { \n                $response_code = $matches[1];\n                $response_status = trim($matches[2]);\n            }\n            else {\n                $response_code = \"500\";\n                $response_status = \"Unknown Error.\";                \n            }\n        } while (substr($response_code, 0, 1) == \"1\");\n        if ($response_code != '200') {\n            throw new HproseException($response_code . \": \" . $response_status);\n        }\n        $this->setCookie($http_response_header);\n        return $response;\n    }\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class HproseHttpClient extends HproseBaseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 30;\n    private $proxy = '';\n    private $timeout = 10000;\n\n    public function __construct(string $url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n    }\n\n    private function formatCookie(array $cookies): string {\n        return implode('; ', array_map(function($key, $value) {\n            return \"$key=$value\";\n        }, array_keys($cookies), $cookies));\n    }\n\n    public function send(string $request): string {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        if (!empty($this->header)) {\n            curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n        }\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);\n            curl_setopt($this->curl, CURLOPT_TCP_KEEPALIVE, 1);\n            curl_setopt($this->curl, CURLOPT_TCP_KEEPIDLE, $this->keepAliveTimeout);\n        }\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception('cURL error: ' . curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a function to download an image from a given URL and save it to a specified file path using PHP's cURL library.\n\nFunction Description: The function uses cURL to make an HTTP request to download an image from the provided URL. It saves the downloaded image to the specified file path. The function includes error handling for the cURL session and file operations.\n\nInput:\n- $url (string): The URL of the image to download\n- $filepath (string): The local file path where the image should be saved\n\nOutput:\n- void: The function does not return a value but outputs a success message when the download is complete\n- The downloaded image is saved to the specified file path\n- Errors during the download process are handled by cURL's error reporting",
    "Canonical_solution": "function downloadImage($url, $filepath)\n{\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_REFERER, 'https://ft07.com');\n    curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n    echo \"Downloaded: $filepath\\n\";\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        echo \"Failed to open file for writing: $filepath\";\n        return;\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    if (curl_exec($ch) === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image downloaded successfully to $filepath\";\n    }\n\n    fclose($fp);\n    curl_close($ch);\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL with file download capabilities, including error handling and size limitations.\n\nClass Description: The timthumb class provides functionality to download files from URLs using cURL with progress tracking and size limitations. It includes error handling for common HTTP status codes and fallback to file_get_contents when cURL is not available.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing downloaded data\n- $curlDataWritten: [int] - Tracks the amount of data written during download\n- $lastURLError: [string|false] - Stores the last error message encountered during URL fetching\n\nMethods:\n- curlWrite($h, $d): [int] - [Static callback function for cURL write operations. Writes data to file and tracks total size written. Returns 0 if size limit exceeded, otherwise returns bytes written]\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data to write\n  - Returns: [int] - Number of bytes processed\n\n- getURL($url, $tempfile): [bool] - [Fetches content from URL and saves to temporary file. Uses cURL if available, falls back to file_get_contents. Handles HTTP errors and size limitations]\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for saving content\n  - Returns: [bool] - True on success, False on failure",
    "Canonical_solution": "class timthumb\n{\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d)\n    {\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if (self::$curlDataWritten > MAX_FILE_SIZE) {\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile)\n    {\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if (function_exists('curl_init')) {\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if (!self::$curlFH) {\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($curl, CURLOPT_HEADER, 0);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt($curl, CURLOPT_MAXREDIRS, 10);\n\n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if ($httpStatus == 404) {\n                $this->set404();\n            }\n            if ($httpStatus == 302) {\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if ($curlResult) {\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents($url);\n            if ($img === false) {\n                $err = error_get_last();\n                if (is_array($err) && $err['message']) {\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if (preg_match('/404/', $this->lastURLError)) {\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if (!file_put_contents($tempfile, $img)) {\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n    private $sizeLimit = 10485760; // 10 MB\n\n    public static function curlWrite($h, $d) {\n        $instance = $h->getInfo(CURLINFO_PRIVATE);\n        if ($instance->curlDataWritten + strlen($d) > $instance->sizeLimit) {\n            return 0;\n        }\n        fwrite($instance->curlFH, $d);\n        $instance->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'w');\n        if (!$this->curlFH) {\n            $this->lastURLError = 'Unable to open temporary file.';\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, [__CLASS__, 'curlWrite']);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_FAILONERROR, true);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n\n            if ($httpCode >= 400) {\n                $this->lastURLError = 'HTTP error: ' . $httpCode;\n                fclose($this->curlFH);\n                return false;\n            }\n        } else {\n            $data = @file_get_contents($url);\n            if ($data === false) {\n                $this->lastURLError = 'Unable to fetch URL content.';\n                fclose($this->curlFH);\n                return false;\n            }\n            if (strlen($data) > $this->sizeLimit) {\n                $this->lastURLError = 'File size exceeds limit.';\n                fclose($this->curlFH);\n                return false;\n            }\n            fwrite($this->curlFH, $data);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL, supporting various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive HTTP client implementation using PHP's cURL extension. It supports standard HTTP methods (GET, POST, PUT, DELETE, HEAD), handles request/response processing, streaming uploads/downloads, authentication, proxy configuration, and SSL verification.\n\nAttributes:\n\nrequest_url: string - The URL to send the request to\nrequest_headers: array - Associative array of request headers\nrequest_body: string - The request body content\nresponse: string - The complete response including headers and body\nresponse_headers: array - Parsed response headers\nresponse_body: string - The response body content\nresponse_code: int - HTTP response status code\nresponse_info: array - Additional cURL response information\ncurl_handle: resource - The cURL handle resource\nmethod: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: array|null - Proxy configuration details\nusername: string|null - Username for authentication\npassword: string|null - Password for authentication\ncurlopts: array|null - Additional cURL options\ndebug_mode: bool - Whether to enable debug mode\nrequest_class: string - Class name for request handling\nresponse_class: string - Class name for response handling\nuseragent: string - User-Agent header value\nread_file: string|null - File path for streaming read\nread_stream: resource|null - Stream resource for reading\nread_stream_size: int|null - Size of read stream\nread_stream_read: int - Bytes read from stream\nwrite_file: string|null - File path for streaming write\nwrite_stream: resource|null - Stream resource for writing\nseek_position: int|null - Position to seek in read stream\ncacert_location: mixed - CA certificate location\nssl_verification: bool - Whether to verify SSL\nregistered_streaming_read_callback: callable|null - Callback for streaming read\nregistered_streaming_write_callback: callable|null - Callback for streaming write\ntimeout: int - Request timeout in seconds\nconnect_timeout: int - Connection timeout in seconds\n\nMethods:\n\n__construct(string $url = null, string $proxy = null, array $helpers = null) -> self - Initializes the request with URL and optional proxy/helpers\n__destruct() -> self - Cleans up open file handles\nset_credentials(string $user, string $pass) -> self - Sets authentication credentials\nadd_header(string $key, string $value) -> self - Adds a request header\nremove_header(string $key) -> self - Removes a request header\nset_method(string $method) -> self - Sets the HTTP method\nset_useragent(string $ua) -> self - Sets the User-Agent header\nset_body(string $body) -> self - Sets the request body\nset_request_url(string $url) -> self - Sets the request URL\nset_curlopts(array $curlopts) -> self - Sets additional cURL options\nset_read_stream_size(int $size) -> self - Sets the read stream size\nset_read_stream(resource $resource, int $size = null) -> self - Sets the read stream resource\nset_read_file(string $location) -> self - Sets a file for streaming read\nset_write_stream(resource $resource) -> self - Sets the write stream resource\nset_write_file(string $location) -> self - Sets a file for streaming write\nset_proxy(string $proxy) -> self - Configures proxy settings\nset_seek_position(int $position) -> self - Sets the seek position for read stream\nregister_streaming_read_callback(callable $callback) -> self - Registers streaming read callback\nregister_streaming_write_callback(callable $callback) -> self - Registers streaming write callback\nstreaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Callback for streaming read\nstreaming_write_callback(resource $curl_handle, string $data) -> int - Callback for streaming write\nprep_request() -> resource - Prepares and returns a cURL handle\nprocess_response(resource $curl_handle = null, string $response = null) -> mixed - Processes the cURL response\nsend_request(bool $parse = false) -> mixed - Sends the request and returns response\nsend_multi_request(array $handles, array $opt = null) -> array - Sends multiple requests in parallel",
    "Canonical_solution": "namespace NOS\\Http;\n\nclass RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'NOS\\Http\\RequestCore';\n    public $response_class = 'NOS\\Http\\ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n    public $timeout = 5184000;\n    public $connect_timeout = 10;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer)$position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false) {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification) {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        } else {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        } elseif (is_string($this->cacert_location)) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1]) ? $kv[1] : '';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                return new ResponseCore($this->response_headers, $this->response_body, $this->response_code);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false) {\n            throw new RequestCore_Exception('cURL resource: ' . (string)$curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null)\n    {\n        set_time_limit(0);\n        if (count($handles) === 0) return array();\n        if (!$opt) $opt = array();\n\n        $limit = isset($opt['limit']) ? $opt['limit'] : -1;\n        $handle_list = $handles;\n        $http = new $this->request_class();\n        $multi_handle = curl_multi_init();\n        $handles_post = array();\n        $added = count($handles);\n        $last_handle = null;\n        $count = 0;\n        $i = 0;\n\n        while ($i < $added) {\n            if ($limit > 0 && $i >= $limit) break;\n            curl_multi_add_handle($multi_handle, array_shift($handles));\n            $i++;\n        }\n\n        do {\n            $active = false;\n            while (($status = curl_multi_exec($multi_handle, $active)) === CURLM_CALL_MULTI_PERFORM) {\n                if (count($handles) > 0) break;\n            }\n\n            $to_process = array();\n            while ($done = curl_multi_info_read($multi_handle)) {\n                if ($done['result'] > 0) {\n                    throw new RequestCore_Exception('cURL resource: ' . (string)$done['handle'] . '; cURL error: ' . curl_error($done['handle']) . ' (' . $done['result'] . ')');\n                } elseif (!isset($to_process[(int)$done['handle']])) {\n                    $to_process[(int)$done['handle']] = $done;\n                }\n            }\n\n            foreach ($to_process as $pkey => $done) {\n                $response = $http->process_response($done['handle'], curl_multi_getcontent($done['handle']));\n                $key = array_search($done['handle'], $handle_list, true);\n                $handles_post[$key] = $response;\n\n                if (count($handles) > 0) {\n                    curl_multi_add_handle($multi_handle, array_shift($handles));\n                }\n\n                curl_multi_remove_handle($multi_handle, $done['handle']);\n                curl_close($done['handle']);\n            }\n        } while ($active || count($handles_post) < $added);\n\n        curl_multi_close($multi_handle);\n        ksort($handles_post, SORT_N",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class RequestCore {\n    private $request_url;\n    private $request_headers = [];\n    private $request_body;\n    private $response;\n    private $response_headers = [];\n    private $response_body;\n    private $response_code;\n    private $response_info = [];\n    private $curl_handle;\n    private $method = 'GET';\n    private $proxy;\n    private $username;\n    private $password;\n    private $curlopts = [];\n    private $debug_mode = false;\n    private $request_class;\n    private $response_class;\n    private $useragent;\n    private $read_file;\n    private $read_stream;\n    private $read_stream_size;\n    private $read_stream_read = 0;\n    private $write_file;\n    private $write_stream;\n    private $seek_position;\n    private $cacert_location;\n    private $ssl_verification = true;\n    private $registered_streaming_read_callback;\n    private $registered_streaming_write_callback;\n    private $timeout = 30;\n    private $connect_timeout = 10;\n\n    public function __construct(string $url = null, string $proxy = null, array $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            // Initialize helpers if provided\n        }\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials(string $user, string $pass): self {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header(string $key, string $value): self {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header(string $key): self {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method(string $method): self {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent(string $ua): self {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body(string $body): self {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url(string $url): self {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts(array $curlopts): self {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size(int $size): self {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream(resource $resource, int $size = null): self {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file(string $location): self {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream(resource $resource): self {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file(string $location): self {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy(string $proxy): self {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position(int $position): self {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback(callable $callback): self {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback(callable $callback): self {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    private function streaming_read_callback($curl_handle, $file_handle, $length): string {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        return '';\n    }\n\n    private function streaming_write_callback($curl_handle, string $data): int {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return 0;\n    }\n\n    private function prep_request(): resource {\n        $this->curl_handle = curl_init($this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"{$this->username}:{$this->password}\");\n        }\n        if ($this->useragent) {\n            curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        }\n        if ($this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        return $this->curl_handle;\n    }\n\n    public function process_response(resource $curl_handle = null, string $response = null): mixed {\n        if ($curl_handle) {\n            $this->response_info = curl_getinfo($curl_handle);\n            $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n            $this->response = $response ?: curl_multi_getcontent($curl_handle);\n            $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = explode(\"\\r\\n\", substr($this->response, 0, $header_size));\n            $this->response_body = substr($this->response, $header_size);\n            return $this->response_body;\n        }\n        return null;\n    }\n\n    public function send_request(bool $parse = false): mixed {\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n        if ($this->debug_mode) {\n            var_dump(curl_getinfo($curl_handle));\n        }\n        $this->process_response($curl_handle);\n        curl_close($curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function send_multi_request(array $handles, array $opt = null): array {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($multi_handle, $running);\n            curl_multi_select($multi_handle);\n        } while ($running > 0);\n        $responses = [];\n        foreach ($handles as $handle) {\n            $responses[] = $this->process_response($handle);\n            curl_multi_remove_handle($multi_handle, $handle);\n        }\n        curl_multi_close($multi_handle);\n        return $responses;\n    }\n}"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL to make HTTP requests, handle responses, and manage redirects while maintaining request details like headers, status codes, and response body.\n\nClass Description: The `File` class represents an HTTP client that uses cURL to make HTTP requests. It handles request execution, response parsing, redirect following, and error management. It implements the `SimplePie\\HTTP\\Response` interface, providing methods to access response details.\n\nAttributes:\n\n- url: string - The final requested URL after any redirects\n- useragent: string - The user agent string used for the request\n- success: bool - Indicates whether the request was successful\n- headers: array - The response headers from the request\n- body: string - The response body content\n- status_code: int - The HTTP status code of the response\n- redirects: int - The number of redirects followed\n- error: string - Any error message encountered during the request\n- method: int - The method used for the request (bitmask)\n- permanent_url: string - The original URL before any redirects\n- permanentUrlMutable: bool - Flag indicating if permanent URL can be changed\n\nMethods:\n\n- __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) -> void - Initializes the HTTP client, makes the request, and processes the response. Handles redirects recursively.\n- get_body_content(): string - Returns the response body content\n- get_headers(): array - Returns the response headers\n- get_status_code(): int - Returns the HTTP status code\n- get_final_requested_uri(): string - Returns the final URL after any redirects\n- get_permanent_uri(): string - Returns the original URL before any redirects",
    "Canonical_solution": "use SimplePie\\HTTP\\Response;\n\nclass File implements Response\n{\n    private $url;\n    private $useragent;\n    private $success = true;\n    private $headers = [];\n    private $body;\n    private $status_code = 0;\n    private $redirects = 0;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable = true;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = [])\n    {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent;\n\n        if (preg_match('/^http(s)?:\\/\\//i', $url)) {\n            if ($useragent === null) {\n                $useragent = ini_get('user_agent');\n                $this->useragent = $useragent;\n            }\n            if (!is_array($headers)) {\n                $headers = [];\n            }\n            if (!$force_fsockopen && function_exists('curl_exec')) {\n                $this->method = \\SimplePie\\SimplePie::FILE_SOURCE_REMOTE | \\SimplePie\\SimplePie::FILE_SOURCE_CURL;\n                $fp = curl_init();\n                $headers2 = [];\n                foreach ($headers as $key => $value) {\n                    $headers2[] = \"$key: $value\";\n                }\n                curl_setopt($fp, CURLOPT_URL, $url);\n                curl_setopt($fp, CURLOPT_HEADER, 1);\n                curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);\n                curl_setopt($fp, CURLOPT_FAILONERROR, 1);\n                curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);\n                curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);\n                curl_setopt($fp, CURLOPT_REFERER, \\SimplePie\\Misc::url_remove_credentials($url));\n                curl_setopt($fp, CURLOPT_USERAGENT, $useragent);\n                curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);\n                foreach ($curl_options as $curl_param => $curl_value) {\n                    curl_setopt($fp, $curl_param, $curl_value);\n                }\n\n                $responseHeaders = curl_exec($fp);\n                $this->status_code = curl_getinfo($fp, CURLINFO_HTTP_CODE);\n                if (curl_errno($fp)) {\n                    $this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);\n                    $this->success = false;\n                } else {\n                    if ($info = curl_getinfo($fp)) {\n                        $this->url = $info['url'];\n                    }\n                    curl_close($fp);\n                    $responseHeaders = \\SimplePie\\HTTP\\Parser::prepareHeaders($responseHeaders, $info['redirect_count'] + 1);\n                    $parser = new \\SimplePie\\HTTP\\Parser($responseHeaders, true);\n                    if ($parser->parse()) {\n                        $this->headers = $parser->headers;\n                        $this->body = trim($parser->body);\n                        $this->status_code = $parser->status_code;\n                        if ((in_array($this->status_code, [300, 301, 302, 303, 307]) || $this->status_code > 307 && $this->status_code < 400) && $this->redirects < $redirects) {\n                            $this->redirects++;\n                            $this->permanentUrlMutable = $this->permanentUrlMutable && ($this->status_code == 301 || $this->status_code == 308);\n                            $this->__construct($this->url, $timeout, $redirects, $headers, $useragent, $force_fsockopen, $curl_options);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public function get_body_content(): string\n    {\n        return (string) $this->body;\n    }\n\n    public function get_headers(): array\n    {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int\n    {\n        return (int) $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string\n    {\n        return (string) $this->url;\n    }\n\n    public function get_permanent_uri(): string\n    {\n        return (string) $this->permanent_url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->permanent_url = $url;\n        $this->permanentUrlMutable = true;\n        $this->redirects = 0;\n        $this->useragent = $useragent ?? 'PHP cURL Client';\n        $this->headers = $headers ?? [];\n        $this->executeRequest($url, $timeout, $redirects, $curl_options);\n    }\n\n    private function executeRequest(string $url, int $timeout, int $redirects, array $curl_options) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        \n        foreach ($curl_options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $this->error = curl_error($ch);\n            $this->success = false;\n            $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        } else {\n            $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n            $this->headers = explode(\"\\r\\n\", substr($response, 0, $header_size));\n            $this->body = substr($response, $header_size);\n            $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $this->success = $this->status_code >= 200 && $this->status_code < 300;\n            $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n            $this->redirects = curl_getinfo($ch, CURLINFO_REDIRECT_COUNT);\n        }\n        curl_close($ch);\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Implement a PHP class that interacts with the Online-Convert API to handle file conversion jobs, including creating new conversion jobs and checking job statuses.\n\nClass Description: The elFinderEditorOnlineConvert class extends elFinderEditor and provides functionality to interact with the Online-Convert API. It handles initialization, API key validation, and processing conversion requests through HTTP calls using cURL.\n\nAttributes:\n- allowed: array - Defines the allowed actions for this editor (init and api)\n\nMethods:\n- enabled() -> bool - Checks if the editor is enabled by verifying the API key constant and that Online-Convert isn't disabled\n- init() -> array - Initializes the editor and checks for API key and cURL availability\n- api() -> array - Main method to handle API interactions with Online-Convert service. Processes both job creation and status checking\n\nMethod Details:\n1. enabled() -> bool\n   - Input: None\n   - Output: Returns true if the editor is enabled (API key defined and Online-Convert not disabled)\n\n2. init() -> array\n   - Input: None\n   - Output: Returns array with API availability status (checks for API key and cURL function)\n\n3. api() -> array\n   - Input: (Handled through class properties)\n     - category: string - Conversion category\n     - convert: string - Target conversion format\n     - options: string/array - Conversion options\n     - source: string - Source file URL\n     - filename: string - Name of the file\n     - mime: string - MIME type of the file\n     - jobid: string - Job ID for status checking\n   - Output: Returns array containing either:\n     - API response data\n     - Error information\n     - Empty array for non-API conversions",
    "Canonical_solution": "class elFinderEditorOnlineConvert extends elFinderEditor\n{\n    protected $allowed = array('init', 'api');\n\n    public function enabled()\n    {\n        return defined('ELFINDER_ONLINE_CONVERT_APIKEY') && ELFINDER_ONLINE_CONVERT_APIKEY && (!defined('ELFINDER_DISABLE_ONLINE_CONVERT') || !ELFINDER_DISABLE_ONLINE_CONVERT);\n    }\n\n    public function init()\n    {\n        return array('api' => defined('ELFINDER_ONLINE_CONVERT_APIKEY') && ELFINDER_ONLINE_CONVERT_APIKEY && function_exists('curl_init'));\n    }\n\n    public function api()\n    {\n        $endpoint = 'https://api2.online-convert.com/jobs';\n        $category = $this->argValue('category');\n        $convert = $this->argValue('convert');\n        $options = $this->argValue('options');\n        $source = $this->argValue('source');\n        $filename = $this->argValue('filename');\n        $mime = $this->argValue('mime');\n        $jobid = $this->argValue('jobid');\n        $string_method = '';\n        $options = array();\n        $nonApi = array('android', 'blackberry', 'dpg', 'ipad', 'iphone', 'ipod', 'nintendo-3ds', 'nintendo-ds', 'ps3', 'psp', 'wii', 'xbox');\n        if (in_array($convert, $nonApi)) {\n            return array('apires' => array());\n        }\n        $ch = null;\n        if ($convert && $source) {\n            $request = array(\n                'input' => array(array(\n                    'type' => 'remote',\n                    'source' => $source\n                )),\n                'conversion' => array(array(\n                    'target' => $convert\n                ))\n            );\n\n            if ($filename !== '') {\n                $request['input'][0]['filename'] = $filename;\n            }\n\n            if ($mime !== '') {\n                $request['input'][0]['content_type'] = $mime;\n            }\n\n            if ($category) {\n                $request['conversion'][0]['category'] = $category;\n            }\n\n            if ($options && $options !== 'null') {\n                $options = json_decode($options, true);\n            }\n            if (!is_array($options)) {\n                $options = array();\n            }\n            if ($options) {\n                $request['conversion'][0]['options'] = $options;\n            }\n\n            $ch = curl_init($endpoint);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($request));\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'X-Oc-Api-Key: ' . ELFINDER_ONLINE_CONVERT_APIKEY,\n                'Content-Type: application/json',\n                'cache-control: no-cache'\n            ));\n        } else if ($jobid) {\n            $ch = curl_init($endpoint . '/' . $jobid);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'X-Oc-Api-Key: ' . ELFINDER_ONLINE_CONVERT_APIKEY,\n                'cache-control: no-cache'\n            ));\n        }\n\n        if ($ch) {\n            $response = curl_exec($ch);\n            $info = curl_getinfo($ch);\n            $error = curl_error($ch);\n            curl_close($ch);\n\n            if (!empty($error)) {\n                $res = array('error' => $error);\n            } else {\n                $data = json_decode($response, true);\n                if (isset($data['status']) && isset($data['status']['code']) && $data['status']['code'] === 'completed') {\n                    $session = $this->elfinder->getSession();\n                    $urlContentSaveIds = $session->get('urlContentSaveIds', array());\n                    $urlContentSaveIds['OnlineConvert-' . $data['id']] = true;\n                    $session->set('urlContentSaveIds', $urlContentSaveIds);\n                }\n                $res = array('apires' => $data);\n            }\n\n            return $res;\n        } else {\n            return array('error' => array('errCmdParams', 'editor.OnlineConvert.api'));\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n    \n    public function enabled() {\n        return defined('ONLINE_CONVERT_API_KEY') && ONLINE_CONVERT_API_KEY !== '' && !defined('ONLINE_CONVERT_DISABLED');\n    }\n\n    public function init() {\n        return [\n            'api_key' => defined('ONLINE_CONVERT_API_KEY') ? 'valid' : 'invalid',\n            'curl' => function_exists('curl_version') ? 'available' : 'not available'\n        ];\n    }\n\n    public function api() {\n        $response = [];\n        if (isset($this->category, $this->convert, $this->options, $this->source, $this->filename, $this->mime)) {\n            $url = 'https://api.online-convert.com/jobs';\n            $data = [\n                'conversion' => [\n                    'category' => $this->category,\n                    'target' => $this->convert,\n                    'options' => $this->options,\n                    'source' => $this->source,\n                    'filename' => $this->filename,\n                    'mime' => $this->mime\n                ]\n            ];\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Authorization: Bearer ' . ONLINE_CONVERT_API_KEY,\n                'Content-Type: application/json'\n            ]);\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n            $response = $httpCode === 200 ? json_decode($result, true) : ['error' => 'API request failed', 'http_code' => $httpCode];\n        } elseif (isset($this->jobid)) {\n            $url = 'https://api.online-convert.com/jobs/' . $this->jobid;\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Authorization: Bearer ' . ONLINE_CONVERT_API_KEY\n            ]);\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n            $response = $httpCode === 200 ? json_decode($result, true) : ['error' => 'Job status check failed', 'http_code' => $httpCode];\n        } else {\n            $response = [];\n        }\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a PHP class for interacting with Google Drive API using OAuth 2.0 authentication and cURL for HTTP requests.\n\nClass Description: The Googledrive class provides functionality to authenticate with Google Drive API and make authorized API requests. It handles OAuth 2.0 token management and provides a method for making API calls.\n\nAttributes:\n\naccess_token: string - The OAuth 2.0 access token for API authentication\ndisktag: string - Identifier for the disk configuration\nclient_id: string - Google API client ID\nclient_secret: string - Google API client secret\nredirect_uri: string - OAuth redirect URI\noauth_url: string - Google OAuth endpoint URL\napi_url: string - Google Drive API endpoint URL\nscope: string - API access scope\ndriveId: string - Google Drive ID\nerror: array - Stores error information if any occurs\n\nMethods:\n\n__construct: [Name](tag: string) -> void - Constructor that initializes the class with configuration values\nGDAPI: [Name](method: string, url: string, data: string = '') -> array - Makes an authenticated API request to Google Drive\nget_access_token: [Name](refresh_token: string) -> bool - Retrieves and manages access tokens using refresh tokens",
    "Canonical_solution": "class Googledrive {\n    protected $access_token;\n    protected $disktag;\n    protected $client_id;\n    protected $client_secret;\n    protected $redirect_uri;\n    protected $oauth_url;\n    protected $api_url;\n    protected $scope;\n    protected $driveId;\n    protected $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        $this->redirect_uri = 'https://scfonedrive.github.io';\n        if (getConfig('client_id', $tag) && getConfig('client_secret', $tag)) {\n            $this->client_id = getConfig('client_id', $tag);\n            $this->client_secret = getConfig('client_secret', $tag);\n        } else {\n            $this->client_id = '106151778902-ajieetaab5ondhbvia97n4tr5k0cg8eo.apps.googleusercontent.com';\n            $this->client_secret = 'LlCV-rQClzYIKCEqiVddh68G';\n        }\n        $this->oauth_url = 'https://accounts.google.com/o/oauth2/';\n        $this->api_url = 'https://www.googleapis.com/drive/v3';\n        $this->scope = 'https://www.googleapis.com/auth/drive';\n        $this->client_secret = urlencode($this->client_secret);\n        $this->scope = urlencode($this->scope);\n        $this->driveId = getConfig('driveId', $tag);\n        $res = $this->get_access_token(getConfig('refresh_token', $tag));\n    }\n\n    protected function GDAPI($method, $url, $data = '') {\n        $headers['Authorization'] = 'Bearer ' . $this->access_token;\n        if (!isset($headers['Accept'])) $headers['Accept'] = '*/*';\n        $headers['Content-Type'] = 'application/json';\n        $sendHeaders = array();\n        foreach ($headers as $headerName => $headerVal) {\n            $sendHeaders[] = $headerName . ': ' . $headerVal;\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $sendHeaders);\n        $response['body'] = curl_exec($ch);\n        $response['stat'] = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $response;\n    }\n\n    protected function get_access_token($refresh_token) {\n        if (!$refresh_token) {\n            $tmp['stat'] = 0;\n            $tmp['body'] = 'No refresh_token';\n            $this->error = $tmp;\n            return false;\n        }\n        if (!($this->access_token = getcache('access_token', $this->disktag))) {\n            $p = 0;\n            $data['client_id'] = $this->client_id;\n            $data['client_secret'] = $this->client_secret;\n            $data['grant_type'] = 'refresh_token';\n            $data['refresh_token'] = $refresh_token;\n            while ($response['stat'] == 0 && $p < 3) {\n                $response = curl('POST', $this->oauth_url . 'token', json_encode($data));\n                $p++;\n            }\n            if ($response['stat'] == 200) $ret = json_decode($response['body'], true);\n            if (!isset($ret['access_token'])) {\n                error_log1($this->oauth_url . 'token' . '?client_id=' . $this->client_id . '&client_secret=' . $this->client_secret . '&grant_type=refresh_token&refresh_token=' . substr($refresh_token, 0, 20) . '******' . substr($refresh_token, -20));\n                error_log1('failed to get [' . $this->disktag . '] access_token. response: ' . $response['body']);\n                $response['body'] = json_encode(json_decode($response['body']), JSON_PRETTY_PRINT);\n                $response['body'] .= '\\nfailed to get [' . $this->disktag . '] access_token.';\n                $this->error = $response;\n                return false;\n            }\n            $tmp = $ret;\n            $tmp['access_token'] = substr($tmp['access_token'], 0, 10) . '******';\n            error_log1('[' . $this->disktag . '] Get access token:' . json_encode($tmp, JSON_PRETTY_PRINT));\n            $this->access_token = $ret['access_token'];\n            savecache('access_token', $this->access_token, $this->disktag, $ret['expires_in'] - 300);\n            return true;\n        }\n        return true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = 'https://accounts.google.com/o/oauth2/auth';\n    private $api_url = 'https://www.googleapis.com/drive/v3/';\n    private $scope = 'https://www.googleapis.com/auth/drive';\n    private $driveId;\n    private $error = [];\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Initialize other attributes as needed\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ]);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($data) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->error[] = curl_error($ch);\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function get_access_token($refresh_token) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, 'https://oauth2.googleapis.com/token');\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ]));\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->error[] = curl_error($ch);\n            return false;\n        }\n        curl_close($ch);\n        $result = json_decode($response, true);\n        if (isset($result['access_token'])) {\n            $this->access_token = $result['access_token'];\n            return true;\n        }\n        return false;\n    }\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a PHP class that provides a fluent interface for making HTTP requests using cURL, supporting various HTTP methods, request configurations, and response handling.\n\nClass Description: The Httpie class is a fluent HTTP client wrapper for cURL in PHP that simplifies making HTTP requests with method chaining. It supports GET, POST, PUT, PATCH, and DELETE methods, allows setting headers, query parameters, and different body types (raw, JSON, form), and provides options for error handling and response processing.\n\nAttributes:\n- method: string - The HTTP method to use for the request (GET, POST, etc.)\n- url: string - The target URL for the request\n- headers: array - Associative array of HTTP headers\n- body: string - The request body content\n- curlopts: array - Additional cURL options to set\n- nothrow: bool - Whether to suppress exceptions on errors\n\nMethods:\n- __construct() -> void - Constructor that checks for cURL extension availability\n- get(string $url) -> Httpie - Static constructor for GET requests\n- post(string $url) -> Httpie - Static constructor for POST requests\n- patch(string $url) -> Httpie - Static constructor for PATCH requests\n- put(string $url) -> Httpie - Static constructor for PUT requests\n- delete(string $url) -> Httpie - Static constructor for DELETE requests\n- query(array $params) -> self - Adds query parameters to the URL\n- header(string $header, string $value) -> self - Adds a single header\n- body(string $body) -> self - Sets raw request body\n- jsonBody(array $data) -> self - Sets JSON request body\n- formBody(array $data) -> self - Sets form-urlencoded request body\n- setopt(int $key, mixed $value) -> self - Sets custom cURL option\n- nothrow(bool $on = true) -> self - Configures error throwing behavior\n- send(?array &$info = null) -> string - Executes the request and returns response\n- getJson() -> mixed - Executes request and returns parsed JSON response",
    "Canonical_solution": "namespace Deployer\\Utility;\n\nuse Deployer\\Exception\\HttpieException;\n\nclass Httpie\n{\n    private string $method = 'GET';\n    private string $url = '';\n    private array $headers = [];\n    private string $body = '';\n    private array $curlopts = [];\n    private bool $nothrow = false;\n\n    public function __construct()\n    {\n        if (!extension_loaded('curl')) {\n            throw new \\Exception(\n                \"Please, install curl extension.\\n\" .\n                \"https://php.net/curl.installation\",\n            );\n        }\n    }\n\n    public static function get(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'GET';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function post(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'POST';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function patch(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'PATCH';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function put(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'PUT';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function delete(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'DELETE';\n        $http->url = $url;\n        return $http;\n    }\n\n    public function query(array $params): self\n    {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self\n    {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self\n    {\n        $this->body = $body;\n        $this->headers = array_merge($this->headers, [\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function jsonBody(array $data): self\n    {\n        $this->body = json_encode($data, JSON_PRETTY_PRINT);\n        $this->headers = array_merge($this->headers, [\n            'Content-Type' => 'application/json',\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function formBody(array $data): self\n    {\n        $this->body = http_build_query($data);\n        $this->headers = array_merge($this->headers, [\n            'Content-type' => 'application/x-www-form-urlencoded',\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self\n    {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self\n    {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string\n    {\n        if ($this->url === '') {\n            throw new \\RuntimeException('URL must not be empty to Httpie::send()');\n        }\n        $ch = curl_init($this->url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Deployer ' . DEPLOYER_VERSION);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 10);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $result = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        if ($result === false) {\n            if ($this->nothrow) {\n                $result = '';\n            } else {\n                $error = curl_error($ch);\n                $errno = curl_errno($ch);\n                curl_close($ch);\n                throw new HttpieException($error, $errno);\n            }\n        }\n        curl_close($ch);\n        return $result;\n    }\n\n    public function getJson(): mixed\n    {\n        $result = $this->send();\n        $response = json_decode($result, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            throw new HttpieException(\n                'JSON Error: ' . json_last_error_msg() . '\\n' .\n                'Response: ' . $result,\n            );\n        }\n        return $response;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        $instance = new self();\n        $instance->method = 'GET';\n        $instance->url = $url;\n        return $instance;\n    }\n\n    public static function post(string $url): Httpie {\n        $instance = new self();\n        $instance->method = 'POST';\n        $instance->url = $url;\n        return $instance;\n    }\n\n    public static function patch(string $url): Httpie {\n        $instance = new self();\n        $instance->method = 'PATCH';\n        $instance->url = $url;\n        return $instance;\n    }\n\n    public static function put(string $url): Httpie {\n        $instance = new self();\n        $instance->method = 'PUT';\n        $instance->url = $url;\n        return $instance;\n    }\n\n    public static function delete(string $url): Httpie {\n        $instance = new self();\n        $instance->method = 'DELETE';\n        $instance->url = $url;\n        return $instance;\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body = json_encode($data);\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body = http_build_query($data);\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        if (!empty($this->headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array_map(function($k, $v) {\n                return \"$k: $v\";\n            }, array_keys($this->headers), $this->headers));\n        }\n        if ($this->body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        curl_setopt_array($ch, $this->curlopts);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        \n        $response = curl_exec($ch);\n        $error = curl_error($ch);\n        $info = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($error && !$this->nothrow) {\n            throw new Exception($error);\n        }\n\n        return $response;\n    }\n\n    public function getJson() {\n        $response = $this->send();\n        return json_decode($response, true);\n    }\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a PHP class that utilizes the Guzzle HTTP client to fetch content from a URL and load it into a DOM object.\n\nClass Description: The `Dom` class provides functionality to load HTML content from a URL using the Guzzle HTTP client. It allows for optional customization of the HTTP client and request objects, and handles the response to extract the content for DOM processing.\n\nMethods:\n\nMethod1: `loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null)` -> `Dom` - Loads HTML content from the specified URL using the provided or default Guzzle HTTP client and request objects. The content is then loaded into a DOM object. Throws various exceptions for error handling.\n\nInput Parameters:\n- `$url`: string - The URL from which to fetch the HTML content.\n- `$options`: ?Options - Optional configuration options for the DOM loading process.\n- `$client`: ?ClientInterface - Optional Guzzle HTTP client instance. If not provided, a default client is created.\n- `$request`: ?RequestInterface - Optional Guzzle HTTP request instance. If not provided, a default GET request is created.\n\nOutput:\n- Returns an instance of `Dom` with the loaded HTML content.",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Psr7\\Request;\nuse Psr\\Http\\Client\\ClientExceptionInterface;\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass Dom implements DomInterface\n{\n    /**\n     * Use a curl interface implementation to attempt to load\n     * the content from a url.\n     *\n     * @throws ChildNotFoundException\n     * @throws CircularException\n     * @throws Exceptions\\ContentLengthException\n     * @throws LogicalException\n     * @throws StrictException\n     * @throws ClientExceptionInterface\n     */\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): Dom\n    {\n        if ($client === null) {\n            $client = new Client();\n        }\n        if ($request === null) {\n            $request = new Request('GET', $url);\n        }\n\n        $response = $client->sendRequest($request);\n        $content = $response->getBody()->getContents();\n\n        return $this->loadStr($content, $options);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "right_result": "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Request;\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse GuzzleHttp\\Options;\n\nclass Dom {\n    private $content;\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): Dom {\n        if ($client === null) {\n            $client = new Client();\n        }\n\n        if ($request === null) {\n            $request = new Request('GET', $url);\n        }\n\n        try {\n            $response = $client->send($request, $options ? $options->toArray() : []);\n            if ($response->getStatusCode() !== 200) {\n                throw new Exception('Failed to fetch content, status code: ' . $response->getStatusCode());\n            }\n            $this->content = (string) $response->getBody();\n        } catch (RequestException $e) {\n            throw new Exception('Request failed: ' . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getContent() {\n        return $this->content;\n    }\n}"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL to send requests to a specified URL and handle the responses, including error checking and resource cleanup.\n\nClass Description: The SpotlightClient class provides functionality to send HTTP requests using PHP's cURL extension. It handles request initialization, option configuration, execution, error handling, and resource cleanup. The class is designed to work with custom Request and Response objects.\n\nMethods:\n\nMethod1: sendRequest(Request $request, string $url) -> Response - Sends an HTTP request to the specified URL using cURL. Initializes a cURL session, sets various options including URL, headers, timeout values, and request method, executes the request, and processes the response or errors. Returns a Response object containing the status code and any error messages.\n\nInput Parameters:\n- $request: Request - An object containing the request data to be sent\n- $url: string - The target URL for the HTTP request\n\nReturn Type: Response - An object containing the HTTP status code and any error messages\n\nThe method performs the following steps:\n1. Checks if cURL extension is loaded\n2. Validates request data\n3. Initializes cURL session\n4. Sets cURL options (URL, headers, timeouts, method, etc.)\n5. Executes the request\n6. Handles errors if they occur\n7. Closes cURL session\n8. Returns response with status code",
    "Canonical_solution": "namespace Sentry\\Spotlight;\n\nuse Sentry\\HttpClient\\Request;\nuse Sentry\\HttpClient\\Response;\n\nclass SpotlightClient\n{\n    public static function sendRequest(Request $request, string $url): Response\n    {\n        if (!\\extension_loaded('curl')) {\n            throw new \\RuntimeException('The cURL PHP extension must be enabled to use the SpotlightClient.');\n        }\n\n        $requestData = $request->getStringBody();\n        if ($requestData === null) {\n            throw new \\RuntimeException('The request data is empty.');\n        }\n\n        $curlHandle = curl_init();\n\n        curl_setopt($curlHandle, \\CURLOPT_URL, $url);\n        curl_setopt($curlHandle, \\CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-sentry-envelope',\n        ]);\n        curl_setopt($curlHandle, \\CURLOPT_TIMEOUT, 2.0);\n        curl_setopt($curlHandle, \\CURLOPT_CONNECTTIMEOUT, 1.0);\n        curl_setopt($curlHandle, \\CURLOPT_ENCODING, '');\n        curl_setopt($curlHandle, \\CURLOPT_POST, true);\n        curl_setopt($curlHandle, \\CURLOPT_POSTFIELDS, $requestData);\n        curl_setopt($curlHandle, \\CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curlHandle, \\CURLOPT_HTTP_VERSION, \\CURL_HTTP_VERSION_1_1);\n\n        $body = curl_exec($curlHandle);\n\n        if ($body === false) {\n            $errorCode = curl_errno($curlHandle);\n            $error = curl_error($curlHandle);\n            curl_close($curlHandle);\n\n            $message = 'cURL Error (' . $errorCode . ') ' . $error;\n\n            return new Response(0, [], $message);\n        }\n\n        $statusCode = curl_getinfo($curlHandle, \\CURLINFO_HTTP_CODE);\n\n        curl_close($curlHandle);\n\n        return new Response($statusCode, [], '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!function_exists('curl_version')) {\n            throw new Exception('cURL is not available.');\n        }\n\n        if (empty($request->getMethod()) || empty($request->getHeaders()) || empty($request->getBody())) {\n            throw new Exception('Invalid request data.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            return new Response($httpCode, $error);\n        }\n\n        return new Response($httpCode, $responseBody);\n    }\n}"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests using cURL with support for various configurations including authentication, custom requests, and proxy settings.\n\nFunction Description: The function performs HTTP requests to a specified URL with configurable options. It supports basic authentication, Bearer token authentication, custom HTTP methods, POST requests with JSON payloads, and proxy configuration. The function handles response retrieval and error checking, returning the decoded JSON response.\n\nInput:\n- $url (string): The target URL for the HTTP request\n- $auth (bool, optional): Whether to use authentication (default: true)\n- $customRequest (string, optional): Custom HTTP method (e.g., 'PUT', 'DELETE')\n- $postFields (array, optional): Data to send in the request body (will be JSON encoded)\n\nOutput:\n- Returns the decoded JSON response from the server as a PHP object/array\n- Returns null if the response cannot be decoded as JSON",
    "Canonical_solution": "function request($url, $auth = true, $customRequest = null, $postFields = null)\n{\n    $user = Auth::user();\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0');\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n    if (env('PROXY_PORT')) {\n        curl_setopt($ch, CURLOPT_PROXYPORT, env('PROXY_PORT'));\n        curl_setopt($ch, CURLOPT_PROXYTYPE, env('PROXY_METHOD'));\n        curl_setopt($ch, CURLOPT_PROXY, env('PROXY_SERVER'));\n    }\n\n    if (env('PROXY_USER')) {\n        curl_setopt($ch, CURLOPT_PROXYUSERPWD, env('PROXY_USER').':'.env('PROXY_PASS'));\n    }\n\n    if (!is_null($postFields)) {\n        $postFields = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json',\n            'Content-Length: '.strlen($postFields), ]);\n    }\n\n    if (strtolower($user->provider) == 'bitbucket') {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer '.$user->token]);\n    }\n\n    if (!is_null($customRequest)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($auth && isset($user->username) && strtolower($user->provider) != 'bitbucket') {\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n        curl_setopt($ch, CURLOPT_USERPWD, $user->username.':'.$user->token);\n    }\n\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return json_decode($result);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init($url);\n    \n    if ($auth) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n    \n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    } elseif ($postFields) {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postFields));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge(curl_getinfo($ch, CURLINFO_HTTP_CODE), array('Content-Type: application/json')));\n    }\n    \n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n    \n    curl_close($ch);\n    \n    $decodedResponse = json_decode($response);\n    return json_last_error() === JSON_ERROR_NONE ? $decodedResponse : null;\n}"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a set of PHP functions for making HTTP requests using cURL, including GET, POST, and HEAD methods, with configurable headers and timeouts.\n\nFunction Description: The functions provide a simple interface for making HTTP requests with cURL in PHP. They handle session initialization, option configuration, execution, and cleanup, while supporting common HTTP methods and header customization.\n\nInput:\n- For get(): \n  - $url: string - The target URL for the GET request\n  - $header: array - An array of HTTP headers to include in the request\n- For post(): \n  - $url: string - The target URL for the POST request\n  - $data: mixed - The data to send in the POST request body\n  - $header: array - An array of HTTP headers to include in the request\n- For gethead(): \n  - $url: string - The target URL for the HEAD request\n  - $header: array - An array of HTTP headers to include in the request\n\nOutput:\n- For get(): string - The response body from the GET request\n- For post(): string - The response body from the POST request\n- For gethead(): string - The response headers from the HEAD request",
    "Canonical_solution": "function get(string $url, array $header) {\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $header,\n        CURLOPT_TIMEOUT => 8,\n    ]);\n    $result = curl_exec($ch);\n    curl_close($ch);\n    return $result;\n}\n\nfunction post(string $url, $data, array $header) {\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $header,\n        CURLOPT_TIMEOUT => 8,\n        CURLOPT_POST => true,\n        CURLOPT_POSTFIELDS => $data,\n    ]);\n    $result = curl_exec($ch);\n    curl_close($ch);\n    return $result;\n}\n\nfunction gethead($url, $header) {\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $header,\n        CURLOPT_TIMEOUT => 8,\n        CURLOPT_HEADER => true,\n        CURLOPT_NOBODY => true,\n        CURLOPT_FOLLOWLOCATION => false,\n    ]);\n    $response = curl_exec($ch);\n    $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    curl_close($ch);\n    return substr($response, 0, $headerSize);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_exec($ch);\n    $responseHeaders = curl_getinfo($ch);\n    curl_close($ch);\n    return $responseHeaders;\n}"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations, including custom headers and SSL verification settings.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes timeout settings, custom user-agent header, disabled SSL verification (for development purposes), and follows redirects. The function returns the response content from the requested URL.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made\n\nOutput: \n- Returns the contents (string) of the HTTP response if successful\n- Returns false if the request fails (though error handling is minimal in this basic implementation)",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'CustomUserAgent/1.0');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        return false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Implement an HTTP client class in PHP using cURL to handle HTTP requests and responses, including error handling and response parsing.\n\nClass Description: Qiniu_HttpClient is a PHP class that provides functionality to execute HTTP requests using cURL. It handles request configuration, execution, error checking, and response parsing. The class is designed to work with Qiniu's API services.\n\nAttributes: \n(None - This class doesn't have any persistent attributes)\n\nMethods:\n\nRoundTrip: RoundTrip($req) -> array - Executes an HTTP request and returns the response and error information. \nInput: \n- $req: An object containing request details (URL, headers, body, etc.)\nOutput: \n- Returns an array with two elements: \n  1. A Qiniu_Response object containing the HTTP response (status code, body, headers) \n  2. A Qiniu_Error object if an error occurred, otherwise null\n\ngetReqInfo: getReqInfo($headerContent) -> array - Helper function to extract request information from response headers.\nInput:\n- $headerContent: String containing raw HTTP response headers\nOutput:\n- Returns an array with two elements:\n  1. reqid: The X-Reqid header value\n  2. xLog: The X-Log header value",
    "Canonical_solution": "require_once(\"auth_digest.php\");\nrequire_once(\"conf.php\");\n\nclass Qiniu_HttpClient\n{\n    public function RoundTrip($req) // => ($resp, $error)\n    {\n        $ch = curl_init();\n        $url = $req->URL;\n        $options = array(\n            CURLOPT_USERAGENT => $req->UA,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST  => 'POST',\n            CURLOPT_URL => $url['path']\n        );\n        $httpHeader = $req->Header;\n        if (!empty($httpHeader))\n        {\n            $header = array();\n            foreach($httpHeader as $key => $parsedUrlValue) {\n                $header[] = \"$key: $parsedUrlValue\";\n            }\n            $options[CURLOPT_HTTPHEADER] = $header;\n        }\n        $body = $req->Body;\n        if (!empty($body)) {\n            $options[CURLOPT_POSTFIELDS] = $body;\n        } else {\n            $options[CURLOPT_POSTFIELDS] = \"\";\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $err = new Qiniu_Error(0, curl_error($ch));\n            curl_close($ch);\n            return array(null, $err);\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $contentType = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n        curl_close($ch);\n\n        $responseArray = explode(\"\\r\\n\\r\\n\", $result);\n        $responseArraySize = sizeof($responseArray);\n        $respHeader = $responseArray[$responseArraySize-2];\n        $respBody = $responseArray[$responseArraySize-1];\n\n        list($reqid, $xLog) = getReqInfo($respHeader);\n\n        $resp = new Qiniu_Response($code, $respBody);\n        $resp->Header['Content-Type'] = $contentType;\n        $resp->Header[\"X-Reqid\"] = $reqid;\n        return array($resp, null);\n    }\n}\n\nfunction getReqInfo($headerContent) {\n    $headers = explode(\"\\r\\n\", $headerContent);\n    $reqid = null;\n    $xLog = null;\n    foreach($headers as $header) {\n        $header = trim($header);\n        if(strpos($header, 'X-Reqid') !== false) {\n            list($k, $v) = explode(':', $header);\n            $reqid = trim($v);\n        } elseif(strpos($header, 'X-Log') !== false) {\n            list($k, $v) = explode(':', $header);\n            $xLog = trim($v);\n        }\n    }\n    return array($reqid, $xLog);\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if (isset($req->headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        }\n        if (isset($req->body)) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n        \n        $response = new Qiniu_Response($httpCode, $responseBody, $this->getReqInfo($headerContent));\n        $errorObj = $error ? new Qiniu_Error($error) : null;\n        \n        return [$response, $errorObj];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = explode(\"\\r\\n\", trim($headerContent));\n        $reqid = null;\n        $xLog = null;\n        foreach ($headers as $header) {\n            if (stripos($header, 'X-Reqid:') === 0) {\n                $reqid = trim(substr($header, 8));\n            }\n            if (stripos($header, 'X-Log:') === 0) {\n                $xLog = trim(substr($header, 6));\n            }\n        }\n        return ['reqid' => $reqid, 'xLog' => $xLog];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a PHP function that extracts article information (title and cover image URL) from a WeChat public article URL using cURL and regular expressions.\n\nFunction Description: The function takes a WeChat article URL as input, fetches the HTML content using cURL, then extracts the article title and cover image URL using regular expressions. The cover image URL is processed through a third-party image service (weserv.nl) to get a standardized version. The function returns an associative array containing the extracted information and a success flag.\n\nInput: \n- $url (string): The URL of a WeChat public article (must contain 'mp.weixin.qq.com')\n\nOutput: \n- Returns an associative array with these keys:\n  - 'title' (string): Extracted article title (empty string if not found)\n  - 'cover' (string): Processed cover image URL (empty string if not found)\n  - 'success' (bool): True if both title and cover were successfully extracted",
    "Canonical_solution": "function get_wechat_article_info($url)\n{\n    $result = array(\n        'title' => '',\n        'cover' => '',\n        'success' => false\n    );\n\n    if (empty($url) || strpos($url, 'mp.weixin.qq.com') === false) {\n        return $result;\n    }\n\n    $ch = curl_init(htmlspecialchars_decode($url));\n    curl_setopt_array($ch, [\n        CURLOPT_VERBOSE => true,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => false,\n        CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',\n    ]);\n    $response = curl_exec($ch);\n\n    preg_match('/var msg_title = \\'[\\S\\s]*?\\'.html\\\\(false\\\\);/', $response, $matches);\n    $result['title'] = empty($matches[0]) ? '' : htmlspecialchars_decode(str_replace(['var msg_title = \\'', '\\'.html(false);'], '', $matches[0]));\n    preg_match('/var msg_cdn_url = \"[\\S\\s]*?\";/', $response, $matches);\n    $result['cover'] = empty($matches[0]) ? '' : str_replace(['var msg_cdn_url = \"', '\";'], '', $matches[0]);\n    curl_close($ch);\n\n    if (!empty($result['cover'])) {\n        $result['cover'] = 'https://images.weserv.nl/?' . http_build_query([\n            'url' => $result['cover'],\n            'il' => '',\n            'we' => '',\n            'h' => 360,\n            'q' => 70,\n        ]);\n    }\n\n    $result['success'] = !empty($result['title']) && !empty($result['cover']);\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function extractWeChatArticleInfo($url) {\n    if (strpos($url, 'mp.weixin.qq.com') === false) {\n        return ['title' => '', 'cover' => '', 'success' => false];\n    }\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    preg_match('/<title>(.*?)<\\/title>/', $html, $titleMatches);\n    preg_match('/<meta property=\"og:image\" content=\"(.*?)\"/', $html, $coverMatches);\n\n    $title = isset($titleMatches[1]) ? trim($titleMatches[1]) : '';\n    $cover = isset($coverMatches[1]) ? 'https://images.weserv.nl/?url=' . urlencode($coverMatches[1]) : '';\n\n    $success = !empty($title) && !empty($cover);\n\n    return ['title' => $title, 'cover' => $cover, 'success' => $success];\n}"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests to the OpenAI API using cURL, with support for different content types, streaming, and proxy configuration.\n\nClass Description: The OpenAi class is designed to interact with OpenAI's API by sending HTTP requests. It manages API keys, request headers, content types, and provides configuration options for timeouts, proxies, and custom URLs. The class supports both JSON and multipart/form-data content types and can handle streaming responses.\n\nAttributes:\n\nengine: [string] - Default engine for API requests (default: \"davinci\")\nmodel: [string] - Default model for text completions (default: \"text-davinci-002\")\nchatModel: [string] - Default model for chat completions (default: \"gpt-3.5-turbo\")\nheaders: [array] - Array of HTTP headers to be sent with requests\ncontentTypes: [array] - Mapping of content types to their header strings\ntimeout: [int] - Timeout for cURL requests in seconds (default: 0)\nstream_method: [object] - Callback method for handling streamed responses\ncustomUrl: [string] - Custom base URL to override the default API endpoint\nproxy: [string] - Proxy server address for requests\ncurlInfo: [array] - Information about the last cURL request\n\nMethods:\n\n__construct: [function]($OPENAI_API_KEY) -> [void] - Initializes the class with an API key and sets default headers\nsendRequest: [function](string $url, string $method, array $opts = []) -> [bool|string] - Sends an HTTP request to the specified URL with given method and options\nbaseUrl: [function](string &$url) -> [void] - Modifies the URL to use a custom base URL if configured",
    "Canonical_solution": "namespace Orhanerday\\OpenAi;\n\nuse Exception;\n\nclass OpenAi\n{\n    private string $engine = \"davinci\";\n    private string $model = \"text-davinci-002\";\n    private string $chatModel = \"gpt-3.5-turbo\";\n    private array $headers;\n    private array $contentTypes;\n    private int $timeout = 0;\n    private object $stream_method;\n    private string $customUrl = \"\";\n    private string $proxy = \"\";\n    private array $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY)\n    {\n        $this->contentTypes = [\n            \"application/json\"    => \"Content-Type: application/json\",\n            \"multipart/form-data\" => \"Content-Type: multipart/form-data\",\n        ];\n\n        $this->headers = [\n            $this->contentTypes[\"application/json\"],\n            \"Authorization: Bearer $OPENAI_API_KEY\",\n        ];\n    }\n\n    /**\n     * @param  string  $url\n     * @param  string  $method\n     * @param  array   $opts\n     * @return bool|string\n     */\n    private function sendRequest(string $url, string $method, array $opts = [])\n    {\n        $post_fields = json_encode($opts);\n\n        if (array_key_exists('file', $opts) || array_key_exists('image', $opts)) {\n            $this->headers[0] = $this->contentTypes[\"multipart/form-data\"];\n            $post_fields      = $opts;\n        } else {\n            $this->headers[0] = $this->contentTypes[\"application/json\"];\n        }\n        $curl_info = [\n            CURLOPT_URL            => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING       => '',\n            CURLOPT_MAXREDIRS      => 10,\n            CURLOPT_TIMEOUT        => $this->timeout,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST  => $method,\n            CURLOPT_POSTFIELDS     => $post_fields,\n            CURLOPT_HTTPHEADER     => $this->headers,\n        ];\n\n        if ($opts == []) {\n            unset($curl_info[CURLOPT_POSTFIELDS]);\n        }\n\n        if (!empty($this->proxy)) {\n            $curl_info[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if (array_key_exists('stream', $opts) && $opts['stream']) {\n            $curl_info[CURLOPT_WRITEFUNCTION] = $this->stream_method;\n        }\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, $curl_info);\n        $response = curl_exec($curl);\n\n        $info           = curl_getinfo($curl);\n        $this->curlInfo = $info;\n\n        curl_close($curl);\n\n        return $response;\n    }\n\n    /**\n     * @param  string  $url\n     */\n    private function baseUrl(string &$url)\n    {\n        if ($this->customUrl != \"\") {\n            $url = str_replace(Url::ORIGIN, $this->customUrl, $url);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class OpenAi {\n    private $engine = \"davinci\";\n    private $model = \"text-davinci-002\";\n    private $chatModel = \"gpt-3.5-turbo\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'application/json',\n        'form' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl;\n    private $proxy;\n    private $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers[] = \"Authorization: Bearer \" . $OPENAI_API_KEY;\n        $this->headers[] = \"Content-Type: \" . $this->contentTypes['json'];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $this->baseUrl($url);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n        if (strtoupper($method) === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts));\n        }\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    public function baseUrl(string &$url) {\n        if ($this->customUrl) {\n            $url = rtrim($this->customUrl, '/') . '/' . ltrim($url, '/');\n        }\n    }\n}"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP GET request to a specified URL using cURL, with custom headers and SSL verification disabled, and returns the response content.\n\nFunction Description: The function uses PHP's cURL library to perform an HTTP GET request to the Pipixia video detail API endpoint. It sets various cURL options including a custom user agent header, disables SSL verification for both peer and host, and configures connection timeout. The function returns the raw response content from the API.\n\nInput: \n- $id: string - The item ID to be appended to the API URL for fetching specific video details\n\nOutput: \n- string - The raw response content from the API call, or false if the request fails",
    "Canonical_solution": "function curl_pipiXia($id)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, \"https://h5.pipix.com/bds/webapi/item/detail/?item_id=\".$id);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function getVideoDetails($id) {\n    $url = \"https://api.pipixia.com/video/detail?id=\" . urlencode($id);\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: CustomUserAgent/1.0'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for web scraping purposes, including custom headers and SSL verification settings.\n\nFunction Description: The function `MCurl` performs an HTTP GET request to a specified URL using PHP's cURL library. It's designed for web scraping with a Baidu spider user agent, follows redirects, ignores SSL verification (for testing purposes), and returns the response body. This is particularly useful when you need to mimic a search engine crawler or bypass certain security restrictions during development.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made\n\nOutput: \n- Returns the response body (string) from the HTTP request if successful\n- Returns false if the request fails (though error handling should be added in production code)\n\nNote: The current implementation lacks proper error handling which should be added in a production environment. The SSL verification is disabled (CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST set to false) which is insecure for production use - this should only be used in development or with trusted connections.",
    "Canonical_solution": "use Typecho_Db;\nuse ReflectionClass;\n\nclass CatClaw_Action extends Widget_Abstract_Contents implements Widget_Interface_Do\n{\n    private function MCurl($url)\n    {\n        $headers[] = \"User-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\";\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HEADER, 0);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);\n        $tmpInfo = curl_exec($curl);\n        curl_close($curl);\n        return $tmpInfo;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response !== false ? $response : false;\n}"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for fetching remote resources with proper error handling and resource management.\n\nClass Description: The timthumb class provides functionality to download remote files using cURL with features like progress tracking, size limitations, and fallback to file_get_contents when cURL is unavailable. It handles various HTTP status codes and maintains error state.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing downloaded data\n- $curlDataWritten: [int] - Tracks the amount of data written during download\n- $lastURLError: [mixed] - Stores the last error encountered during URL fetching\n\nMethods:\n- curlWrite($h, $d) -> [int] - Static callback function for cURL write operations that writes data to file and tracks bytes written. Returns bytes processed or 0 if size limit exceeded.\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data chunk being written\n\n- getURL($url, $tempfile) -> [bool] - Main method to fetch a URL and save it to a temporary file. Returns true on success, false on failure.\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for storing downloaded content",
    "Canonical_solution": "Here's the extracted class-level code for the HTTP client using cURL in PHP:\n\n```php\nclass timthumb {\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d){\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if(self::$curlDataWritten > MAX_FILE_SIZE){\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile){\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if(function_exists('curl_init')){\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if(! self::$curlFH){\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt ($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt ($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt ($curl, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt ($curl, CURLOPT_HEADER, 0);\n            curl_setopt ($curl, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt ($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt ($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt ($curl, CURLOPT_MAXREDIRS, 10);\n            \n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if($httpStatus == 404){\n                $this->set404();\n            }\n            if($httpStatus == 302){\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if($curlResult){\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents ($url);\n            if($img === false){\n                $err = error_get_last();\n                if(is_array($err) && $err['message']){\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if(preg_match('/404/', $this->lastURLError)){\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if(! file_put_contents($tempfile, $img)){\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    private static function curlWrite($h, $d) {\n        $instance = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($instance->curlDataWritten + strlen($d) > 1048576) {\n            return 0; // Size limit exceeded\n        }\n        $bytesWritten = fwrite($instance->curlFH, $d);\n        $instance->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'w');\n        if (!$this->curlFH) {\n            $this->lastURLError = 'Unable to open temporary file.';\n            return false;\n        }\n\n        $ch = curl_init($url);\n        if (!$ch) {\n            $this->lastURLError = 'Unable to initialize cURL.';\n            fclose($this->curlFH);\n            return false;\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [__CLASS__, 'curlWrite']);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($result === false || $httpCode >= 400) {\n            $this->lastURLError = curl_error($ch);\n            fclose($this->curlFH);\n            curl_close($ch);\n            return false;\n        }\n\n        fclose($this->curlFH);\n        curl_close($ch);\n        return true;\n    }\n}"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a PHP function that retrieves a website's favicon.ico file from a given URL, caches it locally with a specified expiration time, and falls back to a default icon if retrieval fails or the file is not an image.\n\nFunction Description: The function attempts to fetch a favicon.ico file from a website URL, saves it to a local cache directory, and serves it with proper caching headers. If the remote favicon cannot be retrieved (invalid response, non-image content, or timeout), it falls back to a default icon. The function handles all HTTP operations via cURL and includes proper error checking and resource cleanup.\n\nInput:\n- $url: (string) The base URL of the website from which to fetch the favicon\n- $cache_time: (int) Duration in seconds for which the cached favicon should be considered valid\n- $default_ico: (string) Path to the default favicon file to use when retrieval fails\n- $basename: (string, optional) Name of the favicon file to look for (default: \"favicon.ico\")\n\nOutput:\n- The function outputs the favicon contents directly to the browser with appropriate headers\n- No explicit return value (void function)\n- Side effects: Creates/updates cache files in the designated cache directory",
    "Canonical_solution": "function pk_get_website_favicon_ico($url, $cache_time, $default_ico, $basename = \"favicon.ico\")\n{\n    $cache_filename = 'icon-'.md5($url) . '.ico';\n    $cache_file = dirname(__FILE__) . '/../cache/' . $cache_filename;\n    if (is_file($cache_file)) {\n        if (time() - filemtime($cache_file) <= $cache_time) {\n            pk_favicon_get_ico_contents($cache_file, $cache_filename);\n            return;\n        }\n    }\n    $ch = curl_init($url . '/' . $basename);\n    $ico_file = fopen($cache_file, 'w');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FAILONERROR, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_FILE, $ico_file);\n    curl_exec($ch);\n    fclose($ico_file);\n    if (curl_getinfo($ch, CURLINFO_HTTP_CODE) != 200) {\n        curl_close($ch);\n        @unlink($cache_file);\n        pk_favicon_put_default_and_output($cache_file, $cache_filename, $default_ico);\n        return;\n    }\n    $mimeArray = explode('/', curl_getinfo($ch, CURLINFO_CONTENT_TYPE));\n    curl_close($ch);\n    if (count($mimeArray) == 0 || $mimeArray[0] != 'image') {\n        @unlink($cache_file);\n        pk_favicon_put_default_and_output($cache_file, $cache_filename, $default_ico);\n        return;\n    }\n    pk_favicon_get_ico_contents($cache_file, $cache_filename);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function serveFavicon($url, $cache_time, $default_ico, $basename = 'favicon.ico') {\n    $cache_dir = 'cache/';\n    $cache_file = $cache_dir . md5($url) . '.ico';\n\n    if (file_exists($cache_file) && (time() - filemtime($cache_file) < $cache_time)) {\n        header('Content-Type: image/x-icon');\n        header('Cache-Control: max-age=' . $cache_time);\n        readfile($cache_file);\n        return;\n    }\n\n    $favicon_url = rtrim($url, '/') . '/' . $basename;\n    $ch = curl_init($favicon_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    $favicon_data = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    if ($http_code === 200 && strpos(curl_getinfo($ch, CURLINFO_CONTENT_TYPE), 'image') !== false) {\n        file_put_contents($cache_file, $favicon_data);\n        header('Content-Type: image/x-icon');\n        header('Cache-Control: max-age=' . $cache_time);\n        echo $favicon_data;\n    } else {\n        header('Content-Type: image/x-icon');\n        header('Cache-Control: max-age=' . $cache_time);\n        readfile($default_ico);\n    }\n}"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL for making GET requests and downloading files from URLs.\n\nClass Description: The HttpClient class encapsulates cURL functionality to perform HTTP GET requests and file downloads. It provides static methods for simple URL fetching and file downloading with proper error handling and resource management.\n\nAttributes: (This class doesn't have any attributes as it only contains static methods)\n\nMethods:\n\nMethod1: urlGet(string $url, bool $follow_location = true, int $timeout = 10) -> string|bool - Performs a GET request to the specified URL. Follows redirects by default and allows setting a timeout. Returns the response content or throws an exception on error.\n\nMethod2: fileGet(string $url, string $target) -> string|bool - Downloads a file from the specified URL and saves it to the target location. Returns the output or throws an exception on error. Uses a longer default timeout for file downloads.",
    "Canonical_solution": "namespace Froxlor\\Http;\n\nuse Exception;\nuse Froxlor\\Froxlor;\n\nclass HttpClient\n{\n    /**\n     * Executes simple GET request\n     *\n     * @param string $url\n     * @param bool $follow_location\n     * @param int $timeout\n     *\n     * @return bool|string\n     * @throws Exception\n     */\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Froxlor/' . Froxlor::getVersion());\n        if ($follow_location) {\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n        curl_setopt($ch, CURLOPT_TIMEOUT, (int)$timeout);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        $output = curl_exec($ch);\n        if ($output === false) {\n            $e = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"Curl error: \" . $e);\n        }\n        curl_close($ch);\n        return $output;\n    }\n\n    /**\n     * Downloads and stores a file from an url\n     *\n     * @param string $url\n     * @param string $target\n     *\n     * @return bool|string\n     * @throws Exception\n     */\n    public static function fileGet(string $url, string $target)\n    {\n        $fh = fopen($target, 'w');\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Froxlor/' . Froxlor::getVersion());\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 50);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FILE, $fh);\n        $output = curl_exec($ch);\n        if ($output === false) {\n            $e = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"Curl error: \" . $e);\n        }\n        curl_close($ch);\n        return $output;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('Curl error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target) {\n        $ch = curl_init($url);\n        $fp = fopen($target, 'w+');\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_exec($ch);\n        if (curl_errno($ch)) {\n            fclose($fp);\n            throw new Exception('Curl error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        fclose($fp);\n        return $target;\n    }\n}"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a PHP class that handles communication with a backend service through HTTP requests using cURL, supporting operations for task management.\n\nClass Description: The BackendService class provides methods to interact with a backend API for task management operations. It handles HTTP communication using cURL with proper error handling and response processing.\n\nAttributes:\n- None (Uses environment variables for configuration)\n\nMethods:\n- addTask(string $id) -> array - Sends a request to add a task with the given ID to the backend service. Returns an array with status and message.\n- restartTask(string $id) -> array - Sends a request to restart a task with the given ID on the backend service. Returns an array with status and message.\n- removeTask(string $id) -> array - Sends a request to remove a task with the given ID from the backend service. Returns an array with status and message.\n- setCurl(string $backendUrl, string $backendToken, string $operation, string $id) -> array - Internal method that handles the cURL request setup, execution, and response processing. Returns an array with status and message.",
    "Canonical_solution": "use Exception;\n\nclass BackendService\n{\n    public function addTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"addTask\", $id);\n    }\n\n    public function setCurl(string $backendUrl, string $backendToken, $operation, $id): array\n    {\n        if (!env('backend.enable_api')) return [\"status\" => true, \"msg\" => \"\u540e\u7aef\u63a5\u53e3\u672a\u542f\u7528\"];\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $backendUrl . \"/$operation\");\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\"token: $backendToken\"]);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, [\"id\" => $id]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        $result = curl_exec($ch);\n        $error = curl_error($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if (!$result || $error || $httpCode != 200)\n            return [\"status\" => false, \"msg\" => \"\u540e\u7aef\u63a5\u53e3\u5f02\u5e38\"];\n        else {\n            try {\n                $result = json_decode($result, true);\n                if (!$result[\"status\"])\n                    return [\"status\" => false, \"msg\" => $result[\"msg\"]];\n                else\n                    return [\"status\" => true, \"msg\" => $result[\"msg\"]];\n            } catch (Exception $e) {\n                return [\"status\" => false, \"msg\" => \"\u540e\u7aef\u63a5\u53e3\u5f02\u5e38\"];\n            }\n        }\n    }\n\n    public function restartTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"restartTask\", $id);\n    }\n\n    public function removeTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"removeTask\", $id);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class BackendService {\n    private $backendUrl;\n    private $backendToken;\n\n    public function __construct() {\n        $this->backendUrl = getenv('BACKEND_URL');\n        $this->backendToken = getenv('BACKEND_TOKEN');\n    }\n\n    public function addTask(string $id): array {\n        return $this->setCurl($this->backendUrl . '/tasks/add', $this->backendToken, 'POST', $id);\n    }\n\n    public function restartTask(string $id): array {\n        return $this->setCurl($this->backendUrl . '/tasks/restart', $this->backendToken, 'POST', $id);\n    }\n\n    public function removeTask(string $id): array {\n        return $this->setCurl($this->backendUrl . '/tasks/remove', $this->backendToken, 'DELETE', $id);\n    }\n\n    private function setCurl(string $url, string $token, string $operation, string $id): array {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $token,\n            'Content-Type: application/json'\n        ]);\n        \n        if ($operation === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['id' => $id]));\n        } elseif ($operation === 'DELETE') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['id' => $id]));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => 'Request failed with code ' . $httpCode];\n        }\n    }\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests using cURL with support for both HTTP and HTTPS protocols, including basic SSL verification handling and custom headers.\n\nFunction Description: The function should initialize a cURL session, configure it with the provided URL, set appropriate options for request handling (including SSL verification when needed), execute the request, handle potential errors, and return the response. The function should automatically detect HTTPS URLs and adjust SSL verification accordingly.\n\nInput: \n- $url (string): The target URL for the HTTP request (can be HTTP or HTTPS)\n\nOutput:\n- Returns the response body as a string if the request is successful\n- Returns false if the request fails (though error handling could be enhanced in a production environment)",
    "Canonical_solution": "function http_curl($url)\n{\n    $ssl = substr($url, 0, 8) == \"https://\" ? true : false;\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    if ($ssl) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    }\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'Referer: '.$_SERVER['SERVER_NAME']\n    ));\n    $out = curl_exec($ch);\n    curl_close($ch);\n    return $out;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function makeHttpRequest($url) {\n    $ch = curl_init();\n    \n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    \n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    }\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create a PHP class that interacts with Google Translate's unofficial API to translate text between languages.\n\nClass Description: The GoogleTranslate class provides functionality to translate text from a source language to a target language using Google's translation service. It handles the HTTP request/response cycle and processes the JSON response to extract the translated text.\n\nAttributes: None (This is a static utility class with no instance attributes)\n\nMethods:\n\nMethod1: translate(string $source, string $target, string $text) -> string - Translates the given text from the source language to the target language. Throws an exception if the input text exceeds 9000 characters.\n\nMethod2: requestTranslation(string $source, string $target, string $text) -> string - Makes an HTTP POST request to Google Translate's API with the specified parameters and returns the raw JSON response. Handles cURL initialization, option setting, execution, and cleanup.\n\nMethod3: getSentencesFromJSON(string $json) -> string - Parses the JSON response from Google Translate and extracts the translated sentences, concatenating them into a single string.",
    "Canonical_solution": "namespace Statickidz;\n\nclass GoogleTranslate\n{\n    public static function translate($source, $target, $text)\n    {\n        $response = self::requestTranslation($source, $target, $text);\n        $translation = self::getSentencesFromJSON($response);\n        return $translation;\n    }\n\n    protected static function requestTranslation($source, $target, $text)\n    {\n        $url = \"https://translate.google.com/translate_a/single?client=at&dt=t&dt=ld&dt=qca&dt=rm&dt=bd&dj=1&hl=es-ES&ie=UTF-8&oe=UTF-8&inputm=2&otf=2&iid=1dd3b944-fa62-4b55-b330-74909a99969e\";\n\n        $fields = array(\n            'sl' => urlencode($source),\n            'tl' => urlencode($target),\n            'q' => urlencode($text)\n        );\n\n        $max = 9000;\n        if(strlen($fields['q']) >= $max)\n            throw new \\Exception(\"Maximum number of characters exceeded: \".strlen($fields['q']).\"/$max\");\n        \n        $fields_string = \"\";\n        foreach ($fields as $key => $value) {\n            $fields_string .= $key . '=' . $value . '&';\n        }\n\n        rtrim($fields_string, '&');\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, count($fields));\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_ENCODING, 'UTF-8');\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'AndroidTranslate/5.3.0.RC02.130475354-53000263 5.1 phone TRANSLATE_OPM5_TEST_1');\n\n        $result = curl_exec($ch);\n        curl_close($ch);\n\n        return $result;\n    }\n\n    protected static function getSentencesFromJSON($json)\n    {\n        $sentencesArray = json_decode($json, true);\n        $sentences = \"\";\n\n        foreach ($sentencesArray[\"sentences\"] as $s) {\n            $sentences .= isset($s[\"trans\"]) ? $s[\"trans\"] : '';\n        }\n\n        return $sentences;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class GoogleTranslate {\n    public static function translate(string $source, string $target, string $text): string {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation(string $source, string $target, string $text): string {\n        $url = 'https://translate.googleapis.com/translate_a/single?client=gtx&sl=' . $source . '&tl=' . $target . '&dt=t&q=' . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON(string $json): string {\n        $data = json_decode($json, true);\n        $translatedText = '';\n        foreach ($data[0] as $sentence) {\n            $translatedText .= $sentence[0];\n        }\n        return $translatedText;\n    }\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's API to process refund requests, including request signing and HTTP communication using cURL.\n\nClass Description: The AlipayService class provides functionality to prepare and send refund requests to Alipay's payment gateway. It handles request signing, parameter encoding, and HTTP communication while maintaining necessary configuration parameters.\n\nAttributes:\n- appId: string - Alipay application ID\n- returnUrl: string - URL for returning after payment\n- notifyUrl: string - URL for payment notifications\n- charset: string - Character encoding (default: 'utf-8')\n- rsaPrivateKey: string - RSA private key for request signing\n- outTradeNo: string - Merchant's unique order number\n- tradeNo: string - Alipay's transaction number\n- refundAmount: string - Amount to be refunded\n\nMethods:\n- __construct() -> void - Initializes the class with default charset\n- setAppid(string $appid) -> void - Sets the Alipay application ID\n- setRsaPrivateKey(string $saPrivateKey) -> void - Sets the RSA private key\n- setOutTradeNo(string $outTradeNo) -> void - Sets the merchant's order number\n- settradeNo(string $tradeNo) -> void - Sets Alipay's transaction number\n- setRefundAmount(string $refundAmount) -> void - Sets the refund amount\n- doRefund() -> array - Processes refund request and returns response\n- generateSign(array $params, string $signType = \"RSA\") -> string - Generates request signature\n- sign(string $data, string $signType = \"RSA\") -> string - Signs the request data\n- checkEmpty(mixed $value) -> bool - Checks if value is empty\n- getSignContent(array $params) -> string - Prepares string for signing\n- characet(string $data, string $targetCharset) -> string - Handles character encoding conversion\n- curlPost(string $url = '', mixed $postData = '', array $options = array()) -> string - Executes cURL POST request",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $returnUrl;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $outTradeNo;\n    protected $tradeNo;\n    protected $refundAmount;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n    public function settradeNo($tradeNo)\n    {\n        $this->tradeNo = $tradeNo;\n    }\n    public function setRefundAmount($refundAmount)\n    {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund()\n    {\n        $requestConfigs = array(\n            'trade_no'=>$this->tradeNo,\n            'out_trade_no'=>$this->outTradeNo,\n            'refund_amount'=>$this->refundAmount,\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        $resultArr = json_decode($result,true);\n        return $resultArr;\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('\u60a8\u4f7f\u7528\u7684\u79c1\u94a5\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5RSA\u79c1\u94a5\u914d\u7f6e');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {\n    }\n\n    public function setAppid(string $appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey(string $rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo(string $outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setTradeNo(string $tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount(string $refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'return_url' => $this->returnUrl,\n            'notify_url' => $this->notifyUrl,\n            'out_trade_no' => $this->outTradeNo,\n            'trade_no' => $this->tradeNo,\n            'refund_amount' => $this->refundAmount,\n        ];\n        $params['sign'] = $this->generateSign($params);\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', $params);\n        return json_decode($response, true);\n    }\n\n    public function generateSign(array $params, string $signType = \"RSA\") {\n        $data = $this->getSignContent($params);\n        return $this->sign($data, $signType);\n    }\n\n    public function sign(string $data, string $signType = \"RSA\") {\n        openssl_sign($data, $sign, openssl_get_privatekey($this->rsaPrivateKey), OPENSSL_ALGO_SHA256);\n        return base64_encode($sign);\n    }\n\n    public function checkEmpty(mixed $value) {\n        return empty($value);\n    }\n\n    public function getSignContent(array $params) {\n        ksort($params);\n        $content = '';\n        foreach ($params as $key => $value) {\n            if (!$this->checkEmpty($value)) {\n                $content .= \"$key=$value&\";\n            }\n        }\n        return rtrim($content, '&');\n    }\n\n    public function characet(string $data, string $targetCharset) {\n        return iconv($this->charset, $targetCharset, $data);\n    }\n\n    public function curlPost(string $url = '', mixed $postData = '', array $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL, supporting both GET and POST methods, with optional SSL verification and file upload safety checks.\n\nFunction Description: The function makes HTTP requests to a specified URL, with optional POST data. It handles SSL verification automatically based on the URL scheme (https/http) and includes safety checks for file uploads. The function returns the raw response from the server.\n\nInput:\n- $url: string - The target URL for the HTTP request\n- $data: mixed (optional) - Data to be sent with POST request (default: empty string)\n\nOutput:\n- string - The raw response data from the server\n- false - If the cURL request fails (though error handling is minimal in this implementation)",
    "Canonical_solution": "function curl($url, $data = '')\n{\n    $ch = curl_init();\n    if (class_exists('\\CURLFile')) {\n        curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);\n    } else {\n        if (defined('CURLOPT_SAFE_UPLOAD')) {\n            curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false);\n        }\n    }\n    \n    preg_match('/https:\\/\\//', $url) ? $ssl = TRUE : $ssl = FALSE;\n    if ($ssl) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    }\n    \n    curl_setopt($ch, CURLOPT_URL, $url);\n    if (!empty($data)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\");\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    \n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $d = curl_exec($ch);\n    curl_close($ch);\n    return $d;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    \n    if (!empty($data)) {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    \n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    }\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's payment gateway, specifically for processing bar code payments. The class should handle request configuration, signature generation, and HTTP communication with Alipay's API.\n\nClass Description: The AlipayService class provides methods to configure and execute payments through Alipay's payment gateway. It handles parameter setting, request signing, and communication with Alipay's API endpoint.\n\nAttributes:\n- appId: [string] - The application ID provided by Alipay\n- charset: [string] - Character encoding (default: 'utf-8')\n- notifyUrl: [string] - URL for payment notifications\n- rsaPrivateKey: [string] - RSA private key for signing requests\n- totalFee: [string] - Total payment amount\n- outTradeNo: [string] - Merchant's unique order number\n- orderName: [string] - Description of the order\n- authCode: [string] - Customer's payment authorization code\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid($appid) -> [void] - Sets the Alipay application ID\n- setNotifyUrl($notifyUrl) -> [void] - Sets the notification URL\n- setRsaPrivateKey($rsaPrivateKey) -> [void] - Sets the RSA private key\n- setTotalFee($payAmount) -> [void] - Sets the payment amount\n- setOutTradeNo($outTradeNo) -> [void] - Sets the merchant order number\n- setOrderName($orderName) -> [void] - Sets the order description\n- setAuthCode($authCode) -> [void] - Sets the customer's payment auth code\n- doPay() -> [array] - Executes the payment request and returns the response\n- curlPost($url, $postData, $options) -> [string] - Sends a POST request to the specified URL (private method)\n- generateSign($params, $signType) -> [string] - Generates the request signature (private method, implementation not shown)",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $charset;\n    protected $notifyUrl;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n    protected $authCode;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl)\n    {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey)\n    {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName)\n    {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode)\n    {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay()\n    {\n        $requestConfigs = array(\n            'out_trade_no'=>$this->outTradeNo,\n            'scene'=>'bar_code',\n            'auth_code'=>$this->authCode,\n            'total_amount'=>$this->totalFee,\n            'subject'=>$this->orderName,\n            'store_id'=>'DEDEMAO_001',\n            'timeout_express'=>'2m',\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.pay',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "right_result": "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.pay',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n                'auth_code' => $this->authCode,\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return $this->curlPost($url, $params, []);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation not shown\n    }\n}"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP POST request to the OpenAI API's image generation endpoint using cURL, with proper headers, timeout settings, and error handling.\n\nFunction Description: The function sends a POST request to the OpenAI API to generate images based on the provided input data. It sets up necessary headers including authentication, configures cURL options for secure communication (with SSL verification disabled for testing purposes), handles redirects, and manages timeout settings. The function returns the raw API response.\n\nInput:\n- $postData: [string] - JSON-encoded string containing the image generation parameters\n- $OPENAI_API_KEY: [string] - The API key for authenticating with OpenAI's service\n\nOutput:\n- [string] - The raw response data from the API call, which should be a JSON string containing either the generated image information or an error message",
    "Canonical_solution": "function call_openai_api($postData, $OPENAI_API_KEY)\n{\n    $headers = [\n        'Accept: application/json',\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/images/generations');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);\n    curl_setopt($ch, CURLOPT_MAXREDIRS, 3);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n\n    $responsedata = curl_exec($ch);\n    curl_close($ch);\n\n    return $responsedata;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "right_result": "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = 'https://api.openai.com/v1/images/generations';\n    $ch = curl_init($url);\n    \n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    \n    $response = curl_exec($ch);\n    \n    if (curl_errno($ch)) {\n        $response = json_encode(['error' => curl_error($ch)]);\n    }\n    \n    curl_close($ch);\n    return $response;\n}"
  }
]