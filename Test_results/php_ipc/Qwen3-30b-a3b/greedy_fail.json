[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a PHP class that interacts with an Ollama API to generate responses using HTTP requests through the Guzzle HTTP client.\n\nClass Description: The Ollama class is designed to communicate with an Ollama API endpoint to generate responses based on provided prompts. It handles the configuration of the API request and processes the response.\n\nAttributes:\n- model: string - The name of the AI model to be used for generating responses.\n- prompt: string - The input text prompt to be sent to the AI model.\n- temperature: float - Controls the randomness of the output (higher values make output more random).\n- stream: bool - Determines whether the response should be streamed.\n- raw: bool - Specifies whether to use raw mode for the prompt processing.\n\nMethods:\n- __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) -> void - Initializes the Ollama instance with the specified parameters for model interaction.\n- ask() -> string - Sends a POST request to the Ollama API with the configured parameters and returns the generated response from the AI model.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Ollama\n{\n    /**\n     * New service instance.\n     */\n    public function __construct(\n        protected string $model,\n        protected string $prompt,\n        protected float $temperature,\n        protected bool $stream,\n        protected bool $raw,\n    ) {}\n\n    /**\n     * Set LLM prompt text.\n     */\n    public function ask(): string\n    {\n        $httpClient = new Client;\n\n        $endpoint = core()->getConfigData('general.magic_ai.settings.api_domain').'/api/generate';\n\n        $result = $httpClient->request('POST', $endpoint, [\n            'headers' => [\n                'Accept' => 'application/json',\n            ],\n            'json'    => [\n                'model'  => $this->model,\n                'prompt' => $this->prompt,\n                'raw'    => $this->raw,\n                'stream' => $this->stream,\n            ],\n        ]);\n\n        $result = json_decode($result->getBody()->getContents(), true);\n\n        return $result['response'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private string $model;\n    private string $prompt;\n    private float $temperature;\n    private bool $stream;\n    private bool $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $response = $client->post('http://localhost:11434/api/generate', [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'options' => [\n                    'temperature' => $this->temperature,\n                    'stream' => $this->stream,\n                    'raw' => $this->raw,\n                ],\n            ],\n        ]);\n\n        $body = $response->getBody();\n        $output = '';\n\n        if ($this->stream) {\n            while (!$body->eof()) {\n                $line = $body->read(8192);\n                $data = json_decode($line, true);\n                if (isset($data['response'])) {\n                    $output .= $data['response'];\n                }\n            }\n        } else {\n            $data = json_decode($body, true);\n            $output = $data['response'] ?? '';\n        }\n\n        return $output;\n    }\n}"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client for sending payment requests to an e-payment API using Guzzle.\n\nClass Description: The EpayHttpClient class is designed to handle HTTP communication with an e-payment API. It encapsulates the functionality for sending payment requests and processing the responses. The class uses Guzzle HTTP client for making requests and handles potential exceptions that may occur during the process.\n\nAttributes:\n- epay: array - Stores the configuration for the e-payment API\n- client: Client - The Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct(array $epayConfig) -> void - Initializes the class with e-payment configuration and creates a new Guzzle Client instance\n- sendPaymentRequest(array $data) -> array - Sends a payment request to the API endpoint and processes the response. Returns an array indicating success/failure and containing either the payment URL or an error message",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass EpayHttpClient\n{\n    protected array $epay;\n    protected Client $client;\n\n    public function __construct(array $epayConfig)\n    {\n        $this->epay = $epayConfig;\n        $this->client = new Client();\n    }\n\n    public function sendPaymentRequest(array $data): array\n    {\n        try {\n            $res = $this->client->request('POST', $this->epay['apiurl'] . 'mapi.php', ['form_params' => $data]);\n\n            if ($res->getStatusCode() !== 200) {\n                throw new Exception();\n            }\n\n            $resData = json_decode($res->getBody()->__toString(), true);\n\n            if ($resData['code'] !== 1 || !isset($resData['payurl'])) {\n                throw new Exception();\n            }\n\n            return [\n                'success' => true,\n                'payurl' => $resData['payurl']\n            ];\n        } catch (Exception|GuzzleException) {\n            return [\n                'success' => false,\n                'error' => '\u8bf7\u6c42\u652f\u4ed8\u5931\u8d25'\n            ];\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "```php\n<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client($epayConfig);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->post($this->epay['endpoint'], [\n                'json' => $data\n            ]);\n            $body = json_decode((string) $response->getBody(), true);\n            return isset($body['payment_url']) \n                ? ['success' => true, 'url' => $body['payment_url']] \n                : ['success' => false, 'error' => 'Invalid response format'];\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        } catch (\\Exception $e) {\n            return ['success' => false, 'error' => 'An unexpected error occurred: ' . $e->getMessage()];\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxies and basic authentication.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, proxy configuration, timeout settings, and basic authentication. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'assign': (string, optional) Template variable name to assign content to\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (int, optional) Proxy server port\n  - 'timeout': (int, optional) Connection timeout in seconds (default: 30)\n- $template: (object) The template object for assigning content (when 'assign' parameter is used)\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Assigns content to the specified template variable and returns nothing if 'assign' parameter is provided\n- Returns nothing and triggers notice on error conditions (invalid URL, connection failure)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            \n            $_is_proxy = false;\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        $proxy_port = (int)$param_value;\n                        break;\n                    case \"timeout\":\n                        $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "wrong_result": "```php\nfunction fetch_content($params, $template) {\n    if (!isset($params['file'])) {\n        trigger_error(\"Missing 'file' parameter\", E_NOTICE);\n        return;\n    }\n\n    $url = $params['file'];\n    $timeout = $params['timeout'] ?? 30;\n\n    $url_parts = parse_url($url);\n    if (!$url_parts || !isset($url_parts['scheme']) || !isset($url_parts['host'])) {\n        trigger_error(\"Invalid URL: $url\", E_NOTICE);\n        return;\n    }\n\n    $use_proxy = isset($params['proxy_host']);\n    $proxy_host = $params['proxy_host'] ?? null;\n    $proxy_port = $params['proxy_port'] ?? 80;\n\n    $proxy_user = null;\n    $proxy_pass = null;\n    if ($use_proxy && $proxy_host) {\n        if (strpos($proxy_host, '@') !== false) {\n            list($user_pass, $host_port) = explode('@', $proxy_host, 2);\n            if (strpos($host_port, ':') !== false) {\n                list($proxy_host, $proxy_port) = explode(':', $host_port, 2);\n                $proxy_port = (int)$proxy_port;\n            } else {\n                $proxy_host = $host_port;\n                $proxy_port = 80;\n            }\n            if (strpos($user_pass, ':') !== false) {\n                list($proxy_user, $proxy_pass) = explode(':', $user_pass, 2);\n            } else {\n                $proxy_user = $user_pass;\n                $proxy_pass = '';\n            }\n        } else {\n            if (strpos($proxy_host, ':') !== false) {\n                list($proxy_host, $proxy_port) = explode(':', $proxy_host, 2);\n                $proxy_port = (int)$proxy_port;\n            } else {\n                $proxy_port = 80;\n            }\n        }\n    }\n\n    $auth_header = null;\n    if (isset($url_parts['user'])) {\n        $auth = base64_encode($url_parts['user'] . ':' . $url_parts['pass']);\n        $auth_header = 'Authorization: Basic ' . $auth;\n    }\n\n    $headers = [];\n    if ($use_proxy && $proxy_user) {\n        $proxy_auth = base64_encode($proxy_user . ':' . $proxy_pass);\n        $headers[] = 'Proxy-Authorization: Basic ' . $proxy_auth;\n    }\n    if ($auth_header) {\n        $headers[] = $auth_header;\n    }\n    $headers[] = 'Host: ' . $url_parts['host'] . (isset($url_parts['port']) ? ':' . $url_parts['port'] : '');\n    $headers[] = 'Connection: Close';\n\n    $request = $use_proxy ? 'GET ' . $url . ' HTTP/1.1' : 'GET ' . $url_parts['path'] . (isset($url_parts['query']) ? '?' . $url_parts['query'] : '') . ' HTTP/1.1';\n    $request .= \"\\r\\n\";\n    $request .= implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\";\n\n    $host_to_connect = $use_proxy ? $proxy_host : $url_parts['host'];\n    $port_to_connect = $use_proxy ? $proxy_port : (isset($url_parts['port']) ? $url_parts['port'] : 80);\n\n    $fp = fsockopen($host_to_connect, $port_to_connect, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_NOTICE);\n        return;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fread($fp, 8192);\n    }\n    fclose($fp);\n\n    $response_lines = explode(\"\\r\\n\", $response);\n    $body = '';\n    $in_body = false;\n    foreach ($response_lines as $line) {\n        if ($in_body) {\n            $body .= $line . \"\\r\\n\";\n        } else {\n            if ($line === '') {\n                $in_body = true;\n            }\n        }\n    }\n    $body = rtrim($body, \"\\r\\n\");\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}\n```"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Implement a class that handles HTTP POST requests to Google's reCAPTCHA verification service using low-level socket operations in PHP.\n\nClass Description: ReCaptchaSocketPostRequestMethod is a class that implements reCAPTCHA verification by establishing a direct socket connection to Google's servers, sending an HTTP POST request, and processing the response. It provides an alternative to higher-level HTTP clients.\n\nAttributes:\n- socket: [ReCaptchaSocket] - The socket connection handler used for HTTP communication\n- RECAPTCHA_HOST: [string] - Constant storing Google's reCAPTCHA hostname ('www.google.com')\n- SITE_VERIFY_PATH: [string] - Constant storing the reCAPTCHA verification endpoint path ('/recaptcha/api/siteverify')\n- BAD_REQUEST: [string] - Constant JSON response for failed requests\n- BAD_RESPONSE: [string] - Constant JSON response for invalid server responses\n\nMethods:\n- __construct([ReCaptchaSocket $socket = null]) -> [void] - Initializes the class with an optional socket dependency injection\n- submit(ReCaptchaRequestParameters $params) -> [string] - Performs the reCAPTCHA verification by:\n  1. Opening an SSL socket connection to Google's server\n  2. Formatting and sending an HTTP POST request with verification parameters\n  3. Reading and parsing the server response\n  4. Returning the verification result as JSON string\n  Returns either the server response or error JSON if the request/response fails",
    "Canonical_solution": "class ReCaptchaSocketPostRequestMethod implements ReCaptchaRequestMethod\n{\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\": false, \"error-codes\": [\"invalid-request\"]}';\n    const BAD_RESPONSE = '{\"success\": false, \"error-codes\": [\"invalid-response\"]}';\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null)\n    {\n        if (!is_null($socket)) {\n            $this->socket = $socket;\n        } else {\n            $this->socket = new ReCaptchaSocket();\n        }\n    }\n\n    public function submit(ReCaptchaRequestParameters $params)\n    {\n        $errno = 0;\n        $errstr = '';\n\n        if (false === $this->socket->fsockopen('ssl://' . self::RECAPTCHA_HOST, 443, $errno, $errstr, 30)) {\n            return self::BAD_REQUEST;\n        }\n\n        $content = $params->toQueryString();\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-length: \" . strlen($content) . \"\\r\\n\";\n        $request .= \"Connection: close\\r\\n\\r\\n\";\n        $request .= $content . \"\\r\\n\\r\\n\";\n\n        $this->socket->fwrite($request);\n        $response = '';\n\n        while (!$this->socket->feof()) {\n            $response .= $this->socket->fgets(4096);\n        }\n\n        $this->socket->fclose();\n\n        if (0 !== strpos($response, 'HTTP/1.1 200 OK')) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = preg_split(\"#\\n\\s*\\n#Uis\", $response);\n\n        return $parts[1];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "```php\nclass ReCaptchaSocketPostRequestMethod {\n    private $socket;\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"invalid-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"invalid-response\"]}';\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?? new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params) {\n        $this->socket->connect('ssl://www.google.com', 443);\n        $postData = http_build_query($params->getParameters());\n        $headers = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $headers .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $headers .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $headers .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n        $headers .= \"Connection: close\\r\\n\\r\\n\";\n\n        $this->socket->write($headers . $postData);\n        $response = $this->socket->read();\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headersResp = $parts[0];\n        $body = $parts[1] ?? '';\n\n        if (strpos($headersResp, '200 OK') === false) {\n            return self::BAD_REQUEST;\n        }\n\n        $json = json_decode($body, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n```"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a PHP class for handling HTTP/HTTPS communications using either socket-based connections (via fsockopen) or cURL, supporting both standard and persistent connections, with proper header and cookie management.\n\nClass Description: The soap_transport_http class provides low-level HTTP transport capabilities for SOAP communications, supporting both socket and cURL implementations. It handles connection management, request/response processing, and error handling.\n\nAttributes:\n- url: string - The target URL for HTTP requests\n- uri: string - The URI portion of the URL\n- scheme: string - The protocol scheme (http/https)\n- host: string - The target hostname\n- port: string - The target port number\n- path: string - The path portion of the URL\n- request_method: string - HTTP method (default: POST)\n- protocol_version: string - HTTP version (default: 1.0)\n- outgoing_headers: array - Headers to be sent with the request\n- incoming_headers: array - Headers received in the response\n- outgoing_payload: string - Data to be sent in the request\n- incoming_payload: string - Data received in the response\n- persistentConnection: bool - Flag for persistent connections\n- use_curl: bool - Flag to use cURL instead of sockets\n- proxy: array|null - Proxy configuration if used\n\nMethods:\n- __construct(string $url, array $curl_options=null, bool $use_curl=false) -> void - Initializes the transport with target URL and options\n- connect(int $connection_timeout=0, int $response_timeout=30) -> bool - Establishes connection to server\n- send(string $data, int $timeout=0, int $response_timeout=30, array $cookies=null) -> mixed - Sends data and returns response\n- sendRequest(string $data, array $cookies=null) -> bool - Sends the HTTP request with headers\n- getResponse() -> string|bool - Reads and processes the server response\n- setHeader(string $name, string $value) -> void - Adds a header to outgoing request\n- setCurlOption(mixed $option, mixed $value) -> void - Sets cURL option when using cURL\n- parseCookie(string $cookie_str) -> array|bool - Parses Set-Cookie header into array",
    "Canonical_solution": "class soap_transport_http extends nusoap_base {\n    var $url = '';\n    var $uri = '';\n    var $digest_uri = '';\n    var $scheme = '';\n    var $host = '';\n    var $port = '';\n    var $path = '';\n    var $request_method = 'POST';\n    var $protocol_version = '1.0';\n    var $encoding = '';\n    var $outgoing_headers = array();\n    var $incoming_headers = array();\n    var $incoming_cookies = array();\n    var $outgoing_payload = '';\n    var $incoming_payload = '';\n    var $response_status_line;\n    var $useSOAPAction = true;\n    var $persistentConnection = false;\n    var $ch = false;\n    var $ch_options = array();\n    var $use_curl = false;\n    var $proxy = null;\n    var $username = '';\n    var $password = '';\n    var $authtype = '';\n    var $digestRequest = array();\n    var $certRequest = array();\n\n    function soap_transport_http($url, $curl_options = NULL, $use_curl = false) {\n        parent::nusoap_base();\n        $this->debug(\"ctor url=$url use_curl=$use_curl curl_options:\");\n        $this->appendDebug($this->varDump($curl_options));\n        $this->setURL($url);\n        if (is_array($curl_options)) {\n            $this->ch_options = $curl_options;\n        }\n        $this->use_curl = $use_curl;\n        preg_match('/\\$Revisio' . 'n: ([^ ]+)/', $this->revision, $rev);\n        $this->setHeader('User-Agent', $this->title.'/'.$this->version.' ('.$rev[1].')');\n    }\n\n    function connect($connection_timeout=0,$response_timeout=30) {\n        $this->debug(\"connect connection_timeout $connection_timeout, response_timeout $response_timeout, scheme $this->scheme, host $this->host, port $this->port\");\n        if ($this->io_method() == 'socket') {\n            if (!is_array($this->proxy)) {\n                $host = $this->host;\n                $port = $this->port;\n            } else {\n                $host = $this->proxy['host'];\n                $port = $this->proxy['port'];\n            }\n\n            if($this->persistentConnection && isset($this->fp) && is_resource($this->fp)){\n                if (!feof($this->fp)) {\n                    $this->debug('Re-use persistent connection');\n                    return true;\n                }\n                fclose($this->fp);\n                $this->debug('Closed persistent connection at EOF');\n            }\n\n            if ($this->scheme == 'ssl') {\n                $host = 'ssl://' . $host;\n            }\n            $this->debug('calling fsockopen with host ' . $host . ' connection_timeout ' . $connection_timeout);\n\n            if($connection_timeout > 0){\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str, $connection_timeout);\n            } else {\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str);\n            }\n            \n            if(!$this->fp) {\n                $msg = 'Couldn\\'t open socket connection to server ' . $this->url;\n                if ($this->errno) {\n                    $msg .= ', Error ('.$this->errno.'): '.$this->error_str;\n                } else {\n                    $msg .= ' prior to connect().  This is often a problem looking up the host name.';\n                }\n                $this->debug($msg);\n                $this->setError($msg);\n                return false;\n            }\n            \n            $this->debug('set response timeout to ' . $response_timeout);\n            socket_set_timeout( $this->fp, $response_timeout);\n\n            $this->debug('socket connected');\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            if (!extension_loaded('curl')) {\n                $this->setError('The PHP cURL Extension is required for HTTPS or NLTM.  You will need to re-build or update your PHP to include cURL or change php.ini to load the PHP cURL extension.');\n                return false;\n            }\n            $this->debug('connect using cURL');\n            $this->ch = curl_init();\n            $hostURL = ($this->port != '') ? \"$this->scheme://$this->host:$this->port\" : \"$this->scheme://$this->host\";\n            $hostURL .= $this->path;\n            $this->setCurlOption(CURLOPT_URL, $hostURL);\n            if (ini_get('safe_mode') || ini_get('open_basedir')) {\n                $this->debug('safe_mode or open_basedir set, so do not set CURLOPT_FOLLOWLOCATION');\n            } else {\n                $this->setCurlOption(CURLOPT_FOLLOWLOCATION, 1);\n            }\n            $this->setCurlOption(CURLOPT_HEADER, 1);\n            $this->setCurlOption(CURLOPT_RETURNTRANSFER, 1);\n            if ($this->persistentConnection) {\n                $this->persistentConnection = false;\n                $this->setHeader('Connection', 'close');\n            }\n            if ($connection_timeout != 0) {\n                $this->setCurlOption(CURLOPT_CONNECTIONTIMEOUT, $connection_timeout);\n            }\n            if ($response_timeout != 0) {\n                $this->setCurlOption(CURLOPT_TIMEOUT, $response_timeout);\n            }\n            $this->debug('cURL connection set up');\n            return true;\n        } else {\n            $this->setError('Unknown scheme ' . $this->scheme);\n            $this->debug('Unknown scheme ' . $this->scheme);\n            return false;\n        }\n    }\n\n    function send($data, $timeout=0, $response_timeout=30, $cookies=NULL) {\n        $this->debug('entered send() with data of length: '.strlen($data));\n        $this->tryagain = true;\n        $tries = 0;\n        while ($this->tryagain) {\n            $this->tryagain = false;\n            if ($tries++ < 2) {\n                if (!$this->connect($timeout, $response_timeout)){\n                    return false;\n                }\n                if (!$this->sendRequest($data, $cookies)){\n                    return false;\n                }\n                $respdata = $this->getResponse();\n            } else {\n                $this->setError(\"Too many tries to get an OK response ($this->response_status_line)\");\n            }\n        }        \n        $this->debug('end of send()');\n        return $respdata;\n    }\n\n    function sendRequest($data, $cookies = NULL) {\n        $cookie_str = $this->getCookiesForRequest($cookies, (($this->scheme == 'ssl') || ($this->scheme == 'https')));\n        $this->buildPayload($data, $cookie_str);\n        if ($this->io_method() == 'socket') {\n            if(!fputs($this->fp, $this->outgoing_payload, strlen($this->outgoing_payload))) {\n                $this->setError('couldn\\'t write message data to socket');\n                $this->debug('couldn\\'t write message data to socket');\n                return false;\n            }\n            $this->debug('wrote data to socket, length = ' . strlen($this->outgoing_payload));\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            $curl_headers = array();\n            foreach($this->outgoing_headers as $k => $v){\n                if ($k == 'Connection' || $k == 'Content-Length' || $k == 'Host' || $k == 'Authorization' || $k == 'Proxy-Authorization') {\n                    $this->debug(\"Skip cURL header $k: $v\");\n                } else {\n                    $curl_headers[] = \"$k: $v\";\n                }\n            }\n            if ($cookie_str != '') {\n                $curl_headers[] = 'Cookie: ' . $cookie_str;\n            }\n            $this->setCurlOption(CURLOPT_HTTPHEADER, $curl_headers);\n            $this->debug('set cURL HTTP headers');\n            if ($this->request_method == \"POST\") {\n                $this->setCurlOption(CURLOPT_POST, 1);\n                $this->setCurlOption(CURLOPT_POSTFIELDS, $data);\n                $this->debug('set cURL POST data');\n            }\n            foreach ($this->ch_options as $key => $val) {\n                $this->setCurlOption($key, $val);\n            }\n            $this->debug('set cURL payload');\n            return true;\n        }\n    }\n\n    function getResponse(){\n        $this->incoming_payload = '';\n        if ($this->io_method() == 'socket') {\n            $data = '';\n            while (!isset($lb)){\n                if(feof($this->fp)) {\n                    $this->incoming_payload = $data;\n                    $this->debug('found no headers before EOF after length ' . strlen($data));\n                    $this->debug(\"received before EOF:\\n\" . $data);\n                    $this->setError('server failed to send headers');\n                    return false;\n                }\n                $tmp = fgets($this->fp, 256);\n                $tmplen = strlen($tmp);\n                $this->debug(\"read line of $tmplen bytes: \" . trim($tmp));\n                if ($tmplen == 0) {\n                    $this->incoming_payload = $data;\n                    $this->debug('socket read of headers timed out after length ' . strlen($data));\n                    $this->debug(\"read before timeout: \" . $data);\n                    $this->setError('socket read of headers timed out');\n                    return false;\n                }\n                $data .= $tmp;\n                $pos = strpos($data,\"\\r\\n\\r\\n\");\n                if($pos > 1){\n                    $lb = \"\\r\\n\";\n                } else {\n                    $pos = strpos($data,\"\\n\\n\");\n                    if($pos > 1){\n                        $lb = \"\\n\";\n                    }\n                }\n                if (isset($lb) && preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    unset($lb);\n                    $data = '';\n                }\n            }\n            $this->incoming_payload .= $data;\n            $this->debug('found end of headers after length ' . strlen($data));\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $this->incoming_headers = array();\n            $this->incoming_cookies = array();\n            foreach($header_array as $header_line){\n                $arr = explode(':',$header_line, 2);\n                if(count($arr) > 1){\n                    $header_name = strtolower(trim($arr[0]));\n                    $this->incoming_headers[$header_name] = trim($arr[1]);\n                    if ($header_name == 'set-cookie') {\n                        $cookie = $this->parseCookie(trim($arr[1]));\n                        if ($cookie) {\n                            $this->incoming_cookies[] = $cookie;\n                            $this->debug('found cookie: ' . $cookie['name'] . ' = ' . $cookie['value']);\n                        } else {\n                            $this->debug('did not find cookie in ' . trim($arr[1]));\n                        }\n                    }\n                } else if (isset($header_name)) {\n                    $this->incoming_headers[$header_name] .= $lb . ' ' . $header_line;\n                }\n            }\n            if (isset($this->incoming_headers['transfer-encoding']) && strtolower($this->incoming_headers['transfer-encoding']) == 'chunked') {\n                $content_length =  2147483647;\n                $chunked = true;\n                $this->debug(\"want to read chunked content\");\n            } elseif (isset($this->incoming_headers['content-length'])) {\n                $content_length = $this->incoming_headers['content-length'];\n                $chunked = false;\n                $this->debug(\"want to read content of length $content_length\");\n            } else {\n                $content_length =  2147483647;\n                $chunked = false;\n                $this->debug(\"want to read content to EOF\");\n            }\n            $data = '';\n            do {\n                if ($chunked) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk line of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk length timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk length timed out');\n                        return false;\n                    }\n                    $content_length = hexdec(trim($tmp));\n                    $this->debug(\"chunk length $content_length\");\n                }\n                $strlen = 0;\n                while (($strlen < $content_length) && (!feof($this->fp))) {\n                    $readlen = min(8192, $content_length - $strlen);\n                    $tmp = fread($this->fp, $readlen);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read buffer of $tmplen bytes\");\n                    if (($tmplen == 0) && (!feof($this->fp))) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of body timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of body timed out');\n                        return false;\n                    }\n                    $strlen += $tmplen;\n                    $data .= $tmp;\n                }\n                if ($chunked && ($content_length > 0)) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk terminator of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk terminator timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk terminator timed out');\n                        return false;\n                    }\n                }\n            } while ($chunked && ($content_length > 0) && (!feof($this->fp)));\n            if (feof($this->fp)) {\n                $this->debug('read to EOF');\n            }\n            $this->debug('read body of length ' . strlen($data));\n            $this->incoming_payload .= $data;\n            $this->debug('received a total of '.strlen($this->incoming_payload).' bytes of data from server');\n            if(\n                (isset($this->incoming_headers['connection']) && strtolower($this->incoming_headers['connection']) == 'close') || \n                (! $this->persistentConnection) || feof($this->fp)){\n                fclose($this->fp);\n                $this->fp = false;\n                $this->debug('closed socket');\n            }\n            if($this->incoming_payload == ''){\n                $this->setError('no response from server');\n                return false;\n            }\n            return $data;\n        } else if ($this->io_method() == 'curl') {\n            $this->debug('send and receive with cURL');\n            $this->incoming_payload = curl_exec($this->ch);\n            $data = $this->incoming_payload;\n            $cErr = curl_error($this->ch);\n            if ($cErr != '') {\n                $err = 'cURL ERROR: '.curl_errno($this->ch).': '.$cErr.'<br>';\n                foreach(curl_getinfo($this->ch) as $k => $v){\n                    $err .= \"$k: $v<br>\";\n                }\n                $this->debug($err);\n                $this->setError($err);\n                curl_close($this->ch);\n                return false;\n            }\n            $this->debug('No cURL error, closing cURL');\n            curl_close($this->ch);\n            $savedata = $data;\n            while ($this->isSkippableCurlHeader($data)) {\n                $this->debug(\"Found HTTP header to skip\");\n                if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                    $data = ltrim(substr($data,$pos));\n                } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                    $data = ltrim(substr($data,$pos));\n                }\n            }\n            if ($data == '') {\n                $data = $savedata;\n                while (preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                        $data = ltrim(substr($data,$pos));\n                    } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                        $data = ltrim(substr($data,$pos));\n                    }\n                }\n            }\n            if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                $lb = \"\\r\\n\";\n            } elseif( $pos = strpos($data,\"\\n\\n\")) {\n                $lb = \"\\n\";\n            } else {\n                $this->debug('no proper separation of headers and document');\n                $this->setError('no proper separation of headers and document');\n                return false;\n            }\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $data = ltrim(substr($data,$pos));\n            $this->debug('found proper separation of headers and document');\n            $this->debug('cleaned data, stringlen: '.strlen($data));\n            foreach ($header_array as $header_line) {\n                $arr = explode(':',$header_line",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "<?php\nclass soap_transport_http {\n    private $url;\n    private $uri;\n    private $scheme;\n    private $host;\n    private $port;\n    private $path;\n    private $request_method = 'POST';\n    private $protocol_version = '1.0';\n    private $outgoing_headers = [];\n    private $incoming_headers = [];\n    private $outgoing_payload;\n    private $incoming_payload;\n    private $persistentConnection = false;\n    private $use_curl = false;\n    private $proxy = null;\n    private $ch;\n    private $fp;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $parsed = parse_url($url);\n        $this->scheme = $parsed['scheme'] ?? 'http';\n        $this->host = $parsed['host'] ?? '';\n        $this->port = $parsed['port'] ?? ($this->scheme === 'https' ? 443 : 80);\n        $this->path = $parsed['path'] ?? '/';\n        $this->uri = $parsed['path'] . ($parsed['query'] ? '?' . $parsed['query'] : '');\n        $this->use_curl = $use_curl;\n        $this->curl_options = $curl_options ?? [];\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->ch = curl_init();\n            curl_setopt($this->ch, CURLOPT_URL, $this->url);\n            curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->ch, CURLOPT_TIMEOUT, $response_timeout);\n            if ($this->persistentConnection) {\n                curl_setopt($this->ch, CURLOPT_FRESH_CONNECT, false);\n                curl_setopt($this->ch, CURLOPT_FORBID_REUSE, false);\n            }\n            if ($this->proxy) {\n                curl_setopt($this->ch, CURLOPT_PROXY, $this->proxy['host']);\n                curl_setopt($this->ch, CURLOPT_PROXYPORT, $this->proxy['port']);\n                if (isset($this->proxy['username'])) {\n                    curl_setopt($this->ch, CURLOPT_PROXYUSERPWD, $this->proxy['username'] . ':' . $this->proxy['password']);\n                }\n            }\n            foreach ($this->curl_options as $option => $value) {\n                curl_setopt($this->ch, $option, $value);\n            }\n            return true;\n        } else {\n            $this->fp = fsockopen(\n                $this->scheme === 'https' ? 'ssl://' . $this->host : $this->host,\n                $this->port,\n                $errno,\n                $errstr,\n                $connection_timeout,\n                $this->persistentConnection ? 1 : 0\n            );\n            if (!$this->fp) return false;\n            stream_set_timeout($this->fp, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        $this->sendRequest($data, $cookies);\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        if ($this->use_curl) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->ch, CURLOPT_HTTPHEADER, $this->getHeaders($cookies));\n            curl_exec($this->ch);\n        } else {\n            $headers = $this->getHeaders($cookies);\n            $request = \"$this->request_method $this->uri HTTP/$this->protocol_version\\r\\n\";\n            foreach ($headers as $header) {\n                $request .= \"$header\\r\\n\";\n            }\n            $request .= \"\\r\\n$data\";\n            fwrite($this->fp, $request);\n        }\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $response = curl_exec($this->ch);\n            $this->incoming_headers = curl_getinfo($this->ch);\n            return $response;\n        } else {\n            $response = '';\n            $headers = [];\n            $header_line = '';\n            while ($header_line = fgets($this->fp)) {\n                $header_line = trim($header_line);\n                if ($header_line === '') break;\n                $headers[] = $header_line;\n            }\n            $this->incoming_headers = $headers;\n            $this->incoming_payload = stream_get_contents($this->fp);\n            return $this->incoming_payload;\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        $this->curl_options[$option] = $value;\n    }\n\n    public function parseCookie($cookie_str) {\n        $parts = explode(';', $cookie_str);\n        $cookie = [];\n        $first_part = array_shift($parts);\n        list($name, $value) = explode('=', $first_part, 2);\n        $cookie['name'] = trim($name);\n        $cookie['value'] = trim($value);\n        foreach ($parts as $part) {\n            $part = trim($part);\n            if (strpos($part, '=') !== false) {\n                list($key, $val) = explode('=', $part, 2);\n                $cookie[trim($key)] = trim($val);\n            } else {\n                $cookie[trim($part)] = true;\n            }\n        }\n        return $cookie;\n    }\n\n    private function getHeaders($cookies) {\n        $headers = [];\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        if ($cookies) {\n            $headers[] = \"Cookie: \" . $this->formatCookies($cookies);\n        }\n        return $headers;\n    }\n\n    private function formatCookies($cookies) {\n        $cookie_str = '';\n        foreach ($cookies as $name => $value) {\n            $cookie_str .= \"$name=$value; \";\n        }\n        return rtrim($cookie_str, '; ');\n    }\n}\n?>"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxy configuration and timeout settings.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy server if configured), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, connection establishment, request sending, response reading, and connection closing. The function can either return the fetched content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (integer, optional) Proxy server port\n  - 'timeout': (integer, optional) Connection timeout in seconds (default: 30)\n  - 'assign': (string, optional) Template variable name to assign the content to\n- $template: (object) The template object for assigning content when 'assign' parameter is used\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Returns nothing (void) if 'assign' parameter is provided (content is assigned to template instead)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        if (!empty($param_value)) {\n                            $proxy_host = $param_value;\n                        }\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $proxy_port = (int) $param_value;\n                        }\n                        break;\n                    case \"timeout\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $timeout = (int) $param_value;\n                        }\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "wrong_result": "function fetchContent($params, $template) {\n    $url = parse_url($params['file']);\n    $timeout = $params['timeout'] ?? 30;\n    $proxy_host = $params['proxy_host'] ?? null;\n    $proxy_port = $params['proxy_port'] ?? 80;\n\n    $host = $url['host'];\n    $port = isset($url['port']) ? $url['port'] : 80;\n\n    if ($proxy_host) {\n        $host = $proxy_host;\n        $port = $proxy_port;\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return '';\n    }\n\n    $request_line = \"GET \" . ($proxy_host ? \"http://$url[host]\" : \"\") . $url['path'] . (isset($url['query']) ? \"?\" . $url['query'] : \"\") . \" HTTP/1.1\\r\\n\";\n    $headers = \"Host: $url[host]\\r\\n\";\n    $headers .= \"Connection: Close\\r\\n\";\n    $request = $request_line . $headers . \"\\r\\n\";\n\n    fwrite($fp, $request);\n\n    $response = stream_get_contents($fp);\n    fclose($fp);\n\n    $header_end = strpos($response, \"\\r\\n\\r\\n\");\n    $body = $header_end === false ? '' : substr($response, $header_end + 4);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a PHP class that handles file uploads to a specified host using HTTP PUT requests with Guzzle HTTP client, including CRC32 checksum verification.\n\nClass Description: ImageX is a class that extends V4Curl and provides functionality to upload files to a remote server. It handles file validation, CRC32 checksum generation, and HTTP communication using Guzzle's HTTP client.\n\nAttributes: (No explicit attributes in this class - it inherits from V4Curl)\n\nMethods:\nupload: [upload](string $uploadHost, array $storeInfo, string $filePath) -> int - Uploads a file to the specified host using HTTP PUT request. Validates file existence, calculates CRC32 checksum, and sends the file with appropriate headers. Returns 0 on success, -1 if file doesn't exist, or -2 if upload fails.\n\nParameters:\n- $uploadHost: string - The host address to upload to\n- $storeInfo: array - Contains 'StoreUri' for upload endpoint and 'Auth' for authorization\n- $filePath: string - Local path to the file to be uploaded\n\nReturn:\n- int: 0 for success, -1 for file not found, -2 for upload failure",
    "Canonical_solution": "use Volc\\Base\\V4Curl;\nuse GuzzleHttp\\Client;\n\nclass ImageX extends V4Curl\n{\n    public function upload(string $uploadHost, $storeInfo, string $filePath)\n    {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n        $content = file_get_contents($filePath);\n        $crc32 = sprintf(\"%08x\", crc32($content));\n\n        $body = fopen($filePath, \"r\");\n        $tosClient = new Client([\n            'base_uri' => \"https://\" . $uploadHost,\n            'timeout' => 5.0,\n        ]);\n\n        $response = $tosClient->request('PUT', $storeInfo[\"StoreUri\"], [\"body\" => $body, \"headers\" => ['Authorization' => $storeInfo[\"Auth\"], 'Content-CRC32' => $crc32]]);\n        $uploadResponse = json_decode((string) $response->getBody(), true);\n        if (!isset($uploadResponse[\"success\"]) || $uploadResponse[\"success\"] != 0) {\n            return -2;\n        }\n        return 0;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "```php\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileSize = filesize($filePath);\n        $crc32 = strtoupper(dechex(crc32_file($filePath)));\n\n        $url = $uploadHost . $storeInfo['StoreUri'];\n\n        $client = new \\GuzzleHttp\\Client();\n\n        $options = [\n            'headers' => [\n                'Authorization' => $storeInfo['Auth'],\n                'Content-Type' => 'application/octet-stream',\n                'Content-Length' => $fileSize,\n                'X-CRC32' => $crc32,\n            ],\n            'body' => fopen($filePath, 'r'),\n        ];\n\n        try {\n            $response = $client->request('PUT', $url, $options);\n            return $response->getStatusCode() === 200 ? 0 : -2;\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            return -2;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Implement a PHP class that provides HTTP client functionality using fsockopen for making HTTP requests when cURL is not available. The class should support both GET and POST requests with configurable options like timeout, cookies, and blocking mode.\n\nClass Description: The Http class provides a static method for making HTTP requests using fsockopen. It's designed as a fallback when cURL isn't available, offering stable performance with configurable options for different HTTP request scenarios.\n\nMethods:\n\nMethod1: fsockopenDownload(string $url, array $conf = array()) -> mixed - Makes an HTTP request using fsockopen\n  Input:\n    - $url: string - The target URL to request\n    - $conf: array - Configuration options including:\n      - limit: int - Number of characters to read in segments (0 for unlimited)\n      - post: string|array - POST content (either as string or array for form data)\n      - cookie: string - Cookie content to send with request\n      - ip: string - IP address to use instead of resolving hostname\n      - timeout: int - Connection timeout in seconds (default: 15)\n      - block: bool - Whether to use blocking mode (default: true)\n  Output:\n    - Returns string containing the HTTP response body, or empty string on failure",
    "Canonical_solution": "namespace Org\\Net;\n\nclass Http\n{\n    /**\n     * \u4f7f\u7528 fsockopen \u901a\u8fc7 HTTP \u534f\u8bae\u76f4\u63a5\u8bbf\u95ee(\u91c7\u96c6)\u8fdc\u7a0b\u6587\u4ef6\n     * \u5982\u679c\u4e3b\u673a\u6216\u670d\u52a1\u5668\u6ca1\u6709\u5f00\u542f CURL \u6269\u5c55\u53ef\u8003\u8651\u4f7f\u7528\n     * fsockopen \u6bd4 CURL \u7a0d\u6162,\u4f46\u6027\u80fd\u7a33\u5b9a\n     * @static\n     * @access public\n     * @param string $url \u8fdc\u7a0bURL\n     * @param array $conf \u5176\u4ed6\u914d\u7f6e\u4fe1\u606f\n     *        int   limit \u5206\u6bb5\u8bfb\u53d6\u5b57\u7b26\u4e2a\u6570\n     *        string post  post\u7684\u5185\u5bb9,\u5b57\u7b26\u4e32\u6216\u6570\u7ec4,key=value&\u5f62\u5f0f\n     *        string cookie \u643a\u5e26cookie\u8bbf\u95ee,\u8be5\u53c2\u6570\u662fcookie\u5185\u5bb9\n     *        string ip    \u5982\u679c\u8be5\u53c2\u6570\u4f20\u5165,$url\u5c06\u4e0d\u88ab\u4f7f\u7528,ip\u8bbf\u95ee\u4f18\u5148\n     *        int    timeout \u91c7\u96c6\u8d85\u65f6\u65f6\u95f4\n     *        bool   block \u662f\u5426\u963b\u585e\u8bbf\u95ee,\u9ed8\u8ba4\u4e3atrue\n     * @return mixed\n     */\n    public static function fsockopenDownload($url, $conf = array())\n    {\n        $return = '';\n        if (!is_array($conf)) {\n            return $return;\n        }\n\n        $matches                                       = parse_url($url);\n        !isset($matches['host']) && $matches['host']   = '';\n        !isset($matches['path']) && $matches['path']   = '';\n        !isset($matches['query']) && $matches['query'] = '';\n        !isset($matches['port']) && $matches['port']   = '';\n        $host                                          = $matches['host'];\n        $path                                          = $matches['path'] ? $matches['path'] . ($matches['query'] ? '?' . $matches['query'] : '') : '/';\n        $port                                          = !empty($matches['port']) ? $matches['port'] : 80;\n\n        $conf_arr = array(\n            'limit'   => 0,\n            'post'    => '',\n            'cookie'  => '',\n            'ip'      => '',\n            'timeout' => 15,\n            'block'   => true,\n        );\n\n        foreach (array_merge($conf_arr, $conf) as $k => $v) {\n            ${$k} = $v;\n        }\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= 'Content-Length: ' . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cache-Control: no-cache\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out = \"GET $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n        }\n        $fp = @fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            stream_set_timeout($fp, $timeout);\n            @fwrite($fp, $out);\n            $status = stream_get_meta_data($fp);\n            if (!$status['timed_out']) {\n                while (!feof($fp)) {\n                    if (($header = @fgets($fp)) && (\"\\r\\n\" == $header || \"\\n\" == $header)) {\n                        break;\n                    }\n                }\n\n                $stop = false;\n                while (!feof($fp) && !$stop) {\n                    $data = fread($fp, (0 == $limit || $limit > 8192 ? 8192 : $limit));\n                    $return .= $data;\n                    if ($limit) {\n                        $limit -= strlen($data);\n                        $stop = $limit <= 0;\n                    }\n                }\n            }\n            @fclose($fp);\n            return $return;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $parsed = parse_url($url);\n        if (!$parsed) return '';\n        $host = $parsed['host'];\n        $port = $parsed['port'] ?? 80;\n        $path = $parsed['path'] ?? '/';\n        $query = $parsed['query'] ?? '';\n        if (isset($conf['ip'])) $host = $conf['ip'];\n        $timeout = $conf['timeout'] ?? 15;\n        $block = $conf['block'] ?? true;\n        $request_line = 'GET ' . $path . ($query ? '?' . $query : '') . ' HTTP/1.1';\n        $post_data = null;\n        if (isset($conf['post'])) {\n            $post_data = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $request_line = 'POST ' . $path . ($query ? '?' . $query : '') . ' HTTP/1.1';\n        }\n        $headers = \"Host: $host\\r\\n\";\n        if (isset($conf['cookie'])) $headers .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        $headers .= \"Connection: close\\r\\n\";\n        if ($post_data !== null) {\n            $headers .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $headers .= \"Content-Length: \" . strlen($post_data) . \"\\r\\n\";\n        }\n        $request = $request_line . \"\\r\\n\" . $headers . \"\\r\\n\";\n        $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) return '';\n        if (!$block) stream_set_blocking($fp, false);\n        fwrite($fp, $request . $post_data);\n        $buffer = '';\n        $limit = $conf['limit'] ?? 0;\n        $bytes_read = 0;\n        while (!feof($fp) && ($limit === 0 || $bytes_read < $limit)) {\n            $data = fread($fp, 8192);\n            $buffer .= $data;\n            $bytes_read += strlen($data);\n        }\n        fclose($fp);\n        $pos = strpos($buffer, \"\\r\\n\\r\\n\");\n        if ($pos === false) return '';\n        return substr($buffer, $pos + 4);\n    }\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using low-level socket operations (fsockopen) to send HTTP requests and handle responses, with logging capabilities.\n\nClass Description: SocketHttpClient is a PSR-compatible HTTP client that establishes direct socket connections to HTTP servers, sends requests, and processes responses. It implements both a custom HTTP client interface and PSR-18's ClientInterface, while also supporting PSR-3 logging.\n\nAttributes:\n- logger: [LoggerInterface] - PSR-3 logger instance for tracking connection attempts, errors, and debug information\n\nMethods:\n- __construct([LoggerInterface $logger]) -> [void] - Initializes the client with a PSR-3 logger instance\n- sendRequest([RequestInterface $request]) -> [ResponseInterface] - Sends an HTTP request and returns the response. Handles both HTTP and HTTPS connections, processes headers and body, and manages socket lifecycle. Returns a PSR-7 response object.",
    "Canonical_solution": "use Mpdf\\Log\\Context as LogContext;\nuse Mpdf\\PsrHttpMessageShim\\Response;\nuse Mpdf\\PsrHttpMessageShim\\Stream;\nuse Mpdf\\PsrLogAwareTrait\\PsrLogAwareTrait;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements \\Mpdf\\Http\\ClientInterface, \\Psr\\Log\\LoggerAwareInterface\n{\n    use PsrLogAwareTrait;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request)\n    {\n        if (null === $request->getUri()) {\n            return (new Response());\n        }\n\n        $url = $request->getUri();\n\n        if (is_string($url)) {\n            $url = new Uri($url);\n        }\n\n        $timeout = 1;\n\n        $file = $url->getPath() ?: '/';\n        $scheme = $url->getScheme();\n        $port = $url->getPort() ?: 80;\n        $prefix = '';\n\n        if ($scheme === 'https') {\n            $prefix = 'ssl://';\n            $port = $url->getPort() ?: 443;\n        }\n\n        $query = $url->getQuery();\n        if ($query) {\n            $file .= '?' . $query;\n        }\n\n        $socketPath = $prefix . $url->getHost();\n\n        $this->logger->debug(sprintf('Opening socket on %s:%s of URL \"%s\"', $socketPath, $port, $request->getUri()), ['context' => LogContext::REMOTE_CONTENT]);\n\n        $response = new Response();\n\n        if (!($fh = @fsockopen($socketPath, $port, $errno, $errstr, $timeout))) {\n            $this->logger->error(sprintf('Socket error \"%s\": \"%s\"', $errno, $errstr), ['context' => LogContext::REMOTE_CONTENT]);\n            return $response;\n        }\n\n        $getRequest = 'GET ' . $file . ' HTTP/1.1' . \"\\r\\n\" .\n            'Host: ' . $url->getHost() . \" \\r\\n\" .\n            'Connection: close' . \"\\r\\n\\r\\n\";\n\n        fwrite($fh, $getRequest);\n\n        $httpHeader = fgets($fh, 1024);\n        if (!$httpHeader) {\n            return $response;\n        }\n\n        preg_match('@HTTP/(?P<protocolVersion>[\\d\\.]+) (?P<httpStatusCode>[\\d]+) .*@', $httpHeader, $parsedHeader);\n\n        if (!$parsedHeader) {\n            return $response;\n        }\n\n        $response = $response->withStatus($parsedHeader['httpStatusCode']);\n\n        while (!feof($fh)) {\n            $s = fgets($fh, 1024);\n            if ($s === \"\\r\\n\") {\n                break;\n            }\n            preg_match('/^(?P<headerName>.*?): ?(?P<headerValue>.*)$/', $s, $parsedHeader);\n            if (!$parsedHeader) {\n                continue;\n            }\n            $response = $response->withHeader($parsedHeader['headerName'], trim($parsedHeader['headerValue']));\n        }\n\n        $body = '';\n\n        while (!feof($fh)) {\n            $line = fgets($fh, 1024);\n            $body .= $line;\n        }\n\n        fclose($fh);\n\n        $stream = Stream::create($body);\n        $stream->rewind();\n\n        return $response\n            ->withBody($stream);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class SocketHttpClient implements \\Psr\\Http\\Client\\ClientInterface {\n    private $logger;\n\n    public function __construct(\\Psr\\Log\\LoggerInterface $logger = null) {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(\\Psr\\Http\\Message\\RequestInterface $request): \\Psr\\Http\\Message\\ResponseInterface {\n        $uri = $request->getUri();\n        $scheme = $uri->getScheme();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($scheme === 'https' ? 443 : 80);\n\n        $this->logger?->debug(\"Connecting to $host:$port\");\n\n        $socket = fsockopen(\n            $scheme === 'https' ? 'ssl://' . $host : $host,\n            $port,\n            $errno,\n            $errstr,\n            30\n        );\n\n        if (!$socket) {\n            $this->logger?->error(\"Failed to connect to $host:$port: $errstr ($errno)\");\n            throw new \\RuntimeException(\"Connection failed: $errstr ($errno)\");\n        }\n\n        $this->logger?->debug(\"Connected to $host:$port\");\n\n        $requestLine = $request->getMethod() . ' ' . $uri->getPath() . ($uri->getQuery() ? '?' . $uri->getQuery() : '') . ' HTTP/1.1';\n\n        $headers = $request->getHeaders();\n        if (!isset($headers['Host'])) {\n            $headers['Host'] = [$host];\n        }\n\n        $headerString = '';\n        foreach ($headers as $name => $values) {\n            foreach ($values as $value) {\n                $headerString .= \"$name: $value\\r\\n\";\n            }\n        }\n\n        $body = $request->getBody()->getContents();\n\n        $requestData = $requestLine . \"\\r\\n\" . $headerString . \"\\r\\n\" . $body;\n\n        fwrite($socket, $requestData);\n\n        $statusLine = fgets($socket);\n        if (!$statusLine) {\n            $this->logger?->error(\"Failed to read status line\");\n            throw new \\RuntimeException(\"Failed to read response\");\n        }\n\n        list($protocol, $code, $reason) = explode(' ', $statusLine, 3);\n        $code = (int)$code;\n\n        $headers = [];\n        while ($line = fgets($socket)) {\n            if (trim($line) === '') {\n                break;\n            }\n            $parts = explode(':', $line, 2);\n            $name = trim($parts[0]);\n            $value = trim($parts[1] ?? '');\n            $headers[$name] = $value;\n        }\n\n        $contentLength = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : null;\n        $body = '';\n\n        if ($contentLength !== null) {\n            $body = fread($socket, $contentLength);\n        } else {\n            while (!feof($socket)) {\n                $body .= fread($socket, 8192);\n            }\n        }\n\n        fclose($socket);\n\n        return new \\GuzzleHttp\\Psr7\\Response($code, $headers, $body, $protocol);\n    }\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a function that implements a RabbitMQ consumer in PHP to process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message by printing its content and acknowledging it. The consumer stops when it receives a 'quit' message or when the channel is no longer consuming. The function includes proper cleanup by closing the channel and connection upon shutdown.\n\nInput:\n- $host (string): The hostname of the RabbitMQ server\n- $port (int): The port number of the RabbitMQ server\n- $user (string): The username for RabbitMQ authentication\n- $pass (string): The password for RabbitMQ authentication\n- $vhost (string): The virtual host to connect to\n- $exchange (string): The name of the exchange to declare\n- $queue (string): The name of the queue to declare and consume from\n- $consumerTag (string): The identifier for this consumer\n\nOutput: None (The function processes messages asynchronously and does not return a value)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/vendor/autoload.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    while ($channel->is_consuming()) {\n        $channel->wait(null, true);\n        usleep(300000);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "```php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPConnection();\n    $connection->setHost($host);\n    $connection->setPort($port);\n    $connection->setLogin($user);\n    $connection->setPassword($pass);\n    $connection->setVhost($vhost);\n    $connection->connect();\n\n    $channel = new AMQPChannel($connection);\n\n    $exchangeObj = new AMQPExchange($channel);\n    $exchangeObj->setName($exchange);\n    $exchangeObj->setType(AMQP_EXCHANGE_DIRECT);\n    $exchangeObj->declare();\n\n    $queueObj = new AMQPQueue($channel);\n    $queueObj->setName($queue);\n    $queueObj->setFlags(AMQP_DURABLE);\n    $queueObj->declare();\n\n    $queueObj->bind($exchange, $queue);\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, function ($msg) use ($channel, $connection) {\n        $body = $msg->getBody();\n        echo \"Received: $body\\n\";\n        if ($body === 'quit') {\n            $channel->basic_ack($msg->getDeliveryTag());\n            $channel->close();\n            $connection->close();\n        } else {\n            $channel->basic_ack($msg->getDeliveryTag());\n        }\n    });\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n}\n```"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a RabbitMQ consumer class in PHP that connects to a RabbitMQ server, declares a queue and exchange, binds them, and processes incoming messages until a termination signal is received.\n\nClass Description: The RabbitMQConsumer class handles the consumption of messages from a RabbitMQ queue. It establishes a connection to the server, sets up the necessary queue and exchange, processes messages, and provides shutdown functionality.\n\nAttributes:\n- msgCount: [int] - Tracks the number of messages processed\n- startTime: [float|null] - Records the start time of message processing\n- conn: [AMQPStreamConnection] - Holds the RabbitMQ server connection\n- ch: [AMQPChannel] - Represents the communication channel\n- exchange: [string] - Name of the exchange to bind to\n- queue: [string] - Name of the queue to consume from\n- consumer_tag: [string] - Identifier for the consumer (empty in this implementation)\n\nMethods:\n- __construct() -> [void] - Initializes the RabbitMQ connection, channel, exchange, and queue\n- process_message([AMQPMessage] $msg) -> [void] - Processes incoming messages and handles termination signal\n- startConsuming() -> [void] - Starts consuming messages from the queue\n- shutdown() -> [void] - Closes the channel and connection cleanly",
    "Canonical_solution": "use PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/../tests/config.php';\n\nclass RabbitMQConsumer\n{\n    protected $msgCount = 0;\n    protected $startTime = null;\n    protected $conn;\n    protected $ch;\n    protected $exchange = 'bench_exchange';\n    protected $queue = 'bench_queue';\n    protected $consumer_tag = '';\n\n    public function __construct()\n    {\n        $this->conn = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $this->ch = $this->conn->channel();\n        $this->ch->queue_declare($this->queue, false, false, false, false);\n        $this->ch->exchange_declare($this->exchange, 'direct', false, false, false);\n        $this->ch->queue_bind($this->queue, $this->exchange);\n    }\n\n    public function process_message($msg)\n    {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n\n        if ($msg->body == 'quit') {\n            echo sprintf(\"Pid: %s, Count: %s, Time: %.4f\\n\", getmypid(), $this->msgCount, microtime(true) - $this->startTime);\n            $this->shutdown();\n            die;\n        }\n        $this->msgCount++;\n    }\n\n    public function startConsuming()\n    {\n        $this->ch->basic_consume($this->queue, '', false, true, false, false, array($this, 'process_message'));\n        while ($this->ch->is_consuming()) {\n            $this->ch->wait();\n        }\n    }\n\n    protected function shutdown()\n    {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 143,
    "wrong_result": "class RabbitMQConsumer {\n    public $msgCount = 0;\n    public $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange;\n    private $queue;\n    private $consumer_tag = '';\n\n    public function __construct($exchange, $queue, $host = 'localhost', $port = 5672, $user = 'guest', $password = 'guest', $vhost = '/') {\n        $this->exchange = $exchange;\n        $this->queue = $queue;\n        $this->conn = new AMQPStreamConnection($host, $port, $user, $password, $vhost);\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($this->queue, $this->exchange, $this->queue);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        $this->msgCount++;\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n        if ($msg->body === 'shutdown') {\n            $this->shutdown();\n        }\n        $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n    }\n\n    public function startConsuming() {\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, [$this, 'process_message']);\n        while ($this->ch->isOpen()) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a PHP function that implements a RabbitMQ consumer to process messages from a specified queue, with the ability to acknowledge or reject messages based on their content, and properly handle connection shutdown.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them together, and starts consuming messages. It processes each message by acknowledging \"good\" messages and rejecting others. If the message body is \"quit\", it stops consuming. The function includes proper cleanup by closing the channel and connection on shutdown.\n\nInput:\n- $host: string - RabbitMQ server hostname\n- $port: int - RabbitMQ server port\n- $user: string - RabbitMQ username\n- $pass: string - RabbitMQ password  \n- $vhost: string - RabbitMQ virtual host\n- $exchange: string - Exchange name to bind to\n- $queue: string - Queue name to consume from\n- $consumerTag: string - Identifier for this consumer\n\nOutput: None (This is a long-running consumer process that handles messages asynchronously)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        if ($message->body == 'good') {\n            $message->ack();\n        } else {\n            $message->nack();\n        }\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "```php\nfunction consumeMessages($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    require_once 'vendor/autoload.php';\n    use PhpAmqpLib\\Connection\\AMQPConnection;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost\n    ]);\n    $channel = $connection->channel();\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $stop = false;\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, function ($msg) use (&$stop, $channel) {\n        if ($msg->body === 'quit') {\n            $stop = true;\n            $channel->basic_cancel($consumerTag);\n            return;\n        }\n\n        if (strpos($msg->body, 'good') !== false) {\n            $channel->basic_ack($msg->delivery_tag);\n        } else {\n            $channel->basic_nack($msg->delivery_tag, false, true);\n        }\n    });\n\n    while (!$stop) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}\n```"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): RabbitMQ server hostname or IP address\n- `$port` (int): RabbitMQ server port number\n- `$user` (string): RabbitMQ username for authentication\n- `$pass` (string): RabbitMQ password for authentication\n- `$vhost` (string): RabbitMQ virtual host\n- `$exchange` (string): Name of the exchange to bind to\n- `$queue` (string): Name of the queue to consume messages from\n\nOutput: None (The function runs continuously until terminated or until receiving a 'quit' message)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "```php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $connection = new AMQPConnection();\n    $connection->setHost($host);\n    $connection->setPort($port);\n    $connection->setLogin($user);\n    $connection->setPassword($pass);\n    $connection->setVhost($vhost);\n    $connection->connect();\n\n    $channel = new AMQPChannel($connection);\n\n    $exchangeObj = new AMQPExchange($channel);\n    $exchangeObj->setName($exchange);\n    $exchangeObj->setType(AMQP_EXCHANGE_DIRECT);\n    $exchangeObj->declare();\n\n    $queueObj = new AMQPQueue($channel);\n    $queueObj->setName($queue);\n    $queueObj->declare();\n    $queueObj->bind($exchange, '');\n\n    $callback = function ($msg) use ($queueObj) {\n        $body = $msg->getBody();\n        echo \"Received: $body\\n\";\n        if ($body === 'quit') {\n            $msg->ack();\n            $queueObj->getChannel()->close();\n            $queueObj->getChannel()->getConnection()->close();\n        } else {\n            $msg->ack();\n        }\n    };\n\n    $queueObj->consume($callback);\n}\n```"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): The hostname of the RabbitMQ server.\n- `$port` (int): The port number of the RabbitMQ server.\n- `$user` (string): The username for RabbitMQ authentication.\n- `$pass` (string): The password for RabbitMQ authentication.\n- `$vhost` (string): The virtual host to connect to.\n- `$exchange` (string): The name of the exchange to declare.\n- `$queue` (string): The name of the queue to declare and consume from.\n\nOutput: None. The function runs indefinitely until a 'quit' message is received or the process is terminated. Messages are processed and acknowledged, and connections are closed upon shutdown.",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "```php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $callback) {\n    $connection = new AMQPConnection();\n    $connection->setHost($host);\n    $connection->setPort($port);\n    $connection->setLogin($user);\n    $connection->setPassword($pass);\n    $connection->setVhost($vhost);\n    $connection->connect();\n\n    $channel = new AMQPChannel($connection);\n\n    $exchange = new AMQPExchange($channel);\n    $exchange->setName($exchange);\n    $exchange->setType(AMQP_EXCHANGE_DIRECT);\n    $exchange->setFlags(AMQP_DURABLE);\n    $exchange->declare();\n\n    $queue = new AMQPQueue($channel);\n    $queue->setName($queue);\n    $queue->setFlags(AMQP_DURABLE);\n    $queue->declare();\n\n    $queue->bind($exchange, $queue);\n\n    $queue->consume(function ($msg) use ($callback) {\n        $callback($msg->getBody());\n        $msg->ack();\n    }, AMQP_AUTOACK);\n\n    pcntl_signal(SIGINT, function () use ($channel, $connection) {\n        $channel->close();\n        $connection->close();\n    });\n}\n```"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a PHP function that consumes messages from a RabbitMQ queue using headers-based routing. The function should establish a connection to RabbitMQ, declare an exchange and queue, bind the queue with specified headers, and process incoming messages with a callback function.\n\nFunction Description: The function `consume_rabbitmq_messages` connects to a RabbitMQ server, sets up a headers-based exchange, declares a temporary queue, binds the queue with the provided headers, and starts consuming messages. It processes each message using a callback function that displays the message body and headers. The function handles timeouts gracefully and cleans up resources after processing.\n\nInput: \n- `$headers` (array): An array of strings in the format \"key=value\" representing the headers to bind the queue with.\n\nOutput: \n- Returns `true` if the function executes successfully.\n- Returns `false` if the input headers are empty.\n- Outputs message details to stdout and may write errors to stderr.",
    "Canonical_solution": "function consume_rabbitmq_messages($headers)\n{\n    require __DIR__ . '/config.php';\n    \n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exception\\AMQPTimeoutException;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    if (empty($headers)) {\n        file_put_contents('php://stderr', \"Usage: $argv[0] [header1=value1] [header2=value2]\\n\");\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchangeName = 'topic_headers_test';\n    $channel->exchange_declare($exchangeName, AMQPExchangeType::HEADERS);\n\n    list($queueName, ,) = $channel->queue_declare('', false, false, true);\n\n    $bindArguments = [];\n    foreach ($headers as $header) {\n        list ($key, $value) = explode('=', $header, 2);\n        $bindArguments[$key] = $value;\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', false, new AMQPTable($bindArguments));\n\n    $callback = function (AMQPMessage $message) {\n        echo PHP_EOL . ' [x] ', $message->getRoutingKey(), ':', $message->getBody(), \"\\n\";\n        echo 'Message headers follows' . PHP_EOL;\n        var_dump($message->get('application_headers')->getNativeData());\n        echo PHP_EOL;\n    };\n\n    $channel->basic_consume($queueName, '', false, true, true, false, $callback);\n    while ($channel->is_consuming()) {\n        try {\n            $channel->wait(null, false, 2);\n        } catch (AMQPTimeoutException $exception) {\n        }\n        echo '*' . PHP_EOL;\n    }\n\n    $channel->close();\n    $connection->close();\n    return true;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "```php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $parsedHeaders = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header, 2);\n        $parsedHeaders[$key] = $value;\n    }\n\n    require_once 'vendor/autoload.php';\n\n    $connection = new AMQPConnection([\n        'host' => 'localhost',\n        'port' => 5672,\n        'vhost' => '/',\n        'login' => 'guest',\n        'password' => 'guest'\n    ]);\n\n    $channel = $connection->channel();\n\n    $exchange = new AMQPExchange($channel);\n    $exchange->setName('headers_exchange');\n    $exchange->setType('headers');\n    $exchange->declare();\n\n    list($queue_name, ,) = $channel->queue_declare('', true, false, true, false);\n\n    $exchange->bind($queue_name, '', ['headers' => $parsedHeaders]);\n\n    $callback = function ($msg) use ($channel) {\n        echo \"Received: \" . $msg->body . \"\\n\";\n        echo \"Headers:\\n\";\n        print_r($msg->getHeaders());\n        $channel->basic_ack($msg->delivery_info['delivery_tag']);\n    };\n\n    $channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\n    try {\n        while ($channel->is_open()) {\n            $channel->wait();\n        }\n    } catch (Exception $e) {\n        fwrite(STDERR, \"Error: \" . $e->getMessage() . \"\\n\");\n        return false;\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}\n```"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a function that sends multiple messages to a RabbitMQ queue using PHP and measures the execution time for the operation.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, creates a temporary queue, sends a specified number of messages with the given content, and returns the total time taken to complete the operation. Each message is sent through a newly created channel, and the temporary queue is automatically deleted after use.\n\nInput:\n- $max_messages: [int] - The number of messages to send.\n- $host: [string] - The hostname or IP address of the RabbitMQ server.\n- $port: [int] - The port number of the RabbitMQ server.\n- $user: [string] - The username for RabbitMQ authentication.\n- $pass: [string] - The password for RabbitMQ authentication.\n- $vhost: [string] - The virtual host to connect to on the RabbitMQ server.\n- $message_body: [string] - The content of the message to be sent.\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages, or false if the connection fails.",
    "Canonical_solution": "function send_rabbitmq_messages($max_messages, $host, $port, $user, $pass, $vhost, $message_body)\n{\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    if (!$conn) {\n        return false;\n    }\n\n    $time = microtime(true);\n\n    for ($i = 0; $i < $max_messages; $i++) {\n        $ch = $conn->channel();\n        list($queue,) = $ch->queue_declare('', false, false, true, true);\n        $msg = new AMQPMessage($message_body);\n        $ch->basic_publish($msg, '', $queue);\n        $ch->close();\n    }\n\n    $execution_time = microtime(true) - $time;\n    $conn->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "```php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $connection = new AMQPConnection();\n    $connection->setHost($host);\n    $connection->setPort($port);\n    $connection->setLogin($user);\n    $connection->setPassword($pass);\n    $connection->setVhost($vhost);\n\n    if (!$connection->connect()) {\n        return false;\n    }\n\n    $channel = new AMQPChannel($connection);\n    $queue = new AMQPQueue($channel);\n    $queue->setName('temp_queue');\n    $queue->setFlags(AMQP_EXCLUSIVE | AMQP_AUTODELETE);\n    $queue->declareQueue();\n\n    $time_start = microtime(true);\n\n    for ($i = 0; $i < $max_messages; $i++) {\n        $msg_channel = new AMQPChannel($connection);\n        $msg_channel->publish($message_body, 'temp_queue', AMQP_NOPARAM, ['delivery_mode' => 2]);\n        $msg_channel->close();\n    }\n\n    $time_end = microtime(true);\n    $time_taken = $time_end - $time_start;\n\n    $connection->close();\n\n    return $time_taken;\n}\n```"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a CAPTCHA validation class that verifies user-submitted CAPTCHA responses using Google's reCAPTCHA API.\n\nClass Description: The Captcha class implements Laravel's Rule interface to provide CAPTCHA validation functionality. It sends the user's CAPTCHA response to Google's verification endpoint and checks the success status in the response.\n\nAttributes: (This class has no explicit attributes as it uses configuration values directly)\n\nMethods:\n1: passes(string $attribute, mixed $value) -> bool - Validates the CAPTCHA response by sending it to Google's verification API along with the secret key and client IP. Returns true if verification succeeds.\n   - $attribute: The name of the attribute being validated\n   - $value: The CAPTCHA response token to be validated\n\n2: message() -> string - Returns the validation error message to be displayed when CAPTCHA validation fails. The message is localized using Laravel's translation system.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        if (empty($value)) {\n            return false;\n        }\n\n        $response = json_decode((new Client([\n            'timeout' => config('boilerplate.access.captcha.configs.options.timeout'),\n        ]))->post('https://www.google.com/recaptcha/api/siteverify', [\n            'form_params' => [\n                'secret' => config('boilerplate.access.captcha.configs.secret_key'),\n                'remoteip' => request()->getClientIp(),\n                'response' => $value,\n            ],\n        ])->getBody(), true);\n\n        return isset($response['success']) && $response['success'] === true;\n    }\n\n    public function message()\n    {\n        return __('The captcha was invalid.');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        if (!$response->successful()) {\n            return false;\n        }\n\n        $data = $response->json();\n\n        return $data['success'] ?? false;\n    }\n\n    public function message()\n    {\n        return __('validation.captcha.failed');\n    }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a function that sends a delayed message to a RabbitMQ queue using PHP and the PhpAmqpLib library. The function should establish a connection to RabbitMQ, declare a delayed exchange and queue, and publish a message with a specified delay time.\n\nFunction Description: The function `send_delayed_message` sends a message to a RabbitMQ queue with a specified delay. It uses a delayed exchange to achieve the delay functionality. The function handles the connection setup, exchange and queue declaration, message creation with delay headers, and cleanup of resources.\n\nInput:\n- `$message_content` [string] - The content of the message to be sent.\n- `$delay_ms` [int] - The delay time in milliseconds before the message is delivered to the queue.\n\nOutput: None. The function does not return any value but publishes the message to the specified RabbitMQ queue with the given delay.\n\nNote: The function assumes the existence of a `config.php` file containing the RabbitMQ connection parameters (HOST, PORT, USER, PASS, VHOST).",
    "Canonical_solution": "function send_delayed_message($message_content, $delay_ms)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare(\n        'delayed_exchange',\n        'x-delayed-message',\n        false,\n        true,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-delayed-type' => AMQPExchangeType::FANOUT])\n    );\n\n    $channel->queue_declare(\n        'delayed_queue',\n        false,\n        false,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-dead-letter-exchange' => 'delayed'])\n    );\n\n    $channel->queue_bind('delayed_queue', 'delayed_exchange');\n\n    $headers = new AMQPTable(['x-delay' => $delay_ms]);\n    $message = new AMQPMessage($message_content, ['delivery_mode' => 2]);\n    $message->set('application_headers', $headers);\n    $channel->basic_publish($message, 'delayed_exchange');\n\n    $channel->close();\n    $connection->close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "```php\nfunction send_delayed_message($message_content, $delay_ms) {\n    include 'config.php';\n    $connection = new AMQPConnection([\n        'host' => HOST,\n        'port' => PORT,\n        'login' => USER,\n        'password' => PASS,\n        'vhost' => VHOST,\n    ]);\n    $channel = $connection->channel();\n    $channel->exchange_declare('delayed_exchange', 'x-delayed-message', false, true, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare('delayed_queue', false, true, false, false);\n    $channel->queue_bind('delayed_queue', 'delayed_exchange', 'delayed.key');\n    $msg = new AMQPMessage($message_content, [\n        'headers' => ['x-delay' => $delay_ms]\n    ]);\n    $channel->basic_publish($msg, 'delayed_exchange', 'delayed.key');\n    $channel->close();\n    $connection->close();\n}\n```"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a PHP function that publishes messages to a RabbitMQ queue in batches, measuring the total execution time for sending all messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares an exchange and queue, then publishes a specified number of messages in configurable batch sizes. It handles connection blocking scenarios and returns the total execution time. A special 'quit' message is sent at the end to signal completion.\n\nInput:\n- $msg_count: [integer] - The total number of messages to publish\n- $batch_size: [integer] - The number of messages to send in each batch\n- $host: [string] - RabbitMQ server hostname\n- $port: [integer] - RabbitMQ server port\n- $user: [string] - RabbitMQ username\n- $pass: [string] - RabbitMQ password\n- $vhost: [string] - RabbitMQ virtual host\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages",
    "Canonical_solution": "function publish_messages($msg_count, $batch_size, $host, $port, $user, $pass, $vhost)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Exception\\AMQPConnectionBlockedException;\n\n    $exchange = 'bench_exchange';\n    $queue = 'bench_queue';\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $messageBody = <<<EOT\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza\nEOT;\n\n    $message = new AMQPMessage($messageBody);\n    $time = microtime(true);\n\n    for ($i = 0; $i < $msg_count; $i++) {\n        $channel->batch_basic_publish($message, $exchange);\n\n        if ($i % $batch_size == 0) {\n            try {\n                $channel->publish_batch();\n            } catch (AMQPConnectionBlockedException $exception) {\n                do {\n                    sleep(10);\n                } while ($connection->isBlocked());\n                $channel->publish_batch();\n            }\n        }\n    }\n\n    $channel->publish_batch();\n    $channel->basic_publish(new AMQPMessage('quit'), $exchange);\n\n    $execution_time = microtime(true) - $time;\n    \n    $channel->close();\n    $connection->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "```php\nfunction publishBatchMessages($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $connection = new AMQPConnection();\n    $connection->setHost($host);\n    $connection->setPort($port);\n    $connection->setLogin($user);\n    $connection->setPassword($pass);\n    $connection->setVhost($vhost);\n    $connection->connect();\n\n    $channel = new AMQPChannel($connection);\n\n    $exchange = new AMQPExchange($channel);\n    $exchange->setName('batch_exchange');\n    $exchange->setType(AMQP_EX_TYPE_DIRECT);\n    $exchange->declare();\n\n    $queue = new AMQPQueue($channel);\n    $queue->setName('batch_queue');\n    $queue->declare();\n    $queue->bind('batch_exchange', 'batch_key');\n\n    $start_time = microtime(true);\n\n    for ($i = 0; $i < $msg_count; $i += $batch_size) {\n        $end = min($i + $batch_size, $msg_count);\n        for ($j = $i; $j < $end; $j++) {\n            $exchange->publish(\"Message $j\", 'batch_key');\n        }\n        while ($connection->isBlocked()) {\n            usleep(100000);\n        }\n    }\n\n    $exchange->publish('quit', 'batch_key');\n\n    $end_time = microtime(true);\n    $connection->close();\n\n    return $end_time - $start_time;\n}\n```"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a PHP class that implements a Redis client connection using TCP sockets and the phpiredis extension for efficient communication with a Redis server.\n\nClass Description: PhpiredisSocketConnection is a Redis client connection class that handles TCP socket communication with a Redis server. It manages socket creation, connection, data transmission, and response parsing using the phpiredis extension for optimal performance.\n\nAttributes:\n- reader: [resource] - The phpiredis reader resource used for parsing Redis protocol responses\n- parameters: [ParametersInterface] - Connection parameters including host, port, timeout, etc.\n\nMethods:\n- __construct(ParametersInterface $parameters) -> [void] - Initializes the connection and verifies required extensions\n- __destruct() -> [void] - Cleans up resources when the object is destroyed\n- assertExtensions() -> [void] - Verifies required PHP extensions are loaded\n- createReader() -> [resource] - Creates and configures a phpiredis reader resource\n- getStatusHandler() -> [callable] - Returns the handler for status responses\n- getErrorHandler() -> [callable] - Returns the handler for error responses\n- createResource() -> [resource] - Creates and connects the socket resource\n- connectWithTimeout(resource $socket, string $address, ParametersInterface $parameters) -> [void] - Establishes connection with timeout handling\n- write(string $buffer) -> [void] - Writes data to the socket connection\n- read() -> [mixed] - Reads and parses response from the server\n- writeRequest(CommandInterface $command) -> [void] - Formats and writes a Redis command to the server",
    "Canonical_solution": "use Predis\\Command\\CommandInterface;\nuse Predis\\NotSupportedException;\nuse Predis\\Response\\Error as ErrorResponse;\nuse Predis\\Response\\ErrorInterface as ErrorResponseInterface;\nuse Predis\\Response\\Status as StatusResponse;\n\nclass PhpiredisSocketConnection extends AbstractConnection\n{\n    private $reader;\n\n    public function __construct(ParametersInterface $parameters)\n    {\n        $this->assertExtensions();\n        parent::__construct($parameters);\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct()\n    {\n        parent::__destruct();\n        phpiredis_reader_destroy($this->reader);\n    }\n\n    protected function assertExtensions()\n    {\n        if (!extension_loaded('sockets')) {\n            throw new NotSupportedException(\n                'The \"sockets\" extension is required by this connection backend.'\n            );\n        }\n\n        if (!extension_loaded('phpiredis')) {\n            throw new NotSupportedException(\n                'The \"phpiredis\" extension is required by this connection backend.'\n            );\n        }\n    }\n\n    private function createReader()\n    {\n        $reader = phpiredis_reader_create();\n        phpiredis_reader_set_status_handler($reader, $this->getStatusHandler());\n        phpiredis_reader_set_error_handler($reader, $this->getErrorHandler());\n        return $reader;\n    }\n\n    protected function getStatusHandler()\n    {\n        static $statusHandler;\n\n        if (!$statusHandler) {\n            $statusHandler = function ($payload) {\n                return StatusResponse::get($payload);\n            };\n        }\n\n        return $statusHandler;\n    }\n\n    protected function getErrorHandler()\n    {\n        static $errorHandler;\n\n        if (!$errorHandler) {\n            $errorHandler = function ($errorMessage) {\n                return new ErrorResponse($errorMessage);\n            };\n        }\n\n        return $errorHandler;\n    }\n\n    protected function createResource()\n    {\n        $parameters = $this->parameters;\n\n        if ($parameters->scheme === 'unix') {\n            $address = $parameters->path;\n            $domain = AF_UNIX;\n            $protocol = 0;\n        } else {\n            if (false === $address = self::getAddress($parameters)) {\n                $this->onConnectionError(\"Cannot resolve the address of '$parameters->host'.\");\n            }\n\n            $domain = filter_var($address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) ? AF_INET6 : AF_INET;\n            $protocol = SOL_TCP;\n        }\n\n        if (false === $socket = @socket_create($domain, SOCK_STREAM, $protocol)) {\n            $this->emitSocketError();\n        }\n\n        $this->setSocketOptions($socket, $parameters);\n        $this->connectWithTimeout($socket, $address, $parameters);\n\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters)\n    {\n        socket_set_nonblock($socket);\n\n        if (@socket_connect($socket, $address, (int) $parameters->port) === false) {\n            $error = socket_last_error();\n            if ($error != SOCKET_EINPROGRESS && $error != SOCKET_EALREADY) {\n                $this->emitSocketError();\n            }\n        }\n\n        socket_set_block($socket);\n\n        $null = null;\n        $selectable = array($socket);\n\n        $timeout = (isset($parameters->timeout) ? (float) $parameters->timeout : 5.0);\n        $timeoutSecs = floor($timeout);\n        $timeoutUSecs = ($timeout - $timeoutSecs) * 1000000;\n\n        $selected = socket_select($selectable, $selectable, $null, $timeoutSecs, $timeoutUSecs);\n\n        if ($selected === 2) {\n            $this->onConnectionError('Connection refused.', SOCKET_ECONNREFUSED);\n        }\n\n        if ($selected === 0) {\n            $this->onConnectionError('Connection timed out.', SOCKET_ETIMEDOUT);\n        }\n\n        if ($selected === false) {\n            $this->emitSocketError();\n        }\n    }\n\n    protected function write($buffer)\n    {\n        $socket = $this->getResource();\n\n        while (($length = strlen($buffer)) > 0) {\n            $written = socket_write($socket, $buffer, $length);\n\n            if ($length === $written) {\n                return;\n            }\n\n            if ($written === false) {\n                $this->onConnectionError('Error while writing bytes to the server.');\n            }\n\n            $buffer = substr($buffer, $written);\n        }\n    }\n\n    public function read()\n    {\n        $socket = $this->getResource();\n        $reader = $this->reader;\n\n        while (PHPIREDIS_READER_STATE_INCOMPLETE === $state = phpiredis_reader_get_state($reader)) {\n            if (@socket_recv($socket, $buffer, 4096, 0) === false || $buffer === '' || $buffer === null) {\n                $this->emitSocketError();\n            }\n\n            phpiredis_reader_feed($reader, $buffer);\n        }\n\n        if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n            return phpiredis_reader_get_reply($reader);\n        } else {\n            $this->onProtocolError(phpiredis_reader_get_error($reader));\n            return;\n        }\n    }\n\n    public function writeRequest(CommandInterface $command)\n    {\n        $arguments = $command->getArguments();\n        array_unshift($arguments, $command->getId());\n        $this->write(phpiredis_format_command($arguments));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "class PhpiredisSocketConnection {\n    private $socket;\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->parameters = $parameters;\n        $this->assertExtensions();\n        $this->createResource();\n        $this->connectWithTimeout($this->socket, $this->getAddress(), $parameters);\n        $this->createReader();\n    }\n\n    private function getAddress() {\n        return \"tcp://\" . $this->parameters->getHost() . \":\" . $this->parameters->getPort();\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('piredis')) {\n            throw new \\RuntimeException('piredis extension is required');\n        }\n    }\n\n    private function createResource() {\n        $host = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $timeout = $this->parameters->getTimeout();\n\n        $address = \"tcp://$host:$port\";\n        $this->socket = stream_socket_client($address, $errno, $errstr, $timeout);\n        if (!$this->socket) {\n            throw new \\RuntimeException(\"Failed to connect to Redis: $errstr ($errno)\");\n        }\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters) {\n        $timeout = $parameters->getTimeout();\n        stream_set_timeout($socket, $timeout);\n    }\n\n    private function createReader() {\n        $this->reader = phpiredis_read_new($this->socket);\n    }\n\n    public function __destruct() {\n        if (is_resource($this->socket)) {\n            fclose($this->socket);\n        }\n        if (is_resource($this->reader)) {\n            phpiredis_read_free($this->reader);\n        }\n    }\n\n    public function getStatusHandler() {\n        return function($response) {\n            return $response;\n        };\n    }\n\n    public function getErrorHandler() {\n        return function($response) {\n            throw new \\Exception(\"Redis error: $response\");\n        };\n    }\n\n    public function write(string $buffer) {\n        fwrite($this->socket, $buffer);\n    }\n\n    public function read() {\n        return phpiredis_read_read($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $this->write($command->toString());\n    }\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Implement a Radius class in PHP that handles RADIUS protocol communication for authentication and accounting purposes using UDP sockets.\n\nClass Description: The Radius class provides functionality to communicate with a RADIUS server for authentication (Access-Request) and accounting operations. It handles packet construction, socket communication, and response parsing according to RADIUS protocol standards.\n\nAttributes:\n\n_ip_radius_server: [string] - IP address of the RADIUS server\n_shared_secret: [string] - Shared secret for communication with RADIUS server\n_radius_suffix: [string] - Suffix to append to usernames\n_udp_timeout: [int] - Timeout for UDP operations in seconds\n_authentication_port: [int] - Port for authentication requests (default 1812)\n_accounting_port: [int] - Port for accounting requests (default 1813)\n_nas_ip_address: [string] - NAS IP address to send in requests\n_nas_port: [int] - NAS port to send in requests\n_encrypted_password: [string] - Encrypted password for authentication\n_user_ip_address: [string] - User's IP address\n_request_authenticator: [string] - Request authenticator value\n_response_authenticator: [string] - Response authenticator value\n_username: [string] - Username for authentication\n_password: [string] - Password for authentication\n_identifier_to_send: [int] - Packet identifier to send\n_identifier_received: [int] - Received packet identifier\n_radius_packet_to_send: [int] - RADIUS packet code to send\n_radius_packet_received: [int] - Received RADIUS packet code\n_attributes_to_send: [array] - Attributes to include in outgoing packets\n_attributes_received: [array] - Attributes received from server\n_socket_to_server: [resource] - Socket connection to server\n_debug_mode: [bool] - Debug mode flag\ndebug_text: [array] - Debug messages\n_attributes_info: [array] - RADIUS attribute information\n_radius_packet_info: [array] - RADIUS packet type information\n_last_error_code: [int] - Last error code\n_last_error_message: [string] - Last error message\n\nMethods:\n\n__construct: [function]($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) -> [void] - Initializes the Radius object with server details and default values\n\nAccessRequest: [function]($username = '', $password = '', $udp_timeout = 0, $state = NULL) -> [bool] - Sends an Access-Request to the RADIUS server and returns true if authentication is successful (Access-Accept received)\n\nSetIpRadiusServer: [function]($ip_radius_server) -> [void] - Sets the RADIUS server IP address\n\nSetSharedSecret: [function]($shared_secret) -> [void] - Sets the shared secret for RADIUS communication\n\nSetAuthenticationPort: [function]($authentication_port) -> [void] - Sets the authentication port\n\nSetAccountingPort: [function]($accounting_port) -> [void] - Sets the accounting port\n\nSetRadiusSuffix: [function]($radius_suffix) -> [void] - Sets the username suffix\n\nSetUdpTimeout: [function]($udp_timeout) -> [void] - Sets the UDP timeout value\n\nSetUsername: [function]($username = '') -> [void] - Sets the username for authentication\n\nSetPassword: [function]($password = '') -> [void] - Sets the password for authentication\n\nSetNasIpAddress: [function]($nas_ip_address = '') -> [void] - Sets the NAS IP address\n\nSetNasPort: [function]($nas_port = 0) -> [void] - Sets the NAS port\n\nSetPacketCodeToSend: [function]($packet_code) -> [void] - Sets the RADIUS packet code to send\n\nSetAttribute: [function]($attribute_type, $attribute_value) -> [void] - Adds an attribute to the outgoing packet\n\nGetNextIdentifier: [function]() -> [int] - Returns the next packet identifier\n\nGenerateRequestAuthenticator: [function]() -> [void] - Generates a new request authenticator\n\nDecodeAttribute: [function]($attribute_raw_value, $attribute_type) -> [mixed] - Decodes a received attribute value\n\nClearLastError: [function]() -> [void] - Clears the last error information\n\nClearDataToSend: [function]() -> [void] - Clears all data to be sent\n\nClearDataReceived: [function]() -> [void] - Clears all received data",
    "Canonical_solution": "class Radius\n{\n    var $_ip_radius_server;\n    var $_shared_secret;\n    var $_radius_suffix;\n    var $_udp_timeout;\n    var $_authentication_port;\n    var $_accounting_port;\n    var $_nas_ip_address;\n    var $_nas_port;\n    var $_encrypted_password;\n    var $_user_ip_address;\n    var $_request_authenticator;\n    var $_response_authenticator;\n    var $_username;\n    var $_password;\n    var $_identifier_to_send;\n    var $_identifier_received;\n    var $_radius_packet_to_send;\n    var $_radius_packet_received;\n    var $_attributes_to_send;\n    var $_attributes_received;\n    var $_socket_to_server;\n    var $_debug_mode;\n    var $debug_text = [];\n    var $_attributes_info;\n    var $_radius_packet_info;\n    var $_last_error_code;\n    var $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813)\n    {\n        $this->_radius_packet_info[1] = 'Access-Request';\n        $this->_radius_packet_info[2] = 'Access-Accept';\n        $this->_radius_packet_info[3] = 'Access-Reject';\n        $this->_radius_packet_info[4] = 'Accounting-Request';\n        $this->_radius_packet_info[5] = 'Accounting-Response';\n        $this->_radius_packet_info[11] = 'Access-Challenge';\n        $this->_radius_packet_info[12] = 'Status-Server (experimental)';\n        $this->_radius_packet_info[13] = 'Status-Client (experimental)';\n        $this->_radius_packet_info[255] = 'Reserved';\n\n        $this->_identifier_to_send = 0;\n        $this->_user_ip_address = (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '0.0.0.0');\n\n        $this->GenerateRequestAuthenticator();\n        $this->SetIpRadiusServer($ip_radius_server);\n        $this->SetSharedSecret($shared_secret);\n        $this->SetAuthenticationPort($authentication_port);\n        $this->SetAccountingPort($accounting_port);\n        $this->SetRadiusSuffix($radius_suffix);\n        $this->SetUdpTimeout($udp_timeout);\n        $this->SetUsername();\n        $this->SetPassword();\n        $this->SetNasIpAddress();\n        $this->SetNasPort();\n\n        $this->ClearLastError();\n        $this->ClearDataToSend();\n        $this->ClearDataReceived();\n    }\n\n    function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL)\n    {\n        $this->ClearDataReceived();\n        $this->ClearLastError();\n\n        $this->SetPacketCodeToSend(1);\n\n        if (0 < strlen($username))\n        {\n            $this->SetUsername($username);\n        }\n\n        if (0 < strlen($password))\n        {\n            $this->SetPassword($password);\n        }\n\n        if ($state !== NULL)\n        {\n            $this->SetAttribute(24, $state);\n        }\n        else\n        {\n            $this->SetAttribute(6, 1);\n        }\n\n        if (intval($udp_timeout) > 0)\n        {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n\n        $attributes_content = '';\n        $attribute_count1 = count((array)$this->_attributes_to_send);\n        for ($attributes_loop = 0; $attributes_loop < $attribute_count1; $attributes_loop++)\n        {\n            $attributes_content .= $this->_attributes_to_send[$attributes_loop];\n        }\n\n        $packet_length  = 4;\n        $packet_length += strlen($this->_request_authenticator);\n        $packet_length += strlen($attributes_content);\n\n        $packet_data  = chr($this->_radius_packet_to_send);\n        $packet_data .= chr($this->GetNextIdentifier());\n        $packet_data .= chr(intval($packet_length / 256));\n        $packet_data .= chr(intval($packet_length % 256));\n        $packet_data .= $this->_request_authenticator;\n        $packet_data .= $attributes_content;\n\n        $_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, 17);\n\n        if ($_socket_to_server === FALSE)\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_connect($_socket_to_server, $this->_ip_radius_server, $this->_authentication_port))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_write($_socket_to_server, $packet_data, $packet_length))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        else\n        {\n            $read_socket_array   = array($_socket_to_server);\n            $write_socket_array  = NULL;\n            $except_socket_array = NULL;\n\n            $received_packet = chr(0);\n\n            if (!(FALSE === socket_select($read_socket_array, $write_socket_array, $except_socket_array, $this->_udp_timeout)))\n            {\n                if (in_array($_socket_to_server, $read_socket_array))\n                {\n                    if (FALSE === ($received_packet = @socket_read($_socket_to_server, 1024)))\n                    {\n                        $received_packet = chr(0);\n                        $this->_last_error_code    = socket_last_error();\n                        $this->_last_error_message = socket_strerror($this->_last_error_code);\n                    }\n                    else\n                    {\n                        socket_close($_socket_to_server);\n                    }\n                }\n            }\n            else\n            {\n                socket_close($_socket_to_server);\n            }\n        }\n\n        $this->_radius_packet_received = intval(ord(substr($received_packet, 0, 1)));\n\n        if ($this->_radius_packet_received > 0)\n        {\n            $this->_identifier_received = intval(ord(substr($received_packet, 1, 1)));\n            $packet_length = (intval(ord(substr($received_packet, 2, 1))) * 256) + (intval(ord(substr($received_packet, 3, 1)));\n            $this->_response_authenticator = substr($received_packet, 4, 16);\n            $attributes_content = substr($received_packet, 20, ($packet_length - 4 - 16));\n            while (strlen($attributes_content) > 2)\n            {\n                $attribute_type = intval(ord(substr($attributes_content, 0, 1)));\n                $attribute_length = intval(ord(substr($attributes_content, 1, 1)));\n                $attribute_raw_value = substr($attributes_content, 2, $attribute_length - 2);\n                $attributes_content = substr($attributes_content, $attribute_length);\n\n                $attribute_value = $this->DecodeAttribute($attribute_raw_value, $attribute_type);\n\n                $this->_attributes_received[] = array($attribute_type, $attribute_value);\n            }\n        }\n\n        return (2 == ($this->_radius_packet_received));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "<?php\nclass Radius {\n    protected $_ip_radius_server;\n    protected $_shared_secret;\n    protected $_radius_suffix;\n    protected $_udp_timeout;\n    protected $_authentication_port;\n    protected $_accounting_port;\n    protected $_nas_ip_address;\n    protected $_nas_port;\n    protected $_encrypted_password;\n    protected $_user_ip_address;\n    protected $_request_authenticator;\n    protected $_response_authenticator;\n    protected $_username;\n    protected $_password;\n    protected $_identifier_to_send;\n    protected $_identifier_received;\n    protected $_radius_packet_to_send;\n    protected $_radius_packet_received;\n    protected $_attributes_to_send;\n    protected $_attributes_received;\n    protected $_socket_to_server;\n    protected $_debug_mode;\n    protected $_debug_text;\n    protected $_attributes_info;\n    protected $_radius_packet_info;\n    protected $_last_error_code;\n    protected $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 1;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 1;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->_debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = null) {\n        $this->ClearDataToSend();\n        if (empty($username) || empty($password)) {\n            $this->SetLastError(1, 'Username or password not provided');\n            return false;\n        }\n        $this->_username = $username . $this->_radius_suffix;\n        $this->_password = $password;\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username);\n        $this->SetAttribute(2, $this->_user_ip_address);\n        $this->SetAttribute(3, $this->_nas_ip_address);\n        $this->SetAttribute(4, $this->_nas_port);\n        $this->SetAttribute(26, $this->EncryptPassword($this->_password, $this->_request_authenticator));\n        $packet = $this->BuildPacket();\n        if (!$packet) {\n            $this->SetLastError(2, 'Failed to build RADIUS packet');\n            return false;\n        }\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->SetLastError(3, 'Failed to create socket');\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $udp_timeout ?: $this->_udp_timeout, 'usec' => 0]);\n        $result = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $this->_authentication_port);\n        if ($result === false) {\n            $this->SetLastError(4, 'Failed to send RADIUS request');\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        $response = '';\n        $from = '';\n        $port = 0;\n        $result = socket_recvfrom($this->_socket_to_server, $response, 4096, 0, $from, $port);\n        if ($result === false) {\n            $this->SetLastError(5, 'Failed to receive RADIUS response');\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        $this->ParseResponse($response);\n        socket_close($this->_socket_to_server);\n        return $this->_radius_packet_received === 2;\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[] = ['type' => $attribute_type, 'value' => $attribute_value];\n    }\n\n    public function GetNextIdentifier() {\n        return $this->_identifier_to_send++;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    public function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 26:\n                return $this->DecryptPassword($attribute_raw_value, $this->_response_authenticator);\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    protected function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . chr(0) . chr(0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $attr) {\n            $type = $attr['type'];\n            $value = $attr['value'];\n            $length = 1 + strlen($value);\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        return $packet;\n    }\n\n    protected function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $this->_response_authenticator = substr($response, 4, 16);\n        $offset = 20;\n        while ($offset < strlen($response)) {\n            $type = ord($response[$offset]);\n            $length = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $length - 2);\n            $this->_attributes_received[] = ['type' => $type, 'value' => $value];\n            $offset += $length;\n        }\n    }\n\n    protected function EncryptPassword($password, $authenticator) {\n        $padded = str_pad($password, 16, \"\\0\");\n        $xor = '';\n        for ($i = 0; $i < 16; $i++) {\n            $xor .= chr(ord($padded[$i]) ^ ord($authenticator[$i]));\n        }\n        $hash = md5($this->_shared_secret . $xor, true);\n        return $hash;\n    }\n\n    protected function DecryptPassword($encrypted, $authenticator) {\n        $xor = '';\n        for ($i = 0; $i < 16; $i++) {\n            $xor .= chr(ord($encrypted[$i]) ^ ord($authenticator[$i]));\n        }\n        $hash = md5($this->_shared_secret . $xor, true);\n        return substr($xor, 0, strpos($xor, \"\\0\"));\n    }\n\n    protected function SetLastError($code, $message) {\n        $this->_last_error_code = $code;\n        $this->_last_error_message = $message;\n        if ($this->_debug_mode) {\n            $this->_debug_text[] = \"Error [$code]: $message\";\n        }\n    }\n}\n?>"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Implement a UDP scraper class for interacting with BitTorrent trackers to scrape torrent statistics using UDP protocol.\n\nClass Description: UdpScraper is a class that handles communication with BitTorrent trackers via UDP protocol to retrieve scrape information (seeders, leechers, downloads) for given torrent info hashes. It manages socket connections, transaction IDs, and packet formatting according to the UDP tracker protocol.\n\nAttributes:\n- currentConnectionId: [string] - The connection ID received from the tracker after initial connection\n- transactionId: [int] - The current transaction ID used for request/response tracking\n- socket: [resource|null] - The UDP socket resource for communication\n- timeout: [int] - Socket timeout in seconds for send/receive operations\n\nMethods:\n- scrape([Tracker $tracker, array $hashes]) -> [array] - Main method to scrape multiple torrent hashes by splitting them into chunks\n- scrapeChunk([Tracker $tracker, array $hashes]) -> [array] - Scrapes a chunk of torrent hashes (max 74 at a time)\n- initSocket() -> [resource] - Initializes and returns a UDP socket\n- connect([string $domain, int $port]) -> [void] - Connects the socket to the tracker\n- generateTransactionId() -> [void] - Generates a random transaction ID\n- startTransaction() -> [void] - Initiates connection with the tracker and establishes connection ID\n- scrapeHashes([array $hashes]) -> [array] - Sends scrape request for given hashes and processes response\n- request([string $packet, int $readLength]) -> [string] - Sends packet and reads response with timeout\n- closeSocket() -> [void] - Closes the socket and resets connection state\n- checkError([string $response]) -> [void] - Checks for and handles error responses from tracker",
    "Canonical_solution": "namespace common\\modules\\torrent_scraper\\models;\n\nuse common\\models\\ScraperException;\n\nclass UdpScraper extends BaseScraper\n{\n    const ACTION_CONNECT = 0;\n    const ACTION_ANNOUNCE = 1;\n    const ACTION_SCRAPE = 2;\n    const ACTION_ERROR = 3;\n\n    const CONNECTION_ID = \"\\x00\\x00\\x04\\x17\\x27\\x10\\x19\\x80\";\n\n    protected $currentConnectionId = null;\n    protected $transactionId = null;\n    protected $socket = null;\n    protected $timeout = 15;\n\n    public function scrape(Tracker $tracker, array $hashes)\n    {\n        $chunks = array_chunk($hashes, 74);\n        $result = [];\n        foreach ($chunks as $chunk) {\n            $result = array_merge($result, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $result;\n    }\n\n    public function scrapeChunk(Tracker $tracker, $hashes)\n    {\n        $this->initSocket();\n        $this->connect($tracker->host, $tracker->port);\n        $this->startTransaction();\n        $torrents = $this->scrapeHashes($hashes);\n        $this->closeSocket();\n        return $torrents;\n    }\n\n    protected function initSocket()\n    {\n        if ($this->socket === null) {\n            $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n            if ($socket === false) {\n                throw new UdpScraperException(socket_strerror(socket_last_error()));\n            }\n            $this->socket = $socket;\n        }\n        return $this->socket;\n    }\n\n    protected function connect($domain, $port)\n    {\n        if (socket_connect($this->socket, $domain, $port) === false) {\n            throw new UdpScraperException(socket_strerror(socket_last_error($this->socket)));\n        }\n    }\n\n    protected function generateTransactionId()\n    {\n        $this->transactionId = mt_rand(0, 65535);\n    }\n\n    protected function startTransaction()\n    {\n        $this->generateTransactionId();\n        $packet = static::CONNECTION_ID . pack('N', static::ACTION_CONNECT) . pack('N', $this->transactionId);\n        $res = $this->request($packet, 16);\n        if (strlen($res) < 1) {\n            throw new UdpScraperException('No connection response.');\n        }\n        if (strlen($res) < 16) {\n            throw new UdpScraperException('Too short connection response.');\n        }\n        $resUnpacked = unpack(\"Naction/Ntransid\", $res);\n\n        if ($resUnpacked['action'] != static::ACTION_CONNECT || $resUnpacked['transid'] != $this->transactionId) {\n            throw new UdpScraperException('Invalid connection response.');\n        }\n\n        $this->currentConnectionId = substr($res, 8, 8);\n    }\n\n    protected function scrapeHashes($hashes)\n    {\n        $hashString = '';\n        foreach ($hashes as $hash) {\n            $hashString .= pack('H*', $hash);\n        }\n\n        $packet = $this->currentConnectionId . pack(\"N\", static::ACTION_SCRAPE) . pack(\"N\", $this->transactionId) . $hashString;\n\n        $readLength = 8 + (12 * count($hashes));\n\n        $res = $this->request($packet, $readLength);\n\n        if (strlen($res) < 1) {\n            throw new UdpScraperException('No scrape response.');\n        }\n        if (strlen($res) < 8) {\n            throw new UdpScraperException('Too short scrape response.');\n        }\n\n        $resUnpacked = unpack(\"Naction/Ntransid\", $res);\n\n        if ($resUnpacked['action'] == static::ACTION_ERROR) {\n            $this->checkError($res);\n        }\n\n        if (strlen($res) < $readLength) {\n            throw new UdpScraperException('Too short scrape response.');\n        }\n\n        $torrents = [];\n        $index = 8;\n        foreach ($hashes as $hash) {\n            $resUnpacked = unpack(\"Ncomplete/Ndownloaded/Nincomplete\", substr($res, $index, 12));\n            $torrents[$hash] = $resUnpacked;\n            $index = $index + 12;\n        }\n        return $torrents;\n    }\n\n    protected function request($packet, $readLength)\n    {\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n        socket_set_option($this->socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n\n        if (socket_write($this->socket, $packet, strlen($packet)) === false) {\n            throw new UdpScraperException(socket_strerror(socket_last_error($this->socket)));\n        }\n\n        $res = socket_read($this->socket, $readLength, PHP_BINARY_READ);\n        return $res;\n    }\n\n    protected function closeSocket()\n    {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->transactionId = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    protected function checkError($response)\n    {\n        $unpacked = unpack(\"Naction/Ntransid/H*error\", $response);\n        throw new UdpScraperException($unpacked['error']);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "class UdpScraper {\n    protected $currentConnectionId;\n    protected $transactionId;\n    protected $socket;\n    protected $timeout;\n    protected $trackerDomain;\n    protected $trackerPort;\n\n    public function __construct($timeout = 5) {\n        $this->timeout = $timeout;\n    }\n\n    protected function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        return $this->socket;\n    }\n\n    protected function connect($domain, $port) {\n        $this->trackerDomain = $domain;\n        $this->trackerPort = $port;\n        if (!$this->socket) {\n            $this->initSocket();\n        }\n        socket_connect($this->socket, $domain, $port);\n    }\n\n    protected function generateTransactionId() {\n        $this->transactionId = mt_rand(0, 0xFFFFFFFF);\n    }\n\n    protected function startTransaction($tracker) {\n        $this->generateTransactionId();\n        $packet = $this->buildConnectPacket();\n        $response = $this->request($packet, 16);\n        $this->currentConnectionId = $this->parseConnectResponse($response);\n    }\n\n    protected function buildConnectPacket() {\n        $action = pack('N', 0);\n        $connectionId = pack('N', 0) . pack('N', 0);\n        $transactionId = pack('N', $this->transactionId);\n        return $action . $connectionId . $transactionId;\n    }\n\n    protected function parseConnectResponse($response) {\n        $action = unpack('N', substr($response, 0, 4))[1];\n        $transId = unpack('N', substr($response, 4, 4))[1];\n        $connId = substr($response, 8, 8);\n        if ($action !== 0 || $transId !== $this->transactionId) {\n            throw new Exception('Invalid connect response');\n        }\n        return $connId;\n    }\n\n    protected function scrapeHashes($tracker, $hashes) {\n        $this->generateTransactionId();\n        $packet = $this->buildScrapePacket($hashes);\n        $expectedLength = 12 + 32 * count($hashes);\n        $response = $this->request($packet, $expectedLength);\n        $this->checkError($response);\n        return $this->parseScrapeResponse($response, $hashes);\n    }\n\n    protected function buildScrapePacket($hashes) {\n        $action = pack('N', 2);\n        $transactionId = pack('N', $this->transactionId);\n        $infoHashes = '';\n        foreach ($hashes as $hash) {\n            $infoHashes .= $hash;\n        }\n        return $action . $transactionId . $this->currentConnectionId . $infoHashes;\n    }\n\n    protected function request($packet, $readLength) {\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n        socket_sendto($this->socket, $packet, strlen($packet), 0, $this->trackerDomain, $this->trackerPort);\n        $response = '';\n        $bytesReceived = 0;\n        while ($bytesReceived < $readLength) {\n            $data = '';\n            $from = '';\n            $port = 0;\n            $result = socket_recvfrom($this->socket, $data, $readLength - $bytesReceived, 0, $from, $port);\n            if ($result === false) {\n                throw new Exception('Socket receive failed');\n            }\n            $response .= $data;\n            $bytesReceived += $result;\n        }\n        return $response;\n    }\n\n    protected function checkError($response) {\n        $action = unpack('N', substr($response, 0, 4))[1];\n        if ($action === 3) {\n            $errorMessage = substr($response, 8);\n            throw new Exception('Tracker error: ' . $errorMessage);\n        }\n    }\n\n    protected function parseScrapeResponse($response, $hashes) {\n        $data = substr($response, 8);\n        $numTorrents = unpack('N', substr($data, 0, 4))[1];\n        $data = substr($data, 4);\n        $results = [];\n        foreach ($hashes as $hash) {\n            $infoHash = substr($data, 0, 20);\n            $seeders = unpack('N', substr($data, 20, 4))[1];\n            $leechers = unpack('N', substr($data, 24, 4))[1];\n            $downloads = unpack('N', substr($data, 28, 4))[1];\n            $results[$hash] = ['complete' => $seeders, 'incomplete' => $leechers, 'downloaded' => $downloads];\n            $data = substr($data, 32);\n        }\n        return $results;\n    }\n\n    public function scrape($tracker, $hashes) {\n        $chunks = array_chunk($hashes, 74);\n        $results = [];\n        foreach ($chunks as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    protected function scrapeChunk($tracker, $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction($tracker);\n        return $this->scrapeHashes($tracker, $hashes);\n    }\n\n    public function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n            $this->transactionId = null;\n        }\n    }\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a MySQL proxy class that handles communication between a client and MySQL server using Swoole's coroutine client for TCP/UDP communication, implementing authentication and packet handling.\n\nClass Description: MysqlProxy - A class that manages MySQL protocol communication between client and server, handling connection establishment, authentication, packet processing, and error handling.\n\nAttributes:\n\nisDuplex: [bool] - Indicates whether duplex communication is supported by Swoole version\nserver: [swoole_server] - Swoole server instance\nserverFd: [int] - File descriptor of the server connection\ncharset: [string] - Character set for MySQL communication\naccount: [array] - MySQL account credentials\nauth: [bool] - Authentication status flag\nchan: [Swoole\\Coroutine\\Channel] - Coroutine channel for communication\nserverPublicKey: [string] - Server's public key for authentication\nsalt: [array] - Salt used for password encryption\nconnected: [bool] - Connection status flag\ntimeout: [float] - Connection timeout value\nmysqlClient: [Swoole\\Coroutine\\Channel] - Channel for MySQL client communication\nmysqlServer: [HandshakePacket] - Server handshake information\nclient: [Swoole\\Coroutine\\Client] - Coroutine client instance\n\nMethods:\n\n__construct: [function](swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) -> [void] - Initializes the proxy with server, file descriptor and channel\nconnect: [function](string $host, int $port, float $timeout = 0.1, int $tryStep = 0) -> [Client|bool] - Establishes connection to MySQL server with retry logic\nonClientReceive: [function](Swoole\\Coroutine\\Client $cli, string $data) -> [void] - Handles incoming data from MySQL server\nprocessAuth: [function](string $pluginName) -> [array] - Processes authentication based on plugin type\nsend: [function](...$data) -> [bool] - Sends data to MySQL server\nrecv: [function](&$remain) -> [mixed] - Receives data from MySQL server\nonClientClose: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client connection closure\nonClientError: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client errors",
    "Canonical_solution": "use Swoole\\Coroutine\\Client;\nuse SMProxy\\MysqlPacket\\AuthPacket;\nuse SMProxy\\MysqlPacket\\BinaryPacket;\nuse SMProxy\\MysqlPacket\\ErrorPacket;\nuse SMProxy\\MysqlPacket\\HandshakePacket;\nuse SMProxy\\MysqlPacket\\MySQLMessage;\nuse SMProxy\\MysqlPacket\\OkPacket;\nuse SMProxy\\MysqlPacket\\Util\\Capabilities;\nuse SMProxy\\MysqlPacket\\Util\\CharsetUtil;\nuse SMProxy\\MysqlPacket\\Util\\SecurityUtil;\nuse SMProxy\\MysqlPool\\MySQLException;\nuse SMProxy\\MysqlPool\\MySQLPool;\n\nclass MysqlProxy\n{\n    private $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth = false;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected = false;\n    public $timeout = 0.1;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(\\swoole_server $server, int $fd, \\Swoole\\Coroutine\\Channel $chan)\n    {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->client = new Client(CONFIG['server']['swoole_client_sock_setting']['sock_type'] ?? SWOOLE_SOCK_TCP);\n        $this->client->set(CONFIG['server']['swoole_client_setting'] ?? []);\n        $this->client->set(packageLengthSetting());\n        $this->isDuplex = version_compare(SWOOLE_VERSION, '4.2.13', '>=');\n        if (!$this->isDuplex) {\n            $this->mysqlClient = new Channel(1);\n        }\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0)\n    {\n        $this->timeout = $timeout;\n        if (!$this->client->connect($host, $port, $timeout)) {\n            if ($tryStep < 3) {\n                $this->client->close();\n                return $this->connect($host, $port, $timeout, ++$tryStep);\n            } else {\n                $this->onClientError($this->client);\n                return false;\n            }\n        } else {\n            if (!$this->isDuplex) {\n                $this->mysqlClient->push($this->client);\n            }\n            self::go(function () {\n                $remain = '';\n                while (true) {\n                    $data = $this->recv($remain);\n                    if ($data === '' || $data === false) {\n                        break;\n                    }\n                }\n            });\n            return $this->client;\n        }\n    }\n\n    public function onClientReceive(\\Swoole\\Coroutine\\Client $cli, string $data)\n    {\n        self::go(function () use ($cli, $data) {\n            $fd = $this->serverFd;\n            $binaryPacket = new BinaryPacket();\n            $binaryPacket->data = getBytes($data);\n            $binaryPacket->packetLength = $binaryPacket->calcPacketSize();\n            if (isset($binaryPacket->data[4])) {\n                $send = true;\n                if ($binaryPacket->data[4] == ErrorPacket::$FIELD_COUNT) {\n                    $errorPacket = new ErrorPacket();\n                    $errorPacket->read($binaryPacket);\n                    $data = getString($errorPacket->write());\n                } elseif (!$this->connected) {\n                    if ($binaryPacket->data[4] == OkPacket::$FIELD_COUNT) {\n                        $send = false;\n                        $this->connected = true;\n                        $this->chan->push($this);\n                    } elseif ($binaryPacket->data[4] == 0x01) {\n                        if ($binaryPacket->packetLength == 6) {\n                            if ($binaryPacket->data[$binaryPacket->packetLength - 1] == 4) {\n                                $data = getString(array_merge(getMysqlPackSize(1), [3, 2]));\n                                $this->send($data);\n                            }\n                        } else {\n                            $this->serverPublicKey = substr($data, 5, strlen($data) - 2);\n                            $encryptData = SecurityUtil::sha2RsaEncrypt($this->account['password'], $this->salt, $this->serverPublicKey);\n                            $data = getString(array_merge(getMysqlPackSize(strlen($encryptData)), [5])) . $encryptData;\n                            $this->send($data);\n                        }\n                        $send = false;\n                    } elseif ($binaryPacket->data[4] == 0xfe) {\n                        $mm = new MySQLMessage($binaryPacket->data);\n                        $mm->move(5);\n                        $pluginName = $mm->readStringWithNull();\n                        $this->salt = $mm->readBytesWithNull();\n                        $password = $this->processAuth($pluginName ?: 'mysql_native_password');\n                        $this->send(getString(array_merge(getMysqlPackSize(count($password)), [3], $password)));\n                        $send = false;\n                    } elseif (!$this->auth) {\n                        $handshakePacket = (new HandshakePacket())->read($binaryPacket);\n                        $this->mysqlServer = $handshakePacket;\n                        $this->salt = array_merge($handshakePacket->seed, $handshakePacket->restOfScrambleBuff);\n                        $password = $this->processAuth($handshakePacket->pluginName);\n                        $clientFlag = Capabilities::CLIENT_CAPABILITIES;\n                        $authPacket = new AuthPacket();\n                        $authPacket->pluginName = $handshakePacket->pluginName;\n                        $authPacket->packetId = 1;\n                        if (isset($this->database) && $this->database) {\n                            $authPacket->database = $this->database;\n                        } else {\n                            $authPacket->database = 0;\n                        }\n                        if ($authPacket->database) {\n                            $clientFlag |= Capabilities::CLIENT_CONNECT_WITH_DB;\n                        }\n                        if (version_compare($handshakePacket->serverVersion, '5.0', '>=')) {\n                            $clientFlag |= Capabilities::CLIENT_MULTI_RESULTS;\n                        }\n                        $authPacket->clientFlags = $clientFlag;\n                        $authPacket->serverCapabilities = $handshakePacket->serverCapabilities;\n                        $authPacket->maxPacketSize =\n                            CONFIG['server']['swoole_client_setting']['package_max_length'] ?? 16777215;\n                        $authPacket->charsetIndex = CharsetUtil::getIndex($this->charset ?? 'utf8mb4');\n                        $authPacket->user = $this->account['user'];\n                        $authPacket->password = $password;\n                        $this->auth = true;\n                        $this->send(getString($authPacket->write()));\n                        $send = false;\n                    }\n                }\n                if ($send && $this->server->exist($fd)) {\n                    $this->server->send($fd, $data);\n                }\n            }\n        });\n    }\n\n    public function processAuth(string $pluginName)\n    {\n        switch ($pluginName) {\n            case 'mysql_native_password':\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n            case 'caching_sha2_password':\n                $password = SecurityUtil::scrambleSha256($this->account['password'], $this->salt);\n                break;\n            case 'sha256_password':\n                throw new MySQLException('Sha256_password plugin is not supported yet');\n                break;\n            case 'mysql_old_password':\n                throw new MySQLException('mysql_old_password plugin is not supported yet');\n                break;\n            case 'mysql_clear_password':\n                $password = array_merge(getBytes($this->account['password']), [0]);\n                break;\n            default:\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n        }\n        return $password;\n    }\n\n    public function send(...$data)\n    {\n        if ($this->isDuplex) {\n            if ($this->client->isConnected()) {\n                return $this->client->send(...$data);\n            } else {\n                return false;\n            }\n        } else {\n            $client = self::coPop($this->mysqlClient);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $result = $client->send(...$data);\n                $this->mysqlClient->push($client);\n                return $result;\n            }\n            return false;\n        }\n    }\n\n    public function recv(&$remain)\n    {\n        if ($this->isDuplex) {\n            $client = $this->client;\n            $data = $client->recv(-1);\n        } else {\n            $client = self::coPop($this->mysqlClient, $this->timeout);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $data = $client->recv($this->timeout / 500);\n            } else {\n                $data = '';\n            }\n            $this->mysqlClient->push($client);\n            if ($data === false && $client->errCode == 110) {\n                $data = true;\n            }\n            if ($data === '' || $data === false) {\n                $this->mysqlClient->close();\n            }\n        }\n        if ($data === '' || $data === false) {\n            $this->onClientClose($client);\n        } elseif (is_string($data)) {\n            $this->onClientReceive($client, $data);\n        }\n        return $data;\n    }\n\n    public function onClientClose(\\Swoole\\Coroutine\\Client $cli)\n    {\n        MySQLPool::destruct($cli, $this->connName);\n    }\n\n    public function onClientError(\\Swoole\\Coroutine\\Client $cli)\n    {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "wrong_result": "<?php\nclass MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset = 'utf8mb4';\n    public $account = [];\n    public $auth = false;\n    public $chan;\n    public $serverPublicKey;\n    public $salt = [];\n    public $connected = false;\n    public $timeout = 0.1;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n    public $sequenceId = 0;\n\n    public function __construct($server, $fd, $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = defined('SWOOLE_VERSION') && version_compare(SWOOLE_VERSION, '4.8.0', '>=');\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect($host, $port, $timeout = 0.1, $tryStep = 0) {\n        $this->mysqlClient = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n        $this->mysqlClient->set([\n            'timeout' => $timeout,\n            'connect_timeout' => $timeout,\n            'read_timeout' => $timeout,\n            'write_timeout' => $timeout,\n        ]);\n        $result = $this->mysqlClient->connect($host, $port);\n        if (!$result) {\n            if ($tryStep < 3) {\n                return $this->connect($host, $port, $timeout, $tryStep + 1);\n            }\n            return false;\n        }\n        $this->connected = true;\n        return $this->mysqlClient;\n    }\n\n    public function onClientReceive($cli, $data) {\n        $this->server->send($this->serverFd, $data);\n    }\n\n    public function processAuth($pluginName) {\n        if ($pluginName === 'caching_sha2_password') {\n            $this->serverPublicKey = $this->recv();\n            $this->salt = $this->processServerPublicKey($this->serverPublicKey);\n            $this->send($this->generateAuthResponse($this->account['password'], $this->salt));\n        } else {\n            $this->send($this->generateNativeAuthResponse($this->account['password']));\n        }\n    }\n\n    public function send(...$data) {\n        $packet = implode('', $data);\n        $length = strlen($packet);\n        $header = pack('N', $length);\n        $header = substr($header, 0, 3) . chr($this->sequenceId);\n        $this->mysqlClient->send($header . $packet);\n        $this->sequenceId++;\n    }\n\n    public function recv(&$remain) {\n        $header = $this->mysqlClient->recv(4);\n        if ($header === false) return false;\n        $length = unpack('N', substr($header, 0, 3) . \"\\x00\")[1];\n        $remain = $this->mysqlClient->recv();\n        return $this->mysqlClient->recv($length);\n    }\n\n    public function onClientClose($cli) {\n        $this->connected = false;\n    }\n\n    public function onClientError($cli) {\n        $this->connected = false;\n    }\n\n    private function processServerPublicKey($publicKey) {\n        // Placeholder for public key processing logic\n        return ['salt' => 'random_salt'];\n    }\n\n    private function generateAuthResponse($password, $salt) {\n        // Placeholder for password hashing logic\n        return 'hashed_password';\n    }\n\n    private function generateNativeAuthResponse($password) {\n        // Placeholder for native password hashing logic\n        return 'native_hash';\n    }\n}\n?>"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a PHP class that implements a JSON-RPC client using Swoole's coroutine-based TCP client for asynchronous communication with a JSON-RPC server. The class should handle connection management, request/response serialization, and middleware processing.\n\nClass Description: The Connection class provides a JSON-RPC client implementation using Swoole's coroutine client for TCP communication. It manages the connection lifecycle, handles JSON-RPC protocol serialization/deserialization, and supports middleware processing for requests.\n\nAttributes:\n- host: [string] - The hostname or IP address of the JSON-RPC server\n- port: [int] - The port number of the JSON-RPC server\n- timeout: [float] - Connection timeout in seconds\n- callTimeout: [float] - Timeout for RPC calls in seconds\n- middleware: [array] - Array of middleware objects to process requests\n- client: [Swoole\\Coroutine\\Client] - The Swoole coroutine client instance (protected)\n\nMethods:\n- __construct([array $config = []]) -> [void] - Constructor that initializes the connection with optional configuration\n- connect() -> [void] - Establishes a TCP connection to the JSON-RPC server\n- call([Request $request]) -> [Response] - Sends a JSON-RPC request and returns the response, processing through middleware\n- close() -> [void] - Closes the connection to the server\n- recv([float $timeout = -1]) -> [string] - Receives data from the server with optional timeout (protected)\n- send([string $data]) -> [void] - Sends data to the server (protected)",
    "Canonical_solution": "use Mix\\Bean\\BeanInjector;\nuse Mix\\JsonRpc\\Constants;\nuse Mix\\JsonRpc\\Exception\\DeserializeException;\nuse Mix\\JsonRpc\\Helper\\JsonRpcHelper;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareDispatcher;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareInterface;\nuse Mix\\JsonRpc\\Message\\Request;\nuse Mix\\JsonRpc\\Message\\Response;\nuse Swoole\\Coroutine\\Client;\n\nclass Connection\n{\n    public $host = '';\n    public $port = 0;\n    public $timeout = 0.0;\n    public $callTimeout = 10.0;\n    public $middleware = [];\n    protected $client;\n\n    public function __construct(array $config = [])\n    {\n        BeanInjector::inject($this, $config);\n    }\n\n    public function connect()\n    {\n        $host    = $this->host;\n        $port    = $this->port;\n        $timeout = $this->timeout;\n        $client  = new Client(SWOOLE_SOCK_TCP);\n        $client->set([\n            'open_eof_check' => true,\n            'package_eof'    => Constants::EOF,\n        ]);\n        if (!$client->connect($host, $port, $timeout)) {\n            throw new \\Swoole\\Exception(sprintf(\"JSON-RPC: %s (host:%s, port: %s)\", $client->errMsg, $host, $port), $client->errCode);\n        }\n        $this->client = $client;\n    }\n\n    public function call(Request $request)\n    {\n        $process              = function (Request $request) {\n            $jsonString = JsonRpcHelper::encode($request) . Constants::EOF;\n            $this->send($jsonString);\n            $data = $this->recv($this->callTimeout);\n            return JsonRpcHelper::deserializeResponse($data);\n        };\n        $middlewareDispatcher = new MiddlewareDispatcher($this->middleware, $process, $request);\n        return $middlewareDispatcher->dispatch();\n    }\n\n    public function close()\n    {\n        if (!$this->client->close()) {\n            $errMsg  = $this->client->errMsg;\n            $errCode = $this->client->errCode;\n            if ($errMsg == '' && $errCode == 0) {\n                return;\n            }\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n    }\n\n    protected function recv(float $timeout = -1)\n    {\n        $data = $this->client->recv($timeout);\n        if ($data === false) {\n            $client = $this->client;\n            throw new \\Swoole\\Exception($client->errMsg, $client->errCode);\n        }\n        if ($data === \"\") {\n            $errCode = stripos(PHP_OS, 'Darwin') !== false ? 54 : 104;\n            $errMsg  = swoole_strerror($errCode, 9);\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n        return $data;\n    }\n\n    protected function send(string $data)\n    {\n        $len  = strlen($data);\n        $size = $this->client->send($data);\n        if ($size === false) {\n            throw new \\Swoole\\Exception($this->client->errMsg, $this->client->errCode);\n        }\n        if ($len !== $size) {\n            throw new \\Swoole\\Exception('The sending data is incomplete, it may be that the socket has been closed by the peer.');\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "wrong_result": "```php\nclass Connection {\n    protected $host;\n    protected $port;\n    protected $timeout;\n    protected $callTimeout;\n    protected $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 80;\n        $this->timeout = $config['timeout'] ?? 5.0;\n        $this->callTimeout = $config['callTimeout'] ?? 10.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = null;\n    }\n\n    public function connect() {\n        if ($this->client === null) {\n            $this->client = new \\Swoole\\Coroutine\\Client(SWOOLE_TCP);\n            $this->client->connect($this->host, $this->port, $this->timeout);\n        }\n    }\n\n    public function call($request) {\n        foreach ($this->middleware as $middleware) {\n            $request = $middleware($request);\n        }\n\n        $jsonRequest = json_encode($request);\n        $this->send($jsonRequest);\n\n        $responseString = $this->recv($this->callTimeout);\n        $responseData = json_decode($responseString, true);\n        return new Response($responseData);\n    }\n\n    public function close() {\n        if ($this->client) {\n            $this->client->close();\n        }\n    }\n\n    protected function send($data) {\n        $this->client->send($data);\n    }\n\n    protected function recv($timeout = -1) {\n        return $this->client->recv($timeout);\n    }\n}\n```"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, providing methods to initialize, communicate with, and terminate the process, while handling errors and resource cleanup.\n\nClass Description: The ProcessStream class manages a subprocess execution through pipes for stdin, stdout, and stderr communication. It handles process initialization, error checking, and proper resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The stdin pipe for writing to the subprocess\n- out: resource - The stdout pipe for reading from the subprocess\n\nMethods:\n- setCommand(string $command) -> void - Sets the command to be executed by the subprocess\n- initialize() -> void - Starts the subprocess, sets up communication pipes, and checks for startup errors\n- terminate() -> void - Closes all pipes and terminates the subprocess\n- getReadConnectionDescription() -> string - Returns a description of the process connection (for logging/debugging)",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command)\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n        if (!$this->stream) {\n            throw new \\Exception(\"Failed to start process: {$this->command}\");\n        }\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        $status = proc_get_status($this->stream);\n        return \"Command: {$this->command}, PID: {$status['pid']}\";\n    }\n}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a PHP class that handles process execution and communication using pipes, specifically designed for logging purposes. The class should manage subprocess creation, input/output streams, and error handling.\n\nClass Description: ProcessHandler is a logging handler that executes a subprocess and communicates with it through pipes (stdin, stdout, stderr). It ensures proper process management, handles startup errors, and provides methods for writing input and reading errors.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle\n- command: [string] - The command to execute as a subprocess\n- cwd: [string|null] - The working directory for the subprocess\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command, log level, and working directory\n- write(LogRecord $record) -> [void] - Writes formatted log record to the process stdin\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Ensures the subprocess is running (starts if not)\n- startProcess() -> [void] - Starts the subprocess using proc_open\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors the stderr pipe for activity\n- readProcessErrors() -> [string] - Reads and returns error output from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to the process stdin",
    "Canonical_solution": "use Monolog\\Level;\nuse Monolog\\LogRecord;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private string $command;\n    private ?string $cwd;\n    private array $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(LogRecord $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record->formatted);\n\n        $errors = $this->readProcessErrors();\n        if ($errors !== '') {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || $errors !== '') {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "```php\nclass ProcessHandler {\n    protected $process;\n    protected $command;\n    protected $cwd;\n    protected $pipes;\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->pipes = [];\n        $this->process = null;\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record->formatted);\n    }\n\n    public function close() {\n        if ($this->process !== null) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n            $this->pipes = [];\n        }\n    }\n\n    protected function ensureProcessIsStarted() {\n        if ($this->process === null) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    protected function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n\n        $options = ['cwd' => $this->cwd];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $options);\n\n        if ($this->process === false) {\n            throw new \\RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    protected function handleStartupErrors() {\n        if ($this->process === false) {\n            throw new \\RuntimeException(\"Process startup failed.\");\n        }\n    }\n\n    public function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        $num = stream_select($read, $write, $except, 0);\n        if ($num > 0) {\n            return array_search($read[0], $this->pipes);\n        }\n        return false;\n    }\n\n    public function readProcessErrors() {\n        $index = $this->selectErrorStream();\n        if ($index !== false) {\n            return fread($this->pipes[$index], 8192);\n        }\n        return '';\n    }\n\n    protected function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n}\n```"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a function that executes a shell command in a subprocess and captures its standard output while properly handling resources and errors.\n\nFunction Description: The function `readFromProcess` executes a given shell command as a subprocess using PHP's `proc_open`, captures the output from the subprocess's stdout stream, and ensures all resources are properly closed. It handles cases where the `proc_open` function is unavailable or fails to create the subprocess.\n\nInput: \n- `$command` (string): The shell command to be executed in the subprocess.\n\nOutput: \n- (string|null): Returns the captured output from the subprocess's stdout if successful, or null if the subprocess could not be created or if `proc_open` is unavailable.",
    "Canonical_solution": "function readFromProcess($command)\n{\n    if (!\\function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);\n    if (!\\is_resource($process)) {\n        return null;\n    }\n\n    $info = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    proc_close($process);\n\n    return $info;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "```php\nfunction readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptors = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $process = proc_open($command, $descriptors, $pipes);\n\n    if ($process === false) {\n        return null;\n    }\n\n    fclose($pipes[0]);\n\n    $output = '';\n    while (!feof($pipes[1])) {\n        $output .= fread($pipes[1], 8192);\n    }\n\n    while (!feof($pipes[2])) {\n        fread($pipes[2], 8192);\n    }\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}\n```"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, handling input/output streams and proper cleanup.\n\nClass Description: ProcessStream is a class that manages the lifecycle of a subprocess, including initialization, stream handling, and termination. It provides access to the subprocess's standard input and output streams while properly handling errors and resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The input stream (stdin) of the subprocess\n- out: resource - The output stream (stdout) of the subprocess\n\nMethods:\n- setCommand(string $command): void - Sets the command to be executed by the subprocess\n- initialize(): void - Starts the subprocess, sets up streams, and checks for startup errors\n- terminate(): void - Closes all streams and terminates the subprocess\n- getReadConnectionDescription(): string - Returns a description of the process connection",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command): void\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', '\\\\' === \\DIRECTORY_SEPARATOR ? 'a' : 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (empty($this->command)) {\n            throw new \\Exception(\"Command not set\");\n        }\n\n        $descriptors = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptors, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new \\Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"Process: {$this->command} (stdin: \" . get_resource_type($this->in) . \", stdout: \" . get_resource_type($this->out) . \")\";\n    }\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a function that executes system commands using various PHP execution methods, with fallback options from most to least preferred, and returns the command output along with execution method information.\n\nFunction Description: The function attempts to execute a system command using multiple PHP execution methods in a prioritized order (COM, exec, shell_exec, system, passthru, popen, proc_open). It handles both Windows and Unix-like systems, sets the working directory, and properly manages process pipes and resources. The function returns the command output and indicates which execution method was successful.\n\nInput:\n- $cmd: [string] - The system command to be executed\n- $cwd: [string] - The working directory where the command should be executed\n- $com: [bool] (optional) - Flag to force using COM method on Windows (default: false)\n\nOutput:\n- Returns [array] with two elements:\n  - 'res': [string] - The output from the executed command\n  - 'msg': [string] - Status message indicating the execution method used or NULL if no output",
    "Canonical_solution": "function command($cmd, $cwd, $com = false) {\n    $iswin = substr(PHP_OS,0,3) == 'WIN' ? true : false;\n    $res = $msg = '';\n    \n    if($cwd == 'com' || $com) {\n        if($iswin && class_exists('COM')) {\n            $wscript = new COM('Wscript.Shell');\n            $exec = $wscript->exec('c:\\\\windows\\\\system32\\\\cmd.exe /c '.$cmd);\n            $stdout = $exec->StdOut();\n            $res = $stdout->ReadAll();\n            $msg = 'Wscript.Shell';\n        }\n    } else {\n        chdir($cwd);\n        $cwd = getcwd();\n        \n        if(function_exists('exec')) {\n            @exec($cmd, $res);\n            $res = join(\"\\n\", $res);\n            $msg = 'exec';\n        }\n        elseif(function_exists('shell_exec')) {\n            $res = @shell_exec($cmd);\n            $msg = 'shell_exec';\n        }\n        elseif(function_exists('system')) {\n            ob_start();\n            @system($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'system';\n        }\n        elseif(function_exists('passthru')) {\n            ob_start();\n            @passthru($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'passthru';\n        }\n        elseif(function_exists('popen')) {\n            $fp = @popen($cmd, 'r');\n            if($fp) {\n                while(!feof($fp)) {\n                    $res .= fread($fp, 1024);\n                }\n            }\n            @pclose($fp);\n            $msg = 'popen';\n        }\n        elseif(function_exists('proc_open')) {\n            $env = $iswin ? array('path' => 'c:\\\\windows\\\\system32') : array('path' => '/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin');\n            $des = array(\n                0 => array(\"pipe\", \"r\"),\n                1 => array(\"pipe\", \"w\"),\n                2 => array(\"pipe\", \"w\")\n            );\n            $process = @proc_open($cmd, $des, $pipes, $cwd, $env);\n            \n            if(is_resource($process)) {\n                fwrite($pipes[0], $cmd);\n                fclose($pipes[0]);\n                $res .= stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                $res .= stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n            @proc_close($process);\n            $msg = 'proc_open';\n        }\n    }\n    \n    $msg = $res == '' ? '<h1>NULL</h1>' : '<h2>\u5229\u7528'.$msg.'\u6267\u884c\u6210\u529f</h2>';\n    return array('res' => $res, 'msg' => $msg);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "```php\n<?php\nfunction executeCommand($cmd, $cwd, $com = false) {\n    $methods = [\n        ['name' => 'com', 'func' => 'executeCom', 'check' => function() { return stripos(PHP_OS, 'WIN') === 0; }],\n        ['name' => 'exec', 'func' => 'executeExec', 'check' => function() { return true; }],\n        ['name' => 'shell_exec', 'func' => 'executeShellExec', 'check' => function() { return true; }],\n        ['name' => 'system', 'func' => 'executeSystem', 'check' => function() { return true; }],\n        ['name' => 'passthru', 'func' => 'executePassthru', 'check' => function() { return true; }],\n        ['name' => 'popen', 'func' => 'executePopen', 'check' => function() { return true; }],\n        ['name' => 'proc_open', 'func' => 'executeProcOpen', 'check' => function() { return true; }],\n    ];\n    $filtered_methods = [];\n    foreach ($methods as $method) {\n        if ($method['name'] === 'com' && $com) {\n            $filtered_methods[] = $method;\n        } elseif ($method['name'] === 'com') {\n            if ($method['check']()) {\n                $filtered_methods[] = $method;\n            }\n        } else {\n            $filtered_methods[] = $method;\n        }\n    }\n    foreach ($filtered_methods as $method) {\n        $result = $method['func']($cmd, $cwd);\n        if ($result !== null) {\n            return ['res' => $result['res'], 'msg' => $method['name']];\n        }\n    }\n    return ['res' => '', 'msg' => 'No method succeeded'];\n}\n\nfunction executeCom($cmd, $cwd) {\n    if (!stripos(PHP_OS, 'WIN') === 0) return null;\n    $full_cmd = 'cd /d \"' . escapeshellarg($cwd) . '\" && ' . $cmd;\n    try {\n        $wsh = new COM(\"WScript.Shell\");\n        $process = $wsh->Exec($full_cmd);\n        $stdout = '';\n        $stderr = '';\n        while (!$process->StdOut->AtEndOfStream) {\n            $stdout .= $process->StdOut->ReadLine();\n        }\n        while (!$process->StdErr->AtEndOfStream) {\n            $stderr .= $process->StdErr->ReadLine();\n        }\n        $return_code = $process->ExitCode;\n        if ($return_code === 0) {\n            return ['res' => $stdout . $stderr, 'msg' => 'COM'];\n        }\n    } catch (Exception $e) {\n        return null;\n    }\n    return null;\n}\n\nfunction executeExec($cmd, $cwd) {\n    $full_cmd = 'cd ' . escapeshellarg($cwd) . ' && ' . $cmd;\n    $output = [];\n    $return_var = 0;\n    exec($full_cmd, $output, $return_var);\n    if ($return_var === 0) {\n        return ['res' => implode(\"\\n\", $output), 'msg' => 'exec'];\n    }\n    return null;\n}\n\nfunction executeShellExec($cmd, $cwd) {\n    $full_cmd = 'cd ' . escapeshellarg($cwd) . ' && ' . $cmd;\n    $output = shell_exec($full_cmd);\n    if ($output !== null) {\n        return ['res' => $output, 'msg' => 'shell_exec'];\n    }\n    return null;\n}\n\nfunction executeSystem($cmd, $cwd) {\n    $full_cmd = 'cd ' . escapeshellarg($cwd) . ' && ' . $cmd;\n    ob_start();\n    system($full_cmd);\n    $output = ob_get_clean();\n    if ($output !== false) {\n        return ['res' => $output, 'msg' => 'system'];\n    }\n    return null;\n}\n\nfunction executePassthru($cmd, $cwd) {\n    $full_cmd = 'cd ' . escapeshellarg($cwd) . ' && ' . $cmd;\n    ob_start();\n    passthru($full_cmd);\n    $output = ob_get_clean();\n    if ($output !== false) {\n        return ['res' => $output, 'msg' => 'passthru'];\n    }\n    return null;\n}\n\nfunction executePopen($cmd, $cwd) {\n    $full_cmd = 'cd ' . escapeshellarg($cwd) . ' && ' . $cmd;\n    $handle = popen($full_cmd, 'r');\n    $output = '';\n    while (!feof($handle)) {\n        $output .= fread($handle, 1024);\n    }\n    pclose($handle);\n    if ($output !== '') {\n        return ['res' => $output, 'msg' => 'popen'];\n    }\n    return null;\n}\n\nfunction executeProcOpen($cmd, $cwd) {\n    $descriptorspec = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ];\n    $options = ['cwd' => $cwd];\n    $process = proc_open($cmd, $descriptorspec, $pipes, null, null, $options);\n    if (is_resource($process)) {\n        $output = stream_get_contents($pipes[1]);\n        stream_close($pipes[1]);\n        stream_close($pipes[2]);\n        $return_code = proc_close($process);\n        if ($return_code === 0) {\n            return ['res' => $output, 'msg' => 'proc_open'];\n        }\n    }\n    return null;\n}\n?>\n```"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a PHP class that handles inter-process communication (IPC) using proc_open to execute external commands, manage input/output streams, and handle errors.\n\nClass Description: The ProcessHandler class manages subprocess execution via proc_open, providing methods to write input to the process, read output/errors, and properly clean up resources. It extends Monolog's AbstractProcessingHandler for logging integration.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle or null if not running\n- command: [string] - The command to execute in the subprocess\n- cwd: [string|null] - The working directory for the subprocess or null for default\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command and optional working directory\n- write(array $record) -> [void] - Writes formatted log record to process stdin (inherited from AbstractProcessingHandler)\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Starts the process if not already running\n- startProcess() -> [void] - Executes proc_open to start the subprocess\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors stderr for error output\n- readProcessErrors() -> [string] - Reads and returns content from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to process stdin",
    "Canonical_solution": "use Monolog\\Logger;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n        $errors = $this->readProcessErrors();\n        if (empty($errors) === false) {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || empty($errors) === false) {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "<?php\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    protected $process;\n    protected $command;\n    protected $cwd;\n    protected $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        parent::__construct($level, $bubble);\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['message']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process !== null) {\n            foreach ($this->pipes as $pipe) {\n                if (is_resource($pipe)) {\n                    fclose($pipe);\n                }\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    protected function ensureProcessIsStarted(): void\n    {\n        if ($this->process === null) {\n            $this->startProcess();\n        }\n    }\n\n    protected function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n        if ($this->process === false) {\n            $this->handleStartupErrors();\n        }\n    }\n\n    protected function handleStartupErrors(): void\n    {\n        // Handle startup errors, e.g., log or throw exception\n    }\n\n    protected function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        $errorOutput = '';\n        if (is_resource($this->pipes[2])) {\n            stream_set_blocking($this->pipes[2], false);\n            $errorOutput = stream_get_contents($this->pipes[2]);\n        }\n        return $errorOutput;\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        if (is_resource($this->pipes[0])) {\n            fwrite($this->pipes[0], $string);\n            fflush($this->pipes[0]);\n        }\n    }\n}\n?>"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Guzzle library to download files and fetch GitHub release information.\n\nClass Description: The HttpClient class provides methods for downloading remote files via HTTP and retrieving GitHub release information (both stable and pre-release) using the Guzzle HTTP client library.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- getSourceFile(string $fileName, string $savePath, string $url) -> [bool] - Downloads a file from the specified URL and saves it to the given path\n- getLatestReleaseTagName(string $repo) -> [string] - Gets the latest stable release tag name from a GitHub repository\n- getLatestPreReleaseTagName(string $repo) -> [string] - Gets the latest pre-release tag name from a GitHub repository",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass HttpClient\n{\n    private Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client();\n    }\n\n    /**\n     * Download remote file via HTTP\n     *\n     * @param string $fileName\n     * @param string $savePath\n     * @param string $url\n     * @return bool\n     */\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool\n    {\n        try {\n            if (! file_exists($savePath)) {\n                echo '\u76ee\u6807\u6587\u4ef6\u5939 ' . $savePath . ' \u4e0d\u5b58\u5728\uff0c\u4e0b\u8f09\u5931\u8d25\u3002' . PHP_EOL;\n                return false;\n            }\n\n            echo '- \u5f00\u59cb\u4e0b\u8f7d ' . $fileName . '...' . PHP_EOL;\n            $request = $this->client->get($url);\n            echo '- \u4e0b\u8f7d ' . $fileName . ' \u6210\u529f\uff0c\u6b63\u5728\u4fdd\u5b58...' . PHP_EOL;\n            $result = file_put_contents($savePath . $fileName, $request->getBody()->getContents());\n\n            if (! $result) {\n                echo '- \u4fdd\u5b58 ' . $fileName . ' \u81f3 ' . $savePath . ' \u5931\u8d25\u3002' . PHP_EOL;\n            } else {\n                echo '- \u4fdd\u5b58 ' . $fileName . ' \u81f3 ' . $savePath . ' \u6210\u529f\u3002' . PHP_EOL;\n            }\n\n            return true;\n        } catch (GuzzleException $e) {\n            echo '- \u4e0b\u8f7d ' . $fileName . ' \u5931\u8d25...' . PHP_EOL;\n            echo $e->getMessage() . PHP_EOL;\n\n            return false;\n        }\n    }\n\n    /**\n     * Get latest GitHub release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases/latest' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n\n        return json_decode(\n            $request->getBody()->getContents(),\n            true\n        )['tag_name'];\n    }\n\n    /**\n     * Get latest GitHub pre-release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestPreReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n        $latest = json_decode(\n            $request->getBody()->getContents(),\n            true\n        )[0];\n\n        return $latest['tag_name'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "```php\n<?php\n\nnamespace YourNamespace;\n\nuse GuzzleHttp\\Client;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client([\n            'headers' => [\n                'User-Agent' => 'HttpClient/1.0'\n            ]\n        ]);\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $this->client->get($url, [\n                'sink' => $savePath . '/' . $fileName\n            ]);\n            return true;\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        $response = $this->client->get(\"https://api.github.com/repos/{$repo}/releases\");\n        if ($response->getStatusCode() === 200) {\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if (!$release['prerelease']) {\n                    return $release['tag_name'];\n                }\n            }\n        }\n        return '';\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        $response = $this->client->get(\"https://api.github.com/repos/{$repo}/releases\");\n        if ($response->getStatusCode() === 200) {\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease']) {\n                    return $release['tag_name'];\n                }\n            }\n        }\n        return '';\n    }\n}\n```"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, supports streaming for large files, and includes proxy configuration.\n\nAttributes:\n- request_url: string - The URL to send the request to\n- request_headers: array - Associative array of request headers\n- request_body: string - The request body content\n- response: string - The complete response from the server\n- response_headers: array - Parsed response headers\n- response_body: string - The response body content\n- response_code: int - HTTP response status code\n- response_info: array - Additional cURL response information\n- curl_handle: resource - The cURL handle resource\n- method: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\n- proxy: array|null - Proxy configuration details\n- username: string|null - Authentication username\n- password: string|null - Authentication password\n- curlopts: array|null - Additional cURL options\n- debug_mode: bool - Whether to enable debug mode\n- request_class: string - Class name for request objects\n- response_class: string - Class name for response objects\n- useragent: string - User agent string\n- read_file: string|null - File path for reading data\n- read_stream: resource|null - Stream resource for reading data\n- read_stream_size: int|null - Size of read stream\n- read_stream_read: int - Bytes read from stream\n- write_file: string|null - File path for writing data\n- write_stream: resource|null - Stream resource for writing data\n- seek_position: int|null - Position to seek in read stream\n- cacert_location: mixed - CA certificate location\n- ssl_verification: bool - Whether to verify SSL\n- registered_streaming_read_callback: callable|null - Callback for streaming read\n- registered_streaming_write_callback: callable|null - Callback for streaming write\n\nMethods:\n- __construct(string|null $url, array|null $proxy, array|null $helpers) -> self - Initialize the request object\n- __destruct() -> self - Clean up resources\n- set_credentials(string $user, string $pass) -> self - Set authentication credentials\n- add_header(string $key, string $value) -> self - Add a request header\n- remove_header(string $key) -> self - Remove a request header\n- set_method(string $method) -> self - Set the HTTP method\n- set_useragent(string $ua) -> self - Set the user agent\n- set_body(string $body) -> self - Set the request body\n- set_request_url(string $url) -> self - Set the request URL\n- set_curlopts(array $curlopts) -> self - Set additional cURL options\n- set_read_stream_size(int $size) -> self - Set read stream size\n- set_read_stream(resource $resource, int|null $size) -> self - Set read stream resource\n- set_read_file(string $location) -> self - Set read file location\n- set_write_stream(resource $resource) -> self - Set write stream resource\n- set_write_file(string $location) -> self - Set write file location\n- set_proxy(string $proxy) -> self - Configure proxy settings\n- set_seek_position(int|null $position) -> self - Set seek position for read stream\n- register_streaming_read_callback(callable $callback) -> self - Register read callback\n- register_streaming_write_callback(callable $callback) -> self - Register write callback\n- streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Handle streaming read\n- streaming_write_callback(resource $curl_handle, string $data) -> int - Handle streaming write\n- prep_request() -> resource - Prepare and return cURL handle\n- process_response(resource|null $curl_handle, string|null $response) -> mixed - Process the response\n- send_request(bool $parse = false) -> mixed - Send the request and get response\n- get_response_header(string|null $header) -> mixed - Get response header(s)\n- get_response_body() -> string - Get response body\n- get_response_code() -> int - Get response status code",
    "Canonical_solution": "class RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request']))\n        {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response']))\n        {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy)\n        {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream))\n        {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream))\n        {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key]))\n        {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0)\n        {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0)\n            {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0)\n                {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size)\n        {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream))\n        {\n            if (fseek($this->read_stream, $this->seek_position) !== 0)\n            {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback)\n        {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length)\n        {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false)\n            {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback)\n        {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification)\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        }\n        else\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true)\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        }\n        elseif (is_string($this->cacert_location))\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode)\n        {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir'))\n        {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass']))\n            {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib'))\n        {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers))\n        {\n            $temp_headers = array();\n\n            foreach ($this->request_headers as $k => $v)\n            {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method)\n        {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream))\n                {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0)\n                    {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream))\n                {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0)\n        {\n            foreach ($this->curlopts as $k => $v)\n            {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response)\n        {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle))\n        {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header)\n            {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1])?$kv[1]:'';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response)\n            {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false)\n        {\n            throw new RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n\n        curl_close($curl_handle);\n\n        if ($parse)\n        {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header)\n        {\n            return $this->response_headers[strtolower($header)];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass RequestCore {\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->request_headers = [];\n        $this->request_body = '';\n        $this->response = '';\n        $this->response_headers = [];\n        $this->response_body = '';\n        $this->response_code = 0;\n        $this->response_info = [];\n        $this->curl_handle = null;\n        $this->method = 'GET';\n        $this->username = null;\n        $this->password = null;\n        $this->curlopts = [];\n        $this->debug_mode = false;\n        $this->request_class = 'RequestCore';\n        $this->response_class = 'ResponseCore';\n        $this->useragent = 'RequestCore/1.0';\n        $this->read_file = null;\n        $this->read_stream = null;\n        $this->read_stream_size = null;\n        $this->read_stream_read = 0;\n        $this->write_file = null;\n        $this->write_stream = null;\n        $this->seek_position = null;\n        $this->cacert_location = null;\n        $this->ssl_verification = true;\n        $this->registered_streaming_read_callback = null;\n        $this->registered_streaming_write_callback = null;\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return fwrite($this->write_stream, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        $headers = [];\n        foreach ($this->request_headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        $options = [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_POSTFIELDS => $this->request_body,\n            CURLOPT_WRITEFUNCTION => [$this, 'streaming_write_callback'],\n            CURLOPT_READFUNCTION => [$this, 'streaming_read_callback'],\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_SSL_VERIFYHOST => $this->ssl_verification ? 2 : 0,\n        ];\n        if ($this->proxy) {\n            $options[CURLOPT_PROXY] = $this->proxy;\n        }\n        if ($this->username && $this->password) {\n            $options[CURLOPT_USERPWD] = \"$this->username:$this->password\";\n        }\n        if ($this->cacert_location) {\n            $options[CURLOPT_CAINFO] = $this->cacert_location;\n        }\n        if ($this->read_stream) {\n            $options[CURLOPT_READDATA] = $this->read_stream;\n            $options[CURLOPT_INFILE] = $this->read_stream;\n            $options[CURLOPT_INFILESIZE] = $this->read_stream_size;\n        }\n        if ($this->write_stream) {\n            $options[CURLOPT_WRITEHEADER] = $this->write_stream;\n        }\n        if ($this->debug_mode) {\n            $options[CURLOPT_VERBOSE] = true;\n        }\n        if ($this->curlopts) {\n            $options = array_merge($options, $this->curlopts);\n        }\n        curl_setopt_array($this->curl_handle, $options);\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        $header_size = $this->response_info['header_size'];\n        $this->response_headers = [];\n        $this->response_body = substr($response, $header_size);\n        $headers = explode(\"\\r\\n\", substr($response, 0, $header_size));\n        foreach ($headers as $header) {\n            if (strpos($header, ':') !== false) {\n                list($key, $value) = explode(':', $header, 2);\n                $this->response_headers[trim($key)] = trim($value);\n            }\n        }\n        return $this;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        $this->process_response($this->curl_handle, $response);\n        if ($parse) {\n            return $this->response_body;\n        }\n        return $this;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}\n?>"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement a class for interacting with a pretreatment API service that handles task processing and querying, using HTTP requests with Guzzle client in PHP.\n\nClass Description: The Pretreat class provides functionality to submit tasks for processing and query their status through an API service. It handles request signing, parameter preparation, and response processing.\n\nAttributes:\n\nAttribute1: Config $config - Configuration object containing service settings like timeout, service name, and endpoint URLs\n\nMethods:\n\nMethod1: __construct(Config $config) -> void - Initializes the Pretreat instance with configuration. Throws an exception if processNotifyUrl is not configured.\n\nMethod2: process(array $tasks, array $optionalParams = []) -> array - Submits tasks for processing. Takes an array of tasks and optional parameters, returns the API response as an associative array.\n\nMethod3: query(array $taskIds, string $path) -> array|bool - Queries the status of tasks by their IDs. Returns an array of tasks if successful, or false on failure.",
    "Canonical_solution": "namespace Upyun\\Api;\n\nuse GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\nuse Upyun\\Util;\n\nclass Pretreat\n{\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        if (!$config->processNotifyUrl) {\n            throw new \\Exception(\"should config prosessNotifyUrl first.\");\n        }\n        $this->config = $config;\n    }\n\n    public function process($tasks, $optionalParams = array())\n    {\n        $encodedTasks = Util::base64Json($tasks);\n\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'notify_url' => $this->config->processNotifyUrl,\n            'tasks' => $encodedTasks,\n        );\n\n        $params = array_merge($params, $optionalParams);\n\n        $path = '/pretreatment/';\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'form_params' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n\n    public function query($taskIds, $path)\n    {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'task_ids' => implode(',', $taskIds)\n        );\n        $path = $path . '?' . http_build_query($params);\n\n        $method = 'GET';\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders\n        ]);\n\n        if ($response->getStatusCode() === 200) {\n            $body = $response->getBody()->getContents();\n            $result = json_decode($body, true);\n            if (is_array($result)) {\n                return $result['tasks'];\n            }\n        }\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "<?php\nnamespace App\\Pretreat;\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Config;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        if (empty($config->processNotifyUrl)) {\n            throw new \\Exception('processNotifyUrl is not configured');\n        }\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        try {\n            $params = array_merge($optionalParams, ['tasks' => $tasks]);\n            $signature = $this->generateSignature($params);\n            $params['signature'] = $signature;\n            $response = $this->client->post($this->config->endpoint, [\n                'json' => $params,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return [];\n        }\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        try {\n            $params = ['task_ids' => $taskIds];\n            $signature = $this->generateSignature($params);\n            $params['signature'] = $signature;\n            $response = $this->client->get($this->config->endpoint . '/' . $path, [\n                'query' => $params,\n            ]);\n            $data = json_decode($response->getBody(), true);\n            return $data['success'] ?? false;\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function generateSignature(array $params): string {\n        ksort($params);\n        $string = http_build_query($params);\n        return hash_hmac('sha256', $string, $this->config->secret);\n    }\n}\n?>"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a PHP class that fetches currency conversion rates from an external API and stores them in a repository.\n\nClass Description: The FetchConversionRate class is responsible for retrieving currency conversion rates between a base currency and all other available currencies. It uses Guzzle HTTP client to make requests to an external currency API and stores the results in a conversion rate repository.\n\nAttributes:\n- baseCurrencyId: int - The ID of the base currency for which conversion rates will be fetched\n- currencyRepository: CurrencyRepository - Repository for accessing currency data\n- conversionRateRepository: ConversionRateRepository - Repository for storing conversion rates\n\nMethods:\n- __construct(int $baseCurrencyId) -> void - Constructor that initializes the base currency ID\n- handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) -> void - Main method that executes the conversion rate fetching process:\n  - Retrieves all currencies from the repository\n  - For each target currency, makes an API request to get the conversion rate\n  - Stores or updates the conversion rate in the repository\n  - Skips invalid currencies and handles API request failures gracefully",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Exception;\n\nclass FetchConversionRate\n{\n    protected $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n    }\n\n    public function handle(\n        CurrencyRepository $currencyRepository,\n        ConversionRateRepository $conversionRateRepository\n    ): void {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $baseCurrency = $this->currencyRepository->getById($this->baseCurrencyId);\n\n        if (!$baseCurrency || !$baseCurrency->iso) {\n            return;\n        }\n\n        $client = new Client();\n\n        foreach ($this->currencyRepository->getAll() as $targetCurrency) {\n            if (!$targetCurrency->iso || $baseCurrency->iso === $targetCurrency->iso) {\n                continue;\n            }\n\n            $url = sprintf(\n                'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/%s.json',\n                $baseCurrency->iso_lowercased,\n            );\n\n            try {\n                $response = $client->request('GET', $url);\n                $decoded_response = json_decode($response->getBody(), true);\n                $rate = $decoded_response[$baseCurrency->iso_lowercased][$targetCurrency->iso_lowercased];\n            } catch (Exception) {\n                continue;\n            }\n\n            $this->conversionRateRepository->createOrUpdate(\n                $baseCurrency->id,\n                $targetCurrency->id,\n                $rate\n            );\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "<?php\n\nuse GuzzleHttp\\Client;\n\nclass FetchConversionRate {\n    private int $baseCurrencyId;\n    private CurrencyRepository $currencyRepository;\n    private ConversionRateRepository $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId) {\n        $this->baseCurrencyId = $baseCurrencyId;\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            $targetCurrencyId = $currency->getId();\n            if ($targetCurrencyId === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $client = new Client();\n                $response = $client->get('https://api.example.com/rates', [\n                    'query' => [\n                        'base' => $this->baseCurrencyId,\n                        'target' => $targetCurrencyId,\n                    ],\n                ]);\n\n                $data = json_decode($response->getBody(), true);\n                $rate = $data['rate'] ?? null;\n\n                if ($rate === null) {\n                    continue;\n                }\n\n                $this->conversionRateRepository->save($this->baseCurrencyId, $targetCurrencyId, $rate);\n            } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n                continue;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL, supporting various HTTP methods, headers, cookies, proxies, and file uploads.\n\nClass Description: The `requests` class is a static HTTP client implementation that handles HTTP requests through cURL. It supports GET, POST, and other HTTP methods, manages cookies, headers, user agents, proxies, and file uploads. The class maintains connection settings and request history.\n\nAttributes:\n\nVERSION: [string] - The version number of the requests class\nch: [resource|null] - The cURL handle resource\ntimeout: [int|array] - Timeout settings for the connection\nencoding: [string|null] - Request encoding\noutput_encoding: [string|null] - Response encoding\ncookies: [array] - Global cookies to be sent with requests\nrawheaders: [array] - Request headers\ndomain_cookies: [array] - Domain-specific cookies\nheaders: [array] - Response headers\nuseragents: [array] - List of user agent strings\nclient_ips: [array] - List of client IP addresses for spoofing\nproxies: [array] - List of proxy servers\nraw: [string] - Raw response including headers\nhead: [string] - Response headers\ncontent: [string] - Response body\ntext: [string] - Processed response text\ninfo: [array] - cURL request information\nhistory: [int] - HTTP redirect history status code\nstatus_code: [int] - HTTP response status code\nerror: [string] - Error message if request fails\n\nMethods:\n\ninit(): [void] -> [resource] - Initializes the cURL session with default settings\nrequest($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL) -> [string|bool] - Executes an HTTP request to the specified URL with given parameters\n_is_url($url) -> [bool] - Validates if the input string is a valid URL\nget_cookies($domain = '') -> [array] - Retrieves cookies for a specific domain\nget_response_headers($header) -> [array] - Parses response headers\nget_response_cookies($header, $domain) -> [void] - Extracts cookies from response headers\nsplit_header_body() -> [array] - Splits response into headers and body\nget_history($header) -> [int] - Gets redirect history from response headers\nget_mimetype($filepath) -> [string] - Gets MIME type of a file",
    "Canonical_solution": "namespace phpspider\\core;\n\nclass requests\n{\n    const VERSION = '2.0.1';\n    protected static $ch = null;\n\n    public static $timeout = 15;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = array();\n    public static $rawheaders = array();\n    public static $domain_cookies = array();\n    public static $headers = array();\n    public static $useragents = array(\"requests/2.0.0\");\n    public static $client_ips = array();\n    public static $proxies = array();\n    public static $raw = \"\";\n    public static $head = \"\";\n    public static $content = \"\";\n    public static $text = \"\";\n    public static $info = array();\n    public static $history = 302;\n    public static $status_code = 0;\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!is_resource(self::$ch))\n        {\n            self::$ch = curl_init();\n            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt(self::$ch, CURLOPT_HEADER, false);\n            curl_setopt(self::$ch, CURLOPT_USERAGENT, \"phpspider-requests/\".self::VERSION);\n            if (is_array(self::$timeout))\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, self::$timeout[0]);\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout[1]);\n            }\n            else\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, ceil(self::$timeout / 2));\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n            }\n            curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt(self::$ch, CURLOPT_NOSIGNAL, true);\n        }\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL)\n    {\n        $method = strtoupper($method);\n        if(!self::_is_url($url))\n        {\n            self::$error = \"You have requested URL ({$url}) is not a valid HTTP address\";\n            return false;\n        }\n\n        if ($method == 'GET' && !empty($fields))\n        {\n            $url = $url.(strpos($url, '?') === false ? '?' : '&').http_build_query($fields);\n        }\n\n        $parse_url = parse_url($url);\n        if (empty($parse_url) || empty($parse_url['host']) || !in_array($parse_url['scheme'], array('http', 'https')))\n        {\n            self::$error = \"No connection adapters were found for '{$url}'\";\n            return false;\n        }\n\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n\n        if ($method != 'GET')\n        {\n            if ($method == 'POST')\n            {\n                $tmpheaders = array_change_key_case(self::$rawheaders, CASE_LOWER);\n                if (isset($tmpheaders['content-type']) && $tmpheaders['content-type'] == 'application/json')\n                {\n                    curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n                }\n                else\n                {\n                    curl_setopt(self::$ch, CURLOPT_POST, true);\n                }\n\n                $file_fields = array();\n                if (!empty($files))\n                {\n                    foreach ($files as $postname => $file)\n                    {\n                        $filepath = realpath($file);\n                        if (!file_exists($filepath))\n                        {\n                            continue;\n                        }\n                        $filename = basename($filepath);\n                        $type = self::get_mimetype($filepath);\n                        $file_fields[$postname] = curl_file_create($filepath, $type, $filename);\n                    }\n                }\n\n                if (empty($file_fields))\n                {\n                    if (is_array($fields))\n                    {\n                        $fields = http_build_query($fields);\n                    }\n                }\n                else\n                {\n                    if (is_array($fields) && !empty($fields))\n                    {\n                        $fields = array_merge($fields, $file_fields);\n                    }\n                    else\n                    {\n                        $fields = $file_fields;\n                    }\n                }\n                curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n            }\n            else\n            {\n                self::$rawheaders['X-HTTP-Method-Override'] = $method;\n                curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n            }\n        }\n\n        $cookies = self::get_cookies();\n        $domain_cookies = self::get_cookies($parse_url['host']);\n        $cookies = array_merge($cookies, $domain_cookies);\n        if (!empty($cookies))\n        {\n            foreach ($cookies as $key=>$value)\n            {\n                $cookie_arr[] = $key.'='.$value;\n            }\n            $cookies = implode('; ', $cookie_arr);\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);\n        }\n\n        if (!empty(self::$useragents))\n        {\n            $key = rand(0, count(self::$useragents) - 1);\n            self::$rawheaders['User-Agent'] = self::$useragents[$key];\n        }\n\n        if (!empty(self::$client_ips))\n        {\n            $key = rand(0, count(self::$client_ips) - 1);\n            self::$rawheaders['CLIENT-IP'] = self::$client_ips[$key];\n            self::$rawheaders['X-FORWARDED-FOR'] = self::$client_ips[$key];\n        }\n\n        if (self::$rawheaders)\n        {\n            $http_headers = array();\n            foreach (self::$rawheaders as $k=>$v)\n            {\n                $http_headers[] = $k.': '.$v;\n            }\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $http_headers);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_ENCODING, 'gzip');\n\n        if ($parse_url['scheme'] == 'https')\n        {\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if (self::$proxies)\n        {\n            $key = rand(0, count(self::$proxies) - 1);\n            $proxy = self::$proxies[$key];\n            curl_setopt(self::$ch, CURLOPT_PROXY, $proxy);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        if ($allow_redirects)\n        {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (self::$raw === false)\n        {\n            self::$error = 'Curl error: ' . curl_error(self::$ch);\n        }\n\n        curl_close(self::$ch);\n\n        list($header, $text) = self::split_header_body();\n        self::$history = self::get_history($header);\n        self::$headers = self::get_response_headers($header);\n        self::get_response_cookies($header, $parse_url['host']);\n        return $text;\n    }\n\n    private static function _is_url($url)\n    {\n        $pattern = \"/\\b(([\\w-]+:\\/\\/?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/)))/\";\n        return preg_match($pattern, $url) ? true : false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class requests {\n    public static $VERSION = '1.0';\n    public static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = [];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = \"Invalid URL\";\n            return false;\n        }\n\n        self::init();\n\n        $method = strtoupper($method);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($method === 'POST') {\n            $postFields = self::_build_post_fields($fields, $files);\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $postFields);\n        }\n\n        $headers = self::_build_headers();\n        curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $headers);\n\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[0]);\n        }\n\n        if (!empty(self::$useragents)) {\n            curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[0]);\n        }\n\n        if (is_array(self::$timeout)) {\n            curl_setopt(self::$ch, CURLOPT_TIMEOUT_MS, self::$timeout[0]);\n            curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT_MS, self::$timeout[1]);\n        } else {\n            curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        }\n\n        $cookies = self::_get_cookies();\n        if (!empty($cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, $allow_redirects);\n\n        if ($cert) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        if (self::$raw === false) {\n            self::$error = curl_error(self::$ch);\n            return false;\n        }\n\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$head = substr(self::$raw, 0, self::$info['header_size']);\n        self::$content = substr(self::$raw, self::$info['header_size']);\n        self::$text = self::$content;\n\n        self::_parse_headers(self::$head);\n        self::_parse_cookies(self::$head);\n\n        return self::$content;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    private static function _build_post_fields($fields, $files) {\n        $postFields = [];\n        foreach ($fields as $key => $value) {\n            $postFields[] = urlencode($key) . '=' . urlencode($value);\n        }\n        foreach ($files as $key => $file) {\n            if (is_array($file)) {\n                foreach ($file as $filePath) {\n                    $postFields[] = new CURLFile($filePath);\n                }\n            } else {\n                $postFields[] = new CURLFile($file);\n            }\n        }\n        return $postFields;\n    }\n\n    private static function _build_headers() {\n        $headers = [];\n        foreach (self::$rawheaders as $header) {\n            $headers[] = $header;\n        }\n        return $headers;\n    }\n\n    private static function _get_cookies() {\n        $cookies = '';\n        foreach (self::$cookies as $cookie) {\n            $cookies .= $cookie . '; ';\n        }\n        return rtrim($cookies, '; ');\n    }\n\n    private static function _parse_headers($header) {\n        $headers = explode(\"\\r\\n\", $header);\n        self::$headers = [];\n        foreach ($headers as $headerLine) {\n            if (strpos($headerLine, ':') !== false) {\n                list($key, $value) = explode(':', $headerLine, 2);\n                self::$headers[trim($key)] = trim($value);\n            }\n        }\n    }\n\n    private static function _parse_cookies($header) {\n        $cookies = [];\n        $headers = explode(\"\\r\\n\", $header);\n        foreach ($headers as $headerLine) {\n            if (stripos($headerLine, 'Set-Cookie') === 0) {\n                $cookieParts = explode(';', $headerLine);\n                $cookie = explode('=', $cookieParts[0], 2);\n                $name = trim($cookie[0]);\n                $value = trim($cookie[1]);\n                $cookies[] = \"$name=$value\";\n            }\n        }\n        self::$cookies = $cookies;\n    }\n\n    public static function get_cookies($domain = '') {\n        if ($domain) {\n            return self::$domain_cookies[$domain] ?? [];\n        }\n        return self::$cookies;\n    }\n\n    public static function get_response_headers($header) {\n        return self::$headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        $cookies = [];\n        $headers = explode(\"\\r\\n\", $header);\n        foreach ($headers as $headerLine) {\n            if (stripos($headerLine, 'Set-Cookie') === 0) {\n                $cookieParts = explode(';', $headerLine);\n                $cookie = explode('=', $cookieParts[0], 2);\n                $name = trim($cookie[0]);\n                $value = trim($cookie[1]);\n                $cookies[] = \"$name=$value\";\n            }\n        }\n        self::$cookies = $cookies;\n    }\n\n    public static function split_header_body() {\n        $headerSize = self::$info['header_size'];\n        $raw = self::$raw;\n        $head = substr($raw, 0, $headerSize);\n        $content = substr($raw, $headerSize);\n        return [$head, $content];\n    }\n\n    public static function get_history($header) {\n        return self::$history;\n    }\n\n    public static function get_mimetype($filepath) {\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        $mimetype = finfo_file($finfo, $filepath);\n        finfo_close($finfo);\n        return $mimetype;\n    }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The BcsRequestcore class provides a comprehensive wrapper around PHP's cURL functions to handle HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, with features for request customization, streaming uploads/downloads, authentication, and proxy support. The class manages the entire request lifecycle including preparation, execution, and response processing.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [mixed] - The raw response from the server\nresponse_headers: [array] - Parsed response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - HTTP response status code\nresponse_info: [array] - Additional response information\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Authentication username\npassword: [string|null] - Authentication password\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Flag for debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for streaming read\nread_stream: [resource|null] - Stream resource for reading\nread_stream_size: [int|null] - Size of read stream\nread_stream_read: [int] - Bytes read from stream\nwrite_file: [string|null] - File path for streaming write\nwrite_stream: [resource|null] - Stream resource for writing\nseek_position: [int|null] - Seek position for streams\nregistered_streaming_read_callback: [callable|null] - Callback for streaming read\nregistered_streaming_write_callback: [callable|null] - Callback for streaming write\n\nMethods:\n\n__construct([string|null $url], [array|null $proxy], [array|null $helpers]) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct() -> [self] - Cleans up any open file handles\nsetCredentials([string $user], [string $pass]) -> [self] - Sets basic authentication credentials\naddHeader([string $key], [string $value]) -> [self] - Adds a request header\nremoveHeader([string $key]) -> [self] - Removes a request header\nsetMethod([string $method]) -> [self] - Sets the HTTP method\nsetUseragent([string $ua]) -> [self] - Sets the user agent string\nsetBody([string $body]) -> [self] - Sets the request body\nsetRequestUrl([string $url]) -> [self] - Sets the request URL\nsetCurlopts([array $curlopts]) -> [self] - Sets additional cURL options\nsetReadStreamSize([int $size]) -> [self] - Sets the read stream size\nsetReadStream([resource $resource], [int|null $size]) -> [self] - Sets a stream resource for reading\nsetReadFile([string $location]) -> [self] - Sets a file for streaming read\nsetWriteStream([resource $resource]) -> [self] - Sets a stream resource for writing\nsetWriteFile([string $location]) -> [self] - Sets a file for streaming write\nsetProxy([string $proxy]) -> [self] - Configures proxy settings\nsetSeekPosition([int|null $position]) -> [self] - Sets the seek position for streams\nregisterStreamingReadCallback([callable $callback]) -> [self] - Registers a streaming read callback\nregisterStreamingWriteCallback([callable $callback]) -> [self] - Registers a streaming write callback\nprepRequest() -> [resource] - Prepares and returns a cURL handle with configured options\nsendRequest([bool $parse = false]) -> [mixed] - Executes the request and returns response\nprocessResponse([resource|null $curl_handle], [mixed|null $response]) -> [mixed] - Processes the response into headers and body\nisBaeEnv() -> [bool] - Checks if running in Baidu App Engine environment\ngetResponseHeader([string|null $header]) -> [mixed] - Gets specific or all response headers\ngetResponseBody() -> [string] - Gets the response body\ngetResponseCode() -> [int] - Gets the HTTP response code",
    "Canonical_solution": "use Think\\Upload\\Driver\\Bcs\\BCS_RequestCore_Exception as BCS_RequestCore_Exception;\n\nclass BcsRequestcore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->setProxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function setCredentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function setMethod($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if (false !== $position && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->setReadStreamSize($size);\n    }\n\n    public function setReadFile($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->setReadStream($read_file_handle);\n    }\n\n    public function setWriteStream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->setWriteStream($write_file_handle);\n    }\n\n    public function setProxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new BCS_RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function sendRequest($parse = false)\n    {\n        if (false === $this->isBaeEnv()) {\n            set_time_limit(0);\n        }\n\n        $curl_handle = $this->prepRequest();\n        $this->response = curl_exec($curl_handle);\n\n        if (false === $this->response ||\n            (self::HTTP_GET === $this->method &&\n                curl_errno($curl_handle) === CURLE_PARTIAL_FILE)) {\n            throw new BCS_RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->processResponse($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                $class = '\\Think\\Upload\\Driver\\Bcs\\\\' . $this->response_class;\n                return new $class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    private function isBaeEnv()\n    {\n        if (isset($_SERVER['HTTP_HOST'])) {\n            $host = $_SERVER['HTTP_HOST'];\n            $pos = strpos($host, '.');\n            if (false !== $pos) {\n                $substr = substr($host, $pos + 1);\n                if ('duapp.com' == $substr) {\n                    return true;\n                }\n            }\n        }\n        if (isset($_SERVER[\"HTTP_BAE_LOGID\"])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function getResponseHeader($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->response_body;\n    }\n\n    public function getResponseCode()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "```php\nclass BcsRequestcore {\n    protected $request_url;\n    protected $request_headers = [];\n    protected $request_body = '';\n    protected $response;\n    protected $response_headers = [];\n    protected $response_body = '';\n    protected $response_code = 0;\n    protected $response_info = [];\n    protected $curl_handle;\n    protected $method = 'GET';\n    protected $proxy = null;\n    protected $username = null;\n    protected $password = null;\n    protected $curlopts = [];\n    protected $debug_mode = false;\n    protected $request_class = 'BcsRequestcore';\n    protected $response_class = 'BcsResponse';\n    protected $useragent = 'BcsRequestcore/1.0';\n    protected $read_file = null;\n    protected $read_stream = null;\n    protected $read_stream_size = null;\n    protected $read_stream_read = 0;\n    protected $write_file = null;\n    protected $write_stream = null;\n    protected $seek_position = null;\n    protected $registered_streaming_read_callback = null;\n    protected $registered_streaming_write_callback = null;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        $options = [];\n\n        $options[CURLOPT_URL] = $this->request_url;\n\n        if (in_array($this->method, ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'])) {\n            $options[CURLOPT_CUSTOMREQUEST] = $this->method;\n        }\n\n        if (!empty($this->request_headers)) {\n            $headers = array_map(function($k, $v) { return \"$k: $v\"; }, array_keys($this->request_headers), $this->request_headers);\n            $options[CURLOPT_HTTPHEADER] = $headers;\n        }\n\n        $options[CURLOPT_USERAGENT] = $this->useragent;\n\n        if ($this->username && $this->password) {\n            $options[CURLOPT_USERPWD] = \"$this->username:$this->password\";\n        }\n\n        if ($this->proxy) {\n            if (is_array($this->proxy)) {\n                $options[CURLOPT_PROXY] = $this->proxy['host'];\n                if (isset($this->proxy['port'])) {\n                    $options[CURLOPT_PROXYPORT] = $this->proxy['port'];\n                }\n                if (isset($this->proxy['username']) && isset($this->proxy['password'])) {\n                    $options[CURLOPT_PROXYUSERPWD] = $this->proxy['username'] . ':' . $this->proxy['password'];\n                }\n            } else {\n                $options[CURLOPT_PROXY] = $this->proxy;\n            }\n        }\n\n        if ($this->method !== 'GET' && $this->method !== 'HEAD') {\n            if ($this->read_stream) {\n                $options[CURLOPT_READFUNCTION] = [$this, 'readCallback'];\n                $options[CURLOPT_READDATA] = $this->read_stream;\n                $options[CURLOPT_POSTFIELDS] = null;\n            } else {\n                $options[CURLOPT_POSTFIELDS] = $this->request_body;\n            }\n        }\n\n        $options[CURLOPT_HEADER] = true;\n        $options[CURLOPT_RETURNTRANSFER] = true;\n\n        if ($this->write_stream) {\n            if ($this->registered_streaming_write_callback) {\n                $options[CURLOPT_WRITEFUNCTION] = $this->registered_streaming_write_callback;\n                $options[CURLOPT_WRITEDATA] = $this->write_stream;\n            } else {\n                $options[CURLOPT_FILE] = $this->write_stream;\n            }\n        }\n\n        if (!empty($this->curlopts)) {\n            $options = array_merge($options, $this->curlopts);\n        }\n\n        foreach ($options as $opt => $val) {\n            curl_setopt($this->curl_handle, $opt, $val);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        if ($response === false) {\n            return false;\n        }\n\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = $this->parseHeaders(substr($response, 0, $header_size));\n        $this->response_body = substr($response, $header_size);\n        return true;\n    }\n\n    protected function parseHeaders($headerStr) {\n        $headers = [];\n        $headerLines = explode(\"\\r\\n\", $headerStr);\n        foreach ($headerLines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[trim($key)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public function isBaeEnv() {\n        return false;\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n\n    protected function readCallback($ch, $fd, $length) {\n        $data = fread($fd, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n}\n```"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a PHP class that utilizes the Guzzle HTTP client to synchronize video processing tasks with a remote API endpoint, handling request signing and response parsing.\n\nClass Description: The SyncVideo class provides functionality to send video processing requests to a remote API endpoint using HTTP POST requests. It handles request signing, timeout configuration, and response parsing.\n\nAttributes:\n- config: [Upyun\\Config] - Configuration object containing service credentials, timeout settings, and endpoint information\n\nMethods:\n- __construct(Config $config) -> [void] - Initializes the class with the provided configuration object\n- process(array $params, string $path) -> [array] - Sends a synchronized video processing request to the specified path with the given parameters, returns the parsed JSON response",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\n\nclass SyncVideo {\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    public function process($params, $path) {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $path = '/' . $this->config->serviceName . $path;\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getSyncVideoEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'json' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "```php\nclass SyncVideo {\n    private $config;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n    }\n\n    public function process(array $params, string $path): array {\n        ksort($params);\n        $paramString = http_build_query($params);\n        $signature = hash_hmac('sha256', $paramString, $this->config->secret);\n\n        $client = new \\GuzzleHttp\\Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $response = $client->post($path, [\n            'form_params' => $params,\n            'headers' => [\n                'X-Signature' => $signature,\n            ],\n        ]);\n\n        return json_decode($response->getBody()->getContents(), true);\n    }\n}\n```"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The `baiduRequestCore` class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, and includes streaming capabilities for both uploads and downloads.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [string] - The complete response from the server\nresponse_headers: [array] - Associative array of response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - The HTTP response status code\nresponse_info: [array] - Additional cURL response information\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - The HTTP method to use (GET, POST, etc.)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Username for authentication\npassword: [string|null] - Password for authentication\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Whether to enable debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for reading data\nread_stream: [resource|null] - Stream resource for reading data\nread_stream_size: [int|null] - Size of the read stream\nread_stream_read: [int] - Bytes read from the stream\nwrite_file: [string|null] - File path for writing data\nwrite_stream: [resource|null] - Stream resource for writing data\nseek_position: [int|null] - Position to seek in the read stream\nregistered_streaming_read_callback: [callable|null] - Callback for streaming reads\nregistered_streaming_write_callback: [callable|null] - Callback for streaming writes\n\nMethods:\n\n__construct: [function]([string|null $url, array|null $proxy, array|null $helpers]) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct: [function]() -> [self] - Cleans up any open file handles\nset_credentials: [function]([string $user, string $pass]) -> [self] - Sets authentication credentials\nadd_header: [function]([string $key, string $value]) -> [self] - Adds a request header\nremove_header: [function]([string $key]) -> [self] - Removes a request header\nset_method: [function]([string $method]) -> [self] - Sets the HTTP method\nset_useragent: [function]([string $ua]) -> [self] - Sets the user agent string\nset_body: [function]([string $body]) -> [self] - Sets the request body\nset_request_url: [function]([string $url]) -> [self] - Sets the request URL\nset_curlopts: [function]([array $curlopts]) -> [self] - Sets additional cURL options\nset_read_stream_size: [function]([int $size]) -> [self] - Sets the read stream size\nset_read_stream: [function]([resource $resource, int|null $size]) -> [self] - Sets the read stream resource\nset_read_file: [function]([string $location]) -> [self] - Sets a file to read from\nset_write_stream: [function]([resource $resource]) -> [self] - Sets the write stream resource\nset_write_file: [function]([string $location]) -> [self] - Sets a file to write to\nset_proxy: [function]([string $proxy]) -> [self] - Configures proxy settings\nset_seek_position: [function]([int|null $position]) -> [self] - Sets the seek position for the read stream\nregister_streaming_read_callback: [function]([callable $callback]) -> [self] - Registers a streaming read callback\nregister_streaming_write_callback: [function]([callable $callback]) -> [self] - Registers a streaming write callback\nstreaming_read_callback: [function]([resource $curl_handle, resource $file_handle, int $length]) -> [string] - Callback for streaming reads\nstreaming_write_callback: [function]([resource $curl_handle, string $data]) -> [int] - Callback for streaming writes\nprep_request: [function]() -> [resource] - Prepares and returns a cURL handle with configured options\nprocess_response: [function]([resource|null $curl_handle, string|null $response]) -> [mixed] - Processes the cURL response\nsend_request: [function]([bool $parse]) -> [mixed] - Sends the request and returns the response\nget_response_header: [function]([string|null $header]) -> [mixed] - Gets a specific response header or all headers\nget_response_body: [function]() -> [string] - Gets the response body\nget_response_code: [function]() -> [int] - Gets the response status code",
    "Canonical_solution": "class baiduRequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'baiduRequestCore';\n    public $response_class = 'baiduResponseCore';\n    public $useragent = 'baiduRequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n        \n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new baiduRequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n            if ($written_last === false) {\n                return $written_total;\n            }\n            $written_total += $written_last;\n        }\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n        \n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n        \n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n        \n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        \n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n        \n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n        \n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new baiduRequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n        \n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n        \n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n        \n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n            \n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n            \n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n            \n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n            \n            if ($curl_handle && $response) {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n        \n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n        \n        if ($this->response === false) {\n            throw new baiduRequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n        \n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n        \n        if ($parse) {\n            return $parsed_response;\n        }\n        \n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass baiduRequestCore {\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->request_headers = [];\n        $this->method = 'GET';\n        $this->useragent = 'baiduRequestCore/1.0';\n        $this->debug_mode = false;\n        $this->read_stream_read = 0;\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return fwrite($this->write_stream, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        $this->set_curl_options();\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        $this->response = curl_exec($curl_handle);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_headers = [];\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_body = substr($this->response, $header_size);\n        $headers = explode(\"\\r\\n\", substr($this->response, 0, $header_size));\n        foreach ($headers as $header) {\n            if (strpos($header, ':') !== false) {\n                list($key, $value) = explode(':', $header, 2);\n                $this->response_headers[trim($key)] = trim($value);\n            }\n        }\n        return $this->response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->process_response();\n        curl_close($this->curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n\n    private function set_curl_options() {\n        $options = [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_HTTPHEADER => array_map(function($k, $v) { return \"$k: $v\"; }, array_keys($this->request_headers), $this->request_headers),\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_WRITEFUNCTION => [$this, 'streaming_write_callback'],\n            CURLOPT_READFUNCTION => [$this, 'streaming_read_callback'],\n            CURLOPT_VERBOSE => $this->debug_mode,\n        ];\n\n        if ($this->username && $this->password) {\n            $options[CURLOPT_USERPWD] = \"$this->username:$this->password\";\n        }\n\n        if ($this->proxy) {\n            $options[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if ($this->request_body) {\n            $options[CURLOPT_POSTFIELDS] = $this->request_body;\n        }\n\n        if ($this->read_stream) {\n            $options[CURLOPT_READDATA] = $this->read_stream;\n        }\n\n        if ($this->write_stream) {\n            $options[CURLOPT_WRITEDATA] = $this->write_stream;\n        }\n\n        if ($this->read_file) {\n            $this->read_stream = fopen($this->read_file, 'r');\n            $options[CURLOPT_READDATA] = $this->read_stream;\n        }\n\n        if ($this->write_file) {\n            $this->write_stream = fopen($this->write_file, 'w');\n            $options[CURLOPT_WRITEDATA] = $this->write_stream;\n        }\n\n        if ($this->seek_position !== null) {\n            fseek($this->read_stream, $this->seek_position);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $k => $v) {\n                $options[$k] = $v;\n            }\n        }\n\n        curl_setopt_array($this->curl_handle, $options);\n    }\n}\n?>"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL, supporting various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive HTTP client implementation using PHP's cURL extension. It supports standard HTTP methods (GET, POST, PUT, DELETE, HEAD), handles request/response processing, streaming uploads/downloads, authentication, proxy configuration, and SSL verification.\n\nAttributes:\n\nrequest_url: string - The URL to send the request to\nrequest_headers: array - Associative array of request headers\nrequest_body: string - The request body content\nresponse: string - The complete response including headers and body\nresponse_headers: array - Parsed response headers\nresponse_body: string - The response body content\nresponse_code: int - HTTP response status code\nresponse_info: array - Additional cURL response information\ncurl_handle: resource - The cURL handle resource\nmethod: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: array|null - Proxy configuration details\nusername: string|null - Username for authentication\npassword: string|null - Password for authentication\ncurlopts: array|null - Additional cURL options\ndebug_mode: bool - Whether to enable debug mode\nrequest_class: string - Class name for request handling\nresponse_class: string - Class name for response handling\nuseragent: string - User-Agent header value\nread_file: string|null - File path for streaming read\nread_stream: resource|null - Stream resource for reading\nread_stream_size: int|null - Size of read stream\nread_stream_read: int - Bytes read from stream\nwrite_file: string|null - File path for streaming write\nwrite_stream: resource|null - Stream resource for writing\nseek_position: int|null - Position to seek in read stream\ncacert_location: mixed - CA certificate location\nssl_verification: bool - Whether to verify SSL\nregistered_streaming_read_callback: callable|null - Callback for streaming read\nregistered_streaming_write_callback: callable|null - Callback for streaming write\ntimeout: int - Request timeout in seconds\nconnect_timeout: int - Connection timeout in seconds\n\nMethods:\n\n__construct(string $url = null, string $proxy = null, array $helpers = null) -> self - Initializes the request with URL and optional proxy/helpers\n__destruct() -> self - Cleans up open file handles\nset_credentials(string $user, string $pass) -> self - Sets authentication credentials\nadd_header(string $key, string $value) -> self - Adds a request header\nremove_header(string $key) -> self - Removes a request header\nset_method(string $method) -> self - Sets the HTTP method\nset_useragent(string $ua) -> self - Sets the User-Agent header\nset_body(string $body) -> self - Sets the request body\nset_request_url(string $url) -> self - Sets the request URL\nset_curlopts(array $curlopts) -> self - Sets additional cURL options\nset_read_stream_size(int $size) -> self - Sets the read stream size\nset_read_stream(resource $resource, int $size = null) -> self - Sets the read stream resource\nset_read_file(string $location) -> self - Sets a file for streaming read\nset_write_stream(resource $resource) -> self - Sets the write stream resource\nset_write_file(string $location) -> self - Sets a file for streaming write\nset_proxy(string $proxy) -> self - Configures proxy settings\nset_seek_position(int $position) -> self - Sets the seek position for read stream\nregister_streaming_read_callback(callable $callback) -> self - Registers streaming read callback\nregister_streaming_write_callback(callable $callback) -> self - Registers streaming write callback\nstreaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Callback for streaming read\nstreaming_write_callback(resource $curl_handle, string $data) -> int - Callback for streaming write\nprep_request() -> resource - Prepares and returns a cURL handle\nprocess_response(resource $curl_handle = null, string $response = null) -> mixed - Processes the cURL response\nsend_request(bool $parse = false) -> mixed - Sends the request and returns response\nsend_multi_request(array $handles, array $opt = null) -> array - Sends multiple requests in parallel",
    "Canonical_solution": "namespace NOS\\Http;\n\nclass RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'NOS\\Http\\RequestCore';\n    public $response_class = 'NOS\\Http\\ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n    public $timeout = 5184000;\n    public $connect_timeout = 10;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer)$position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false) {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification) {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        } else {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        } elseif (is_string($this->cacert_location)) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1]) ? $kv[1] : '';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                return new ResponseCore($this->response_headers, $this->response_body, $this->response_code);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false) {\n            throw new RequestCore_Exception('cURL resource: ' . (string)$curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null)\n    {\n        set_time_limit(0);\n        if (count($handles) === 0) return array();\n        if (!$opt) $opt = array();\n\n        $limit = isset($opt['limit']) ? $opt['limit'] : -1;\n        $handle_list = $handles;\n        $http = new $this->request_class();\n        $multi_handle = curl_multi_init();\n        $handles_post = array();\n        $added = count($handles);\n        $last_handle = null;\n        $count = 0;\n        $i = 0;\n\n        while ($i < $added) {\n            if ($limit > 0 && $i >= $limit) break;\n            curl_multi_add_handle($multi_handle, array_shift($handles));\n            $i++;\n        }\n\n        do {\n            $active = false;\n            while (($status = curl_multi_exec($multi_handle, $active)) === CURLM_CALL_MULTI_PERFORM) {\n                if (count($handles) > 0) break;\n            }\n\n            $to_process = array();\n            while ($done = curl_multi_info_read($multi_handle)) {\n                if ($done['result'] > 0) {\n                    throw new RequestCore_Exception('cURL resource: ' . (string)$done['handle'] . '; cURL error: ' . curl_error($done['handle']) . ' (' . $done['result'] . ')');\n                } elseif (!isset($to_process[(int)$done['handle']])) {\n                    $to_process[(int)$done['handle']] = $done;\n                }\n            }\n\n            foreach ($to_process as $pkey => $done) {\n                $response = $http->process_response($done['handle'], curl_multi_getcontent($done['handle']));\n                $key = array_search($done['handle'], $handle_list, true);\n                $handles_post[$key] = $response;\n\n                if (count($handles) > 0) {\n                    curl_multi_add_handle($multi_handle, array_shift($handles));\n                }\n\n                curl_multi_remove_handle($multi_handle, $done['handle']);\n                curl_close($done['handle']);\n            }\n        } while ($active || count($handles_post) < $added);\n\n        curl_multi_close($multi_handle);\n        ksort($handles_post, SORT_N",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass RequestCore {\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout;\n    public $connect_timeout;\n\n    public function __construct(string $url = null, string $proxy = null, array $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->request_headers = [];\n        $this->request_body = '';\n        $this->response = '';\n        $this->response_headers = [];\n        $this->response_body = '';\n        $this->response_code = 0;\n        $this->response_info = [];\n        $this->curl_handle = null;\n        $this->method = 'GET';\n        $this->username = null;\n        $this->password = null;\n        $this->curlopts = [];\n        $this->debug_mode = false;\n        $this->request_class = 'RequestCore';\n        $this->response_class = 'ResponseCore';\n        $this->useragent = 'RequestCore/1.0';\n        $this->read_file = null;\n        $this->read_stream = null;\n        $this->read_stream_size = 8192;\n        $this->read_stream_read = 0;\n        $this->write_file = null;\n        $this->write_stream = null;\n        $this->seek_position = 0;\n        $this->cacert_location = '/etc/ssl/certs/ca-certificates.crt';\n        $this->ssl_verification = true;\n        $this->registered_streaming_read_callback = null;\n        $this->registered_streaming_write_callback = null;\n        $this->timeout = 30;\n        $this->connect_timeout = 10;\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials(string $user, string $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header(string $key, string $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header(string $key) {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method(string $method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent(string $ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body(string $body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url(string $url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts(array $curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size(int $size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream(resource $resource, int $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size ?? 8192;\n        return $this;\n    }\n\n    public function set_read_file(string $location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'rb');\n        return $this;\n    }\n\n    public function set_write_stream(resource $resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file(string $location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'wb');\n        return $this;\n    }\n\n    public function set_proxy(string $proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position(int $position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback(callable $callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback(callable $callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback(resource $curl_handle, string $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return fwrite($this->write_stream, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        $headers = [];\n        foreach ($this->request_headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        $options = [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_TIMEOUT => $this->timeout,\n            CURLOPT_CONNECTTIMEOUT => $this->connect_timeout,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_POSTFIELDS => $this->request_body,\n            CURLOPT_WRITEFUNCTION => [$this, 'streaming_write_callback'],\n            CURLOPT_READFUNCTION => [$this, 'streaming_read_callback'],\n            CURLOPT_READDATA => $this->read_stream,\n            CURLOPT_WRITEHEADER => $this->response_headers,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n        ];\n        if ($this->proxy) {\n            $options[CURLOPT_PROXY] = $this->proxy;\n        }\n        if ($this->username && $this->password) {\n            $options[CURLOPT_USERPWD] = \"$this->username:$this->password\";\n        }\n        if ($this->curlopts) {\n            $options = array_merge($options, $this->curlopts);\n        }\n        curl_setopt_array($this->curl_handle, $options);\n        return $this->curl_handle;\n    }\n\n    public function process_response(resource $curl_handle = null, string $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n        $this->response = curl_exec($curl_handle);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = substr($this->response, 0, $header_size);\n        $this->response_body = substr($this->response, $header_size);\n        return $this;\n    }\n\n    public function send_request(bool $parse = false) {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            return $this->response_body;\n        }\n        return $this;\n    }\n\n    public function send_multi_request(array $handles, array $opt = null) {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle->curl_handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($multi_handle, $running);\n            curl_multi_select($multi_handle);\n        } while ($running > 0);\n        $results = [];\n        foreach ($handles as $handle) {\n            $handle->process_response($handle->curl_handle);\n            $results[] = $handle;\n        }\n        curl_multi_close($multi_handle);\n        return $results;\n    }\n}\n?>"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for fetching remote resources with proper error handling and resource management.\n\nClass Description: The timthumb class provides functionality to download remote files using cURL with features like progress tracking, size limitations, and fallback to file_get_contents when cURL is unavailable. It handles various HTTP status codes and maintains error state.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing downloaded data\n- $curlDataWritten: [int] - Tracks the amount of data written during download\n- $lastURLError: [mixed] - Stores the last error encountered during URL fetching\n\nMethods:\n- curlWrite($h, $d) -> [int] - Static callback function for cURL write operations that writes data to file and tracks bytes written. Returns bytes processed or 0 if size limit exceeded.\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data chunk being written\n\n- getURL($url, $tempfile) -> [bool] - Main method to fetch a URL and save it to a temporary file. Returns true on success, false on failure.\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for storing downloaded content",
    "Canonical_solution": "Here's the extracted class-level code for the HTTP client using cURL in PHP:\n\n```php\nclass timthumb {\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d){\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if(self::$curlDataWritten > MAX_FILE_SIZE){\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile){\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if(function_exists('curl_init')){\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if(! self::$curlFH){\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt ($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt ($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt ($curl, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt ($curl, CURLOPT_HEADER, 0);\n            curl_setopt ($curl, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt ($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt ($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt ($curl, CURLOPT_MAXREDIRS, 10);\n            \n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if($httpStatus == 404){\n                $this->set404();\n            }\n            if($httpStatus == 302){\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if($curlResult){\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents ($url);\n            if($img === false){\n                $err = error_get_last();\n                if(is_array($err) && $err['message']){\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if(preg_match('/404/', $this->lastURLError)){\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if(! file_put_contents($tempfile, $img)){\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Timthumb {\n    public $curlFH;\n    public $curlDataWritten;\n    public $lastURLError;\n\n    public static function curlWrite($h, $d) {\n        $privateData = curl_getinfo($h, CURLINFO_PRIVATE);\n        $fileHandle = $privateData['fh'];\n        $dataWritten = &$privateData['dataWritten'];\n\n        fwrite($fileHandle, $d);\n        $dataWritten += strlen($d);\n\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            $content = file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"Failed to fetch using file_get_contents\";\n                return false;\n            }\n            file_put_contents($tempfile, $content);\n            return true;\n        }\n\n        $this->curlFH = fopen($tempfile, 'w');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open tempfile\";\n            return false;\n        }\n\n        $this->curlDataWritten = 0;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, 'Timthumb::curlWrite');\n\n        $privateData = array(\n            'fh' => $this->curlFH,\n            'dataWritten' => &$this->curlDataWritten\n        );\n        curl_setopt($ch, CURLOPT_PRIVATE, $privateData);\n\n        $result = curl_exec($ch);\n\n        if ($result === false) {\n            $this->lastURLError = curl_error($ch);\n            fclose($this->curlFH);\n            return false;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            $this->lastURLError = \"HTTP error: $httpCode\";\n            fclose($this->curlFH);\n            return false;\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}"
  }
]