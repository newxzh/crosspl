[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a PHP class that interacts with an Ollama API to generate responses using HTTP requests through the Guzzle HTTP client.\n\nClass Description: The Ollama class is designed to communicate with an Ollama API endpoint to generate responses based on provided prompts. It handles the configuration of the API request and processes the response.\n\nAttributes:\n- model: string - The name of the AI model to be used for generating responses.\n- prompt: string - The input text prompt to be sent to the AI model.\n- temperature: float - Controls the randomness of the output (higher values make output more random).\n- stream: bool - Determines whether the response should be streamed.\n- raw: bool - Specifies whether to use raw mode for the prompt processing.\n\nMethods:\n- __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) -> void - Initializes the Ollama instance with the specified parameters for model interaction.\n- ask() -> string - Sends a POST request to the Ollama API with the configured parameters and returns the generated response from the AI model.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Ollama\n{\n    /**\n     * New service instance.\n     */\n    public function __construct(\n        protected string $model,\n        protected string $prompt,\n        protected float $temperature,\n        protected bool $stream,\n        protected bool $raw,\n    ) {}\n\n    /**\n     * Set LLM prompt text.\n     */\n    public function ask(): string\n    {\n        $httpClient = new Client;\n\n        $endpoint = core()->getConfigData('general.magic_ai.settings.api_domain').'/api/generate';\n\n        $result = $httpClient->request('POST', $endpoint, [\n            'headers' => [\n                'Accept' => 'application/json',\n            ],\n            'json'    => [\n                'model'  => $this->model,\n                'prompt' => $this->prompt,\n                'raw'    => $this->raw,\n                'stream' => $this->stream,\n            ],\n        ]);\n\n        $result = json_decode($result->getBody()->getContents(), true);\n\n        return $result['response'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "require 'vendor/autoload.php';\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    public $model;\n    public $prompt;\n    public $temperature;\n    public $stream;\n    public $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'http://localhost:11434/api/generate';\n        $payload = [\n            'model' => $this->model,\n            'prompt' => $this->prompt,\n            'temperature' => $this->temperature,\n            'stream' => $this->stream,\n            'raw' => $this->raw\n        ];\n        $response = $client->post($url, ['json' => $payload]);\n        $body = $response->getBody()->getContents();\n        $data = json_decode($body, true);\n        return $data['response'] ?? '';\n    }\n}"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client for sending payment requests to an e-payment API using Guzzle.\n\nClass Description: The EpayHttpClient class is designed to handle HTTP communication with an e-payment API. It encapsulates the functionality for sending payment requests and processing the responses. The class uses Guzzle HTTP client for making requests and handles potential exceptions that may occur during the process.\n\nAttributes:\n- epay: array - Stores the configuration for the e-payment API\n- client: Client - The Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct(array $epayConfig) -> void - Initializes the class with e-payment configuration and creates a new Guzzle Client instance\n- sendPaymentRequest(array $data) -> array - Sends a payment request to the API endpoint and processes the response. Returns an array indicating success/failure and containing either the payment URL or an error message",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass EpayHttpClient\n{\n    protected array $epay;\n    protected Client $client;\n\n    public function __construct(array $epayConfig)\n    {\n        $this->epay = $epayConfig;\n        $this->client = new Client();\n    }\n\n    public function sendPaymentRequest(array $data): array\n    {\n        try {\n            $res = $this->client->request('POST', $this->epay['apiurl'] . 'mapi.php', ['form_params' => $data]);\n\n            if ($res->getStatusCode() !== 200) {\n                throw new Exception();\n            }\n\n            $resData = json_decode($res->getBody()->__toString(), true);\n\n            if ($resData['code'] !== 1 || !isset($resData['payurl'])) {\n                throw new Exception();\n            }\n\n            return [\n                'success' => true,\n                'payurl' => $resData['payurl']\n            ];\n        } catch (Exception|GuzzleException) {\n            return [\n                'success' => false,\n                'error' => '\u8bf7\u6c42\u652f\u4ed8\u5931\u8d25'\n            ];\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class EpayHttpClient {\n    protected $epay;\n    protected $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new \\GuzzleHttp\\Client([\n            'base_uri' => $epayConfig['base_url']\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        $url = $this->epay['base_url'] . $this->epay['endpoint'];\n        try {\n            $response = $this->client->post($url, ['json' => $data]);\n            $responseBody = $response->getBody()->getContents();\n            $responseData = json_decode($responseBody, true);\n            if ($response->getStatusCode() === 200) {\n                return ['success' => true, 'url' => $responseData['url']];\n            } else {\n                return ['success' => false, 'error' => 'API returned status code ' . $response->getStatusCode()];\n            }\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            return ['success' => false, 'error' => 'Request failed: ' . $e->getMessage()];\n        } catch (\\Exception $e) {\n            return ['success' => false, 'error' => 'Unexpected error: ' . $e->getMessage()];\n        }\n    }\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxies and basic authentication.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, proxy configuration, timeout settings, and basic authentication. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'assign': (string, optional) Template variable name to assign content to\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (int, optional) Proxy server port\n  - 'timeout': (int, optional) Connection timeout in seconds (default: 30)\n- $template: (object) The template object for assigning content (when 'assign' parameter is used)\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Assigns content to the specified template variable and returns nothing if 'assign' parameter is provided\n- Returns nothing and triggers notice on error conditions (invalid URL, connection failure)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            \n            $_is_proxy = false;\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        $proxy_port = (int)$param_value;\n                        break;\n                    case \"timeout\":\n                        $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "wrong_result": "<?php\nfunction fetch_http_content($params, $template) {\n    $url = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $proxy_host = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxy_port = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $parsed = parse_url($url);\n    if (!$parsed) {\n        trigger_error(\"Invalid URL\", E_USER_NOTICE);\n        return;\n    }\n\n    $user = $parsed['user'] ?? null;\n    $pass = $parsed['password'] ?? null;\n\n    $target_host = $parsed['host'] ?? null;\n    $target_port = $parsed['port'] ?? 80;\n\n    $proxy_host = $proxy_host ?? $target_host;\n    $proxy_port = $proxy_port ?? 80;\n\n    $use_proxy = !empty($proxy_host) && !empty($proxy_port);\n\n    $path = $parsed['path'] ?? '/';\n    $request = \"GET $path HTTP/1.1\\r\\n\";\n    $request .= \"Host: $target_host:$target_port\\r\\n\";\n    $request .= \"User-Agent: PHP\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\";\n\n    if ($user || $pass) {\n        $auth = base64_encode(\"$user:$pass\");\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"\\r\\n\";\n\n    $fp = false;\n    if ($use_proxy) {\n        $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n    } else {\n        $fp = fsockopen($target_host, $target_port, $errno, $errstr, $timeout);\n    }\n\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($fp, $request);\n\n    $response = '';\n    while (!feof($fp)) {\n        $line = fgets($fp);\n        if ($line === false) break;\n        $response .= $line;\n        if ($line === \"\\r\\n\") break;\n    }\n\n    $body = '';\n    while (!feof($fp)) {\n        $body .= fgets($fp);\n    }\n\n    fclose($fp);\n\n    if ($assign) {\n        $template->$assign = $body;\n    } else {\n        return $body;\n    }\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Implement a PHP class for handling trackback requests using low-level HTTP socket communication.\n\nClass Description: The CI_Trackback class provides functionality to send and process trackback pings to remote servers. It handles HTTP communication directly using fsockopen, processes responses, and manages errors.\n\nAttributes:\n- charset: string - Character encoding to use (default: 'UTF-8')\n- data: array - Trackback data including url, title, excerpt, blog_name, and charset\n- convert_ascii: bool - Whether to convert non-ASCII characters (default: TRUE)\n- response: string - Raw HTTP response from the trackback server\n- error_msg: array - Collection of error messages encountered during processing\n\nMethods:\n- process(string $url, string $data) -> bool - Sends a trackback ping to the specified URL with the given data. Returns TRUE on success, FALSE on failure.\n  Input: \n    $url: string - Target URL for the trackback\n    $data: string - URL-encoded trackback data\n  Output: bool - Success status\n\n- get_id(string $url) -> mixed - Extracts a numeric ID from the given URL. Returns the ID as string or FALSE if not found.\n  Input: $url: string - URL to parse for an ID\n  Output: mixed - Extracted ID string or FALSE\n\n- set_error(string $msg) -> void - Adds an error message to the error collection.\n  Input: $msg: string - Error message to store\n  Output: void",
    "Canonical_solution": "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = array(\n        'url' => '',\n        'title' => '',\n        'excerpt' => '',\n        'blog_name' => '',\n        'charset' => ''\n    );\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = array();\n\n    public function process($url, $data) {\n        $target = parse_url($url);\n\n        if ( ! $fp = @fsockopen($target['host'], 80)) {\n            $this->set_error('Invalid Connection: '.$url);\n            return FALSE;\n        }\n\n        $path = isset($target['path']) ? $target['path'] : $url;\n        empty($target['query']) OR $path .= '?'.$target['query'];\n\n        if ($id = $this->get_id($url)) {\n            $data = 'tb_id='.$id.'&'.$data;\n        }\n\n        fputs($fp, 'POST '.$path.\" HTTP/1.0\\r\\n\");\n        fputs($fp, 'Host: '.$target['host'].\"\\r\\n\");\n        fputs($fp, \"Content-type: application/x-www-form-urlencoded\\r\\n\");\n        fputs($fp, 'Content-length: '.strlen($data).\"\\r\\n\");\n        fputs($fp, \"Connection: close\\r\\n\\r\\n\");\n        fputs($fp, $data);\n\n        $this->response = '';\n        while ( ! feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        @fclose($fp);\n\n        if (stripos($this->response, '<error>0</error>') === FALSE) {\n            $message = preg_match('/<message>(.*?)<\\/message>/is', $this->response, $match)\n                ? trim($match[1])\n                : 'An unknown error was encountered';\n            $this->set_error($message);\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        $tb_id = '';\n\n        if (strpos($url, '?') !== FALSE) {\n            $tb_array = explode('/', $url);\n            $tb_end   = $tb_array[count($tb_array)-1];\n\n            if ( ! is_numeric($tb_end)) {\n                $tb_end  = $tb_array[count($tb_array)-2];\n            }\n\n            $tb_array = explode('=', $tb_end);\n            $tb_id    = $tb_array[count($tb_array)-1];\n        }\n        else {\n            $url = rtrim($url, '/');\n\n            $tb_array = explode('/', $url);\n            $tb_id    = $tb_array[count($tb_array)-1];\n\n            if ( ! is_numeric($tb_id)) {\n                $tb_id = $tb_array[count($tb_array)-2];\n            }\n        }\n\n        return ctype_digit((string) $tb_id) ? $tb_id : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = array();\n    public $convert_ascii = true;\n    public $response = '';\n    public $error_msg = array();\n\n    public function process($url, $data) {\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = $parsed_url['path'] ?? '/';\n        $query = isset($parsed_url['query']) ? '?'.rawurlencode($parsed_url['query']) : '';\n\n        $request = \"POST $path$query HTTP/1.1\\r\\n\";\n        $request .= \"Host: $host\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \".strlen($data).\"\\r\\n\\r\\n\";\n        $request .= $data;\n\n        $fp = fsockopen($host, $port, $errno, $errstr, 10);\n        if (!$fp) {\n            $this->set_error(\"Could not connect to $host: $errstr ($errno)\");\n            return false;\n        }\n\n        fwrite($fp, $request);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 1024);\n        }\n        fclose($fp);\n\n        $this->response = $response;\n\n        $status_line = substr($response, 0, 19);\n        if (substr($status_line, 0, 8) != 'HTTP/1.1 ') {\n            $this->set_error(\"Invalid response: $status_line\");\n            return false;\n        }\n        $status_code = substr($status_line, 9, 3);\n        if ($status_code != '200') {\n            $this->set_error(\"Trackback failed with status code $status_code\");\n            return false;\n        }\n\n        return true;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\d+/', $url, $matches);\n        return $matches[0] ?? false;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Implement a class that handles HTTP POST requests to Google's reCAPTCHA verification service using low-level socket operations in PHP.\n\nClass Description: ReCaptchaSocketPostRequestMethod is a class that implements reCAPTCHA verification by establishing a direct socket connection to Google's servers, sending an HTTP POST request, and processing the response. It provides an alternative to higher-level HTTP clients.\n\nAttributes:\n- socket: [ReCaptchaSocket] - The socket connection handler used for HTTP communication\n- RECAPTCHA_HOST: [string] - Constant storing Google's reCAPTCHA hostname ('www.google.com')\n- SITE_VERIFY_PATH: [string] - Constant storing the reCAPTCHA verification endpoint path ('/recaptcha/api/siteverify')\n- BAD_REQUEST: [string] - Constant JSON response for failed requests\n- BAD_RESPONSE: [string] - Constant JSON response for invalid server responses\n\nMethods:\n- __construct([ReCaptchaSocket $socket = null]) -> [void] - Initializes the class with an optional socket dependency injection\n- submit(ReCaptchaRequestParameters $params) -> [string] - Performs the reCAPTCHA verification by:\n  1. Opening an SSL socket connection to Google's server\n  2. Formatting and sending an HTTP POST request with verification parameters\n  3. Reading and parsing the server response\n  4. Returning the verification result as JSON string\n  Returns either the server response or error JSON if the request/response fails",
    "Canonical_solution": "class ReCaptchaSocketPostRequestMethod implements ReCaptchaRequestMethod\n{\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\": false, \"error-codes\": [\"invalid-request\"]}';\n    const BAD_RESPONSE = '{\"success\": false, \"error-codes\": [\"invalid-response\"]}';\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null)\n    {\n        if (!is_null($socket)) {\n            $this->socket = $socket;\n        } else {\n            $this->socket = new ReCaptchaSocket();\n        }\n    }\n\n    public function submit(ReCaptchaRequestParameters $params)\n    {\n        $errno = 0;\n        $errstr = '';\n\n        if (false === $this->socket->fsockopen('ssl://' . self::RECAPTCHA_HOST, 443, $errno, $errstr, 30)) {\n            return self::BAD_REQUEST;\n        }\n\n        $content = $params->toQueryString();\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-length: \" . strlen($content) . \"\\r\\n\";\n        $request .= \"Connection: close\\r\\n\\r\\n\";\n        $request .= $content . \"\\r\\n\\r\\n\";\n\n        $this->socket->fwrite($request);\n        $response = '';\n\n        while (!$this->socket->feof()) {\n            $response .= $this->socket->fgets(4096);\n        }\n\n        $this->socket->fclose();\n\n        if (0 !== strpos($response, 'HTTP/1.1 200 OK')) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = preg_split(\"#\\n\\s*\\n#Uis\", $response);\n\n        return $parts[1];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "class ReCaptchaSocketPostRequestMethod {\n    public $socket;\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"error\": \"bad_request\"}';\n    const BAD_RESPONSE = '{\"error\": \"bad_response\"}';\n\n    public function __construct($socket = null) {\n        $this->socket = $socket;\n    }\n\n    public function submit(ReCaptchaRequestParameters $params) {\n        if ($this->socket === null) {\n            $context = stream_context_create([\n                'ssl' => [\n                    'verify_peer' => false,\n                    'verify_depth' => 0,\n                ]\n            ]);\n            $this->socket = stream_socket_client('ssl://www.google.com:443', $errno, $errstr, 30, 0, $context);\n            if (!$this->socket) {\n                return self::BAD_REQUEST;\n            }\n        }\n\n        $postData = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse()\n        ]);\n\n        $headers = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $headers .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $headers .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $headers .= \"User-Agent: PHP/ReCaptchaSocketPostRequestMethod\\r\\n\";\n        $headers .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\\r\\n\";\n        $headers .= $postData;\n\n        fwrite($this->socket, $headers);\n\n        $response = '';\n        while (!feof($this->socket)) {\n            $response .= fgets($this->socket, 1024);\n        }\n\n        fclose($this->socket);\n\n        $statusLine = explode(' ', $response, 2);\n        if ($statusLine[0] !== '200') {\n            return self::BAD_REQUEST;\n        }\n\n        $jsonResponse = substr($response, strpos($response, \"\\r\\n\\r\\n\") + 4);\n        $jsonResponse = trim($jsonResponse);\n\n        return json_encode(json_decode($jsonResponse));\n    }\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a PHP class for handling HTTP/HTTPS communications using either socket-based connections (via fsockopen) or cURL, supporting both standard and persistent connections, with proper header and cookie management.\n\nClass Description: The soap_transport_http class provides low-level HTTP transport capabilities for SOAP communications, supporting both socket and cURL implementations. It handles connection management, request/response processing, and error handling.\n\nAttributes:\n- url: string - The target URL for HTTP requests\n- uri: string - The URI portion of the URL\n- scheme: string - The protocol scheme (http/https)\n- host: string - The target hostname\n- port: string - The target port number\n- path: string - The path portion of the URL\n- request_method: string - HTTP method (default: POST)\n- protocol_version: string - HTTP version (default: 1.0)\n- outgoing_headers: array - Headers to be sent with the request\n- incoming_headers: array - Headers received in the response\n- outgoing_payload: string - Data to be sent in the request\n- incoming_payload: string - Data received in the response\n- persistentConnection: bool - Flag for persistent connections\n- use_curl: bool - Flag to use cURL instead of sockets\n- proxy: array|null - Proxy configuration if used\n\nMethods:\n- __construct(string $url, array $curl_options=null, bool $use_curl=false) -> void - Initializes the transport with target URL and options\n- connect(int $connection_timeout=0, int $response_timeout=30) -> bool - Establishes connection to server\n- send(string $data, int $timeout=0, int $response_timeout=30, array $cookies=null) -> mixed - Sends data and returns response\n- sendRequest(string $data, array $cookies=null) -> bool - Sends the HTTP request with headers\n- getResponse() -> string|bool - Reads and processes the server response\n- setHeader(string $name, string $value) -> void - Adds a header to outgoing request\n- setCurlOption(mixed $option, mixed $value) -> void - Sets cURL option when using cURL\n- parseCookie(string $cookie_str) -> array|bool - Parses Set-Cookie header into array",
    "Canonical_solution": "class soap_transport_http extends nusoap_base {\n    var $url = '';\n    var $uri = '';\n    var $digest_uri = '';\n    var $scheme = '';\n    var $host = '';\n    var $port = '';\n    var $path = '';\n    var $request_method = 'POST';\n    var $protocol_version = '1.0';\n    var $encoding = '';\n    var $outgoing_headers = array();\n    var $incoming_headers = array();\n    var $incoming_cookies = array();\n    var $outgoing_payload = '';\n    var $incoming_payload = '';\n    var $response_status_line;\n    var $useSOAPAction = true;\n    var $persistentConnection = false;\n    var $ch = false;\n    var $ch_options = array();\n    var $use_curl = false;\n    var $proxy = null;\n    var $username = '';\n    var $password = '';\n    var $authtype = '';\n    var $digestRequest = array();\n    var $certRequest = array();\n\n    function soap_transport_http($url, $curl_options = NULL, $use_curl = false) {\n        parent::nusoap_base();\n        $this->debug(\"ctor url=$url use_curl=$use_curl curl_options:\");\n        $this->appendDebug($this->varDump($curl_options));\n        $this->setURL($url);\n        if (is_array($curl_options)) {\n            $this->ch_options = $curl_options;\n        }\n        $this->use_curl = $use_curl;\n        preg_match('/\\$Revisio' . 'n: ([^ ]+)/', $this->revision, $rev);\n        $this->setHeader('User-Agent', $this->title.'/'.$this->version.' ('.$rev[1].')');\n    }\n\n    function connect($connection_timeout=0,$response_timeout=30) {\n        $this->debug(\"connect connection_timeout $connection_timeout, response_timeout $response_timeout, scheme $this->scheme, host $this->host, port $this->port\");\n        if ($this->io_method() == 'socket') {\n            if (!is_array($this->proxy)) {\n                $host = $this->host;\n                $port = $this->port;\n            } else {\n                $host = $this->proxy['host'];\n                $port = $this->proxy['port'];\n            }\n\n            if($this->persistentConnection && isset($this->fp) && is_resource($this->fp)){\n                if (!feof($this->fp)) {\n                    $this->debug('Re-use persistent connection');\n                    return true;\n                }\n                fclose($this->fp);\n                $this->debug('Closed persistent connection at EOF');\n            }\n\n            if ($this->scheme == 'ssl') {\n                $host = 'ssl://' . $host;\n            }\n            $this->debug('calling fsockopen with host ' . $host . ' connection_timeout ' . $connection_timeout);\n\n            if($connection_timeout > 0){\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str, $connection_timeout);\n            } else {\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str);\n            }\n            \n            if(!$this->fp) {\n                $msg = 'Couldn\\'t open socket connection to server ' . $this->url;\n                if ($this->errno) {\n                    $msg .= ', Error ('.$this->errno.'): '.$this->error_str;\n                } else {\n                    $msg .= ' prior to connect().  This is often a problem looking up the host name.';\n                }\n                $this->debug($msg);\n                $this->setError($msg);\n                return false;\n            }\n            \n            $this->debug('set response timeout to ' . $response_timeout);\n            socket_set_timeout( $this->fp, $response_timeout);\n\n            $this->debug('socket connected');\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            if (!extension_loaded('curl')) {\n                $this->setError('The PHP cURL Extension is required for HTTPS or NLTM.  You will need to re-build or update your PHP to include cURL or change php.ini to load the PHP cURL extension.');\n                return false;\n            }\n            $this->debug('connect using cURL');\n            $this->ch = curl_init();\n            $hostURL = ($this->port != '') ? \"$this->scheme://$this->host:$this->port\" : \"$this->scheme://$this->host\";\n            $hostURL .= $this->path;\n            $this->setCurlOption(CURLOPT_URL, $hostURL);\n            if (ini_get('safe_mode') || ini_get('open_basedir')) {\n                $this->debug('safe_mode or open_basedir set, so do not set CURLOPT_FOLLOWLOCATION');\n            } else {\n                $this->setCurlOption(CURLOPT_FOLLOWLOCATION, 1);\n            }\n            $this->setCurlOption(CURLOPT_HEADER, 1);\n            $this->setCurlOption(CURLOPT_RETURNTRANSFER, 1);\n            if ($this->persistentConnection) {\n                $this->persistentConnection = false;\n                $this->setHeader('Connection', 'close');\n            }\n            if ($connection_timeout != 0) {\n                $this->setCurlOption(CURLOPT_CONNECTIONTIMEOUT, $connection_timeout);\n            }\n            if ($response_timeout != 0) {\n                $this->setCurlOption(CURLOPT_TIMEOUT, $response_timeout);\n            }\n            $this->debug('cURL connection set up');\n            return true;\n        } else {\n            $this->setError('Unknown scheme ' . $this->scheme);\n            $this->debug('Unknown scheme ' . $this->scheme);\n            return false;\n        }\n    }\n\n    function send($data, $timeout=0, $response_timeout=30, $cookies=NULL) {\n        $this->debug('entered send() with data of length: '.strlen($data));\n        $this->tryagain = true;\n        $tries = 0;\n        while ($this->tryagain) {\n            $this->tryagain = false;\n            if ($tries++ < 2) {\n                if (!$this->connect($timeout, $response_timeout)){\n                    return false;\n                }\n                if (!$this->sendRequest($data, $cookies)){\n                    return false;\n                }\n                $respdata = $this->getResponse();\n            } else {\n                $this->setError(\"Too many tries to get an OK response ($this->response_status_line)\");\n            }\n        }        \n        $this->debug('end of send()');\n        return $respdata;\n    }\n\n    function sendRequest($data, $cookies = NULL) {\n        $cookie_str = $this->getCookiesForRequest($cookies, (($this->scheme == 'ssl') || ($this->scheme == 'https')));\n        $this->buildPayload($data, $cookie_str);\n        if ($this->io_method() == 'socket') {\n            if(!fputs($this->fp, $this->outgoing_payload, strlen($this->outgoing_payload))) {\n                $this->setError('couldn\\'t write message data to socket');\n                $this->debug('couldn\\'t write message data to socket');\n                return false;\n            }\n            $this->debug('wrote data to socket, length = ' . strlen($this->outgoing_payload));\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            $curl_headers = array();\n            foreach($this->outgoing_headers as $k => $v){\n                if ($k == 'Connection' || $k == 'Content-Length' || $k == 'Host' || $k == 'Authorization' || $k == 'Proxy-Authorization') {\n                    $this->debug(\"Skip cURL header $k: $v\");\n                } else {\n                    $curl_headers[] = \"$k: $v\";\n                }\n            }\n            if ($cookie_str != '') {\n                $curl_headers[] = 'Cookie: ' . $cookie_str;\n            }\n            $this->setCurlOption(CURLOPT_HTTPHEADER, $curl_headers);\n            $this->debug('set cURL HTTP headers');\n            if ($this->request_method == \"POST\") {\n                $this->setCurlOption(CURLOPT_POST, 1);\n                $this->setCurlOption(CURLOPT_POSTFIELDS, $data);\n                $this->debug('set cURL POST data');\n            }\n            foreach ($this->ch_options as $key => $val) {\n                $this->setCurlOption($key, $val);\n            }\n            $this->debug('set cURL payload');\n            return true;\n        }\n    }\n\n    function getResponse(){\n        $this->incoming_payload = '';\n        if ($this->io_method() == 'socket') {\n            $data = '';\n            while (!isset($lb)){\n                if(feof($this->fp)) {\n                    $this->incoming_payload = $data;\n                    $this->debug('found no headers before EOF after length ' . strlen($data));\n                    $this->debug(\"received before EOF:\\n\" . $data);\n                    $this->setError('server failed to send headers');\n                    return false;\n                }\n                $tmp = fgets($this->fp, 256);\n                $tmplen = strlen($tmp);\n                $this->debug(\"read line of $tmplen bytes: \" . trim($tmp));\n                if ($tmplen == 0) {\n                    $this->incoming_payload = $data;\n                    $this->debug('socket read of headers timed out after length ' . strlen($data));\n                    $this->debug(\"read before timeout: \" . $data);\n                    $this->setError('socket read of headers timed out');\n                    return false;\n                }\n                $data .= $tmp;\n                $pos = strpos($data,\"\\r\\n\\r\\n\");\n                if($pos > 1){\n                    $lb = \"\\r\\n\";\n                } else {\n                    $pos = strpos($data,\"\\n\\n\");\n                    if($pos > 1){\n                        $lb = \"\\n\";\n                    }\n                }\n                if (isset($lb) && preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    unset($lb);\n                    $data = '';\n                }\n            }\n            $this->incoming_payload .= $data;\n            $this->debug('found end of headers after length ' . strlen($data));\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $this->incoming_headers = array();\n            $this->incoming_cookies = array();\n            foreach($header_array as $header_line){\n                $arr = explode(':',$header_line, 2);\n                if(count($arr) > 1){\n                    $header_name = strtolower(trim($arr[0]));\n                    $this->incoming_headers[$header_name] = trim($arr[1]);\n                    if ($header_name == 'set-cookie') {\n                        $cookie = $this->parseCookie(trim($arr[1]));\n                        if ($cookie) {\n                            $this->incoming_cookies[] = $cookie;\n                            $this->debug('found cookie: ' . $cookie['name'] . ' = ' . $cookie['value']);\n                        } else {\n                            $this->debug('did not find cookie in ' . trim($arr[1]));\n                        }\n                    }\n                } else if (isset($header_name)) {\n                    $this->incoming_headers[$header_name] .= $lb . ' ' . $header_line;\n                }\n            }\n            if (isset($this->incoming_headers['transfer-encoding']) && strtolower($this->incoming_headers['transfer-encoding']) == 'chunked') {\n                $content_length =  2147483647;\n                $chunked = true;\n                $this->debug(\"want to read chunked content\");\n            } elseif (isset($this->incoming_headers['content-length'])) {\n                $content_length = $this->incoming_headers['content-length'];\n                $chunked = false;\n                $this->debug(\"want to read content of length $content_length\");\n            } else {\n                $content_length =  2147483647;\n                $chunked = false;\n                $this->debug(\"want to read content to EOF\");\n            }\n            $data = '';\n            do {\n                if ($chunked) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk line of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk length timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk length timed out');\n                        return false;\n                    }\n                    $content_length = hexdec(trim($tmp));\n                    $this->debug(\"chunk length $content_length\");\n                }\n                $strlen = 0;\n                while (($strlen < $content_length) && (!feof($this->fp))) {\n                    $readlen = min(8192, $content_length - $strlen);\n                    $tmp = fread($this->fp, $readlen);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read buffer of $tmplen bytes\");\n                    if (($tmplen == 0) && (!feof($this->fp))) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of body timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of body timed out');\n                        return false;\n                    }\n                    $strlen += $tmplen;\n                    $data .= $tmp;\n                }\n                if ($chunked && ($content_length > 0)) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk terminator of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk terminator timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk terminator timed out');\n                        return false;\n                    }\n                }\n            } while ($chunked && ($content_length > 0) && (!feof($this->fp)));\n            if (feof($this->fp)) {\n                $this->debug('read to EOF');\n            }\n            $this->debug('read body of length ' . strlen($data));\n            $this->incoming_payload .= $data;\n            $this->debug('received a total of '.strlen($this->incoming_payload).' bytes of data from server');\n            if(\n                (isset($this->incoming_headers['connection']) && strtolower($this->incoming_headers['connection']) == 'close') || \n                (! $this->persistentConnection) || feof($this->fp)){\n                fclose($this->fp);\n                $this->fp = false;\n                $this->debug('closed socket');\n            }\n            if($this->incoming_payload == ''){\n                $this->setError('no response from server');\n                return false;\n            }\n            return $data;\n        } else if ($this->io_method() == 'curl') {\n            $this->debug('send and receive with cURL');\n            $this->incoming_payload = curl_exec($this->ch);\n            $data = $this->incoming_payload;\n            $cErr = curl_error($this->ch);\n            if ($cErr != '') {\n                $err = 'cURL ERROR: '.curl_errno($this->ch).': '.$cErr.'<br>';\n                foreach(curl_getinfo($this->ch) as $k => $v){\n                    $err .= \"$k: $v<br>\";\n                }\n                $this->debug($err);\n                $this->setError($err);\n                curl_close($this->ch);\n                return false;\n            }\n            $this->debug('No cURL error, closing cURL');\n            curl_close($this->ch);\n            $savedata = $data;\n            while ($this->isSkippableCurlHeader($data)) {\n                $this->debug(\"Found HTTP header to skip\");\n                if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                    $data = ltrim(substr($data,$pos));\n                } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                    $data = ltrim(substr($data,$pos));\n                }\n            }\n            if ($data == '') {\n                $data = $savedata;\n                while (preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                        $data = ltrim(substr($data,$pos));\n                    } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                        $data = ltrim(substr($data,$pos));\n                    }\n                }\n            }\n            if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                $lb = \"\\r\\n\";\n            } elseif( $pos = strpos($data,\"\\n\\n\")) {\n                $lb = \"\\n\";\n            } else {\n                $this->debug('no proper separation of headers and document');\n                $this->setError('no proper separation of headers and document');\n                return false;\n            }\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $data = ltrim(substr($data,$pos));\n            $this->debug('found proper separation of headers and document');\n            $this->debug('cleaned data, stringlen: '.strlen($data));\n            foreach ($header_array as $header_line) {\n                $arr = explode(':',$header_line",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "<?php\nclass soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method;\n    public $protocol_version;\n    public $outgoing_headers;\n    public $incoming_headers;\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection;\n    public $use_curl;\n    public $proxy;\n\n    public function __construct(string $url, array $curl_options=null, bool $use_curl=false) {\n        $parsed = parse_url($url);\n        $this->url = $url;\n        $this->scheme = isset($parsed['scheme']) ? $parsed['scheme'] : 'http';\n        $this->host = isset($parsed['host']) ? $parsed['host'] : '';\n        $this->port = isset($parsed['port']) ? $parsed['port'] : ($this->scheme == 'https' ? 443 : 80);\n        $this->path = isset($parsed['path']) ? $parsed['path'] : '/';\n        $this->uri = $this->path;\n        if (isset($parsed['query'])) {\n            $this->uri .= '?' . $parsed['query'];\n        }\n        $this->request_method = 'POST';\n        $this->protocol_version = '1.0';\n        $this->outgoing_headers = [];\n        $this->incoming_headers = [];\n        $this->outgoing_payload = '';\n        $this->incoming_payload = '';\n        $this->persistentConnection = false;\n        $this->use_curl = $use_curl;\n        $this->proxy = null;\n        if ($curl_options !== null) {\n            $this->setCurlOption(CURLOPT_URL, $url);\n            foreach ($curl_options as $key => $value) {\n                $this->setCurlOption($key, $value);\n            }\n        }\n    }\n\n    public function connect(int $connection_timeout=0, int $response_timeout=30): bool {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init();\n            curl_setopt($this->curl_handle, CURLOPT_URL, $this->url);\n            curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->curl_handle, CURLOPT_HEADER, true);\n            curl_setopt($this->curl_handle, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $connection_timeout);\n            curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $response_timeout);\n            if ($this->proxy) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy['host'] . ':' . $this->proxy['port']);\n                if (isset($this->proxy['userpass'])) {\n                    curl_setopt($this->curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['userpass']);\n                }\n            }\n        } else {\n            $this->socket = fsockopen($this->scheme . '://' . $this->host . ($this->port ? ':' . $this->port : ''), 80, $errno, $errstr, $connection_timeout);\n            if (!$this->socket) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function send(string $data, int $timeout=0, int $response_timeout=30, array $cookies=null): mixed {\n        if ($this->use_curl) {\n            $this->sendRequest($data, $cookies);\n            return $this->getResponse();\n        } else {\n            $this->sendRequest($data, $cookies);\n            return $this->getResponse();\n        }\n    }\n\n    public function sendRequest(string $data, array $cookies=null): bool {\n        $request_line = \"$this->request_method $this->uri $this->protocol_version\\r\\n\";\n        $headers = '';\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers .= \"$name: $value\\r\\n\";\n        }\n        $headers .= \"\\r\\n\";\n        $request = $request_line . $headers . $data;\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $request);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, array_map(function($header) { return $header; }, $this->outgoing_headers));\n        } else {\n            fputs($this->socket, $request);\n        }\n        return true;\n    }\n\n    public function getResponse(): string|bool {\n        if ($this->use_curl) {\n            $response = curl_exec($this->curl_handle);\n            if ($response === false) {\n                return false;\n            }\n            $headers = [];\n            $lines = explode(\"\\r\\n\", $response);\n            $header_end = false;\n            foreach ($lines as $line) {\n                if ($line === '') {\n                    $header_end = true;\n                } else {\n                    if (!$header_end) {\n                        list($name, $value) = explode(':', $line, 2);\n                        $headers[$name] = $value;\n                    }\n                }\n            }\n            $this->incoming_headers = $headers;\n            $this->incoming_payload = substr($response, strlen($headers));\n            return $this->incoming_payload;\n        } else {\n            $headers = '';\n            while (!feof($this->socket)) {\n                $headers .= fgets($this->socket, 1024);\n            }\n            $this->incoming_headers = [];\n            $lines = explode(\"\\r\\n\", $headers);\n            $header_end = false;\n            foreach ($lines as $line) {\n                if ($line === '') {\n                    $header_end = true;\n                } else {\n                    if (!$header_end) {\n                        list($name, $value) = explode(':', $line, 2);\n                        $this->incoming_headers[$name] = $value;\n                    }\n                }\n            }\n            $this->incoming_payload = '';\n            while (!feof($this->socket)) {\n                $this->incoming_payload .= fgets($this->socket, 1024);\n            }\n            return $this->incoming_payload;\n        }\n    }\n\n    public function setHeader(string $name, string $value): void {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption(mixed $option, mixed $value): void {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, $option, $value);\n        }\n    }\n\n    public function parseCookie(string $cookie_str): array|bool {\n        $cookies = [];\n        $pairs = explode(';', $cookie_str);\n        foreach ($pairs as $pair) {\n            $pair = trim($pair);\n            if (empty($pair)) continue;\n            list($name, $value) = explode('=', $pair, 2);\n            $cookies[$name] = $value;\n        }\n        return $cookies;\n    }\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a PHP function that retrieves content from a specified URL using low-level socket operations (fsockopen) rather than higher-level HTTP client libraries. The function should handle both HTTP and HTTPS protocols, manage connection timeouts, and properly process the HTTP response.\n\nFunction Description: The function establishes a TCP connection to the specified HTTP server, sends a GET request, reads the response (separating headers from body), and returns the content. It handles both HTTP and HTTPS connections with appropriate ports, includes basic error handling, and follows proper HTTP protocol for request/response cycles.\n\nInput:\n- $url (string): The URL to fetch content from (e.g., \"http://example.com\" or \"https://example.com\")\n- &$data (string, passed by reference): Variable that will contain the response body content\n\nOutput:\n- bool: Returns true if the request was successful and content was retrieved, false if any error occurred (connection failure, empty response, etc.)\n- The response body content is stored in the $data parameter passed by reference\n\nNote: The function does not return the content directly but instead modifies the $data parameter. This follows the pattern seen in the reference code where output is handled via parameter reference rather than return value.",
    "Canonical_solution": "function file_get_contents_by_socket($url, &$data)\n{\n    $timeout = 1;\n    $p = parse_url($url);\n    $file = $p['path'];\n    if ($p['scheme'] == 'https') {\n        $prefix = 'ssl://';\n        $port = ($p['port'] ? $p['port'] : 443);\n    } else {\n        $prefix = '';\n        $port = ($p['port'] ? $p['port'] : 80);\n    }\n    if ($p['query']) {\n        $file .= '?' . $p['query'];\n    }\n    if (!($fh = @fsockopen($prefix . $p['host'], $port, $errno, $errstr, $timeout))) {\n        return false;\n    }\n\n    $getstring =\n        \"GET \" . $file . \" HTTP/1.0 \\r\\n\" .\n        \"Host: \" . $p['host'] . \" \\r\\n\" .\n        \"Connection: close\\r\\n\\r\\n\";\n    fwrite($fh, $getstring);\n    $s = fgets($fh, 1024);\n    if (!$s) {\n        return false;\n    }\n    $httpheader .= $s;\n    while (!feof($fh)) {\n        $s = fgets($fh, 1024);\n        if ($s == \"\\r\\n\") {\n            break;\n        }\n    }\n    $data = '';\n    while (!feof($fh)) {\n        $data .= fgets($fh, 1024);\n    }\n    fclose($fh);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "wrong_result": "function fetchContent($url, &$data) {\n    $parsed = parse_url($url);\n    if (!$parsed) return false;\n\n    $protocol = $parsed['scheme'];\n    $host = $parsed['host'];\n    $path = isset($parsed['path']) ? $parsed['path'] : '/';\n    $query = isset($parsed['query']) ? '?' . $parsed['query'] : '';\n    $port = $protocol === 'https' ? 443 : 80;\n\n    if (isset($parsed['port'])) {\n        $port = $parsed['port'];\n    }\n\n    $context = null;\n    if ($protocol === 'https') {\n        $context = stream_context_create([\n            'ssl' => [\n                'method' => 'ssl',\n                'allow_self_signed' => true,\n                'verify_peer' => false,\n                'verify_depth' => 0,\n            ]\n        ]);\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, 5, $context);\n    if (!$fp) return false;\n\n    $request_uri = $path . $query;\n    $request = \"GET $request_uri HTTP/1.1\\r\\nHost: $host\\r\\nConnection: Close\\r\\n\\r\\n\";\n    fwrite($fp, $request);\n\n    $headers = '';\n    while (!feof($fp)) {\n        $line = fgets($fp);\n        if ($line === false) break;\n        $headers .= $line;\n        if ($line === \"\\r\\n\") break;\n    }\n\n    $body = '';\n    while (!feof($fp)) {\n        $body .= fread($fp, 8192);\n    }\n\n    $status_line = explode(' ', $headers, 2);\n    if (count($status_line) < 2 || $status_line[1] !== '200') return false;\n\n    if (empty($body)) return false;\n\n    $data = $body;\n    return true;\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a PHP class that handles file uploads to a specified host using HTTP PUT requests with Guzzle HTTP client, including CRC32 checksum verification.\n\nClass Description: ImageX is a class that extends V4Curl and provides functionality to upload files to a remote server. It handles file validation, CRC32 checksum generation, and HTTP communication using Guzzle's HTTP client.\n\nAttributes: (No explicit attributes in this class - it inherits from V4Curl)\n\nMethods:\nupload: [upload](string $uploadHost, array $storeInfo, string $filePath) -> int - Uploads a file to the specified host using HTTP PUT request. Validates file existence, calculates CRC32 checksum, and sends the file with appropriate headers. Returns 0 on success, -1 if file doesn't exist, or -2 if upload fails.\n\nParameters:\n- $uploadHost: string - The host address to upload to\n- $storeInfo: array - Contains 'StoreUri' for upload endpoint and 'Auth' for authorization\n- $filePath: string - Local path to the file to be uploaded\n\nReturn:\n- int: 0 for success, -1 for file not found, -2 for upload failure",
    "Canonical_solution": "use Volc\\Base\\V4Curl;\nuse GuzzleHttp\\Client;\n\nclass ImageX extends V4Curl\n{\n    public function upload(string $uploadHost, $storeInfo, string $filePath)\n    {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n        $content = file_get_contents($filePath);\n        $crc32 = sprintf(\"%08x\", crc32($content));\n\n        $body = fopen($filePath, \"r\");\n        $tosClient = new Client([\n            'base_uri' => \"https://\" . $uploadHost,\n            'timeout' => 5.0,\n        ]);\n\n        $response = $tosClient->request('PUT', $storeInfo[\"StoreUri\"], [\"body\" => $body, \"headers\" => ['Authorization' => $storeInfo[\"Auth\"], 'Content-CRC32' => $crc32]]);\n        $uploadResponse = json_decode((string) $response->getBody(), true);\n        if (!isset($uploadResponse[\"success\"]) || $uploadResponse[\"success\"] != 0) {\n            return -2;\n        }\n        return 0;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $crc32 = crc32($fileContent);\n\n        $url = $uploadHost . $storeInfo['StoreUri'];\n        $headers = [\n            'Content-Type' => 'application/octet-stream',\n            'X-CRC32' => $crc32,\n            'Authorization' => $storeInfo['Auth']\n        ];\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->put($url, ['headers' => $headers, 'body' => $fileContent]);\n            return $response->getStatusCode() === 200 ? 0 : -2;\n        } catch (\\Exception $e) {\n            return -2;\n        }\n    }\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using low-level socket operations (fsockopen) to send HTTP requests and handle responses, with logging capabilities.\n\nClass Description: SocketHttpClient is a PSR-compatible HTTP client that establishes direct socket connections to HTTP servers, sends requests, and processes responses. It implements both a custom HTTP client interface and PSR-18's ClientInterface, while also supporting PSR-3 logging.\n\nAttributes:\n- logger: [LoggerInterface] - PSR-3 logger instance for tracking connection attempts, errors, and debug information\n\nMethods:\n- __construct([LoggerInterface $logger]) -> [void] - Initializes the client with a PSR-3 logger instance\n- sendRequest([RequestInterface $request]) -> [ResponseInterface] - Sends an HTTP request and returns the response. Handles both HTTP and HTTPS connections, processes headers and body, and manages socket lifecycle. Returns a PSR-7 response object.",
    "Canonical_solution": "use Mpdf\\Log\\Context as LogContext;\nuse Mpdf\\PsrHttpMessageShim\\Response;\nuse Mpdf\\PsrHttpMessageShim\\Stream;\nuse Mpdf\\PsrLogAwareTrait\\PsrLogAwareTrait;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements \\Mpdf\\Http\\ClientInterface, \\Psr\\Log\\LoggerAwareInterface\n{\n    use PsrLogAwareTrait;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request)\n    {\n        if (null === $request->getUri()) {\n            return (new Response());\n        }\n\n        $url = $request->getUri();\n\n        if (is_string($url)) {\n            $url = new Uri($url);\n        }\n\n        $timeout = 1;\n\n        $file = $url->getPath() ?: '/';\n        $scheme = $url->getScheme();\n        $port = $url->getPort() ?: 80;\n        $prefix = '';\n\n        if ($scheme === 'https') {\n            $prefix = 'ssl://';\n            $port = $url->getPort() ?: 443;\n        }\n\n        $query = $url->getQuery();\n        if ($query) {\n            $file .= '?' . $query;\n        }\n\n        $socketPath = $prefix . $url->getHost();\n\n        $this->logger->debug(sprintf('Opening socket on %s:%s of URL \"%s\"', $socketPath, $port, $request->getUri()), ['context' => LogContext::REMOTE_CONTENT]);\n\n        $response = new Response();\n\n        if (!($fh = @fsockopen($socketPath, $port, $errno, $errstr, $timeout))) {\n            $this->logger->error(sprintf('Socket error \"%s\": \"%s\"', $errno, $errstr), ['context' => LogContext::REMOTE_CONTENT]);\n            return $response;\n        }\n\n        $getRequest = 'GET ' . $file . ' HTTP/1.1' . \"\\r\\n\" .\n            'Host: ' . $url->getHost() . \" \\r\\n\" .\n            'Connection: close' . \"\\r\\n\\r\\n\";\n\n        fwrite($fh, $getRequest);\n\n        $httpHeader = fgets($fh, 1024);\n        if (!$httpHeader) {\n            return $response;\n        }\n\n        preg_match('@HTTP/(?P<protocolVersion>[\\d\\.]+) (?P<httpStatusCode>[\\d]+) .*@', $httpHeader, $parsedHeader);\n\n        if (!$parsedHeader) {\n            return $response;\n        }\n\n        $response = $response->withStatus($parsedHeader['httpStatusCode']);\n\n        while (!feof($fh)) {\n            $s = fgets($fh, 1024);\n            if ($s === \"\\r\\n\") {\n                break;\n            }\n            preg_match('/^(?P<headerName>.*?): ?(?P<headerValue>.*)$/', $s, $parsedHeader);\n            if (!$parsedHeader) {\n                continue;\n            }\n            $response = $response->withHeader($parsedHeader['headerName'], trim($parsedHeader['headerValue']));\n        }\n\n        $body = '';\n\n        while (!feof($fh)) {\n            $line = fgets($fh, 1024);\n            $body .= $line;\n        }\n\n        fclose($fh);\n\n        $stream = Stream::create($body);\n        $stream->rewind();\n\n        return $response\n            ->withBody($stream);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "wrong_result": "use Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface {\n    protected $logger;\n\n    public function __construct(LoggerInterface $logger) {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface {\n        $uriString = (string)$request->getUri();\n        $parsed = parse_url($uriString);\n        $scheme = $parsed['scheme'] ?? 'http';\n        $host = $parsed['host'] ?? '';\n        $port = isset($parsed['port']) ? $parsed['port'] : ($scheme === 'https' ? 443 : 80);\n        $path = $parsed['path'] ?? '/';\n\n        $protocol = $scheme === 'https' ? 'ssl://' : '';\n        $hostWithProtocol = $protocol . $host;\n\n        $socket = fsockopen($hostWithProtocol, $port, $errno, $errstr, 30);\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to $hostWithProtocol: $errstr (errno $errno)\");\n            throw new \\Exception(\"Connection failed: $errstr\");\n        }\n\n        $method = $request->getMethod();\n        $headers = $request->getHeaders();\n        $body = $request->getBody()->getContents();\n\n        $requestLine = \"$method $path HTTP/1.1\";\n        $headerLines = [];\n        foreach ($headers as $name => $values) {\n            foreach ($values as $value) {\n                $headerLines[] = \"$name: $value\";\n            }\n        }\n        if (!isset($headers['Host'])) {\n            $headerLines[] = \"Host: $host\";\n        }\n        $headerLines[] = '';\n        $requestHeaders = implode(\"\\r\\n\", $headerLines);\n\n        fwrite($socket, \"$requestLine\\r\\n$requestHeaders\\r\\n\");\n        fwrite($socket, $body);\n\n        $statusLine = '';\n        $headersArray = [];\n        while (true) {\n            $line = fgets($socket, 1024);\n            if (empty($line)) {\n                break;\n            }\n            $statusLine .= $line;\n            if (preg_match('/^\\r\\n$/', $line)) {\n                break;\n            }\n        }\n\n        $statusParts = explode(' ', $statusLine);\n        $statusCode = $statusParts[1] ?? '500';\n        $statusReason = $statusParts[2] ?? '';\n\n        $headerLines = [];\n        while (true) {\n            $line = fgets($socket, 1024);\n            if (empty($line)) {\n                break;\n            }\n            $headerLines[] = $line;\n            if (preg_match('/^\\r\\n$/', $line)) {\n                break;\n            }\n        }\n\n        $headerArray = [];\n        foreach ($headerLines as $header) {\n            list($name, $value) = explode(':', $header, 2);\n            $headerArray[$name] = $value;\n        }\n\n        $bodyContent = '';\n        while (!feof($socket)) {\n            $bodyContent .= fgets($socket, 1024);\n        }\n\n        fclose($socket);\n\n        $this->logger->info(\"Received response: $statusCode $statusReason\");\n\n        $responseFactory = new \\Psr\\Http\\Message\\ResponseFactory();\n        $response = $responseFactory->createResponse($statusCode);\n        $response = $response->withHeaders($headerArray);\n        $bodyStream = fopen('php://memory', 'r+');\n        fwrite($bodyStream, $bodyContent);\n        rewind($bodyStream);\n        $response = $response->withBody($bodyStream);\n\n        return $response;\n    }\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a function that implements a RabbitMQ consumer in PHP to process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message by printing its content and acknowledging it. The consumer stops when it receives a 'quit' message or when the channel is no longer consuming. The function includes proper cleanup by closing the channel and connection upon shutdown.\n\nInput:\n- $host (string): The hostname of the RabbitMQ server\n- $port (int): The port number of the RabbitMQ server\n- $user (string): The username for RabbitMQ authentication\n- $pass (string): The password for RabbitMQ authentication\n- $vhost (string): The virtual host to connect to\n- $exchange (string): The name of the exchange to declare\n- $queue (string): The name of the queue to declare and consume from\n- $consumerTag (string): The identifier for this consumer\n\nOutput: None (The function processes messages asynchronously and does not return a value)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/vendor/autoload.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    while ($channel->is_consuming()) {\n        $channel->wait(null, true);\n        usleep(300000);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "require_once 'vendor/autoload.php';\n\nfunction consumeFromRabbitMQ($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost\n    ]);\n\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, false, false);\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->queue_bind($queue, $exchange, '');\n\n    $callback = function ($msg) use ($consumerTag) {\n        $body = $msg->body;\n        if ($body === 'quit') {\n            echo \"Received quit command. Stopping consumer.\\n\";\n            $msg->delivery_info['channel']->basic_cancel($consumerTag);\n            return;\n        }\n        echo \"Received message: $body\\n\";\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a RabbitMQ consumer class in PHP that connects to a RabbitMQ server, declares a queue and exchange, binds them, and processes incoming messages until a termination signal is received.\n\nClass Description: The RabbitMQConsumer class handles the consumption of messages from a RabbitMQ queue. It establishes a connection to the server, sets up the necessary queue and exchange, processes messages, and provides shutdown functionality.\n\nAttributes:\n- msgCount: [int] - Tracks the number of messages processed\n- startTime: [float|null] - Records the start time of message processing\n- conn: [AMQPStreamConnection] - Holds the RabbitMQ server connection\n- ch: [AMQPChannel] - Represents the communication channel\n- exchange: [string] - Name of the exchange to bind to\n- queue: [string] - Name of the queue to consume from\n- consumer_tag: [string] - Identifier for the consumer (empty in this implementation)\n\nMethods:\n- __construct() -> [void] - Initializes the RabbitMQ connection, channel, exchange, and queue\n- process_message([AMQPMessage] $msg) -> [void] - Processes incoming messages and handles termination signal\n- startConsuming() -> [void] - Starts consuming messages from the queue\n- shutdown() -> [void] - Closes the channel and connection cleanly",
    "Canonical_solution": "use PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/../tests/config.php';\n\nclass RabbitMQConsumer\n{\n    protected $msgCount = 0;\n    protected $startTime = null;\n    protected $conn;\n    protected $ch;\n    protected $exchange = 'bench_exchange';\n    protected $queue = 'bench_queue';\n    protected $consumer_tag = '';\n\n    public function __construct()\n    {\n        $this->conn = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $this->ch = $this->conn->channel();\n        $this->ch->queue_declare($this->queue, false, false, false, false);\n        $this->ch->exchange_declare($this->exchange, 'direct', false, false, false);\n        $this->ch->queue_bind($this->queue, $this->exchange);\n    }\n\n    public function process_message($msg)\n    {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n\n        if ($msg->body == 'quit') {\n            echo sprintf(\"Pid: %s, Count: %s, Time: %.4f\\n\", getmypid(), $this->msgCount, microtime(true) - $this->startTime);\n            $this->shutdown();\n            die;\n        }\n        $this->msgCount++;\n    }\n\n    public function startConsuming()\n    {\n        $this->ch->basic_consume($this->queue, '', false, true, false, false, array($this, 'process_message'));\n        while ($this->ch->is_consuming()) {\n            $this->ch->wait();\n        }\n    }\n\n    protected function shutdown()\n    {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 143,
    "wrong_result": "class RabbitMQConsumer {\n    public $msgCount;\n    public $startTime;\n    public $conn;\n    public $ch;\n    public $exchange;\n    public $queue;\n    public $consumer_tag;\n\n    public function __construct(string $exchange, string $queue) {\n        $this->exchange = $exchange;\n        $this->queue = $queue;\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, false, false, false, '');\n        $this->ch->queue_declare($this->queue, false, false, false, false, false, '');\n        $this->ch->queue_bind($this->queue, $this->exchange, $this->queue);\n        $this->startTime = microtime(true);\n        $this->msgCount = 0;\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        $this->msgCount++;\n        if ($msg->body === 'terminate') {\n            $this->shutdown();\n        } else {\n            echo \"Received message: \" . $msg->body . \"\\n\";\n        }\n    }\n\n    public function startConsuming() {\n        $this->consumer_tag = $this->ch->basic_consume($this->queue, '', false, true, false, false, function($msg) {\n            $this->process_message($msg);\n        });\n        while ($this->ch->is_open()) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a PHP function that implements a RabbitMQ consumer to process messages from a specified queue, with the ability to acknowledge or reject messages based on their content, and properly handle connection shutdown.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them together, and starts consuming messages. It processes each message by acknowledging \"good\" messages and rejecting others. If the message body is \"quit\", it stops consuming. The function includes proper cleanup by closing the channel and connection on shutdown.\n\nInput:\n- $host: string - RabbitMQ server hostname\n- $port: int - RabbitMQ server port\n- $user: string - RabbitMQ username\n- $pass: string - RabbitMQ password  \n- $vhost: string - RabbitMQ virtual host\n- $exchange: string - Exchange name to bind to\n- $queue: string - Queue name to consume from\n- $consumerTag: string - Identifier for this consumer\n\nOutput: None (This is a long-running consumer process that handles messages asynchronously)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        if ($message->body == 'good') {\n            $message->ack();\n        } else {\n            $message->nack();\n        }\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost,\n    ]);\n\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false, false, null);\n    $channel->queue_bind($queue, $exchange);\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, function ($msg) use ($channel, $consumerTag) {\n        $body = $msg->body;\n\n        if ($body === 'quit') {\n            $channel->basic_cancel($consumerTag);\n            return;\n        }\n\n        if ($body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack();\n        }\n    });\n\n    $connection->on_close(function () use ($channel) {\n        $channel->close();\n        $connection->close();\n    });\n\n    while (true) {\n        sleep(1);\n    }\n}"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): RabbitMQ server hostname or IP address\n- `$port` (int): RabbitMQ server port number\n- `$user` (string): RabbitMQ username for authentication\n- `$pass` (string): RabbitMQ password for authentication\n- `$vhost` (string): RabbitMQ virtual host\n- `$exchange` (string): Name of the exchange to bind to\n- `$queue` (string): Name of the queue to consume messages from\n\nOutput: None (The function runs continuously until terminated or until receiving a 'quit' message)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "require_once 'AMQP.php';\n\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost,\n    ]);\n\n    $channel = $connection->channel();\n\n    $exchange = new AMQPExchange($channel);\n    $exchange->declare($exchange, AMQP_EXCHANGE_TYPE_DIRECT);\n\n    $queue = new AMQPQueue($channel);\n    $queue->declare($queue);\n\n    $queue->bind($exchange, $queue);\n\n    $queue->consume(function($envelope, $body) {\n        if ($body === 'quit') {\n            exit;\n        }\n        // Process the message here\n    });\n\n    pcntl_signal(SIGINT, function() use ($channel, $connection) {\n        $channel->close();\n        $connection->close();\n        exit;\n    });\n\n    while (true) {\n        sleep(1);\n    }\n}"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): The hostname of the RabbitMQ server.\n- `$port` (int): The port number of the RabbitMQ server.\n- `$user` (string): The username for RabbitMQ authentication.\n- `$pass` (string): The password for RabbitMQ authentication.\n- `$vhost` (string): The virtual host to connect to.\n- `$exchange` (string): The name of the exchange to declare.\n- `$queue` (string): The name of the queue to declare and consume from.\n\nOutput: None. The function runs indefinitely until a 'quit' message is received or the process is terminated. Messages are processed and acknowledged, and connections are closed upon shutdown.",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "require_once 'vendor/autoload.php';\n\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $connection = new AMQPConnection([\n        'host' => $host,\n        'port' => $port,\n        'login' => $user,\n        'password' => $pass,\n        'vhost' => $vhost,\n    ]);\n\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false, false);\n\n    $channel->queue_declare($queue, false, true, false, false, false, false);\n\n    $channel->queue_bind($queue, $exchange, $queue);\n\n    $channel->queue_consume($queue, function ($msg) use ($channel, $connection) {\n        if ($msg->body === 'quit') {\n            $channel->close();\n            $connection->close();\n            exit;\n        }\n\n        echo \"Received: \" . $msg->body . \"\\n\";\n\n        $msg->delivery_info['channel']->basic_ack($msg->delivery_tag);\n    });\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a PHP function that consumes messages from a RabbitMQ queue using headers-based routing. The function should establish a connection to RabbitMQ, declare an exchange and queue, bind the queue with specified headers, and process incoming messages with a callback function.\n\nFunction Description: The function `consume_rabbitmq_messages` connects to a RabbitMQ server, sets up a headers-based exchange, declares a temporary queue, binds the queue with the provided headers, and starts consuming messages. It processes each message using a callback function that displays the message body and headers. The function handles timeouts gracefully and cleans up resources after processing.\n\nInput: \n- `$headers` (array): An array of strings in the format \"key=value\" representing the headers to bind the queue with.\n\nOutput: \n- Returns `true` if the function executes successfully.\n- Returns `false` if the input headers are empty.\n- Outputs message details to stdout and may write errors to stderr.",
    "Canonical_solution": "function consume_rabbitmq_messages($headers)\n{\n    require __DIR__ . '/config.php';\n    \n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exception\\AMQPTimeoutException;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    if (empty($headers)) {\n        file_put_contents('php://stderr', \"Usage: $argv[0] [header1=value1] [header2=value2]\\n\");\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchangeName = 'topic_headers_test';\n    $channel->exchange_declare($exchangeName, AMQPExchangeType::HEADERS);\n\n    list($queueName, ,) = $channel->queue_declare('', false, false, true);\n\n    $bindArguments = [];\n    foreach ($headers as $header) {\n        list ($key, $value) = explode('=', $header, 2);\n        $bindArguments[$key] = $value;\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', false, new AMQPTable($bindArguments));\n\n    $callback = function (AMQPMessage $message) {\n        echo PHP_EOL . ' [x] ', $message->getRoutingKey(), ':', $message->getBody(), \"\\n\";\n        echo 'Message headers follows' . PHP_EOL;\n        var_dump($message->get('application_headers')->getNativeData());\n        echo PHP_EOL;\n    };\n\n    $channel->basic_consume($queueName, '', false, true, true, false, $callback);\n    while ($channel->is_consuming()) {\n        try {\n            $channel->wait(null, false, 2);\n        } catch (AMQPTimeoutException $exception) {\n        }\n        echo '*' . PHP_EOL;\n    }\n\n    $channel->close();\n    $connection->close();\n    return true;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "wrong_result": "function consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $headers_array = [];\n    foreach ($headers as $header_str) {\n        list($key, $value) = explode('=', $header_str);\n        $headers_array[$key] = $value;\n    }\n\n    try {\n        $connection = new AMQPConnection([\n            'host' => 'localhost',\n            'port' => 5672,\n            'login' => 'guest',\n            'password' => 'guest'\n        ]);\n\n        $channel = new AMQPChannel($connection);\n        $exchange = 'headers_exchange';\n        $queue_name = $channel->queue_declare(\"\", false, false, true, false, false, '');\n\n        $channel->exchange_declare($exchange, 'headers', false, false, false);\n\n        $channel->queue_bind($queue_name, $exchange, '', ['x-match' => 'all', 'headers' => $headers_array]);\n\n        $channel->basic_consume($queue_name, 'callback', false, true, false, false, function($msg) {\n            echo \"Message body: \" . $msg->body . \"\\n\";\n            print_r($msg->properties->headers);\n            echo \"\\n\";\n        });\n\n        while ($channel->is_consuming()) {\n            $channel->wait();\n        }\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (Exception $e) {\n        error_log(\"RabbitMQ consumer error: \" . $e->getMessage());\n        return false;\n    }\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a function that sends multiple messages to a RabbitMQ queue using PHP and measures the execution time for the operation.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, creates a temporary queue, sends a specified number of messages with the given content, and returns the total time taken to complete the operation. Each message is sent through a newly created channel, and the temporary queue is automatically deleted after use.\n\nInput:\n- $max_messages: [int] - The number of messages to send.\n- $host: [string] - The hostname or IP address of the RabbitMQ server.\n- $port: [int] - The port number of the RabbitMQ server.\n- $user: [string] - The username for RabbitMQ authentication.\n- $pass: [string] - The password for RabbitMQ authentication.\n- $vhost: [string] - The virtual host to connect to on the RabbitMQ server.\n- $message_body: [string] - The content of the message to be sent.\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages, or false if the connection fails.",
    "Canonical_solution": "function send_rabbitmq_messages($max_messages, $host, $port, $user, $pass, $vhost, $message_body)\n{\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    if (!$conn) {\n        return false;\n    }\n\n    $time = microtime(true);\n\n    for ($i = 0; $i < $max_messages; $i++) {\n        $ch = $conn->channel();\n        list($queue,) = $ch->queue_declare('', false, false, true, true);\n        $msg = new AMQPMessage($message_body);\n        $ch->basic_publish($msg, '', $queue);\n        $ch->close();\n    }\n\n    $execution_time = microtime(true) - $time;\n    $conn->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    try {\n        $conn = new AMQPConnection([\n            'host' => $host,\n            'port' => $port,\n            'login' => $user,\n            'password' => $pass,\n            'vhost' => $vhost,\n        ]);\n        $start_time = microtime(true);\n        $channel = new AMQPChannel($conn);\n        $queue = new AMQPQueue($channel);\n        $queue->declare('temp_queue', AMQP_QUEUE_TYPE_DEFAULT, true, true, true);\n        for ($i = 0; $i < $max_messages; $i++) {\n            $new_channel = new AMQPChannel($conn);\n            $new_channel->publish($message_body, 'temp_queue');\n            $new_channel->close();\n        }\n        $channel->close();\n        $end_time = microtime(true);\n        $total_time = $end_time - $start_time;\n        $conn->close();\n        return $total_time;\n    } catch (Exception $e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a CAPTCHA validation class that verifies user-submitted CAPTCHA responses using Google's reCAPTCHA API.\n\nClass Description: The Captcha class implements Laravel's Rule interface to provide CAPTCHA validation functionality. It sends the user's CAPTCHA response to Google's verification endpoint and checks the success status in the response.\n\nAttributes: (This class has no explicit attributes as it uses configuration values directly)\n\nMethods:\n1: passes(string $attribute, mixed $value) -> bool - Validates the CAPTCHA response by sending it to Google's verification API along with the secret key and client IP. Returns true if verification succeeds.\n   - $attribute: The name of the attribute being validated\n   - $value: The CAPTCHA response token to be validated\n\n2: message() -> string - Returns the validation error message to be displayed when CAPTCHA validation fails. The message is localized using Laravel's translation system.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        if (empty($value)) {\n            return false;\n        }\n\n        $response = json_decode((new Client([\n            'timeout' => config('boilerplate.access.captcha.configs.options.timeout'),\n        ]))->post('https://www.google.com/recaptcha/api/siteverify', [\n            'form_params' => [\n                'secret' => config('boilerplate.access.captcha.configs.secret_key'),\n                'remoteip' => request()->getClientIp(),\n                'response' => $value,\n            ],\n        ])->getBody(), true);\n\n        return isset($response['success']) && $response['success'] === true;\n    }\n\n    public function message()\n    {\n        return __('The captcha was invalid.');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "namespace Illuminate\\Validation\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\n\nclass Captcha implements Rule\n{\n    public function passes(string $attribute, mixed $value): bool\n    {\n        $secret = config('services.recaptcha.secret');\n        $ip = request()->ip();\n        $response = \\Http::withHeaders([\n            'Content-Type' => 'application/json',\n        ])->post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => $secret,\n            'response' => $value,\n            'remote_ip' => $ip,\n        ])->json();\n\n        return $response['success'] === true;\n    }\n\n    public function message(): string\n    {\n        return trans('auth.captcha.invalid');\n    }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a function that sends a delayed message to a RabbitMQ queue using PHP and the PhpAmqpLib library. The function should establish a connection to RabbitMQ, declare a delayed exchange and queue, and publish a message with a specified delay time.\n\nFunction Description: The function `send_delayed_message` sends a message to a RabbitMQ queue with a specified delay. It uses a delayed exchange to achieve the delay functionality. The function handles the connection setup, exchange and queue declaration, message creation with delay headers, and cleanup of resources.\n\nInput:\n- `$message_content` [string] - The content of the message to be sent.\n- `$delay_ms` [int] - The delay time in milliseconds before the message is delivered to the queue.\n\nOutput: None. The function does not return any value but publishes the message to the specified RabbitMQ queue with the given delay.\n\nNote: The function assumes the existence of a `config.php` file containing the RabbitMQ connection parameters (HOST, PORT, USER, PASS, VHOST).",
    "Canonical_solution": "function send_delayed_message($message_content, $delay_ms)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare(\n        'delayed_exchange',\n        'x-delayed-message',\n        false,\n        true,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-delayed-type' => AMQPExchangeType::FANOUT])\n    );\n\n    $channel->queue_declare(\n        'delayed_queue',\n        false,\n        false,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-dead-letter-exchange' => 'delayed'])\n    );\n\n    $channel->queue_bind('delayed_queue', 'delayed_exchange');\n\n    $headers = new AMQPTable(['x-delay' => $delay_ms]);\n    $message = new AMQPMessage($message_content, ['delivery_mode' => 2]);\n    $message->set('application_headers', $headers);\n    $channel->basic_publish($message, 'delayed_exchange');\n\n    $channel->close();\n    $connection->close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "function send_delayed_message($message_content, $delay_ms) {\n    require 'config.php';\n\n    $connection = new \\PhpAmqpLib\\Connection\\AMQPConnection($HOST, $PORT, $USER, $PASS, $VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, []);\n\n    $queue_name = 'delayed_queue';\n    $channel->queue_declare($queue_name, false, true, false, false, false, []);\n\n    $channel->queue_bind($queue_name, $exchange_name, '');\n\n    $msg = new \\PhpAmqpLib\\Message\\Delayed\\DelayMessage(\n        new \\PhpAmqpLib\\Message\\AMQPMessage($message_content),\n        $delay_ms\n    );\n\n    $channel->basic_publish($msg, $exchange_name, $queue_name);\n\n    $channel->close();\n    $connection->close();\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a function that sends a message to a RabbitMQ queue using PHP and the PhpAmqpLib library.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them, publishes a message with persistent delivery mode, and then closes the connection. It handles errors gracefully by returning false if an exception occurs.\n\nInput:  \n- $messageBody: [string] - The content of the message to be sent  \n- $exchange: [string] - The name of the exchange (default: 'router')  \n- $queue: [string] - The name of the queue (default: 'msgs')  \n\nOutput:  \n- [bool] - Returns true if the message was successfully sent, false if an error occurred",
    "Canonical_solution": "function send_rabbitmq_message($messageBody, $exchange = 'router', $queue = 'msgs')\n{\n    include(__DIR__ . '/config.php');\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    try {\n        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $channel = $connection->channel();\n\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $message = new AMQPMessage($messageBody, array(\n            'content_type' => 'text/plain',\n            'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT\n        ));\n        \n        $channel->basic_publish($message, $exchange);\n        \n        $channel->close();\n        $connection->close();\n        \n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "<?php\nfunction sendToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPConnection();\n        $channel = $connection->channel();\n        $channel->exchange_declare($exchange, 'direct', false, false, false);\n        $channel->queue_declare($queue, false, false, false, false);\n        $channel->queue_bind($queue, $exchange, '');\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQP::MSG_DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange, $queue);\n        $connection->close();\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a PHP function that publishes messages to a RabbitMQ queue in batches, measuring the total execution time for sending all messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares an exchange and queue, then publishes a specified number of messages in configurable batch sizes. It handles connection blocking scenarios and returns the total execution time. A special 'quit' message is sent at the end to signal completion.\n\nInput:\n- $msg_count: [integer] - The total number of messages to publish\n- $batch_size: [integer] - The number of messages to send in each batch\n- $host: [string] - RabbitMQ server hostname\n- $port: [integer] - RabbitMQ server port\n- $user: [string] - RabbitMQ username\n- $pass: [string] - RabbitMQ password\n- $vhost: [string] - RabbitMQ virtual host\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages",
    "Canonical_solution": "function publish_messages($msg_count, $batch_size, $host, $port, $user, $pass, $vhost)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Exception\\AMQPConnectionBlockedException;\n\n    $exchange = 'bench_exchange';\n    $queue = 'bench_queue';\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $messageBody = <<<EOT\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza\nEOT;\n\n    $message = new AMQPMessage($messageBody);\n    $time = microtime(true);\n\n    for ($i = 0; $i < $msg_count; $i++) {\n        $channel->batch_basic_publish($message, $exchange);\n\n        if ($i % $batch_size == 0) {\n            try {\n                $channel->publish_batch();\n            } catch (AMQPConnectionBlockedException $exception) {\n                do {\n                    sleep(10);\n                } while ($connection->isBlocked());\n                $channel->publish_batch();\n            }\n        }\n    }\n\n    $channel->publish_batch();\n    $channel->basic_publish(new AMQPMessage('quit'), $exchange);\n\n    $execution_time = microtime(true) - $time;\n    \n    $channel->close();\n    $connection->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "require_once 'amqp.php';\n\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n\n    try {\n        $connection = new AMQPConnection([\n            'host' => $host,\n            'port' => $port,\n            'login' => $user,\n            'password' => $pass,\n            'vhost' => $vhost\n        ]);\n\n        if (!$connection->isConnected()) {\n            throw new Exception(\"Failed to connect to RabbitMQ\");\n        }\n\n        $channel = $connection->channel();\n\n        $exchange = new AMQPExchange($channel);\n        $queue = new AMQPQueue($channel);\n\n        $exchange->declare('my_exchange', AMQP_EXCHANGE_TYPE_DIRECT);\n        $queue->declare('my_queue');\n\n        $queue->bind('my_exchange', 'my_queue');\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $batch_end = min($i + $batch_size, $msg_count);\n            $messages = array_slice(range(1, $msg_count), $i, $batch_size);\n\n            foreach ($messages as $msg) {\n                $exchange->publish($msg, 'my_exchange', 'my_queue');\n            }\n        }\n\n        $exchange->publish('quit', 'my_exchange', 'my_queue');\n\n        $channel->close();\n        $connection->close();\n    } catch (Exception $e) {\n        // Handle exception but continue execution\n    }\n\n    $end_time = microtime(true);\n    return $end_time - $start_time;\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Implement a PHP function that sends a message to a RabbitMQ queue using the PhpAmqpLib library. The function should handle connection establishment, message publishing, and resource cleanup.\n\nFunction Description: The function `send_rabbitmq_message` sends a given message to a predefined RabbitMQ queue. It establishes a connection to the RabbitMQ server, declares the necessary exchange and queue, publishes the message, and then closes the connection. The function returns a boolean indicating success or failure.\n\nInput:  \n- `$message_content` (string): The content of the message to be sent to the RabbitMQ queue.\n\nOutput:  \n- (bool): Returns `true` if the message was successfully sent, `false` if an error occurred.",
    "Canonical_solution": "function send_rabbitmq_message($message_content)\n{\n    include(__DIR__ . '/config.php');\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $exchange = 'basic_get_test';\n    $queue = 'basic_get_queue';\n\n    try {\n        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $channel = $connection->channel();\n\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $message = new AMQPMessage($message_content, array('content_type' => 'text/plain', 'delivery_mode' => 2));\n        $channel->basic_publish($message, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "wrong_result": "require_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPConnectionFactory;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    try {\n        $connection = new AMQPConnectionFactory('amqp://guest:guest@localhost:5672/%2F');\n        $channel = $connection->channel();\n\n        $channel->queue_declare('my_queue', false, false, false, false);\n\n        $message = new AMQPMessage($message_content);\n        $channel->basic_publish($message, 'amq.default', 'my_queue');\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Redis wrapper class in PHP that provides a simplified interface for connecting to and interacting with a Redis server, including connection management, basic operations, and error handling.\n\nClass Description: The cls_redis class is a singleton-style wrapper for PHP's Redis extension that manages Redis connections, provides common Redis operations, and handles connection errors gracefully. It supports multiple connection configurations, automatic reconnection on failure, and key prefixing.\n\nAttributes:\n\nAttribute1: protected static $redis - Redis - Singleton Redis instance (deprecated)\nAttribute2: protected static $configs - array - Stores Redis connection configurations\nAttribute3: private static $links - array - Maintains active Redis connections\nAttribute4: private static $link_name - string - Current connection name (default 'default')\nAttribute5: public static $prefix - string - Default key prefix ('phpspider')\nAttribute6: public static $error - string - Stores last error message\n\nMethods:\n\nMethod1: init() -> Redis|false - Initializes and returns a Redis connection instance\nMethod2: set(string $key, mixed $value, int $expire = 0) -> bool|null - Stores a value in Redis with optional expiration\nMethod3: get(string $key) -> mixed|null - Retrieves a value from Redis by key\nMethod4: clear_link() -> void - Closes all active Redis connections\nMethod5: _get_default_config() -> array - Retrieves default Redis configuration from global settings",
    "Canonical_solution": "class cls_redis\n{\n    protected static $redis = NULL;\n    protected static $configs = array();\n    private static $links = array();\n    private static $link_name = 'default';\n    public static $prefix = \"phpspider\";\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!extension_loaded(\"redis\"))\n        {\n            self::$error = \"The redis extension was not found\";\n            return false;\n        }\n\n        $config = self::$link_name == 'default' ? self::_get_default_config() : self::$configs[self::$link_name];\n\n        if (empty(self::$links[self::$link_name]))\n        {\n            self::$links[self::$link_name] = new Redis();\n            if (!self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']))\n            {\n                self::$error = \"Unable to connect to redis server\\nPlease check the configuration file config/inc_config.php\";\n                unset(self::$links[self::$link_name]);\n                return false;\n            }\n\n            if ($config['pass'])\n            {\n                if (!self::$links[self::$link_name]->auth($config['pass'])) \n                {\n                    self::$error = \"Redis Server authentication failed\\nPlease check the configuration file config/inc_config.php\";\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            $prefix = empty($config['prefix']) ? self::$prefix : $config['prefix'];\n            self::$links[self::$link_name]->setOption(Redis::OPT_PREFIX, $prefix . \":\");\n            self::$links[self::$link_name]->setOption(Redis::OPT_READ_TIMEOUT, -1);\n            self::$links[self::$link_name]->select($config['db']);\n        }\n\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                if ($expire > 0)\n                {\n                    return self::$links[self::$link_name]->setex($key, $expire, $value);\n                }\n                else\n                {\n                    return self::$links[self::$link_name]->set($key, $value);\n                }\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::set($key, $value, $expire);\n            }\n        }\n        return NULL;\n    }\n\n    public static function get($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->get($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::get($key);\n            }\n        }\n        return NULL;\n    }\n\n    public static function clear_link()\n    {\n        if(self::$links) \n        {\n            foreach(self::$links as $k=>$v)\n            {\n                $v->close();\n                unset(self::$links[$k]);\n            }\n        }\n    }\n\n    protected static function _get_default_config()\n    {\n        if (empty(self::$configs['default']))\n        {\n            if (!is_array($GLOBALS['config']['redis']))\n            {\n                exit('cls_redis.php _get_default_config()' . '\u6ca1\u6709redis\u914d\u7f6e');\n            }\n            self::$configs['default'] = $GLOBALS['config']['redis'];\n        }\n        return self::$configs['default'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "wrong_result": "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        $link_name = self::$link_name;\n        if (isset(self::$links[$link_name])) {\n            return self::$links[$link_name];\n        }\n\n        $config = self::_get_default_config();\n        $redis = new Redis();\n        if (!$redis->connect($config['host'], $config['port'])) {\n            self::$error = 'Failed to connect to Redis';\n            return false;\n        }\n\n        self::$links[$link_name] = $redis;\n        return $redis;\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $key = self::$prefix . $key;\n        $redis = self::init();\n        if ($redis === false) {\n            return false;\n        }\n        try {\n            $redis->setex($key, $expire, $value);\n            return true;\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function get($key) {\n        $key = self::$prefix . $key;\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function clear_link() {\n        self::$links = [];\n    }\n\n    protected static function _get_default_config() {\n        return ['host' => '127.0.0.1', 'port' => 6379];\n    }\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a PHP class that implements a Redis client connection using TCP sockets and the phpiredis extension for efficient communication with a Redis server.\n\nClass Description: PhpiredisSocketConnection is a Redis client connection class that handles TCP socket communication with a Redis server. It manages socket creation, connection, data transmission, and response parsing using the phpiredis extension for optimal performance.\n\nAttributes:\n- reader: [resource] - The phpiredis reader resource used for parsing Redis protocol responses\n- parameters: [ParametersInterface] - Connection parameters including host, port, timeout, etc.\n\nMethods:\n- __construct(ParametersInterface $parameters) -> [void] - Initializes the connection and verifies required extensions\n- __destruct() -> [void] - Cleans up resources when the object is destroyed\n- assertExtensions() -> [void] - Verifies required PHP extensions are loaded\n- createReader() -> [resource] - Creates and configures a phpiredis reader resource\n- getStatusHandler() -> [callable] - Returns the handler for status responses\n- getErrorHandler() -> [callable] - Returns the handler for error responses\n- createResource() -> [resource] - Creates and connects the socket resource\n- connectWithTimeout(resource $socket, string $address, ParametersInterface $parameters) -> [void] - Establishes connection with timeout handling\n- write(string $buffer) -> [void] - Writes data to the socket connection\n- read() -> [mixed] - Reads and parses response from the server\n- writeRequest(CommandInterface $command) -> [void] - Formats and writes a Redis command to the server",
    "Canonical_solution": "use Predis\\Command\\CommandInterface;\nuse Predis\\NotSupportedException;\nuse Predis\\Response\\Error as ErrorResponse;\nuse Predis\\Response\\ErrorInterface as ErrorResponseInterface;\nuse Predis\\Response\\Status as StatusResponse;\n\nclass PhpiredisSocketConnection extends AbstractConnection\n{\n    private $reader;\n\n    public function __construct(ParametersInterface $parameters)\n    {\n        $this->assertExtensions();\n        parent::__construct($parameters);\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct()\n    {\n        parent::__destruct();\n        phpiredis_reader_destroy($this->reader);\n    }\n\n    protected function assertExtensions()\n    {\n        if (!extension_loaded('sockets')) {\n            throw new NotSupportedException(\n                'The \"sockets\" extension is required by this connection backend.'\n            );\n        }\n\n        if (!extension_loaded('phpiredis')) {\n            throw new NotSupportedException(\n                'The \"phpiredis\" extension is required by this connection backend.'\n            );\n        }\n    }\n\n    private function createReader()\n    {\n        $reader = phpiredis_reader_create();\n        phpiredis_reader_set_status_handler($reader, $this->getStatusHandler());\n        phpiredis_reader_set_error_handler($reader, $this->getErrorHandler());\n        return $reader;\n    }\n\n    protected function getStatusHandler()\n    {\n        static $statusHandler;\n\n        if (!$statusHandler) {\n            $statusHandler = function ($payload) {\n                return StatusResponse::get($payload);\n            };\n        }\n\n        return $statusHandler;\n    }\n\n    protected function getErrorHandler()\n    {\n        static $errorHandler;\n\n        if (!$errorHandler) {\n            $errorHandler = function ($errorMessage) {\n                return new ErrorResponse($errorMessage);\n            };\n        }\n\n        return $errorHandler;\n    }\n\n    protected function createResource()\n    {\n        $parameters = $this->parameters;\n\n        if ($parameters->scheme === 'unix') {\n            $address = $parameters->path;\n            $domain = AF_UNIX;\n            $protocol = 0;\n        } else {\n            if (false === $address = self::getAddress($parameters)) {\n                $this->onConnectionError(\"Cannot resolve the address of '$parameters->host'.\");\n            }\n\n            $domain = filter_var($address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) ? AF_INET6 : AF_INET;\n            $protocol = SOL_TCP;\n        }\n\n        if (false === $socket = @socket_create($domain, SOCK_STREAM, $protocol)) {\n            $this->emitSocketError();\n        }\n\n        $this->setSocketOptions($socket, $parameters);\n        $this->connectWithTimeout($socket, $address, $parameters);\n\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters)\n    {\n        socket_set_nonblock($socket);\n\n        if (@socket_connect($socket, $address, (int) $parameters->port) === false) {\n            $error = socket_last_error();\n            if ($error != SOCKET_EINPROGRESS && $error != SOCKET_EALREADY) {\n                $this->emitSocketError();\n            }\n        }\n\n        socket_set_block($socket);\n\n        $null = null;\n        $selectable = array($socket);\n\n        $timeout = (isset($parameters->timeout) ? (float) $parameters->timeout : 5.0);\n        $timeoutSecs = floor($timeout);\n        $timeoutUSecs = ($timeout - $timeoutSecs) * 1000000;\n\n        $selected = socket_select($selectable, $selectable, $null, $timeoutSecs, $timeoutUSecs);\n\n        if ($selected === 2) {\n            $this->onConnectionError('Connection refused.', SOCKET_ECONNREFUSED);\n        }\n\n        if ($selected === 0) {\n            $this->onConnectionError('Connection timed out.', SOCKET_ETIMEDOUT);\n        }\n\n        if ($selected === false) {\n            $this->emitSocketError();\n        }\n    }\n\n    protected function write($buffer)\n    {\n        $socket = $this->getResource();\n\n        while (($length = strlen($buffer)) > 0) {\n            $written = socket_write($socket, $buffer, $length);\n\n            if ($length === $written) {\n                return;\n            }\n\n            if ($written === false) {\n                $this->onConnectionError('Error while writing bytes to the server.');\n            }\n\n            $buffer = substr($buffer, $written);\n        }\n    }\n\n    public function read()\n    {\n        $socket = $this->getResource();\n        $reader = $this->reader;\n\n        while (PHPIREDIS_READER_STATE_INCOMPLETE === $state = phpiredis_reader_get_state($reader)) {\n            if (@socket_recv($socket, $buffer, 4096, 0) === false || $buffer === '' || $buffer === null) {\n                $this->emitSocketError();\n            }\n\n            phpiredis_reader_feed($reader, $buffer);\n        }\n\n        if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n            return phpiredis_reader_get_reply($reader);\n        } else {\n            $this->onProtocolError(phpiredis_reader_get_error($reader));\n            return;\n        }\n    }\n\n    public function writeRequest(CommandInterface $command)\n    {\n        $arguments = $command->getArguments();\n        array_unshift($arguments, $command->getId());\n        $this->write(phpiredis_format_command($arguments));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->socket = $this->createResource();\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (isset($this->socket)) {\n            fclose($this->socket);\n        }\n        if (isset($this->reader)) {\n            phpiredis_reader_free($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('The phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createResource() {\n        $host = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $timeout = $this->parameters->getTimeout();\n        $context = stream_context_create([\n            'socket' => [\n                'timeout' => $timeout,\n            ],\n        ]);\n        $socket = stream_socket_client(\"tcp://$host:$port\", $errno, $errstr, $timeout, 2, $context);\n        if (!$socket) {\n            throw new Exception(\"Failed to connect to Redis: $errstr ($errno)\");\n        }\n        return $socket;\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create($this->socket);\n    }\n\n    public function getStatusHandler() {\n        return function($response) {\n            return $response;\n        };\n    }\n\n    public function getErrorHandler() {\n        return function($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function connectWithTimeout($socket, $address, $parameters) {\n        $timeout = $parameters->getTimeout();\n        stream_set_timeout($socket, $timeout);\n    }\n\n    public function write($buffer) {\n        fwrite($this->socket, $buffer);\n    }\n\n    public function read() {\n        return phpiredis_reader_read($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $writer = phpiredis_writer_create();\n        phpiredis_writer_write($writer, $command->getCommand());\n        phpiredis_writer_flush($writer);\n        $data = phpiredis_writer_get_data($writer);\n        $this->write($data);\n    }\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Implement a Radius class in PHP that handles RADIUS protocol communication for authentication and accounting purposes using UDP sockets.\n\nClass Description: The Radius class provides functionality to communicate with a RADIUS server for authentication (Access-Request) and accounting operations. It handles packet construction, socket communication, and response parsing according to RADIUS protocol standards.\n\nAttributes:\n\n_ip_radius_server: [string] - IP address of the RADIUS server\n_shared_secret: [string] - Shared secret for communication with RADIUS server\n_radius_suffix: [string] - Suffix to append to usernames\n_udp_timeout: [int] - Timeout for UDP operations in seconds\n_authentication_port: [int] - Port for authentication requests (default 1812)\n_accounting_port: [int] - Port for accounting requests (default 1813)\n_nas_ip_address: [string] - NAS IP address to send in requests\n_nas_port: [int] - NAS port to send in requests\n_encrypted_password: [string] - Encrypted password for authentication\n_user_ip_address: [string] - User's IP address\n_request_authenticator: [string] - Request authenticator value\n_response_authenticator: [string] - Response authenticator value\n_username: [string] - Username for authentication\n_password: [string] - Password for authentication\n_identifier_to_send: [int] - Packet identifier to send\n_identifier_received: [int] - Received packet identifier\n_radius_packet_to_send: [int] - RADIUS packet code to send\n_radius_packet_received: [int] - Received RADIUS packet code\n_attributes_to_send: [array] - Attributes to include in outgoing packets\n_attributes_received: [array] - Attributes received from server\n_socket_to_server: [resource] - Socket connection to server\n_debug_mode: [bool] - Debug mode flag\ndebug_text: [array] - Debug messages\n_attributes_info: [array] - RADIUS attribute information\n_radius_packet_info: [array] - RADIUS packet type information\n_last_error_code: [int] - Last error code\n_last_error_message: [string] - Last error message\n\nMethods:\n\n__construct: [function]($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) -> [void] - Initializes the Radius object with server details and default values\n\nAccessRequest: [function]($username = '', $password = '', $udp_timeout = 0, $state = NULL) -> [bool] - Sends an Access-Request to the RADIUS server and returns true if authentication is successful (Access-Accept received)\n\nSetIpRadiusServer: [function]($ip_radius_server) -> [void] - Sets the RADIUS server IP address\n\nSetSharedSecret: [function]($shared_secret) -> [void] - Sets the shared secret for RADIUS communication\n\nSetAuthenticationPort: [function]($authentication_port) -> [void] - Sets the authentication port\n\nSetAccountingPort: [function]($accounting_port) -> [void] - Sets the accounting port\n\nSetRadiusSuffix: [function]($radius_suffix) -> [void] - Sets the username suffix\n\nSetUdpTimeout: [function]($udp_timeout) -> [void] - Sets the UDP timeout value\n\nSetUsername: [function]($username = '') -> [void] - Sets the username for authentication\n\nSetPassword: [function]($password = '') -> [void] - Sets the password for authentication\n\nSetNasIpAddress: [function]($nas_ip_address = '') -> [void] - Sets the NAS IP address\n\nSetNasPort: [function]($nas_port = 0) -> [void] - Sets the NAS port\n\nSetPacketCodeToSend: [function]($packet_code) -> [void] - Sets the RADIUS packet code to send\n\nSetAttribute: [function]($attribute_type, $attribute_value) -> [void] - Adds an attribute to the outgoing packet\n\nGetNextIdentifier: [function]() -> [int] - Returns the next packet identifier\n\nGenerateRequestAuthenticator: [function]() -> [void] - Generates a new request authenticator\n\nDecodeAttribute: [function]($attribute_raw_value, $attribute_type) -> [mixed] - Decodes a received attribute value\n\nClearLastError: [function]() -> [void] - Clears the last error information\n\nClearDataToSend: [function]() -> [void] - Clears all data to be sent\n\nClearDataReceived: [function]() -> [void] - Clears all received data",
    "Canonical_solution": "class Radius\n{\n    var $_ip_radius_server;\n    var $_shared_secret;\n    var $_radius_suffix;\n    var $_udp_timeout;\n    var $_authentication_port;\n    var $_accounting_port;\n    var $_nas_ip_address;\n    var $_nas_port;\n    var $_encrypted_password;\n    var $_user_ip_address;\n    var $_request_authenticator;\n    var $_response_authenticator;\n    var $_username;\n    var $_password;\n    var $_identifier_to_send;\n    var $_identifier_received;\n    var $_radius_packet_to_send;\n    var $_radius_packet_received;\n    var $_attributes_to_send;\n    var $_attributes_received;\n    var $_socket_to_server;\n    var $_debug_mode;\n    var $debug_text = [];\n    var $_attributes_info;\n    var $_radius_packet_info;\n    var $_last_error_code;\n    var $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813)\n    {\n        $this->_radius_packet_info[1] = 'Access-Request';\n        $this->_radius_packet_info[2] = 'Access-Accept';\n        $this->_radius_packet_info[3] = 'Access-Reject';\n        $this->_radius_packet_info[4] = 'Accounting-Request';\n        $this->_radius_packet_info[5] = 'Accounting-Response';\n        $this->_radius_packet_info[11] = 'Access-Challenge';\n        $this->_radius_packet_info[12] = 'Status-Server (experimental)';\n        $this->_radius_packet_info[13] = 'Status-Client (experimental)';\n        $this->_radius_packet_info[255] = 'Reserved';\n\n        $this->_identifier_to_send = 0;\n        $this->_user_ip_address = (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '0.0.0.0');\n\n        $this->GenerateRequestAuthenticator();\n        $this->SetIpRadiusServer($ip_radius_server);\n        $this->SetSharedSecret($shared_secret);\n        $this->SetAuthenticationPort($authentication_port);\n        $this->SetAccountingPort($accounting_port);\n        $this->SetRadiusSuffix($radius_suffix);\n        $this->SetUdpTimeout($udp_timeout);\n        $this->SetUsername();\n        $this->SetPassword();\n        $this->SetNasIpAddress();\n        $this->SetNasPort();\n\n        $this->ClearLastError();\n        $this->ClearDataToSend();\n        $this->ClearDataReceived();\n    }\n\n    function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL)\n    {\n        $this->ClearDataReceived();\n        $this->ClearLastError();\n\n        $this->SetPacketCodeToSend(1);\n\n        if (0 < strlen($username))\n        {\n            $this->SetUsername($username);\n        }\n\n        if (0 < strlen($password))\n        {\n            $this->SetPassword($password);\n        }\n\n        if ($state !== NULL)\n        {\n            $this->SetAttribute(24, $state);\n        }\n        else\n        {\n            $this->SetAttribute(6, 1);\n        }\n\n        if (intval($udp_timeout) > 0)\n        {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n\n        $attributes_content = '';\n        $attribute_count1 = count((array)$this->_attributes_to_send);\n        for ($attributes_loop = 0; $attributes_loop < $attribute_count1; $attributes_loop++)\n        {\n            $attributes_content .= $this->_attributes_to_send[$attributes_loop];\n        }\n\n        $packet_length  = 4;\n        $packet_length += strlen($this->_request_authenticator);\n        $packet_length += strlen($attributes_content);\n\n        $packet_data  = chr($this->_radius_packet_to_send);\n        $packet_data .= chr($this->GetNextIdentifier());\n        $packet_data .= chr(intval($packet_length / 256));\n        $packet_data .= chr(intval($packet_length % 256));\n        $packet_data .= $this->_request_authenticator;\n        $packet_data .= $attributes_content;\n\n        $_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, 17);\n\n        if ($_socket_to_server === FALSE)\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_connect($_socket_to_server, $this->_ip_radius_server, $this->_authentication_port))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_write($_socket_to_server, $packet_data, $packet_length))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        else\n        {\n            $read_socket_array   = array($_socket_to_server);\n            $write_socket_array  = NULL;\n            $except_socket_array = NULL;\n\n            $received_packet = chr(0);\n\n            if (!(FALSE === socket_select($read_socket_array, $write_socket_array, $except_socket_array, $this->_udp_timeout)))\n            {\n                if (in_array($_socket_to_server, $read_socket_array))\n                {\n                    if (FALSE === ($received_packet = @socket_read($_socket_to_server, 1024)))\n                    {\n                        $received_packet = chr(0);\n                        $this->_last_error_code    = socket_last_error();\n                        $this->_last_error_message = socket_strerror($this->_last_error_code);\n                    }\n                    else\n                    {\n                        socket_close($_socket_to_server);\n                    }\n                }\n            }\n            else\n            {\n                socket_close($_socket_to_server);\n            }\n        }\n\n        $this->_radius_packet_received = intval(ord(substr($received_packet, 0, 1)));\n\n        if ($this->_radius_packet_received > 0)\n        {\n            $this->_identifier_received = intval(ord(substr($received_packet, 1, 1)));\n            $packet_length = (intval(ord(substr($received_packet, 2, 1))) * 256) + (intval(ord(substr($received_packet, 3, 1)));\n            $this->_response_authenticator = substr($received_packet, 4, 16);\n            $attributes_content = substr($received_packet, 20, ($packet_length - 4 - 16));\n            while (strlen($attributes_content) > 2)\n            {\n                $attribute_type = intval(ord(substr($attributes_content, 0, 1)));\n                $attribute_length = intval(ord(substr($attributes_content, 1, 1)));\n                $attribute_raw_value = substr($attributes_content, 2, $attribute_length - 2);\n                $attributes_content = substr($attributes_content, $attribute_length);\n\n                $attribute_value = $this->DecodeAttribute($attribute_raw_value, $attribute_type);\n\n                $this->_attributes_received[] = array($attribute_type, $attribute_value);\n            }\n        }\n\n        return (2 == ($this->_radius_packet_received));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "<?php\nclass Radius {\n    public $ip_radius_server;\n    public $shared_secret;\n    public $radius_suffix;\n    public $udp_timeout;\n    public $authentication_port;\n    public $accounting_port;\n    public $nas_ip_address;\n    public $nas_port;\n    public $encrypted_password;\n    public $user_ip_address;\n    public $request_authenticator;\n    public $response_authenticator;\n    public $username;\n    public $password;\n    public $identifier_to_send;\n    public $identifier_received;\n    public $radius_packet_to_send;\n    public $radius_packet_received;\n    public $attributes_to_send;\n    public $attributes_received;\n    public $socket_to_server;\n    public $debug_mode;\n    public $debug_text;\n    public $attributes_info;\n    public $radius_packet_info;\n    public $last_error_code;\n    public $last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->ip_radius_server = $ip_radius_server;\n        $this->shared_secret = $shared_secret;\n        $this->radius_suffix = $radius_suffix;\n        $this->udp_timeout = $udp_timeout;\n        $this->authentication_port = $authentication_port;\n        $this->accounting_port = $accounting_port;\n        $this->debug_mode = false;\n        $this->debug_text = [];\n        $this->last_error_code = 0;\n        $this->last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        $identifier = $this->GetNextIdentifier();\n        $code = 1;\n        $attributes = [\n            ['type' => 1, 'value' => $this->username],\n            ['type' => 12, 'value' => $this->password],\n            ['type' => 4, 'value' => $this->nas_ip_address],\n            ['type' => 5, 'value' => $this->nas_port]\n        ];\n        foreach ($this->attributes_to_send as $attr) {\n            $attributes[] = $attr;\n        }\n        $message = pack('C', $code) . pack('n', $identifier);\n        foreach ($attributes as $attr) {\n            $message .= pack('n', $attr['type']) . pack('n', strlen($attr['value'])) . $attr['value'];\n        }\n        $authenticator = hash_hmac('md5', $message, $this->shared_secret, true);\n        $attributes[] = ['type' => 13, 'value' => $authenticator];\n        $packet = pack('C', $code) . pack('n', $identifier);\n        $attributes_length = 0;\n        foreach ($attributes as $attr) {\n            $attributes_length += 2 + 2 + strlen($attr['value']);\n        }\n        $length = 4 + $attributes_length;\n        $packet .= pack('N', $length);\n        foreach ($attributes as $attr) {\n            $packet .= pack('n', $attr['type']) . pack('n', strlen($attr['value'])) . $attr['value'];\n        }\n        $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$socket) {\n            $this->last_error_code = socket_last_error();\n            $this->last_error_message = socket_strerror(socket_last_error());\n            return false;\n        }\n        if (!socket_bind($socket, 0, 0)) {\n            $this->last_error_code = socket_last_error();\n            $this->last_error_message = socket_strerror(socket_last_error());\n            socket_close($socket);\n            return false;\n        }\n        $server_ip = $this->ip_radius_server;\n        $server_port = $this->authentication_port;\n        $result = socket_sendto($socket, $packet, strlen($packet), 0, $server_ip, $server_port);\n        if ($result === false) {\n            $this->last_error_code = socket_last_error();\n            $this->last_error_message = socket_strerror(socket_last_error());\n            socket_close($socket);\n            return false;\n        }\n        $recv_buffer = '';\n        $timeout = $udp_timeout;\n        $time_start = microtime(true);\n        while (microtime(true) - $time_start < $timeout) {\n            $bytes = socket_recvfrom($socket, $recv_buffer, 65507, 0, $remote_ip, $remote_port);\n            if ($bytes === false) {\n                $this->last_error_code = socket_last_error();\n                $this->last_error_message = socket_strerror(socket_last_error());\n                break;\n            }\n            if ($bytes > 0) {\n                break;\n            }\n        }\n        socket_close($socket);\n        if ($bytes === false) {\n            return false;\n        }\n        $code = ord($recv_buffer[0]);\n        $identifier = unpack('n', substr($recv_buffer, 1, 2))[1];\n        $length = unpack('N', substr($recv_buffer, 3, 4))[1];\n        $attributes_data = substr($recv_buffer, 7, $length);\n        $pos = 0;\n        $attributes_received = [];\n        while ($pos < $length) {\n            $type = unpack('n', substr($attributes_data, $pos, 2))[1];\n            $length_attr = unpack('n', substr($attributes_data, $pos + 2, 2))[1];\n            $value = substr($attributes_data, $pos + 4, $length_attr);\n            $decoded_value = $this->DecodeAttribute($value, $type);\n            $attributes_received[] = ['type' => $type, 'value' => $decoded_value];\n            $pos += 4 + $length_attr;\n        }\n        if ($code == 2) {\n            $this->attributes_received = $attributes_received;\n            return true;\n        } else {\n            $this->last_error_code = 1;\n            $this->last_error_message = \"Authentication failed: received code $code\";\n            return false;\n        }\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->password = $password;\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->attributes_to_send[] = ['type' => $attribute_type, 'value' => $attribute_value];\n    }\n\n    public function GetNextIdentifier() {\n        static $identifier = 0;\n        return $identifier++;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $message = '';\n        $this->request_authenticator = hash_hmac('md5', $message, $this->shared_secret, true);\n    }\n\n    public function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1:\n                return substr($attribute_raw_value, 0, strlen($attribute_raw_value));\n            case 12:\n                return substr($attribute_raw_value, 0, strlen($attribute_raw_value));\n            case 4:\n                return long2ip(pack('N', substr($attribute_raw_value, 0, 4)));\n            case 5:\n                return unpack('n', substr($attribute_raw_value, 0, 2))[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->last_error_code = 0;\n        $this->last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->attributes_received = [];\n    }\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Symfony's HTTP client components to handle HTTP requests and responses.\n\nClass Description: The HttpClientKernel class is an implementation of HttpKernelInterface that provides HTTP client capabilities using Symfony's HTTP client components. It handles HTTP requests by sending them to a remote server and returning the response, supporting various request methods, headers, cookies, and body content (including form data and file uploads).\n\nAttributes:\n- client: [HttpClientInterface] - The Symfony HTTP client instance used to send requests\n\nMethods:\n- __construct(?HttpClientInterface $client = null) -> [void] - Initializes the HTTP client. If no client is provided, creates a default HttpClient instance. Throws an exception if the HttpClient component is not installed.\n- handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true) -> [Response] - Processes an HTTP request by sending it to the target server and returns the response. Handles headers, cookies, and request body preparation.\n- getBody(Request $request) -> [?AbstractPart] - Prepares the request body content. Returns null for GET/HEAD requests, a TextPart for raw content, or a FormDataPart for form data including file uploads. Throws an exception if the Mime component is not installed when needed.\n- getHeaders(Request $request) -> [array] - Extracts and formats headers from the request object, including cookies, into an array suitable for the HTTP client.",
    "Canonical_solution": "use Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client && !class_exists(HttpClient::class)) {\n            throw new \\LogicException(sprintf('You cannot use \"%s\" as the HttpClient component is not installed. Try running \"composer require symfony/http-client\".', __CLASS__));\n        }\n\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $headers = $this->getHeaders($request);\n        $body = '';\n        if (null !== $part = $this->getBody($request)) {\n            $headers = array_merge($headers, $part->getPreparedHeaders()->toArray());\n            $body = $part->bodyToIterable();\n        }\n        $response = $this->client->request($request->getMethod(), $request->getUri(), [\n            'headers' => $headers,\n            'body' => $body,\n        ] + $request->attributes->get('http_client_options', []));\n\n        $response = new Response($response->getContent(!$catch), $response->getStatusCode(), $response->getHeaders(!$catch));\n\n        $response->headers->remove('X-Body-File');\n        $response->headers->remove('X-Body-Eval');\n        $response->headers->remove('X-Content-Digest');\n\n        $response->headers = new class($response->headers->all()) extends ResponseHeaderBag {\n            protected function computeCacheControlValue(): string\n            {\n                return $this->getCacheControlHeader();\n            }\n        };\n\n        return $response;\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        if (!class_exists(AbstractPart::class)) {\n            throw new \\LogicException('You cannot pass non-empty bodies as the Mime component is not installed. Try running \"composer require symfony/mime\".');\n        }\n\n        if ($content = $request->getContent()) {\n            return new TextPart($content, 'utf-8', 'plain', '8bit');\n        }\n\n        $fields = $request->request->all();\n        foreach ($request->files->all() as $name => $file) {\n            $fields[$name] = DataPart::fromPath($file->getPathname(), $file->getClientOriginalName(), $file->getClientMimeType());\n        }\n\n        return new FormDataPart($fields);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = [];\n        foreach ($request->headers as $key => $value) {\n            $headers[$key] = $value;\n        }\n        $cookies = [];\n        foreach ($request->cookies->all() as $name => $value) {\n            $cookies[] = $name.'='.$value;\n        }\n        if ($cookies) {\n            $headers['cookie'] = implode('; ', $cookies);\n        }\n\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 134,
    "wrong_result": "use Symfony\\Component\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Stream\\AbstractPart;\nuse Symfony\\Component\\HttpFoundation\\Stream\\TextPart;\nuse Symfony\\Component\\HttpFoundation\\Stream\\FormDataPart;\nuse Symfony\\Component\\Mime\\Header;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if ($client === null) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('The Symfony HTTP client component is not installed.');\n            }\n            $this->client = new HttpClient();\n        } else {\n            $this->client = $client;\n        }\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $headers = $this->getHeaders($request);\n        $body = $this->getBody($request);\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            [\n                'headers' => $headers,\n                'body' => $body,\n            ]\n        );\n\n        return new Response($response->getStatusCode(), $response->getHeaders(), $response->getContent());\n    }\n\n    public function getBody(Request $request): ?AbstractPart\n    {\n        if ($request->isGet() || $request->isHead()) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        $contentType = $request->getContentType();\n\n        if ($contentType === 'multipart/form-data') {\n            if (!class_exists(Header::class)) {\n                throw new \\RuntimeException('The Symfony Mime component is not installed.');\n            }\n            return new FormDataPart($content);\n        } else {\n            return new TextPart($content);\n        }\n    }\n\n    public function getHeaders(Request $request): array\n    {\n        $headers = [];\n        foreach ($request->headers->all() as $name => $values) {\n            foreach ($values as $value) {\n                $headers[$name] = $value;\n            }\n        }\n\n        $cookies = $request->cookies->all();\n        if (!empty($cookies)) {\n            $cookieString = '';\n            foreach ($cookies as $name => $value) {\n                $cookieString .= \"$name=$value;\";\n            }\n            $headers['Cookie'] = trim($cookieString, ';');\n        }\n\n        return $headers;\n    }\n}"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Implement a UDP scraper class for interacting with BitTorrent trackers to scrape torrent statistics using UDP protocol.\n\nClass Description: UdpScraper is a class that handles communication with BitTorrent trackers via UDP protocol to retrieve scrape information (seeders, leechers, downloads) for given torrent info hashes. It manages socket connections, transaction IDs, and packet formatting according to the UDP tracker protocol.\n\nAttributes:\n- currentConnectionId: [string] - The connection ID received from the tracker after initial connection\n- transactionId: [int] - The current transaction ID used for request/response tracking\n- socket: [resource|null] - The UDP socket resource for communication\n- timeout: [int] - Socket timeout in seconds for send/receive operations\n\nMethods:\n- scrape([Tracker $tracker, array $hashes]) -> [array] - Main method to scrape multiple torrent hashes by splitting them into chunks\n- scrapeChunk([Tracker $tracker, array $hashes]) -> [array] - Scrapes a chunk of torrent hashes (max 74 at a time)\n- initSocket() -> [resource] - Initializes and returns a UDP socket\n- connect([string $domain, int $port]) -> [void] - Connects the socket to the tracker\n- generateTransactionId() -> [void] - Generates a random transaction ID\n- startTransaction() -> [void] - Initiates connection with the tracker and establishes connection ID\n- scrapeHashes([array $hashes]) -> [array] - Sends scrape request for given hashes and processes response\n- request([string $packet, int $readLength]) -> [string] - Sends packet and reads response with timeout\n- closeSocket() -> [void] - Closes the socket and resets connection state\n- checkError([string $response]) -> [void] - Checks for and handles error responses from tracker",
    "Canonical_solution": "namespace common\\modules\\torrent_scraper\\models;\n\nuse common\\models\\ScraperException;\n\nclass UdpScraper extends BaseScraper\n{\n    const ACTION_CONNECT = 0;\n    const ACTION_ANNOUNCE = 1;\n    const ACTION_SCRAPE = 2;\n    const ACTION_ERROR = 3;\n\n    const CONNECTION_ID = \"\\x00\\x00\\x04\\x17\\x27\\x10\\x19\\x80\";\n\n    protected $currentConnectionId = null;\n    protected $transactionId = null;\n    protected $socket = null;\n    protected $timeout = 15;\n\n    public function scrape(Tracker $tracker, array $hashes)\n    {\n        $chunks = array_chunk($hashes, 74);\n        $result = [];\n        foreach ($chunks as $chunk) {\n            $result = array_merge($result, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $result;\n    }\n\n    public function scrapeChunk(Tracker $tracker, $hashes)\n    {\n        $this->initSocket();\n        $this->connect($tracker->host, $tracker->port);\n        $this->startTransaction();\n        $torrents = $this->scrapeHashes($hashes);\n        $this->closeSocket();\n        return $torrents;\n    }\n\n    protected function initSocket()\n    {\n        if ($this->socket === null) {\n            $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n            if ($socket === false) {\n                throw new UdpScraperException(socket_strerror(socket_last_error()));\n            }\n            $this->socket = $socket;\n        }\n        return $this->socket;\n    }\n\n    protected function connect($domain, $port)\n    {\n        if (socket_connect($this->socket, $domain, $port) === false) {\n            throw new UdpScraperException(socket_strerror(socket_last_error($this->socket)));\n        }\n    }\n\n    protected function generateTransactionId()\n    {\n        $this->transactionId = mt_rand(0, 65535);\n    }\n\n    protected function startTransaction()\n    {\n        $this->generateTransactionId();\n        $packet = static::CONNECTION_ID . pack('N', static::ACTION_CONNECT) . pack('N', $this->transactionId);\n        $res = $this->request($packet, 16);\n        if (strlen($res) < 1) {\n            throw new UdpScraperException('No connection response.');\n        }\n        if (strlen($res) < 16) {\n            throw new UdpScraperException('Too short connection response.');\n        }\n        $resUnpacked = unpack(\"Naction/Ntransid\", $res);\n\n        if ($resUnpacked['action'] != static::ACTION_CONNECT || $resUnpacked['transid'] != $this->transactionId) {\n            throw new UdpScraperException('Invalid connection response.');\n        }\n\n        $this->currentConnectionId = substr($res, 8, 8);\n    }\n\n    protected function scrapeHashes($hashes)\n    {\n        $hashString = '';\n        foreach ($hashes as $hash) {\n            $hashString .= pack('H*', $hash);\n        }\n\n        $packet = $this->currentConnectionId . pack(\"N\", static::ACTION_SCRAPE) . pack(\"N\", $this->transactionId) . $hashString;\n\n        $readLength = 8 + (12 * count($hashes));\n\n        $res = $this->request($packet, $readLength);\n\n        if (strlen($res) < 1) {\n            throw new UdpScraperException('No scrape response.');\n        }\n        if (strlen($res) < 8) {\n            throw new UdpScraperException('Too short scrape response.');\n        }\n\n        $resUnpacked = unpack(\"Naction/Ntransid\", $res);\n\n        if ($resUnpacked['action'] == static::ACTION_ERROR) {\n            $this->checkError($res);\n        }\n\n        if (strlen($res) < $readLength) {\n            throw new UdpScraperException('Too short scrape response.');\n        }\n\n        $torrents = [];\n        $index = 8;\n        foreach ($hashes as $hash) {\n            $resUnpacked = unpack(\"Ncomplete/Ndownloaded/Nincomplete\", substr($res, $index, 12));\n            $torrents[$hash] = $resUnpacked;\n            $index = $index + 12;\n        }\n        return $torrents;\n    }\n\n    protected function request($packet, $readLength)\n    {\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n        socket_set_option($this->socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n\n        if (socket_write($this->socket, $packet, strlen($packet)) === false) {\n            throw new UdpScraperException(socket_strerror(socket_last_error($this->socket)));\n        }\n\n        $res = socket_read($this->socket, $readLength, PHP_BINARY_READ);\n        return $res;\n    }\n\n    protected function closeSocket()\n    {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->transactionId = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    protected function checkError($response)\n    {\n        $unpacked = unpack(\"Naction/Ntransid/H*error\", $response);\n        throw new UdpScraperException($unpacked['error']);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "wrong_result": "<?php\nclass UdpScraper {\n    public $currentConnectionId;\n    public $transactionId;\n    public $socket = null;\n    public $timeout = 5;\n\n    public function __construct() {\n        $this->generateTransactionId();\n    }\n\n    public function scrape($tracker, $hashes) {\n        $chunks = array_chunk($hashes, 74);\n        $results = [];\n        foreach ($chunks as $chunk) {\n            $results += $this->scrapeChunk($tracker, $chunk);\n        }\n        return $results;\n    }\n\n    public function scrapeChunk($tracker, $hashes) {\n        $this->startTransaction();\n        $response = $this->scrapeHashes($hashes);\n        $this->closeSocket();\n        return $response;\n    }\n\n    public function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->socket === false) {\n            throw new Exception(\"Failed to create socket: \" . socket_strerror(socket_last_error()));\n        }\n        return $this->socket;\n    }\n\n    public function connect($domain, $port) {\n        if (!socket_set_option($this->socket, SOL_SOCKET, SO_REUSEADDR, 1)) {\n            throw new Exception(\"Failed to set socket options: \" . socket_strerror(socket_last_error($this->socket)));\n        }\n        if (!socket_bind($this->socket, $domain, $port)) {\n            throw new Exception(\"Failed to bind socket: \" . socket_strerror(socket_last_error($this->socket)));\n        }\n    }\n\n    public function generateTransactionId() {\n        $this->transactionId = mt_rand(0, 0xFFFFFFFF);\n    }\n\n    public function startTransaction() {\n        if (!$this->socket) {\n            $this->socket = $this->initSocket();\n        }\n        $this->connect('127.0.0.1', 80);\n        $this->generateTransactionId();\n    }\n\n    public function scrapeHashes($hashes) {\n        $packet = pack('N', $this->transactionId);\n        $packet .= pack('N', $this->currentConnectionId);\n        $packet .= pack('N', count($hashes));\n        foreach ($hashes as $hash) {\n            $packet .= pack('H*', $hash);\n        }\n        $response = $this->request($packet, 4096);\n        $this->checkError($response);\n        return $this->parseResponse($response);\n    }\n\n    public function request($packet, $readLength) {\n        if (!socket_sendto($this->socket, $packet, 0, SocketConstants::AF_INET, $this->currentConnectionId, 80)) {\n            throw new Exception(\"Failed to send packet: \" . socket_strerror(socket_last_error($this->socket)));\n        }\n        $response = '';\n        $recv = socket_recv($this->socket, $response, $readLength, 0);\n        if ($recv === false) {\n            throw new Exception(\"Failed to receive response: \" . socket_strerror(socket_last_error($this->socket)));\n        }\n        return $response;\n    }\n\n    public function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = '';\n            $this->transactionId = 0;\n        }\n    }\n\n    public function checkError($response) {\n        $data = unpack('N*', $response);\n        if ($data[1] < 0) {\n            throw new Exception(\"Tracker error: \" . $data[1]);\n        }\n    }\n\n    private function parseResponse($response) {\n        $data = unpack('N*', $response);\n        $results = [];\n        $index = 2;\n        for ($i = 0; $i < $data[1]; $i++) {\n            $seeders = $data[$index++];\n            $leechers = $data[$index++];\n            $downloaded = $data[$index++];\n            $results[] = [\n                'seeders' => $seeders,\n                'leechers' => $leechers,\n                'downloaded' => $downloaded\n            ];\n        }\n        return $results;\n    }\n}\n?>"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a MySQL proxy class that handles communication between a client and MySQL server using Swoole's coroutine client for TCP/UDP communication, implementing authentication and packet handling.\n\nClass Description: MysqlProxy - A class that manages MySQL protocol communication between client and server, handling connection establishment, authentication, packet processing, and error handling.\n\nAttributes:\n\nisDuplex: [bool] - Indicates whether duplex communication is supported by Swoole version\nserver: [swoole_server] - Swoole server instance\nserverFd: [int] - File descriptor of the server connection\ncharset: [string] - Character set for MySQL communication\naccount: [array] - MySQL account credentials\nauth: [bool] - Authentication status flag\nchan: [Swoole\\Coroutine\\Channel] - Coroutine channel for communication\nserverPublicKey: [string] - Server's public key for authentication\nsalt: [array] - Salt used for password encryption\nconnected: [bool] - Connection status flag\ntimeout: [float] - Connection timeout value\nmysqlClient: [Swoole\\Coroutine\\Channel] - Channel for MySQL client communication\nmysqlServer: [HandshakePacket] - Server handshake information\nclient: [Swoole\\Coroutine\\Client] - Coroutine client instance\n\nMethods:\n\n__construct: [function](swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) -> [void] - Initializes the proxy with server, file descriptor and channel\nconnect: [function](string $host, int $port, float $timeout = 0.1, int $tryStep = 0) -> [Client|bool] - Establishes connection to MySQL server with retry logic\nonClientReceive: [function](Swoole\\Coroutine\\Client $cli, string $data) -> [void] - Handles incoming data from MySQL server\nprocessAuth: [function](string $pluginName) -> [array] - Processes authentication based on plugin type\nsend: [function](...$data) -> [bool] - Sends data to MySQL server\nrecv: [function](&$remain) -> [mixed] - Receives data from MySQL server\nonClientClose: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client connection closure\nonClientError: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client errors",
    "Canonical_solution": "use Swoole\\Coroutine\\Client;\nuse SMProxy\\MysqlPacket\\AuthPacket;\nuse SMProxy\\MysqlPacket\\BinaryPacket;\nuse SMProxy\\MysqlPacket\\ErrorPacket;\nuse SMProxy\\MysqlPacket\\HandshakePacket;\nuse SMProxy\\MysqlPacket\\MySQLMessage;\nuse SMProxy\\MysqlPacket\\OkPacket;\nuse SMProxy\\MysqlPacket\\Util\\Capabilities;\nuse SMProxy\\MysqlPacket\\Util\\CharsetUtil;\nuse SMProxy\\MysqlPacket\\Util\\SecurityUtil;\nuse SMProxy\\MysqlPool\\MySQLException;\nuse SMProxy\\MysqlPool\\MySQLPool;\n\nclass MysqlProxy\n{\n    private $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth = false;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected = false;\n    public $timeout = 0.1;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(\\swoole_server $server, int $fd, \\Swoole\\Coroutine\\Channel $chan)\n    {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->client = new Client(CONFIG['server']['swoole_client_sock_setting']['sock_type'] ?? SWOOLE_SOCK_TCP);\n        $this->client->set(CONFIG['server']['swoole_client_setting'] ?? []);\n        $this->client->set(packageLengthSetting());\n        $this->isDuplex = version_compare(SWOOLE_VERSION, '4.2.13', '>=');\n        if (!$this->isDuplex) {\n            $this->mysqlClient = new Channel(1);\n        }\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0)\n    {\n        $this->timeout = $timeout;\n        if (!$this->client->connect($host, $port, $timeout)) {\n            if ($tryStep < 3) {\n                $this->client->close();\n                return $this->connect($host, $port, $timeout, ++$tryStep);\n            } else {\n                $this->onClientError($this->client);\n                return false;\n            }\n        } else {\n            if (!$this->isDuplex) {\n                $this->mysqlClient->push($this->client);\n            }\n            self::go(function () {\n                $remain = '';\n                while (true) {\n                    $data = $this->recv($remain);\n                    if ($data === '' || $data === false) {\n                        break;\n                    }\n                }\n            });\n            return $this->client;\n        }\n    }\n\n    public function onClientReceive(\\Swoole\\Coroutine\\Client $cli, string $data)\n    {\n        self::go(function () use ($cli, $data) {\n            $fd = $this->serverFd;\n            $binaryPacket = new BinaryPacket();\n            $binaryPacket->data = getBytes($data);\n            $binaryPacket->packetLength = $binaryPacket->calcPacketSize();\n            if (isset($binaryPacket->data[4])) {\n                $send = true;\n                if ($binaryPacket->data[4] == ErrorPacket::$FIELD_COUNT) {\n                    $errorPacket = new ErrorPacket();\n                    $errorPacket->read($binaryPacket);\n                    $data = getString($errorPacket->write());\n                } elseif (!$this->connected) {\n                    if ($binaryPacket->data[4] == OkPacket::$FIELD_COUNT) {\n                        $send = false;\n                        $this->connected = true;\n                        $this->chan->push($this);\n                    } elseif ($binaryPacket->data[4] == 0x01) {\n                        if ($binaryPacket->packetLength == 6) {\n                            if ($binaryPacket->data[$binaryPacket->packetLength - 1] == 4) {\n                                $data = getString(array_merge(getMysqlPackSize(1), [3, 2]));\n                                $this->send($data);\n                            }\n                        } else {\n                            $this->serverPublicKey = substr($data, 5, strlen($data) - 2);\n                            $encryptData = SecurityUtil::sha2RsaEncrypt($this->account['password'], $this->salt, $this->serverPublicKey);\n                            $data = getString(array_merge(getMysqlPackSize(strlen($encryptData)), [5])) . $encryptData;\n                            $this->send($data);\n                        }\n                        $send = false;\n                    } elseif ($binaryPacket->data[4] == 0xfe) {\n                        $mm = new MySQLMessage($binaryPacket->data);\n                        $mm->move(5);\n                        $pluginName = $mm->readStringWithNull();\n                        $this->salt = $mm->readBytesWithNull();\n                        $password = $this->processAuth($pluginName ?: 'mysql_native_password');\n                        $this->send(getString(array_merge(getMysqlPackSize(count($password)), [3], $password)));\n                        $send = false;\n                    } elseif (!$this->auth) {\n                        $handshakePacket = (new HandshakePacket())->read($binaryPacket);\n                        $this->mysqlServer = $handshakePacket;\n                        $this->salt = array_merge($handshakePacket->seed, $handshakePacket->restOfScrambleBuff);\n                        $password = $this->processAuth($handshakePacket->pluginName);\n                        $clientFlag = Capabilities::CLIENT_CAPABILITIES;\n                        $authPacket = new AuthPacket();\n                        $authPacket->pluginName = $handshakePacket->pluginName;\n                        $authPacket->packetId = 1;\n                        if (isset($this->database) && $this->database) {\n                            $authPacket->database = $this->database;\n                        } else {\n                            $authPacket->database = 0;\n                        }\n                        if ($authPacket->database) {\n                            $clientFlag |= Capabilities::CLIENT_CONNECT_WITH_DB;\n                        }\n                        if (version_compare($handshakePacket->serverVersion, '5.0', '>=')) {\n                            $clientFlag |= Capabilities::CLIENT_MULTI_RESULTS;\n                        }\n                        $authPacket->clientFlags = $clientFlag;\n                        $authPacket->serverCapabilities = $handshakePacket->serverCapabilities;\n                        $authPacket->maxPacketSize =\n                            CONFIG['server']['swoole_client_setting']['package_max_length'] ?? 16777215;\n                        $authPacket->charsetIndex = CharsetUtil::getIndex($this->charset ?? 'utf8mb4');\n                        $authPacket->user = $this->account['user'];\n                        $authPacket->password = $password;\n                        $this->auth = true;\n                        $this->send(getString($authPacket->write()));\n                        $send = false;\n                    }\n                }\n                if ($send && $this->server->exist($fd)) {\n                    $this->server->send($fd, $data);\n                }\n            }\n        });\n    }\n\n    public function processAuth(string $pluginName)\n    {\n        switch ($pluginName) {\n            case 'mysql_native_password':\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n            case 'caching_sha2_password':\n                $password = SecurityUtil::scrambleSha256($this->account['password'], $this->salt);\n                break;\n            case 'sha256_password':\n                throw new MySQLException('Sha256_password plugin is not supported yet');\n                break;\n            case 'mysql_old_password':\n                throw new MySQLException('mysql_old_password plugin is not supported yet');\n                break;\n            case 'mysql_clear_password':\n                $password = array_merge(getBytes($this->account['password']), [0]);\n                break;\n            default:\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n        }\n        return $password;\n    }\n\n    public function send(...$data)\n    {\n        if ($this->isDuplex) {\n            if ($this->client->isConnected()) {\n                return $this->client->send(...$data);\n            } else {\n                return false;\n            }\n        } else {\n            $client = self::coPop($this->mysqlClient);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $result = $client->send(...$data);\n                $this->mysqlClient->push($client);\n                return $result;\n            }\n            return false;\n        }\n    }\n\n    public function recv(&$remain)\n    {\n        if ($this->isDuplex) {\n            $client = $this->client;\n            $data = $client->recv(-1);\n        } else {\n            $client = self::coPop($this->mysqlClient, $this->timeout);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $data = $client->recv($this->timeout / 500);\n            } else {\n                $data = '';\n            }\n            $this->mysqlClient->push($client);\n            if ($data === false && $client->errCode == 110) {\n                $data = true;\n            }\n            if ($data === '' || $data === false) {\n                $this->mysqlClient->close();\n            }\n        }\n        if ($data === '' || $data === false) {\n            $this->onClientClose($client);\n        } elseif (is_string($data)) {\n            $this->onClientReceive($client, $data);\n        }\n        return $data;\n    }\n\n    public function onClientClose(\\Swoole\\Coroutine\\Client $cli)\n    {\n        MySQLPool::destruct($cli, $this->connName);\n    }\n\n    public function onClientError(\\Swoole\\Coroutine\\Client $cli)\n    {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "wrong_result": "```php\nclass MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = version_compare(Swoole\\Version::get(), '4.5.0', '>=');\n        $this->connected = false;\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n        $this->client->set([\n            'open' => true,\n            'timeout' => $timeout,\n        ]);\n        $res = $this->client->connect($host, $port, $timeout);\n        if (!$res) {\n            if ($tryStep < 3) {\n                co::sleep(0.1);\n                return $this->connect($host, $port, $timeout, $tryStep + 1);\n            }\n            return false;\n        }\n        $this->connected = true;\n        return $this->client;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data) {\n        $this->chan->push($data);\n    }\n\n    public function processAuth(string $pluginName): array {\n        $result = [];\n        if ($pluginName === 'mysql_native_password') {\n            $password = $this->account['password'];\n            $hash = crypt($password, $this->serverPublicKey);\n            $result = ['auth_packet' => $hash];\n        }\n        return $result;\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv($remain);\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli) {\n        $this->connected = false;\n        $this->client = null;\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli) {\n        $this->connected = false;\n        $this->client = null;\n    }\n}\n```"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a PHP class that implements a JSON-RPC client using Swoole's coroutine-based TCP client for asynchronous communication with a JSON-RPC server. The class should handle connection management, request/response serialization, and middleware processing.\n\nClass Description: The Connection class provides a JSON-RPC client implementation using Swoole's coroutine client for TCP communication. It manages the connection lifecycle, handles JSON-RPC protocol serialization/deserialization, and supports middleware processing for requests.\n\nAttributes:\n- host: [string] - The hostname or IP address of the JSON-RPC server\n- port: [int] - The port number of the JSON-RPC server\n- timeout: [float] - Connection timeout in seconds\n- callTimeout: [float] - Timeout for RPC calls in seconds\n- middleware: [array] - Array of middleware objects to process requests\n- client: [Swoole\\Coroutine\\Client] - The Swoole coroutine client instance (protected)\n\nMethods:\n- __construct([array $config = []]) -> [void] - Constructor that initializes the connection with optional configuration\n- connect() -> [void] - Establishes a TCP connection to the JSON-RPC server\n- call([Request $request]) -> [Response] - Sends a JSON-RPC request and returns the response, processing through middleware\n- close() -> [void] - Closes the connection to the server\n- recv([float $timeout = -1]) -> [string] - Receives data from the server with optional timeout (protected)\n- send([string $data]) -> [void] - Sends data to the server (protected)",
    "Canonical_solution": "use Mix\\Bean\\BeanInjector;\nuse Mix\\JsonRpc\\Constants;\nuse Mix\\JsonRpc\\Exception\\DeserializeException;\nuse Mix\\JsonRpc\\Helper\\JsonRpcHelper;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareDispatcher;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareInterface;\nuse Mix\\JsonRpc\\Message\\Request;\nuse Mix\\JsonRpc\\Message\\Response;\nuse Swoole\\Coroutine\\Client;\n\nclass Connection\n{\n    public $host = '';\n    public $port = 0;\n    public $timeout = 0.0;\n    public $callTimeout = 10.0;\n    public $middleware = [];\n    protected $client;\n\n    public function __construct(array $config = [])\n    {\n        BeanInjector::inject($this, $config);\n    }\n\n    public function connect()\n    {\n        $host    = $this->host;\n        $port    = $this->port;\n        $timeout = $this->timeout;\n        $client  = new Client(SWOOLE_SOCK_TCP);\n        $client->set([\n            'open_eof_check' => true,\n            'package_eof'    => Constants::EOF,\n        ]);\n        if (!$client->connect($host, $port, $timeout)) {\n            throw new \\Swoole\\Exception(sprintf(\"JSON-RPC: %s (host:%s, port: %s)\", $client->errMsg, $host, $port), $client->errCode);\n        }\n        $this->client = $client;\n    }\n\n    public function call(Request $request)\n    {\n        $process              = function (Request $request) {\n            $jsonString = JsonRpcHelper::encode($request) . Constants::EOF;\n            $this->send($jsonString);\n            $data = $this->recv($this->callTimeout);\n            return JsonRpcHelper::deserializeResponse($data);\n        };\n        $middlewareDispatcher = new MiddlewareDispatcher($this->middleware, $process, $request);\n        return $middlewareDispatcher->dispatch();\n    }\n\n    public function close()\n    {\n        if (!$this->client->close()) {\n            $errMsg  = $this->client->errMsg;\n            $errCode = $this->client->errCode;\n            if ($errMsg == '' && $errCode == 0) {\n                return;\n            }\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n    }\n\n    protected function recv(float $timeout = -1)\n    {\n        $data = $this->client->recv($timeout);\n        if ($data === false) {\n            $client = $this->client;\n            throw new \\Swoole\\Exception($client->errMsg, $client->errCode);\n        }\n        if ($data === \"\") {\n            $errCode = stripos(PHP_OS, 'Darwin') !== false ? 54 : 104;\n            $errMsg  = swoole_strerror($errCode, 9);\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n        return $data;\n    }\n\n    protected function send(string $data)\n    {\n        $len  = strlen($data);\n        $size = $this->client->send($data);\n        if ($size === false) {\n            throw new \\Swoole\\Exception($this->client->errMsg, $this->client->errCode);\n        }\n        if ($len !== $size) {\n            throw new \\Swoole\\Exception('The sending data is incomplete, it may be that the socket has been closed by the peer.');\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "wrong_result": "class Connection {\n    public $host;\n    public $port;\n    public $timeout;\n    public $callTimeout;\n    public $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9000;\n        $this->timeout = $config['timeout'] ?? 5.0;\n        $this->callTimeout = $config['callTimeout'] ?? 3.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(): void {\n        if ($this->client === null) {\n            $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n        }\n        $this->client->set([\n            'timeout' => $this->timeout,\n        ]);\n        $connected = $this->client->connect($this->host, $this->port, $this->timeout);\n        if (!$connected) {\n            return;\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $middleware->handle($request);\n        }\n\n        $jsonRequest = json_encode($request->toArray());\n        $this->send($jsonRequest);\n\n        $responseJson = $this->recv($this->callTimeout);\n        $response = new Response($responseJson);\n\n        foreach ($this->middleware as $middleware) {\n            $middleware->handle($response);\n        }\n\n        return $response;\n    }\n\n    public function close(): void {\n        if ($this->client !== null) {\n            $this->client->close();\n        }\n    }\n\n    protected function recv(float $timeout = -1): string {\n        return co_await $this->client->recv($timeout);\n    }\n\n    protected function send(string $data): void {\n        co_await $this->client->send($data);\n    }\n}"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a function that generates an image from a DOT script using the Graphviz `dot` command-line tool through inter-process communication in PHP.\n\nFunction Description: The function takes a DOT script and an image type as input, executes the `dot` command with the specified type, and returns the generated image data. It handles the subprocess communication using pipes for stdin, stdout, and stderr, ensuring proper resource cleanup and error handling.\n\nInput: \n- $dot_script: string - The DOT language script to be processed by Graphviz\n- $type: string - The output image type (e.g., 'png', 'svg', 'jpg')\n\nOutput: \n- Returns: string - The binary data of the generated image\n- On error: Prints error message to stderr and exits the program",
    "Canonical_solution": "function xhprof_generate_image_by_dot($dot_script, $type) {\n  $descriptorspec = array(\n       // stdin is a pipe that the child will read from\n       0 => array(\"pipe\", \"r\"),\n       // stdout is a pipe that the child will write to\n       1 => array(\"pipe\", \"w\"),\n       // stderr is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")\n       );\n\n  $cmd = \" dot -T\".$type;\n\n  $process = proc_open( $cmd, $descriptorspec, $pipes, sys_get_temp_dir(), array( 'PATH' => getenv( 'PATH' ) );\n  if (is_resource($process)) {\n    fwrite($pipes[0], $dot_script);\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n\n    $err = stream_get_contents($pipes[2]);\n    if (!empty($err)) {\n      print \"failed to execute cmd: \\\"$cmd\\\". stderr: `$err'\\n\";\n      exit;\n    }\n\n    fclose($pipes[2]);\n    fclose($pipes[1]);\n    proc_close($process);\n    return $output;\n  }\n  print \"failed to execute cmd \\\"$cmd\\\"\";\n  exit();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $command = ['dot', '-T', $type];\n    $descriptorspec = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        die('Failed to start process');\n    }\n\n    fwrite($pipes[0], $dot_script);\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    if (!empty($errorOutput)) {\n        echo $errorOutput;\n        exit(1);\n    }\n\n    return $output;\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, providing methods to initialize, communicate with, and terminate the process, while handling errors and resource cleanup.\n\nClass Description: The ProcessStream class manages a subprocess execution through pipes for stdin, stdout, and stderr communication. It handles process initialization, error checking, and proper resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The stdin pipe for writing to the subprocess\n- out: resource - The stdout pipe for reading from the subprocess\n\nMethods:\n- setCommand(string $command) -> void - Sets the command to be executed by the subprocess\n- initialize() -> void - Starts the subprocess, sets up communication pipes, and checks for startup errors\n- terminate() -> void - Closes all pipes and terminates the subprocess\n- getReadConnectionDescription() -> string - Returns a description of the process connection (for logging/debugging)",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command)\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessStream {\n    public $command;\n    public $stream;\n    public $in;\n    public $out;\n    public $stderr;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (empty($this->command)) {\n            throw new Exception(\"Command not set\");\n        }\n        $descriptors = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $this->stream = proc_open($this->command, $descriptors, $pipes);\n        if (!$this->stream) {\n            throw new Exception(\"Failed to start process\");\n        }\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        $this->stderr = $pipes[2];\n    }\n\n    public function terminate(): void {\n        if ($this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            fclose($this->stderr);\n            pclose($this->stream);\n            $this->stream = null;\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"Process: {$this->command}\";\n    }\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a function that retrieves Git tag information from a specified directory using subprocess communication via pipes.\n\nFunction Description: The function checks if a given directory is a Git repository (by checking for .git folder) and then executes the 'git describe --tags' command to get the latest tag information. It handles subprocess communication using pipes for stdout and stderr, properly manages resources, and returns the tag information or false if unsuccessful.\n\nInput: \n- $path (string): The filesystem path to check for Git repository information\n\nOutput:\n- Returns either:\n  - (string) The trimmed output from 'git describe --tags' command if successful\n  - (bool) false if:\n    - The path is not a Git repository\n    - The subprocess cannot be created\n    - The command returns a non-zero exit code",
    "Canonical_solution": "function getGitInformation(string $path)\n{\n    if (!\\is_dir($path . DIRECTORY_SEPARATOR . '.git')) {\n        return false;\n    }\n\n    $process = \\proc_open(\n        'git describe --tags',\n        [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ],\n        $pipes,\n        $path\n    );\n\n    if (!\\is_resource($process)) {\n        return false;\n    }\n\n    $result = \\trim(\\stream_get_contents($pipes[1]));\n\n    \\fclose($pipes[1]);\n    \\fclose($pipes[2]);\n\n    $returnCode = \\proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "function getGitTagInfo($path) {\n    if (!is_dir($path) || !is_dir(\"$path/.git\")) {\n        return false;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!$process) {\n        return false;\n    }\n\n    $stdout = '';\n    $stderr = '';\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n\n    while (!feof($pipes[1])) {\n        $stdout .= fread($pipes[1], 1024);\n    }\n    fclose($pipes[1]);\n\n    while (!feof($pipes[2])) {\n        $stderr .= fread($pipes[2], 1024);\n    }\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    if ($exitCode !== 0) {\n        return false;\n    }\n\n    return trim($stdout);\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a PHP class that manages subprocess execution using proc_open, handling input/output through pipes, with support for timeouts and temporary files.\n\nClass Description: The DefaultPhpProcess class provides functionality to execute subprocesses in PHP using proc_open, managing standard input/output/error streams through pipes. It supports timeout handling, environment variable configuration, and temporary file usage for large inputs.\n\nAttributes:\n- tempFile: [string|null] - Path to temporary file used for storing input when needed\n- stdin: [string|null] - Standard input content for the subprocess\n- env: [array|null] - Environment variables to pass to the subprocess\n- timeout: [int|null] - Maximum execution time in seconds before terminating the subprocess\n\nMethods:\n- runJob(string $job, array $settings = []): array - Executes a job with optional settings, returns output\n  Input: \n    - $job: [string] - The input content for the subprocess\n    - $settings: [array] - Additional execution settings\n  Output: [array] - Associative array containing 'stdout' and 'stderr' output\n\n- getHandles(): array - Returns additional stream handles for the subprocess\n  Output: [array] - Array of stream handles\n\n- runProcess(string $job, array $settings): array - Internal method to execute the subprocess\n  Input:\n    - $job: [string] - The input content\n    - $settings: [array] - Execution settings\n  Output: [array] - Associative array containing 'stdout' and 'stderr'\n\n- process(resource $pipe, string $job): void - Writes job content to the input pipe\n  Input:\n    - $pipe: [resource] - The input pipe resource\n    - $job: [string] - Content to write\n\n- cleanup(): void - Cleans up temporary resources (files)\n  \n- useTemporaryFile(): bool - Determines whether to use temporary files for input\n  Output: [bool] - True if temporary files should be used",
    "Canonical_solution": "use function array_merge;\nuse function fclose;\nuse function file_put_contents;\nuse function fread;\nuse function fwrite;\nuse function is_array;\nuse function is_resource;\nuse function proc_close;\nuse function proc_open;\nuse function proc_terminate;\nuse function rewind;\nuse function sprintf;\nuse function stream_get_contents;\nuse function stream_select;\nuse function sys_get_temp_dir;\nuse function tempnam;\nuse function unlink;\nuse PHPUnit\\Framework\\Exception;\n\nclass DefaultPhpProcess\n{\n    protected $tempFile;\n\n    public function runJob(string $job, array $settings = []): array\n    {\n        if ($this->stdin || $this->useTemporaryFile()) {\n            if (!($this->tempFile = tempnam(sys_get_temp_dir(), 'PHPUnit')) ||\n                file_put_contents($this->tempFile, $job) === false) {\n                throw new Exception(\n                    'Unable to write temporary file',\n                );\n            }\n\n            $job = $this->stdin;\n        }\n\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array\n    {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array\n    {\n        $handles = $this->getHandles();\n\n        $env = null;\n\n        if ($this->env) {\n            $env = $_SERVER ?? [];\n            unset($env['argv'], $env['argc']);\n            $env = array_merge($env, $this->env);\n\n            foreach ($env as $envKey => $envVar) {\n                if (is_array($envVar)) {\n                    unset($env[$envKey]);\n                }\n            }\n        }\n\n        $pipeSpec = [\n            0 => $handles[0] ?? ['pipe', 'r'],\n            1 => $handles[1] ?? ['pipe', 'w'],\n            2 => $handles[2] ?? ['pipe', 'w'],\n        ];\n\n        $process = proc_open(\n            $this->getCommand($settings, $this->tempFile),\n            $pipeSpec,\n            $pipes,\n            null,\n            $env,\n        );\n\n        if (!is_resource($process)) {\n            throw new Exception(\n                'Unable to spawn worker process',\n            );\n        }\n\n        if ($job) {\n            $this->process($pipes[0], $job);\n        }\n\n        fclose($pipes[0]);\n\n        $stderr = $stdout = '';\n\n        if ($this->timeout) {\n            unset($pipes[0]);\n\n            while (true) {\n                $r = $pipes;\n                $w = null;\n                $e = null;\n\n                $n = @stream_select($r, $w, $e, $this->timeout);\n\n                if ($n === false) {\n                    break;\n                }\n\n                if ($n === 0) {\n                    proc_terminate($process, 9);\n\n                    throw new Exception(\n                        sprintf(\n                            'Job execution aborted after %d seconds',\n                            $this->timeout,\n                        ),\n                    );\n                }\n\n                if ($n > 0) {\n                    foreach ($r as $pipe) {\n                        $pipeOffset = 0;\n\n                        foreach ($pipes as $i => $origPipe) {\n                            if ($pipe === $origPipe) {\n                                $pipeOffset = $i;\n\n                                break;\n                            }\n                        }\n\n                        if (!$pipeOffset) {\n                            break;\n                        }\n\n                        $line = fread($pipe, 8192);\n\n                        if ($line === '' || $line === false) {\n                            fclose($pipes[$pipeOffset]);\n\n                            unset($pipes[$pipeOffset]);\n                        } elseif ($pipeOffset === 1) {\n                            $stdout .= $line;\n                        } else {\n                            $stderr .= $line;\n                        }\n                    }\n\n                    if (empty($pipes)) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (isset($pipes[1])) {\n                $stdout = stream_get_contents($pipes[1]);\n\n                fclose($pipes[1]);\n            }\n\n            if (isset($pipes[2])) {\n                $stderr = stream_get_contents($pipes[2]);\n\n                fclose($pipes[2]);\n            }\n        }\n\n        if (isset($handles[1])) {\n            rewind($handles[1]);\n\n            $stdout = stream_get_contents($handles[1]);\n\n            fclose($handles[1]);\n        }\n\n        if (isset($handles[2])) {\n            rewind($handles[2]);\n\n            $stderr = stream_get_contents($handles[2]);\n\n            fclose($handles[2]);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    protected function process($pipe, string $job): void\n    {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void\n    {\n        if ($this->tempFile) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool\n    {\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct() {\n        $this->tempFile = null;\n        $this->stdin = null;\n        $this->env = null;\n        $this->timeout = null;\n    }\n\n    public function runJob(string $job, array $settings = []): array {\n        $this->tempFile = $settings['temp_file'] ?? null;\n        $this->stdin = $settings['stdin'] ?? null;\n        $this->env = $settings['env'] ?? null;\n        $this->timeout = $settings['timeout'] ?? null;\n\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles(): array {\n        return [];\n    }\n\n    public function runProcess(string $job, array $settings): array {\n        $command = $settings['command'] ?? 'php';\n        $env = $settings['env'] ?? null;\n        $timeout = $settings['timeout'] ?? null;\n\n        $descriptors = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n\n        $process = proc_open($command, $descriptors, $pipes);\n\n        if (is_resource($process)) {\n            $input = $this->stdin ?? $job;\n            if ($this->useTemporaryFile()) {\n                $tempFile = $this->tempFile;\n                file_put_contents($tempFile, $input);\n                $descriptors[0] = ['file', $tempFile];\n            } else {\n                $this->process($pipes[0], $input);\n            }\n\n            $stdout = '';\n            $stderr = '';\n            while (!feof($pipes[1])) {\n                $stdout .= fread($pipes[1], 1024);\n            }\n            while (!feof($pipes[2])) {\n                $stderr .= fread($pipes[2], 1024);\n            }\n\n            fclose($pipes[0]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n\n            $returnCode = proc_close($process);\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to start process'];\n    }\n\n    public function process(resource $pipe, string $job): void {\n        fwrite($pipe, $job);\n    }\n\n    public function cleanup(): void {\n        if ($this->tempFile) {\n            unlink($this->tempFile);\n        }\n    }\n\n    public function useTemporaryFile(): bool {\n        return $this->tempFile !== null;\n    }\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a PHP class that facilitates the execution of shell commands as subprocesses, handling input/output streams, and providing process execution details.\n\nClass Description: The Process class provides a way to execute shell commands as subprocesses, capturing their output streams (stdout and stderr), return codes, and execution time. It includes methods for basic execution and error-checked execution variants.\n\nAttributes:\n\ncommand: [string] - The shell command to be executed\ncwd: [string|null] - The working directory for the command execution\nenv: [array] - Environment variables for the command\ndescriptors: [array] - Static array defining I/O streams configuration\nlog_run_times: [bool] - Static flag to enable execution time logging\nrun_times: [array] - Static array storing command execution time statistics\n\nMethods:\n\ncreate: [static](string $command, string|null $cwd = null, array $env = []) -> [Process] - Factory method to create a new Process instance\nrun: [](void) -> [ProcessRun] - Executes the command and returns execution details including stdout, stderr, and return code\nrun_check: [](void) -> [ProcessRun] - Executes the command and throws RuntimeException if return code is non-zero\nrun_check_stderr: [](void) -> [ProcessRun] - Executes the command and throws RuntimeException if return code is non-zero or if stderr contains unexpected output (with specific exception for known PSR-0 deprecation warning)",
    "Canonical_solution": "namespace WP_CLI;\n\nuse RuntimeException;\n\nclass Process {\n\tprivate $command;\n\tprivate $cwd;\n\tprivate $env;\n\tprivate static $descriptors = [\n\t\t0 => STDIN,\n\t\t1 => [ 'pipe', 'w' ],\n\t\t2 => [ 'pipe', 'w' ],\n\t];\n\tpublic static $log_run_times = false;\n\tpublic static $run_times = [];\n\n\tpublic static function create( $command, $cwd = null, $env = [] ) {\n\t\t$proc = new self();\n\t\t$proc->command = $command;\n\t\t$proc->cwd = $cwd;\n\t\t$proc->env = $env;\n\t\treturn $proc;\n\t}\n\n\tprivate function __construct() {}\n\n\tpublic function run() {\n\t\tUtils\\check_proc_available( 'Process::run' );\n\n\t\t$start_time = microtime( true );\n\t\t$pipes = [];\n\t\t$proc = Utils\\proc_open_compat( $this->command, self::$descriptors, $pipes, $this->cwd, $this->env );\n\n\t\t$stdout = stream_get_contents( $pipes[1] );\n\t\tfclose( $pipes[1] );\n\n\t\t$stderr = stream_get_contents( $pipes[2] );\n\t\tfclose( $pipes[2] );\n\n\t\t$return_code = proc_close( $proc );\n\n\t\t$run_time = microtime( true ) - $start_time;\n\n\t\tif ( self::$log_run_times ) {\n\t\t\tif ( ! isset( self::$run_times[ $this->command ] ) ) {\n\t\t\t\tself::$run_times[ $this->command ] = [ 0, 0 ];\n\t\t\t}\n\t\t\tself::$run_times[ $this->command ][0] += $run_time;\n\t\t\t++self::$run_times[ $this->command ][1];\n\t\t}\n\n\t\treturn new ProcessRun( [\n\t\t\t'stdout' => $stdout,\n\t\t\t'stderr' => $stderr,\n\t\t\t'return_code' => $return_code,\n\t\t\t'command' => $this->command,\n\t\t\t'cwd' => $this->cwd,\n\t\t\t'env' => $this->env,\n\t\t\t'run_time' => $run_time,\n\t\t] );\n\t}\n\n\tpublic function run_check() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code ) {\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n\n\tpublic function run_check_stderr() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code ) {\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\tif ( ! empty( $r->stderr ) ) {\n\t\t\t$stderr_lines = array_filter( explode( \"\\n\", $r->stderr ) );\n\t\t\tif ( 1 === count( $stderr_lines ) ) {\n\t\t\t\t$stderr_line = $stderr_lines[0];\n\t\t\t\tif ( false !== strpos( $stderr_line, 'The PSR-0 `Requests_...` class names in the Request library are deprecated.' ) ) {\n\t\t\t\t\treturn $r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class Process {\n    public $command;\n    public $cwd;\n    public $env;\n\n    public static $descriptors = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    protected static $log_run_times = false;\n    protected static $run_times = [];\n\n    public function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create(string $command, string $cwd = null, array $env = []): self {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n\n        $descriptors = self::$descriptors;\n\n        $process = proc_open($this->command, $descriptors, $pipes, $this->cwd, $this->env);\n\n        if (is_resource($process)) {\n            $stdout = '';\n            $stderr = '';\n\n            while (!feof($pipes[1])) {\n                $stdout .= fread($pipes[1], 8192);\n            }\n\n            while (!feof($pipes[2])) {\n                $stderr .= fread($pipes[2], 8192);\n            }\n\n            fclose($pipes[0]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            fclose($process);\n\n            $status = proc_get_status($process);\n            $returnCode = $status['exitcode'];\n\n            $executionTime = microtime(true) - $start_time;\n\n            if (self::$log_run_times) {\n                self::$run_times[] = $executionTime;\n            }\n\n            return new ProcessRun($stdout, $stderr, $returnCode, $executionTime);\n        }\n\n        throw new RuntimeException(\"Failed to execute command: {$this->command}\");\n    }\n\n    public function runCheck(): ProcessRun {\n        $result = $this->run();\n        if ($result->returnCode !== 0) {\n            throw new RuntimeException(\"Command failed with code {$result->returnCode}\");\n        }\n        return $result;\n    }\n\n    public function runCheckStderr(): ProcessRun {\n        $result = $this->runCheck();\n        if (!empty($result->stderr)) {\n            if (strpos($result->stderr, 'PSR-0 deprecation warning') !== false) {\n                throw new RuntimeException(\"PSR-0 deprecation warning found in stderr\");\n            } else {\n                throw new RuntimeException(\"Unexpected stderr output: {$result->stderr}\");\n            }\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $returnCode;\n    public $executionTime;\n\n    public function __construct($stdout, $stderr, $returnCode, $executionTime) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->returnCode = $returnCode;\n        $this->executionTime = $executionTime;\n    }\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a PHP class that manages subprocess execution with proper pipe handling for inter-process communication, including input/output streams and error handling.\n\nClass Description: The Process class provides a way to execute shell commands as subprocesses, capturing their output streams (stdout and stderr) and exit codes. It supports custom working directories and environment variables, and includes optional execution time tracking.\n\nAttributes:\n- command: string - The shell command to be executed\n- cwd: string|null - The working directory for the command execution\n- env: array - Environment variables for the command\n- descriptors: array - Static array defining I/O descriptors for proc_open\n- log_run_times: bool - Static flag to enable execution time logging\n- run_times: array - Static array storing aggregated execution times\n\nMethods:\n- create(string $command, string|null $cwd = null, array $env = array()) -> Process - Static factory method to create a new Process instance\n- run() -> ProcessRun - Executes the command and returns a ProcessRun object containing execution results\n- run_check() -> ProcessRun - Executes the command and throws RuntimeException if return code or stderr is non-empty\n- run_check_stderr() -> ProcessRun - Executes the command and throws RuntimeException if return code is non-zero or stderr exists\n\nNote: The ProcessRun return type refers to an object containing these properties:\n- stdout: string - Output from stdout\n- stderr: string - Output from stderr\n- return_code: int - Process exit code\n- command: string - The executed command\n- cwd: string|null - Working directory used\n- env: array - Environment variables used\n- run_time: float - Execution time in seconds",
    "Canonical_solution": "namespace EE;\n\nuse EE\\Utils;\n\nclass Process {\n\tprivate $command;\n\tprivate $cwd;\n\tprivate $env;\n\tprivate static $descriptors = array(\n\t\t0 => STDIN,\n\t\t1 => array( 'pipe', 'w' ),\n\t\t2 => array( 'pipe', 'w' ),\n\t);\n\tpublic static $log_run_times = false;\n\tpublic static $run_times = array();\n\n\tpublic static function create( $command, $cwd = null, $env = array() ) {\n\t\t$proc = new self;\n\t\t$proc->command = $command;\n\t\t$proc->cwd = $cwd;\n\t\t$proc->env = $env;\n\t\treturn $proc;\n\t}\n\n\tprivate function __construct() {}\n\n\tpublic function run() {\n\t\t$start_time = microtime( true );\n\t\t$proc = Utils\\proc_open_compat( $this->command, self::$descriptors, $pipes, $this->cwd, $this->env );\n\n\t\t$stdout = stream_get_contents( $pipes[1] );\n\t\tfclose( $pipes[1] );\n\n\t\t$stderr = stream_get_contents( $pipes[2] );\n\t\tfclose( $pipes[2] );\n\n\t\t$return_code = proc_close( $proc );\n\t\t$run_time = microtime( true ) - $start_time;\n\n\t\tif ( self::$log_run_times ) {\n\t\t\tif ( ! isset( self::$run_times[ $this->command ] ) ) {\n\t\t\t\tself::$run_times[ $this->command ] = array( 0, 0 );\n\t\t\t}\n\t\t\tself::$run_times[ $this->command ][0] += $run_time;\n\t\t\tself::$run_times[ $this->command ][1]++;\n\t\t}\n\n\t\treturn new ProcessRun( array(\n\t\t\t'stdout' => $stdout,\n\t\t\t'stderr' => $stderr,\n\t\t\t'return_code' => $return_code,\n\t\t\t'command' => $this->command,\n\t\t\t'cwd' => $this->cwd,\n\t\t\t'env' => $this->env,\n\t\t\t'run_time' => $run_time,\n\t\t) );\n\t}\n\n\tpublic function run_check() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code || ! empty( $r->STDERR ) ) {\n\t\t\tthrow new \\RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n\n\tpublic function run_check_stderr() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code || ! empty( $r->stderr ) ) {\n\t\t\tthrow new \\RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class Process {\n    protected $command;\n    protected $cwd;\n    protected $env;\n    protected static $descriptors = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ];\n    protected static $log_run_times = false;\n    protected static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []) {\n        return new Process($command, $cwd, $env);\n    }\n\n    public function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $startTime = microtime(true);\n\n        $descriptorspec = Process::$descriptors;\n        $process = proc_open($this->command, $descriptorspec, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to create process\");\n        }\n\n        $stdout = '';\n        $stderr = '';\n        while (!feof($pipes[1])) {\n            $stdout .= fread($pipes[1], 1024);\n        }\n        while (!feof($pipes[2])) {\n            $stderr .= fread($pipes[2], 1024);\n        }\n\n        fclose($pipes[0]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        $runTime = microtime(true) - $startTime;\n\n        $processRun = new ProcessRun(\n            $stdout,\n            $stderr,\n            $exitCode,\n            $this->command,\n            $this->cwd,\n            $this->env,\n            $runTime\n        );\n\n        if (Process::$log_run_times) {\n            Process::$run_times[] = $runTime;\n        }\n\n        return $processRun;\n    }\n\n    public function run_check(): ProcessRun {\n        $processRun = $this->run();\n        if ($processRun->return_code !== 0 || !empty($processRun->stderr)) {\n            throw new RuntimeException(\"Command failed with code {$processRun->return_code} and stderr: {$processRun->stderr}\");\n        }\n        return $processRun;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $processRun = $this->run();\n        if ($processRun->return_code !== 0 || !empty($processRun->stderr)) {\n            throw new RuntimeException(\"Command failed with code {$processRun->return_code} and stderr: {$processRun->stderr}\");\n        }\n        return $processRun;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct($stdout, $stderr, $return_code, $command, $cwd, $env, $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a PHP class that provides a convenient way to execute shell commands with options for argument escaping, error capturing, and different execution methods (proc_open vs exec).\n\nClass Description: The Command class encapsulates shell command execution functionality, allowing for flexible command building, execution, and result handling. It supports both proc_open and exec methods, with options for capturing stderr, escaping arguments, and configuring process execution environment.\n\nAttributes:\n\nescapeArgs: [bool] - Whether to escape arguments automatically (default true)\nescapeCommand: [bool] - Whether to escape the command (default false)\nuseExec: [bool] - Whether to use exec() instead of proc_open() (default false)\ncaptureStdErr: [bool] - Whether to capture stderr output (default true)\nprocCwd: [string|null] - Working directory for the process\nprocEnv: [array|null] - Environment variables for the process\nprocOptions: [array|null] - Additional options for proc_open\n_command: [string] - The base command to execute\n_args: [array] - Array of command arguments\n_execCommand: [string|null] - The final constructed command string\n_stdOut: [string] - Captured stdout output\n_stdErr: [string] - Captured stderr output\n_exitCode: [int|null] - Process exit code\n_error: [string] - Last error message\n_executed: [bool] - Whether command has been executed\n\nMethods:\n\n__construct: [mixed $options = null] -> [void] - Constructor that accepts either configuration array or command string\nsetCommand: [string $command] -> [self] - Sets the base command to execute\ngetCommand: [void] -> [string] - Gets the current base command\ngetExecCommand: [void] -> [string|false] - Gets the fully constructed command string\naddArg: [string $key, mixed $value = null, bool $escape = null] -> [self] - Adds an argument to the command\nexecute: [void] -> [bool] - Executes the command and returns success status\ngetOutput: [void] -> [string] - Gets the stdout output\ngetError: [void] -> [string] - Gets the last error message\ngetStdErr: [void] -> [string] - Gets the stderr output\ngetExitCode: [void] -> [int|null] - Gets the process exit code",
    "Canonical_solution": "class Command\n{\n    public $escapeArgs = true;\n    public $escapeCommand = false;\n    public $useExec = false;\n    public $captureStdErr = true;\n    public $procCwd;\n    public $procEnv;\n    public $procOptions;\n\n    protected $_command;\n    protected $_args = array();\n    protected $_execCommand;\n    protected $_stdOut = '';\n    protected $_stdErr = '';\n    protected $_exitCode;\n    protected $_error = '';\n    protected $_executed = false;\n\n    public function __construct($options = null)\n    {\n        if (is_array($options)) {\n            $this->setOptions($options);\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand($command)\n    {\n        $this->_command = $this->escapeCommand ? escapeshellcmd($command) : $command;\n        return $this;\n    }\n\n    public function getCommand()\n    {\n        return $this->_command;\n    }\n\n    public function getExecCommand()\n    {\n        if ($this->_execCommand===null) {\n            $command = $this->getCommand();\n            if (!$command) {\n                $this->_error = 'Could not locate any executable command';\n                return false;\n            }\n            $args = $this->getArgs();\n            $this->_execCommand = $args ? $command.' '.$args : $command;\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg($key, $value = null, $escape = null)\n    {\n        $doEscape = $escape!==null ? $escape : $this->escapeArgs;\n        if ($value===null) {\n            $this->_args[] = $escape ? escapeshellarg($key) : $key;\n        } else {\n            $separator = substr($key, -1)==='=' ? '' : ' ';\n            if (is_array($value)) {\n                $params = array();\n                foreach ($value as $v) {\n                    $params[] = $doEscape ? escapeshellarg($v) : $v;\n                }\n                $this->_args[] = $key.$separator.implode(' ',$params);\n            } else {\n                $this->_args[] = $key.$separator.($doEscape ? escapeshellarg($value) : $value);\n            }\n        }\n        return $this;\n    }\n\n    public function execute()\n    {\n        $command = $this->getExecCommand();\n\n        if (!$command) {\n            return false;\n        }\n\n        if ($this->useExec) {\n            $execCommand = $this->captureStdErr ? \"$command 2>&1\" : $command;\n            exec($execCommand, $output, $this->_exitCode);\n            $this->_stdOut = trim(implode(\"\\n\", $output));\n            if ($this->_exitCode!==0) {\n                $this->_stdErr = $this->_stdOut;\n                $this->_error = empty($this->_stdErr) ? 'Command failed' : $this->_stdErr;\n                return false;\n            }\n        } else {\n            $descriptors = array(\n                1 => array('pipe','w'),\n                2 => array('pipe','a'),\n            );\n            $process = proc_open($command, $descriptors, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n            if (is_resource($process)) {\n                $this->_stdOut = trim(stream_get_contents($pipes[1]));\n                $this->_stdErr = trim(stream_get_contents($pipes[2]));\n                fclose($pipes[1]);\n                fclose($pipes[2]);\n\n                $this->_exitCode = proc_close($process);\n\n                if ($this->_exitCode!==0) {\n                    $this->_error = $this->_stdErr ? $this->_stdErr : \"Failed without error message: $command\";\n                    return false;\n                }\n            } else {\n                $this->_error = \"Could not run command $command\";\n                return false;\n            }\n        }\n\n        $this->_executed = true;\n        return true;\n    }\n\n    public function getOutput()\n    {\n        return $this->_stdOut;\n    }\n\n    public function getError()\n    {\n        return $this->_error;\n    }\n\n    public function getStdErr()\n    {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode()\n    {\n        return $this->_exitCode;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class Command {\n    public $escapeArgs = true;\n    public $escapeCommand = false;\n    public $useExec = false;\n    public $captureStdErr = true;\n    public $procCwd = null;\n    public $procEnv = null;\n    public $procOptions = null;\n    protected $_command = '';\n    protected $_args = [];\n    protected $_execCommand = null;\n    protected $_stdout = '';\n    protected $_stderr = '';\n    protected $_exitCode = null;\n    protected $_error = '';\n    protected $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            $this->escapeArgs = isset($options['escapeArgs']) ? $options['escapeArgs'] : $this->escapeArgs;\n            $this->escapeCommand = isset($options['escapeCommand']) ? $options['escapeCommand'] : $this->escapeCommand;\n            $this->useExec = isset($options['useExec']) ? $options['useExec'] : $this->useExec;\n            $this->captureStdErr = isset($options['captureStdErr']) ? $options['captureStdErr'] : $this->captureStdErr;\n            $this->procCwd = isset($options['procCwd']) ? $options['procCwd'] : $this->procCwd;\n            $this->procEnv = isset($options['procEnv']) ? $options['procEnv'] : $this->procEnv;\n            $this->procOptions = isset($options['procOptions']) ? $options['procOptions'] : $this->procOptions;\n            if (isset($options['command'])) {\n                $this->setCommand($options['command']);\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand(): string|false {\n        if (empty($this->_command)) {\n            return false;\n        }\n        $commandParts = [$this->_command];\n        foreach ($this->_args as $arg) {\n            if ($this->escapeArgs) {\n                $commandParts[] = escapeshellarg($arg);\n            } else {\n                $commandParts[] = $arg;\n            }\n        }\n        $this->_execCommand = implode(' ', $commandParts);\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, mixed $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        if ($this->_executed) {\n            return true;\n        }\n\n        $this->_executed = true;\n\n        if ($this->useExec) {\n            $execCommand = $this->getExecCommand();\n            if (!$execCommand) {\n                $this->_error = 'No command set';\n                return false;\n            }\n\n            $output = [];\n            $exitCode = 0;\n            $command = $execCommand . ($this->captureStdErr ? ' 2>&1' : '');\n            exec($command, $output, $exitCode);\n            $this->_stdout = implode(\"\\n\", $output);\n            $this->_stderr = '';\n            $this->_exitCode = $exitCode;\n            return true;\n        } else {\n            $execCommand = $this->getExecCommand();\n            if (!$execCommand) {\n                $this->_error = 'No command set';\n                return false;\n            }\n\n            $descriptorspec = [\n                0 => ['pipe', 'r'],\n                1 => ['pipe', 'w'],\n                2 => ['pipe', 'w'],\n            ];\n\n            $process = proc_open($execCommand, $this->procOptions ?? [], $pipes, $this->procCwd, $this->procEnv, $descriptorspec);\n\n            if (is_resource($process)) {\n                $stdout = '';\n                $stderr = '';\n                while (!feof($pipes[1])) {\n                    $stdout .= fread($pipes[1], 1024);\n                }\n                while (!feof($pipes[2])) {\n                    $stderr .= fread($pipes[2], 1024);\n                }\n                fclose($pipes[1]);\n                fclose($pipes[2]);\n                fclose($pipes[0]);\n                $exitCode = proc_get_status($process)['exitcode'];\n                proc_close($process);\n                $this->_stdout = $stdout;\n                $this->_stderr = $stderr;\n                $this->_exitCode = $exitCode;\n                return true;\n            } else {\n                $this->_error = 'Failed to start process';\n                return false;\n            }\n        }\n    }\n\n    public function getOutput(): string {\n        return $this->_stdout;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stderr;\n    }\n\n    public function getExitCode(): int|null {\n        return $this->_exitCode;\n    }\n}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a PHP class that handles process execution and communication using pipes, specifically designed for logging purposes. The class should manage subprocess creation, input/output streams, and error handling.\n\nClass Description: ProcessHandler is a logging handler that executes a subprocess and communicates with it through pipes (stdin, stdout, stderr). It ensures proper process management, handles startup errors, and provides methods for writing input and reading errors.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle\n- command: [string] - The command to execute as a subprocess\n- cwd: [string|null] - The working directory for the subprocess\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command, log level, and working directory\n- write(LogRecord $record) -> [void] - Writes formatted log record to the process stdin\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Ensures the subprocess is running (starts if not)\n- startProcess() -> [void] - Starts the subprocess using proc_open\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors the stderr pipe for activity\n- readProcessErrors() -> [string] - Reads and returns error output from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to the process stdin",
    "Canonical_solution": "use Monolog\\Level;\nuse Monolog\\LogRecord;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private string $command;\n    private ?string $cwd;\n    private array $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(LogRecord $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record->formatted);\n\n        $errors = $this->readProcessErrors();\n        if ($errors !== '') {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || $errors !== '') {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessHandler {\n    public $process = null;\n    public $command;\n    public $cwd = null;\n    public $pipes = [];\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    public function write(LogRecord $record) {\n        $message = $record->message;\n        $level = $record->level;\n        $formatted = $this->formatLogMessage($message, $level);\n        $this->writeProcessInput($formatted);\n    }\n\n    private function formatLogMessage(string $message, int|string $level): string {\n        return \"[{$level}] {$message}\\n\";\n    }\n\n    public function close() {\n        fclose($this->pipes[0]);\n        fclose($this->pipes[1]);\n        fclose($this->pipes[2]);\n        pclose($this->process);\n        $this->process = null;\n    }\n\n    public function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n        }\n    }\n\n    public function startProcess() {\n        $descriptorspec = [\n            ['pipe', 'r'],\n            ['pipe', 'w'],\n            ['pipe', 'w'],\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n\n        if (!$this->process) {\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function handleStartupErrors() {\n        $error = sprintf(\"Failed to start process: %s\", $this->command);\n        error_log($error);\n    }\n\n    public function selectErrorStream(): int|false {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        $nr = stream_select($read, $write, $except, 0);\n        return $nr ? 2 : false;\n    }\n\n    public function readProcessErrors(): string {\n        return stream_get_contents($this->pipes[2]);\n    }\n\n    public function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n}"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a function that retrieves Git tag information from a specified directory using subprocess communication via pipes.\n\nFunction Description: The function checks if a given directory is a Git repository (by checking for .git folder) and then executes the 'git describe --tags' command to get the latest tag information. It handles subprocess communication using pipes for stdout and stderr, properly manages resources, and returns the tag information or false if unsuccessful.\n\nInput: \n- $path (string): The filesystem path to check for Git repository and execute Git command\n\nOutput:\n- Returns (string|bool): The trimmed output from 'git describe --tags' command as string if successful, false if:\n  - The path is not a Git repository\n  - The subprocess cannot be created\n  - The Git command returns a non-zero exit code",
    "Canonical_solution": "function getGitInformation(string $path)\n{\n    if (!\\is_dir($path . DIRECTORY_SEPARATOR . '.git')) {\n        return false;\n    }\n\n    $process = \\proc_open(\n        'git describe --tags',\n        [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ],\n        $pipes,\n        $path\n    );\n\n    if (!\\is_resource($process)) {\n        return false;\n    }\n\n    $result = \\trim(\\stream_get_contents($pipes[1]));\n\n    \\fclose($pipes[1]);\n    \\fclose($pipes[2]);\n\n    $returnCode = \\proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "function getGitTagInfo($path) {\n    if (!is_dir($path)) {\n        return false;\n    }\n\n    $gitDir = $path . '/.git';\n    if (!is_dir($gitDir)) {\n        return false;\n    }\n\n    $command = \"cd $path && git describe --tags 2>&1\";\n    $handle = popen($command, 'r');\n    if (!$handle) {\n        return false;\n    }\n\n    $output = '';\n    while (!feof($handle)) {\n        $output .= fread($handle, 1024);\n    }\n\n    $exitCode = pclose($handle);\n\n    return ($exitCode === 0) ? trim($output) : false;\n}"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, handling input/output streams and proper cleanup.\n\nClass Description: ProcessStream is a class that manages the lifecycle of a subprocess, including initialization, stream handling, and termination. It provides access to the subprocess's standard input and output streams while properly handling errors and resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The input stream (stdin) of the subprocess\n- out: resource - The output stream (stdout) of the subprocess\n\nMethods:\n- setCommand(string $command): void - Sets the command to be executed by the subprocess\n- initialize(): void - Starts the subprocess, sets up streams, and checks for startup errors\n- terminate(): void - Closes all streams and terminates the subprocess\n- getReadConnectionDescription(): string - Returns a description of the process connection",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command): void\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', '\\\\' === \\DIRECTORY_SEPARATOR ? 'a' : 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessStream {\n    public $command;\n    public $stream;\n    public $in;\n    public $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptors = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['file', '/dev/null']\n        ];\n        $this->stream = proc_open($this->command, $descriptors, [$this->in, $this->out]);\n        if ($this->stream === false) {\n            throw new Exception(\"Failed to start process: \" . $this->command);\n        }\n    }\n\n    public function terminate(): void {\n        fclose($this->in);\n        fclose($this->out);\n        pclose($this->stream);\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"Process is running with command: {$this->command}\";\n    }\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a function that executes system commands using various PHP execution methods, with fallback options from most to least preferred, and returns the command output along with execution method information.\n\nFunction Description: The function attempts to execute a system command using multiple PHP execution methods in a prioritized order (COM, exec, shell_exec, system, passthru, popen, proc_open). It handles both Windows and Unix-like systems, sets the working directory, and properly manages process pipes and resources. The function returns the command output and indicates which execution method was successful.\n\nInput:\n- $cmd: [string] - The system command to be executed\n- $cwd: [string] - The working directory where the command should be executed\n- $com: [bool] (optional) - Flag to force using COM method on Windows (default: false)\n\nOutput:\n- Returns [array] with two elements:\n  - 'res': [string] - The output from the executed command\n  - 'msg': [string] - Status message indicating the execution method used or NULL if no output",
    "Canonical_solution": "function command($cmd, $cwd, $com = false) {\n    $iswin = substr(PHP_OS,0,3) == 'WIN' ? true : false;\n    $res = $msg = '';\n    \n    if($cwd == 'com' || $com) {\n        if($iswin && class_exists('COM')) {\n            $wscript = new COM('Wscript.Shell');\n            $exec = $wscript->exec('c:\\\\windows\\\\system32\\\\cmd.exe /c '.$cmd);\n            $stdout = $exec->StdOut();\n            $res = $stdout->ReadAll();\n            $msg = 'Wscript.Shell';\n        }\n    } else {\n        chdir($cwd);\n        $cwd = getcwd();\n        \n        if(function_exists('exec')) {\n            @exec($cmd, $res);\n            $res = join(\"\\n\", $res);\n            $msg = 'exec';\n        }\n        elseif(function_exists('shell_exec')) {\n            $res = @shell_exec($cmd);\n            $msg = 'shell_exec';\n        }\n        elseif(function_exists('system')) {\n            ob_start();\n            @system($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'system';\n        }\n        elseif(function_exists('passthru')) {\n            ob_start();\n            @passthru($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'passthru';\n        }\n        elseif(function_exists('popen')) {\n            $fp = @popen($cmd, 'r');\n            if($fp) {\n                while(!feof($fp)) {\n                    $res .= fread($fp, 1024);\n                }\n            }\n            @pclose($fp);\n            $msg = 'popen';\n        }\n        elseif(function_exists('proc_open')) {\n            $env = $iswin ? array('path' => 'c:\\\\windows\\\\system32') : array('path' => '/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin');\n            $des = array(\n                0 => array(\"pipe\", \"r\"),\n                1 => array(\"pipe\", \"w\"),\n                2 => array(\"pipe\", \"w\")\n            );\n            $process = @proc_open($cmd, $des, $pipes, $cwd, $env);\n            \n            if(is_resource($process)) {\n                fwrite($pipes[0], $cmd);\n                fclose($pipes[0]);\n                $res .= stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                $res .= stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n            @proc_close($process);\n            $msg = 'proc_open';\n        }\n    }\n    \n    $msg = $res == '' ? '<h1>NULL</h1>' : '<h2>\u5229\u7528'.$msg.'\u6267\u884c\u6210\u529f</h2>';\n    return array('res' => $res, 'msg' => $msg);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "wrong_result": "function executeCommand($cmd, $cwd, $com = false) {\n    $isWindows = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';\n    $methods = [\n        ['method' => 'COM', 'func' => function($cmd, $cwd) use ($isWindows) {\n            if ($isWindows && function_exists('com_create_object')) {\n                $shell = new COM(\"WScript.Shell\");\n                $result = $shell->Run($cmd, 1, true);\n                return $result === 0 ? '' : false;\n            }\n            return false;\n        }],\n        ['method' => 'exec', 'func' => function($cmd, $cwd) {\n            return exec($cmd, $output, $return_var);\n        }],\n        ['method' => 'shell_exec', 'func' => function($cmd, $cwd) {\n            return shell_exec($cmd);\n        }],\n        ['method' => 'system', 'func' => function($cmd, $cwd) {\n            return system($cmd);\n        }],\n        ['method' => 'passthru', 'func' => function($cmd, $cwd) {\n            ob_start();\n            passthru($cmd);\n            return ob_get_clean();\n        }],\n        ['method' => 'popen', 'func' => function($cmd, $cwd) {\n            $fp = popen($cmd, 'r');\n            if ($fp) {\n                $output = fread($fp, 4096);\n                pclose($fp);\n                return $output;\n            }\n            return false;\n        }],\n        ['method' => 'proc_open', 'func' => function($cmd, $cwd) {\n            $descriptorspec = [\n                'pipe' => 'r',\n                'pipe' => 'w',\n                'pipe' => 'w',\n            ];\n            $process = proc_open($cmd, $descriptorspec, $pipes);\n            if (is_resource($process)) {\n                fclose($pipes[1]);\n                fclose($pipes[2]);\n                $output = '';\n                while (!feof($pipes[0])) {\n                    $output .= fgets($pipes[0], 4096);\n                }\n                fclose($pipes[0]);\n                $return_var = 0;\n                $exit_code = proc_close($process);\n                return $output;\n            }\n            return false;\n        }]\n    ];\n\n    chdir($cwd);\n\n    foreach ($methods as $method) {\n        $result = $method['func']($cmd, $cwd);\n        if ($result !== false) {\n            return ['res' => $result, 'msg' => $method['method']];\n        }\n    }\n\n    return ['res' => '', 'msg' => null];\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for various HTTP methods, custom headers, and JSON response handling.\n\nFunction Description: The function should initialize a cURL session, configure it based on input parameters, execute the request, handle errors, process the response, and return a structured result including status, headers, and response body. It should support GET, POST, PUT, DELETE, PATCH, and OPTIONS methods, with options for custom headers, additional cURL options, JSON response parsing, and timeout configuration.\n\nInput:\n- $url (string): The target URL for the HTTP request\n- $method (string, optional, default='GET'): HTTP method (GET|POST|PUT|DELETE|PATCH|OPTIONS)\n- $data (mixed, optional, default=false): Request payload data\n- $headers (mixed, optional, default=false): Request headers (string or array)\n- $options (mixed, optional, default=false): Additional cURL options as array\n- $json (bool, optional, default=false): Whether to parse response as JSON\n- $timeout (int, optional, default=3600): Request timeout in seconds\n\nOutput:\nReturns an associative array containing:\n- 'data': Response body (parsed as array if $json=true and valid JSON)\n- 'status': Boolean indicating success (HTTP status 200-299)\n- 'code': HTTP status code\n- 'header': Parsed response headers as associative array\n\nIn case of cURL errors:\n- 'data': Error message\n- 'code': 0\n- 'header': cURL info array",
    "Canonical_solution": "function url_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, 1);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);\n    curl_setopt($ch, CURLINFO_HEADER_OUT, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_REFERER, get_url_link($url));\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n    if ($headers) {\n        if (is_string($headers)) {\n            $headers = array($headers);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    switch ($method) {\n        case 'GET':\n            curl_setopt($ch, CURLOPT_HTTPGET, 1);\n            break;\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PUT':\n        case 'DELETE':\n        case 'PATCH':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n    }\n\n    if (!empty($options)) {\n        curl_setopt_array($ch, $options);\n    }\n\n    $response = curl_exec($ch);\n    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $response_info = curl_getinfo($ch);\n    $http_body = substr($response, $header_size);\n    $http_header = substr($response, 0, $header_size);\n    $http_header = parse_headers($http_header);\n\n    if ($response_info['http_code'] == 0) {\n        $error_message = curl_error($ch);\n        if (!empty($error_message)) {\n            $error_message = \"API call to $url failed; $error_message\";\n        } else {\n            $error_message = \"API call to $url failed; maybe network error!\";\n        }\n        return array(\n            'data' => $error_message,\n            'code' => 0,\n            'header' => $response_info,\n        );\n    }\n\n    curl_close($ch);\n\n    if ($json && ($response_info['http_code'] >= 200 && $response_info['http_code'] <= 299)) {\n        $data = @json_decode($http_body, true);\n        if (json_last_error() == 0) {\n            $http_body = $data;\n        }\n    }\n\n    return array(\n        'data' => $http_body,\n        'status' => ($response_info['http_code'] >= 200 && $response_info['http_code'] <= 299),\n        'code' => $response_info['http_code'],\n        'header' => $http_header,\n    );\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "wrong_result": "function http_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    \n    if (in_array($method, ['POST', 'PUT', 'PATCH'])) {\n        if ($json) {\n            $data = json_encode($data);\n        }\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    \n    if ($headers) {\n        if (is_array($headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        } else {\n            $headersArray = explode(\"\\r\\n\", $headers);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headersArray);\n        }\n    }\n    \n    if ($options) {\n        curl_setopt_array($ch, $options);\n    }\n    \n    $response = curl_exec($ch);\n    if ($response === false) {\n        $error = curl_error($ch);\n        $info = curl_getinfo($ch);\n        return ['data' => $error, 'code' => 0, 'header' => $info];\n    }\n    \n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $response_body = $response;\n    \n    if ($json) {\n        $response_body = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return ['data' => 'Invalid JSON response', 'code' => $status_code, 'header' => []];\n        }\n    }\n    \n    $raw_headers = curl_getinfo($ch, CURLINFO_HEADER_TEXT);\n    $headers_parsed = [];\n    if ($raw_headers) {\n        $lines = explode(\"\\r\\n\", $raw_headers);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n            list($key, $value) = explode(':', $line, 2);\n            $headers_parsed[$key] = trim($value);\n        }\n    }\n    \n    return [\n        'data' => $response_body,\n        'status' => $status_code >= 200 && $status_code < 300,\n        'code' => $status_code,\n        'header' => $headers_parsed\n    ];\n}"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a PHP class that handles inter-process communication (IPC) using proc_open to execute external commands, manage input/output streams, and handle errors.\n\nClass Description: The ProcessHandler class manages subprocess execution via proc_open, providing methods to write input to the process, read output/errors, and properly clean up resources. It extends Monolog's AbstractProcessingHandler for logging integration.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle or null if not running\n- command: [string] - The command to execute in the subprocess\n- cwd: [string|null] - The working directory for the subprocess or null for default\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command and optional working directory\n- write(array $record) -> [void] - Writes formatted log record to process stdin (inherited from AbstractProcessingHandler)\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Starts the process if not already running\n- startProcess() -> [void] - Executes proc_open to start the subprocess\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors stderr for error output\n- readProcessErrors() -> [string] - Reads and returns content from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to process stdin",
    "Canonical_solution": "use Monolog\\Logger;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n        $errors = $this->readProcessErrors();\n        if (empty($errors) === false) {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || empty($errors) === false) {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "wrong_result": "class ProcessHandler extends Monolog\\Logger\\AbstractProcessingHandler {\n    protected $process;\n    protected $command;\n    protected $cwd;\n    protected $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        parent::__construct($level, $bubble);\n    }\n\n    public function write(array $record) {\n        $this->writeProcessInput($record['message']);\n    }\n\n    public function close() {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            pclose($this->process);\n            $this->process = null;\n            $this->pipes = null;\n        }\n    }\n\n    public function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n        }\n    }\n\n    protected function startProcess() {\n        $descriptors = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n\n        $pipes = [];\n        $this->process = proc_open($this->command, $descriptors, $pipes, $this->cwd);\n\n        if (is_resource($this->process)) {\n            $this->pipes = $pipes;\n        } else {\n            $this->handleStartupErrors();\n        }\n    }\n\n    protected function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            $this->logger->error(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    public function selectErrorStream() {\n        return 2;\n    }\n\n    public function readProcessErrors() {\n        if (isset($this->pipes[2])) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL for sending upgrade notifications, with error handling and response processing capabilities.\n\nClass Description: UpgradeNoticeBehavior is a class designed to manage HTTP communications for upgrade notifications. It encapsulates cURL functionality to send requests to specified URLs, handle parameters and headers, process responses, and manage errors.\n\nAttributes:\nheader_: [string] - Stores HTTP headers for requests\nhttpCode_: [int] - Stores HTTP status code from responses\nhttpDesc_: [string] - Stores HTTP status description from responses\naccesskey_: [string] - Stores access key for authentication\nsecretkey_: [string] - Stores secret key for authentication\n\nMethods:\nsend: [send]([string $url, array $params = array(), array $headers = array()]) -> [mixed] - Sends an HTTP request to the specified URL with optional parameters and headers. Returns the decoded JSON response on success or false on failure. Handles cURL errors and invalid response formats.",
    "Canonical_solution": "namespace Behavior;\n\nclass UpgradeNoticeBehavior {\n    protected $header_ = '';\n    protected $httpCode_;\n    protected $httpDesc_;\n    protected $accesskey_;\n    protected $secretkey_;\n\n    private function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        if (!empty($params)) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        if (!empty($headers)) curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $txt = curl_exec($ch);\n        if (curl_errno($ch)) {\n            trace(curl_error($ch), '\u5347\u7ea7\u901a\u77e5\u51fa\u9519', 'NOTIC', true);\n            return false;\n        }\n        curl_close($ch);\n        $ret = json_decode($txt, true);\n        if (!$ret) {\n            trace('\u63a5\u53e3[' . $url . ']\u8fd4\u56de\u683c\u5f0f\u4e0d\u6b63\u786e', '\u5347\u7ea7\u901a\u77e5\u51fa\u9519', 'NOTIC', true);\n            return false;\n        }\n        return $ret;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = [], $headers = []) {\n        $ch = curl_init($url);\n\n        curl_setopt_array($ch, [\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_USERPWD => $this->accesskey_ . ':' . $this->secretkey_\n        ]);\n\n        if (!empty($params)) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n\n        $response = curl_exec($ch);\n\n        if ($response === false) {\n            $this->httpCode_ = 0;\n            $this->httpDesc_ = 'cURL error: ' . curl_error($ch);\n            return false;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpCode_ = $httpCode;\n\n        $httpDesc = '';\n        switch ($httpCode) {\n            case 200: $httpDesc = 'OK'; break;\n            case 404: $httpDesc = 'Not Found'; break;\n            case 500: $httpDesc = 'Internal Server Error'; break;\n            default: $httpDesc = 'Unknown';\n        }\n        $this->httpDesc_ = $httpDesc;\n\n        $decoded = json_decode($response, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            return $decoded;\n        } else {\n            $this->httpCode_ = 0;\n            $this->httpDesc_ = 'Invalid JSON response';\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests to interact with WeChat Pay API, supporting both GET and POST methods with proper SSL configuration.\n\nClass Description: The Wechatpay class provides methods for making HTTP requests to WeChat Pay API endpoints. It handles both GET and POST requests, with special consideration for HTTPS connections and SSL configuration. The class includes error handling through HTTP status codes.\n\nMethods:\n\nMethod1: http_get(string $url) -> string|false - Performs a GET request to the specified URL. Returns the response content if successful (HTTP 200), or false otherwise.\nMethod2: http_post(string $url, array $param, bool $post_file=false) -> string|false - Performs a POST request to the specified URL with given parameters. Handles both regular form data and file uploads. Returns the response content if successful (HTTP 200), or false otherwise.",
    "Canonical_solution": "class Wechatpay\n{\n    /**\n     * GET \u8bf7\u6c42\n     * @param string $url\n     */\n    private function http_get($url){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n\n    /**\n     * POST \u8bf7\u6c42\n     * @param string $url\n     * @param array $param\n     * @param boolean $post_file \u662f\u5426\u6587\u4ef6\u4e0a\u4f20\n     * @return string content\n     */\n    private function http_post($url,$param,$post_file=false){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, false);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        if (is_string($param) || $post_file) {\n            $strPOST = $param;\n        } else {\n            $aPOST = array();\n            foreach($param as $key=>$val){\n                $aPOST[] = $key.\"=\".urlencode($val);\n            }\n            $strPOST =  join(\"&\", $aPOST);\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        curl_setopt($oCurl, CURLOPT_POST,true);\n        curl_setopt($oCurl, CURLOPT_POSTFIELDS,$strPOST);\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass Wechatpay {\n    public function http_get(string $url): string|false {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPGET, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code == 200) {\n            return $response;\n        } else {\n            return false;\n        }\n    }\n\n    public function http_post(string $url, array $param, bool $post_file=false): string|false {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($post_file) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code == 200) {\n            return $response;\n        } else {\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Guzzle library to download files and fetch GitHub release information.\n\nClass Description: The HttpClient class provides methods for downloading remote files via HTTP and retrieving GitHub release information (both stable and pre-release) using the Guzzle HTTP client library.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- getSourceFile(string $fileName, string $savePath, string $url) -> [bool] - Downloads a file from the specified URL and saves it to the given path\n- getLatestReleaseTagName(string $repo) -> [string] - Gets the latest stable release tag name from a GitHub repository\n- getLatestPreReleaseTagName(string $repo) -> [string] - Gets the latest pre-release tag name from a GitHub repository",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass HttpClient\n{\n    private Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client();\n    }\n\n    /**\n     * Download remote file via HTTP\n     *\n     * @param string $fileName\n     * @param string $savePath\n     * @param string $url\n     * @return bool\n     */\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool\n    {\n        try {\n            if (! file_exists($savePath)) {\n                echo '\u76ee\u6807\u6587\u4ef6\u5939 ' . $savePath . ' \u4e0d\u5b58\u5728\uff0c\u4e0b\u8f09\u5931\u8d25\u3002' . PHP_EOL;\n                return false;\n            }\n\n            echo '- \u5f00\u59cb\u4e0b\u8f7d ' . $fileName . '...' . PHP_EOL;\n            $request = $this->client->get($url);\n            echo '- \u4e0b\u8f7d ' . $fileName . ' \u6210\u529f\uff0c\u6b63\u5728\u4fdd\u5b58...' . PHP_EOL;\n            $result = file_put_contents($savePath . $fileName, $request->getBody()->getContents());\n\n            if (! $result) {\n                echo '- \u4fdd\u5b58 ' . $fileName . ' \u81f3 ' . $savePath . ' \u5931\u8d25\u3002' . PHP_EOL;\n            } else {\n                echo '- \u4fdd\u5b58 ' . $fileName . ' \u81f3 ' . $savePath . ' \u6210\u529f\u3002' . PHP_EOL;\n            }\n\n            return true;\n        } catch (GuzzleException $e) {\n            echo '- \u4e0b\u8f7d ' . $fileName . ' \u5931\u8d25...' . PHP_EOL;\n            echo $e->getMessage() . PHP_EOL;\n\n            return false;\n        }\n    }\n\n    /**\n     * Get latest GitHub release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases/latest' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n\n        return json_decode(\n            $request->getBody()->getContents(),\n            true\n        )['tag_name'];\n    }\n\n    /**\n     * Get latest GitHub pre-release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestPreReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n        $latest = json_decode(\n            $request->getBody()->getContents(),\n            true\n        )[0];\n\n        return $latest['tag_name'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class HttpClient {\n    protected $client;\n\n    public function __construct() {\n        $this->client = new \\GuzzleHttp\\Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->get($url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath, $response->getBody());\n                return true;\n            }\n        } catch (\\Exception $e) {\n            return false;\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        $url = \"https://api.github.com/repos/{$repo}/releases/latest\";\n        $response = $this->client->get($url);\n        if ($response->getStatusCode() === 200) {\n            $data = json_decode($response->getBody(), true);\n            return $data['tag_name'] ?? '';\n        }\n        return '';\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        $url = \"https://api.github.com/repos/{$repo}/releases?per_page=1&type=prerelease\";\n        $response = $this->client->get($url);\n        if ($response->getStatusCode() === 200) {\n            $data = json_decode($response->getBody(), true);\n            return $data[0]['tag_name'] ?? '';\n        }\n        return '';\n    }\n}"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a Qiniu storage client class in PHP that handles HTTP requests to Qiniu's cloud storage service, including file uploads, downloads, and management operations.\n\nClass Description: QiniuStorage is a client class for interacting with Qiniu's cloud storage service. It provides methods for making HTTP requests to Qiniu's API endpoints with proper headers and request handling.\n\nAttributes:\n- QINIU_RSF_HOST: string - Qiniu's RSF (Resource List) API host\n- QINIU_RS_HOST: string - Qiniu's RS (Resource Management) API host  \n- QINIU_UP_HOST: string - Qiniu's file upload API host\n- timeout: string - Request timeout duration\n- error: string - Last error message\n- errorStr: string - Detailed error information\n\nMethods:\n- request(string $path, string $method, array|null $headers = null, mixed $body = null) -> mixed - Makes an HTTP request to Qiniu's API. Handles request setup, execution, and response processing.\n- response(string $text) -> array - Processes the response text and extracts JSON data from headers.\n- error(string $header, string $body) -> void - Handles error responses by parsing status codes and error messages.\n\nInput Parameters for request():\n- $path: string - The API endpoint path\n- $method: string - HTTP method (GET, POST, PUT, HEAD)\n- $headers: array|null - Optional request headers\n- $body: mixed - Request payload (can be string or resource)\n\nOutput for request():\n- Returns response body for successful GET requests\n- Returns parsed response array for other successful requests  \n- Returns false on failure and sets error information\n\nInput Parameters for response():\n- $text: string - Raw response text with headers\n\nOutput for response():\n- array - Parsed JSON data from response\n\nInput Parameters for error():\n- $header: string - Response header\n- $body: string - Response body\n\nOutput for error():\n- void - Sets error and errorStr properties",
    "Canonical_solution": "namespace Think\\Upload\\Driver\\Qiniu;\n\nclass QiniuStorage\n{\n    public $QINIU_RSF_HOST = 'http://rsf.qbox.me';\n    public $QINIU_RS_HOST = 'http://rs.qbox.me';\n    public $QINIU_UP_HOST = 'http://up.qiniu.com';\n    public $timeout = '';\n\n    private function request($path, $method, $headers = null, $body = null)\n    {\n        $ch = curl_init($path);\n\n        $_headers = array('Expect:');\n        if (!is_null($headers) && is_array($headers)) {\n            foreach ($headers as $k => $v) {\n                array_push($_headers, \"{$k}: {$v}\");\n            }\n        }\n\n        $length = 0;\n        $date = gmdate('D, d M Y H:i:s \\G\\M\\T');\n\n        if (!is_null($body)) {\n            if (is_resource($body)) {\n                fseek($body, 0, SEEK_END);\n                $length = ftell($body);\n                fseek($body, 0);\n\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_INFILE, $body);\n                curl_setopt($ch, CURLOPT_INFILESIZE, $length);\n            } else {\n                $length = @strlen($body);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } else {\n            array_push($_headers, \"Content-Length: {$length}\");\n        }\n\n        array_push($_headers, \"Date: {$date}\");\n\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $_headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ('PUT' == $method || 'POST' == $method) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, 0);\n        }\n\n        if ('HEAD' == $method) {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        }\n\n        $response = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (200 == $status) {\n            if ('GET' == $method) {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    private function response($text)\n    {\n        $headers = explode(PHP_EOL, $text);\n        $items = array();\n        foreach ($headers as $header) {\n            $header = trim($header);\n            if (strpos($header, '{') !== false) {\n                $items = json_decode($header, 1);\n                break;\n            }\n        }\n        return $items;\n    }\n\n    private function error($header, $body)\n    {\n        list($status, $stash) = explode(\"\\r\\n\", $header, 2);\n        list($v, $code, $message) = explode(\" \", $status, 3);\n        $message = is_null($message) ? 'File Not Found' : \"[{$status}]:{$message}]\";\n        $this->error = $message;\n        $this->errorStr = json_decode($body, 1);\n        $this->errorStr = $this->errorStr['error'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class QiniuStorage {\n    public $QINIU_RSF_HOST = 'rsf.qiniu.com';\n    public $QINIU_RS_HOST = 'rs.qiniu.com';\n    public $QINIU_UP_HOST = 'upload.qiniu.com';\n    public $timeout = '5';\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, array $headers = null, $body = null) {\n        $url = $this->QINIU_UP_HOST . $path;\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => $this->timeout,\n            CURLOPT_HTTPHEADER => $headers ? array_map('trim', $headers) : [],\n            CURLOPT_CUSTOMREQUEST => $method,\n            CURLOPT_POSTFIELDS => $body,\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode === 0) {\n            $this->error = 'cURL error';\n            $this->errorStr = curl_error($ch);\n            return false;\n        }\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $this->response($body);\n        if ($httpCode >= 200 && $httpCode < 300) {\n            return $method === 'GET' ? $body : json_decode($body, true);\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        return json_decode($text, true);\n    }\n\n    public function error($header, $body) {\n        $data = json_decode($body, true);\n        $this->error = $data['code'] ?? 'Unknown error';\n        $this->errorStr = $data['message'] ?? 'No error message available';\n    }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests to the OpenAI API using cURL, with support for different content types, streaming, and proxy configuration.\n\nClass Description: The OpenAi class is designed to interact with OpenAI's API by sending HTTP requests. It manages API keys, content types, headers, and request configurations. The class supports both JSON and multipart/form-data content types, allows for request streaming, and can be configured to use a proxy.\n\nAttributes:\n\nengine: string - The default OpenAI engine to use (default: \"davinci\")\nmodel: string - The default model for completions (default: \"text-davinci-002\")\nchatModel: string - The default model for chat completions (default: \"gpt-3.5-turbo\")\nassistantsBetaVersion: string - The version for assistants API (default: \"v1\")\nheaders: array - Array of HTTP headers to be sent with requests\ncontentTypes: array - Mapping of content types to their header strings\ntimeout: int - cURL timeout in seconds (default: 0)\nstream_method: object - Callback method for streaming responses\ncustomUrl: string - Custom base URL to override the default OpenAI API URL\nproxy: string - Proxy server address if needed\ncurlInfo: array - Information about the last cURL request\n\nMethods:\n\n__construct: __construct(string $OPENAI_API_KEY) -> void - Initializes the class with the OpenAI API key and sets default headers\nsendRequest: sendRequest(string $url, string $method, array $opts = []) -> bool|string - Sends an HTTP request to the specified URL with given method and options\nbaseUrl: baseUrl(string &$url) -> void - Modifies the base URL if a custom URL is set",
    "Canonical_solution": "namespace Orhanerday\\OpenAi;\n\nuse Exception;\n\nclass OpenAi\n{\n    private string $engine = \"davinci\";\n    private string $model = \"text-davinci-002\";\n    private string $chatModel = \"gpt-3.5-turbo\";\n    private string $assistantsBetaVersion = \"v1\";\n    private array $headers;\n    private array $contentTypes;\n    private int $timeout = 0;\n    private object $stream_method;\n    private string $customUrl = \"\";\n    private string $proxy = \"\";\n    private array $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY)\n    {\n        $this->contentTypes = [\n            \"application/json\" => \"Content-Type: application/json\",\n            \"multipart/form-data\" => \"Content-Type: multipart/form-data\",\n        ];\n\n        $this->headers = [\n            $this->contentTypes[\"application/json\"],\n            \"Authorization: Bearer $OPENAI_API_KEY\",\n        ];\n    }\n\n    /**\n     * @param  string  $url\n     * @param  string  $method\n     * @param  array   $opts\n     * @return bool|string\n     */\n    private function sendRequest(string $url, string $method, array $opts = [])\n    {\n        $post_fields = json_encode($opts);\n\n        if (array_key_exists('file', $opts) || array_key_exists('image', $opts)) {\n            $this->headers[0] = $this->contentTypes[\"multipart/form-data\"];\n            $post_fields = $opts;\n        } else {\n            $this->headers[0] = $this->contentTypes[\"application/json\"];\n        }\n        $curl_info = [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => '',\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => $this->timeout,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => $method,\n            CURLOPT_POSTFIELDS => $post_fields,\n            CURLOPT_HTTPHEADER => $this->headers,\n        ];\n\n        if ($opts == []) {\n            unset($curl_info[CURLOPT_POSTFIELDS]);\n        }\n\n        if (! empty($this->proxy)) {\n            $curl_info[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if (array_key_exists('stream', $opts) && $opts['stream']) {\n            $curl_info[CURLOPT_WRITEFUNCTION] = $this->stream_method;\n        }\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, $curl_info);\n        $response = curl_exec($curl);\n\n        $info = curl_getinfo($curl);\n        $this->curlInfo = $info;\n\n        curl_close($curl);\n\n        if (! $response) {\n            throw new Exception(curl_error($curl));\n        }\n\n        return $response;\n    }\n\n    /**\n     * @param  string  $url\n     */\n    private function baseUrl(string &$url)\n    {\n        if ($this->customUrl != \"\") {\n            $url = str_replace(Url::ORIGIN, $this->customUrl, $url);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    public $headers = [];\n    public $contentTypes = ['json' => 'application/json', 'form' => 'multipart/form-data'];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = null;\n    public $proxy = null;\n    public $curlInfo = [];\n\n    public function __construct(string $OPENAI_API_KEY) {\n        $this->headers['Authorization'] = 'Bearer ' . $OPENAI_API_KEY;\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []): bool|string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout ?: 60);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if (isset($opts['data'])) {\n            if ($this->contentTypes['json'] === $this->getContentType($opts)) {\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            } else {\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n            }\n        }\n\n        if ($this->stream_method && $method === 'POST') {\n            curl_setopt($ch, CURLOPT_STREAM, true);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($ch, $data) {\n                return $this->stream_method->callback($data);\n            });\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        return $response;\n    }\n\n    public function baseUrl(string &$url): void {\n        if ($this->customUrl) {\n            $url = $this->customUrl . $url;\n        }\n    }\n\n    private function getContentType(array $opts): string {\n        return isset($opts['content_type']) ? $opts['content_type'] : 'json';\n    }\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, supports streaming for large files, and includes proxy configuration.\n\nAttributes:\n- request_url: string - The URL to send the request to\n- request_headers: array - Associative array of request headers\n- request_body: string - The request body content\n- response: string - The complete response from the server\n- response_headers: array - Parsed response headers\n- response_body: string - The response body content\n- response_code: int - HTTP response status code\n- response_info: array - Additional cURL response information\n- curl_handle: resource - The cURL handle resource\n- method: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\n- proxy: array|null - Proxy configuration details\n- username: string|null - Authentication username\n- password: string|null - Authentication password\n- curlopts: array|null - Additional cURL options\n- debug_mode: bool - Whether to enable debug mode\n- request_class: string - Class name for request objects\n- response_class: string - Class name for response objects\n- useragent: string - User agent string\n- read_file: string|null - File path for reading data\n- read_stream: resource|null - Stream resource for reading data\n- read_stream_size: int|null - Size of read stream\n- read_stream_read: int - Bytes read from stream\n- write_file: string|null - File path for writing data\n- write_stream: resource|null - Stream resource for writing data\n- seek_position: int|null - Position to seek in read stream\n- cacert_location: mixed - CA certificate location\n- ssl_verification: bool - Whether to verify SSL\n- registered_streaming_read_callback: callable|null - Callback for streaming read\n- registered_streaming_write_callback: callable|null - Callback for streaming write\n\nMethods:\n- __construct(string|null $url, array|null $proxy, array|null $helpers) -> self - Initialize the request object\n- __destruct() -> self - Clean up resources\n- set_credentials(string $user, string $pass) -> self - Set authentication credentials\n- add_header(string $key, string $value) -> self - Add a request header\n- remove_header(string $key) -> self - Remove a request header\n- set_method(string $method) -> self - Set the HTTP method\n- set_useragent(string $ua) -> self - Set the user agent\n- set_body(string $body) -> self - Set the request body\n- set_request_url(string $url) -> self - Set the request URL\n- set_curlopts(array $curlopts) -> self - Set additional cURL options\n- set_read_stream_size(int $size) -> self - Set read stream size\n- set_read_stream(resource $resource, int|null $size) -> self - Set read stream resource\n- set_read_file(string $location) -> self - Set read file location\n- set_write_stream(resource $resource) -> self - Set write stream resource\n- set_write_file(string $location) -> self - Set write file location\n- set_proxy(string $proxy) -> self - Configure proxy settings\n- set_seek_position(int|null $position) -> self - Set seek position for read stream\n- register_streaming_read_callback(callable $callback) -> self - Register read callback\n- register_streaming_write_callback(callable $callback) -> self - Register write callback\n- streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Handle streaming read\n- streaming_write_callback(resource $curl_handle, string $data) -> int - Handle streaming write\n- prep_request() -> resource - Prepare and return cURL handle\n- process_response(resource|null $curl_handle, string|null $response) -> mixed - Process the response\n- send_request(bool $parse = false) -> mixed - Send the request and get response\n- get_response_header(string|null $header) -> mixed - Get response header(s)\n- get_response_body() -> string - Get response body\n- get_response_code() -> int - Get response status code",
    "Canonical_solution": "class RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request']))\n        {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response']))\n        {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy)\n        {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream))\n        {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream))\n        {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key]))\n        {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0)\n        {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0)\n            {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0)\n                {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size)\n        {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream))\n        {\n            if (fseek($this->read_stream, $this->seek_position) !== 0)\n            {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback)\n        {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length)\n        {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false)\n            {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback)\n        {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification)\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        }\n        else\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true)\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        }\n        elseif (is_string($this->cacert_location))\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode)\n        {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir'))\n        {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass']))\n            {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib'))\n        {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers))\n        {\n            $temp_headers = array();\n\n            foreach ($this->request_headers as $k => $v)\n            {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method)\n        {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream))\n                {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0)\n                    {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream))\n                {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0)\n        {\n            foreach ($this->curlopts as $k => $v)\n            {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response)\n        {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle))\n        {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header)\n            {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1])?$kv[1]:'';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response)\n            {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false)\n        {\n            throw new RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n\n        curl_close($curl_handle);\n\n        if ($parse)\n        {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header)\n        {\n            return $this->response_headers[strtolower($header)];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass RequestCore {\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct(string $url = null, array $proxy = null, array $helpers = []) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->curlopts = [];\n        $this->debug_mode = false;\n        $this->request_class = 'Request';\n        $this->response_class = 'Response';\n        $this->useragent = 'PHP/' . phpversion();\n        $this->ssl_verification = true;\n        $this->curl_handle = false;\n    }\n\n    public function __destruct() {\n        if ($this->curl_handle) {\n            curl_close($this->curl_handle);\n        }\n    }\n\n    public function set_credentials(string $user, string $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header(string $key, string $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header(string $key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method(string $method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent(string $ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body(string $body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url(string $url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts(array $curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size(int $size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream(resource $resource, int $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file(string $location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream(resource $resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file(string $location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy(string $proxy) {\n        $this->proxy = explode(':', $proxy);\n        return $this;\n    }\n\n    public function set_seek_position(int $position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback(callable $callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback(callable $callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) {\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback(resource $curl_handle, string $data) {\n        return fwrite($curl_handle, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt_array($this->curl_handle, [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_ENCODING => '',\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n            CURLOPT_PROXY => $this->proxy[0] . ':' . $this->proxy[1] ?? '',\n            CURLOPT_PROXYUSERPWD => $this->username . ':' . $this->password,\n            CURLOPT_DEBUGFUNCTION => $this->debug_mode ? 'curl_debug_callback' : null,\n            CURLOPT_WRITEFUNCTION => $this->registered_streaming_write_callback ?? 'curl_write_callback',\n            CURLOPT_READFUNCTION => $this->registered_streaming_read_callback ?? 'curl_read_callback'\n        ]);\n\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($this->curl_handle, $key, $value);\n        }\n\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_PUT, true);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response(resource $curl_handle, string $response) {\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_headers = [];\n        $headers = [];\n        $body = '';\n\n        $lines = explode(\"\\r\\n\", $response);\n        foreach ($lines as $line) {\n            if (strpos($line, 'HTTP/') === 0) {\n                $this->response_code = (int)str_replace('HTTP/', '', $line);\n            } else {\n                $parts = explode(':', $line, 2);\n                if (count($parts) === 2) {\n                    $headers[$parts[0]] = $parts[1];\n                }\n            }\n        }\n\n        $this->response_headers = $headers;\n        $this->response_body = $body;\n        return $this;\n    }\n\n    public function send_request(bool $parse = false) {\n        $this->prep_request();\n        $this->process_response($this->curl_handle, curl_exec($this->curl_handle));\n        return $this;\n    }\n\n    public function get_response_header(string $header = null) {\n        return $header ? $this->response_headers[$header] : $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL for making API requests to Facebook's various domains, with support for handling authentication, error management, and request configuration.\n\nClass Description: The BaseFacebook class provides core functionality for interacting with Facebook's APIs using cURL. It handles request construction, authentication, error handling, and includes utility methods for common operations. The class supports different Facebook domains and manages API credentials.\n\nAttributes:\n\nAttribute1: [array] - $CURL_OPTS - Default cURL options including timeout settings and user agent\nAttribute2: [array] - $DROP_QUERY_PARAMS - Query parameters to be removed from requests\nAttribute3: [array] - $DOMAIN_MAP - Mapping of Facebook API domains and their base URLs\nAttribute4: [string] - $appId - Facebook application ID\nAttribute5: [string] - $appSecret - Facebook application secret\nAttribute6: [mixed] - $user - Current authenticated user\nAttribute7: [mixed] - $signedRequest - Signed request data\nAttribute8: [mixed] - $state - Application state\nAttribute9: [string|null] - $accessToken - Current access token\nAttribute10: [bool] - $fileUploadSupport - Flag for file upload support\nAttribute11: [bool] - $trustForwarded - Flag for trusting forwarded headers\n\nMethods:\n\nMethod1: [makeRequest]($url, $params, $ch=null) -> [mixed] - Makes an HTTP request using cURL with the specified URL and parameters. Handles errors and SSL certificate verification.\nMethod2: [_oauthRequest]($url, $params) -> [mixed] - Makes an OAuth-authenticated request by adding access token and app secret proof to parameters before making the request.\nMethod3: [getAppSecretProof]($access_token) -> [string] - Generates an app secret proof using HMAC-SHA256 for the given access token.\nMethod4: [errorLog]($msg) -> [void] - Logs error messages, with special handling for CLI environments.",
    "Canonical_solution": "class BaseFacebook\n{\n    const VERSION = '3.2.2';\n    const SIGNED_REQUEST_ALGORITHM = 'HMAC-SHA256';\n\n    public static $CURL_OPTS = array(\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT        => 60,\n        CURLOPT_USERAGENT      => 'facebook-php-3.2',\n    );\n\n    protected static $DROP_QUERY_PARAMS = array(\n        'code',\n        'state',\n        'signed_request',\n    );\n\n    public static $DOMAIN_MAP = array(\n        'api'         => 'https://api.facebook.com/',\n        'api_video'   => 'https://api-video.facebook.com/',\n        'api_read'    => 'https://api-read.facebook.com/',\n        'graph'       => 'https://graph.facebook.com/',\n        'graph_video' => 'https://graph-video.facebook.com/',\n        'www'         => 'https://www.facebook.com/',\n    );\n\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken = null;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    protected function makeRequest($url, $params, $ch=null)\n    {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n\n        $opts = self::$CURL_OPTS;\n        if ($this->getFileUploadSupport()) {\n            $opts[CURLOPT_POSTFIELDS] = $params;\n        } else {\n            $opts[CURLOPT_POSTFIELDS] = http_build_query($params, null, '&');\n        }\n        $opts[CURLOPT_URL] = $url;\n\n        if (isset($opts[CURLOPT_HTTPHEADER])) {\n            $existing_headers = $opts[CURLOPT_HTTPHEADER];\n            $existing_headers[] = 'Expect:';\n            $opts[CURLOPT_HTTPHEADER] = $existing_headers;\n        } else {\n            $opts[CURLOPT_HTTPHEADER] = array('Expect:');\n        }\n\n        curl_setopt_array($ch, $opts);\n        $result = curl_exec($ch);\n\n        if (curl_errno($ch) == 60) {\n            self::errorLog('Invalid or no certificate authority found, using bundled information');\n            curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/fb_ca_chain_bundle.crt');\n            $result = curl_exec($ch);\n        }\n\n        if ($result === false && empty($opts[CURLOPT_IPRESOLVE])) {\n            $matches = array();\n            $regex = '/Failed to connect to ([^:].*): Network is unreachable/';\n            if (preg_match($regex, curl_error($ch), $matches)) {\n                if (strlen(inet_pton($matches[1]) ?? '') === 16) {\n                    self::errorLog('Invalid IPv6 configuration on server, Please disable or get native IPv6 on your server.');\n                    self::$CURL_OPTS[CURLOPT_IPRESOLVE] = CURL_IPRESOLVE_V4;\n                    curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);\n                    $result = curl_exec($ch);\n                }\n            }\n        }\n\n        if ($result === false) {\n            $e = new FacebookApiException(array(\n                'error_code' => curl_errno($ch),\n                'error' => array(\n                    'message' => curl_error($ch),\n                    'type' => 'CurlException',\n                ),\n            ));\n            curl_close($ch);\n            throw $e;\n        }\n        curl_close($ch);\n        return $result;\n    }\n\n    protected function _oauthRequest($url, $params)\n    {\n        if (!isset($params['access_token'])) {\n            $params['access_token'] = $this->getAccessToken();\n        }\n\n        if (isset($params['access_token'])) {\n            $params['appsecret_proof'] = $this->getAppSecretProof($params['access_token']);\n        }\n\n        foreach ($params as $key => $value) {\n            if (!is_string($value)) {\n                $params[$key] = json_encode($value);\n            }\n        }\n\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token)\n    {\n        return hash_hmac('sha256', $access_token, $this->getAppSecret());\n    }\n\n    protected static function errorLog($msg)\n    {\n        if (php_sapi_name() != 'cli') {\n            error_log($msg);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_USERAGENT => 'BaseFacebook/1.0',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_CAINFO => __DIR__ . '/cacert.pem'\n    ];\n\n    protected $DROP_QUERY_PARAMS = ['access_token', 'fb_dtsg', 'lsd'];\n\n    protected $DOMAIN_MAP = [\n        'graph' => 'https://graph.facebook.com',\n        'api' => 'https://api.facebook.com'\n    ];\n\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($appId, $appSecret) {\n        $this->appId = $appId;\n        $this->appSecret = $appSecret;\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        $urlParts = parse_url($url);\n        $queryParams = [];\n        if (isset($urlParts['query'])) {\n            parse_str($urlParts['query'], $queryParams);\n            foreach ($this->DROP_QUERY_PARAMS as $param) {\n                if (isset($queryParams[$param])) {\n                    unset($queryParams[$param]);\n                }\n            }\n            $urlParts['query'] = http_build_query($queryParams);\n        }\n        $fullUrl = $urlParts['scheme'] . '://' . $urlParts['host'] . $urlParts['path'] . (isset($urlParts['query']) ? '?' . $urlParts['query'] : '');\n\n        $ch = $ch ?? curl_init($fullUrl);\n\n        foreach ($this->CURL_OPTS as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n\n        if (!empty($params)) {\n            if ($this->fileUploadSupport) {\n                $postFields = [];\n                foreach ($params as $k => $v) {\n                    if (is_array($v)) {\n                        $postFields[] = $k . '=' . json_encode($v);\n                    } else {\n                        $postFields[] = $k . '=' . urlencode($v);\n                    }\n                }\n                curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $postFields));\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        }\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $this->errorLog('cURL error: ' . curl_error($ch));\n            return false;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            $this->errorLog(\"HTTP error: $httpCode\");\n            return false;\n        }\n\n        return $response;\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $proof = $this->getAppSecretProof($this->accessToken);\n        $params['access_token'] = $this->accessToken;\n        $params['app_secret_proof'] = $proof;\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (PHP_SAPI === 'cli') {\n            echo $msg . \"\\n\";\n        } else {\n            error_log($msg);\n        }\n    }\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement a class for interacting with a pretreatment API service that handles task processing and querying, using HTTP requests with Guzzle client in PHP.\n\nClass Description: The Pretreat class provides functionality to submit tasks for processing and query their status through an API service. It handles request signing, parameter preparation, and response processing.\n\nAttributes:\n\nAttribute1: Config $config - Configuration object containing service settings like timeout, service name, and endpoint URLs\n\nMethods:\n\nMethod1: __construct(Config $config) -> void - Initializes the Pretreat instance with configuration. Throws an exception if processNotifyUrl is not configured.\n\nMethod2: process(array $tasks, array $optionalParams = []) -> array - Submits tasks for processing. Takes an array of tasks and optional parameters, returns the API response as an associative array.\n\nMethod3: query(array $taskIds, string $path) -> array|bool - Queries the status of tasks by their IDs. Returns an array of tasks if successful, or false on failure.",
    "Canonical_solution": "namespace Upyun\\Api;\n\nuse GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\nuse Upyun\\Util;\n\nclass Pretreat\n{\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        if (!$config->processNotifyUrl) {\n            throw new \\Exception(\"should config prosessNotifyUrl first.\");\n        }\n        $this->config = $config;\n    }\n\n    public function process($tasks, $optionalParams = array())\n    {\n        $encodedTasks = Util::base64Json($tasks);\n\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'notify_url' => $this->config->processNotifyUrl,\n            'tasks' => $encodedTasks,\n        );\n\n        $params = array_merge($params, $optionalParams);\n\n        $path = '/pretreatment/';\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'form_params' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n\n    public function query($taskIds, $path)\n    {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'task_ids' => implode(',', $taskIds)\n        );\n        $path = $path . '?' . http_build_query($params);\n\n        $method = 'GET';\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders\n        ]);\n\n        if ($response->getStatusCode() === 200) {\n            $body = $response->getBody()->getContents();\n            $result = json_decode($body, true);\n            if (is_array($result)) {\n                return $result['tasks'];\n            }\n        }\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "use GuzzleHttp\\Client;\nuse Exception;\nuse Config;\n\nclass Pretreat {\n    protected $config;\n\n    public function __construct(Config $config) {\n        if (!isset($config->processNotifyUrl)) {\n            throw new Exception('processNotifyUrl is not configured');\n        }\n        $this->config = $config;\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = [\n            'tasks' => $tasks,\n            'optional_params' => $optionalParams,\n        ];\n        $sign = $this->generateSign($params);\n        $params['sign'] = $sign;\n\n        $client = new Client();\n        $response = $client->post($this->config->processNotifyUrl, [\n            'json' => $params\n        ]);\n\n        $body = json_decode($response->getBody(), true);\n        return $body;\n    }\n\n    private function generateSign(array $params): string {\n        $secret = $this->config->secretKey ?? 'default_secret';\n        $data = json_encode($params, JSON_UNESCAPED_UNICODE);\n        return hash('sha256', $data . $secret);\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        $params = [\n            'task_ids' => $taskIds,\n            'path' => $path\n        ];\n\n        $client = new Client();\n        try {\n            $url = $this->config->processNotifyUrl . '/' . $path;\n            $response = $client->get($url, ['query' => $params]);\n            if ($response->getStatusCode() === 200) {\n                $body = json_decode($response->getBody(), true);\n                return $body;\n            } else {\n                return false;\n            }\n        } catch (\\Exception $e) {\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for GET/POST methods, custom headers, cookies, and SSL configuration.\n\nFunction Description: The function should make HTTP requests to a specified URL with optional cookies and user agent. It should handle both HTTP and HTTPS protocols, with configurable SSL verification. The function should follow redirects (302 status) and return the response data or false on failure. Timeouts should be configurable for connection and request execution.\n\nInput:\n- $url: string - The target URL for the HTTP request\n- $cookies: string (optional) - Cookie string to be sent with the request\n- $useragent: string (optional) - User-Agent header value\n- $method: string (optional) - HTTP method ('GET' or 'POST'), defaults to 'GET'\n\nOutput:\n- Returns: mixed - The response data as string on success (HTTP 200), follows redirects automatically (HTTP 302), or returns false on failure",
    "Canonical_solution": "function download($url, $cookies='', $useragent='', $method = 'GET')\n{\n    $header = array(\n        \"Content-Type:application/x-www-form-urlencoded\",\n        'User-Agent: '.$useragent);\n    $ch = curl_init();\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n    }\n    if (stripos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_SSLVERSION, 1);\n    }\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 600);\n    $data = curl_exec($ch);\n    $status = curl_getinfo($ch);\n    curl_close($ch);\n    if (isset($status['http_code']) && $status['http_code'] == 200) {\n        return $data;\n    }\n    if (isset($status['http_code']) && $status['http_code'] == 302) {\n        return download($status['redirect_url'], $cookies, $useragent);\n    }\n    return $data;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "wrong_result": "function makeRequest($url, $cookies = null, $useragent = null, $method = 'GET', $connect_timeout = 30, $request_timeout = 30, $verify_ssl = true) { $ch = curl_init(); curl_setopt_array($ch, array( CURLOPT_URL => $url, CURLOPT_RETURNTRANSFER => true, CURLOPT_FOLLOWLOCATION => true, CURLOPT_HEADER => false, CURLOPT_TIMEOUT => $request_timeout, CURLOPT_CONNECTTIMEOUT => $connect_timeout, CURLOPT_SSL_VERIFYPEER => $verify_ssl, CURLOPT_SSL_VERIFYHOST => $verify_ssl, CURLOPT_COOKIE => $cookies, CURLOPT_USERAGENT => $useragent )); if ($method === 'POST') { curl_setopt($ch, CURLOPT_POST, 1); } $response = curl_exec($ch); if ($response === false) { return false; } $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); return ($http_code == 200) ? $response : false; }"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a PHP class that fetches currency conversion rates from an external API and stores them in a repository.\n\nClass Description: The FetchConversionRate class is responsible for retrieving currency conversion rates between a base currency and all other available currencies. It uses Guzzle HTTP client to make requests to an external currency API and stores the results in a conversion rate repository.\n\nAttributes:\n- baseCurrencyId: int - The ID of the base currency for which conversion rates will be fetched\n- currencyRepository: CurrencyRepository - Repository for accessing currency data\n- conversionRateRepository: ConversionRateRepository - Repository for storing conversion rates\n\nMethods:\n- __construct(int $baseCurrencyId) -> void - Constructor that initializes the base currency ID\n- handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) -> void - Main method that executes the conversion rate fetching process:\n  - Retrieves all currencies from the repository\n  - For each target currency, makes an API request to get the conversion rate\n  - Stores or updates the conversion rate in the repository\n  - Skips invalid currencies and handles API request failures gracefully",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Exception;\n\nclass FetchConversionRate\n{\n    protected $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n    }\n\n    public function handle(\n        CurrencyRepository $currencyRepository,\n        ConversionRateRepository $conversionRateRepository\n    ): void {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $baseCurrency = $this->currencyRepository->getById($this->baseCurrencyId);\n\n        if (!$baseCurrency || !$baseCurrency->iso) {\n            return;\n        }\n\n        $client = new Client();\n\n        foreach ($this->currencyRepository->getAll() as $targetCurrency) {\n            if (!$targetCurrency->iso || $baseCurrency->iso === $targetCurrency->iso) {\n                continue;\n            }\n\n            $url = sprintf(\n                'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/%s.json',\n                $baseCurrency->iso_lowercased,\n            );\n\n            try {\n                $response = $client->request('GET', $url);\n                $decoded_response = json_decode($response->getBody(), true);\n                $rate = $decoded_response[$baseCurrency->iso_lowercased][$targetCurrency->iso_lowercased];\n            } catch (Exception) {\n                continue;\n            }\n\n            $this->conversionRateRepository->createOrUpdate(\n                $baseCurrency->id,\n                $targetCurrency->id,\n                $rate\n            );\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "<?php\n\nclass FetchConversionRate {\n    private $baseCurrencyId;\n    private $client;\n    private $currencyRepository;\n    private $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId) {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->client = new \\GuzzleHttp\\Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $currencyRepository->getAllCurrencies();\n\n        foreach ($currencies as $currency) {\n            try {\n                $url = \"https://api.example.com/conversion?base={$this->baseCurrencyId}&target={$currency->getCode()}\";\n                $response = $this->client->get($url);\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $conversionRate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->save($this->baseCurrencyId, $currency->getCode(), $conversionRate);\n                }\n            } catch (\\Exception $e) {\n                // Skip invalid currency\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for making HTTP requests with support for various methods (GET, POST, PUT, DELETE, PATCH), custom headers, and request/response logging.\n\nClass Description: The Curl class is an HTTP client implementation that uses PHP's cURL extension to send HTTP requests and handle responses. It supports common HTTP methods, allows configuration of cURL options, handles request headers and parameters, and provides detailed response information including headers, status code, and body.\n\nAttributes:\n\ncurlOptions: [array] - Default cURL options including timeout, SSL verification, redirects, etc.\nrequestArguments: [array] - Stores the current request parameters including URI, method, parameters, and headers.\nrequestHeader: [array] - Default request headers that can be extended or overridden.\nresponseBody: [string] - Stores the response body from the last request.\nresponseHeader: [array] - Stores the response headers from the last request.\nresponseHttpCode: [int] - Stores the HTTP status code from the last request.\nresponseClientError: [string|null] - Stores any cURL error from the last request.\nresponseClientInfo: [array] - Stores cURL info from the last request.\nlogger: [object|null] - Optional logger instance for request/response logging.\n\nMethods:\n\nrequest: [request](string $uri, string $method = 'GET', array $parameters = [], array $headers = [], bool $multipart = false) -> string - Makes an HTTP request to the specified URI with given method, parameters and headers. Returns the response body.\ngetResponse: [getResponse]() -> array - Returns complete request/response information including headers, status code, body, and client info.\nsetCurlOptions: [setCurlOptions](array $curlOptions) -> void - Sets additional cURL options.\nsetLogger: [setLogger](object $logger) -> void - Sets a logger instance for request/response logging.\ngetResponseBody: [getResponseBody]() -> string - Returns the response body from the last request.\ngetResponseHeader: [getResponseHeader]() -> array - Returns the response headers from the last request.\ngetResponseHttpCode: [getResponseHttpCode]() -> int - Returns the HTTP status code from the last request.\ngetResponseClientError: [getResponseClientError]() -> string|null - Returns any cURL error from the last request.\nfetchResponseHeader: [fetchResponseHeader](resource $curl, string $header) -> int - Callback function for processing response headers.\nprepareRequestHeaders: [prepareRequestHeaders]() -> array - Prepares request headers in cURL format.\ngetResponseClientInfo: [getResponseClientInfo]() -> array - Returns cURL info from the last request.\ngetRequestArguments: [getRequestArguments]() -> array - Returns the arguments used for the last request.",
    "Canonical_solution": "namespace Hybridauth\\HttpClient;\n\nclass Curl implements HttpClientInterface\n{\n    protected $curlOptions = [\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_CONNECTTIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => false,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n        CURLINFO_HEADER_OUT => true,\n        CURLOPT_ENCODING => 'identity',\n        CURLOPT_USERAGENT => 'Hybridauth, PHP Social Authentication Library (https://github.com/hybridauth/hybridauth)',\n    ];\n\n    protected $requestArguments = [];\n    protected $requestHeader = [\n        'Accept' => '*/*',\n        'Cache-Control' => 'max-age=0',\n        'Connection' => 'keep-alive',\n        'Expect' => '',\n        'Pragma' => '',\n    ];\n\n    protected $responseBody = '';\n    protected $responseHeader = [];\n    protected $responseHttpCode = 0;\n    protected $responseClientError = null;\n    protected $responseClientInfo = [];\n    protected $logger = null;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false)\n    {\n        $this->requestHeader = array_replace($this->requestHeader, (array)$headers);\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $this->requestHeader,\n        ];\n\n        $curl = curl_init();\n\n        switch ($method) {\n            case 'GET':\n            case 'DELETE':\n                unset($this->curlOptions[CURLOPT_POST]);\n                unset($this->curlOptions[CURLOPT_POSTFIELDS]);\n                $uri = $uri . (strpos($uri, '?') ? '&' : '?') . http_build_query($parameters);\n                if ($method === 'DELETE') {\n                    $this->curlOptions[CURLOPT_CUSTOMREQUEST] = 'DELETE';\n                }\n                break;\n            case 'PUT':\n            case 'POST':\n            case 'PATCH':\n                $body_content = $multipart ? $parameters : http_build_query($parameters);\n                if (isset($this->requestHeader['Content-Type'])\n                    && $this->requestHeader['Content-Type'] == 'application/json'\n                ) {\n                    $body_content = json_encode($parameters);\n                }\n\n                if ($method === 'POST') {\n                    $this->curlOptions[CURLOPT_POST] = true;\n                } else {\n                    $this->curlOptions[CURLOPT_CUSTOMREQUEST] = $method;\n                }\n                $this->curlOptions[CURLOPT_POSTFIELDS] = $body_content;\n                break;\n        }\n\n        $this->curlOptions[CURLOPT_URL] = $uri;\n        $this->curlOptions[CURLOPT_HTTPHEADER] = $this->prepareRequestHeaders();\n        $this->curlOptions[CURLOPT_HEADERFUNCTION] = [$this, 'fetchResponseHeader'];\n\n        foreach ($this->curlOptions as $opt => $value) {\n            curl_setopt($curl, $opt, $value);\n        }\n\n        $response = curl_exec($curl);\n\n        $this->responseBody = $response;\n        $this->responseHttpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        $this->responseClientError = curl_error($curl);\n        $this->responseClientInfo = curl_getinfo($curl);\n\n        if ($this->logger) {\n            $this->logger->debug(sprintf('%s::request( %s, %s ), response:', get_class($this), $uri, $method), $this->getResponse());\n            if (false === $response) {\n                $this->logger->error(sprintf('%s::request( %s, %s ), error:', get_class($this), $uri, $method), [$this->responseClientError]);\n            }\n        }\n\n        curl_close($curl);\n        return $this->responseBody;\n    }\n\n    public function getResponse()\n    {\n        $curlOptions = $this->curlOptions;\n        $curlOptions[CURLOPT_HEADERFUNCTION] = '*omitted';\n        return [\n            'request' => $this->getRequestArguments(),\n            'response' => [\n                'code' => $this->getResponseHttpCode(),\n                'headers' => $this->getResponseHeader(),\n                'body' => $this->getResponseBody(),\n            ],\n            'client' => [\n                'error' => $this->getResponseClientError(),\n                'info' => $this->getResponseClientInfo(),\n                'opts' => $curlOptions,\n            ],\n        ];\n    }\n\n    public function setCurlOptions($curlOptions)\n    {\n        foreach ($curlOptions as $opt => $value) {\n            $this->curlOptions[$opt] = $value;\n        }\n    }\n\n    public function setLogger($logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader()\n    {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode()\n    {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError()\n    {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo()\n    {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments()\n    {\n        return $this->requestArguments;\n    }\n\n    protected function fetchResponseHeader($curl, $header)\n    {\n        $pos = strpos($header, ':');\n        if (!empty($pos)) {\n            $key = str_replace('-', '_', strtolower(substr($header, 0, $pos)));\n            $value = trim(substr($header, $pos + 2));\n            $this->responseHeader[$key] = $value;\n        }\n        return strlen($header);\n    }\n\n    protected function prepareRequestHeaders()\n    {\n        $headers = [];\n        foreach ($this->requestHeader as $header => $value) {\n            $headers[] = trim($header) . ': ' . trim($value);\n        }\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Curl {\n    public $curlOptions = [];\n    public $requestArguments = [];\n    public $requestHeader = [];\n    public $responseBody = '';\n    public $responseHeader = [];\n    public $responseHttpCode = 0;\n    public $responseClientError = null;\n    public $responseClientInfo = [];\n    public $logger = null;\n\n    public function request($uri, $method = 'GET', array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $curl = curl_init();\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $headers\n        ];\n\n        if ($method === 'GET') {\n            $uri .= '?' . http_build_query($parameters);\n        }\n        curl_setopt($curl, CURLOPT_URL, $uri);\n\n        foreach ($this->curlOptions as $option => $value) {\n            curl_setopt($curl, $option, $value);\n        }\n\n        switch ($method) {\n            case 'POST':\n                curl_setopt($curl, CURLOPT_POST, true);\n                break;\n            case 'PUT':\n                curl_setopt($curl, CURLOPT_PUT, true);\n                break;\n            case 'DELETE':\n                curl_setopt($curl, CURLOPT_DELETE, true);\n                break;\n            case 'PATCH':\n                curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');\n                break;\n        }\n\n        $headers = $this->prepareRequestHeaders($headers);\n        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method === 'POST') {\n            if ($multipart) {\n                curl_setopt($curl, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                $encoded = http_build_query($parameters);\n                curl_setopt($curl, CURLOPT_POSTFIELDS, $encoded);\n            }\n        }\n\n        curl_setopt($curl, CURLOPT_HEADER, true);\n        curl_setopt($curl, CURLOPT_WRITEFUNCTION, [$this, 'fetchResponseHeader']);\n\n        $response = curl_exec($curl);\n\n        if ($response === false) {\n            $this->responseClientError = curl_error($curl);\n            $this->responseClientInfo = curl_getinfo($curl);\n            return '';\n        }\n\n        $this->responseHttpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        $this->responseBody = $response;\n\n        if ($this->logger !== null) {\n            $this->logger->log(\"Request: \" . $uri . \" \" . $method);\n            $this->logger->log(\"Response: \" . $this->responseHttpCode . \" \" . $this->responseBody);\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo\n        ];\n    }\n\n    public function setCurlOptions(array $curlOptions): void {\n        $this->curlOptions = $curlOptions;\n    }\n\n    public function setLogger(object $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): string|null {\n        return $this->responseClientError;\n    }\n\n    public function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n\n    public function fetchResponseHeader(resource $curl, string $header): int {\n        $this->responseHeader[] = $header;\n        return strlen($header);\n    }\n\n    public function prepareRequestHeaders(array $headers): array {\n        $defaultHeaders = $this->requestHeader;\n        $mergedHeaders = array_merge($defaultHeaders, $headers);\n        return $mergedHeaders;\n    }\n}"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a PHP class that interacts with the Xiami music API to fetch details about songs, albums, or collections using cURL for HTTP requests.\n\nClass Description: The HermitJson class provides functionality to make HTTP requests to the Xiami API and retrieve JSON responses containing music details. It handles different types of requests (song, album, or collection) through a single method.\n\nAttributes: \n[This class has no explicitly defined attributes in the reference code]\n\nMethods:\n1: xiami_http(int $type, string $id) -> array|bool - Makes an HTTP request to the Xiami API based on the specified type and ID. Returns the decoded JSON response as an array or false on failure.\n   - $type: Integer specifying request type (0 for song, 1 for album, 2 for collection)\n   - $id: String containing the ID of the requested item\n   - Returns: Array containing the API response data or false if the request fails",
    "Canonical_solution": "class HermitJson\n{\n    public function __construct()\n    {\n    }\n\n    private function xiami_http($type, $id)\n    {\n        switch($type){\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&r=song/detail\";\n                break;\n\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&r=album/detail\";\n                break;\n\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&type=collectId&r=collect/detail\";\n                break;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_REFERER, \"http://m.xiami.com/\");\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53');\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        $cexecute = curl_exec($ch);\n        @curl_close($ch);\n\n        if ($cexecute) {\n            $result = json_decode($cexecute, TRUE);\n            return $result;\n        } else {\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class HermitJson {\n    public function xiami_http(int $type, string $id): array|bool {\n        $urls = [\n            0 => 'https://api.xiami.com/song/getId?id=' . $id,\n            1 => 'https://api.xiami.com/album/getId?id=' . $id,\n            2 => 'https://api.xiami.com/collection/getId?id=' . $id\n        ];\n\n        if (!isset($urls[$type])) {\n            return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $urls[$type]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        $response = curl_exec($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode !== 200) {\n            return false;\n        }\n\n        $jsonResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $jsonResponse;\n    }\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a PHP HTTP client class that handles various types of HTTP requests (GET, POST, DELETE, multipart POST) using cURL, with proper error handling and response processing.\n\nClass Description: The Client class provides static methods to send HTTP requests and process responses. It handles request construction, cURL session management, response parsing, and error handling. The class supports standard HTTP methods and multipart form data for file uploads.\n\nAttributes: (This class has no instance attributes as all methods are static)\n\nMethods:\n\nMethod1: get(string $url, array $headers = array()) -> Response - Sends a GET request to the specified URL with optional headers.\n\nMethod2: delete(string $url, array $headers = array()) -> Response - Sends a DELETE request to the specified URL with optional headers.\n\nMethod3: post(string $url, mixed $body, array $headers = array()) -> Response - Sends a POST request with the given body to the specified URL with optional headers.\n\nMethod4: multipartPost(string $url, array $fields, string $name, string $fileName, string $fileBody, string $mimeType = null, array $headers = array()) -> Response - Sends a multipart/form-data POST request for file upload with additional form fields.\n\nMethod5: sendRequest(Request $request) -> Response - Internal method that executes the cURL request and returns a Response object. Handles request setup, execution, and response processing.\n\nMethod6: userAgent() -> string - Generates a User-Agent string with SDK, system, and PHP version information.\n\nMethod7: parseHeaders(string $raw) -> array - Parses raw HTTP response headers into an associative array.\n\nMethod8: escapeQuotes(string $str) -> string - Escapes quotes in a string for use in HTTP headers.\n\nMethod9: ucwordsHyphen(string $str) -> string - Properly capitalizes hyphenated header names.",
    "Canonical_solution": "namespace Qiniu\\Http;\n\nuse Qiniu\\Config;\nuse Qiniu\\Http\\Request;\nuse Qiniu\\Http\\Response;\n\nfinal class Client\n{\n    public static function get($url, array $headers = array())\n    {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, array $headers = array())\n    {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, array $headers = array())\n    {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(\n        $url,\n        $fields,\n        $name,\n        $fileName,\n        $fileBody,\n        $mimeType = null,\n        array $headers = array()\n    ) {\n        $data = array();\n        $mimeBoundary = md5(microtime());\n\n        foreach ($fields as $key => $val) {\n            array_push($data, '--' . $mimeBoundary);\n            array_push($data, \"Content-Disposition: form-data; name=\\\"$key\\\"\");\n            array_push($data, '');\n            array_push($data, $val);\n        }\n\n        array_push($data, '--' . $mimeBoundary);\n        $finalMimeType = empty($mimeType) ? 'application/octet-stream' : $mimeType;\n        $finalFileName = self::escapeQuotes($fileName);\n        array_push($data, \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$finalFileName\\\"\");\n        array_push($data, \"Content-Type: $finalMimeType\");\n        array_push($data, '');\n        array_push($data, $fileBody);\n\n        array_push($data, '--' . $mimeBoundary . '--');\n        array_push($data, '');\n\n        $body = implode(\"\\r\\n\", $data);\n        $contentType = 'multipart/form-data; boundary=' . $mimeBoundary;\n        $headers['Content-Type'] = $contentType;\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    private static function userAgent()\n    {\n        $sdkInfo = \"QiniuPHP/\" . Config::SDK_VER;\n        $systemInfo = php_uname(\"s\");\n        $machineInfo = php_uname(\"m\");\n        $envInfo = \"($systemInfo/$machineInfo)\";\n        $phpVer = phpversion();\n        $ua = \"$sdkInfo $envInfo PHP/$phpVer\";\n        return $ua;\n    }\n\n    public static function sendRequest($request)\n    {\n        $t1 = microtime(true);\n        $ch = curl_init();\n        $options = array(\n            CURLOPT_USERAGENT => self::userAgent(),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST => $request->method,\n            CURLOPT_URL => $request->url,\n        );\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            $options[CURLOPT_FOLLOWLOCATION] = true;\n        }\n\n        if (!empty($request->headers)) {\n            $headers = array();\n            foreach ($request->headers as $key => $val) {\n                array_push($headers, \"$key: $val\");\n            }\n            $options[CURLOPT_HTTPHEADER] = $headers;\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));\n\n        if (!empty($request->body)) {\n            $options[CURLOPT_POSTFIELDS] = $request->body;\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $t2 = microtime(true);\n        $duration = round($t2 - $t1, 3);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $r = new Response(-1, $duration, array(), null, curl_error($ch));\n            curl_close($ch);\n            return $r;\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = self::parseHeaders(substr($result, 0, $header_size));\n        $body = substr($result, $header_size);\n        curl_close($ch);\n        return new Response($code, $duration, $headers, $body, null);\n    }\n\n    private static function parseHeaders($raw)\n    {\n        $headers = array();\n        $headerLines = explode(\"\\r\\n\", $raw);\n        foreach ($headerLines as $line) {\n            $headerLine = trim($line);\n            $kv = explode(':', $headerLine);\n            if (count($kv) > 1) {\n                $kv[0] =self::ucwordsHyphen($kv[0]);\n                $headers[$kv[0]] = trim($kv[1]);\n            }\n        }\n        return $headers;\n    }\n\n    private static function escapeQuotes($str)\n    {\n        $find = array(\"\\\\\", \"\\\"\");\n        $replace = array(\"\\\\\\\\\", \"\\\\\\\"\");\n        return str_replace($find, $replace, $str);\n    }\n    \n    private static function ucwordsHyphen($str)\n    {\n        return str_replace('- ', '-', ucwords(str_replace('-', '- ', $str)));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass Client {\n    public static function get(string $url, array $headers = []) : Response {\n        return self::sendRequest(new Request('GET', $url, null, $headers));\n    }\n\n    public static function delete(string $url, array $headers = []) : Response {\n        return self::sendRequest(new Request('DELETE', $url, null, $headers));\n    }\n\n    public static function post(string $url, mixed $body, array $headers = []) : Response {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function multipartPost(string $url, array $fields, string $name, string $fileName, string $fileBody, string $mimeType = null, array $headers = []) : Response {\n        $postData = [];\n        foreach ($fields as $key => $value) {\n            $postData[] = [$key => $value];\n        }\n        $postData[] = [$name => [\n            'name' => $fileName,\n            'type' => $mimeType ?? 'application/octet-stream',\n            'filename' => $fileName,\n            'contents' => $fileBody\n        ]];\n        return self::sendRequest(new Request('POST', $url, null, $headers, $postData));\n    }\n\n    public static function sendRequest(Request $request) : Response {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        if ($request->getMethod() === 'GET') {\n            curl_setopt($ch, CURLOPT_HTTPGET, true);\n        } elseif ($request->getMethod() === 'DELETE') {\n            curl_setopt($ch, CURLOPT_DELETE, true);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getPostFields());\n        }\n\n        if (!empty($request->getHeaders())) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, self::parseHeaders($request->getHeaders()));\n        }\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new Exception(\"cURL error: \" . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        $statusCode = curl_getinfo($ch, CURLINFO_RESPONSE_CODE);\n        $headersArray = self::parseHeaders($headers);\n\n        return new Response($statusCode, $headersArray, $body);\n    }\n\n    public static function userAgent() : string {\n        return \"MySDK/1.0 (+http://example.com; PHP/\" . phpversion() . \")\";\n    }\n\n    public static function parseHeaders(string $raw) : array {\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $raw) as $line) {\n            if (trim($line) === '') continue;\n            list($name, $value) = explode(':', $line, 2);\n            $headers[$name] = $value;\n        }\n        return $headers;\n    }\n\n    public static function escapeQuotes(string $str) : string {\n        return str_replace('\"', '\\\\\"', str_replace(\"'\", '\\\\\\'', $str));\n    }\n\n    public static function ucwordsHyphen(string $str) : string {\n        return ucwords(str_replace('-', ' ', $str));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n    private $postFields;\n\n    public function __construct(string $method, string $url, mixed $body = null, array $headers = [], array $postFields = []) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n        $this->postFields = $postFields;\n    }\n\n    public function getMethod() : string {\n        return $this->method;\n    }\n\n    public function getUrl() : string {\n        return $this->url;\n    }\n\n    public function getBody() : mixed {\n        return $this->body;\n    }\n\n    public function getHeaders() : array {\n        return $this->headers;\n    }\n\n    public function getPostFields() : array {\n        return $this->postFields;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n\n    public function __construct(int $statusCode, array $headers, string $body) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n    }\n\n    public function getStatusCode() : int {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() : array {\n        return $this->headers;\n    }\n\n    public functiongetBody() : string {\n        return $this->body;\n    }\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a PHP class that provides HTTP client functionality using Guzzle library, supporting various HTTP methods, request/response handling, and error logging.\n\nClass Description: The Guzzle class is an HTTP client implementation that wraps GuzzleHttp\\Client functionality. It supports GET, POST, PUT, PATCH, and DELETE methods, handles different content types (including multipart/form-data and JSON), manages request/response data, and provides logging capabilities.\n\nAttributes:\n- requestArguments: [array] - Stores request parameters including URI, method, parameters, and headers\n- requestHeader: [array] - Contains HTTP headers for the request\n- responseBody: [string] - Stores the response body content\n- responseHeader: [array] - Contains HTTP headers from the response\n- responseHttpCode: [int] - HTTP status code from the response\n- responseClientError: [string|null] - Stores any client error messages\n- responseClientInfo: [array] - Additional client information\n- logger: [object|null] - Logger instance for debugging and error logging\n- client: [GuzzleHttp\\Client] - Guzzle HTTP client instance\n\nMethods:\n- __construct([GuzzleHttp\\Client|null] $client, [array] $config) -> [void] - Initializes the HTTP client with optional existing client instance and configuration\n- request([string] $uri, [string] $method, [array] $parameters, [array] $headers, [bool] $multipart) -> [string] - Executes HTTP request and returns response body\n- getResponse() -> [array] - Returns complete request/response information including headers, body, and status code\n- setLogger([object] $logger) -> [void] - Sets a logger instance for debugging\n- getResponseBody() -> [string] - Returns the response body content\n- getResponseHeader() -> [array] - Returns response headers\n- getResponseHttpCode() -> [int] - Returns HTTP status code\n- getResponseClientError() -> [string|null] - Returns client error message if any\n- getResponseClientInfo() -> [array] - Returns additional client information (protected)\n- getRequestArguments() -> [array] - Returns request arguments (protected)",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse GuzzleHttp\\Exception\\TransferException;\n\nclass Guzzle implements HttpClientInterface\n{\n    protected $requestArguments = [];\n    protected $requestHeader = [];\n    protected $responseBody = '';\n    protected $responseHeader = [];\n    protected $responseHttpCode = 0;\n    protected $responseClientError = null;\n    protected $responseClientInfo = [];\n    protected $logger = null;\n    protected $client = null;\n\n    public function __construct($client = null, $config = [])\n    {\n        $this->client = $client ? $client : new Client($config);\n    }\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false)\n    {\n        $this->requestHeader = array_replace($this->requestHeader, (array)$headers);\n\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $this->requestHeader,\n        ];\n\n        $response = null;\n\n        try {\n            switch ($method) {\n                case 'GET':\n                case 'DELETE':\n                    $response = $this->client->request($method, $uri, [\n                        'query' => $parameters,\n                        'headers' => $this->requestHeader,\n                    ]);\n                    break;\n                case 'PUT':\n                case 'PATCH':\n                case 'POST':\n                    $body_type = $multipart ? 'multipart' : 'form_params';\n\n                    if (isset($this->requestHeader['Content-Type'])\n                        && $this->requestHeader['Content-Type'] === 'application/json'\n                    ) {\n                        $body_type = 'json';\n                    }\n\n                    $body_content = $parameters;\n                    if ($multipart) {\n                        $body_content = [];\n                        foreach ($parameters as $key => $val) {\n                            if ($val instanceof \\CURLFile) {\n                                $val = fopen($val->getFilename(), 'r');\n                            }\n\n                            $body_content[] = [\n                                'name' => $key,\n                                'contents' => $val,\n                            ];\n                        }\n                    }\n\n                    $response = $this->client->request($method, $uri, [\n                        $body_type => $body_content,\n                        'headers' => $this->requestHeader,\n                    ]);\n                    break;\n            }\n        } catch (\\Exception $e) {\n            $response = $e->getResponse();\n            $this->responseClientError = $e->getMessage();\n        }\n\n        if (!$this->responseClientError) {\n            $this->responseBody = $response->getBody();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseHeader = $response->getHeaders();\n        }\n\n        if ($this->logger) {\n            $this->logger->debug(sprintf('%s::request( %s, %s ), response:', get_class($this), $uri, $method), $this->getResponse());\n\n            if ($this->responseClientError) {\n                $this->logger->error(sprintf('%s::request( %s, %s ), error:', get_class($this), $uri, $method), [$this->responseClientError]);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse()\n    {\n        return [\n            'request' => $this->getRequestArguments(),\n            'response' => [\n                'code' => $this->getResponseHttpCode(),\n                'headers' => $this->getResponseHeader(),\n                'body' => $this->getResponseBody(),\n            ],\n            'client' => [\n                'error' => $this->getResponseClientError(),\n                'info' => $this->getResponseClientInfo(),\n                'opts' => null,\n            ],\n        ];\n    }\n\n    public function setLogger($logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader()\n    {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode()\n    {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError()\n    {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo()\n    {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments()\n    {\n        return $this->requestArguments;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class Guzzle {\n    public $requestArguments;\n    public $requestHeader;\n    public $responseBody;\n    public $responseHeader;\n    public $responseHttpCode;\n    public $responseClientError;\n    public $responseClientInfo;\n    public $logger;\n    public $client;\n\n    public function __construct(GuzzleHttp\\Client $client = null, array $config = []) {\n        $this->client = $client ?? new GuzzleHttp\\Client();\n        $this->logger = $config['logger'] ?? null;\n    }\n\n    public function request(string $uri, string $method, array $parameters, array $headers, bool $multipart): string {\n        $options = ['headers' => $headers];\n        if ($method === 'GET') {\n            $options['query'] = $parameters;\n        } else {\n            if ($multipart) {\n                $options['form_params'] = $parameters;\n            } else {\n                $options['json'] = $parameters;\n            }\n        }\n\n        try {\n            $response = $this->client->request($method, $uri, $options);\n            $this->responseBody = $response->getBody()->getContents();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientError = null;\n            $this->responseClientInfo = [];\n            $this->requestArguments = [$uri, $method, $parameters, $headers];\n            $this->requestHeader = $headers;\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            $this->logger->error('Request failed: ' . $e->getMessage());\n            $this->responseClientError = $e->getMessage();\n            $this->responseClientInfo = ['exception' => $e->getMessage()];\n            $this->responseHttpCode = $e->getResponse()?->getStatusCode() ?? 500;\n            $this->responseBody = '';\n            $this->responseHeader = [];\n            $this->requestArguments = [$uri, $method, $parameters, $headers];\n            $this->requestHeader = $headers;\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n            'request_arguments' => $this->requestArguments,\n            'request_header' => $this->requestHeader\n        ];\n    }\n\n    public function setLogger(object $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): string|null {\n        return $this->responseClientError;\n    }\n\n    public function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request to the OpenAI API using cURL, handles the response, and manages potential errors.\n\nFunction Description: The function `make_curl_request` initializes a cURL session to interact with the OpenAI API. It sets necessary headers including authentication, configures cURL options for the request, and implements a callback function to handle the response stream. The function processes both successful responses and errors, setting appropriate cookies for error conditions and returning the response data.\n\nInput:\n- `$postData` (string) - The JSON-encoded data to be sent in the POST request body.\n- `$OPENAI_API_KEY` (string) - The API key for authenticating with the OpenAI API.\n\nOutput:\n- `$responsedata` (string) - The raw response data from the API, which could be either a successful response or an error message. The function also sets cookies for error conditions when they occur.",
    "Canonical_solution": "function make_curl_request($postData, $OPENAI_API_KEY) {\n    $responsedata = \"\";\n    $ch = curl_init();\n    \n    $headers = [\n        'Accept: application/json',\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ];\n\n    setcookie(\"errcode\", \"\");\n    setcookie(\"errmsg\", \"\");\n\n    $callback = function ($ch, $data) {\n        global $responsedata;\n        $complete = json_decode($data);\n        if (isset($complete->error)) {\n            setcookie(\"errcode\", $complete->error->code);\n            setcookie(\"errmsg\", $data);\n            if (strpos($complete->error->message, \"Rate limit reached\") === 0) {\n                setcookie(\"errcode\", \"rate_limit_reached\");\n            }\n            if (strpos($complete->error->message, \"Your access was terminated\") === 0) {\n                setcookie(\"errcode\", \"access_terminated\");\n            }\n            if (strpos($complete->error->message, \"You didn't provide an API key\") === 0) {\n                setcookie(\"errcode\", \"no_api_key\");\n            }\n            if (strpos($complete->error->message, \"You exceeded your current quota\") === 0) {\n                setcookie(\"errcode\", \"insufficient_quota\");\n            }\n            if (strpos($complete->error->message, \"That model is currently overloaded\") === 0) {\n                setcookie(\"errcode\", \"model_overloaded\");\n            }\n            $responsedata = $data;\n        } else {\n            echo $data;\n            $responsedata .= $data;\n            flush();\n        }\n        return strlen($data);\n    };\n\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/chat/completions');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, $callback);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);\n    curl_setopt($ch, CURLOPT_MAXREDIRS, 3);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n\n    curl_exec($ch);\n    curl_close($ch);\n\n    return $responsedata;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "wrong_result": "function make_curl_request($postData, $OPENAI_API_KEY) {\n    $responsedata = '';\n    $ch = curl_init();\n    $url = 'https://api.openai.com/v1/completions';\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Authorization: Bearer ' . $OPENAI_API_KEY,\n        'Content-Type: application/json'\n    ]);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($ch, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    });\n\n    $response = curl_exec($ch);\n\n    if ($response === false) {\n        $error_message = curl_error($ch);\n        setcookie('error', 'API request failed: ' . $error_message, time() + 3600, '/');\n        return $error_message;\n    }\n\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if ($http_code >= 400) {\n        setcookie('error', 'API error: ' . $http_code, time() + 3600, '/');\n        return $responsedata;\n    }\n\n    return $responsedata;\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using Guzzle library, with error handling and testing capabilities.\n\nClass Description: The `SupportedApps` class is an abstract base class that provides HTTP client functionality using Guzzle. It handles HTTP requests with configurable timeouts and methods, includes error handling for connection and server exceptions, and provides a testing method to verify API connectivity.\n\nAttributes:\n- jar: [bool] - Flag indicating whether to use cookies (not implemented in current code)\n- method: [string] - Default HTTP method to use for requests (default: 'GET')\n- error: [string|null] - Stores the last error message encountered during request execution\n\nMethods:\n- execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) -> [ResponseInterface|null] - Executes an HTTP request to the specified URL with optional attributes, overriding variables and method. Returns the response or null on failure.\n- appTest($url, array $attrs = []) -> [object] - Tests the connection to a specified URL, returning an object with status code, status message, and response body. Handles various HTTP status codes with appropriate messages.",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps\n{\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error;\n\n    public function execute(\n        $url,\n        array $attrs = [],\n        $overridevars = null,\n        $overridemethod = null\n    ): ?ResponseInterface {\n        $res = null;\n\n        $vars = ($overridevars === null || $overridevars === false) ?\n         [\n            'http_errors' => false,\n            'timeout' => 15,\n            'connect_timeout' => 15,\n        ] : $overridevars;\n\n        $client = new Client($vars);\n\n        $method = ($overridemethod === null || $overridemethod === false) ? $this->method : $overridemethod;\n\n        try {\n            return $client->request($method, $url, $attrs);\n        } catch (ConnectException $e) {\n            $this->error = 'Connection refused - '.(string) $e->getMessage();\n        } catch (ServerException $e) {\n            $this->error = (string) $e->getResponse()->getBody();\n        }\n        $this->error = 'General error connecting with API';\n\n        return $res;\n    }\n\n    public function appTest($url, array $attrs = []): object\n    {\n        if (empty($this->config->url)) {\n            return (object) [\n                'code' => 404,\n                'status' => 'No URL has been specified',\n                'response' => 'No URL has been specified',\n            ];\n        }\n        $res = $this->execute($url, $attrs);\n        if ($res == null) {\n            return (object) [\n                'code' => null,\n                'status' => $this->error,\n                'response' => 'Connection failed',\n            ];\n        }\n        switch ($res->getStatusCode()) {\n            case 200:\n                $status = 'Successfully communicated with the API';\n                break;\n            case 401:\n                $status = 'Failed: Invalid credentials';\n                break;\n            case 404:\n                $status = 'Failed: Please make sure your URL is correct and that there is a trailing slash';\n                break;\n            default:\n                $status = 'Something went wrong... Code: '.$res->getStatusCode();\n                break;\n        }\n\n        return (object) [\n            'code' => $res->getStatusCode(),\n            'status' => $status,\n            'response' => $res->getBody(),\n        ];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "abstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n    protected $timeout = 30;\n\n    protected $client;\n\n    public function __construct() {\n        $this->client = new \\GuzzleHttp\\Client(['timeout' => $this->timeout]);\n    }\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        try {\n            $method = $overridemethod ?? $this->method;\n            $options = [];\n\n            if ($overridevars !== null) {\n                $options = $overridevars;\n            }\n\n            if (!empty($attrs)) {\n                $options = array_merge($options, $attrs);\n            }\n\n            $response = $this->client->request($method, $url, $options);\n            $this->error = null;\n            return $response;\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        } catch (\\Exception $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n        if ($response === null) {\n            return (object)['status_code' => 500, 'status_message' => 'Internal Server Error', 'body' => ''];\n        }\n\n        $statusCode = $response->getStatusCode();\n        $body = $response->getBody()->getContents();\n\n        switch ($statusCode) {\n            case 200:\n                return (object)['status_code' => 200, 'status_message' => 'OK', 'body' => $body];\n            case 404:\n                return (object)['status_code' => 404, 'status_message' => 'Not Found', 'body' => $body];\n            case 500:\n                return (object)['status_code' => 500, 'status_message' => 'Internal Server Error', 'body' => $body];\n            default:\n                return (object)['status_code' => $statusCode, 'status_message' => 'Unknown Status Code', 'body' => $body];\n        }\n    }\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL, supporting various HTTP methods, headers, cookies, proxies, and file uploads.\n\nClass Description: The `requests` class is a static HTTP client implementation that handles HTTP requests through cURL. It supports GET, POST, and other HTTP methods, manages cookies, headers, user agents, proxies, and file uploads. The class maintains connection settings and request history.\n\nAttributes:\n\nVERSION: [string] - The version number of the requests class\nch: [resource|null] - The cURL handle resource\ntimeout: [int|array] - Timeout settings for the connection\nencoding: [string|null] - Request encoding\noutput_encoding: [string|null] - Response encoding\ncookies: [array] - Global cookies to be sent with requests\nrawheaders: [array] - Request headers\ndomain_cookies: [array] - Domain-specific cookies\nheaders: [array] - Response headers\nuseragents: [array] - List of user agent strings\nclient_ips: [array] - List of client IP addresses for spoofing\nproxies: [array] - List of proxy servers\nraw: [string] - Raw response including headers\nhead: [string] - Response headers\ncontent: [string] - Response body\ntext: [string] - Processed response text\ninfo: [array] - cURL request information\nhistory: [int] - HTTP redirect history status code\nstatus_code: [int] - HTTP response status code\nerror: [string] - Error message if request fails\n\nMethods:\n\ninit(): [void] -> [resource] - Initializes the cURL session with default settings\nrequest($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL) -> [string|bool] - Executes an HTTP request to the specified URL with given parameters\n_is_url($url) -> [bool] - Validates if the input string is a valid URL\nget_cookies($domain = '') -> [array] - Retrieves cookies for a specific domain\nget_response_headers($header) -> [array] - Parses response headers\nget_response_cookies($header, $domain) -> [void] - Extracts cookies from response headers\nsplit_header_body() -> [array] - Splits response into headers and body\nget_history($header) -> [int] - Gets redirect history from response headers\nget_mimetype($filepath) -> [string] - Gets MIME type of a file",
    "Canonical_solution": "namespace phpspider\\core;\n\nclass requests\n{\n    const VERSION = '2.0.1';\n    protected static $ch = null;\n\n    public static $timeout = 15;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = array();\n    public static $rawheaders = array();\n    public static $domain_cookies = array();\n    public static $headers = array();\n    public static $useragents = array(\"requests/2.0.0\");\n    public static $client_ips = array();\n    public static $proxies = array();\n    public static $raw = \"\";\n    public static $head = \"\";\n    public static $content = \"\";\n    public static $text = \"\";\n    public static $info = array();\n    public static $history = 302;\n    public static $status_code = 0;\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!is_resource(self::$ch))\n        {\n            self::$ch = curl_init();\n            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt(self::$ch, CURLOPT_HEADER, false);\n            curl_setopt(self::$ch, CURLOPT_USERAGENT, \"phpspider-requests/\".self::VERSION);\n            if (is_array(self::$timeout))\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, self::$timeout[0]);\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout[1]);\n            }\n            else\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, ceil(self::$timeout / 2));\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n            }\n            curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt(self::$ch, CURLOPT_NOSIGNAL, true);\n        }\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL)\n    {\n        $method = strtoupper($method);\n        if(!self::_is_url($url))\n        {\n            self::$error = \"You have requested URL ({$url}) is not a valid HTTP address\";\n            return false;\n        }\n\n        if ($method == 'GET' && !empty($fields))\n        {\n            $url = $url.(strpos($url, '?') === false ? '?' : '&').http_build_query($fields);\n        }\n\n        $parse_url = parse_url($url);\n        if (empty($parse_url) || empty($parse_url['host']) || !in_array($parse_url['scheme'], array('http', 'https')))\n        {\n            self::$error = \"No connection adapters were found for '{$url}'\";\n            return false;\n        }\n\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n\n        if ($method != 'GET')\n        {\n            if ($method == 'POST')\n            {\n                $tmpheaders = array_change_key_case(self::$rawheaders, CASE_LOWER);\n                if (isset($tmpheaders['content-type']) && $tmpheaders['content-type'] == 'application/json')\n                {\n                    curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n                }\n                else\n                {\n                    curl_setopt(self::$ch, CURLOPT_POST, true);\n                }\n\n                $file_fields = array();\n                if (!empty($files))\n                {\n                    foreach ($files as $postname => $file)\n                    {\n                        $filepath = realpath($file);\n                        if (!file_exists($filepath))\n                        {\n                            continue;\n                        }\n                        $filename = basename($filepath);\n                        $type = self::get_mimetype($filepath);\n                        $file_fields[$postname] = curl_file_create($filepath, $type, $filename);\n                    }\n                }\n\n                if (empty($file_fields))\n                {\n                    if (is_array($fields))\n                    {\n                        $fields = http_build_query($fields);\n                    }\n                }\n                else\n                {\n                    if (is_array($fields) && !empty($fields))\n                    {\n                        $fields = array_merge($fields, $file_fields);\n                    }\n                    else\n                    {\n                        $fields = $file_fields;\n                    }\n                }\n                curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n            }\n            else\n            {\n                self::$rawheaders['X-HTTP-Method-Override'] = $method;\n                curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n            }\n        }\n\n        $cookies = self::get_cookies();\n        $domain_cookies = self::get_cookies($parse_url['host']);\n        $cookies = array_merge($cookies, $domain_cookies);\n        if (!empty($cookies))\n        {\n            foreach ($cookies as $key=>$value)\n            {\n                $cookie_arr[] = $key.'='.$value;\n            }\n            $cookies = implode('; ', $cookie_arr);\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);\n        }\n\n        if (!empty(self::$useragents))\n        {\n            $key = rand(0, count(self::$useragents) - 1);\n            self::$rawheaders['User-Agent'] = self::$useragents[$key];\n        }\n\n        if (!empty(self::$client_ips))\n        {\n            $key = rand(0, count(self::$client_ips) - 1);\n            self::$rawheaders['CLIENT-IP'] = self::$client_ips[$key];\n            self::$rawheaders['X-FORWARDED-FOR'] = self::$client_ips[$key];\n        }\n\n        if (self::$rawheaders)\n        {\n            $http_headers = array();\n            foreach (self::$rawheaders as $k=>$v)\n            {\n                $http_headers[] = $k.': '.$v;\n            }\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $http_headers);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_ENCODING, 'gzip');\n\n        if ($parse_url['scheme'] == 'https')\n        {\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if (self::$proxies)\n        {\n            $key = rand(0, count(self::$proxies) - 1);\n            $proxy = self::$proxies[$key];\n            curl_setopt(self::$ch, CURLOPT_PROXY, $proxy);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        if ($allow_redirects)\n        {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (self::$raw === false)\n        {\n            self::$error = 'Curl error: ' . curl_error(self::$ch);\n        }\n\n        curl_close(self::$ch);\n\n        list($header, $text) = self::split_header_body();\n        self::$history = self::get_history($header);\n        self::$headers = self::get_response_headers($header);\n        self::get_response_cookies($header, $parse_url['host']);\n        return $text;\n    }\n\n    private static function _is_url($url)\n    {\n        $pattern = \"/\\b(([\\w-]+:\\/\\/?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/)))/\";\n        return preg_match($pattern, $url) ? true : false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class requests {\n    public $VERSION = '1.0';\n    public $ch = null;\n    public $timeout = 30;\n    public $encoding = null;\n    public $output_encoding = null;\n    public $cookies = array();\n    public $rawheaders = array();\n    public $domain_cookies = array();\n    public $headers = array();\n    public $useragents = array();\n    public $client_ips = array();\n    public $proxies = array();\n    public $raw = '';\n    public $head = '';\n    public $content = '';\n    public $text = '';\n    public $info = array();\n    public $history = 0;\n    public $status_code = 0;\n    public $error = '';\n\n    public function init() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($this->ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->ch, CURLOPT_USERAGENT, $this->useragents[0]);\n        return $this->ch;\n    }\n\n    public function request($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL) {\n        if (!$this->_is_url($url)) {\n            $this->error = \"Invalid URL\";\n            return false;\n        }\n\n        if ($this->ch === null) {\n            $this->init();\n        }\n\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n\n        switch ($method) {\n            case 'GET':\n                curl_setopt($this->ch, CURLOPT_HTTPGET, 1);\n                break;\n            case 'POST':\n                curl_setopt($this->ch, CURLOPT_POST, 1);\n                break;\n        }\n\n        if (!empty($this->rawheaders)) {\n            curl_setopt($this->ch, CURLOPT_HTTPHEADER, $this->rawheaders);\n        }\n\n        if (!empty($this->cookies)) {\n            $cookie_str = '';\n            foreach ($this->cookies as $key => $value) {\n                $cookie_str .= \"$key=$value;\";\n            }\n            $cookie_str = rtrim($cookie_str, ';');\n            $this->rawheaders[] = \"Cookie: $cookie_str\";\n        }\n\n        if (!empty($this->proxies)) {\n            curl_setopt($this->ch, CURLOPT_PROXY, $this->proxies[0]);\n        }\n\n        if (!empty($this->client_ips)) {\n            curl_setopt($this->ch, CURLOPT_INTERFACE, $this->client_ips[0]);\n        }\n\n        if ($cert !== null) {\n            curl_setopt($this->ch, CURLOPT_SSLCERT, $cert);\n        }\n\n        curl_setopt($this->ch, CURLOPT_FOLLOWLOCATION, $allow_redirects ? 1 : 0);\n        curl_setopt($this->ch, CURLOPT_MAXREDIRS, 5);\n\n        if ($method === 'POST') {\n            if (!empty($files)) {\n                curl_setopt($this->ch, CURLOPT_POSTFIELDS, $files);\n            } else {\n                curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($fields));\n            }\n        }\n\n        $this->raw = curl_exec($this->ch);\n        if ($this->raw === false) {\n            $this->error = curl_error($this->ch);\n            return false;\n        }\n\n        $this->info = curl_getinfo($this->ch);\n        $this->status_code = $this->info['http_code'];\n\n        list($this->head, $this->content) = $this->split_header_body();\n\n        $this->headers = $this->get_response_headers($this->head);\n        $this->get_response_cookies($this->head, $this->domain_cookies);\n\n        $this->text = mb_convert_encoding($this->content, $this->output_encoding, $this->encoding);\n\n        $this->history = $this->get_history($this->head);\n\n        return $this->text;\n    }\n\n    private function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public function get_cookies($domain = '') {\n        return $domain ? $this->domain_cookies[$domain] : $this->cookies;\n    }\n\n    public function get_response_headers($header) {\n        $headers = array();\n        foreach (explode(\"\\r\\n\", $header) as $line) {\n            if (trim($line) === '') continue;\n            list($name, $value) = explode(':', $line, 2);\n            $headers[$name] = $value;\n        }\n        return $headers;\n    }\n\n    public function get_response_cookies($header, $domain) {\n        $cookie_lines = explode(\"\\r\\n\", $header);\n        foreach ($cookie_lines as $line) {\n            if (strpos($line, 'Set-Cookie:') === 0) {\n                $cookie = substr($line, 11);\n                $parts = explode(';', $cookie);\n                $name = $parts[0];\n                $value = '';\n                foreach ($parts as $part) {\n                    if (strpos($part, '=') === 0) {\n                        $value .= $part;\n                    }\n                }\n                if ($domain) {\n                    $this->domain_cookies[$domain][$name] = $value;\n                } else {\n                    $this->cookies[$name] = $value;\n                }\n            }\n        }\n    }\n\n    private function split_header_body() {\n        $headers = '';\n        $body = '';\n        $split = strpos($this->raw, \"\\r\\n\\r\\n\");\n        if ($split === false) {\n            return array($headers, $body);\n        }\n        $headers = substr($this->raw, 0, $split);\n        $body = substr($this->raw, $split + 4);\n        return array($headers, $body);\n    }\n\n    public function get_history($header) {\n        $headers = $this->get_response_headers($header);\n        return isset($headers['Location']) ? (int)$headers['Location'] : 0;\n    }\n\n    public function get_mimetype($filepath) {\n        $finfo = finfo_open(FILEINFO_MIME);\n        $mimetype = finfo_file($finfo, $filepath);\n        finfo_close($finfo);\n        return $mimetype;\n    }\n}"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a PHP class that implements HTTP scraping functionality using cURL to make requests to a specified URL with query parameters and handle the response.\n\nClass Description: The HttpScraper class extends a BaseScraper and provides functionality to make HTTP GET requests using cURL. It includes timeout configuration and basic error handling for HTTP status codes.\n\nAttributes:\ntimeout: [int] - The maximum time in seconds the cURL request is allowed to take.\n\nMethods:\nrequest: [Name]([string $url, array $query]) -> [string|null] - Makes an HTTP GET request to the specified URL with the given query parameters. Returns the response body as a string if the request is successful (HTTP 200), or null otherwise.",
    "Canonical_solution": "use Rych\\Bencode\\Bencode;\nuse Rych\\Bencode\\Exception\\RuntimeException;\n\nclass HttpScraper extends BaseScraper\n{\n    protected $timeout = 30;\n\n    public function request($url, array $query)\n    {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $url . '?' . join('&', $query),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => $this->timeout,\n        ]);\n\n        $result = curl_exec($ch);\n\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($code != 200) {\n            $result = null;\n        }\n\n        curl_close($ch);\n\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class HttpScraper extends BaseScraper {\n    protected int $timeout;\n\n    public function __construct(int $timeout) {\n        $this->timeout = $timeout;\n    }\n\n    public function request(string $url, array $query): ?string {\n        $ch = curl_init();\n        $urlWithQuery = $url . '?' . http_build_query($query);\n        curl_setopt($ch, CURLOPT_URL, $urlWithQuery);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $responseBody = curl_exec($ch);\n\n        if ($responseBody === false) {\n            return null;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode === 200) {\n            return $responseBody;\n        }\n\n        return null;\n    }\n}"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Implement a file downloader class in PHP that supports both regular and resumable downloads using either fopen or cURL, with proper error handling and support for gzip-compressed files.\n\nClass Description: The Downloader class provides functionality to download files from URLs with support for resuming interrupted downloads. It handles both HTTP and HTTPS protocols, checks for server-side range support, and manages temporary files during download.\n\nAttributes: (This class doesn't have explicit attributes as it uses static methods)\n\nMethods:\n\nMethod1: start(string|array $url, string $saveFile, int $timeout = 10) -> array - Main entry point that initiates the download process. Checks URL validity and determines the best download method (fopen or cURL) based on server capabilities.\n\nMethod2: fileDownloadFopen(string $url, string $fileName, int $headerSize = 0) -> array - Downloads a file using PHP's fopen function. Handles basic downloads when range requests aren't supported.\n\nMethod3: fileDownloadCurl(string $url, string $fileName, bool $supportRange = false, int $existsLength = 0, int $length = 0) -> array - Downloads a file using cURL with support for resumable downloads if the server supports range requests.\n\nMethod4: checkGzip(string $file) -> void - Checks if a file is gzip-compressed and decompresses it if necessary. This is an internal helper method.",
    "Canonical_solution": "class Downloader {\n    static function start($url,$saveFile,$timeout = 10) {\n        $dataFile = $saveFile . '.download.cfg';\n        $saveTemp = $saveFile . '.downloading';\n        \n        if(is_array($url)){\n            $fileHeader = $url;\n        }else{\n            $fileHeader = url_header($url);\n        }\n        $url = $fileHeader['url'];\n        if(!$url){\n            return array('code'=>false,'data'=>'url error!');\n        }\n        if(!$fileHeader['supportRange'] || $fileHeader['length'] == 0 ){\n            @unlink($saveTemp);@unlink($saveFile);\n            $result = self::fileDownloadFopen($url,$saveFile,$fileHeader['length']);\n            if($result['code']) {\n                return $result;\n            }else{\n                @unlink($saveTemp);@unlink($saveFile);\n                $result = self::fileDownloadCurl($url,$saveFile,false,0,$fileHeader['length']);\n                @unlink($saveTemp);@unlink($saveFile);\n                return $result;\n            }\n        }\n\n        $existsLength  = is_file($saveTemp) ? filesize($saveTemp) : 0;\n        $contentLength = intval($fileHeader['length']);\n        if( file_exists($saveTemp) && time() - filemtime($saveTemp) < 3) {\n            return array('code'=>false,'data'=>'downloading');\n        }\n        \n        $existsData = array();\n        if(is_file($dataFile)){\n            $tempData = file_get_contents($dataFile);\n            $existsData = json_decode($tempData, 1);\n        }\n        if( file_exists($saveFile) && $contentLength == filesize($saveFile)){\n            @unlink($saveTemp);\n            @unlink($dataFile);\n            return array('code'=>true,'data'=>'exist');\n        }\n\n        if ($existsData['length'] != $contentLength) {\n            $existsData = array('length' => $contentLength);\n        }\n        if($existsLength > $contentLength){\n            @unlink($saveTemp);\n        }\n        file_put_contents($dataFile, json_encode($existsData));\n        $result = self::fileDownloadCurl($url,$saveFile,true,$existsLength,$contentLength);\n        if($result['code']){\n            @unlink($dataFile);\n        }\n        return $result;\n    }\n\n    static function fileDownloadFopen($url, $fileName,$headerSize=0){\n        @ini_set('user_agent','Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n        $fileTemp = $fileName.'.downloading';\n        @set_time_limit(0);\n        @unlink($fileTemp);\n        if ($fp = @fopen ($url, \"rb\")){\n            if(!$downloadFp = @fopen($fileTemp, \"wb\")){\n                return array('code'=>false,'data'=>'open_downloading_error');\n            }\n            while(!feof($fp)){\n                if(!file_exists($fileTemp)){\n                    fclose($downloadFp);\n                    return array('code'=>false,'data'=>'stoped');\n                }\n                clearstatcache();\n                if( $headerSize>0 && $headerSize==get_filesize(iconv_system($fileTemp))){\n                    break;\n                }\n                fwrite($downloadFp, fread($fp, 1024 * 8 ), 1024 * 8);\n            }\n            fclose($downloadFp);\n            fclose($fp);\n            self::checkGzip($fileTemp);\n            if(!@rename($fileTemp,$fileName)){\n                usleep(round(rand(0,1000)*50));\n                @unlink($fileName);\n                $res = @rename($fileTemp,$fileName);\n                if(!$res){\n                    return array('code'=>false,'data'=>'rename error![open]');\n                }\n            }\n            return array('code'=>true,'data'=>'success');\n        }else{\n            return array('code'=>false,'data'=>'url_open_error');\n        }\n    }\n\n    static function fileDownloadCurl($url, $fileName,$supportRange=false,$existsLength=0,$length=0){\n        $fileTemp = $fileName.'.downloading';\n        @set_time_limit(0);\n        if ($fp = @fopen ($fileTemp, \"a\")){\n            $ch = curl_init($url);\n            if($supportRange){\n                curl_setopt($ch, CURLOPT_RANGE, $existsLength.\"-\");\n            }\n            curl_setopt($ch, CURLOPT_FILE, $fp);\n            curl_setopt($ch, CURLOPT_REFERER,get_url_link($url));\n            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n            curl_setopt($ch, CURLOPT_USERAGENT,'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n            $res = curl_exec($ch);\n            curl_close($ch);\n            fclose($fp);\n\n            $filesize = get_filesize(iconv_system($fileTemp));\n            if($filesize < $length && $length!=0){\n                return array('code'=>false,'data'=>'downloading');\n            }\n            if($res && filesize($fileTemp) != 0){\n                self::checkGzip($fileTemp);\n                if(!@rename($fileTemp,$fileName)){\n                    @unlink($fileName);\n                    $res = @rename($fileTemp,$fileName);\n                    if(!$res){\n                        return array('code'=>false,'data'=>'rename error![curl]');\n                    }\n                }\n                return array('code'=>true,'data'=>'success');\n            }\n            return array('code'=>false,'data'=>'curl exec error!');\n        }else{\n            return array('code'=>false,'data'=>'file create error');\n        }\n    }\n\n    static function checkGzip($file){\n        $char = \"\\x1f\\x8b\";\n        $str  = file_sub_str($file,0,2);\n        if($char != $str) return;\n\n        ob_start();   \n        readgzfile($file);   \n        $out = ob_get_clean();\n        file_put_contents($file,$out);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Downloader {\n    public function start(string|array $url, string $saveFile, int $timeout = 10): array {\n        if (!is_string($url) && !is_array($url)) {\n            return ['status' => 'error', 'message' => 'Invalid URL format'];\n        }\n        $url = is_array($url) ? $url[0] : $url;\n\n        if (!filter_var($url, FILTER_VALIDATE_URL)) {\n            return ['status' => 'error', 'message' => 'Invalid URL'];\n        }\n\n        $supportsRange = $this->checkRangeSupport($url, $timeout);\n\n        return $supportsRange ? $this->fileDownloadCurl($url, $saveFile, true, 0, 0) : $this->fileDownloadFopen($url, $saveFile);\n    }\n\n    private function checkRangeSupport(string $url, int $timeout = 10): bool {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $url,\n            CURLOPT_NOBODY => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => $timeout,\n        ]);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            return false;\n        }\n\n        $headers = $this->getHeaders($response);\n        return isset($headers['accept-ranges']) && $headers['accept-ranges'] === 'bytes';\n    }\n\n    private function getHeaders(string $response): array {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", $response);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n            list($name, $value) = explode(':', $line, 2);\n            $headers[strtolower($name)] = trim($value);\n        }\n        return $headers;\n    }\n\n    public function fileDownloadFopen(string $url, string $fileName, int $headerSize = 0): array {\n        $handle = fopen($url, 'rb');\n        if (!$handle) return ['status' => 'error', 'message' => 'Failed to open URL'];\n\n        $content = '';\n        while (!feof($handle)) {\n            $content .= fread($handle, 8192);\n        }\n        fclose($handle);\n\n        $fileHandle = fopen($fileName, 'wb');\n        if (!$fileHandle) return ['status' => 'error', 'message' => 'Failed to open file for writing'];\n        fwrite($fileHandle, $content);\n        fclose($fileHandle);\n\n        return ['status' => 'success', 'message' => 'Download completed'];\n    }\n\n    public function fileDownloadCurl(string $url, string $fileName, bool $supportRange = false, int $existsLength = 0, int $length = 0): array {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => 10,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_MAXREDIRS => 5,\n            CURLOPT_SSL_VERIFYPEER => false,\n        ]);\n\n        if ($supportRange && $existsLength > 0) {\n            $range = \"bytes={$existsLength}-\";\n            curl_setopt($ch, CURLOPT_RANGE, $range);\n        }\n\n        $response = curl_exec($ch);\n        if ($response === false) return ['status' => 'error', 'message' => 'cURL error: ' . curl_error($ch)];\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headers = $this->getHeadersFromCurl($ch);\n\n        if (isset($headers['content-encoding']) && $headers['content-encoding'] === 'gzip') {\n            $this->checkGzip($fileName);\n        }\n\n        if ($httpCode === 200) {\n            $fileHandle = fopen($fileName, 'wb');\n            if (!$fileHandle) return ['status' => 'error', 'message' => 'Failed to open file for writing'];\n            fwrite($fileHandle, $response);\n            fclose($fileHandle);\n            return ['status' => 'success', 'message' => 'Download completed'];\n        } else {\n            return ['status' => 'error', 'message' => 'HTTP error: ' . $httpCode];\n        }\n    }\n\n    private function getHeadersFromCurl($ch): array {\n        $headers = [];\n        $response = curl_getinfo($ch, CURLINFO_HEADER_OUT);\n        $lines = explode(\"\\r\\n\", $response);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n            list($name, $value) = explode(':', $line, 2);\n            $headers[strtolower($name)] = trim($value);\n        }\n        return $headers;\n    }\n\n    private function checkGzip(string $file): void {\n        if (!file_exists($file)) return;\n\n        $content = file_get_contents($file);\n        if (substr($content, 0, 2) === \"\\x1f\\x8b\") {\n            $decompressed = gzdecode($content);\n            file_put_contents($file, $decompressed);\n        }\n    }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The BcsRequestcore class provides a comprehensive wrapper around PHP's cURL functions to handle HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, with features for request customization, streaming uploads/downloads, authentication, and proxy support. The class manages the entire request lifecycle including preparation, execution, and response processing.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [mixed] - The raw response from the server\nresponse_headers: [array] - Parsed response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - HTTP response status code\nresponse_info: [array] - Additional response information\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Authentication username\npassword: [string|null] - Authentication password\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Flag for debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for streaming read\nread_stream: [resource|null] - Stream resource for reading\nread_stream_size: [int|null] - Size of read stream\nread_stream_read: [int] - Bytes read from stream\nwrite_file: [string|null] - File path for streaming write\nwrite_stream: [resource|null] - Stream resource for writing\nseek_position: [int|null] - Seek position for streams\nregistered_streaming_read_callback: [callable|null] - Callback for streaming read\nregistered_streaming_write_callback: [callable|null] - Callback for streaming write\n\nMethods:\n\n__construct([string|null $url], [array|null $proxy], [array|null $helpers]) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct() -> [self] - Cleans up any open file handles\nsetCredentials([string $user], [string $pass]) -> [self] - Sets basic authentication credentials\naddHeader([string $key], [string $value]) -> [self] - Adds a request header\nremoveHeader([string $key]) -> [self] - Removes a request header\nsetMethod([string $method]) -> [self] - Sets the HTTP method\nsetUseragent([string $ua]) -> [self] - Sets the user agent string\nsetBody([string $body]) -> [self] - Sets the request body\nsetRequestUrl([string $url]) -> [self] - Sets the request URL\nsetCurlopts([array $curlopts]) -> [self] - Sets additional cURL options\nsetReadStreamSize([int $size]) -> [self] - Sets the read stream size\nsetReadStream([resource $resource], [int|null $size]) -> [self] - Sets a stream resource for reading\nsetReadFile([string $location]) -> [self] - Sets a file for streaming read\nsetWriteStream([resource $resource]) -> [self] - Sets a stream resource for writing\nsetWriteFile([string $location]) -> [self] - Sets a file for streaming write\nsetProxy([string $proxy]) -> [self] - Configures proxy settings\nsetSeekPosition([int|null $position]) -> [self] - Sets the seek position for streams\nregisterStreamingReadCallback([callable $callback]) -> [self] - Registers a streaming read callback\nregisterStreamingWriteCallback([callable $callback]) -> [self] - Registers a streaming write callback\nprepRequest() -> [resource] - Prepares and returns a cURL handle with configured options\nsendRequest([bool $parse = false]) -> [mixed] - Executes the request and returns response\nprocessResponse([resource|null $curl_handle], [mixed|null $response]) -> [mixed] - Processes the response into headers and body\nisBaeEnv() -> [bool] - Checks if running in Baidu App Engine environment\ngetResponseHeader([string|null $header]) -> [mixed] - Gets specific or all response headers\ngetResponseBody() -> [string] - Gets the response body\ngetResponseCode() -> [int] - Gets the HTTP response code",
    "Canonical_solution": "use Think\\Upload\\Driver\\Bcs\\BCS_RequestCore_Exception as BCS_RequestCore_Exception;\n\nclass BcsRequestcore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->setProxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function setCredentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function setMethod($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if (false !== $position && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->setReadStreamSize($size);\n    }\n\n    public function setReadFile($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->setReadStream($read_file_handle);\n    }\n\n    public function setWriteStream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->setWriteStream($write_file_handle);\n    }\n\n    public function setProxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new BCS_RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function sendRequest($parse = false)\n    {\n        if (false === $this->isBaeEnv()) {\n            set_time_limit(0);\n        }\n\n        $curl_handle = $this->prepRequest();\n        $this->response = curl_exec($curl_handle);\n\n        if (false === $this->response ||\n            (self::HTTP_GET === $this->method &&\n                curl_errno($curl_handle) === CURLE_PARTIAL_FILE)) {\n            throw new BCS_RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->processResponse($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                $class = '\\Think\\Upload\\Driver\\Bcs\\\\' . $this->response_class;\n                return new $class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    private function isBaeEnv()\n    {\n        if (isset($_SERVER['HTTP_HOST'])) {\n            $host = $_SERVER['HTTP_HOST'];\n            $pos = strpos($host, '.');\n            if (false !== $pos) {\n                $substr = substr($host, $pos + 1);\n                if ('duapp.com' == $substr) {\n                    return true;\n                }\n            }\n        }\n        if (isset($_SERVER[\"HTTP_BAE_LOGID\"])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function getResponseHeader($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->response_body;\n    }\n\n    public function getResponseCode()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = []) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->curl_handle = curl_init();\n        $this->debug_mode = false;\n        $this->request_class = 'BcsRequest';\n        $this->response_class = 'BcsResponse';\n        $this->useragent = 'BcsRequest/1.0';\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n        if ($this->curl_handle) {\n            curl_close($this->curl_handle);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = $method;\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($this->curl_handle, CURLOPT_HEADER, 1);\n        curl_setopt($this->curl_handle, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($this->curl_handle, CURLOPT_MAXREDIRS, 10);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, 30);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $key => $value) {\n                curl_setopt($this->curl_handle, $key, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        if ($this->read_file) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, function($ch, $handle) {\n                $fp = fopen($this->read_file, 'r');\n                $data = fread($fp, 8192);\n                fclose($fp);\n                return $data;\n            });\n        } elseif ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, function($ch, $handle) {\n                return fread($this->read_stream, $this->read_stream_size);\n            });\n        } elseif ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POST, 1);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->write_file) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, function($ch, $handle) {\n                $fp = fopen($this->write_file, 'w');\n                fwrite($fp, $handle);\n                fclose($fp);\n                return strlen($handle);\n            });\n        } elseif ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, function($ch, $handle) {\n                fwrite($this->write_stream, $handle);\n                return strlen($handle);\n            });\n        }\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($this->response_code === 200) {\n            $this->response_body = $this->response;\n            $this->response_headers = [];\n            preg_match_all('/^([A-Za-z]+): (.*)$/m', $this->response, $matches);\n            if (isset($matches[1])) {\n                $this->response_headers = array_combine($matches[1], $matches[2]);\n            }\n        } else {\n            $this->response_body = $this->response;\n            $this->response_headers = [];\n        }\n        return $parse ? $this->processResponse($this->curl_handle, $this->response) : $this->response;\n    }\n\n    public function processResponse($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = $this->response;\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_headers = [];\n        preg_match_all('/^([A-Za-z]+): (.*)$/m', $response, $matches);\n        if (isset($matches[1])) {\n            $this->response_headers = array_combine($matches[1], $matches[2]);\n        }\n        return $this;\n    }\n\n    public function isBaeEnv() {\n        return defined('BAE_ENV') && BAE_ENV === true;\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a PHP class that implements a simple HTTP client using cURL for making GET requests, with configurable options and proper error handling.\n\nClass Description: The SimpleHttpClient class provides functionality to send HTTP GET requests using PHP's cURL extension. It includes default cURL options that can be customized, handles errors appropriately, and parses the response into status code, headers, and body.\n\nAttributes:\n\ncurlOptions: [array] - An associative array of default cURL options including settings for headers, redirects, timeouts, and response handling.\n\nMethods:\n\nhttpGet: [Name]($url, $options) -> [array] - Sends an HTTP GET request to the specified URL with optional configuration. Returns an associative array containing the response status code, headers, and body.\n- Parameters:\n  - $url: [string] - The target URL for the GET request\n  - $options: [array] - Optional configuration array (currently only supports 'timeout' override)\n- Return: [array] - Associative array with keys: 'statusCode' (int), 'headers' (array), and 'body' (string)\n- Throws: RuntimeException when cURL encounters an error",
    "Canonical_solution": "namespace Hhxsv5\\LaravelS\\Components\\HttpClient;\n\nuse Swoole\\Coroutine\\Http\\Client as CoroutineClient;\n\nclass SimpleHttpClient\n{\n    protected $curlOptions = [\n        CURLOPT_HEADER         => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_MAXREDIRS      => 3,\n        CURLOPT_TIMEOUT        => 5,\n        CURLOPT_CONNECTTIMEOUT => 3,\n    ];\n\n    public function httpGet($url, array $options)\n    {\n        $handle = curl_init();\n        $finalOptions = [\n                CURLOPT_URL     => $url,\n                CURLOPT_HTTPGET => true,\n            ] + $this->curlOptions;\n        if (isset($options['timeout'])) {\n            $finalOptions[CURLOPT_TIMEOUT] = $options['timeout'];\n        }\n        curl_setopt_array($handle, $finalOptions);\n        $responseStr = curl_exec($handle);\n        $errno = curl_errno($handle);\n        $errmsg = curl_error($handle);\n        if ($errno !== 0 || $errmsg !== '') {\n            curl_close($handle);\n            $msg = sprintf('Failed to send Http request(%s), errcode=%d, errmsg=%s', $url, $errno, $errmsg);\n            throw new \\RuntimeException($msg, $errno);\n        }\n\n        $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);\n        curl_close($handle);\n\n        $header = substr($responseStr, 0, $headerSize);\n        $body = substr($responseStr, $headerSize);\n        $lines = explode(\"\\n\", $header);\n        array_shift($lines);\n\n        $headers = [];\n        foreach ($lines as $part) {\n            $middle = explode(':', $part);\n            $key = trim($middle[0]);\n            if ($key === '') {\n                continue;\n            }\n            if (isset($headers[$key])) {\n                $headers[$key] = (array)$headers[$key];\n                $headers[$key][] = isset($middle[1]) ? trim($middle[1]) : '';\n            } else {\n                $headers[$key] = isset($middle[1]) ? trim($middle[1]) : '';\n            }\n        }\n        return ['statusCode' => $statusCode, 'headers' => $headers, 'body' => $body];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class SimpleHttpClient {\n    protected $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_HEADER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    ];\n\n    public function httpGet($url, $options = [])\n    {\n        $ch = curl_init();\n        $mergedOptions = array_merge($this->curlOptions, $options);\n        $mergedOptions[CURLOPT_URL] = $url;\n        curl_setopt_array($ch, $mergedOptions);\n\n        $response = curl_exec($ch);\n\n        if ($response === false) {\n            throw new RuntimeException('cURL error: ' . curl_error($ch));\n        }\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headersPart = $parts[0];\n        $bodyPart = isset($parts[1]) ? $parts[1] : '';\n\n        $statusLine = explode(\"\\r\\n\", $headersPart)[0];\n        $statusParts = explode(' ', $statusLine, 3);\n        $statusCode = (int) $statusParts[1];\n\n        $headers = [];\n        $headerLines = explode(\"\\r\\n\", $headersPart);\n        foreach ($headerLines as $line) {\n            if ($line === '') break;\n            $headers[] = $line;\n        }\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $bodyPart,\n        ];\n    }\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Implement a class for interacting with Baidu Cloud Storage (BCS) using HTTP requests through cURL in PHP, handling file uploads, downloads, and other operations with proper error handling and response parsing.\n\nClass Description: The Bcs class provides an interface to interact with Baidu Cloud Storage (BCS) service. It handles authentication, HTTP requests, and response processing for various operations on cloud storage.\n\nAttributes:\n- rootPath: [string] - The root path for storage operations\n- error: [string] - Stores the last error message encountered\n- config: [array] - Configuration array containing AccessKey, SecretKey, bucket, rename, and timeout settings\n- bcs: [BaiduBCS|null] - Instance of the BaiduBCS client\n\nMethods:\n- __construct([array $config]) -> [void] - Initializes the BCS client with configuration including AccessKey, SecretKey, and other settings\n- request([string $path], [string $method], [array|null $headers], [mixed $body]) -> [mixed] - Makes an HTTP request to BCS service and processes the response\n- response([string $text]) -> [array] - Parses the JSON response from BCS into an array\n- error([string $header]) -> [void] - Processes error responses from BCS and sets the error message\n\nThe request method specifically handles:\n1. Initializing cURL session\n2. Setting request headers and body\n3. Configuring request method (GET, POST, PUT, HEAD)\n4. Executing the request\n5. Processing response and errors\n6. Cleaning up resources",
    "Canonical_solution": "use Think\\Upload\\Driver\\Bcs\\BaiduBCS;\n\nclass Bcs\n{\n    private $rootPath;\n    const DEFAULT_URL = 'bcs.duapp.com';\n    private $error = '';\n    public $config = array(\n        'AccessKey'=> '',\n        'SecretKey'=> '',\n        'bucket'   => '',\n        'rename'   => false,\n        'timeout'  => 3600,\n    );\n    public $bcs = null;\n\n    public function __construct($config)\n    {\n        $this->config = array_merge($this->config, $config);\n        $bcsClass = dirname(__FILE__). \"/Bcs/bcs.class.php\";\n        if(is_file($bcsClass))\n            require_once($bcsClass);\n        $this->bcs = new BaiduBCS($this->config['AccessKey'], $this->config['SecretKey'], self::DEFAULT_URL);\n    }\n\n    private function request($path, $method, $headers = null, $body = null)\n    {\n        $ch = curl_init($path);\n        $_headers = array('Expect:');\n        if (!is_null($headers) && is_array($headers)){\n            foreach($headers as $k => $v) {\n                array_push($_headers, \"{$k}: {$v}\");\n            }\n        }\n\n        $length = 0;\n        $date = gmdate('D, d M Y H:i:s \\G\\M\\T');\n        if (!is_null($body)) {\n            if(is_resource($body)){\n                fseek($body, 0, SEEK_END);\n                $length = ftell($body);\n                fseek($body, 0);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_INFILE, $body);\n                curl_setopt($ch, CURLOPT_INFILESIZE, $length);\n            } else {\n                $length = @strlen($body);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } else {\n            array_push($_headers, \"Content-Length: {$length}\");\n        }\n\n        array_push($_headers, \"Date: {$date}\");\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $_headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout']);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($method == 'PUT' || $method == 'POST') {\n            curl_setopt($ch, CURLOPT_POST, 1);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, 0);\n        }\n\n        if ($method == 'HEAD') {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        }\n\n        $response = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($status == 200) {\n            if ($method == 'GET') {\n                return $body;\n            } else {\n                $data = $this->response($header);\n                return count($data) > 0 ? $data : true;\n            }\n        } else {\n            $this->error($header);\n            return false;\n        }\n    }\n\n    private function response($text)\n    {\n        $items = json_decode($text, true);\n        return $items;\n    }\n\n    private function error($header)\n    {\n        list($status, $stash) = explode(\"\\r\\n\", $header, 2);\n        list($v, $code, $message) = explode(\" \", $status, 3);\n        $message = is_null($message) ? 'File Not Found' : \"[{$status}]:{$message}\";\n        $this->error = $message;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Bcs {\n    public $rootPath;\n    public $error;\n    public $config;\n    public $bcs;\n\n    public function __construct(array $config = []) {\n        $this->config = $config;\n        $this->rootPath = $config['rootPath'] ?? '';\n        $this->error = '';\n        $this->bcs = new BaiduBCS();\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = $this->rootPath . $path;\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n        if ($headers) {\n            curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($body) {\n            curl_setopt($curl, CURLOPT_POSTFIELDS, $body);\n        }\n        $response = curl_exec($curl);\n        if ($response === false) {\n            $this->error = 'cURL error: ' . curl_error($curl);\n            return false;\n        }\n        $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            $this->error = 'HTTP error: ' . $httpCode;\n            return false;\n        }\n        $this->error = '';\n        return $response;\n    }\n\n    public function response(string $text) {\n        return json_decode($text, true);\n    }\n\n    public function error(string $text) {\n        $response = json_decode($text, true);\n        if (isset($response['error'])) {\n            $this->error = $response['error'];\n        } else {\n            $this->error = 'Unknown error';\n        }\n    }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a PHP class that utilizes the Guzzle HTTP client to synchronize video processing tasks with a remote API endpoint, handling request signing and response parsing.\n\nClass Description: The SyncVideo class provides functionality to send video processing requests to a remote API endpoint using HTTP POST requests. It handles request signing, timeout configuration, and response parsing.\n\nAttributes:\n- config: [Upyun\\Config] - Configuration object containing service credentials, timeout settings, and endpoint information\n\nMethods:\n- __construct(Config $config) -> [void] - Initializes the class with the provided configuration object\n- process(array $params, string $path) -> [array] - Sends a synchronized video processing request to the specified path with the given parameters, returns the parsed JSON response",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\n\nclass SyncVideo {\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    public function process($params, $path) {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $path = '/' . $this->config->serviceName . $path;\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getSyncVideoEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'json' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass SyncVideo {\n    private $client;\n    private $config;\n\n    public function __construct(\\Upyun\\Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $this->config->getTimeout()\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $url = $this->config->getEndpoint() . $path;\n        $body = json_encode($params);\n        \n        $signature = $this->generateSignature($params, $this->config->getSignKey());\n        \n        try {\n            $response = $this->client->post($url, [\n                'headers' => ['X-Request-Signature' => $signature],\n                'body' => $body\n            ]);\n            \n            $responseData = json_decode($response->getBody(), true);\n            if (json_last_error() === JSON_ERROR_NONE) {\n                return $responseData;\n            } else {\n                throw new \\Exception('Failed to parse response JSON');\n            }\n        } catch (RequestException $e) {\n            throw new \\Exception('HTTP request failed: ' . $e->getMessage());\n        }\n    }\n\n    private function generateSignature(array $params, string $secretKey): string {\n        $data = http_build_query($params);\n        return hash_hmac('sha1', $data, $secretKey);\n    }\n}"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The `baiduRequestCore` class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, and includes streaming capabilities for both uploads and downloads.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [string] - The complete response from the server\nresponse_headers: [array] - Associative array of response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - The HTTP response status code\nresponse_info: [array] - Additional cURL response information\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - The HTTP method to use (GET, POST, etc.)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Username for authentication\npassword: [string|null] - Password for authentication\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Whether to enable debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for reading data\nread_stream: [resource|null] - Stream resource for reading data\nread_stream_size: [int|null] - Size of the read stream\nread_stream_read: [int] - Bytes read from the stream\nwrite_file: [string|null] - File path for writing data\nwrite_stream: [resource|null] - Stream resource for writing data\nseek_position: [int|null] - Position to seek in the read stream\nregistered_streaming_read_callback: [callable|null] - Callback for streaming reads\nregistered_streaming_write_callback: [callable|null] - Callback for streaming writes\n\nMethods:\n\n__construct: [function]([string|null $url, array|null $proxy, array|null $helpers]) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct: [function]() -> [self] - Cleans up any open file handles\nset_credentials: [function]([string $user, string $pass]) -> [self] - Sets authentication credentials\nadd_header: [function]([string $key, string $value]) -> [self] - Adds a request header\nremove_header: [function]([string $key]) -> [self] - Removes a request header\nset_method: [function]([string $method]) -> [self] - Sets the HTTP method\nset_useragent: [function]([string $ua]) -> [self] - Sets the user agent string\nset_body: [function]([string $body]) -> [self] - Sets the request body\nset_request_url: [function]([string $url]) -> [self] - Sets the request URL\nset_curlopts: [function]([array $curlopts]) -> [self] - Sets additional cURL options\nset_read_stream_size: [function]([int $size]) -> [self] - Sets the read stream size\nset_read_stream: [function]([resource $resource, int|null $size]) -> [self] - Sets the read stream resource\nset_read_file: [function]([string $location]) -> [self] - Sets a file to read from\nset_write_stream: [function]([resource $resource]) -> [self] - Sets the write stream resource\nset_write_file: [function]([string $location]) -> [self] - Sets a file to write to\nset_proxy: [function]([string $proxy]) -> [self] - Configures proxy settings\nset_seek_position: [function]([int|null $position]) -> [self] - Sets the seek position for the read stream\nregister_streaming_read_callback: [function]([callable $callback]) -> [self] - Registers a streaming read callback\nregister_streaming_write_callback: [function]([callable $callback]) -> [self] - Registers a streaming write callback\nstreaming_read_callback: [function]([resource $curl_handle, resource $file_handle, int $length]) -> [string] - Callback for streaming reads\nstreaming_write_callback: [function]([resource $curl_handle, string $data]) -> [int] - Callback for streaming writes\nprep_request: [function]() -> [resource] - Prepares and returns a cURL handle with configured options\nprocess_response: [function]([resource|null $curl_handle, string|null $response]) -> [mixed] - Processes the cURL response\nsend_request: [function]([bool $parse]) -> [mixed] - Sends the request and returns the response\nget_response_header: [function]([string|null $header]) -> [mixed] - Gets a specific response header or all headers\nget_response_body: [function]() -> [string] - Gets the response body\nget_response_code: [function]() -> [int] - Gets the response status code",
    "Canonical_solution": "class baiduRequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'baiduRequestCore';\n    public $response_class = 'baiduResponseCore';\n    public $useragent = 'baiduRequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n        \n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new baiduRequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n            if ($written_last === false) {\n                return $written_total;\n            }\n            $written_total += $written_last;\n        }\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n        \n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n        \n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n        \n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        \n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n        \n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n        \n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new baiduRequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n        \n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n        \n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n        \n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n            \n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n            \n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n            \n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n            \n            if ($curl_handle && $response) {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n        \n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n        \n        if ($this->response === false) {\n            throw new baiduRequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n        \n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n        \n        if ($parse) {\n            return $parsed_response;\n        }\n        \n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass baiduRequestCore {\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = []) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->curlopts = [];\n        $this->debug_mode = false;\n        $this->request_class = 'stdClass';\n        $this->response_class = 'stdClass';\n        $this->useragent = 'Mozilla/5.0';\n        $this->curl_handle = false;\n        $this->method = 'GET';\n    }\n\n    public function __destruct() {\n        if ($this->curl_handle && is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = $method;\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        $this->read_stream_read = 0;\n        if ($this->read_stream) {\n            $this->read_stream_read = fread($file_handle, $length);\n        } elseif ($this->read_file) {\n            $this->read_stream_read = file_get_contents($this->read_file, false, null, $this->seek_position);\n            $this->seek_position += $this->read_stream_read;\n        }\n        return $this->read_stream_read;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->write_stream) {\n            return fwrite($this->write_stream, $data);\n        } elseif ($this->write_file) {\n            return file_put_contents($this->write_file, $data, FILE_APPEND);\n        }\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        if ($this->request_url) {\n            curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        }\n        if ($this->method) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPMETHOD, $this->method);\n        }\n        if ($this->request_headers) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $key => $value) {\n                curl_setopt($this->curl_handle, $key, $value);\n            }\n        }\n        if ($this->useragent) {\n            curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        }\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response) {\n            curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n            $this->response = $response;\n        } else {\n            $this->response = curl_exec($curl_handle);\n        }\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_headers = [];\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_body = $this->response;\n        return $this;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            $this->process_response();\n        }\n        return $this;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL, supporting various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive HTTP client implementation using PHP's cURL extension. It supports standard HTTP methods (GET, POST, PUT, DELETE, HEAD), handles request/response processing, streaming uploads/downloads, authentication, proxy configuration, and SSL verification.\n\nAttributes:\n\nrequest_url: string - The URL to send the request to\nrequest_headers: array - Associative array of request headers\nrequest_body: string - The request body content\nresponse: string - The complete response including headers and body\nresponse_headers: array - Parsed response headers\nresponse_body: string - The response body content\nresponse_code: int - HTTP response status code\nresponse_info: array - Additional cURL response information\ncurl_handle: resource - The cURL handle resource\nmethod: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: array|null - Proxy configuration details\nusername: string|null - Username for authentication\npassword: string|null - Password for authentication\ncurlopts: array|null - Additional cURL options\ndebug_mode: bool - Whether to enable debug mode\nrequest_class: string - Class name for request handling\nresponse_class: string - Class name for response handling\nuseragent: string - User-Agent header value\nread_file: string|null - File path for streaming read\nread_stream: resource|null - Stream resource for reading\nread_stream_size: int|null - Size of read stream\nread_stream_read: int - Bytes read from stream\nwrite_file: string|null - File path for streaming write\nwrite_stream: resource|null - Stream resource for writing\nseek_position: int|null - Position to seek in read stream\ncacert_location: mixed - CA certificate location\nssl_verification: bool - Whether to verify SSL\nregistered_streaming_read_callback: callable|null - Callback for streaming read\nregistered_streaming_write_callback: callable|null - Callback for streaming write\ntimeout: int - Request timeout in seconds\nconnect_timeout: int - Connection timeout in seconds\n\nMethods:\n\n__construct(string $url = null, string $proxy = null, array $helpers = null) -> self - Initializes the request with URL and optional proxy/helpers\n__destruct() -> self - Cleans up open file handles\nset_credentials(string $user, string $pass) -> self - Sets authentication credentials\nadd_header(string $key, string $value) -> self - Adds a request header\nremove_header(string $key) -> self - Removes a request header\nset_method(string $method) -> self - Sets the HTTP method\nset_useragent(string $ua) -> self - Sets the User-Agent header\nset_body(string $body) -> self - Sets the request body\nset_request_url(string $url) -> self - Sets the request URL\nset_curlopts(array $curlopts) -> self - Sets additional cURL options\nset_read_stream_size(int $size) -> self - Sets the read stream size\nset_read_stream(resource $resource, int $size = null) -> self - Sets the read stream resource\nset_read_file(string $location) -> self - Sets a file for streaming read\nset_write_stream(resource $resource) -> self - Sets the write stream resource\nset_write_file(string $location) -> self - Sets a file for streaming write\nset_proxy(string $proxy) -> self - Configures proxy settings\nset_seek_position(int $position) -> self - Sets the seek position for read stream\nregister_streaming_read_callback(callable $callback) -> self - Registers streaming read callback\nregister_streaming_write_callback(callable $callback) -> self - Registers streaming write callback\nstreaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Callback for streaming read\nstreaming_write_callback(resource $curl_handle, string $data) -> int - Callback for streaming write\nprep_request() -> resource - Prepares and returns a cURL handle\nprocess_response(resource $curl_handle = null, string $response = null) -> mixed - Processes the cURL response\nsend_request(bool $parse = false) -> mixed - Sends the request and returns response\nsend_multi_request(array $handles, array $opt = null) -> array - Sends multiple requests in parallel",
    "Canonical_solution": "namespace NOS\\Http;\n\nclass RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'NOS\\Http\\RequestCore';\n    public $response_class = 'NOS\\Http\\ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n    public $timeout = 5184000;\n    public $connect_timeout = 10;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer)$position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false) {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification) {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        } else {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        } elseif (is_string($this->cacert_location)) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1]) ? $kv[1] : '';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                return new ResponseCore($this->response_headers, $this->response_body, $this->response_code);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false) {\n            throw new RequestCore_Exception('cURL resource: ' . (string)$curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null)\n    {\n        set_time_limit(0);\n        if (count($handles) === 0) return array();\n        if (!$opt) $opt = array();\n\n        $limit = isset($opt['limit']) ? $opt['limit'] : -1;\n        $handle_list = $handles;\n        $http = new $this->request_class();\n        $multi_handle = curl_multi_init();\n        $handles_post = array();\n        $added = count($handles);\n        $last_handle = null;\n        $count = 0;\n        $i = 0;\n\n        while ($i < $added) {\n            if ($limit > 0 && $i >= $limit) break;\n            curl_multi_add_handle($multi_handle, array_shift($handles));\n            $i++;\n        }\n\n        do {\n            $active = false;\n            while (($status = curl_multi_exec($multi_handle, $active)) === CURLM_CALL_MULTI_PERFORM) {\n                if (count($handles) > 0) break;\n            }\n\n            $to_process = array();\n            while ($done = curl_multi_info_read($multi_handle)) {\n                if ($done['result'] > 0) {\n                    throw new RequestCore_Exception('cURL resource: ' . (string)$done['handle'] . '; cURL error: ' . curl_error($done['handle']) . ' (' . $done['result'] . ')');\n                } elseif (!isset($to_process[(int)$done['handle']])) {\n                    $to_process[(int)$done['handle']] = $done;\n                }\n            }\n\n            foreach ($to_process as $pkey => $done) {\n                $response = $http->process_response($done['handle'], curl_multi_getcontent($done['handle']));\n                $key = array_search($done['handle'], $handle_list, true);\n                $handles_post[$key] = $response;\n\n                if (count($handles) > 0) {\n                    curl_multi_add_handle($multi_handle, array_shift($handles));\n                }\n\n                curl_multi_remove_handle($multi_handle, $done['handle']);\n                curl_close($done['handle']);\n            }\n        } while ($active || count($handles_post) < $added);\n\n        curl_multi_close($multi_handle);\n        ksort($handles_post, SORT_N",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout;\n    public $connect_timeout;\n\n    public function __construct(string $url = null, string $proxy = null, array $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->curl_handle = curl_init();\n        $this->set_default_options();\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n        if ($this->curl_handle) {\n            curl_close($this->curl_handle);\n        }\n    }\n\n    public function set_credentials(string $user, string $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header(string $key, string $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header(string $key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method(string $method) {\n        $this->method = $method;\n        return $this;\n    }\n\n    public function set_useragent(string $ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body(string $body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url(string $url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts(array $curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size(int $size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream(resource $resource, int $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file(string $location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream(resource $resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file(string $location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy(string $proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position(int $position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback(callable $callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback(callable $callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) {\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback(resource $curl_handle, string $data) {\n        return fwrite($curl_handle, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        $this->set_default_options();\n        return $this->curl_handle;\n    }\n\n    public function process_response(resource $curl_handle = null, string $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response = $response;\n        $this->response_headers = [];\n        $headers = [];\n        $header_count = 0;\n        while ($header = curl_getheader($curl_handle)) {\n            $headers[] = $header;\n            $header_count++;\n        }\n        foreach ($headers as $header) {\n            list($name, $value) = explode(':', $header[0], 2);\n            $this->response_headers[$name] = $value;\n        }\n        return $this;\n    }\n\n    public function send_request(bool $parse = false) {\n        $this->prep_request();\n        $this->set_curl_options();\n        $this->set_curl_headers();\n        $this->set_curl_body();\n        $this->set_curl_proxy();\n        $this->set_curl_authentication();\n        $this->set_curl_streaming();\n        $this->set_curl_ssl();\n        $this->set_curl_timeout();\n        $this->set_curl_connect_timeout();\n        $this->set_curl_useragent();\n        $this->set_curl_debug_mode();\n        $this->set_curl_request_class();\n        $this->set_curl_response_class();\n        $this->set_curl_read_file();\n        $this->set_curl_read_stream();\n        $this->set_curl_write_file();\n        $this->set_curl_write_stream();\n        $this->set_curl_seek_position();\n        $this->set_curl_registered_callbacks();\n        $this->set_curl_cacert_location();\n        $this->set_curl_ssl_verification();\n        $this->set_curl_custom_request();\n        $this->set_curl_follow_location();\n        $this->set_curl_max_redirects();\n        $this->set_curl_http_version();\n        $this->set_curl_header();\n        $this->set_curl_verbose();\n        $this->set_curl_fopen();\n        $this->set_curl_krb4();\n        $this->set_curl_ssl_verifyhost();\n        $this->set_curl_ssl_verifypeer();\n        $this->set_curl_ssl_cert();\n        $this->set_curl_ssl_cert_password();\n        $this->set_curl_ssl_cafile();\n        $this->set_curl_ssl_capath();\n        $this->set_curl_ssl_cipher();\n        $this->set_curl_ssl_server_name();\n        $this->set_curl_ssl_server_trust());\n        return $this->process_response();\n    }\n\n    public function send_multi_request(array $handles, array $opt = null) {\n        $mh = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($mh, $handle);\n        }\n        $running = [];\n        while (curl_multi_exec($mh, $running)) {\n            if ($running) {\n                foreach ($running as $ch) {\n                    $info = curl_getinfo($ch);\n                    $this->response_code = $info['http_code'];\n                    $this->response_info = $info;\n                }\n            }\n        }\n        curl_multi_close($mh);\n        return $handles;\n    }\n\n    private function set_default_options() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        curl_setopt($this->curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n    }\n\n    private function set_curl_options() {\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $key => $value) {\n                curl_setopt($this->curl_handle, $key, $value);\n            }\n        }\n    }\n\n    private function set_curl_headers() {\n        if ($this->request_headers) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        }\n    }\n\n    private function set_curl_body() {\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n    }\n\n    private function set_curl_proxy() {\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n    }\n\n    private function set_curl_authentication() {\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n    }\n\n    private function set_curl_streaming() {\n        if ($this->read_file) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_FILE, fopen($this->read_file, 'r'));\n        } elseif ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->read_stream);\n        } elseif ($this->write_file) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_FILE, fopen($this->write_file, 'w'));\n        } elseif ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n    }\n\n    private function set_curl_ssl() {\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n    }\n\n    private function set_curl_timeout() {\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n    }\n\n    private function set_curl_connect_timeout() {\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n    }\n\n    private function set_curl_useragent() {\n        if ($this->useragent) {\n            curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        }\n    }\n\n    private function set_curl_debug_mode() {\n        if ($this->debug_mode) {\n            curl_setopt($this->curl_handle, CURLOPT_VERBOSE, true);\n        }\n    }\n\n    private function set_curl_request_class() {\n        if ($this->request_class) {\n            curl_setopt($this->curl_handle, CURLOPT_REQUESTCLASS, $this->request_class);\n        }\n    }\n\n    private function set_curl_response_class() {\n        if ($this->response_class) {\n            curl_setopt($this->curl_handle, CURLOPT_RESPONSECLASS, $this->response_class);\n        }\n    }\n\n    private function set_curl_read_file() {\n        if ($this->read_file) {\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, fopen($this->read_file, 'r'));\n        }\n    }\n\n    private function set_curl_read_stream() {\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $this->read_stream);\n        }\n    }\n\n    private function set_curl_write_file() {\n        if ($this->write_file) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFILE, $this->write_file);\n        }\n    }\n\n    private function set_curl_write_stream() {\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEDATA, $this->write_stream);\n        }\n    }\n\n    private function set_curl_seek_position() {\n        if ($this->seek_position !== null) {\n            fseek($this->read_stream, $this->seek_position);\n        }\n    }\n\n    private function set_curl_registered_callbacks() {\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n    }\n\n    private function set_curl_cacert_location() {\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n    }\n\n    private function set_curl_ssl_verification() {\n        if ($this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n        } else {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        }\n    }\n\n    private function set_curl_custom_request() {\n        if ($this->method) {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n    }\n\n    private function set_curl_follow_location() {\n        curl_setopt($this->curl_handle, CURLOPT_FOLLOWLOCATION, true);\n    }\n\n    private function set_curl_max_redirects() {\n        curl_setopt($this->curl_handle, CURLOPT_MAXREDIRS, 5);\n    }\n\n    private function set_curl_http_version() {\n        curl_setopt($this->curl_handle, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);\n    }\n\n    private function set_curl_header() {\n        curl_setopt($this->curl_handle, CURLOPT_HEADER, true);\n    }\n\n    private function set_curl_verbose() {\n        curl_setopt($this->curl_handle, CURLOPT_VERBOSE, true);\n    }\n\n    private function set_curl_fopen() {\n        curl_setopt($this->curl_handle, CURLOPT_FOPEN, true);\n    }\n\n    private function set_curl_krb4() {\n        curl_setopt($this->curl_handle, CURLOPT_KRB4AUTH, true);\n    }\n\n    private function set_curl_ssl_verifyhost() {\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    private function set_curl_ssl_verifypeer() {\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n    }\n\n    private function set_curl_ssl_cert() {\n        curl_setopt($this->curl_handle, CURLOPT_SSLCERT, '');\n    }\n\n    private function set_curl_ssl_cert_password() {\n        curl_setopt($this->curl_handle, CURLOPT_SSLCERTPASS, '');\n    }\n\n    private function set_curl_ssl_cafile() {\n        curl_setopt($this->curl_handle, CURLOPT_CAFILE, '');\n    }\n\n    private function set_curl_ssl_capath() {\n        curl_setopt($this->curl_handle, CURLOPT_CAPATH, '');\n    }\n\n    private function set_curl_ssl_cipher() {\n        curl_setopt($this->curl_handle, CURLOPT_SSL_CIPHER, '');\n    }\n\n    private function set_curl_ssl_server_name() {\n        curl_setopt($this->curl_handle, CURLOPT_SSL_SERVER_NAME, '');\n    }\n\n    private function set_curl_ssl_server_trust()) {\n        curl_setopt($this->curl_handle, CURLOPT_SSL_SERVER_TRUST, '');\n    }\n}"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Implement a PHP class that interacts with the Online-Convert API to handle file conversion jobs, including creating new conversion jobs and checking job statuses.\n\nClass Description: The elFinderEditorOnlineConvert class extends elFinderEditor and provides functionality to interact with the Online-Convert API. It handles initialization, API key validation, and processing conversion requests through HTTP calls using cURL.\n\nAttributes:\n- allowed: array - Defines the allowed actions for this editor (init and api)\n\nMethods:\n- enabled() -> bool - Checks if the editor is enabled by verifying the API key constant and that Online-Convert isn't disabled\n- init() -> array - Initializes the editor and checks for API key and cURL availability\n- api() -> array - Main method to handle API interactions with Online-Convert service. Processes both job creation and status checking\n\nMethod Details:\n1. enabled() -> bool\n   - Input: None\n   - Output: Returns true if the editor is enabled (API key defined and Online-Convert not disabled)\n\n2. init() -> array\n   - Input: None\n   - Output: Returns array with API availability status (checks for API key and cURL function)\n\n3. api() -> array\n   - Input: (Handled through class properties)\n     - category: string - Conversion category\n     - convert: string - Target conversion format\n     - options: string/array - Conversion options\n     - source: string - Source file URL\n     - filename: string - Name of the file\n     - mime: string - MIME type of the file\n     - jobid: string - Job ID for status checking\n   - Output: Returns array containing either:\n     - API response data\n     - Error information\n     - Empty array for non-API conversions",
    "Canonical_solution": "class elFinderEditorOnlineConvert extends elFinderEditor\n{\n    protected $allowed = array('init', 'api');\n\n    public function enabled()\n    {\n        return defined('ELFINDER_ONLINE_CONVERT_APIKEY') && ELFINDER_ONLINE_CONVERT_APIKEY && (!defined('ELFINDER_DISABLE_ONLINE_CONVERT') || !ELFINDER_DISABLE_ONLINE_CONVERT);\n    }\n\n    public function init()\n    {\n        return array('api' => defined('ELFINDER_ONLINE_CONVERT_APIKEY') && ELFINDER_ONLINE_CONVERT_APIKEY && function_exists('curl_init'));\n    }\n\n    public function api()\n    {\n        $endpoint = 'https://api2.online-convert.com/jobs';\n        $category = $this->argValue('category');\n        $convert = $this->argValue('convert');\n        $options = $this->argValue('options');\n        $source = $this->argValue('source');\n        $filename = $this->argValue('filename');\n        $mime = $this->argValue('mime');\n        $jobid = $this->argValue('jobid');\n        $string_method = '';\n        $options = array();\n        $nonApi = array('android', 'blackberry', 'dpg', 'ipad', 'iphone', 'ipod', 'nintendo-3ds', 'nintendo-ds', 'ps3', 'psp', 'wii', 'xbox');\n        if (in_array($convert, $nonApi)) {\n            return array('apires' => array());\n        }\n        $ch = null;\n        if ($convert && $source) {\n            $request = array(\n                'input' => array(array(\n                    'type' => 'remote',\n                    'source' => $source\n                )),\n                'conversion' => array(array(\n                    'target' => $convert\n                ))\n            );\n\n            if ($filename !== '') {\n                $request['input'][0]['filename'] = $filename;\n            }\n\n            if ($mime !== '') {\n                $request['input'][0]['content_type'] = $mime;\n            }\n\n            if ($category) {\n                $request['conversion'][0]['category'] = $category;\n            }\n\n            if ($options && $options !== 'null') {\n                $options = json_decode($options, true);\n            }\n            if (!is_array($options)) {\n                $options = array();\n            }\n            if ($options) {\n                $request['conversion'][0]['options'] = $options;\n            }\n\n            $ch = curl_init($endpoint);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($request));\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'X-Oc-Api-Key: ' . ELFINDER_ONLINE_CONVERT_APIKEY,\n                'Content-Type: application/json',\n                'cache-control: no-cache'\n            ));\n        } else if ($jobid) {\n            $ch = curl_init($endpoint . '/' . $jobid);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'X-Oc-Api-Key: ' . ELFINDER_ONLINE_CONVERT_APIKEY,\n                'cache-control: no-cache'\n            ));\n        }\n\n        if ($ch) {\n            $response = curl_exec($ch);\n            $info = curl_getinfo($ch);\n            $error = curl_error($ch);\n            curl_close($ch);\n\n            if (!empty($error)) {\n                $res = array('error' => $error);\n            } else {\n                $data = json_decode($response, true);\n                if (isset($data['status']) && isset($data['status']['code']) && $data['status']['code'] === 'completed') {\n                    $session = $this->elfinder->getSession();\n                    $urlContentSaveIds = $session->get('urlContentSaveIds', array());\n                    $urlContentSaveIds['OnlineConvert-' . $data['id']] = true;\n                    $session->set('urlContentSaveIds', $urlContentSaveIds);\n                }\n                $res = array('apires' => $data);\n            }\n\n            return $res;\n        } else {\n            return array('error' => array('errCmdParams', 'editor.OnlineConvert.api'));\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n    const API_KEY = 'your_api_key_here';\n    const DISABLED = false;\n\n    public function enabled() {\n        return defined(self::API_KEY) && !self::DISABLED;\n    }\n\n    public function init() {\n        $apiKey = defined(self::API_KEY) ? self::API_KEY : null;\n        return [\n            'available' => (isset($apiKey) && function_exists('curl_init'))\n        ];\n    }\n\n    public function api() {\n        if (isset($this->jobid)) {\n            $url = \"https://api.online-convert.com/v1/jobs/{$this->jobid}\";\n            $headers = [\"Authorization: Bearer \" . self::API_KEY, \"Content-Type: application/json\"];\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n            $response = curl_exec($ch);\n            if ($response === false) {\n                return ['error' => 'cURL error'];\n            }\n            $data = json_decode($response, true);\n            if (json_last_error() !== JSON_ERROR_NONE) {\n                return ['error' => 'Invalid response'];\n            }\n            return $data;\n        } else {\n            $url = \"https://api.online-convert.com/v1/jobs\";\n            $headers = [\"Authorization: Bearer \" . self::API_KEY, \"Content-Type: application/json\"];\n            $params = [\n                'category' => $this->category,\n                'convert' => $this->convert,\n                'options' => $this->options,\n                'source' => $this->source,\n                'filename' => $this->filename,\n                'mime' => $this->mime\n            ];\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n            $response = curl_exec($ch);\n            if ($response === false) {\n                return ['error' => 'cURL error'];\n            }\n            $data = json_decode($response, true);\n            if (json_last_error() !== JSON_ERROR_NONE) {\n                return ['error' => 'Invalid response'];\n            }\n            return $data;\n        }\n    }\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a PHP class for interacting with Google Drive API using OAuth 2.0 authentication and cURL for HTTP requests.\n\nClass Description: The Googledrive class provides functionality to authenticate with Google Drive API and make authorized API requests. It handles OAuth 2.0 token management and provides a method for making API calls.\n\nAttributes:\n\naccess_token: string - The OAuth 2.0 access token for API authentication\ndisktag: string - Identifier for the disk configuration\nclient_id: string - Google API client ID\nclient_secret: string - Google API client secret\nredirect_uri: string - OAuth redirect URI\noauth_url: string - Google OAuth endpoint URL\napi_url: string - Google Drive API endpoint URL\nscope: string - API access scope\ndriveId: string - Google Drive ID\nerror: array - Stores error information if any occurs\n\nMethods:\n\n__construct: [Name](tag: string) -> void - Constructor that initializes the class with configuration values\nGDAPI: [Name](method: string, url: string, data: string = '') -> array - Makes an authenticated API request to Google Drive\nget_access_token: [Name](refresh_token: string) -> bool - Retrieves and manages access tokens using refresh tokens",
    "Canonical_solution": "class Googledrive {\n    protected $access_token;\n    protected $disktag;\n    protected $client_id;\n    protected $client_secret;\n    protected $redirect_uri;\n    protected $oauth_url;\n    protected $api_url;\n    protected $scope;\n    protected $driveId;\n    protected $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        $this->redirect_uri = 'https://scfonedrive.github.io';\n        if (getConfig('client_id', $tag) && getConfig('client_secret', $tag)) {\n            $this->client_id = getConfig('client_id', $tag);\n            $this->client_secret = getConfig('client_secret', $tag);\n        } else {\n            $this->client_id = '106151778902-ajieetaab5ondhbvia97n4tr5k0cg8eo.apps.googleusercontent.com';\n            $this->client_secret = 'LlCV-rQClzYIKCEqiVddh68G';\n        }\n        $this->oauth_url = 'https://accounts.google.com/o/oauth2/';\n        $this->api_url = 'https://www.googleapis.com/drive/v3';\n        $this->scope = 'https://www.googleapis.com/auth/drive';\n        $this->client_secret = urlencode($this->client_secret);\n        $this->scope = urlencode($this->scope);\n        $this->driveId = getConfig('driveId', $tag);\n        $res = $this->get_access_token(getConfig('refresh_token', $tag));\n    }\n\n    protected function GDAPI($method, $url, $data = '') {\n        $headers['Authorization'] = 'Bearer ' . $this->access_token;\n        if (!isset($headers['Accept'])) $headers['Accept'] = '*/*';\n        $headers['Content-Type'] = 'application/json';\n        $sendHeaders = array();\n        foreach ($headers as $headerName => $headerVal) {\n            $sendHeaders[] = $headerName . ': ' . $headerVal;\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $sendHeaders);\n        $response['body'] = curl_exec($ch);\n        $response['stat'] = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $response;\n    }\n\n    protected function get_access_token($refresh_token) {\n        if (!$refresh_token) {\n            $tmp['stat'] = 0;\n            $tmp['body'] = 'No refresh_token';\n            $this->error = $tmp;\n            return false;\n        }\n        if (!($this->access_token = getcache('access_token', $this->disktag))) {\n            $p = 0;\n            $data['client_id'] = $this->client_id;\n            $data['client_secret'] = $this->client_secret;\n            $data['grant_type'] = 'refresh_token';\n            $data['refresh_token'] = $refresh_token;\n            while ($response['stat'] == 0 && $p < 3) {\n                $response = curl('POST', $this->oauth_url . 'token', json_encode($data));\n                $p++;\n            }\n            if ($response['stat'] == 200) $ret = json_decode($response['body'], true);\n            if (!isset($ret['access_token'])) {\n                error_log1($this->oauth_url . 'token' . '?client_id=' . $this->client_id . '&client_secret=' . $this->client_secret . '&grant_type=refresh_token&refresh_token=' . substr($refresh_token, 0, 20) . '******' . substr($refresh_token, -20));\n                error_log1('failed to get [' . $this->disktag . '] access_token. response: ' . $response['body']);\n                $response['body'] = json_encode(json_decode($response['body']), JSON_PRETTY_PRINT);\n                $response['body'] .= '\\nfailed to get [' . $this->disktag . '] access_token.';\n                $this->error = $response;\n                return false;\n            }\n            $tmp = $ret;\n            $tmp['access_token'] = substr($tmp['access_token'], 0, 10) . '******';\n            error_log1('[' . $this->disktag . '] Get access token:' . json_encode($tmp, JSON_PRETTY_PRINT));\n            $this->access_token = $ret['access_token'];\n            savecache('access_token', $this->access_token, $this->disktag, $ret['expires_in'] - 300);\n            return true;\n        }\n        return true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "class Googledrive {\n    public $access_token;\n    public $disktag;\n    public $client_id;\n    public $client_secret;\n    public $redirect_uri;\n    public $oauth_url;\n    public $api_url;\n    public $scope;\n    public $driveId;\n    public $error = [];\n\n    public function __construct(string $tag) {\n        $this->disktag = $tag;\n    }\n\n    public function GDAPI(string $method, string $url, string $data = ''): array {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->access_token\n        ]);\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $this->error[] = 'cURL error: ' . curl_error($ch);\n            return [];\n        }\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code >= 400) {\n            $this->error[] = 'API error: ' . $http_code;\n            return [];\n        }\n        return json_decode($response, true);\n    }\n\n    public function get_access_token(string $refresh_token): bool {\n        $token_url = $this->oauth_url . 'token';\n        $data = http_build_query([\n            'grant_type' => 'refresh_token',\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token\n        ]);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $token_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $this->error[] = 'cURL error: ' . curl_error($ch);\n            return false;\n        }\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code !== 200) {\n            $this->error[] = 'OAuth error: ' . $http_code;\n            return false;\n        }\n        $token_data = json_decode($response, true);\n        if (isset($token_data['access_token'])) {\n            $this->access_token = $token_data['access_token'];\n            return true;\n        }\n        $this->error[] = 'Failed to retrieve access token';\n        return false;\n    }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a PHP class that handles webhook triggering using Guzzle HTTP client, including formatting headers and payload data, and processing responses or errors.\n\nClass Description: The WebhookService class provides functionality to trigger webhooks by sending HTTP requests to specified endpoints. It handles request configuration, response processing, and error handling.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- triggerWebhook(mixed $data) -> [array] - Sends an HTTP request to the specified endpoint with formatted headers and payload\n  Parameters:\n    - $data: [mixed] - Contains request details including method, endpoint, headers, and payload\n  Returns:\n    - [array] - Response status ('success' or 'error') and content or error message\n- formatHeaders(array $headers) -> [array] - Formats headers array into key-value pairs\n  Parameters:\n    - $headers: [array] - Raw headers array to be formatted\n  Returns:\n    - [array] - Formatted headers as key-value pairs\n- formatPayload($payload) -> [array|string] - Formats payload data into key-value pairs\n  Parameters:\n    - $payload: [mixed] - Raw payload data to be formatted\n  Returns:\n    - [array|string] - Formatted payload as key-value pairs or original string if not array",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Message;\n\nclass WebhookService\n{\n    protected Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client;\n    }\n\n    public function triggerWebhook(mixed $data): array\n    {\n        $options = [\n            'headers'     => $this->formatHeaders(json_decode($data['headers'], true)),\n            'form_params' => $this->formatPayload(json_decode($data['payload'], true)),\n        ];\n\n        try {\n            $response = $this->client->request(\n                $data['method'],\n                $data['end_point'],\n                $options,\n            );\n\n            return [\n                'status'   => 'success',\n                'response' => $response->getBody()->getContents(),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status'   => 'error',\n                'response' => $e->hasResponse() ? Message::toString($e->getResponse()) : $e->getMessage(),\n            ];\n        }\n    }\n\n    protected function formatHeaders(array $headers): array\n    {\n        $formattedHeaders = [];\n\n        foreach ($headers as $header) {\n            $formattedHeaders[$header['key']] = $header['value'];\n        }\n\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload): array|string\n    {\n        if (! is_array($payload)) {\n            $payload = json_decode($payload, true);\n        }\n\n        $formattedPayload = [];\n\n        if (\n            isset($payload['key'])\n            && isset($payload['value'])\n        ) {\n            $formattedPayload[$payload['key']] = $payload['value'];\n        } else {\n            foreach ($payload as $item) {\n                $formattedPayload[$item['key']] = $item['value'];\n            }\n        }\n\n        return $formattedPayload;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "wrong_result": "class WebhookService {\n    protected $client;\n\n    public function __construct() {\n        $this->client = new \\GuzzleHttp\\Client();\n    }\n\n    public function triggerWebhook(mixed $data): array {\n        $method = $data['method'];\n        $endpoint = $data['endpoint'];\n        $headers = $data['headers'];\n        $payload = $data['payload'];\n\n        $formattedHeaders = $this->formatHeaders($headers);\n        $formattedPayload = $this->formatPayload($payload);\n\n        $payloadBody = is_array($formattedPayload) ? json_encode($formattedPayload) : $formattedPayload;\n\n        try {\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $formattedHeaders,\n                'body' => $payloadBody,\n            ]);\n            return ['status' => 'success', 'content' => (string)$response->getBody()];\n        } catch (\\Exception $e) {\n            return ['status' => 'error', 'content' => $e->getMessage()];\n        }\n    }\n\n    public function formatHeaders(array $headers): array {\n        $formatted = [];\n        foreach ($headers as $header) {\n            list($key, $value) = explode(':', $header, 2);\n            $formatted[$key] = trim($value);\n        }\n        return $formatted;\n    }\n\n    public function formatPayload($payload): array|string {\n        return is_array($payload) ? $payload : (string)$payload;\n    }\n}"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a PHP class that handles communication with a backend service through HTTP requests using cURL, supporting operations for task management.\n\nClass Description: The BackendService class provides methods to interact with a backend API for task management operations. It handles HTTP communication using cURL with proper error handling and response processing.\n\nAttributes:\n- None (Uses environment variables for configuration)\n\nMethods:\n- addTask(string $id) -> array - Sends a request to add a task with the given ID to the backend service. Returns an array with status and message.\n- restartTask(string $id) -> array - Sends a request to restart a task with the given ID on the backend service. Returns an array with status and message.\n- removeTask(string $id) -> array - Sends a request to remove a task with the given ID from the backend service. Returns an array with status and message.\n- setCurl(string $backendUrl, string $backendToken, string $operation, string $id) -> array - Internal method that handles the cURL request setup, execution, and response processing. Returns an array with status and message.",
    "Canonical_solution": "use Exception;\n\nclass BackendService\n{\n    public function addTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"addTask\", $id);\n    }\n\n    public function setCurl(string $backendUrl, string $backendToken, $operation, $id): array\n    {\n        if (!env('backend.enable_api')) return [\"status\" => true, \"msg\" => \"\u540e\u7aef\u63a5\u53e3\u672a\u542f\u7528\"];\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $backendUrl . \"/$operation\");\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\"token: $backendToken\"]);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, [\"id\" => $id]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        $result = curl_exec($ch);\n        $error = curl_error($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if (!$result || $error || $httpCode != 200)\n            return [\"status\" => false, \"msg\" => \"\u540e\u7aef\u63a5\u53e3\u5f02\u5e38\"];\n        else {\n            try {\n                $result = json_decode($result, true);\n                if (!$result[\"status\"])\n                    return [\"status\" => false, \"msg\" => $result[\"msg\"]];\n                else\n                    return [\"status\" => true, \"msg\" => $result[\"msg\"]];\n            } catch (Exception $e) {\n                return [\"status\" => false, \"msg\" => \"\u540e\u7aef\u63a5\u53e3\u5f02\u5e38\"];\n            }\n        }\n    }\n\n    public function restartTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"restartTask\", $id);\n    }\n\n    public function removeTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"removeTask\", $id);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass BackendService {\n    private $backendUrl;\n    private $backendToken;\n\n    public function __construct() {\n        $this->backendUrl = getenv('BACKEND_URL');\n        $this->backendToken = getenv('BACKEND_TOKEN');\n    }\n\n    public function addTask(string $id): array {\n        return $this->setCurl($this->backendUrl, $this->backendToken, 'add', $id);\n    }\n\n    public function restartTask(string $id): array {\n        return $this->setCurl($this->backendUrl, $this->backendToken, 'restart', $id);\n    }\n\n    public function removeTask(string $id): array {\n        return $this->setCurl($this->backendUrl, $this->backendToken, 'remove', $id);\n    }\n\n    private function setCurl(string $backendUrl, string $backendToken, string $operation, string $id): array {\n        $ch = curl_init();\n        $url = $backendUrl . '/' . $operation . '/' . $id;\n\n        $method = match ($operation) {\n            'add' => 'POST',\n            'restart' => 'POST',\n            'remove' => 'DELETE',\n            default => 'POST'\n        };\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $backendToken,\n            'Content-Type: application/json'\n        ]);\n        curl_setopt($ch, CURLOPT_POST, $method === 'POST');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, '');\n\n        $response = curl_exec($ch);\n\n        if ($response === false) {\n            return ['status' => 'error', 'message' => 'cURL error: ' . curl_error($ch)];\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode !== 200) {\n            return ['status' => 'error', 'message' => 'HTTP error: ' . $httpCode];\n        }\n\n        $responseData = json_decode($response, true);\n\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return ['status' => 'error', 'message' => 'Invalid response format'];\n        }\n\n        return ['status' => 'success', 'message' => 'Operation successful'];\n    }\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests using cURL with support for both HTTP and HTTPS protocols, including basic SSL verification handling and custom headers.\n\nFunction Description: The function should initialize a cURL session, configure it with the provided URL, set appropriate options for request handling (including SSL verification when needed), execute the request, handle potential errors, and return the response. The function should automatically detect HTTPS URLs and adjust SSL verification accordingly.\n\nInput: \n- $url (string): The target URL for the HTTP request (can be HTTP or HTTPS)\n\nOutput:\n- Returns the response body as a string if the request is successful\n- Returns false if the request fails (though error handling could be enhanced in a production environment)",
    "Canonical_solution": "function http_curl($url)\n{\n    $ssl = substr($url, 0, 8) == \"https://\" ? true : false;\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    if ($ssl) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    }\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'Referer: '.$_SERVER['SERVER_NAME']\n    ));\n    $out = curl_exec($ch);\n    curl_close($ch);\n    return $out;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "wrong_result": "function sendRequest($url, $headers = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    if (parse_url($url, PHP_URL_SCHEME) === 'https') {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    }\n\n    if (!empty($headers)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($httpCode >= 400) {\n        return false;\n    }\n\n    return $response;\n}"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: BCS_RequestCore is a comprehensive HTTP client class that provides a flexible interface for making HTTP requests using PHP's cURL extension. It supports all major HTTP methods (GET, POST, PUT, DELETE, HEAD), handles authentication, proxy configuration, streaming uploads/downloads, and provides detailed response information.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [string] - The complete response from the server\nresponse_headers: [array] - Parsed response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - HTTP response status code\nresponse_info: [array] - Additional response information from cURL\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Username for authentication\npassword: [string|null] - Password for authentication\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Whether to enable debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for streaming upload\nread_stream: [resource|null] - Stream resource for reading\nread_stream_size: [int|null] - Size of the read stream\nread_stream_read: [int] - Bytes read from the stream\nwrite_file: [string|null] - File path for streaming download\nwrite_stream: [resource|null] - Stream resource for writing\nseek_position: [int|null] - Position to seek in the read stream\nregistered_streaming_read_callback: [callable|null] - Callback for streaming read\nregistered_streaming_write_callback: [callable|null] - Callback for streaming write\n\nMethods:\n\n__construct([string|null] $url, [array|null] $proxy, [array|null] $helpers) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct() -> [self] - Cleans up any open file handles\nset_credentials([string] $user, [string] $pass) -> [self] - Sets authentication credentials\nadd_header([string] $key, [string] $value) -> [self] - Adds a request header\nremove_header([string] $key) -> [self] - Removes a request header\nset_method([string] $method) -> [self] - Sets the HTTP method\nset_useragent([string] $ua) -> [self] - Sets the user agent string\nset_body([string] $body) -> [self] - Sets the request body\nset_request_url([string] $url) -> [self] - Sets the request URL\nset_curlopts([array] $curlopts) -> [self] - Sets additional cURL options\nset_read_stream_size([int] $size) -> [self] - Sets the read stream size\nset_read_stream([resource] $resource, [int|null] $size) -> [self] - Sets the read stream resource\nset_read_file([string] $location) -> [self] - Sets a file to read from\nset_write_stream([resource] $resource) -> [self] - Sets the write stream resource\nset_write_file([string] $location) -> [self] - Sets a file to write to\nset_proxy([string] $proxy) -> [self] - Configures proxy settings\nset_seek_position([int|null] $position) -> [self] - Sets the seek position for read stream\nregister_streaming_read_callback([callable] $callback) -> [self] - Registers a streaming read callback\nregister_streaming_write_callback([callable] $callback) -> [self] - Registers a streaming write callback\nstreaming_read_callback([resource] $curl_handle, [resource] $file_handle, [int] $length) -> [string] - Callback for reading from stream\nstreaming_write_callback([resource] $curl_handle, [string] $data) -> [int] - Callback for writing to stream\nprep_request() -> [resource] - Prepares and returns a cURL handle\nprocess_response([resource|null] $curl_handle, [string|null] $response) -> [mixed] - Processes the cURL response\nsend_request([bool] $parse) -> [mixed] - Sends the request and returns response\nisBaeEnv() -> [bool] - Checks if running in Baidu App Engine environment\nget_response_header([string|null] $header) -> [mixed] - Gets response header(s)\nget_response_body() -> [string] - Gets the response body\nget_response_code() -> [int] - Gets the response status code",
    "Canonical_solution": "namespace Think\\Upload\\Driver\\Bcs;\n\nclass BCS_RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new BCS_RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n            if ($written_last === false) {\n                return $written_total;\n            }\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new BCS_RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                $class = '\\Think\\Upload\\Driver\\Bcs\\\\' . $this->response_class;\n                return new $class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        if (false === $this->isBaeEnv()) {\n            set_time_limit(0);\n        }\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false ||\n            ($this->method === self::HTTP_GET &&\n             curl_errno($curl_handle) === CURLE_PARTIAL_FILE)) {\n            throw new BCS_RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    private function isBaeEnv()\n    {\n        if (isset($_SERVER['HTTP_HOST'])) {\n            $host = $_SERVER['HTTP_HOST'];\n            $pos = strpos($host, '.');\n            if ($pos !== false) {\n                $substr = substr($host, $pos + 1);\n                if ($substr == 'duapp.com') {\n                    return true;\n                }\n            }\n        }\n        if (isset($_SERVER[\"HTTP_BAE_LOGID\"])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "wrong_result": "<?php\nclass BCS_RequestCore {\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode;\n    public $request_class;\n    public $response_class;\n    public $useragent;\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        $this->curlopts = [];\n        $this->debug_mode = false;\n        $this->request_class = 'BCS_Request';\n        $this->response_class = 'BCS_Response';\n        $this->useragent = 'BCS_Request/1.0';\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) fclose($this->read_stream);\n        if ($this->write_stream) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        return fread($file_handle, $length);\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        return fwrite($curl_handle, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($this->curl_handle, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($this->curl_handle, CURLOPT_MAXREDIRS, 10);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, 30);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n\n        if ($this->method) {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n\n        if ($this->useragent) {\n            curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        }\n\n        if ($this->request_headers) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->request_headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->proxy) {\n            $proxy = $this->proxy;\n            if (is_array($proxy)) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXY, $proxy['host']);\n                curl_setopt($this->curl_handle, CURLOPT_PROXYPORT, $proxy['port']);\n                if (isset($proxy['user'])) {\n                    curl_setopt($this->curl_handle, CURLOPT_PROXYUSERPWD, $proxy['user'] . ':' . $proxy['pass']);\n                }\n            } else {\n                curl_setopt($this->curl_handle, CURLOPT_PROXY, $proxy);\n            }\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_WRITEDATA, $this->write_stream);\n        }\n\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_headers = [];\n\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n\n        $this->response = $response;\n        $this->response_body = $response;\n\n        if ($this->response_code >= 400) {\n            $this->response_body = \"Error: \" . $this->response;\n        }\n\n        return $this;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            $this->process_response($this->curl_handle, $this->response);\n        }\n        return $this;\n    }\n\n    public function isBaeEnv() {\n        return defined('BAE_ENV') && BAE_ENV === true;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        if (isset($this->response_headers[$header])) {\n            return $this->response_headers[$header];\n        }\n        return null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}?>"
  }
]