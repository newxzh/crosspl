[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a PHP class that interacts with an Ollama API to generate responses using HTTP requests through the Guzzle HTTP client.\n\nClass Description: The Ollama class is designed to communicate with an Ollama API endpoint to generate responses based on provided prompts. It handles the configuration of the API request and processes the response.\n\nAttributes:\n- model: string - The name of the AI model to be used for generating responses.\n- prompt: string - The input text prompt to be sent to the AI model.\n- temperature: float - Controls the randomness of the output (higher values make output more random).\n- stream: bool - Determines whether the response should be streamed.\n- raw: bool - Specifies whether to use raw mode for the prompt processing.\n\nMethods:\n- __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) -> void - Initializes the Ollama instance with the specified parameters for model interaction.\n- ask() -> string - Sends a POST request to the Ollama API with the configured parameters and returns the generated response from the AI model.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Ollama\n{\n    /**\n     * New service instance.\n     */\n    public function __construct(\n        protected string $model,\n        protected string $prompt,\n        protected float $temperature,\n        protected bool $stream,\n        protected bool $raw,\n    ) {}\n\n    /**\n     * Set LLM prompt text.\n     */\n    public function ask(): string\n    {\n        $httpClient = new Client;\n\n        $endpoint = core()->getConfigData('general.magic_ai.settings.api_domain').'/api/generate';\n\n        $result = $httpClient->request('POST', $endpoint, [\n            'headers' => [\n                'Accept' => 'application/json',\n            ],\n            'json'    => [\n                'model'  => $this->model,\n                'prompt' => $this->prompt,\n                'raw'    => $this->raw,\n                'stream' => $this->stream,\n            ],\n        ]);\n\n        $result = json_decode($result->getBody()->getContents(), true);\n\n        return $result['response'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'https://api.ollama.com/generate'; // Replace with the actual Ollama API endpoint\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw\n            ]\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n    private $client;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n        $this->client = new Client();\n    }\n\n    public function ask(): string {\n        $url = 'https://api.ollama.com/v1/generate';\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ],\n        ];\n\n        $response = $this->client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'https://api.ollama.com/v1/generate'; // Replace with the actual Ollama API endpoint\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw\n            ]\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n    private $client;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n        $this->client = new Client();\n    }\n\n    public function ask(): string {\n        $url = 'http://localhost:11434/api/generate'; // Assuming this is the endpoint\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ],\n        ];\n\n        $response = $this->client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'https://api.ollama.com/v1/generate';\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ],\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'https://api.ollama.com/generate'; // Assuming this is the endpoint\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw\n            ]\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'http://localhost:11434/api/generate'; // Assuming the default Ollama API endpoint\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ],\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'https://api.ollama.com/v1/generate';\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ],\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'http://localhost:11434/api/generate'; // Assuming this is the endpoint\n\n        $response = $client->post($url, [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw,\n            ],\n        ]);\n\n        return $response->getBody()->getContents();\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\n\nclass Ollama {\n    private $model;\n    private $prompt;\n    private $temperature;\n    private $stream;\n    private $raw;\n\n    public function __construct(string $model, string $prompt, float $temperature, bool $stream, bool $raw) {\n        $this->model = $model;\n        $this->prompt = $prompt;\n        $this->temperature = $temperature;\n        $this->stream = $stream;\n        $this->raw = $raw;\n    }\n\n    public function ask(): string {\n        $client = new Client();\n        $url = 'https://api.ollama.com/v1/generate';\n\n        $options = [\n            'json' => [\n                'model' => $this->model,\n                'prompt' => $this->prompt,\n                'temperature' => $this->temperature,\n                'stream' => $this->stream,\n                'raw' => $this->raw\n            ]\n        ];\n\n        $response = $client->post($url, $options);\n        return $response->getBody()->getContents();\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client for sending payment requests to an e-payment API using Guzzle.\n\nClass Description: The EpayHttpClient class is designed to handle HTTP communication with an e-payment API. It encapsulates the functionality for sending payment requests and processing the responses. The class uses Guzzle HTTP client for making requests and handles potential exceptions that may occur during the process.\n\nAttributes:\n- epay: array - Stores the configuration for the e-payment API\n- client: Client - The Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct(array $epayConfig) -> void - Initializes the class with e-payment configuration and creates a new Guzzle Client instance\n- sendPaymentRequest(array $data) -> array - Sends a payment request to the API endpoint and processes the response. Returns an array indicating success/failure and containing either the payment URL or an error message",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass EpayHttpClient\n{\n    protected array $epay;\n    protected Client $client;\n\n    public function __construct(array $epayConfig)\n    {\n        $this->epay = $epayConfig;\n        $this->client = new Client();\n    }\n\n    public function sendPaymentRequest(array $data): array\n    {\n        try {\n            $res = $this->client->request('POST', $this->epay['apiurl'] . 'mapi.php', ['form_params' => $data]);\n\n            if ($res->getStatusCode() !== 200) {\n                throw new Exception();\n            }\n\n            $resData = json_decode($res->getBody()->__toString(), true);\n\n            if ($resData['code'] !== 1 || !isset($resData['payurl'])) {\n                throw new Exception();\n            }\n\n            return [\n                'success' => true,\n                'payurl' => $resData['payurl']\n            ];\n        } catch (Exception|GuzzleException) {\n            return [\n                'success' => false,\n                'error' => '请求支付失败'\n            ];\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => 2.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->request('POST', $this->epay['endpoint'], [\n                'json' => $data,\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            return ['success' => true, 'url' => $body['payment_url'] ?? null];\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => $this->epay['timeout'] ?? 5.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->request('POST', $this->epay['endpoint'], [\n                'json' => $data,\n            ]);\n\n            if ($response->getStatusCode() === 200) {\n                $body = json_decode($response->getBody(), true);\n                return ['success' => true, 'payment_url' => $body['payment_url']];\n            } else {\n                return ['success' => false, 'error' => 'Unexpected status code'];\n            }\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => 2.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->request('POST', $this->epay['endpoint'], [\n                'json' => $data,\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            return ['success' => true, 'url' => $body['payment_url'] ?? null];\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => 2.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->request('POST', $this->epay['endpoint'], [\n                'json' => $data,\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            return ['success' => true, 'url' => $body['payment_url'] ?? null];\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => 2.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->request('POST', $this->epay['endpoint'], [\n                'json' => $data,\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            if ($response->getStatusCode() === 200 && isset($body['payment_url'])) {\n                return ['success' => true, 'payment_url' => $body['payment_url']];\n            } else {\n                return ['success' => false, 'error' => 'Unexpected response format'];\n            }\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => $this->epay['timeout'] ?? 5.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->request('POST', $this->epay['payment_endpoint'], [\n                'json' => $data,\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            return ['success' => true, 'url' => $body['url'] ?? null];\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}"
    ],
    "unmatched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => $this->epay['timeout'] ?? 5.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->post($this->epay['endpoint'], [\n                'form_params' => $data,\n            ]);\n\n            if ($response->getStatusCode() === 200) {\n                $body = json_decode($response->getBody(), true);\n                return ['success' => true, 'url' => $body['payment_url'] ?? null];\n            }\n\n            return ['success' => false, 'message' => 'Unexpected status code'];\n        } catch (RequestException $e) {\n            return ['success' => false, 'message' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client([\n            'base_uri' => $this->epay['base_uri'],\n            'timeout'  => $this->epay['timeout'] ?? 5.0,\n        ]);\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->post($this->epay['endpoint'], [\n                'form_params' => $data,\n            ]);\n\n            if ($response->getStatusCode() === 200) {\n                $body = json_decode($response->getBody(), true);\n                return ['success' => true, 'url' => $body['payment_url']];\n            } else {\n                return ['success' => false, 'message' => 'Unexpected status code'];\n            }\n        } catch (RequestException $e) {\n            return ['success' => false, 'message' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client();\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->post($this->epay['endpoint'], [\n                'json' => $data,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->epay['token'],\n                    'Content-Type' => 'application/json'\n                ]\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            if ($response->getStatusCode() == 200 && isset($body['payment_url'])) {\n                return ['success' => true, 'payment_url' => $body['payment_url']];\n            } else {\n                return ['success' => false, 'error' => 'Unexpected response from API'];\n            }\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass EpayHttpClient {\n    private $epay;\n    private $client;\n\n    public function __construct(array $epayConfig) {\n        $this->epay = $epayConfig;\n        $this->client = new Client();\n    }\n\n    public function sendPaymentRequest(array $data): array {\n        try {\n            $response = $this->client->post($this->epay['endpoint'], [\n                'json' => $data,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->epay['token'],\n                    'Content-Type' => 'application/json',\n                ],\n            ]);\n\n            $body = json_decode($response->getBody(), true);\n            if ($response->getStatusCode() === 200 && isset($body['payment_url'])) {\n                return ['success' => true, 'payment_url' => $body['payment_url']];\n            } else {\n                return ['success' => false, 'error' => 'Unexpected response from the API'];\n            }\n        } catch (RequestException $e) {\n            return ['success' => false, 'error' => $e->getMessage()];\n        }\n    }\n}"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a PHP class that handles downloading and processing images with size limitations and compression capabilities.\n\nClass Description: The Picture class is designed to download images from given URLs while enforcing size limits and compression thresholds. It uses cURL for HTTP requests and provides mechanisms to control download size and handle response data efficiently.\n\nAttributes:\n- compressLimit: [int] - The maximum size (in bytes) for downloaded content before compression is considered\n- sizeLimit: [int] - The maximum dimension (in pixels) for the image width/height\n\nMethods:\n- downloadImage: [downloadImage]($url: string) -> string - Downloads an image from the specified URL while respecting size limits. Returns the image body content.\n  - $url: The URL of the image to download\n  - Returns: The binary content of the downloaded image",
    "Canonical_solution": "namespace App\\Widgets\\Picture;\n\nuse Movim\\Image;\n\nclass Picture\n{\n    private $compressLimit = SMALL_PICTURE_LIMIT * 6;\n    private $sizeLimit = 1920;\n\n    public function downloadImage($url)\n    {\n        $headers = requestHeaders($url);\n        $chunks = '';\n\n        $max = $headers[\"download_content_length\"] > $this->compressLimit ? $this->compressLimit : $headers[\"download_content_length\"];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_RANGE, '0-' . $max);\n        curl_setopt($ch, CURLOPT_BUFFERSIZE, 12800);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_USERAGENT, DEFAULT_HTTP_USER_AGENT);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, function ($ch, $chunk) use (&$chunks) {\n            $chunks .= $chunk;\n            return (strlen($chunks) >= $this->compressLimit + 1) ? 0 : strlen($chunk);\n        });\n\n        curl_exec($ch);\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        curl_close($ch);\n\n        $headers = preg_split('/[\\r\\n]+/', substr($chunks, 0, $headerSize));\n        $body = substr($chunks, $headerSize);\n\n        return $body;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeCallback']);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_PROGRESSFUNCTION, [$this, 'progressCallback']);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n\n        $imageData = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n\n        return $imageData;\n    }\n\n    private function writeCallback($ch, $data) {\n        $downloadSize = curl_getinfo($ch, CURLINFO_SIZE_DOWNLOAD);\n        if ($downloadSize > $this->compressLimit) {\n            throw new Exception('Download size exceeds limit');\n        }\n        return strlen($data);\n    }\n\n    private function progressCallback($ch, $downloadSize, $downloaded, $uploadSize, $uploaded) {\n        if ($downloadSize > 0 && $downloaded / $downloadSize > 1) {\n            throw new Exception('Download size exceeds limit');\n        }\n        return 0;\n    }\n}",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n        $imageData = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $contentLength = curl_getinfo($ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD);\n\n        curl_close($ch);\n\n        if ($httpCode !== 200) {\n            throw new Exception(\"Failed to download image: HTTP Code {$httpCode}\");\n        }\n\n        if ($contentLength > $this->compressLimit) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        list($width, $height) = getimagesizefromstring($imageData);\n\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            throw new Exception(\"Image dimensions exceed the size limit.\");\n        }\n\n        return $imageData;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        ob_start();\n        imagejpeg($image, null, 75); // Compress image to 75% quality\n        $compressedData = ob_get_contents();\n        ob_end_clean();\n        imagedestroy($image);\n        return $compressedData;\n    }\n}\n?>",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n        $imageData = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode !== 200) {\n            throw new Exception(\"Failed to download image: HTTP Code {$httpCode}\");\n        }\n\n        $contentLength = strlen($imageData);\n        if ($contentLength > $this->compressLimit) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        $imageSize = getimagesizefromstring($imageData);\n        if ($imageSize && ($imageSize[0] > $this->sizeLimit || $imageSize[1] > $this->sizeLimit)) {\n            throw new Exception(\"Image dimensions exceed the size limit.\");\n        }\n\n        curl_close($ch);\n        return $imageData;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        if (!$image) {\n            throw new Exception(\"Failed to create image from string.\");\n        }\n\n        ob_start();\n        imagejpeg($image, null, 75); // Compress image to 75% quality\n        $compressedData = ob_get_clean();\n        imagedestroy($image);\n\n        return $compressedData;\n    }\n}\n?>",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeCallback']);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0');\n        $imageData = curl_exec($ch);\n\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode !== 200) {\n            throw new Exception('HTTP error: ' . $httpCode);\n        }\n\n        curl_close($ch);\n\n        if ($this->needsCompression(strlen($imageData))) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        return $imageData;\n    }\n\n    private function writeCallback($ch, $data) {\n        static $downloadedSize = 0;\n        $downloadedSize += strlen($data);\n\n        if ($downloadedSize > $this->compressLimit) {\n            throw new Exception('Download size exceeded limit');\n        }\n\n        return strlen($data);\n    }\n\n    private function needsCompression($size) {\n        return $size > $this->compressLimit;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        if (!$image) {\n            throw new Exception('Failed to create image from string');\n        }\n\n        $width = imagesx($image);\n        $height = imagesy($image);\n\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            $ratio = min($this->sizeLimit / $width, $this->sizeLimit / $height);\n            $newWidth = $width * $ratio;\n            $newHeight = $height * $ratio;\n\n            $resizedImage = imagescale($image, $newWidth, $newHeight);\n            imagedestroy($image);\n            $image = $resizedImage;\n        }\n\n        ob_start();\n        imagejpeg($image, null, 80); // 80% quality\n        $compressedData = ob_get_clean();\n        imagedestroy($image);\n\n        return $compressedData;\n    }\n}",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeFunction']);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_PROGRESSFUNCTION, [$this, 'progressFunction']);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n\n        $imageData = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n\n        if ($imageData === false) {\n            throw new Exception('Failed to download image.');\n        }\n\n        list($width, $height) = getimagesizefromstring($imageData);\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            throw new Exception('Image dimensions exceed the size limit.');\n        }\n\n        return $imageData;\n    }\n\n    private function writeFunction($ch, $data) {\n        $downloadSize = curl_getinfo($ch, CURLINFO_SIZE_DOWNLOAD);\n        if ($downloadSize > $this->compressLimit) {\n            throw new Exception('Download size exceeds the compression limit.');\n        }\n        return strlen($data);\n    }\n\n    private function progressFunction($ch, $downloadSize, $downloaded, $uploadSize, $uploaded) {\n        if ($downloadSize > 0 && $downloaded > $this->compressLimit) {\n            throw new Exception('Download size exceeds the compression limit.');\n        }\n        return 0;\n    }\n}",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeFunction']);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0');\n        $imageData = curl_exec($ch);\n\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode !== 200) {\n            throw new Exception('HTTP error: ' . $httpCode);\n        }\n\n        curl_close($ch);\n\n        if ($this->needsCompression(strlen($imageData))) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        return $imageData;\n    }\n\n    private function writeFunction($ch, $data) {\n        static $downloadSize = 0;\n        $downloadSize += strlen($data);\n\n        if ($downloadSize > $this->compressLimit) {\n            throw new Exception('Download size exceeded limit');\n        }\n\n        return strlen($data);\n    }\n\n    private function needsCompression($size) {\n        return $size > $this->compressLimit;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        if (!$image) {\n            throw new Exception('Failed to create image from string');\n        }\n\n        $width = imagesx($image);\n        $height = imagesy($image);\n\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            $ratio = min($this->sizeLimit / $width, $this->sizeLimit / $height);\n            $newWidth = $width * $ratio;\n            $newHeight = $height * $ratio;\n\n            $resizedImage = imagescale($image, $newWidth, $newHeight);\n            imagedestroy($image);\n            $image = $resizedImage;\n        }\n\n        ob_start();\n        imagejpeg($image, null, 80);\n        $compressedData = ob_get_clean();\n        imagedestroy($image);\n\n        return $compressedData;\n    }\n}",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeCallback']);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_PROGRESSFUNCTION, [$this, 'progressCallback']);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $imageData = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n\n        if ($imageData === false) {\n            throw new Exception('Failed to download image.');\n        }\n\n        $imageSize = getimagesizefromstring($imageData);\n        if ($imageSize === false) {\n            throw new Exception('Invalid image format.');\n        }\n\n        list($width, $height) = $imageSize;\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            throw new Exception('Image dimensions exceed the size limit.');\n        }\n\n        if (strlen($imageData) > $this->compressLimit) {\n            $imageData = $this->compressImage($imageData, $imageSize[2]);\n        }\n\n        return $imageData;\n    }\n\n    private function writeCallback($ch, $data) {\n        if (strlen($data) > $this->compressLimit) {\n            throw new Exception('Downloaded content exceeds the size limit.');\n        }\n        return strlen($data);\n    }\n\n    private function progressCallback($ch, $downloadSize, $downloaded, $uploadSize, $uploaded) {\n        if ($downloaded > $this->compressLimit) {\n            throw new Exception('Downloaded content exceeds the size limit.');\n        }\n        return 0;\n    }\n\n    private function compressImage($imageData, $imageType) {\n        $image = imagecreatefromstring($imageData);\n        ob_start();\n        switch ($imageType) {\n            case IMAGETYPE_JPEG:\n                imagejpeg($image, null, 75);\n                break;\n            case IMAGETYPE_PNG:\n                imagepng($image, null, 6);\n                break;\n            case IMAGETYPE_GIF:\n                imagegif($image);\n                break;\n            default:\n                throw new Exception('Unsupported image type.');\n        }\n        $compressedData = ob_get_contents();\n        ob_end_clean();\n        imagedestroy($image);\n        return $compressedData;\n    }\n}",
      "class Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeCallback']);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_PROGRESSFUNCTION, [$this, 'progressCallback']);\n        curl_setopt($ch, CURLOPT_BUFFERSIZE, 128);\n\n        $imageData = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n\n        if ($imageData === false) {\n            throw new Exception('Failed to download image');\n        }\n\n        list($width, $height) = getimagesizefromstring($imageData);\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            throw new Exception('Image dimensions exceed the size limit');\n        }\n\n        if (strlen($imageData) > $this->compressLimit) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        return $imageData;\n    }\n\n    private function writeCallback($ch, $data) {\n        if (strlen($data) > $this->compressLimit) {\n            throw new Exception('Downloaded content exceeds the size limit');\n        }\n        return strlen($data);\n    }\n\n    private function progressCallback($ch, $downloadSize, $downloaded, $uploadSize, $uploaded) {\n        if ($downloaded > $this->compressLimit) {\n            throw new Exception('Downloaded content exceeds the size limit');\n        }\n        return 0;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        ob_start();\n        imagejpeg($image, null, 75); // Compress image to 75% quality\n        $compressedData = ob_get_clean();\n        imagedestroy($image);\n        return $compressedData;\n    }\n}",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeFunction']);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0');\n        $imageData = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n\n        if ($this->needsCompression(strlen($imageData))) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        return $imageData;\n    }\n\n    private function writeFunction($ch, $data) {\n        if (strlen($data) > $this->sizeLimit) {\n            throw new Exception(\"Download size exceeds limit.\");\n        }\n        return strlen($data);\n    }\n\n    private function needsCompression($size) {\n        return $size > $this->compressLimit;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        if (!$image) {\n            throw new Exception(\"Failed to create image from string.\");\n        }\n\n        $width = imagesx($image);\n        $height = imagesy($image);\n\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            $ratio = min($this->sizeLimit / $width, $this->sizeLimit / $height);\n            $newWidth = $width * $ratio;\n            $newHeight = $height * $ratio;\n\n            $resizedImage = imagescale($image, $newWidth, $newHeight);\n            imagedestroy($image);\n            $image = $resizedImage;\n        }\n\n        ob_start();\n        imagejpeg($image, null, 80); // Compressing to JPEG with 80% quality\n        $compressedData = ob_get_contents();\n        ob_end_clean();\n\n        imagedestroy($image);\n\n        return $compressedData;\n    }\n}\n?>",
      "<?php\nclass Picture {\n    private $compressLimit;\n    private $sizeLimit;\n\n    public function __construct($compressLimit, $sizeLimit) {\n        $this->compressLimit = $compressLimit;\n        $this->sizeLimit = $sizeLimit;\n    }\n\n    public function downloadImage($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'writeCallback']);\n        curl_setopt($ch, CURLOPT_NOPROGRESS, false);\n        curl_setopt($ch, CURLOPT_PROGRESSFUNCTION, [$this, 'progressCallback']);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $imageData = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n\n        if ($imageData === false) {\n            throw new Exception('Failed to download image');\n        }\n\n        list($width, $height) = getimagesizefromstring($imageData);\n        if ($width > $this->sizeLimit || $height > $this->sizeLimit) {\n            throw new Exception('Image dimensions exceed the size limit');\n        }\n\n        if (strlen($imageData) > $this->compressLimit) {\n            $imageData = $this->compressImage($imageData);\n        }\n\n        return $imageData;\n    }\n\n    private function writeCallback($ch, $data) {\n        if (strlen($data) > $this->compressLimit) {\n            throw new Exception('Downloaded content exceeds the size limit');\n        }\n        return strlen($data);\n    }\n\n    private function progressCallback($ch, $downloadSize, $downloaded, $uploadSize, $uploaded) {\n        if ($downloaded > $this->compressLimit) {\n            throw new Exception('Downloaded content exceeds the size limit');\n        }\n        return 0;\n    }\n\n    private function compressImage($imageData) {\n        $image = imagecreatefromstring($imageData);\n        ob_start();\n        imagejpeg($image, null, 75); // Adjust quality as needed\n        $compressedData = ob_get_clean();\n        imagedestroy($image);\n        return $compressedData;\n    }\n}\n?>"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxies and basic authentication.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, proxy configuration, timeout settings, and basic authentication. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'assign': (string, optional) Template variable name to assign content to\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (int, optional) Proxy server port\n  - 'timeout': (int, optional) Connection timeout in seconds (default: 30)\n- $template: (object) The template object for assigning content (when 'assign' parameter is used)\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Assigns content to the specified template variable and returns nothing if 'assign' parameter is provided\n- Returns nothing and triggers notice on error conditions (invalid URL, connection failure)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            \n            $_is_proxy = false;\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        $proxy_port = (int)$param_value;\n                        break;\n                    case \"timeout\":\n                        $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "<?php\nfunction fetch_http_content($params, $template = null) {\n    $url_parts = parse_url($params['file']);\n    if (!$url_parts) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $url_parts['host'];\n    $port = isset($url_parts['port']) ? $url_parts['port'] : ($url_parts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($url_parts['path']) ? $url_parts['path'] : '/';\n    $query = isset($url_parts['query']) ? '?' . $url_parts['query'] : '';\n    $auth = isset($url_parts['user']) && isset($url_parts['pass']) ? base64_encode($url_parts['user'] . ':' . $url_parts['pass']) : '';\n\n    $proxy_host = isset($params['proxy_host']) ? $params['proxy_host'] : '';\n    $proxy_port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $fp = fsockopen($proxy_host ?: $host, $proxy_host ? $proxy_port : $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET \" . ($proxy_host ? $params['file'] : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    if ($auth) {\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchUrl($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts || !isset($urlParts['host'])) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $auth = isset($urlParts['user']) && isset($urlParts['pass']) ? base64_encode($urlParts['user'] . ':' . $urlParts['pass']) : '';\n\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $connectionHost = $proxyHost ?: $host;\n    $connectionPort = $proxyHost ? $proxyPort : $port;\n\n    $fp = fsockopen($connectionHost, $connectionPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET \" . ($proxyHost ? $params['file'] : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    if ($auth) {\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 1024);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host'])) {\n        $host = $params['proxy_host'];\n        $port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n        $request = strtoupper($urlParts['scheme']) . '://' . $urlParts['host'] . ':' . $port . $path . $query;\n    } else {\n        $request = $path . $query;\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $out = \"GET $request HTTP/1.1\\r\\n\";\n    $out .= \"Host: \" . $urlParts['host'] . \"\\r\\n\";\n\n    if (isset($urlParts['user'], $urlParts['pass'])) {\n        $auth = base64_encode($urlParts['user'] . ':' . $urlParts['pass']);\n        $out .= \"Authorization: Basic $auth\\r\\n\";\n    }\n\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchUrlContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $auth = isset($urlParts['user']) && isset($urlParts['pass']) ? base64_encode($urlParts['user'] . ':' . $urlParts['pass']) : '';\n\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $fp = fsockopen($proxyHost ?: $host, $proxyHost ? $proxyPort : $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET \" . ($proxyHost ? $params['file'] : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    if ($auth) {\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $headers = explode(\"\\r\\n\", $headers);\n    $statusLine = array_shift($headers);\n    preg_match('/HTTP\\/\\d+\\.\\d+ (\\d+)/', $statusLine, $matches);\n    $statusCode = $matches[1];\n\n    if ($statusCode != 200) {\n        trigger_error(\"HTTP Error: $statusCode\", E_USER_NOTICE);\n        return;\n    }\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts || !isset($urlParts['host'])) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET \" . ($proxyHost == $host ? $path . $query : $params['file']) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n\n    if (isset($urlParts['user']) && isset($urlParts['pass'])) {\n        $auth = base64_encode($urlParts['user'] . ':' . $urlParts['pass']);\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetch_http_content($params, $template = null) {\n    $url_parts = parse_url($params['file']);\n    if (!$url_parts || !isset($url_parts['host'])) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $url_parts['host'];\n    $port = isset($url_parts['port']) ? $url_parts['port'] : ($url_parts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($url_parts['path']) ? $url_parts['path'] : '/';\n    $query = isset($url_parts['query']) ? '?' . $url_parts['query'] : '';\n    $auth = isset($url_parts['user']) && isset($url_parts['pass']) ? base64_encode($url_parts['user'] . ':' . $url_parts['pass']) : '';\n\n    $proxy_host = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxy_port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $fp = fsockopen($proxy_host ?: $host, $proxy_host ? $proxy_port : $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET \" . ($proxy_host ? $params['file'] : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    if ($auth) {\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $status_line = substr($headers, 0, strpos($headers, \"\\r\\n\"));\n    if (preg_match('/HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $status_line, $matches) && $matches[1] == 200) {\n        if (isset($params['assign'])) {\n            $template->assign($params['assign'], $body);\n        } else {\n            return $body;\n        }\n    } else {\n        trigger_error(\"HTTP request failed with status: $status_line\", E_USER_NOTICE);\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts) {\n        trigger_error(\"Invalid URL\", E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $auth = isset($urlParts['user']) && isset($urlParts['pass']) ? base64_encode($urlParts['user'] . ':' . $urlParts['pass']) : '';\n\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    $fp = fsockopen($proxyHost ?: $host, $proxyHost ? $proxyPort : $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET \" . ($proxyHost ? $params['file'] : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    if ($auth) {\n        $request .= \"Authorization: Basic $auth\\r\\n\";\n    }\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    if (strpos($headers, 'HTTP/1.1 200 OK') === false) {\n        trigger_error(\"HTTP request failed: $headers\", E_USER_NOTICE);\n        return;\n    }\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts || !isset($urlParts['host'])) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $request = \"GET {$urlParts['scheme']}://{$host}{$path}{$query} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$host}\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode(\"{$params['user']}:{$params['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}"
    ],
    "unmatched_results": [
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts || !isset($urlParts['host'])) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $host = $params['proxy_host'];\n        $port = $params['proxy_port'];\n        $request = \"GET {$urlParts['scheme']}://{$urlParts['host']}:{$urlParts['port']}{$path}{$query} HTTP/1.1\\r\\n\";\n    } else {\n        $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    }\n\n    $request .= \"Host: {$urlParts['host']}\\r\\n\";\n\n    if (isset($urlParts['user']) && isset($urlParts['pass'])) {\n        $auth = base64_encode(\"{$urlParts['user']}:{$urlParts['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error(\"Connection failed: {$errstr} ({$errno})\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    if (!$urlParts) {\n        trigger_error('Invalid URL', E_USER_NOTICE);\n        return;\n    }\n\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host'])) {\n        $host = $params['proxy_host'];\n        $port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n        $request = ($urlParts['scheme'] === 'https' ? 'CONNECT ' . $urlParts['host'] . ':' . $urlParts['port'] . \" HTTP/1.1\\r\\n\" : '') .\n                   \"GET \" . $urlParts['scheme'] . \"://\" . $urlParts['host'] . $path . $query . \" HTTP/1.1\\r\\n\";\n    } else {\n        $request = \"GET \" . $path . $query . \" HTTP/1.1\\r\\n\";\n    }\n\n    $request .= \"Host: \" . $urlParts['host'] . \"\\r\\n\";\n\n    if (isset($urlParts['user'], $urlParts['pass'])) {\n        $auth = base64_encode($urlParts['user'] . ':' . $urlParts['pass']);\n        $request .= \"Authorization: Basic \" . $auth . \"\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $fp = fsockopen(($urlParts['scheme'] === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        trigger_error('Connection failed: ' . $errstr, E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified URL or file path, with support for HTTP requests using fsockopen, including handling of proxy servers, authentication, and security checks.\n\nFunction Description: The function retrieves content from either a local file or a remote HTTP resource. For HTTP requests, it establishes a socket connection, sends a GET request with appropriate headers (including authentication if provided), reads the response, and extracts the content body. It includes security checks for trusted URIs and resource directories when operating within a Smarty template context.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string) Required. The URL or file path to fetch\n  - 'assign': (string) Optional. Template variable name to assign the content to\n  - 'assign_headers': (string) Optional. Template variable name to assign headers to\n  - 'user': (string) Optional. Username for HTTP authentication\n  - 'pass': (string) Optional. Password for HTTP authentication\n  - 'proxy_host': (string) Optional. Proxy server hostname\n  - 'proxy_port': (integer) Optional. Proxy server port\n- $template: The Smarty template object (used for security checks and variable assignment)\n\nOutput:\n- Returns the fetched content as a string if no 'assign' parameter is provided\n- Assigns the content to the specified template variable if 'assign' parameter is present\n- Returns nothing if security checks fail or if there are errors in fetching the content",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\",E_USER_NOTICE);\n        return;\n    }\n\n    if (stripos($params['file'], 'file://') === 0) {\n        $params['file'] = substr($params['file'], 7);\n    }\n\n    $protocol = strpos($params['file'], '://');\n    if ($protocol !== false) {\n        $protocol = strtolower(substr($params['file'], 0, $protocol));\n    }\n\n    if (isset($template->smarty->security_policy)) {\n        if ($protocol) {\n            if (!$template->smarty->security_policy->isTrustedUri($params['file'])) {\n                return;\n            }\n        } else {\n            if (!$template->smarty->security_policy->isTrustedResourceDir($params['file'])) {\n                return;\n            }\n        }\n    }\n\n    $content = '';\n    if ($protocol == 'http') {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = !empty($uri_parts['user']) ? $uri_parts['user'] : '';\n            $pass = !empty($uri_parts['pass']) ? $uri_parts['pass'] : '';\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"file\":\n                    case \"assign\":\n                    case \"assign_headers\":\n                        break;\n                    case \"user\":\n                        if (!empty($param_value)) $user = $param_value;\n                        break;\n                    case \"pass\":\n                        if (!empty($param_value)) $pass = $param_value;\n                        break;\n                    case \"proxy_host\":\n                        if (!empty($param_value)) $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $proxy_port = (int) $param_value;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host,$proxy_port,$errno,$errstr,$timeout);\n            } else {\n                $fp = fsockopen($server_name,$port,$errno,$errstr,$timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\",E_USER_NOTICE);\n                return;\n            } else {\n                if ($_is_proxy) {\n                    fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n                } else {\n                    fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n                }\n                fputs($fp, \"Host: $host\\r\\n\");\n                if (!empty($user) && !empty($pass)) {\n                    fputs($fp, \"Authorization: BASIC \".base64_encode(\"$user:$pass\").\"\\r\\n\");\n                }\n                fputs($fp, \"\\r\\n\");\n\n                while (!feof($fp)) {\n                    $content .= fgets($fp,4096);\n                }\n                fclose($fp);\n                $csplit = preg_split(\"!\\r\\n\\r\\n!\",$content,2);\n                $content = $csplit[1];\n            }\n        } else {\n            trigger_error(\"[plugin fetch] unable to parse URL, check syntax\",E_USER_NOTICE);\n            return;\n        }\n    } else {\n        $content = @file_get_contents($params['file']);\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "function fetchContent($params, &$template) {\n    if (!isset($params['file'])) {\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : '';\n    $pass = isset($params['pass']) ? $params['pass'] : '';\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : '';\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if (strpos($file, 'http://') === 0 || strpos($file, 'https://') === 0) {\n        $parsedUrl = parse_url($file);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($parsedUrl['scheme'] === 'https' ? 443 : 80);\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if (!$template->security || $template->security_settings['trusted_uri'][$parsedUrl['scheme']][$host]) {\n            $fp = fsockopen(($proxyHost ? $proxyHost : $host), ($proxyHost ? $proxyPort : $port), $errno, $errstr, 30);\n            if (!$fp) {\n                return;\n            }\n\n            $out = \"GET \" . ($proxyHost ? $file : $path . $query) . \" HTTP/1.1\\r\\n\";\n            $out .= \"Host: \" . $host . \"\\r\\n\";\n            if ($user && $pass) {\n                $out .= \"Authorization: Basic \" . base64_encode($user . \":\" . $pass) . \"\\r\\n\";\n            }\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n            fwrite($fp, $out);\n            $headers = '';\n            $content = '';\n            $inHeader = true;\n            while (!feof($fp)) {\n                $line = fgets($fp, 1280);\n                if ($inHeader) {\n                    if ($line == \"\\r\\n\") {\n                        $inHeader = false;\n                    } else {\n                        $headers .= $line;\n                    }\n                } else {\n                    $content .= $line;\n                }\n            }\n            fclose($fp);\n\n            if ($assign) {\n                $template->assign($assign, $content);\n            }\n            if ($assignHeaders) {\n                $template->assign($assignHeaders, $headers);\n            }\n            return $assign ? null : $content;\n        }\n    } elseif (is_readable($file) && (!$template->security || $template->security_settings['trusted_dir'][dirname($file)])) {\n        $content = file_get_contents($file);\n        if ($assign) {\n            $template->assign($assign, $content);\n        }\n        return $assign ? null : $content;\n    }\n}",
      "function smarty_function_fetch($params, $template) {\n    if (!isset($params['file'])) {\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if ($template->security && !preg_match('#^https?://#i', $file)) {\n        $_resource_dir = $template->smarty->getTemplateDir();\n        if (!in_array($_dir = dirname($_file = realpath($file)), $_resource_dir)) {\n            return;\n        }\n    }\n\n    if (preg_match('#^https?://#i', $file)) {\n        $urlParts = parse_url($file);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        if ($proxyHost) {\n            $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, 30);\n            $request = \"GET {$file} HTTP/1.1\\r\\n\";\n            $request .= \"Host: {$host}\\r\\n\";\n        } else {\n            $fp = fsockopen(($urlParts['scheme'] === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 30);\n            $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n            $request .= \"Host: {$host}\\r\\n\";\n        }\n\n        if (!$fp) {\n            return;\n        }\n\n        if ($user && $pass) {\n            $auth = base64_encode(\"{$user}:{$pass}\");\n            $request .= \"Authorization: Basic {$auth}\\r\\n\";\n        }\n\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        fwrite($fp, $request);\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 1024);\n        }\n        fclose($fp);\n\n        list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($assignHeaders) {\n            $template->assign($assignHeaders, $headers);\n        }\n\n        if ($assign) {\n            $template->assign($assign, $body);\n        } else {\n            return $body;\n        }\n    } else {\n        if (!file_exists($file) || !is_readable($file)) {\n            return;\n        }\n\n        $content = file_get_contents($file);\n\n        if ($assign) {\n            $template->assign($assign, $content);\n        } else {\n            return $content;\n        }\n    }\n}",
      "function fetchContent($params, $template) {\n    $file = isset($params['file']) ? $params['file'] : null;\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n\n    if (!$file) {\n        return;\n    }\n\n    if ($template->security && !in_array(realpath($file), $template->secure_dir)) {\n        return;\n    }\n\n    if (strpos($file, 'http://') === 0 || strpos($file, 'https://') === 0) {\n        $urlParts = parse_url($file);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : (strpos($file, 'https://') === 0 ? 443 : 80);\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        $fp = fsockopen(($proxyHost ? $proxyHost : $host), ($proxyHost ? $proxyPort : $port), $errno, $errstr, 30);\n        if (!$fp) {\n            return;\n        }\n\n        $out = \"GET \" . ($proxyHost ? $file : $path . $query) . \" HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $host . \"\\r\\n\";\n        if ($user && $pass) {\n            $out .= \"Authorization: Basic \" . base64_encode(\"$user:$pass\") . \"\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        fwrite($fp, $out);\n        $headers = '';\n        $content = '';\n        $inHeader = true;\n        while (!feof($fp)) {\n            $line = fgets($fp, 1280);\n            if ($inHeader) {\n                $headers .= $line;\n                if ($line == \"\\r\\n\") {\n                    $inHeader = false;\n                }\n            } else {\n                $content .= $line;\n            }\n        }\n        fclose($fp);\n\n        if ($assign) {\n            $template->assign($assign, $content);\n        }\n        if ($assignHeaders) {\n            $template->assign($assignHeaders, $headers);\n        }\n        if (!$assign) {\n            return $content;\n        }\n    } else {\n        if (!file_exists($file) || !is_readable($file)) {\n            return;\n        }\n        $content = file_get_contents($file);\n        if ($assign) {\n            $template->assign($assign, $content);\n        } else {\n            return $content;\n        }\n    }\n}",
      "function fetchContent($params, $template) {\n    if (!isset($params['file'])) {\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if (strpos($file, 'http://') === 0 || strpos($file, 'https://') === 0) {\n        $parsedUrl = parse_url($file);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($parsedUrl['scheme'] === 'https' ? 443 : 80);\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($proxyHost) {\n            $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, 30);\n            $request = \"GET {$file} HTTP/1.1\\r\\n\";\n            $request .= \"Host: {$host}\\r\\n\";\n        } else {\n            $fp = fsockopen(($parsedUrl['scheme'] === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 30);\n            $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n            $request .= \"Host: {$host}\\r\\n\";\n        }\n\n        if (!$fp) {\n            return;\n        }\n\n        if ($user && $pass) {\n            $auth = base64_encode(\"{$user}:{$pass}\");\n            $request .= \"Authorization: Basic {$auth}\\r\\n\";\n        }\n\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        fwrite($fp, $request);\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($assignHeaders) {\n            $template->assign($assignHeaders, $headers);\n        }\n\n        if ($assign) {\n            $template->assign($assign, $body);\n        } else {\n            return $body;\n        }\n    } elseif (is_file($file) && is_readable($file)) {\n        $content = file_get_contents($file);\n\n        if ($assign) {\n            $template->assign($assign, $content);\n        } else {\n            return $content;\n        }\n    }\n}",
      "function smarty_function_fetch($params, &$template) {\n    if (!isset($params['file'])) {\n        trigger_error(\"fetch: missing 'file' parameter\", E_USER_WARNING);\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assign_headers = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxy_host = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxy_port = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if ($template->security && !preg_match('/^https?:\\/\\/' . preg_quote($template->security_settings['trusted_uri'], '/') . '/', $file)) {\n        trigger_error(\"fetch: '$file' is not allowed\", E_USER_WARNING);\n        return;\n    }\n\n    if ($template->security && !preg_match('/^' . preg_quote($template->security_settings['trusted_dir'], '/') . '/', $file)) {\n        trigger_error(\"fetch: '$file' is not allowed\", E_USER_WARNING);\n        return;\n    }\n\n    if (strpos($file, '://') === false) {\n        $content = @file_get_contents($file);\n    } else {\n        $url_parts = parse_url($file);\n        $host = $url_parts['host'];\n        $port = isset($url_parts['port']) ? $url_parts['port'] : 80;\n        $path = isset($url_parts['path']) ? $url_parts['path'] : '/';\n        $query = isset($url_parts['query']) ? '?' . $url_parts['query'] : '';\n\n        if ($proxy_host) {\n            $fp = @fsockopen($proxy_host, $proxy_port, $errno, $errstr, 30);\n            $request = \"GET $file HTTP/1.1\\r\\n\";\n            $request .= \"Host: $proxy_host:$proxy_port\\r\\n\";\n        } else {\n            $fp = @fsockopen($host, $port, $errno, $errstr, 30);\n            $request = \"GET $path$query HTTP/1.1\\r\\n\";\n            $request .= \"Host: $host\\r\\n\";\n        }\n\n        if ($user && $pass) {\n            $auth = base64_encode(\"$user:$pass\");\n            $request .= \"Authorization: Basic $auth\\r\\n\";\n        }\n\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n        if (!$fp) {\n            trigger_error(\"fetch: unable to open socket to '$file'\", E_USER_WARNING);\n            return;\n        }\n\n        fwrite($fp, $request);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 1024);\n        }\n        fclose($fp);\n\n        list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($assign_headers) {\n            $template->assign($assign_headers, $headers);\n        }\n\n        $content = $body;\n    }\n\n    if ($assign) {\n        $template->assign($assign, $content);\n    } else {\n        return $content;\n    }\n}",
      "function fetchContent($params, $template) {\n    $file = isset($params['file']) ? $params['file'] : null;\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if (!$file) {\n        return;\n    }\n\n    if ($template->security && !preg_match('/^(http|https):\\/\\//i', $file)) {\n        $resourceDir = $template->getCompileDir();\n        if (strpos(realpath($file), realpath($resourceDir)) !== 0) {\n            return;\n        }\n    }\n\n    $content = '';\n    $headers = '';\n\n    if (preg_match('/^(http|https):\\/\\//i', $file)) {\n        $urlParts = parse_url($file);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] === 'https' ? 443 : 80);\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        $fp = fsockopen(($proxyHost ? $proxyHost : $host), ($proxyHost ? $proxyPort : $port), $errno, $errstr, 30);\n        if (!$fp) {\n            return;\n        }\n\n        $request = \"GET \" . ($proxyHost ? $file : $path . $query) . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . $host . \"\\r\\n\";\n        if ($user && $pass) {\n            $request .= \"Authorization: Basic \" . base64_encode($user . ':' . $pass) . \"\\r\\n\";\n        }\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n        fwrite($fp, $request);\n\n        while (!feof($fp)) {\n            $line = fgets($fp, 1024);\n            if (strpos($line, \"HTTP/\") === 0 || strpos($line, \"Content-Type:\") === 0 || strpos($line, \"Content-Length:\") === 0) {\n                $headers .= $line;\n            } elseif ($line === \"\\r\\n\") {\n                $content = stream_get_contents($fp);\n                break;\n            }\n        }\n\n        fclose($fp);\n    } else {\n        if (!file_exists($file) || !is_readable($file)) {\n            return;\n        }\n        $content = file_get_contents($file);\n    }\n\n    if ($assign) {\n        $template->assign($assign, $content);\n    }\n    if ($assignHeaders) {\n        $template->assign($assignHeaders, $headers);\n    }\n\n    return $assign ? null : $content;\n}",
      "function smarty_function_fetch($params, $template) {\n    if (!isset($params['file'])) {\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if ($template->security && !preg_match('/^https?:\\/\\/' . preg_quote($template->security_settings['trusted_uri'], '/') . '/', $file)) {\n        return;\n    }\n\n    if ($template->security && !preg_match('/^' . preg_quote($template->security_settings['trusted_dir'], '/') . '/', $file)) {\n        return;\n    }\n\n    if (strpos($file, '://') === false) {\n        $content = @file_get_contents($file);\n        if ($assign) {\n            $template->assign($assign, $content);\n        }\n        return $content;\n    }\n\n    $urlParts = parse_url($file);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $path : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n    $fp = fsockopen($proxyHost ? $proxyHost : $host, $proxyPort ? $proxyPort : $port, $errno, $errstr, 30);\n    if (!$fp) {\n        return;\n    }\n\n    $request = \"GET \" . ($proxyHost ? $file : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: \" . $host . \"\\r\\n\";\n    if ($user && $pass) {\n        $request .= \"Authorization: Basic \" . base64_encode($user . ':' . $pass) . \"\\r\\n\";\n    }\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if ($assign) {\n        $template->assign($assign, $body);\n    }\n    if ($assignHeaders) {\n        $template->assign($assignHeaders, $headers);\n    }\n\n    return $body;\n}",
      "function fetchContent($params, $template) {\n    $file = isset($params['file']) ? $params['file'] : null;\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if (!$file) {\n        return;\n    }\n\n    $parsedUrl = parse_url($file);\n    if ($parsedUrl['scheme'] === 'http') {\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($proxyHost) {\n            $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, 30);\n            $request = \"GET http://$host:$port$path$query HTTP/1.1\\r\\n\";\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, 30);\n            $request = \"GET $path$query HTTP/1.1\\r\\n\";\n        }\n\n        if (!$fp) {\n            return;\n        }\n\n        $request .= \"Host: $host\\r\\n\";\n        if ($user && $pass) {\n            $auth = base64_encode(\"$user:$pass\");\n            $request .= \"Authorization: Basic $auth\\r\\n\";\n        }\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n        fwrite($fp, $request);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($assignHeaders) {\n            $template->assign($assignHeaders, $headers);\n        }\n\n        if ($assign) {\n            $template->assign($assign, $body);\n        } else {\n            return $body;\n        }\n    } elseif ($parsedUrl['scheme'] === 'file') {\n        $filePath = $parsedUrl['path'];\n\n        if (!$template->security || $template->security_settings['trusted_dir'] && strpos(realpath($filePath), realpath($template->security_settings['trusted_dir'])) === 0) {\n            $content = file_get_contents($filePath);\n            if ($assign) {\n                $template->assign($assign, $content);\n            } else {\n                return $content;\n            }\n        }\n    }\n}",
      "function fetchContent($params, &$template) {\n    if (!isset($params['file'])) {\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if ($template->security && !preg_match('/^https?:\\/\\/' . preg_quote($template->security_settings['trusted_uri'], '/') . '/', $file)) {\n        return;\n    }\n\n    if ($template->security && !preg_match('/^' . preg_quote($template->security_settings['trusted_dir'], '/') . '/', $file)) {\n        return;\n    }\n\n    if (strpos($file, '://') === false) {\n        if (!file_exists($file)) {\n            return;\n        }\n        $content = file_get_contents($file);\n    } else {\n        $urlParts = parse_url($file);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n        $path = isset($urlParts['path']) ? $path : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        $fp = fsockopen($proxyHost ? $proxyHost : $host, $proxyPort ? $proxyPort : $port, $errno, $errstr, 30);\n        if (!$fp) {\n            return;\n        }\n\n        $out = \"GET \" . ($proxyHost ? $file : $path . $query) . \" HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $host . \"\\r\\n\";\n        if ($user && $pass) {\n            $out .= \"Authorization: Basic \" . base64_encode($user . \":\" . $pass) . \"\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        fwrite($fp, $out);\n        $headers = '';\n        $body = '';\n        $inBody = false;\n        while (!feof($fp)) {\n            $line = fgets($fp, 128);\n            if (!$inBody && trim($line) == '') {\n                $inBody = true;\n                continue;\n            }\n            if (!$inBody) {\n                $headers .= $line;\n            } else {\n                $body .= $line;\n            }\n        }\n        fclose($fp);\n\n        if ($assignHeaders) {\n            $template->assign($assignHeaders, $headers);\n        }\n\n        $content = $body;\n    }\n\n    if ($assign) {\n        $template->assign($assign, $content);\n    } else {\n        return $content;\n    }\n}",
      "function smarty_function_fetch($params, $template) {\n    if (!isset($params['file'])) {\n        trigger_error(\"fetch: missing 'file' parameter\", E_USER_WARNING);\n        return;\n    }\n\n    $file = $params['file'];\n    $assign = isset($params['assign']) ? $params['assign'] : null;\n    $assignHeaders = isset($params['assign_headers']) ? $params['assign_headers'] : null;\n    $user = isset($params['user']) ? $params['user'] : null;\n    $pass = isset($params['pass']) ? $params['pass'] : null;\n    $proxyHost = isset($params['proxy_host']) ? $params['proxy_host'] : null;\n    $proxyPort = isset($params['proxy_port']) ? $params['proxy_port'] : 80;\n\n    if ($template->security && !in_array(realpath($file), $template->secure_dir)) {\n        trigger_error(\"fetch: '$file' is not allowed\", E_USER_WARNING);\n        return;\n    }\n\n    if (preg_match('!^https?://!', $file)) {\n        $parsedUrl = parse_url($file);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($parsedUrl['scheme'] === 'https' ? 443 : 80);\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($proxyHost) {\n            $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, 30);\n            $request = \"GET {$file} HTTP/1.0\\r\\n\";\n        } else {\n            $fp = fsockopen(($parsedUrl['scheme'] === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 30);\n            $request = \"GET {$path}{$query} HTTP/1.0\\r\\n\";\n        }\n\n        if (!$fp) {\n            trigger_error(\"fetch: unable to open socket to '{$host}:{$port}'\", E_USER_WARNING);\n            return;\n        }\n\n        $request .= \"Host: {$host}\\r\\n\";\n        if ($user && $pass) {\n            $request .= \"Authorization: Basic \" . base64_encode(\"{$user}:{$pass}\") . \"\\r\\n\";\n        }\n        $request .= \"User-Agent: PHP\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n        fwrite($fp, $request);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 1024);\n        }\n        fclose($fp);\n\n        list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if ($assignHeaders) {\n            $template->assign($assignHeaders, $headers);\n        }\n        $content = $body;\n    } else {\n        if (!file_exists($file) || !is_readable($file)) {\n            trigger_error(\"fetch: unable to read '{$file}'\", E_USER_WARNING);\n            return;\n        }\n        $content = file_get_contents($file);\n    }\n\n    if ($assign) {\n        $template->assign($assign, $content);\n    } else {\n        return $content;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Implement a PHP class for handling trackback requests using low-level HTTP socket communication.\n\nClass Description: The CI_Trackback class provides functionality to send and process trackback pings to remote servers. It handles HTTP communication directly using fsockopen, processes responses, and manages errors.\n\nAttributes:\n- charset: string - Character encoding to use (default: 'UTF-8')\n- data: array - Trackback data including url, title, excerpt, blog_name, and charset\n- convert_ascii: bool - Whether to convert non-ASCII characters (default: TRUE)\n- response: string - Raw HTTP response from the trackback server\n- error_msg: array - Collection of error messages encountered during processing\n\nMethods:\n- process(string $url, string $data) -> bool - Sends a trackback ping to the specified URL with the given data. Returns TRUE on success, FALSE on failure.\n  Input: \n    $url: string - Target URL for the trackback\n    $data: string - URL-encoded trackback data\n  Output: bool - Success status\n\n- get_id(string $url) -> mixed - Extracts a numeric ID from the given URL. Returns the ID as string or FALSE if not found.\n  Input: $url: string - URL to parse for an ID\n  Output: mixed - Extracted ID string or FALSE\n\n- set_error(string $msg) -> void - Adds an error message to the error collection.\n  Input: $msg: string - Error message to store\n  Output: void",
    "Canonical_solution": "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = array(\n        'url' => '',\n        'title' => '',\n        'excerpt' => '',\n        'blog_name' => '',\n        'charset' => ''\n    );\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = array();\n\n    public function process($url, $data) {\n        $target = parse_url($url);\n\n        if ( ! $fp = @fsockopen($target['host'], 80)) {\n            $this->set_error('Invalid Connection: '.$url);\n            return FALSE;\n        }\n\n        $path = isset($target['path']) ? $target['path'] : $url;\n        empty($target['query']) OR $path .= '?'.$target['query'];\n\n        if ($id = $this->get_id($url)) {\n            $data = 'tb_id='.$id.'&'.$data;\n        }\n\n        fputs($fp, 'POST '.$path.\" HTTP/1.0\\r\\n\");\n        fputs($fp, 'Host: '.$target['host'].\"\\r\\n\");\n        fputs($fp, \"Content-type: application/x-www-form-urlencoded\\r\\n\");\n        fputs($fp, 'Content-length: '.strlen($data).\"\\r\\n\");\n        fputs($fp, \"Connection: close\\r\\n\\r\\n\");\n        fputs($fp, $data);\n\n        $this->response = '';\n        while ( ! feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        @fclose($fp);\n\n        if (stripos($this->response, '<error>0</error>') === FALSE) {\n            $message = preg_match('/<message>(.*?)<\\/message>/is', $this->response, $match)\n                ? trim($match[1])\n                : 'An unknown error was encountered';\n            $this->set_error($message);\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        $tb_id = '';\n\n        if (strpos($url, '?') !== FALSE) {\n            $tb_array = explode('/', $url);\n            $tb_end   = $tb_array[count($tb_array)-1];\n\n            if ( ! is_numeric($tb_end)) {\n                $tb_end  = $tb_array[count($tb_array)-2];\n            }\n\n            $tb_array = explode('=', $tb_end);\n            $tb_id    = $tb_array[count($tb_array)-1];\n        }\n        else {\n            $url = rtrim($url, '/');\n\n            $tb_array = explode('/', $url);\n            $tb_id    = $tb_array[count($tb_array)-1];\n\n            if ( ! is_numeric($tb_id)) {\n                $tb_id = $tb_array[count($tb_array)-2];\n            }\n        }\n\n        return ctype_digit((string) $tb_id) ? $tb_id : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = $data;\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n        if (!$fp) {\n            $this->set_error(\"Could not open socket: $errstr ($errno)\");\n            return FALSE;\n        }\n\n        $out = \"POST $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid server response');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $parsed_url = parse_url($url);\n        if (!isset($parsed_url['host'])) {\n            $this->set_error('Invalid URL');\n            return FALSE;\n        }\n\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n        if (!$fp) {\n            $this->set_error(\"Could not open socket: $errstr ($errno)\");\n            return FALSE;\n        }\n\n        $out = \"POST $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = $data;\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n\n        if (!$fp) {\n            $this->set_error(\"Could not open socket connection to $host:$port\");\n            return FALSE;\n        }\n\n        $out = \"POST $path HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server');\n            return FALSE;\n        }\n\n        if (strpos($this->response, '<error>0</error>') === FALSE) {\n            preg_match('/<message>(.*?)<\\/message>/', $this->response, $matches);\n            $this->set_error(isset($matches[1]) ? $matches[1] : 'Unknown error');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        if (preg_match('/\\/(\\d+)$/', $url, $matches)) {\n            return $matches[1];\n        }\n        return FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = $data;\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n\n        if (!$fp) {\n            $this->set_error('Could not open socket connection.');\n            return FALSE;\n        }\n\n        $out = \"POST {$path} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$host}\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid server response.');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = $data;\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n\n        if (!$fp) {\n            $this->set_error('Unable to open socket connection to ' . $host);\n            return FALSE;\n        }\n\n        $out = \"POST \" . $path . \" HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $host . \"\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n        if (!$fp) {\n            $this->set_error('Could not open socket connection.');\n            return FALSE;\n        }\n\n        $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$host}\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server.');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = [\n            'url' => $data['url'],\n            'title' => $data['title'],\n            'excerpt' => $data['excerpt'],\n            'blog_name' => $data['blog_name'],\n            'charset' => $this->charset\n        ];\n\n        if ($this->convert_ascii) {\n            foreach ($this->data as &$value) {\n                $value = preg_replace(\"/[\\x{100}-\\x{1FF}\\x{200}-\\x{2FF}\\x{300}-\\x{3FF}\\x{400}-\\x{4FF}\\x{500}-\\x{5FF}\\x{600}-\\x{6FF}\\x{700}-\\x{7FF}\\x{800}-\\x{8FF}\\x{900}-\\x{9FF}\\x{A00}-\\x{AFF}\\x{B00}-\\x{BFF}\\x{C00}-\\x{CFF}\\x{D00}-\\x{DFF}\\x{E00}-\\x{EFF}\\x{F00}-\\x{FFF}]/u\", '', $value);\n            }\n        }\n\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n        if (!$fp) {\n            $this->set_error('Could not open socket connection to ' . $host);\n            return FALSE;\n        }\n\n        $out = \"POST \" . $path . $query . \" HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $host . \"\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen(http_build_query($this->data)) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= http_build_query($this->data);\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        if (preg_match('/\\/(\\d+)\\/?$/', $url, $matches)) {\n            return $matches[1];\n        }\n        return FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = $data;\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n\n        if (!$fp) {\n            $this->set_error('Could not open socket connection.');\n            return FALSE;\n        }\n\n        $out = \"POST {$path} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$host}\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server.');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n        if (!$fp) {\n            $this->set_error('Could not open socket connection.');\n            return FALSE;\n        }\n\n        $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$host}\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server.');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}",
      "class CI_Trackback {\n    public $charset = 'UTF-8';\n    public $data = [];\n    public $convert_ascii = TRUE;\n    public $response = '';\n    public $error_msg = [];\n\n    public function process($url, $data) {\n        $this->data = $data;\n        $parsed_url = parse_url($url);\n        $host = $parsed_url['host'];\n        $port = isset($parsed_url['port']) ? $parsed_url['port'] : 80;\n        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $fp = fsockopen($host, $port, $errno, $errstr, 30);\n\n        if (!$fp) {\n            $this->set_error('Could not open socket connection.');\n            return FALSE;\n        }\n\n        $out = \"POST {$path} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$host}\\r\\n\";\n        $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $out .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        $out .= $data;\n\n        fwrite($fp, $out);\n        $this->response = '';\n        while (!feof($fp)) {\n            $this->response .= fgets($fp, 128);\n        }\n        fclose($fp);\n\n        if (strpos($this->response, '200 OK') === FALSE) {\n            $this->set_error('Invalid response from server.');\n            return FALSE;\n        }\n\n        return TRUE;\n    }\n\n    public function get_id($url) {\n        preg_match('/\\/(\\d+)\\/?$/', $url, $matches);\n        return isset($matches[1]) ? $matches[1] : FALSE;\n    }\n\n    public function set_error($msg) {\n        $this->error_msg[] = $msg;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Implement a class that handles HTTP POST requests to Google's reCAPTCHA verification service using low-level socket operations in PHP.\n\nClass Description: ReCaptchaSocketPostRequestMethod is a class that implements reCAPTCHA verification by establishing a direct socket connection to Google's servers, sending an HTTP POST request, and processing the response. It provides an alternative to higher-level HTTP clients.\n\nAttributes:\n- socket: [ReCaptchaSocket] - The socket connection handler used for HTTP communication\n- RECAPTCHA_HOST: [string] - Constant storing Google's reCAPTCHA hostname ('www.google.com')\n- SITE_VERIFY_PATH: [string] - Constant storing the reCAPTCHA verification endpoint path ('/recaptcha/api/siteverify')\n- BAD_REQUEST: [string] - Constant JSON response for failed requests\n- BAD_RESPONSE: [string] - Constant JSON response for invalid server responses\n\nMethods:\n- __construct([ReCaptchaSocket $socket = null]) -> [void] - Initializes the class with an optional socket dependency injection\n- submit(ReCaptchaRequestParameters $params) -> [string] - Performs the reCAPTCHA verification by:\n  1. Opening an SSL socket connection to Google's server\n  2. Formatting and sending an HTTP POST request with verification parameters\n  3. Reading and parsing the server response\n  4. Returning the verification result as JSON string\n  Returns either the server response or error JSON if the request/response fails",
    "Canonical_solution": "class ReCaptchaSocketPostRequestMethod implements ReCaptchaRequestMethod\n{\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\": false, \"error-codes\": [\"invalid-request\"]}';\n    const BAD_RESPONSE = '{\"success\": false, \"error-codes\": [\"invalid-response\"]}';\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null)\n    {\n        if (!is_null($socket)) {\n            $this->socket = $socket;\n        } else {\n            $this->socket = new ReCaptchaSocket();\n        }\n    }\n\n    public function submit(ReCaptchaRequestParameters $params)\n    {\n        $errno = 0;\n        $errstr = '';\n\n        if (false === $this->socket->fsockopen('ssl://' . self::RECAPTCHA_HOST, 443, $errno, $errstr, 30)) {\n            return self::BAD_REQUEST;\n        }\n\n        $content = $params->toQueryString();\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-length: \" . strlen($content) . \"\\r\\n\";\n        $request .= \"Connection: close\\r\\n\\r\\n\";\n        $request .= $content . \"\\r\\n\\r\\n\";\n\n        $this->socket->fwrite($request);\n        $response = '';\n\n        while (!$this->socket->feof()) {\n            $response .= $this->socket->fgets(4096);\n        }\n\n        $this->socket->fclose();\n\n        if (0 !== strpos($response, 'HTTP/1.1 200 OK')) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = preg_split(\"#\\n\\s*\\n#Uis\", $response);\n\n        return $parts[1];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "matched_results": [],
    "unmatched_results": [
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"invalid-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?? new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        $host = self::RECAPTCHA_HOST;\n        $path = self::SITE_VERIFY_PATH;\n        $data = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        if (!$this->socket->connect($host, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $request = \"POST {$path} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $this->socket->close();\n\n        $httpResponse = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (count($httpResponse) !== 2) {\n            return self::BAD_RESPONSE;\n        }\n\n        list($headers, $body) = $httpResponse;\n        if (!preg_match('/HTTP\\/1\\.\\d 200 OK/', $headers)) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen(\"ssl://{$host}\", $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function read(): ?string {\n        return stream_get_contents($this->connection);\n    }\n\n    public function close(): void {\n        fclose($this->connection);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"invalid-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        $host = self::RECAPTCHA_HOST;\n        $path = self::SITE_VERIFY_PATH;\n        $data = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        if (!$this->socket->connect($host, 443, true)) {\n            return self::BAD_REQUEST;\n        }\n\n        $request = \"POST {$path} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $this->socket->disconnect();\n\n        $responseLines = explode(\"\\r\\n\", $response);\n        $body = array_pop($responseLines);\n\n        if (json_decode($body, true) === null) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port, bool $secure): bool {\n        $scheme = $secure ? 'ssl://' : '';\n        $this->connection = fsockopen($scheme . $host, $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function read(): string {\n        $response = '';\n        while (!feof($this->connection)) {\n            $response .= fgets($this->connection, 8192);\n        }\n        return $response;\n    }\n\n    public function disconnect() {\n        fclose($this->connection);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"bad-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        if (!$this->socket->connect(self::RECAPTCHA_HOST, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $data = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $this->socket->close();\n\n        $headers = substr($response, 0, strpos($response, \"\\r\\n\\r\\n\"));\n        $body = substr($response, strpos($response, \"\\r\\n\\r\\n\") + 4);\n\n        if (strpos($headers, 'HTTP/1.1 200 OK') === false) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function read(): string {\n        $response = '';\n        while (!feof($this->connection)) {\n            $response .= fgets($this->connection, 1024);\n        }\n        return $response;\n    }\n\n    public function close(): void {\n        fclose($this->connection);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"bad-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        if (!$this->socket->connect(self::RECAPTCHA_HOST, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $postData = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $postData;\n\n        if (!$this->socket->send($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->receive();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $this->socket->close();\n\n        $responseLines = explode(\"\\r\\n\", $response);\n        $body = array_pop($responseLines);\n\n        return $body ?: self::BAD_RESPONSE;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function send(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function receive(): string {\n        $response = '';\n        while (!feof($this->connection)) {\n            $response .= fgets($this->connection, 1024);\n        }\n        return $response;\n    }\n\n    public function close() {\n        fclose($this->connection);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"invalid-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        $host = self::RECAPTCHA_HOST;\n        $path = self::SITE_VERIFY_PATH;\n        $data = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        if (!$this->socket->connect($host, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $request = \"POST {$path} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->send($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->receive();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $responseLines = explode(\"\\r\\n\", $response);\n        $body = array_pop($responseLines);\n\n        return $body ?: self::BAD_RESPONSE;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen(\"ssl://{$host}\", $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function send(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function receive(): string {\n        $response = '';\n        while (!feof($this->connection)) {\n            $response .= fgets($this->connection, 1024);\n        }\n        fclose($this->connection);\n        return $response;\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"bad-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?? new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        $host = self::RECAPTCHA_HOST;\n        $path = self::SITE_VERIFY_PATH;\n        $data = http_build_query($params->toArray());\n        $request = \"POST $path HTTP/1.1\\r\\n\";\n        $request .= \"Host: $host\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->connect($host, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        if (!$this->socket->write($request)) {\n            $this->socket->close();\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        $this->socket->close();\n\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (count($parts) !== 2) {\n            return self::BAD_RESPONSE;\n        }\n\n        list($headers, $body) = $parts;\n        if (strpos($headers, 'HTTP/1.1 200 OK') === false) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function read(): string {\n        return stream_get_contents($this->connection);\n    }\n\n    public function close(): void {\n        fclose($this->connection);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $parameters;\n\n    public function __construct(array $parameters) {\n        $this->parameters = $parameters;\n    }\n\n    public function toArray(): array {\n        return $this->parameters;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"bad-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        $host = self::RECAPTCHA_HOST;\n        $path = self::SITE_VERIFY_PATH;\n        $data = http_build_query($params->toArray());\n        $request = \"POST $path HTTP/1.1\\r\\n\";\n        $request .= \"Host: $host\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->connect($host, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (count($parts) !== 2) {\n            return self::BAD_RESPONSE;\n        }\n\n        list($headers, $body) = $parts;\n        if (strpos($headers, 'HTTP/1.1 200 OK') === false) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function read(): string {\n        $response = '';\n        while (!feof($this->connection)) {\n            $response .= fgets($this->connection, 1024);\n        }\n        fclose($this->connection);\n        return $response;\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $parameters;\n\n    public function __construct(array $parameters) {\n        $this->parameters = $parameters;\n    }\n\n    public function toArray(): array {\n        return $this->parameters;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"invalid-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?? new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        if (!$this->socket->connect(self::RECAPTCHA_HOST, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $data = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $this->socket->close();\n\n        if (strpos($response, 'HTTP/1.1 200 OK') === false) {\n            return self::BAD_RESPONSE;\n        }\n\n        $body = substr($response, strpos($response, \"\\r\\n\\r\\n\") + 4);\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $connection;\n\n    public function connect(string $host, int $port): bool {\n        $this->connection = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->connection !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->connection, $data) !== false;\n    }\n\n    public function read(): string {\n        $response = '';\n        while (!feof($this->connection)) {\n            $response .= fgets($this->connection, 1024);\n        }\n        return $response;\n    }\n\n    public function close(): void {\n        fclose($this->connection);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"bad-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        $host = self::RECAPTCHA_HOST;\n        $path = self::SITE_VERIFY_PATH;\n        $data = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        if (!$this->socket->connect($host, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $request = \"POST {$path} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (count($parts) !== 2) {\n            return self::BAD_RESPONSE;\n        }\n\n        list($headers, $body) = $parts;\n        if (strpos($headers, 'HTTP/1.1 200 OK') === false) {\n            return self::BAD_RESPONSE;\n        }\n\n        return $body;\n    }\n}\n\nclass ReCaptchaSocket {\n    private $fp;\n\n    public function connect(string $host, int $port): bool {\n        $this->fp = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->fp !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->fp, $data) !== false;\n    }\n\n    public function read(): string {\n        $response = '';\n        while (!feof($this->fp)) {\n            $response .= fgets($this->fp, 1024);\n        }\n        fclose($this->fp);\n        return $response;\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}",
      "class ReCaptchaSocketPostRequestMethod {\n    const RECAPTCHA_HOST = 'www.google.com';\n    const SITE_VERIFY_PATH = '/recaptcha/api/siteverify';\n    const BAD_REQUEST = '{\"success\":false,\"error-codes\":[\"bad-request\"]}';\n    const BAD_RESPONSE = '{\"success\":false,\"error-codes\":[\"bad-response\"]}';\n\n    private $socket;\n\n    public function __construct(ReCaptchaSocket $socket = null) {\n        $this->socket = $socket ?: new ReCaptchaSocket();\n    }\n\n    public function submit(ReCaptchaRequestParameters $params): string {\n        if (!$this->socket->connect(self::RECAPTCHA_HOST, 443)) {\n            return self::BAD_REQUEST;\n        }\n\n        $postFields = http_build_query([\n            'secret' => $params->getSecret(),\n            'response' => $params->getResponse(),\n            'remoteip' => $params->getRemoteIp()\n        ]);\n\n        $request = \"POST \" . self::SITE_VERIFY_PATH . \" HTTP/1.1\\r\\n\";\n        $request .= \"Host: \" . self::RECAPTCHA_HOST . \"\\r\\n\";\n        $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($postFields) . \"\\r\\n\";\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        $request .= $postFields;\n\n        if (!$this->socket->write($request)) {\n            return self::BAD_REQUEST;\n        }\n\n        $response = $this->socket->read();\n        if (!$response) {\n            return self::BAD_RESPONSE;\n        }\n\n        $this->socket->close();\n\n        $responseBody = substr($response, strpos($response, \"\\r\\n\\r\\n\") + 4);\n        if (json_decode($responseBody)) {\n            return $responseBody;\n        } else {\n            return self::BAD_RESPONSE;\n        }\n    }\n}\n\nclass ReCaptchaSocket {\n    private $socket;\n\n    public function connect(string $host, int $port): bool {\n        $this->socket = fsockopen('ssl://' . $host, $port, $errno, $errstr, 30);\n        return $this->socket !== false;\n    }\n\n    public function write(string $data): bool {\n        return fwrite($this->socket, $data) !== false;\n    }\n\n    public function read(): string {\n        return stream_get_contents($this->socket);\n    }\n\n    public function close() {\n        fclose($this->socket);\n    }\n}\n\nclass ReCaptchaRequestParameters {\n    private $secret;\n    private $response;\n    private $remoteIp;\n\n    public function __construct(string $secret, string $response, string $remoteIp = '') {\n        $this->secret = $secret;\n        $this->response = $response;\n        $this->remoteIp = $remoteIp;\n    }\n\n    public function getSecret(): string {\n        return $this->secret;\n    }\n\n    public function getResponse(): string {\n        return $this->response;\n    }\n\n    public function getRemoteIp(): string {\n        return $this->remoteIp;\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a PHP class for handling HTTP/HTTPS communications using either socket-based connections (via fsockopen) or cURL, supporting both standard and persistent connections, with proper header and cookie management.\n\nClass Description: The soap_transport_http class provides low-level HTTP transport capabilities for SOAP communications, supporting both socket and cURL implementations. It handles connection management, request/response processing, and error handling.\n\nAttributes:\n- url: string - The target URL for HTTP requests\n- uri: string - The URI portion of the URL\n- scheme: string - The protocol scheme (http/https)\n- host: string - The target hostname\n- port: string - The target port number\n- path: string - The path portion of the URL\n- request_method: string - HTTP method (default: POST)\n- protocol_version: string - HTTP version (default: 1.0)\n- outgoing_headers: array - Headers to be sent with the request\n- incoming_headers: array - Headers received in the response\n- outgoing_payload: string - Data to be sent in the request\n- incoming_payload: string - Data received in the response\n- persistentConnection: bool - Flag for persistent connections\n- use_curl: bool - Flag to use cURL instead of sockets\n- proxy: array|null - Proxy configuration if used\n\nMethods:\n- __construct(string $url, array $curl_options=null, bool $use_curl=false) -> void - Initializes the transport with target URL and options\n- connect(int $connection_timeout=0, int $response_timeout=30) -> bool - Establishes connection to server\n- send(string $data, int $timeout=0, int $response_timeout=30, array $cookies=null) -> mixed - Sends data and returns response\n- sendRequest(string $data, array $cookies=null) -> bool - Sends the HTTP request with headers\n- getResponse() -> string|bool - Reads and processes the server response\n- setHeader(string $name, string $value) -> void - Adds a header to outgoing request\n- setCurlOption(mixed $option, mixed $value) -> void - Sets cURL option when using cURL\n- parseCookie(string $cookie_str) -> array|bool - Parses Set-Cookie header into array",
    "Canonical_solution": "class soap_transport_http extends nusoap_base {\n    var $url = '';\n    var $uri = '';\n    var $digest_uri = '';\n    var $scheme = '';\n    var $host = '';\n    var $port = '';\n    var $path = '';\n    var $request_method = 'POST';\n    var $protocol_version = '1.0';\n    var $encoding = '';\n    var $outgoing_headers = array();\n    var $incoming_headers = array();\n    var $incoming_cookies = array();\n    var $outgoing_payload = '';\n    var $incoming_payload = '';\n    var $response_status_line;\n    var $useSOAPAction = true;\n    var $persistentConnection = false;\n    var $ch = false;\n    var $ch_options = array();\n    var $use_curl = false;\n    var $proxy = null;\n    var $username = '';\n    var $password = '';\n    var $authtype = '';\n    var $digestRequest = array();\n    var $certRequest = array();\n\n    function soap_transport_http($url, $curl_options = NULL, $use_curl = false) {\n        parent::nusoap_base();\n        $this->debug(\"ctor url=$url use_curl=$use_curl curl_options:\");\n        $this->appendDebug($this->varDump($curl_options));\n        $this->setURL($url);\n        if (is_array($curl_options)) {\n            $this->ch_options = $curl_options;\n        }\n        $this->use_curl = $use_curl;\n        preg_match('/\\$Revisio' . 'n: ([^ ]+)/', $this->revision, $rev);\n        $this->setHeader('User-Agent', $this->title.'/'.$this->version.' ('.$rev[1].')');\n    }\n\n    function connect($connection_timeout=0,$response_timeout=30) {\n        $this->debug(\"connect connection_timeout $connection_timeout, response_timeout $response_timeout, scheme $this->scheme, host $this->host, port $this->port\");\n        if ($this->io_method() == 'socket') {\n            if (!is_array($this->proxy)) {\n                $host = $this->host;\n                $port = $this->port;\n            } else {\n                $host = $this->proxy['host'];\n                $port = $this->proxy['port'];\n            }\n\n            if($this->persistentConnection && isset($this->fp) && is_resource($this->fp)){\n                if (!feof($this->fp)) {\n                    $this->debug('Re-use persistent connection');\n                    return true;\n                }\n                fclose($this->fp);\n                $this->debug('Closed persistent connection at EOF');\n            }\n\n            if ($this->scheme == 'ssl') {\n                $host = 'ssl://' . $host;\n            }\n            $this->debug('calling fsockopen with host ' . $host . ' connection_timeout ' . $connection_timeout);\n\n            if($connection_timeout > 0){\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str, $connection_timeout);\n            } else {\n                $this->fp = @fsockopen( $host, $this->port, $this->errno, $this->error_str);\n            }\n            \n            if(!$this->fp) {\n                $msg = 'Couldn\\'t open socket connection to server ' . $this->url;\n                if ($this->errno) {\n                    $msg .= ', Error ('.$this->errno.'): '.$this->error_str;\n                } else {\n                    $msg .= ' prior to connect().  This is often a problem looking up the host name.';\n                }\n                $this->debug($msg);\n                $this->setError($msg);\n                return false;\n            }\n            \n            $this->debug('set response timeout to ' . $response_timeout);\n            socket_set_timeout( $this->fp, $response_timeout);\n\n            $this->debug('socket connected');\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            if (!extension_loaded('curl')) {\n                $this->setError('The PHP cURL Extension is required for HTTPS or NLTM.  You will need to re-build or update your PHP to include cURL or change php.ini to load the PHP cURL extension.');\n                return false;\n            }\n            $this->debug('connect using cURL');\n            $this->ch = curl_init();\n            $hostURL = ($this->port != '') ? \"$this->scheme://$this->host:$this->port\" : \"$this->scheme://$this->host\";\n            $hostURL .= $this->path;\n            $this->setCurlOption(CURLOPT_URL, $hostURL);\n            if (ini_get('safe_mode') || ini_get('open_basedir')) {\n                $this->debug('safe_mode or open_basedir set, so do not set CURLOPT_FOLLOWLOCATION');\n            } else {\n                $this->setCurlOption(CURLOPT_FOLLOWLOCATION, 1);\n            }\n            $this->setCurlOption(CURLOPT_HEADER, 1);\n            $this->setCurlOption(CURLOPT_RETURNTRANSFER, 1);\n            if ($this->persistentConnection) {\n                $this->persistentConnection = false;\n                $this->setHeader('Connection', 'close');\n            }\n            if ($connection_timeout != 0) {\n                $this->setCurlOption(CURLOPT_CONNECTIONTIMEOUT, $connection_timeout);\n            }\n            if ($response_timeout != 0) {\n                $this->setCurlOption(CURLOPT_TIMEOUT, $response_timeout);\n            }\n            $this->debug('cURL connection set up');\n            return true;\n        } else {\n            $this->setError('Unknown scheme ' . $this->scheme);\n            $this->debug('Unknown scheme ' . $this->scheme);\n            return false;\n        }\n    }\n\n    function send($data, $timeout=0, $response_timeout=30, $cookies=NULL) {\n        $this->debug('entered send() with data of length: '.strlen($data));\n        $this->tryagain = true;\n        $tries = 0;\n        while ($this->tryagain) {\n            $this->tryagain = false;\n            if ($tries++ < 2) {\n                if (!$this->connect($timeout, $response_timeout)){\n                    return false;\n                }\n                if (!$this->sendRequest($data, $cookies)){\n                    return false;\n                }\n                $respdata = $this->getResponse();\n            } else {\n                $this->setError(\"Too many tries to get an OK response ($this->response_status_line)\");\n            }\n        }        \n        $this->debug('end of send()');\n        return $respdata;\n    }\n\n    function sendRequest($data, $cookies = NULL) {\n        $cookie_str = $this->getCookiesForRequest($cookies, (($this->scheme == 'ssl') || ($this->scheme == 'https')));\n        $this->buildPayload($data, $cookie_str);\n        if ($this->io_method() == 'socket') {\n            if(!fputs($this->fp, $this->outgoing_payload, strlen($this->outgoing_payload))) {\n                $this->setError('couldn\\'t write message data to socket');\n                $this->debug('couldn\\'t write message data to socket');\n                return false;\n            }\n            $this->debug('wrote data to socket, length = ' . strlen($this->outgoing_payload));\n            return true;\n        } else if ($this->io_method() == 'curl') {\n            $curl_headers = array();\n            foreach($this->outgoing_headers as $k => $v){\n                if ($k == 'Connection' || $k == 'Content-Length' || $k == 'Host' || $k == 'Authorization' || $k == 'Proxy-Authorization') {\n                    $this->debug(\"Skip cURL header $k: $v\");\n                } else {\n                    $curl_headers[] = \"$k: $v\";\n                }\n            }\n            if ($cookie_str != '') {\n                $curl_headers[] = 'Cookie: ' . $cookie_str;\n            }\n            $this->setCurlOption(CURLOPT_HTTPHEADER, $curl_headers);\n            $this->debug('set cURL HTTP headers');\n            if ($this->request_method == \"POST\") {\n                $this->setCurlOption(CURLOPT_POST, 1);\n                $this->setCurlOption(CURLOPT_POSTFIELDS, $data);\n                $this->debug('set cURL POST data');\n            }\n            foreach ($this->ch_options as $key => $val) {\n                $this->setCurlOption($key, $val);\n            }\n            $this->debug('set cURL payload');\n            return true;\n        }\n    }\n\n    function getResponse(){\n        $this->incoming_payload = '';\n        if ($this->io_method() == 'socket') {\n            $data = '';\n            while (!isset($lb)){\n                if(feof($this->fp)) {\n                    $this->incoming_payload = $data;\n                    $this->debug('found no headers before EOF after length ' . strlen($data));\n                    $this->debug(\"received before EOF:\\n\" . $data);\n                    $this->setError('server failed to send headers');\n                    return false;\n                }\n                $tmp = fgets($this->fp, 256);\n                $tmplen = strlen($tmp);\n                $this->debug(\"read line of $tmplen bytes: \" . trim($tmp));\n                if ($tmplen == 0) {\n                    $this->incoming_payload = $data;\n                    $this->debug('socket read of headers timed out after length ' . strlen($data));\n                    $this->debug(\"read before timeout: \" . $data);\n                    $this->setError('socket read of headers timed out');\n                    return false;\n                }\n                $data .= $tmp;\n                $pos = strpos($data,\"\\r\\n\\r\\n\");\n                if($pos > 1){\n                    $lb = \"\\r\\n\";\n                } else {\n                    $pos = strpos($data,\"\\n\\n\");\n                    if($pos > 1){\n                        $lb = \"\\n\";\n                    }\n                }\n                if (isset($lb) && preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    unset($lb);\n                    $data = '';\n                }\n            }\n            $this->incoming_payload .= $data;\n            $this->debug('found end of headers after length ' . strlen($data));\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $this->incoming_headers = array();\n            $this->incoming_cookies = array();\n            foreach($header_array as $header_line){\n                $arr = explode(':',$header_line, 2);\n                if(count($arr) > 1){\n                    $header_name = strtolower(trim($arr[0]));\n                    $this->incoming_headers[$header_name] = trim($arr[1]);\n                    if ($header_name == 'set-cookie') {\n                        $cookie = $this->parseCookie(trim($arr[1]));\n                        if ($cookie) {\n                            $this->incoming_cookies[] = $cookie;\n                            $this->debug('found cookie: ' . $cookie['name'] . ' = ' . $cookie['value']);\n                        } else {\n                            $this->debug('did not find cookie in ' . trim($arr[1]));\n                        }\n                    }\n                } else if (isset($header_name)) {\n                    $this->incoming_headers[$header_name] .= $lb . ' ' . $header_line;\n                }\n            }\n            if (isset($this->incoming_headers['transfer-encoding']) && strtolower($this->incoming_headers['transfer-encoding']) == 'chunked') {\n                $content_length =  2147483647;\n                $chunked = true;\n                $this->debug(\"want to read chunked content\");\n            } elseif (isset($this->incoming_headers['content-length'])) {\n                $content_length = $this->incoming_headers['content-length'];\n                $chunked = false;\n                $this->debug(\"want to read content of length $content_length\");\n            } else {\n                $content_length =  2147483647;\n                $chunked = false;\n                $this->debug(\"want to read content to EOF\");\n            }\n            $data = '';\n            do {\n                if ($chunked) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk line of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk length timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk length timed out');\n                        return false;\n                    }\n                    $content_length = hexdec(trim($tmp));\n                    $this->debug(\"chunk length $content_length\");\n                }\n                $strlen = 0;\n                while (($strlen < $content_length) && (!feof($this->fp))) {\n                    $readlen = min(8192, $content_length - $strlen);\n                    $tmp = fread($this->fp, $readlen);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read buffer of $tmplen bytes\");\n                    if (($tmplen == 0) && (!feof($this->fp))) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of body timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of body timed out');\n                        return false;\n                    }\n                    $strlen += $tmplen;\n                    $data .= $tmp;\n                }\n                if ($chunked && ($content_length > 0)) {\n                    $tmp = fgets($this->fp, 256);\n                    $tmplen = strlen($tmp);\n                    $this->debug(\"read chunk terminator of $tmplen bytes\");\n                    if ($tmplen == 0) {\n                        $this->incoming_payload = $data;\n                        $this->debug('socket read of chunk terminator timed out after length ' . strlen($data));\n                        $this->debug(\"read before timeout:\\n\" . $data);\n                        $this->setError('socket read of chunk terminator timed out');\n                        return false;\n                    }\n                }\n            } while ($chunked && ($content_length > 0) && (!feof($this->fp)));\n            if (feof($this->fp)) {\n                $this->debug('read to EOF');\n            }\n            $this->debug('read body of length ' . strlen($data));\n            $this->incoming_payload .= $data;\n            $this->debug('received a total of '.strlen($this->incoming_payload).' bytes of data from server');\n            if(\n                (isset($this->incoming_headers['connection']) && strtolower($this->incoming_headers['connection']) == 'close') || \n                (! $this->persistentConnection) || feof($this->fp)){\n                fclose($this->fp);\n                $this->fp = false;\n                $this->debug('closed socket');\n            }\n            if($this->incoming_payload == ''){\n                $this->setError('no response from server');\n                return false;\n            }\n            return $data;\n        } else if ($this->io_method() == 'curl') {\n            $this->debug('send and receive with cURL');\n            $this->incoming_payload = curl_exec($this->ch);\n            $data = $this->incoming_payload;\n            $cErr = curl_error($this->ch);\n            if ($cErr != '') {\n                $err = 'cURL ERROR: '.curl_errno($this->ch).': '.$cErr.'<br>';\n                foreach(curl_getinfo($this->ch) as $k => $v){\n                    $err .= \"$k: $v<br>\";\n                }\n                $this->debug($err);\n                $this->setError($err);\n                curl_close($this->ch);\n                return false;\n            }\n            $this->debug('No cURL error, closing cURL');\n            curl_close($this->ch);\n            $savedata = $data;\n            while ($this->isSkippableCurlHeader($data)) {\n                $this->debug(\"Found HTTP header to skip\");\n                if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                    $data = ltrim(substr($data,$pos));\n                } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                    $data = ltrim(substr($data,$pos));\n                }\n            }\n            if ($data == '') {\n                $data = $savedata;\n                while (preg_match('/^HTTP\\/1.1 100/',$data)) {\n                    if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                        $data = ltrim(substr($data,$pos));\n                    } elseif($pos = strpos($data,\"\\n\\n\") ) {\n                        $data = ltrim(substr($data,$pos));\n                    }\n                }\n            }\n            if ($pos = strpos($data,\"\\r\\n\\r\\n\")) {\n                $lb = \"\\r\\n\";\n            } elseif( $pos = strpos($data,\"\\n\\n\")) {\n                $lb = \"\\n\";\n            } else {\n                $this->debug('no proper separation of headers and document');\n                $this->setError('no proper separation of headers and document');\n                return false;\n            }\n            $header_data = trim(substr($data,0,$pos));\n            $header_array = explode($lb,$header_data);\n            $data = ltrim(substr($data,$pos));\n            $this->debug('found proper separation of headers and document');\n            $this->debug('cleaned data, stringlen: '.strlen($data));\n            foreach ($header_array as $header_line) {\n                $arr = explode(':',$header_line",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection;\n    private $curl_handle;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options !== null) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt_array($this->curl_handle, $this->curl_options);\n            curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $response_timeout);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = $this->outgoing_headers;\n        if ($cookies !== null) {\n            $headers[] = 'Cookie: ' . http_build_query($cookies, '', '; ');\n        }\n        $request = $this->request_method . ' ' . $this->uri . ' HTTP/' . $this->protocol_version . \"\\r\\n\";\n        foreach ($headers as $header) {\n            $request .= $header . \"\\r\\n\";\n        }\n        $request .= \"Host: \" . $this->host . \"\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: \" . ($this->persistentConnection ? 'Keep-Alive' : 'Close') . \"\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            curl_close($this->curl_handle);\n            return $this->incoming_payload;\n        } else {\n            $response = '';\n            while (!feof($this->connection)) {\n                $response .= fgets($this->connection, 4096);\n            }\n            fclose($this->connection);\n            list($this->incoming_headers, $this->incoming_payload) = preg_split(\"/\\r?\\n\\r?\\n/\", $response, 2);\n            $this->incoming_headers = $this->parseHeaders($this->incoming_headers);\n            return $this->incoming_payload;\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[] = \"$name: $value\";\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, $option, $value);\n        }\n    }\n\n    private function parseHeaders($raw_headers) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw_headers));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n            list($key, $value) = explode(': ', $line, 2);\n            $headers[$key] = $value;\n        }\n        return $headers;\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookie = [];\n        $parts = explode(';', $cookie_str);\n        foreach ($parts as $part) {\n            $pair = explode('=', trim($part), 2);\n            if (count($pair) === 2) {\n                $cookie[$pair[0]] = $pair[1];\n            }\n        }\n        return $cookie;\n    }\n}"
    ],
    "unmatched_results": [
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection;\n    private $curl_handle;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt_array($this->curl_handle, $this->curl_options);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = $this->buildHeaders($cookies);\n        $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\";\n        foreach ($headers as $header) {\n            $request .= \"$header\\r\\n\";\n        }\n        $request .= \"\\r\\n$data\";\n\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    private function buildHeaders($cookies = null) {\n        $headers = $this->outgoing_headers;\n        if ($cookies) {\n            $headers[] = 'Cookie: ' . http_build_query($cookies, '', '; ');\n        }\n        $headers[] = 'Host: ' . $this->host;\n        $headers[] = 'Content-Length: ' . strlen($this->outgoing_payload);\n        return $headers;\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            curl_close($this->curl_handle);\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            fclose($this->connection);\n            list($headers, $body) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n            $this->parseIncomingHeaders($headers);\n            return $body;\n        }\n    }\n\n    private function parseIncomingHeaders($headers) {\n        $lines = explode(\"\\r\\n\", $headers);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $this->incoming_headers[trim($key)] = trim($value);\n            }\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = \"$name: $value\";\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, $option, $value);\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookie_parts = explode(';', $cookie_str);\n        $cookie = [];\n        foreach ($cookie_parts as $part) {\n            $pair = explode('=', $part, 2);\n            if (count($pair) == 2) {\n                $cookie[trim($pair[0])] = trim($pair[1]);\n            }\n        }\n        return $cookie;\n    }\n}",
      "class soap_transport_http {\n    private $url;\n    private $uri;\n    private $scheme;\n    private $host;\n    private $port;\n    private $path;\n    private $request_method = 'POST';\n    private $protocol_version = '1.0';\n    private $outgoing_headers = [];\n    private $incoming_headers = [];\n    private $outgoing_payload;\n    private $incoming_payload;\n    private $persistentConnection = false;\n    private $use_curl = false;\n    private $proxy = null;\n    private $ch = null;\n    private $fp = null;\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($this->use_curl && $curl_options) {\n            foreach ($curl_options as $option => $value) {\n                $this->setCurlOption($option, $value);\n            }\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->ch = curl_init($this->url);\n            curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->ch, CURLOPT_TIMEOUT, $response_timeout);\n            curl_setopt($this->ch, CURLOPT_CONNECTTIMEOUT, $connection_timeout);\n            if ($this->persistentConnection) {\n                curl_setopt($this->ch, CURLOPT_FORBID_REUSE, false);\n            } else {\n                curl_setopt($this->ch, CURLOPT_FORBID_REUSE, true);\n            }\n            if ($this->proxy) {\n                curl_setopt($this->ch, CURLOPT_PROXY, $this->proxy['host']);\n                if (isset($this->proxy['port'])) {\n                    curl_setopt($this->ch, CURLOPT_PROXYPORT, $this->proxy['port']);\n                }\n            }\n            return true;\n        } else {\n            $this->fp = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->fp) {\n                return false;\n            }\n            stream_set_timeout($this->fp, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = [];\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        if ($cookies) {\n            $cookie_header = 'Cookie: ' . implode('; ', array_map(function($k, $v) { return \"$k=$v\"; }, array_keys($cookies), $cookies));\n            $headers[] = $cookie_header;\n        }\n        $headers[] = \"Host: {$this->host}\";\n        $headers[] = \"Content-Type: text/xml; charset=utf-8\";\n        $headers[] = \"Content-Length: \" . strlen($data);\n        if ($this->persistentConnection) {\n            $headers[] = \"Connection: Keep-Alive\";\n        } else {\n            $headers[] = \"Connection: Close\";\n        }\n        $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\" . implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\" . $data;\n        if ($this->use_curl) {\n            curl_setopt($this->ch, CURLOPT_HTTPHEADER, $headers);\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data);\n            return true;\n        } else {\n            fwrite($this->fp, $request);\n            return true;\n        }\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->ch);\n            $this->incoming_headers = curl_getinfo($this->ch);\n            if (curl_errno($this->ch)) {\n                return false;\n            }\n            curl_close($this->ch);\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->fp);\n            fclose($this->fp);\n            if ($this->incoming_payload === false) {\n                return false;\n            }\n            list($header, $body) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($header);\n            $this->incoming_payload = $body;\n            return $this->incoming_payload;\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->ch, $option, $value);\n        }\n    }\n\n    private function parseHeaders($header_str) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($header_str));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($name, $value) = explode(':', $line, 2);\n                $headers[trim($name)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookies = [];\n        $parts = explode(';', $cookie_str);\n        foreach ($parts as $part) {\n            $pair = explode('=', trim($part), 2);\n            if (count($pair) == 2) {\n                $cookies[urldecode($pair[0])] = urldecode($pair[1]);\n            }\n        }\n        return $cookies;\n    }\n}",
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection;\n    private $curl_handle;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options !== null) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt_array($this->curl_handle, $this->curl_options);\n            curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $response_timeout);\n            curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $connection_timeout);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = $this->buildHeaders($cookies);\n        $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\";\n        foreach ($headers as $header) {\n            $request .= \"$header\\r\\n\";\n        }\n        $request .= \"\\r\\n$data\";\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    private function buildHeaders($cookies = null) {\n        $headers = $this->outgoing_headers;\n        if (!isset($headers['Host'])) {\n            $headers['Host'] = $this->host;\n        }\n        if (!isset($headers['Content-Type'])) {\n            $headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        if (!isset($headers['Content-Length'])) {\n            $headers['Content-Length'] = strlen($this->outgoing_payload);\n        }\n        if ($cookies !== null) {\n            $headers['Cookie'] = http_build_query($cookies, '', '; ');\n        }\n        $result = [];\n        foreach ($headers as $name => $value) {\n            $result[] = \"$name: $value\";\n        }\n        return $result;\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            curl_close($this->curl_handle);\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            fclose($this->connection);\n            list($headers, $body) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($headers);\n            return $body;\n        }\n    }\n\n    private function parseHeaders($headers) {\n        $result = [];\n        $lines = explode(\"\\r\\n\", $headers);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($name, $value) = explode(':', $line, 2);\n                $result[trim($name)] = trim($value);\n            }\n        }\n        return $result;\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            $this->curl_options[$option] = $value;\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookie_parts = explode(';', $cookie_str);\n        $cookie = [];\n        foreach ($cookie_parts as $part) {\n            $pair = explode('=', trim($part), 2);\n            if (count($pair) == 2) {\n                $cookie[$pair[0]] = $pair[1];\n            }\n        }\n        return $cookie;\n    }\n}",
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection = null;\n    private $curl_handle = null;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options !== null) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt_array($this->curl_handle, $this->curl_options);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = $this->buildHeaders($cookies);\n        $request = $headers . \"\\r\\n\" . $data . \"\\r\\n\";\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $this->outgoing_headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    private function buildHeaders($cookies = null) {\n        $headers = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\";\n        $headers .= \"Host: {$this->host}\\r\\n\";\n        if ($cookies !== null) {\n            $headers .= \"Cookie: \" . implode('; ', $cookies) . \"\\r\\n\";\n        }\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers .= \"$name: $value\\r\\n\";\n        }\n        $headers .= \"Content-Length: \" . strlen($this->outgoing_payload) . \"\\r\\n\";\n        $headers .= \"Connection: \" . ($this->persistentConnection ? 'Keep-Alive' : 'Close') . \"\\r\\n\";\n        return $headers;\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            if ($this->incoming_payload === false) {\n                return false;\n            }\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            if ($this->incoming_payload === false) {\n                return false;\n            }\n            list($headers, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($headers);\n            $this->incoming_payload = $body;\n            return $this->incoming_payload;\n        }\n    }\n\n    private function parseHeaders($headers) {\n        $header_lines = explode(\"\\r\\n\", $headers);\n        $parsed_headers = [];\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($name, $value) = explode(':', $line, 2);\n                $parsed_headers[trim($name)] = trim($value);\n            }\n        }\n        return $parsed_headers;\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, $option, $value);\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookie_parts = explode(';', $cookie_str);\n        $cookie = [];\n        foreach ($cookie_parts as $part) {\n            list($name, $value) = explode('=', trim($part), 2);\n            $cookie[$name] = $value;\n        }\n        return $cookie;\n    }\n}",
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection;\n    private $curl_handle;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options !== null) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $response_timeout);\n            foreach ($this->curl_options as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = [];\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        if ($cookies !== null) {\n            $cookie_header = http_build_query($cookies, '', '; ');\n            $headers[] = \"Cookie: $cookie_header\";\n        }\n        $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\";\n        $request .= implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            curl_close($this->curl_handle);\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            fclose($this->connection);\n            list($header, $body) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($header);\n            $this->incoming_payload = $body;\n            return $this->incoming_payload;\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            $this->curl_options[$option] = $value;\n        }\n    }\n\n    private function parseHeaders($header_string) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($header_string));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($name, $value) = explode(':', $line, 2);\n                $headers[trim($name)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookies = [];\n        $pairs = explode(';', $cookie_str);\n        foreach ($pairs as $pair) {\n            list($name, $value) = explode('=', trim($pair), 2);\n            $cookies[$name] = $value;\n        }\n        return $cookies;\n    }\n}",
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection;\n    private $curl_handle;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $response_timeout);\n            foreach ($this->curl_options as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if ($this->sendRequest($data, $cookies)) {\n            return $this->getResponse();\n        }\n        return false;\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = $this->buildHeaders($cookies);\n        $request = $this->request_method . ' ' . $this->uri . ' HTTP/' . $this->protocol_version . \"\\r\\n\";\n        $request .= implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    private function buildHeaders($cookies = null) {\n        $headers = $this->outgoing_headers;\n        $headers[] = 'Host: ' . $this->host;\n        $headers[] = 'Content-Length: ' . strlen($this->outgoing_payload);\n        if ($cookies) {\n            $headers[] = 'Cookie: ' . http_build_query($cookies, '', '; ');\n        }\n        return $headers;\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            curl_close($this->curl_handle);\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            fclose($this->connection);\n            list($header, $body) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($header);\n            $this->incoming_payload = $body;\n        }\n        return $this->incoming_payload;\n    }\n\n    private function parseHeaders($header) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($header));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[trim($key)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            $this->curl_options[$option] = $value;\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookies = [];\n        $cookie_parts = explode(';', $cookie_str);\n        foreach ($cookie_parts as $part) {\n            $part = trim($part);\n            if (strpos($part, '=') !== false) {\n                list($name, $value) = explode('=', $part, 2);\n                $cookies[$name] = $value;\n            }\n        }\n        return $cookies;\n    }\n}",
      "class soap_transport_http {\n    private $url;\n    private $uri;\n    private $scheme;\n    private $host;\n    private $port;\n    private $path;\n    private $request_method = 'POST';\n    private $protocol_version = '1.0';\n    private $outgoing_headers = [];\n    private $incoming_headers = [];\n    private $outgoing_payload;\n    private $incoming_payload;\n    private $persistentConnection = false;\n    private $use_curl = false;\n    private $proxy = null;\n    private $ch = null;\n    private $fp = null;\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->use_curl = $use_curl;\n        $this->parseUrl();\n        if ($this->use_curl) {\n            $this->ch = curl_init();\n            if ($curl_options) {\n                foreach ($curl_options as $option => $value) {\n                    $this->setCurlOption($option, $value);\n                }\n            }\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            curl_setopt($this->ch, CURLOPT_URL, $this->url);\n            curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->ch, CURLOPT_TIMEOUT, $response_timeout);\n            return true;\n        } else {\n            $this->fp = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->fp) {\n                return false;\n            }\n            stream_set_timeout($this->fp, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if ($cookies) {\n            $this->setHeader('Cookie', http_build_query($cookies, '', '; '));\n        }\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    private function sendRequest($data, $cookies = null) {\n        $headers = [];\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\";\n        $request .= \"Host: {$this->host}\\r\\n\";\n        $request .= implode(\"\\r\\n\", $headers) . \"\\r\\n\";\n        $request .= \"Content-Length: \" . strlen($data) . \"\\r\\n\";\n        $request .= \"Connection: \" . ($this->persistentConnection ? 'Keep-Alive' : 'Close') . \"\\r\\n\\r\\n\";\n        $request .= $data;\n\n        if ($this->use_curl) {\n            curl_setopt($this->ch, CURLOPT_POST, true);\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->ch, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->fp, $request);\n            return true;\n        }\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->ch);\n            $this->incoming_headers = curl_getinfo($this->ch);\n            if (curl_errno($this->ch)) {\n                return false;\n            }\n        } else {\n            $this->incoming_payload = stream_get_contents($this->fp);\n            fclose($this->fp);\n            $this->parseResponseHeaders();\n        }\n        return $this->incoming_payload;\n    }\n\n    private function parseResponseHeaders() {\n        list($header_text, $this->incoming_payload) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n        $headers = explode(\"\\r\\n\", $header_text);\n        foreach ($headers as $header) {\n            if (strpos($header, ':') !== false) {\n                list($name, $value) = explode(':', $header, 2);\n                $this->incoming_headers[trim($name)] = trim($value);\n            }\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->ch, $option, $value);\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookie_parts = explode(';', $cookie_str);\n        $cookie = [];\n        foreach ($cookie_parts as $part) {\n            $part = trim($part);\n            if (strpos($part, '=') !== false) {\n                list($name, $value) = explode('=', $part, 2);\n                $cookie[$name] = $value;\n            }\n        }\n        return $cookie;\n    }\n}",
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection;\n    private $curl_handle;\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->use_curl = $use_curl;\n        $parsed_url = parse_url($url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init();\n            if ($curl_options) {\n                foreach ($curl_options as $option => $value) {\n                    $this->setCurlOption($option, $value);\n                }\n            }\n        }\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_URL, $this->url);\n            curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $response_timeout);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = [];\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        if ($cookies) {\n            $cookie_header = 'Cookie: ' . implode('; ', $cookies);\n            $headers[] = $cookie_header;\n        }\n        $request = \"{$this->request_method} {$this->uri} HTTP/{$this->protocol_version}\\r\\n\";\n        $request .= \"Host: {$this->host}\\r\\n\";\n        $request .= implode(\"\\r\\n\", $headers);\n        $request .= \"\\r\\n\\r\\n\";\n        $request .= $data;\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            fclose($this->connection);\n            list($header, $body) = explode(\"\\r\\n\\r\\n\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($header);\n            return $body;\n        }\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, $option, $value);\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookies = [];\n        $cookie_parts = explode(';', $cookie_str);\n        foreach ($cookie_parts as $part) {\n            $part = trim($part);\n            if (strpos($part, '=') !== false) {\n                list($name, $value) = explode('=', $part, 2);\n                $cookies[trim($name)] = trim($value);\n            }\n        }\n        return $cookies;\n    }\n\n    private function parseHeaders($header_str) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", $header_str);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($name, $value) = explode(':', $line, 2);\n                $headers[trim($name)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n}",
      "class soap_transport_http {\n    public $url;\n    public $uri;\n    public $scheme;\n    public $host;\n    public $port;\n    public $path;\n    public $request_method = 'POST';\n    public $protocol_version = '1.0';\n    public $outgoing_headers = [];\n    public $incoming_headers = [];\n    public $outgoing_payload;\n    public $incoming_payload;\n    public $persistentConnection = false;\n    public $use_curl = false;\n    public $proxy = null;\n    private $connection = null;\n    private $curl_handle = null;\n    private $curl_options = [];\n\n    public function __construct($url, $curl_options = null, $use_curl = false) {\n        $this->url = $url;\n        $this->parseUrl();\n        $this->use_curl = $use_curl;\n        if ($curl_options) {\n            $this->curl_options = $curl_options;\n        }\n    }\n\n    private function parseUrl() {\n        $parsed_url = parse_url($this->url);\n        $this->scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] : 'http';\n        $this->host = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $this->port = isset($parsed_url['port']) ? $parsed_url['port'] : ($this->scheme === 'https' ? 443 : 80);\n        $this->path = isset($parsed_url['path']) ? $parsed_url['path'] : '/';\n        $this->uri = isset($parsed_url['query']) ? $this->path . '?' . $parsed_url['query'] : $this->path;\n    }\n\n    public function connect($connection_timeout = 0, $response_timeout = 30) {\n        if ($this->use_curl) {\n            $this->curl_handle = curl_init($this->url);\n            curl_setopt_array($this->curl_handle, $this->curl_options);\n            return true;\n        } else {\n            $this->connection = fsockopen($this->host, $this->port, $errno, $errstr, $connection_timeout);\n            if (!$this->connection) {\n                return false;\n            }\n            stream_set_timeout($this->connection, $response_timeout);\n            return true;\n        }\n    }\n\n    public function send($data, $timeout = 0, $response_timeout = 30, $cookies = null) {\n        $this->outgoing_payload = $data;\n        if (!$this->connect($timeout, $response_timeout)) {\n            return false;\n        }\n        if (!$this->sendRequest($data, $cookies)) {\n            return false;\n        }\n        return $this->getResponse();\n    }\n\n    public function sendRequest($data, $cookies = null) {\n        $headers = $this->buildHeaders($cookies);\n        $request = implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\" . $data;\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n            return true;\n        } else {\n            fwrite($this->connection, $request);\n            return true;\n        }\n    }\n\n    private function buildHeaders($cookies) {\n        $headers = [\n            $this->request_method . ' ' . $this->uri . ' HTTP/' . $this->protocol_version,\n            'Host: ' . $this->host,\n            'Content-Type: text/xml; charset=utf-8',\n            'Content-Length: ' . strlen($this->outgoing_payload),\n        ];\n        if ($cookies) {\n            $headers[] = 'Cookie: ' . http_build_query($cookies, '', '; ');\n        }\n        foreach ($this->outgoing_headers as $name => $value) {\n            $headers[] = \"$name: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponse() {\n        if ($this->use_curl) {\n            $this->incoming_payload = curl_exec($this->curl_handle);\n            $this->incoming_headers = curl_getinfo($this->curl_handle);\n            if (curl_errno($this->curl_handle)) {\n                return false;\n            }\n            curl_close($this->curl_handle);\n            return $this->incoming_payload;\n        } else {\n            $this->incoming_payload = stream_get_contents($this->connection);\n            fclose($this->connection);\n            list($headers, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $this->incoming_payload, 2);\n            $this->incoming_headers = $this->parseHeaders($headers);\n            $this->incoming_payload = $body;\n            return $this->incoming_payload;\n        }\n    }\n\n    private function parseHeaders($headers) {\n        $header_lines = explode(\"\\r\\n\", $headers);\n        $parsed_headers = [];\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($name, $value) = explode(': ', $line, 2);\n                $parsed_headers[$name] = $value;\n            }\n        }\n        return $parsed_headers;\n    }\n\n    public function setHeader($name, $value) {\n        $this->outgoing_headers[$name] = $value;\n    }\n\n    public function setCurlOption($option, $value) {\n        if ($this->use_curl) {\n            curl_setopt($this->curl_handle, $option, $value);\n        }\n    }\n\n    public function parseCookie($cookie_str) {\n        $cookie_parts = explode(';', $cookie_str);\n        $cookie = [];\n        foreach ($cookie_parts as $part) {\n            $part = trim($part);\n            if (strpos($part, '=') !== false) {\n                list($name, $value) = explode('=', $part, 2);\n                $cookie[$name] = $value;\n            }\n        }\n        return $cookie;\n    }\n}"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a PHP function that fetches content from a remote HTTP server using low-level socket operations, with support for various HTTP request parameters and proxy configuration.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy), sends an HTTP GET request with customizable headers, reads the response, and returns the content body. It supports authentication, custom headers, timeout settings, and proxy configuration. The function can either return the content directly or assign it to a template variable.\n\nInput:\n- $params: [array] - An associative array containing the following possible keys:\n  - 'file': [string] - The URL to fetch (required)\n  - 'assign': [string] - Template variable name to assign content to (optional)\n  - 'assign_headers': [string] - Template variable name to assign response headers to (optional)\n  - 'user': [string] - Username for HTTP authentication (optional)\n  - 'pass': [string] - Password for HTTP authentication (optional)\n  - 'accept': [string] - Accept header value (optional)\n  - 'header': [string|array] - Additional HTTP headers (optional)\n  - 'proxy_host': [string] - Proxy server hostname (optional)\n  - 'proxy_port': [int] - Proxy server port (optional)\n  - 'agent': [string] - User-Agent header value (optional)\n  - 'referer': [string] - Referer header value (optional)\n  - 'timeout': [int] - Connection timeout in seconds (optional)\n- $template: [object] - Template engine object for variable assignment (optional)\n\nOutput:\n- If 'assign' parameter is provided: [void] - Assigns content to template variable\n- If 'assign' parameter is not provided: [string] - Returns the fetched content\n- On error: [void] - Triggers notice and returns nothing",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $user = empty($uri_parts['user']) ? null : $uri_parts['user'];\n            $pass = empty($uri_parts['pass']) ? null : $uri_parts['pass'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n            $proxy_host = $proxy_port = null;\n            $extra_headers = array();\n            $accept = \"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*\";\n            $agent = \"Smarty Template Engine \" . Smarty::SMARTY_VERSION;\n            $referer = \"\";\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"file\":\n                    case \"assign\":\n                    case \"assign_headers\":\n                        break;\n                    case \"user\":\n                        if (!empty($param_value)) $user = $param_value;\n                        break;\n                    case \"pass\":\n                        if (!empty($param_value)) $pass = $param_value;\n                        break;\n                    case \"accept\":\n                        if (!empty($param_value)) $accept = $param_value;\n                        break;\n                    case \"header\":\n                        if (!empty($param_value) && preg_match('![\\w\\d-]+: .+!', $param_value)) {\n                            $extra_headers[] = $param_value;\n                        }\n                        break;\n                    case \"proxy_host\":\n                        if (!empty($param_value)) $proxy_host = $param_value;\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) $proxy_port = (int)$param_value;\n                        break;\n                    case \"agent\":\n                        if (!empty($param_value)) $agent = $param_value;\n                        break;\n                    case \"referer\":\n                        if (!empty($param_value)) $referer = $param_value;\n                        break;\n                    case \"timeout\":\n                        if (!preg_match('!\\D!', $param_value)) $timeout = (int)$param_value;\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            if (!empty($host)) fputs($fp, \"Host: $host\\r\\n\");\n            if (!empty($accept)) fputs($fp, \"Accept: $accept\\r\\n\");\n            if (!empty($agent)) fputs($fp, \"User-Agent: $agent\\r\\n\");\n            if (!empty($referer)) fputs($fp, \"Referer: $referer\\r\\n\");\n            foreach ($extra_headers as $curr_header) {\n                fputs($fp, $curr_header . \"\\r\\n\");\n            }\n            if (!empty($user) && !empty($pass)) {\n                fputs($fp, \"Authorization: BASIC \" . base64_encode(\"$user:$pass\") . \"\\r\\n\");\n            }\n\n            fputs($fp, \"\\r\\n\");\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n\n            if (!empty($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], preg_split(\"!\\r\\n!\", $csplit[0]));\n            }\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "function fetch_http_content($params, $template = null) {\n    $url_parts = parse_url($params['file']);\n    $host = $url_parts['host'];\n    $port = isset($url_parts['port']) ? $url_parts['port'] : 80;\n    $path = isset($url_parts['path']) ? $url_parts['path'] : '/';\n    $query = isset($url_parts['query']) ? '?' . $url_parts['query'] : '';\n    $request_uri = $path . $query;\n\n    if (isset($params['proxy_host'])) {\n        $host = $params['proxy_host'];\n        $port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n        $request_uri = $params['file'];\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, isset($params['timeout']) ? $params['timeout'] : 30);\n    if (!$fp) {\n        trigger_error(\"HTTP fetch failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $out = \"GET $request_uri HTTP/1.1\\r\\n\";\n    $out .= \"Host: \" . $url_parts['host'] . \"\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode($params['user'] . ':' . $params['pass']);\n        $out .= \"Authorization: Basic $auth\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $out .= \"Accept: \" . $params['accept'] . \"\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $header) {\n                $out .= \"$header\\r\\n\";\n            }\n        } else {\n            $out .= \"$params[header]\\r\\n\";\n        }\n    }\n\n    if (isset($params['agent'])) {\n        $out .= \"User-Agent: \" . $params['agent'] . \"\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $out .= \"Referer: \" . $params['referer'] . \"\\r\\n\";\n    }\n\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n            if (isset($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], $headers);\n            }\n        }\n    } else {\n        return $body;\n    }\n}",
      "function fetch_http_content($params, $template = null) {\n    $url_parts = parse_url($params['file']);\n    $host = $url_parts['host'];\n    $port = isset($url_parts['port']) ? $url_parts['port'] : 80;\n    $path = isset($url_parts['path']) ? $url_parts['path'] : '/';\n    $query = isset($url_parts['query']) ? '?' . $url_parts['query'] : '';\n    $request_uri = $path . $query;\n\n    if (isset($params['proxy_host'])) {\n        $host = $params['proxy_host'];\n        $port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n        $request_uri = $params['file'];\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, isset($params['timeout']) ? $params['timeout'] : 30);\n    if (!$fp) {\n        trigger_error(\"HTTP fetch error: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $out = \"GET $request_uri HTTP/1.1\\r\\n\";\n    $out .= \"Host: \" . $url_parts['host'] . \"\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode($params['user'] . ':' . $params['pass']);\n        $out .= \"Authorization: Basic $auth\\r\\n\";\n    }\n\n    if (isset($params['agent'])) {\n        $out .= \"User-Agent: \" . $params['agent'] . \"\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $out .= \"Referer: \" . $params['referer'] . \"\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $out .= \"Accept: \" . $params['accept'] . \"\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $h) {\n                $out .= \"$h\\r\\n\";\n            }\n        } else {\n            $out .= \"$params[header]\\r\\n\";\n        }\n    }\n\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n            if (isset($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], $headers);\n            }\n        }\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = isset($params['proxy_host']) ? $params['proxy_host'] : $urlParts['host'];\n    $port = isset($params['proxy_port']) ? $params['proxy_port'] : (isset($urlParts['scheme']) && $urlParts['scheme'] === 'https' ? 443 : 80);\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $requestUrl = ($params['proxy_host'] ? $urlParts['scheme'] . '://' . $urlParts['host'] . ':' . (isset($urlParts['port']) ? $urlParts['port'] : '') . $path . $query : $path . $query);\n\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 10;\n    $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$socket) {\n        trigger_error(\"Could not connect to $host:$port ($errno: $errstr)\", E_USER_NOTICE);\n        return;\n    }\n\n    $headers = \"GET $requestUrl HTTP/1.1\\r\\n\";\n    $headers .= \"Host: \" . $urlParts['host'] . \"\\r\\n\";\n    if (isset($params['user']) && isset($params['pass'])) {\n        $headers .= \"Authorization: Basic \" . base64_encode($params['user'] . ':' . $params['pass']) . \"\\r\\n\";\n    }\n    if (isset($params['accept'])) {\n        $headers .= \"Accept: \" . $params['accept'] . \"\\r\\n\";\n    }\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $key => $value) {\n                $headers .= \"$key: $value\\r\\n\";\n            }\n        } else {\n            $headers .= $params['header'] . \"\\r\\n\";\n        }\n    }\n    if (isset($params['agent'])) {\n        $headers .= \"User-Agent: \" . $params['agent'] . \"\\r\\n\";\n    }\n    if (isset($params['referer'])) {\n        $headers .= \"Referer: \" . $params['referer'] . \"\\r\\n\";\n    }\n    $headers .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($socket, $headers);\n    $response = '';\n    while (!feof($socket)) {\n        $response .= fgets($socket, 128);\n    }\n    fclose($socket);\n\n    list($responseHeaders, $responseBody) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $responseHeaders = explode(\"\\r\\n\", $responseHeaders);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $responseBody);\n            if (isset($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], $responseHeaders);\n            }\n        }\n    } else {\n        return $responseBody;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $requestUri = $path . $query;\n\n    if (isset($params['proxy_host'])) {\n        $host = $params['proxy_host'];\n        $port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n        $requestUri = $params['file'];\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, isset($params['timeout']) ? $params['timeout'] : 30);\n    if (!$fp) {\n        trigger_error(\"Failed to connect to $host:$port ($errno: $errstr)\", E_USER_NOTICE);\n        return;\n    }\n\n    $headers = [];\n    if (isset($params['user']) && isset($params['pass'])) {\n        $headers[] = 'Authorization: Basic ' . base64_encode($params['user'] . ':' . $params['pass']);\n    }\n    if (isset($params['accept'])) {\n        $headers[] = 'Accept: ' . $params['accept'];\n    }\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            $headers = array_merge($headers, $params['header']);\n        } else {\n            $headers[] = $params['header'];\n        }\n    }\n    if (isset($params['agent'])) {\n        $headers[] = 'User-Agent: ' . $params['agent'];\n    }\n    if (isset($params['referer'])) {\n        $headers[] = 'Referer: ' . $params['referer'];\n    }\n\n    $out = \"GET $requestUri HTTP/1.1\\r\\n\";\n    $out .= \"Host: \" . $urlParts['host'] . \"\\r\\n\";\n    foreach ($headers as $header) {\n        $out .= \"$header\\r\\n\";\n    }\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $responseHeaders = [];\n    $content = '';\n    $inBody = false;\n    while (!feof($fp)) {\n        $line = fgets($fp, 128);\n        if (!$inBody) {\n            if (trim($line) === '') {\n                $inBody = true;\n            } else {\n                $responseHeaders[] = trim($line);\n            }\n        } else {\n            $content .= $line;\n        }\n    }\n    fclose($fp);\n\n    if (isset($params['assign'])) {\n        if ($template !== null) {\n            $template->assign($params['assign'], $content);\n        }\n    }\n    if (isset($params['assign_headers'])) {\n        if ($template !== null) {\n            $template->assign($params['assign_headers'], $responseHeaders);\n        }\n    }\n    if (!isset($params['assign'])) {\n        return $content;\n    }\n}",
      "function fetch_http_content($params, $template = null) {\n    $url_parts = parse_url($params['file']);\n    $host = $url_parts['host'];\n    $port = isset($url_parts['port']) ? $url_parts['port'] : 80;\n    $path = isset($url_parts['path']) ? $url_parts['path'] : '/';\n    $query = isset($url_parts['query']) ? '?' . $url_parts['query'] : '';\n    $request_uri = $path . $query;\n\n    if (isset($params['proxy_host'])) {\n        $host = $params['proxy_host'];\n        $port = isset($params['proxy_port']) ? $params['proxy_port'] : 8080;\n        $request_uri = 'http://' . $url_parts['host'] . ':' . $port . $request_uri;\n    }\n\n    $fp = fsockopen($host, $port, $errno, $errstr, isset($params['timeout']) ? $params['timeout'] : 30);\n    if (!$fp) {\n        trigger_error(\"HTTP fetch failed: $errstr ($errno)\", E_USER_NOTICE);\n        return;\n    }\n\n    $out = \"GET $request_uri HTTP/1.1\\r\\n\";\n    $out .= \"Host: \" . $url_parts['host'] . \"\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode($params['user'] . ':' . $params['pass']);\n        $out .= \"Authorization: Basic $auth\\r\\n\";\n    }\n\n    if (isset($params['agent'])) {\n        $out .= \"User-Agent: \" . $params['agent'] . \"\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $out .= \"Referer: \" . $params['referer'] . \"\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $out .= \"Accept: \" . $params['accept'] . \"\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $h) {\n                $out .= \"$h\\r\\n\";\n            }\n        } else {\n            $out .= \"$params[header]\\r\\n\";\n        }\n    }\n\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n        }\n    }\n\n    if (isset($params['assign_headers'])) {\n        if ($template) {\n            $template->assign($params['assign_headers'], $headers);\n        }\n    }\n\n    if (!isset($params['assign'])) {\n        return $body;\n    }\n}"
    ],
    "unmatched_results": [
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$host}\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode(\"{$params['user']}:{$params['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $request .= \"Accept: {$params['accept']}\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $header) {\n                $request .= \"{$header}\\r\\n\";\n            }\n        } else {\n            $request .= \"{$params['header']}\\r\\n\";\n        }\n    }\n\n    if (isset($params['agent'])) {\n        $request .= \"User-Agent: {$params['agent']}\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $request .= \"Referer: {$params['referer']}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $socket = fsockopen($params['proxy_host'], $params['proxy_port'], $errno, $errstr, $timeout);\n    } else {\n        $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n    }\n\n    if (!$socket) {\n        trigger_error(\"Could not connect to server: {$errstr} ({$errno})\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($socket, $request);\n\n    $response = '';\n    while (!feof($socket)) {\n        $response .= fgets($socket, 4096);\n    }\n\n    fclose($socket);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n            if (isset($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], $headers);\n            }\n        }\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$host}\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode(\"{$params['user']}:{$params['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $request .= \"Accept: {$params['accept']}\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $header) {\n                $request .= \"{$header}\\r\\n\";\n            }\n        } else {\n            $request .= \"{$params['header']}\\r\\n\";\n        }\n    }\n\n    if (isset($params['agent'])) {\n        $request .= \"User-Agent: {$params['agent']}\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $request .= \"Referer: {$params['referer']}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $host = $params['proxy_host'];\n        $port = $params['proxy_port'];\n    }\n\n    $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$socket) {\n        trigger_error(\"Could not connect to {$host}:{$port}. Error: {$errno} {$errstr}\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($socket, $request);\n    $response = '';\n    while (!feof($socket)) {\n        $response .= fgets($socket, 4096);\n    }\n    fclose($socket);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n            if (isset($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], $headers);\n            }\n        }\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$host}\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode(\"{$params['user']}:{$params['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $request .= \"Accept: {$params['accept']}\\r\\n\";\n    }\n\n    if (isset($params['agent'])) {\n        $request .= \"User-Agent: {$params['agent']}\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $request .= \"Referer: {$params['referer']}\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $header) {\n                $request .= \"{$header}\\r\\n\";\n            }\n        } else {\n            $request .= \"{$params['header']}\\r\\n\";\n        }\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $socket = fsockopen($params['proxy_host'], $params['proxy_port'], $errno, $errstr, $timeout);\n    } else {\n        $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n    }\n\n    if (!$socket) {\n        trigger_error(\"Could not connect to server: {$errstr} ({$errno})\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($socket, $request);\n\n    $response = '';\n    while (!feof($socket)) {\n        $response .= fgets($socket, 128);\n    }\n\n    fclose($socket);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n            if (isset($params['assign_headers'])) {\n                $template->assign($params['assign_headers'], $headers);\n            }\n        }\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$host}\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode(\"{$params['user']}:{$params['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $request .= \"Accept: {$params['accept']}\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $header) {\n                $request .= \"{$header}\\r\\n\";\n            }\n        } else {\n            $request .= \"{$params['header']}\\r\\n\";\n        }\n    }\n\n    if (isset($params['agent'])) {\n        $request .= \"User-Agent: {$params['agent']}\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $request .= \"Referer: {$params['referer']}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $socket = fsockopen($params['proxy_host'], $params['proxy_port'], $errno, $errstr, $timeout);\n    } else {\n        $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n    }\n\n    if (!$socket) {\n        trigger_error(\"Could not connect to server: {$errstr} ({$errno})\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($socket, $request);\n    $response = '';\n    while (!feof($socket)) {\n        $response .= fgets($socket, 4096);\n    }\n    fclose($socket);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template) {\n            $template->assign($params['assign'], $body);\n        }\n    }\n\n    if (isset($params['assign_headers'])) {\n        if ($template) {\n            $template->assign($params['assign_headers'], $headers);\n        }\n    }\n\n    if (!isset($params['assign'])) {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$host}\\r\\n\";\n\n    if (isset($params['user']) && isset($params['pass'])) {\n        $auth = base64_encode(\"{$params['user']}:{$params['pass']}\");\n        $request .= \"Authorization: Basic {$auth}\\r\\n\";\n    }\n\n    if (isset($params['accept'])) {\n        $request .= \"Accept: {$params['accept']}\\r\\n\";\n    }\n\n    if (isset($params['agent'])) {\n        $request .= \"User-Agent: {$params['agent']}\\r\\n\";\n    }\n\n    if (isset($params['referer'])) {\n        $request .= \"Referer: {$params['referer']}\\r\\n\";\n    }\n\n    if (isset($params['header'])) {\n        if (is_array($params['header'])) {\n            foreach ($params['header'] as $key => $value) {\n                $request .= \"{$key}: {$value}\\r\\n\";\n            }\n        } else {\n            $request .= \"{$params['header']}\\r\\n\";\n        }\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $socket = fsockopen($params['proxy_host'], $params['proxy_port'], $errno, $errstr, $timeout);\n    } else {\n        $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n    }\n\n    if (!$socket) {\n        trigger_error(\"Could not connect to server: {$errstr} ({$errno})\", E_USER_NOTICE);\n        return;\n    }\n\n    fwrite($socket, $request);\n\n    $response = '';\n    while (!feof($socket)) {\n        $response .= fgets($socket, 4096);\n    }\n\n    fclose($socket);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        if ($template !== null) {\n            $template->assign($params['assign'], $body);\n        }\n    }\n\n    if (isset($params['assign_headers'])) {\n        if ($template !== null) {\n            $template->assign($params['assign_headers'], $headers);\n        }\n    }\n\n    if (!isset($params['assign'])) {\n        return $body;\n    }\n}"
    ],
    "match_count": 5,
    "pass@3": 0.9166666666666666,
    "pass@5": 0.996031746031746
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using fsockopen for making HTTP requests when CURL extension is not available. The class should support both GET and POST methods, handle headers, cookies, timeouts, and allow configuration of various connection parameters.\n\nClass Description: The Http class provides low-level HTTP client functionality using PHP's fsockopen function. It's designed as a fallback when CURL isn't available, offering stable performance for making HTTP requests. The class contains one static method that handles the complete HTTP request lifecycle from connection establishment to response processing.\n\nMethods:\n\nMethod1: fsockopenDownload(string $url, array $conf = []) -> mixed - Performs an HTTP request using fsockopen\n  Input Parameters:\n    - $url: string - The target URL to request\n    - $conf: array - Configuration options including:\n      - limit: int - Maximum bytes to read (0 for unlimited)\n      - post: mixed - POST data (array or string)\n      - cookie: string - Cookie header content\n      - ip: string - Force specific IP address\n      - timeout: int - Connection timeout in seconds\n      - block: bool - Whether to use blocking mode\n  Return Type: mixed - Returns the HTTP response body as string, or empty string on failure\n\nThe method follows these steps:\n1. Parses the URL and merges configuration with defaults\n2. Prepares appropriate HTTP request headers (GET/POST)\n3. Establishes TCP connection using fsockopen\n4. Sends the HTTP request\n5. Reads and processes the response\n6. Closes the connection and returns the response body",
    "Canonical_solution": "namespace Org\\Net;\n\nclass Http\n{\n    /**\n     * 使用 fsockopen 通过 HTTP 协议直接访问(采集)远程文件\n     * 如果主机或服务器没有开启 CURL 扩展可考虑使用\n     * fsockopen 比 CURL 稍慢,但性能稳定\n     * @static\n     * @access public\n     * @param string $url 远程URL\n     * @param array $conf 其他配置信息\n     *        int   limit 分段读取字符个数\n     *        string post  post的内容,字符串或数组,key=value&形式\n     *        string cookie 携带cookie访问,该参数是cookie内容\n     *        string ip    如果该参数传入,$url将不被使用,ip访问优先\n     *        int    timeout 采集超时时间\n     *        bool   block 是否阻塞访问,默认为true\n     * @return mixed\n     */\n    static public function fsockopenDownload($url, $conf = array())\n    {\n        $return = '';\n        if(!is_array($conf)) return $return;\n\n        $matches = parse_url($url);\n        !isset($matches['host'])    && $matches['host']    = '';\n        !isset($matches['path'])    && $matches['path']    = '';\n        !isset($matches['query'])   && $matches['query']   = '';\n        !isset($matches['port'])     && $matches['port']    = '';\n        $host = $matches['host'];\n        $path = $matches['path'] ? $matches['path'].($matches['query'] ? '?'.$matches['query'] : '') : '/';\n        $port = !empty($matches['port']) ? $matches['port'] : 80;\n\n        $conf_arr = array(\n            'limit'     =>  0,\n            'post'      =>  '',\n            'cookie'    =>  '',\n            'ip'        =>  '',\n            'timeout'   =>  15,\n            'block'     =>  TRUE,\n            );\n\n        foreach (array_merge($conf_arr, $conf) as $k=>$v) ${$k} = $v;\n\n        if($post) {\n            if(is_array($post))\n            {\n                $post = http_build_query($post);\n            }\n            $out  = \"POST $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= 'Content-Length: '.strlen($post).\"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cache-Control: no-cache\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out  = \"GET $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n        }\n        $fp = @fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if(!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            stream_set_timeout($fp, $timeout);\n            @fwrite($fp, $out);\n            $status = stream_get_meta_data($fp);\n            if(!$status['timed_out']) {\n                while (!feof($fp)) {\n                    if(($header = @fgets($fp)) && ($header == \"\\r\\n\" ||  $header == \"\\n\")) {\n                        break;\n                    }\n                }\n\n                $stop = false;\n                while(!feof($fp) && !$stop) {\n                    $data = fread($fp, ($limit == 0 || $limit > 8192 ? 8192 : $limit));\n                    $return .= $data;\n                    if($limit) {\n                        $limit -= strlen($data);\n                        $stop = $limit <= 0;\n                    }\n                }\n            }\n            @fclose($fp);\n            return $return;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $headers = [\n            \"$method $path$query HTTP/1.1\",\n            \"Host: \" . $parsedUrl['host'],\n            \"Connection: Close\"\n        ];\n\n        if ($conf['cookie']) {\n            $headers[] = \"Cookie: \" . $conf['cookie'];\n        }\n\n        if ($conf['post']) {\n            if (is_array($conf['post'])) {\n                $conf['post'] = http_build_query($conf['post']);\n            }\n            $headers[] = \"Content-Type: application/x-www-form-urlencoded\";\n            $headers[] = \"Content-Length: \" . strlen($conf['post']);\n        }\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        fwrite($fp, implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\");\n        if ($conf['post']) {\n            fwrite($fp, $conf['post']);\n        }\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 1024);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n\n        fclose($fp);\n\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($parsedUrl['scheme'] === 'https' ? 443 : 80);\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $headers = [\n            \"$method $path$query HTTP/1.1\",\n            \"Host: \" . $parsedUrl['host'],\n            \"Connection: Close\"\n        ];\n\n        if ($conf['cookie']) {\n            $headers[] = \"Cookie: \" . $conf['cookie'];\n        }\n\n        if ($conf['post']) {\n            $postFields = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $headers[] = \"Content-Type: application/x-www-form-urlencoded\";\n            $headers[] = \"Content-Length: \" . strlen($postFields);\n        }\n\n        $headers = implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\";\n\n        $fp = fsockopen(($parsedUrl['scheme'] === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        fwrite($fp, $headers);\n        if ($conf['post']) {\n            fwrite($fp, $postFields);\n        }\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 8192);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $body = isset($parts[1]) ? $parts[1] : '';\n\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n        $method = $conf['post'] === null ? 'GET' : 'POST';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $parsedUrl['host'] . \"\\r\\n\";\n        if ($conf['cookie']) {\n            $out .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        }\n        if ($method === 'POST') {\n            $postData = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        if ($method === 'POST') {\n            $out .= $postData;\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] > 0 && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return isset($parts[1]) ? $parts[1] : '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n        $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $parsedUrl['host'] . \"\\r\\n\";\n        if ($conf['cookie']) {\n            $out .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        }\n        if ($conf['post']) {\n            $postData = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n            $out .= \"\\r\\n\";\n            $out .= $postData;\n        } else {\n            $out .= \"\\r\\n\";\n        }\n\n        $errno = 0;\n        $errstr = '';\n        $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $headers = [\n            \"$method $path$query HTTP/1.1\",\n            \"Host: $host\",\n            \"Connection: close\"\n        ];\n\n        if ($conf['cookie']) {\n            $headers[] = \"Cookie: {$conf['cookie']}\";\n        }\n\n        if ($conf['post']) {\n            $postFields = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $headers[] = \"Content-Type: application/x-www-form-urlencoded\";\n            $headers[] = \"Content-Length: \" . strlen($postFields);\n        }\n\n        $headers = implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\";\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        fwrite($fp, $headers);\n        if ($conf['post']) {\n            fwrite($fp, $postFields);\n        }\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 4096);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n\n        fclose($fp);\n\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $parsedUrl['host'] . \"\\r\\n\";\n\n        if ($conf['cookie']) {\n            $out .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        }\n\n        if ($conf['post']) {\n            $postData = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n            $out .= \"\\r\\n\";\n            $out .= $postData;\n        } else {\n            $out .= \"\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $body = isset($parts[1]) ? $parts[1] : '';\n\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $parsedUrl['host'] . \"\\r\\n\";\n        if ($conf['cookie']) {\n            $out .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        }\n        if ($conf['post']) {\n            $postData = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        if ($conf['post']) {\n            $out .= $postData;\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (count($parts) === 2) {\n            return $parts[1];\n        }\n\n        return '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload(string $url, array $conf = []): mixed {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($parsedUrl['scheme'] === 'https' ? 443 : 80);\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        $method = $conf['post'] !== null ? 'POST' : 'GET';\n        $request = \"$method $path$query HTTP/1.1\\r\\n\";\n        $request .= \"Host: $host\\r\\n\";\n        if ($conf['cookie']) {\n            $request .= \"Cookie: $conf[cookie]\\r\\n\";\n        }\n        if ($conf['post']) {\n            $postFields = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $request .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $request .= \"Content-Length: \" . strlen($postFields) . \"\\r\\n\";\n        }\n        $request .= \"Connection: Close\\r\\n\\r\\n\";\n        if ($conf['post']) {\n            $request .= $postFields;\n        }\n\n        $ip = $conf['ip'] ?: $host;\n        $fp = @fsockopen(($conf['ip'] ? '' : ($parsedUrl['scheme'] === 'https' ? 'ssl://' : '')) . $ip, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n        fwrite($fp, $request);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 1024);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $body = count($parts) > 1 ? $parts[1] : '';\n        return $body;\n    }\n}",
      "<?php\nclass Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: \" . $parsedUrl['host'] . \"\\r\\n\";\n\n        if ($conf['cookie']) {\n            $out .= \"Cookie: \" . $conf['cookie'] . \"\\r\\n\";\n        }\n\n        if ($conf['post']) {\n            $postData = is_array($conf['post']) ? http_build_query($conf['post']) : $conf['post'];\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n            $out .= \"\\r\\n\";\n            $out .= $postData;\n        } else {\n            $out .= \"\\r\\n\";\n        }\n\n        $flags = $conf['block'] ? STREAM_CLIENT_CONNECT : (STREAM_CLIENT_CONNECT | STREAM_CLIENT_ASYNC_CONNECT);\n        $errno = 0;\n        $errstr = '';\n        $fp = fsockopen($host, $port, $errno, $errstr, $conf['timeout'], $flags);\n\n        if (!$fp) {\n            return '';\n        }\n\n        fwrite($fp, $out);\n        stream_set_timeout($fp, $conf['timeout']);\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 8192);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n\n        fclose($fp);\n\n        // Extract the body of the response\n        $parts = preg_split(\"/\\r?\\n\\r?\\n/\", $response, 2);\n        $body = isset($parts[1]) ? $parts[1] : '';\n\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = []) {\n        $defaults = [\n            'limit' => 0,\n            'post' => null,\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 10,\n            'block' => true\n        ];\n        $conf = array_merge($defaults, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $method = $conf['post'] ? 'POST' : 'GET';\n        $headers = [\n            \"$method $path$query HTTP/1.1\",\n            \"Host: $host\",\n            \"Connection: Close\"\n        ];\n\n        if ($conf['cookie']) {\n            $headers[] = \"Cookie: {$conf['cookie']}\";\n        }\n\n        if ($conf['post']) {\n            if (is_array($conf['post'])) {\n                $conf['post'] = http_build_query($conf['post']);\n            }\n            $headers[] = \"Content-Type: application/x-www-form-urlencoded\";\n            $headers[] = \"Content-Length: \" . strlen($conf['post']);\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        fwrite($fp, implode(\"\\r\\n\", $headers) . \"\\r\\n\\r\\n\");\n        if ($conf['post']) {\n            fwrite($fp, $conf['post']);\n        }\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 4096);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n\n        fclose($fp);\n\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return $body;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create a PHP function that fetches content from a specified HTTP URL using fsockopen for low-level HTTP communication, with support for proxy configuration and timeout settings.\n\nFunction Description: The function establishes a TCP connection to an HTTP server (or proxy server if configured), sends an HTTP GET request, reads the response, and returns the response body. It handles URL parsing, connection establishment, request sending, response reading, and connection closing. The function can either return the fetched content directly or assign it to a template variable.\n\nInput:\n- $params: An associative array containing:\n  - 'file': (string, required) The HTTP URL to fetch\n  - 'proxy_host': (string, optional) Proxy server hostname\n  - 'proxy_port': (integer, optional) Proxy server port\n  - 'timeout': (integer, optional) Connection timeout in seconds (default: 30)\n  - 'assign': (string, optional) Template variable name to assign the content to\n- $template: (object) The template object for assigning content when 'assign' parameter is used\n\nOutput:\n- Returns the fetched content as a string if 'assign' parameter is not provided\n- Returns nothing (void) if 'assign' parameter is provided (content is assigned to template instead)",
    "Canonical_solution": "function smarty_function_fetch($params, $template)\n{\n    if (empty($params['file'])) {\n        trigger_error(\"[plugin] fetch parameter 'file' cannot be empty\", E_USER_NOTICE);\n        return;\n    }\n\n    $content = '';\n    if (preg_match('!^http://!i', $params['file'])) {\n        if ($uri_parts = parse_url($params['file'])) {\n            $host = $server_name = $uri_parts['host'];\n            $timeout = 30;\n            $port = empty($uri_parts['port']) ? 80 : $uri_parts['port'];\n            $uri = !empty($uri_parts['path']) ? $uri_parts['path'] : '/';\n            $uri .= !empty($uri_parts['query']) ? '?' . $uri_parts['query'] : '';\n            $_is_proxy = false;\n\n            foreach ($params as $param_key => $param_value) {\n                switch ($param_key) {\n                    case \"proxy_host\":\n                        if (!empty($param_value)) {\n                            $proxy_host = $param_value;\n                        }\n                        break;\n                    case \"proxy_port\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $proxy_port = (int) $param_value;\n                        }\n                        break;\n                    case \"timeout\":\n                        if (!preg_match('!\\D!', $param_value)) {\n                            $timeout = (int) $param_value;\n                        }\n                        break;\n                }\n            }\n\n            if (!empty($proxy_host) && !empty($proxy_port)) {\n                $_is_proxy = true;\n                $fp = fsockopen($proxy_host, $proxy_port, $errno, $errstr, $timeout);\n            } else {\n                $fp = fsockopen($server_name, $port, $errno, $errstr, $timeout);\n            }\n\n            if (!$fp) {\n                trigger_error(\"[plugin] unable to fetch: $errstr ($errno)\", E_USER_NOTICE);\n                return;\n            }\n\n            if ($_is_proxy) {\n                fputs($fp, 'GET ' . $params['file'] . \" HTTP/1.0\\r\\n\");\n            } else {\n                fputs($fp, \"GET $uri HTTP/1.0\\r\\n\");\n            }\n            fputs($fp, \"Host: $host\\r\\n\");\n            fputs($fp, \"\\r\\n\");\n\n            while (!feof($fp)) {\n                $content .= fgets($fp, 4096);\n            }\n            fclose($fp);\n\n            $csplit = preg_split(\"!\\r\\n\\r\\n!\", $content, 2);\n            $content = $csplit[1];\n        }\n    }\n\n    if (!empty($params['assign'])) {\n        $template->assign($params['assign'], $content);\n    } else {\n        return $content;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "function fetchUrlContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $request = \"GET http://$host$path$query HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET http://$host$path$query HTTP/1.1\\r\\n\";\n    $out .= \"Host: $host\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $request = \"GET http://$host$path$query HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->assign($params['assign'], $body);\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET http://$host$path$query HTTP/1.1\\r\\n\";\n    $out .= \"Host: $host\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $url = parse_url($params['file']);\n    $host = isset($params['proxy_host']) ? $params['proxy_host'] : $url['host'];\n    $port = isset($params['proxy_port']) ? $params['proxy_port'] : (isset($url['scheme']) && $url['scheme'] === 'https' ? 443 : 80);\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n    $path = isset($url['path']) ? $url['path'] : '/';\n    $query = isset($url['query']) ? '?' . $url['query'] : '';\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $request = \"GET \" . (isset($params['proxy_host']) ? $url['scheme'] . '://' . $url['host'] . $path . $query : $path . $query) . \" HTTP/1.1\\r\\n\";\n    $request .= \"Host: \" . $url['host'] . \"\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $proxyHost = $params['proxy_host'];\n        $proxyPort = $params['proxy_port'];\n    } else {\n        $proxyHost = $host;\n        $proxyPort = $port;\n    }\n\n    $fp = fsockopen($proxyHost, $proxyPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    $request = \"GET http://$host$path$query HTTP/1.1\\r\\n\";\n    $request .= \"Host: $host\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}"
    ],
    "unmatched_results": [
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $host = $params['proxy_host'];\n        $port = $params['proxy_port'];\n        $request = \"GET {$params['file']} HTTP/1.1\\r\\n\";\n    } else {\n        $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    }\n\n    $request .= \"Host: {$urlParts['host']}\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $connectionHost = $params['proxy_host'];\n        $connectionPort = $params['proxy_port'];\n        $request = \"GET {$params['file']} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n    } else {\n        $connectionHost = $host;\n        $connectionPort = $port;\n        $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $fp = fsockopen($connectionHost, $connectionPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $host = $params['proxy_host'];\n        $port = $params['proxy_port'];\n        $request = \"GET {$params['file']} HTTP/1.1\\r\\n\";\n    } else {\n        $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    }\n\n    $request .= \"Host: {$urlParts['host']}\\r\\n\";\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}",
      "function fetchContent($params, $template = null) {\n    $urlParts = parse_url($params['file']);\n    $host = $urlParts['host'];\n    $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n    $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n    $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n    $timeout = isset($params['timeout']) ? $params['timeout'] : 30;\n\n    if (isset($params['proxy_host']) && isset($params['proxy_port'])) {\n        $connectionHost = $params['proxy_host'];\n        $connectionPort = $params['proxy_port'];\n        $request = \"GET {$params['file']} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n    } else {\n        $connectionHost = $host;\n        $connectionPort = $port;\n        $request = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $request .= \"Host: {$host}\\r\\n\";\n    }\n\n    $request .= \"Connection: Close\\r\\n\\r\\n\";\n\n    $fp = fsockopen($connectionHost, $connectionPort, $errno, $errstr, $timeout);\n    if (!$fp) {\n        return false;\n    }\n\n    fwrite($fp, $request);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 4096);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n    if (isset($params['assign'])) {\n        $template->{$params['assign']} = $body;\n    } else {\n        return $body;\n    }\n}"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a PHP function that retrieves content from a specified URL using low-level socket operations (fsockopen) rather than higher-level HTTP client libraries. The function should handle both HTTP and HTTPS protocols, manage connection timeouts, and properly process the HTTP response.\n\nFunction Description: The function establishes a TCP connection to the specified HTTP server, sends a GET request, reads the response (separating headers from body), and returns the content. It handles both HTTP and HTTPS connections with appropriate ports, includes basic error handling, and follows proper HTTP protocol for request/response cycles.\n\nInput:\n- $url (string): The URL to fetch content from (e.g., \"http://example.com\" or \"https://example.com\")\n- &$data (string, passed by reference): Variable that will contain the response body content\n\nOutput:\n- bool: Returns true if the request was successful and content was retrieved, false if any error occurred (connection failure, empty response, etc.)\n- The response body content is stored in the $data parameter passed by reference\n\nNote: The function does not return the content directly but instead modifies the $data parameter. This follows the pattern seen in the reference code where output is handled via parameter reference rather than return value.",
    "Canonical_solution": "function file_get_contents_by_socket($url, &$data)\n{\n    $timeout = 1;\n    $p = parse_url($url);\n    $file = $p['path'];\n    if ($p['scheme'] == 'https') {\n        $prefix = 'ssl://';\n        $port = ($p['port'] ? $p['port'] : 443);\n    } else {\n        $prefix = '';\n        $port = ($p['port'] ? $p['port'] : 80);\n    }\n    if ($p['query']) {\n        $file .= '?' . $p['query'];\n    }\n    if (!($fh = @fsockopen($prefix . $p['host'], $port, $errno, $errstr, $timeout))) {\n        return false;\n    }\n\n    $getstring =\n        \"GET \" . $file . \" HTTP/1.0 \\r\\n\" .\n        \"Host: \" . $p['host'] . \" \\r\\n\" .\n        \"Connection: close\\r\\n\\r\\n\";\n    fwrite($fh, $getstring);\n    $s = fgets($fh, 1024);\n    if (!$s) {\n        return false;\n    }\n    $httpheader .= $s;\n    while (!feof($fh)) {\n        $s = fgets($fh, 1024);\n        if ($s == \"\\r\\n\") {\n            break;\n        }\n    }\n    $data = '';\n    while (!feof($fh)) {\n        $data .= fgets($fh, 1024);\n    }\n    fclose($fh);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "<?php\nfunction fetchUrlContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($data);\n}",
      "<?php\nfunction fetchContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($data);\n}\n?>",
      "function fetchContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $errno = 0;\n    $errstr = '';\n    $timeout = 10;\n\n    if ($scheme === 'https') {\n        $fp = fsockopen('ssl://' . $host, $port, $errno, $errstr, $timeout);\n    } else {\n        $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n    }\n\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($data);\n}",
      "function fetchContent($url, &$data) {\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($data);\n}",
      "<?php\nfunction fetchContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $statusLine = substr($headers, 0, strpos($headers, \"\\r\\n\"));\n    preg_match('/HTTP\\/\\d+\\.\\d+ (\\d+)/', $statusLine, $matches);\n    $statusCode = isset($matches[1]) ? (int)$matches[1] : 0;\n\n    if ($statusCode >= 200 && $statusCode < 300) {\n        $data = $body;\n        return true;\n    }\n\n    return false;\n}",
      "function fetchContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $statusLine = substr($headers, 0, strpos($headers, \"\\r\\n\"));\n    if (preg_match('/HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $statusLine, $matches)) {\n        $statusCode = (int)$matches[1];\n        if ($statusCode >= 200 && $statusCode < 300) {\n            $data = $body;\n            return true;\n        }\n    }\n\n    return false;\n}",
      "function fetchContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if ($scheme !== 'http' && $scheme !== 'https') {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($data);\n}",
      "function fetchContent($url, &$data) {\n    $data = '';\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($data);\n}",
      "function fetchUrlContent($url, &$data) {\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if ($scheme !== 'http' && $scheme !== 'https') {\n        return false;\n    }\n\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 10);\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($body);\n}",
      "<?php\nfunction fetchUrlContent($url, &$data) {\n    $parsedUrl = parse_url($url);\n    $scheme = isset($parsedUrl['scheme']) ? $parsedUrl['scheme'] : 'http';\n    $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n    $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : ($scheme === 'https' ? 443 : 80);\n    $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n    $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n    if (!$host) {\n        return false;\n    }\n\n    $timeout = 10;\n    $fp = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, $timeout);\n\n    if (!$fp) {\n        return false;\n    }\n\n    $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n    $out .= \"Host: {$host}\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n    fwrite($fp, $out);\n    $response = '';\n    while (!feof($fp)) {\n        $response .= fgets($fp, 128);\n    }\n    fclose($fp);\n\n    list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n    $data = $body;\n\n    return !empty($body);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a PHP class that handles file uploads to a specified host using HTTP PUT requests with Guzzle HTTP client, including CRC32 checksum verification.\n\nClass Description: ImageX is a class that extends V4Curl and provides functionality to upload files to a remote server. It handles file validation, CRC32 checksum generation, and HTTP communication using Guzzle's HTTP client.\n\nAttributes: (No explicit attributes in this class - it inherits from V4Curl)\n\nMethods:\nupload: [upload](string $uploadHost, array $storeInfo, string $filePath) -> int - Uploads a file to the specified host using HTTP PUT request. Validates file existence, calculates CRC32 checksum, and sends the file with appropriate headers. Returns 0 on success, -1 if file doesn't exist, or -2 if upload fails.\n\nParameters:\n- $uploadHost: string - The host address to upload to\n- $storeInfo: array - Contains 'StoreUri' for upload endpoint and 'Auth' for authorization\n- $filePath: string - Local path to the file to be uploaded\n\nReturn:\n- int: 0 for success, -1 for file not found, -2 for upload failure",
    "Canonical_solution": "use Volc\\Base\\V4Curl;\nuse GuzzleHttp\\Client;\n\nclass ImageX extends V4Curl\n{\n    public function upload(string $uploadHost, $storeInfo, string $filePath)\n    {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n        $content = file_get_contents($filePath);\n        $crc32 = sprintf(\"%08x\", crc32($content));\n\n        $body = fopen($filePath, \"r\");\n        $tosClient = new Client([\n            'base_uri' => \"https://\" . $uploadHost,\n            'timeout' => 5.0,\n        ]);\n\n        $response = $tosClient->request('PUT', $storeInfo[\"StoreUri\"], [\"body\" => $body, \"headers\" => ['Authorization' => $storeInfo[\"Auth\"], 'Content-CRC32' => $crc32]]);\n        $uploadResponse = json_decode((string) $response->getBody(), true);\n        if (!isset($uploadResponse[\"success\"]) || $uploadResponse[\"success\"] != 0) {\n            return -2;\n        }\n        return 0;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $crc32Checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Content-MD5' => base64_encode(pack('N', $crc32Checksum))\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            } else {\n                return -2;\n            }\n        } catch (\\Exception $e) {\n            return -2;\n        }\n    }\n}",
      "class ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => mime_content_type($filePath),\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "<?php\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\Exception $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "<?php\n\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            } else {\n                return -2;\n            }\n        } catch (\\Exception $e) {\n            return -2;\n        }\n    }\n}",
      "class ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\Exception $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "class ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "<?php\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\Exception $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "<?php\n\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "<?php\n\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            }\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            // Handle exception\n        }\n\n        return -2;\n    }\n}",
      "<?php\n\nclass ImageX extends V4Curl {\n    public function upload(string $uploadHost, array $storeInfo, string $filePath): int {\n        if (!file_exists($filePath)) {\n            return -1;\n        }\n\n        $fileContent = file_get_contents($filePath);\n        $checksum = crc32($fileContent);\n\n        $client = new \\GuzzleHttp\\Client();\n        try {\n            $response = $client->request('PUT', $uploadHost . $storeInfo['StoreUri'], [\n                'headers' => [\n                    'Authorization' => $storeInfo['Auth'],\n                    'Content-Type' => 'application/octet-stream',\n                    'Checksum' => $checksum\n                ],\n                'body' => $fileContent\n            ]);\n\n            if ($response->getStatusCode() == 200) {\n                return 0;\n            } else {\n                return -2;\n            }\n        } catch (\\Exception $e) {\n            return -2;\n        }\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Implement a PHP class that provides HTTP client functionality using fsockopen for making HTTP requests when cURL is not available. The class should support both GET and POST requests with configurable options like timeout, cookies, and blocking mode.\n\nClass Description: The Http class provides a static method for making HTTP requests using fsockopen. It's designed as a fallback when cURL isn't available, offering stable performance with configurable options for different HTTP request scenarios.\n\nMethods:\n\nMethod1: fsockopenDownload(string $url, array $conf = array()) -> mixed - Makes an HTTP request using fsockopen\n  Input:\n    - $url: string - The target URL to request\n    - $conf: array - Configuration options including:\n      - limit: int - Number of characters to read in segments (0 for unlimited)\n      - post: string|array - POST content (either as string or array for form data)\n      - cookie: string - Cookie content to send with request\n      - ip: string - IP address to use instead of resolving hostname\n      - timeout: int - Connection timeout in seconds (default: 15)\n      - block: bool - Whether to use blocking mode (default: true)\n  Output:\n    - Returns string containing the HTTP response body, or empty string on failure",
    "Canonical_solution": "namespace Org\\Net;\n\nclass Http\n{\n    /**\n     * 使用 fsockopen 通过 HTTP 协议直接访问(采集)远程文件\n     * 如果主机或服务器没有开启 CURL 扩展可考虑使用\n     * fsockopen 比 CURL 稍慢,但性能稳定\n     * @static\n     * @access public\n     * @param string $url 远程URL\n     * @param array $conf 其他配置信息\n     *        int   limit 分段读取字符个数\n     *        string post  post的内容,字符串或数组,key=value&形式\n     *        string cookie 携带cookie访问,该参数是cookie内容\n     *        string ip    如果该参数传入,$url将不被使用,ip访问优先\n     *        int    timeout 采集超时时间\n     *        bool   block 是否阻塞访问,默认为true\n     * @return mixed\n     */\n    public static function fsockopenDownload($url, $conf = array())\n    {\n        $return = '';\n        if (!is_array($conf)) {\n            return $return;\n        }\n\n        $matches                                       = parse_url($url);\n        !isset($matches['host']) && $matches['host']   = '';\n        !isset($matches['path']) && $matches['path']   = '';\n        !isset($matches['query']) && $matches['query'] = '';\n        !isset($matches['port']) && $matches['port']   = '';\n        $host                                          = $matches['host'];\n        $path                                          = $matches['path'] ? $matches['path'] . ($matches['query'] ? '?' . $matches['query'] : '') : '/';\n        $port                                          = !empty($matches['port']) ? $matches['port'] : 80;\n\n        $conf_arr = array(\n            'limit'   => 0,\n            'post'    => '',\n            'cookie'  => '',\n            'ip'      => '',\n            'timeout' => 15,\n            'block'   => true,\n        );\n\n        foreach (array_merge($conf_arr, $conf) as $k => $v) {\n            ${$k} = $v;\n        }\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= 'Content-Length: ' . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cache-Control: no-cache\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out = \"GET $path HTTP/1.0\\r\\n\";\n            $out .= \"Accept: */*\\r\\n\";\n            $out .= \"Accept-Language: zh-cn\\r\\n\";\n            $out .= \"User-Agent: $_SERVER[HTTP_USER_AGENT]\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\";\n            $out .= \"Cookie: $cookie\\r\\n\\r\\n\";\n        }\n        $fp = @fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            stream_set_timeout($fp, $timeout);\n            @fwrite($fp, $out);\n            $status = stream_get_meta_data($fp);\n            if (!$status['timed_out']) {\n                while (!feof($fp)) {\n                    if (($header = @fgets($fp)) && (\"\\r\\n\" == $header || \"\\n\" == $header)) {\n                        break;\n                    }\n                }\n\n                $stop = false;\n                while (!feof($fp) && !$stop) {\n                    $data = fread($fp, (0 == $limit || $limit > 8192 ? 8192 : $limit));\n                    $return .= $data;\n                    if ($limit) {\n                        $limit -= strlen($data);\n                        $stop = $limit <= 0;\n                    }\n                }\n            }\n            @fclose($fp);\n            return $return;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : '';\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n\n        if ($cookie) {\n            $out .= \"Cookie: {$cookie}\\r\\n\";\n        }\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, $limit ? $limit : 128);\n        }\n        fclose($fp);\n\n        $pos = strpos($response, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return '';\n        }\n\n        return substr($response, $pos + 4);\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : '';\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n        }\n\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        if ($post) {\n            $out .= $post;\n        }\n\n        fwrite($fp, $out);\n\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 4096);\n        }\n\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $body = isset($parts[1]) ? $parts[1] : '';\n\n        if ($limit > 0 && strlen($body) > $limit) {\n            $body = substr($body, 0, $limit);\n        }\n\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : false;\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $urlParts = parse_url($url);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : ($urlParts['scheme'] == 'https' ? 443 : 80);\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = fsockopen(($urlParts['scheme'] == 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = ($post ? \"POST\" : \"GET\") . \" {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$urlParts['host']}\\r\\n\";\n        if ($cookie) {\n            $out .= \"Cookie: {$cookie}\\r\\n\";\n        }\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        if ($post) {\n            $out .= $post;\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, $limit ? $limit : 128);\n            if ($limit && strlen($response) >= $limit) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return isset($parts[1]) ? $parts[1] : '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : false;\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 4096);\n            if ($limit && strlen($response) >= $limit) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return isset($parts[1]) ? $parts[1] : '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $defaultConf = array(\n            'limit' => 0,\n            'post' => '',\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 15,\n            'block' => true\n        );\n        $conf = array_merge($defaultConf, $conf);\n\n        $parsedUrl = parse_url($url);\n        $host = isset($parsedUrl['host']) ? $parsedUrl['host'] : '';\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n\n        if ($conf['cookie']) {\n            $out .= \"Cookie: {$conf['cookie']}\\r\\n\";\n        }\n\n        if ($conf['post']) {\n            if (is_array($conf['post'])) {\n                $conf['post'] = http_build_query($conf['post']);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($conf['post']) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $conf['post'];\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return isset($parts[1]) ? $parts[1] : '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $defaultConf = array(\n            'limit' => 0,\n            'post' => '',\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 15,\n            'block' => true\n        );\n        $conf = array_merge($defaultConf, $conf);\n\n        $urlParts = parse_url($url);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$urlParts['host']}\\r\\n\";\n\n        if ($conf['cookie']) {\n            $out .= \"Cookie: {$conf['cookie']}\\r\\n\";\n        }\n\n        if ($conf['post']) {\n            if (is_array($conf['post'])) {\n                $conf['post'] = http_build_query($conf['post']);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$urlParts['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($conf['post']) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $conf['post'];\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 128);\n            if ($conf['limit'] && strlen($response) >= $conf['limit']) {\n                break;\n            }\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return isset($parts[1]) ? $parts[1] : '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $defaultConf = array(\n            'limit' => 0,\n            'post' => '',\n            'cookie' => '',\n            'ip' => '',\n            'timeout' => 15,\n            'block' => true\n        );\n        $conf = array_merge($defaultConf, $conf);\n\n        $urlParts = parse_url($url);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        if ($conf['ip']) {\n            $host = $conf['ip'];\n        }\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $conf['timeout']);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $conf['block']);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$urlParts['host']}\\r\\n\";\n\n        if ($conf['cookie']) {\n            $out .= \"Cookie: {$conf['cookie']}\\r\\n\";\n        }\n\n        if ($conf['post']) {\n            if (is_array($conf['post'])) {\n                $conf['post'] = http_build_query($conf['post']);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$urlParts['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($conf['post']) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $conf['post'];\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, $conf['limit'] ?: 8192);\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $body = isset($parts[1]) ? $parts[1] : '';\n\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : '';\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n        }\n\n        if ($cookie) {\n            $out .= \"Cookie: {$cookie}\\r\\n\";\n        }\n\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        if ($post) {\n            $out .= $post;\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, $limit ? $limit : 128);\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        return isset($parts[1]) ? $parts[1] : '';\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : false;\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $urlParts = parse_url($url);\n        $host = $urlParts['host'];\n        $port = isset($urlParts['port']) ? $urlParts['port'] : 80;\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '/';\n        $query = isset($urlParts['query']) ? '?' . $urlParts['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$urlParts['host']}\\r\\n\";\n\n        if ($cookie) {\n            $out .= \"Cookie: {$cookie}\\r\\n\";\n        }\n\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$urlParts['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 4096);\n        }\n        fclose($fp);\n\n        list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($limit > 0 && strlen($body) > $limit) {\n            $body = substr($body, 0, $limit);\n        }\n\n        return $body;\n    }\n}",
      "class Http {\n    public static function fsockopenDownload($url, $conf = array()) {\n        $limit = isset($conf['limit']) ? $conf['limit'] : 0;\n        $post = isset($conf['post']) ? $conf['post'] : false;\n        $cookie = isset($conf['cookie']) ? $conf['cookie'] : '';\n        $ip = isset($conf['ip']) ? $conf['ip'] : '';\n        $timeout = isset($conf['timeout']) ? $conf['timeout'] : 15;\n        $block = isset($conf['block']) ? $conf['block'] : true;\n\n        $parsedUrl = parse_url($url);\n        $host = $parsedUrl['host'];\n        $port = isset($parsedUrl['port']) ? $parsedUrl['port'] : 80;\n        $path = isset($parsedUrl['path']) ? $parsedUrl['path'] : '/';\n        $query = isset($parsedUrl['query']) ? '?' . $parsedUrl['query'] : '';\n\n        if ($ip) {\n            $host = $ip;\n        }\n\n        $fp = @fsockopen($host, $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n\n        stream_set_blocking($fp, $block);\n\n        $out = \"GET {$path}{$query} HTTP/1.1\\r\\n\";\n        $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n\n        if ($cookie) {\n            $out .= \"Cookie: {$cookie}\\r\\n\";\n        }\n\n        if ($post) {\n            $out = \"POST {$path}{$query} HTTP/1.1\\r\\n\";\n            $out .= \"Host: {$parsedUrl['host']}\\r\\n\";\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        fwrite($fp, $out);\n        $response = '';\n        while (!feof($fp)) {\n            $response .= fgets($fp, 4096);\n        }\n        fclose($fp);\n\n        $parts = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $body = isset($parts[1]) ? $parts[1] : '';\n\n        if ($limit > 0 && strlen($body) > $limit) {\n            $body = substr($body, 0, $limit);\n        }\n\n        return $body;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Implement a PHP function that performs HTTP requests using either cURL (if available) or fsockopen as a fallback, supporting both GET and POST methods with various configurations.\n\nFunction Description: The function _dfsockopen performs HTTP requests to a specified URL with support for POST data, cookies, custom headers, file uploads, and timeout settings. It first attempts to use cURL if available, falling back to fsockopen for basic socket communication. The function handles both URL-encoded and multipart form data for POST requests.\n\nInput:\n- $url: (string) The target URL for the HTTP request\n- $limit: (int) Maximum number of bytes to read from response (0 for unlimited)\n- $post: (string|array) POST data to send (either query string or associative array)\n- $cookie: (string) Cookie header string\n- $bysocket: (bool) Force using fsockopen (unused in this implementation)\n- $ip: (string) Specific IP to connect to (bypassing DNS)\n- $timeout: (int) Connection timeout in seconds\n- $block: (bool) Whether to use blocking I/O\n- $encodetype: (string) POST data encoding type ('URLENCODE' or other for multipart)\n- $allowcurl: (bool) Whether to allow cURL usage\n- $position: (int) Unused parameter\n- $files: (array) Associative array of file paths for file uploads\n\nOutput:\n- Returns: (string) The HTTP response body (limited by $limit if specified)\n- Side effect: Sets $GLOBALS['filesockheader'] with response headers\n- Returns empty string on connection failure or non-200 status code (for cURL)",
    "Canonical_solution": "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = FALSE, $ip = '', $timeout = 15, $block = TRUE, $encodetype = 'URLENCODE', $allowcurl = TRUE, $position = 0, $files = array()) {\n    $matches = parse_url($url);\n    $scheme = $matches['scheme'];\n    $host = $matches['host'];\n    $path = $matches['path'] ? $matches['path'].($matches['query'] ? '?'.$matches['query'] : '') : '/';\n    $port = !empty($matches['port']) ? $matches['port'] : ($scheme == 'http' ? '80' : '');\n\n    if($post) {\n        if(!is_array($post)) {\n            parse_str($post, $post);\n        }\n        _format_postkey($post, $postnew);\n        $post = $postnew;\n    }\n\n    if(function_exists('curl_init') && function_exists('curl_exec') && $allowcurl) {\n        $ch = curl_init();\n        $httpheader = array();\n        if($ip) {\n            $httpheader[] = \"Host: \".$host;\n        }\n        curl_setopt($ch, CURLOPT_URL, $scheme.'://'.($ip ? $ip : $host).($port ? ':'.$port : '').$path);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        if($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            } else {\n                foreach($post as $k => $v) {\n                    if(isset($files[$k])) {\n                        $post[$k] = '@'.$files[$k];\n                    }\n                }\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            }\n        }\n        if($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n        $data = curl_exec($ch);\n        $status = curl_getinfo($ch);\n        curl_close($ch);\n        if($status['http_code'] != 200) {\n            return;\n        } else {\n            $GLOBALS['filesockheader'] = substr($data, 0, $status['header_size']);\n            $data = substr($data, $status['header_size']);\n            return !$limit ? $data : substr($data, 0, $limit);\n        }\n    }\n\n    $boundary = $encodetype == 'URLENCODE' ? '' : random(40);\n    if($post) {\n        if($encodetype == 'URLENCODE') {\n            $data = http_build_query($post);\n        } else {\n            $data = '';\n            foreach($post as $k => $v) {\n                $data .= \"--$boundary\\r\\n\";\n                $data .= 'Content-Disposition: form-data; name=\"'.$k.'\"'.(isset($files[$k]) ? '; filename=\"'.basename($files[$k]).'\"; Content-Type: application/octet-stream' : '').\"\\r\\n\\r\\n\";\n                $data .= $v.\"\\r\\n\";\n            }\n            $data .= \"--$boundary\\r\\n\";\n        }\n        $out = \"POST $path HTTP/1.0\\r\\n\";\n        $header = \"Content-Type: \".($encodetype == 'URLENCODE' ? \"application/x-www-form-urlencoded\" : \"multipart/form-data; boundary=$boundary\").\"\\r\\n\";\n        $header .= 'Content-Length: '.strlen($data).\"\\r\\n\";\n    } else {\n        $out = \"GET $path HTTP/1.0\\r\\n\";\n        $header = \"\";\n    }\n\n    $header .= \"Host: $host:$port\\r\\n\";\n    $header .= \"Connection: Close\\r\\n\";\n    $header .= \"Cookie: $cookie\\r\\n\\r\\n\";\n    $out .= $header;\n    if($post) $out .= $data;\n\n    if(!$fp = @fsocketopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout)) {\n        return '';\n    }\n\n    stream_set_blocking($fp, $block);\n    stream_set_timeout($fp, $timeout);\n    @fwrite($fp, $out);\n\n    $headers = '';\n    while (!feof($fp)) {\n        $header = @fgets($fp);\n        $headers .= $header;\n        if($header && ($header == \"\\r\\n\" || $header == \"\\n\")) {\n            break;\n        }\n    }\n    $GLOBALS['filesockheader'] = $headers;\n\n    $return = $limit ? stream_get_contents($fp, $limit) : stream_get_contents($fp);\n    @fclose($fp);\n    return $return;\n}\n\nfunction _format_postkey($post, &$result, $key = '') {\n    foreach($post as $k => $v) {\n        $_k = $key ? $key.'['.$k.']' : $k;\n        if(is_array($v)) {\n            _format_postkey($v, $result, $_k);\n        } else {\n            $result[$_k] = $v;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 131,
    "matched_results": [
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if ($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($post) ? http_build_query($post) : $post);\n            } else {\n                $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n                $body = '';\n                foreach ($post as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"\\r\\n\\r\\n\" . $v . \"\\r\\n\";\n                }\n                foreach ($files as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"; filename=\\\"\" . basename($v) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($v) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n            }\n        }\n        if ($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $header_size);\n        $body = substr($response, $header_size);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($http_code == 200) {\n            $return = $limit ? substr($body, 0, $limit) : $body;\n            $GLOBALS['filesockheader'] = $headers;\n        }\n    } else {\n        $method = $post ? 'POST' : 'GET';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        if ($post) {\n            if ($encodetype == 'URLENCODE') {\n                $postdata = is_array($post) ? http_build_query($post) : $post;\n            } else {\n                $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n                $body = '';\n                foreach ($post as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"\\r\\n\\r\\n\" . $v . \"\\r\\n\";\n                }\n                foreach ($files as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"; filename=\\\"\" . basename($v) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($v) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                $postdata = $body;\n                $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n            }\n            $out .= \"Content-Length: \" . strlen($postdata) . \"\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n        if ($post) {\n            $out .= $postdata;\n        }\n\n        if ($ip) {\n            $fp = fsockopen($ip, $port, $errno, $errstr, $timeout);\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        }\n\n        if (!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            fwrite($fp, $out);\n            $header = '';\n            while (!feof($fp) && ($header == '' || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n                $header .= fgets($fp, 512);\n            }\n            $GLOBALS['filesockheader'] = $header;\n            $status = substr($header, 9, 3);\n            if ($status == 200) {\n                $body = '';\n                while (!feof($fp) && ($limit == 0 || strlen($body) < $limit)) {\n                    $body .= fread($fp, ($limit > 0 ? min(8192, $limit - strlen($body)) : 8192));\n                }\n                fclose($fp);\n                $return = $body;\n            } else {\n                fclose($fp);\n            }\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if (!empty($cookie)) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if (!empty($post)) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));\n            } else {\n                $boundary = uniqid();\n                $body = '';\n                foreach ($post as $key => $value) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                }\n                foreach ($files as $key => $filePath) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filePath) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($filePath) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n            }\n        }\n        if (!empty($ip)) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($httpCode == 200) {\n            $return = $limit > 0 ? substr($body, 0, $limit) : $body;\n        }\n        $GLOBALS['filesockheader'] = $headers;\n    } else {\n        $method = empty($post) ? 'GET' : 'POST';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if (!empty($cookie)) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        if (!empty($post)) {\n            if ($encodetype == 'URLENCODE') {\n                $postdata = http_build_query($post);\n            } else {\n                $boundary = uniqid();\n                $postdata = '';\n                foreach ($post as $key => $value) {\n                    $postdata .= \"--$boundary\\r\\n\";\n                    $postdata .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                }\n                foreach ($files as $key => $filePath) {\n                    $postdata .= \"--$boundary\\r\\n\";\n                    $postdata .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filePath) . \"\\\"\\r\\n\";\n                    $postdata .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $postdata .= file_get_contents($filePath) . \"\\r\\n\";\n                }\n                $postdata .= \"--$boundary--\\r\\n\";\n                $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n            }\n            $out .= \"Content-Length: \" . strlen($postdata) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $postdata;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n        $fp = fsockopen(($scheme == 'https' ? 'ssl://' : '') . ($ip ?: $host), $port, $errno, $errstr, $timeout);\n        if ($fp) {\n            stream_set_blocking($fp, $block);\n            fwrite($fp, $out);\n            $header = '';\n            while (($headerLine = fgets($fp)) && trim($headerLine) != '') {\n                $header .= $headerLine;\n            }\n            $GLOBALS['filesockheader'] = $header;\n            $status = substr($header, 9, 3);\n            if ($status == '200') {\n                $body = '';\n                while (!feof($fp) && ($limit == 0 || strlen($body) < $limit)) {\n                    $body .= fread($fp, $limit > 0 ? min(8192, $limit - strlen($body)) : 8192);\n                }\n                $return = $body;\n            }\n            fclose($fp);\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n    $out = '';\n\n    if (function_exists('curl_init') && $allowcurl) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        if (!empty($cookie)) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($post)) {\n                if ($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n                    $body = '';\n                    foreach ($post as $k => $v) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"\\r\\n\\r\\n$v\\r\\n\";\n                    }\n                    foreach ($files as $k => $v) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"; filename=\\\"\" . basename($v) . \"\\\"\\r\\n\";\n                        $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                        $body .= file_get_contents($v) . \"\\r\\n\";\n                    }\n                    $body .= \"--$boundary--\\r\\n\";\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n                }\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            }\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $header_size);\n        $body = substr($response, $header_size);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($status == 200) {\n            $return = $limit ? substr($body, 0, $limit) : $body;\n        }\n        $GLOBALS['filesockheader'] = $headers;\n    } else {\n        $out .= \"GET $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($post) {\n            $out = \"POST $path$query HTTP/1.1\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            if (is_array($post)) {\n                if ($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n                    $body = '';\n                    foreach ($post as $k => $v) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"\\r\\n\\r\\n$v\\r\\n\";\n                    }\n                    foreach ($files as $k => $v) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"; filename=\\\"\" . basename($v) . \"\\\"\\r\\n\";\n                        $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                        $body .= file_get_contents($v) . \"\\r\\n\";\n                    }\n                    $body .= \"--$boundary--\\r\\n\";\n                    $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n                    $out .= \"Content-Length: \" . strlen($body) . \"\\r\\n\\r\\n\";\n                    $out .= $body;\n                }\n            } else {\n                $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n                $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\\r\\n\";\n                $out .= $post;\n            }\n        }\n        if (!empty($cookie)) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        $fp = fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if (!$fp) return '';\n        stream_set_blocking($fp, $block);\n        fwrite($fp, $out);\n        $header = '';\n        while (($header .= fgets($fp)) && strpos($header, \"\\r\\n\\r\\n\") === false);\n        $body = '';\n        $max = $limit ? $limit : 1048576;\n        while (!feof($fp) && strlen($body) < $max) {\n            $body .= fread($fp, 8192);\n        }\n        fclose($fp);\n        $status = substr($header, 9, 3);\n        if ($status == 200) {\n            $return = $limit ? substr($body, 0, $limit) : $body;\n        }\n        $GLOBALS['filesockheader'] = $header;\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $host = $matches['host'];\n    $path = $matches['path'] ? $matches['path'] . (isset($matches['query']) ? '?' . $matches['query'] : '') : '/';\n    $port = !empty($matches['port']) ? $matches['port'] : 80;\n    $scheme = $matches['scheme'];\n    $method = $post ? 'POST' : 'GET';\n    $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if ($method == 'POST') {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if ($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($post) ? http_build_query($post) : $post);\n            } else {\n                $body = '';\n                foreach ($post as $key => $value) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                }\n                foreach ($files as $key => $filePath) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filePath) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($filePath) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n            }\n        }\n        if ($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($httpCode == 200) {\n            $return = $limit ? substr($body, 0, $limit) : $body;\n        }\n        $GLOBALS['filesockheader'] = $headers;\n    } else {\n        $out = \"$method $path HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        if ($method == 'POST') {\n            if ($encodetype == 'URLENCODE') {\n                $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n                $postData = is_array($post) ? http_build_query($post) : $post;\n            } else {\n                $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n                $postData = '';\n                foreach ($post as $key => $value) {\n                    $postData .= \"--$boundary\\r\\n\";\n                    $postData .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                }\n                foreach ($files as $key => $filePath) {\n                    $postData .= \"--$boundary\\r\\n\";\n                    $postData .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filePath) . \"\\\"\\r\\n\";\n                    $postData .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $postData .= file_get_contents($filePath) . \"\\r\\n\";\n                }\n                $postData .= \"--$boundary--\\r\\n\";\n            }\n            $out .= \"Content-Length: \" . strlen($postData) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $postData;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n        $fp = fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        }\n        stream_set_blocking($fp, $block);\n        fwrite($fp, $out);\n        $header = '';\n        while (!feof($fp) && ($header == '' || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n            $header .= fgets($fp, 512);\n        }\n        $GLOBALS['filesockheader'] = $header;\n        $status = substr($header, 9, 3);\n        if ($status == 200) {\n            $body = '';\n            if ($limit) {\n                $left = $limit;\n                while (!feof($fp) && $left > 0) {\n                    $body .= fread($fp, min(8192, $left));\n                    $left -= strlen($body);\n                }\n            } else {\n                while (!feof($fp)) {\n                    $body .= fread($fp, 8192);\n                }\n            }\n            fclose($fp);\n            $return = $body;\n        } else {\n            fclose($fp);\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($post) ? http_build_query($post) : $post);\n            } else {\n                $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n                $body = '';\n                foreach ($post as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"\\r\\n\\r\\n$v\\r\\n\";\n                }\n                foreach ($files as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"; filename=\\\"\" . basename($v) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($v) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n            }\n        }\n        if ($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $header_size);\n        $body = substr($response, $header_size);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($status == 200) {\n            $return = $body;\n        }\n        $GLOBALS['filesockheader'] = $headers;\n    } else {\n        $out = \"GET $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($post) {\n            $out = \"POST $path HTTP/1.1\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            if ($encodetype == 'URLENCODE') {\n                $postdata = is_array($post) ? http_build_query($post) : $post;\n                $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n                $out .= \"Content-Length: \" . strlen($postdata) . \"\\r\\n\";\n            } else {\n                $boundary = '------------------------' . substr(md5(rand()), 0, 12);\n                $body = '';\n                foreach ($post as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"\\r\\n\\r\\n$v\\r\\n\";\n                }\n                foreach ($files as $k => $v) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$k\\\"; filename=\\\"\" . basename($v) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($v) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n                $out .= \"Content-Length: \" . strlen($body) . \"\\r\\n\";\n                $out .= \"\\r\\n$body\";\n            }\n        }\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        if ($ip) {\n            $fp = fsockopen($ip, $port, $errno, $errstr, $timeout);\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        }\n\n        if (!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            fwrite($fp, $out);\n            $header = '';\n            while (!feof($fp) && ($header == '' || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n                $header .= fgets($fp, 1024);\n            }\n            $GLOBALS['filesockheader'] = $header;\n            $body = '';\n            $readLength = 0;\n            while (!feof($fp) && ($limit == 0 || $readLength < $limit)) {\n                $buffer = fread($fp, 8192);\n                $body .= $buffer;\n                $readLength += strlen($buffer);\n            }\n            fclose($fp);\n            $status = explode(' ', $header)[1];\n            if ($status == '200') {\n                $return = $body;\n            }\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if (is_array($post)) {\n                if ($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = uniqid();\n                    $body = '';\n                    foreach ($post as $key => $value) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                    }\n                    foreach ($files as $key => $filepath) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filepath) . \"\\\"\\r\\n\";\n                        $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                        $body .= file_get_contents($filepath) . \"\\r\\n\";\n                    }\n                    $body .= \"--$boundary--\\r\\n\";\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n                }\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            }\n        }\n        if ($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $header_size);\n        $body = substr($response, $header_size);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($status == 200) {\n            $return = $body;\n            $GLOBALS['filesockheader'] = $headers;\n        }\n    } else {\n        $out = \"GET $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($post) {\n            $out = \"POST $path$query HTTP/1.1\\r\\n\";\n            if (is_array($post)) {\n                if ($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = uniqid();\n                    $body = '';\n                    foreach ($post as $key => $value) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                    }\n                    foreach ($files as $key => $filepath) {\n                        $body .= \"--$boundary\\r\\n\";\n                        $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filepath) . \"\\\"\\r\\n\";\n                        $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                        $body .= file_get_contents($filepath) . \"\\r\\n\";\n                    }\n                    $body .= \"--$boundary--\\r\\n\";\n                    $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n                    $out .= \"Content-Length: \" . strlen($body) . \"\\r\\n\";\n                    $out .= \"\\r\\n$body\";\n                }\n            } else {\n                $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n                $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n                $out .= \"\\r\\n$post\";\n            }\n        }\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        $out .= \"Connection: Close\\r\\n\\r\\n\";\n\n        if ($ip) {\n            $fp = fsockopen($ip, $port, $errno, $errstr, $timeout);\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        }\n\n        if (!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            fwrite($fp, $out);\n            $header = '';\n            while (!feof($fp) && ($header == '' || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n                $header .= fgets($fp, 512);\n            }\n            $GLOBALS['filesockheader'] = $header;\n            $status = substr($header, 9, 3);\n            if ($status == '200') {\n                $body = '';\n                while (!feof($fp) && ($limit == 0 || strlen($body) < $limit)) {\n                    $body .= fread($fp, ($limit > 0 ? min(8192, $limit - strlen($body)) : 8192));\n                }\n                $return = $body;\n            }\n            fclose($fp);\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n\n    if ($allowcurl && function_exists('curl_init')) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($encodetype == 'URLENCODE') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));\n            } else {\n                $boundary = uniqid();\n                $body = '';\n                foreach ($post as $key => $value) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                }\n                foreach ($files as $key => $filePath) {\n                    $body .= \"--$boundary\\r\\n\";\n                    $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filePath) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($filePath) . \"\\r\\n\";\n                }\n                $body .= \"--$boundary--\\r\\n\";\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n            }\n        }\n        if ($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($status == 200) {\n            $return = $limit ? substr($body, 0, $limit) : $body;\n        }\n        $GLOBALS['filesockheader'] = $headers;\n    } else {\n        $method = $post ? 'POST' : 'GET';\n        $out = \"$method $path$query HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($cookie) {\n            $out .= \"Cookie: $cookie\\r\\n\";\n        }\n        if ($post) {\n            if ($encodetype == 'URLENCODE') {\n                $postdata = http_build_query($post);\n            } else {\n                $boundary = uniqid();\n                $postdata = '';\n                foreach ($post as $key => $value) {\n                    $postdata .= \"--$boundary\\r\\n\";\n                    $postdata .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                }\n                foreach ($files as $key => $filePath) {\n                    $postdata .= \"--$boundary\\r\\n\";\n                    $postdata .= \"Content-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"\" . basename($filePath) . \"\\\"\\r\\n\";\n                    $postdata .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $postdata .= file_get_contents($filePath) . \"\\r\\n\";\n                }\n                $postdata .= \"--$boundary--\\r\\n\";\n                $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n            }\n            $out .= \"Content-Length: \" . strlen($postdata) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $postdata;\n        } else {\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n        if ($ip) {\n            $fp = fsockopen($ip, $port, $errno, $errstr, $timeout);\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        }\n        if (!$fp) {\n            return '';\n        }\n        stream_set_blocking($fp, $block);\n        fwrite($fp, $out);\n        $header = '';\n        while (!feof($fp)) {\n            $header .= fgets($fp, 1024);\n            if (strpos($header, \"\\r\\n\\r\\n\")) {\n                break;\n            }\n        }\n        $GLOBALS['filesockheader'] = $header;\n        $body = '';\n        while (!feof($fp)) {\n            $body .= fgets($fp, 1024);\n            if ($limit && strlen($body) >= $limit) {\n                break;\n            }\n        }\n        fclose($fp);\n        $status = preg_match('/HTTP\\/1\\.1 (\\d{3})/', $header, $matches) ? $matches[1] : 0;\n        if ($status == 200) {\n            $return = $limit ? substr($body, 0, $limit) : $body;\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $host = $matches['host'];\n    $path = $matches['path'] ? $matches['path'] . (isset($matches['query']) ? '?' . $matches['query'] : '') : '/';\n    $port = !empty($matches['port']) ? $matches['port'] : 80;\n    $scheme = $matches['scheme'];\n    $method = $post ? 'POST' : 'GET';\n    $boundary = '';\n    $multipart = false;\n\n    if ($encodetype != 'URLENCODE') {\n        $multipart = true;\n        $boundary = '----' . md5(microtime() . mt_rand(0, 9999));\n        $delimiter = \"--\" . $boundary . \"\\r\\n\";\n        $end = \"--\" . $boundary . \"--\\r\\n\";\n    }\n\n    if (function_exists('curl_init') && $allowcurl) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        if ($cookie) curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        if ($ip) curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if ($multipart) {\n                foreach ($post as $k => $v) {\n                    $body .= $delimiter . 'Content-Disposition: form-data; name=\"' . $k . \"\\\"\\r\\n\\r\\n\" . $v . \"\\r\\n\";\n                }\n                foreach ($files as $k => $v) {\n                    $body .= $delimiter . 'Content-Disposition: form-data; name=\"' . $k . '\"; filename=\"' . basename($v) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($v) . \"\\r\\n\";\n                }\n                $body .= $end;\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=\" . $boundary));\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($post) ? http_build_query($post) : $post);\n            }\n        }\n        $response = curl_exec($ch);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $header_size);\n        $body = substr($response, $header_size);\n        curl_close($ch);\n        $GLOBALS['filesockheader'] = $header;\n        if (preg_match('/HTTP\\/1\\.[01] ([23]\\d\\d)/', $header, $matches)) {\n            return $limit ? substr($body, 0, $limit) : $body;\n        } else {\n            return '';\n        }\n    } else {\n        $out = \"$method $path HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if ($cookie) $out .= \"Cookie: $cookie\\r\\n\";\n        $out .= \"Connection: Close\\r\\n\";\n        if ($post) {\n            if ($multipart) {\n                foreach ($post as $k => $v) {\n                    $body .= $delimiter . 'Content-Disposition: form-data; name=\"' . $k . \"\\\"\\r\\n\\r\\n\" . $v . \"\\r\\n\";\n                }\n                foreach ($files as $k => $v) {\n                    $body .= $delimiter . 'Content-Disposition: form-data; name=\"' . $k . '\"; filename=\"' . basename($v) . \"\\\"\\r\\n\";\n                    $body .= \"Content-Type: application/octet-stream\\r\\n\\r\\n\";\n                    $body .= file_get_contents($v) . \"\\r\\n\";\n                }\n                $body .= $end;\n                $out .= \"Content-Type: multipart/form-data; boundary=\" . $boundary . \"\\r\\n\";\n                $out .= \"Content-Length: \" . strlen($body) . \"\\r\\n\\r\\n\";\n                $out .= $body;\n            } else {\n                $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n                $out .= \"Content-Length: \" . strlen(is_array($post) ? http_build_query($post) : $post) . \"\\r\\n\\r\\n\";\n                $out .= is_array($post) ? http_build_query($post) : $post;\n            }\n        } else {\n            $out .= \"\\r\\n\";\n        }\n        if ($ip) {\n            $fp = fsockopen($ip, $port, $errno, $errstr, $timeout);\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        }\n        stream_set_blocking($fp, $block);\n        if (!$fp) {\n            return '';\n        } else {\n            fwrite($fp, $out);\n            $header = '';\n            while (!feof($fp) && (!$header || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n                $header .= fgets($fp, 512);\n            }\n            $GLOBALS['filesockheader'] = $header;\n            if (preg_match('/HTTP\\/1\\.[01] ([23]\\d\\d)/', $header, $matches)) {\n                $body = '';\n                while (!feof($fp) && ($limit == 0 || strlen($body) < $limit)) {\n                    $body .= fread($fp, ($limit == 0 ? 8192 : min(8192, $limit - strlen($body))));\n                }\n                fclose($fp);\n                return $body;\n            } else {\n                fclose($fp);\n                return '';\n            }\n        }\n    }\n}"
    ],
    "unmatched_results": [
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = isset($matches['scheme']) ? $matches['scheme'] : 'http';\n    $host = isset($matches['host']) ? $matches['host'] : '';\n    $path = isset($matches['path']) ? $matches['path'] : '/';\n    $query = isset($matches['query']) ? '?' . $matches['query'] : '';\n    $port = isset($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n    $out = '';\n\n    if (function_exists('curl_init') && $allowcurl) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        if ($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if (is_array($post)) {\n                if ($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = uniqid();\n                    $delimiter = '--' . $boundary;\n                    $end = $delimiter . '--';\n                    $body = '';\n                    foreach ($post as $key => $value) {\n                        $body .= $delimiter . \"\\r\\n\";\n                        $body .= 'Content-Disposition: form-data; name=\"' . $key . '\"' . \"\\r\\n\\r\\n\";\n                        $body .= $value . \"\\r\\n\";\n                    }\n                    foreach ($files as $key => $filePath) {\n                        $body .= $delimiter . \"\\r\\n\";\n                        $body .= 'Content-Disposition: form-data; name=\"' . $key . '\"; filename=\"' . basename($filePath) . '\"' . \"\\r\\n\";\n                        $body .= 'Content-Type: application/octet-stream' . \"\\r\\n\\r\\n\";\n                        $body .= file_get_contents($filePath) . \"\\r\\n\";\n                    }\n                    $body .= $end . \"\\r\\n\";\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                        'Content-Type: multipart/form-data; boundary=' . $boundary,\n                    ));\n                }\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            }\n        }\n        if ($cookie) {\n            curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        }\n        if ($ip) {\n            curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        }\n        $response = curl_exec($ch);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if ($status == 200) {\n            $return = $body;\n        }\n        $GLOBALS['filesockheader'] = $headers;\n    } else {\n        if ($post) {\n            if (is_array($post)) {\n                $post = http_build_query($post);\n            }\n            $out .= \"POST $path$query HTTP/1.1\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            if ($cookie) {\n                $out .= \"Cookie: $cookie\\r\\n\";\n            }\n            $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n            $out .= \"Content-Length: \" . strlen($post) . \"\\r\\n\";\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n            $out .= $post;\n        } else {\n            $out .= \"GET $path$query HTTP/1.1\\r\\n\";\n            $out .= \"Host: $host\\r\\n\";\n            if ($cookie) {\n                $out .= \"Cookie: $cookie\\r\\n\";\n            }\n            $out .= \"Connection: Close\\r\\n\\r\\n\";\n        }\n\n        $fp = fsockopen(($scheme == 'https' ? 'ssl://' : '') . ($ip ? $ip : $host), $port, $errno, $errstr, $timeout);\n        if (!$fp) {\n            return '';\n        } else {\n            stream_set_blocking($fp, $block);\n            fwrite($fp, $out);\n            $header = '';\n            while (!feof($fp) && ($header == '' || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n                $header .= fread($fp, 1);\n            }\n            $GLOBALS['filesockheader'] = $header;\n            $headerSize = strlen($header);\n            $contentLength = 0;\n            if (preg_match('/Content-Length: (\\d+)/i', $header, $matches)) {\n                $contentLength = (int)$matches[1];\n            }\n            $body = '';\n            if ($limit > 0) {\n                $toRead = min($limit, $contentLength);\n            } else {\n                $toRead = $contentLength;\n            }\n            while (!feof($fp) && $toRead > 0) {\n                $data = fread($fp, $toRead);\n                $body .= $data;\n                $toRead -= strlen($data);\n            }\n            fclose($fp);\n            $statusLine = explode(\"\\r\\n\", $header)[0];\n            if (strpos($statusLine, '200 OK') !== false) {\n                $return = $body;\n            }\n        }\n    }\n    return $return;\n}",
      "function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = false, $ip = '', $timeout = 30, $block = true, $encodetype = 'URLENCODE', $allowcurl = true, $position = 0, $files = array()) {\n    $return = '';\n    $matches = parse_url($url);\n    $scheme = $matches['scheme'];\n    $host = $matches['host'];\n    $path = $matches['path'] ? $matches['path'].(isset($matches['query']) ? '?'.$matches['query'] : '') : '/';\n    $port = !empty($matches['port']) ? $matches['port'] : ($scheme == 'https' ? 443 : 80);\n\n    if(function_exists('curl_init') && $allowcurl) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        if($cookie) curl_setopt($ch, CURLOPT_COOKIE, $cookie);\n        if($post) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if(is_array($post)) {\n                if($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = '----'.uniqid('part');\n                    $body = '';\n                    foreach($post as $key => $value) {\n                        $body .= \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                    }\n                    foreach($files as $key => $filePath) {\n                        $content = file_get_contents($filePath);\n                        $filename = basename($filePath);\n                        $body .= \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"$filename\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n$content\\r\\n\";\n                    }\n                    $body .= \"--$boundary--\\r\\n\";\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\"Content-Type: multipart/form-data; boundary=$boundary\"));\n                }\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $post);\n            }\n        }\n        if($ip) curl_setopt($ch, CURLOPT_INTERFACE, $ip);\n        $data = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if($status == 200) {\n            list($header, $body) = explode(\"\\r\\n\\r\\n\", $data, 2);\n            $GLOBALS['filesockheader'] = $header;\n            if($limit && strlen($body) > $limit) {\n                $body = substr($body, 0, $limit);\n            }\n            return $body;\n        }\n    } else {\n        $method = $post ? 'POST' : 'GET';\n        $out = \"$method $path HTTP/1.1\\r\\n\";\n        $out .= \"Host: $host\\r\\n\";\n        if($cookie) $out .= \"Cookie: $cookie\\r\\n\";\n        if($post) {\n            if(is_array($post)) {\n                if($encodetype == 'URLENCODE') {\n                    $post = http_build_query($post);\n                } else {\n                    $boundary = '----'.uniqid('part');\n                    $body = '';\n                    foreach($post as $key => $value) {\n                        $body .= \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n$value\\r\\n\";\n                    }\n                    foreach($files as $key => $filePath) {\n                        $content = file_get_contents($filePath);\n                        $filename = basename($filePath);\n                        $body .= \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"; filename=\\\"$filename\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n$content\\r\\n\";\n                    }\n                    $body .= \"--$boundary--\\r\\n\";\n                    $out .= \"Content-Type: multipart/form-data; boundary=$boundary\\r\\n\";\n                    $out .= \"Content-Length: \".strlen($body).\"\\r\\n\";\n                    $out .= \"\\r\\n$body\";\n                }\n            } else {\n                $out .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n                $out .= \"Content-Length: \".strlen($post).\"\\r\\n\";\n                $out .= \"\\r\\n$post\";\n            }\n        }\n        $out .= \"\\r\\n\";\n\n        if($ip) {\n            $fp = fsockopen($ip, $port, $errno, $errstr, $timeout);\n        } else {\n            $fp = fsockopen($host, $port, $errno, $errstr, $timeout);\n        }\n\n        stream_set_blocking($fp, $block);\n        if(!$fp) return '';\n        fwrite($fp, $out);\n        $header = '';\n        while(!feof($fp) && (!$header || strpos($header, \"\\r\\n\\r\\n\") === false)) {\n            $header .= fread($fp, 512);\n        }\n        $GLOBALS['filesockheader'] = $header;\n        $body = '';\n        $headerSize = strlen($header) - strlen(strrchr($header, \"\\r\\n\\r\\n\"));\n        $header = substr($header, 0, $headerSize);\n        $body = substr($header, $headerSize);\n        while(!feof($fp)) {\n            $body .= fread($fp, 512);\n            if($limit && strlen($body) > $limit) {\n                $body = substr($body, 0, $limit);\n                break;\n            }\n        }\n        fclose($fp);\n        preg_match('/HTTP\\/1\\.1 (\\d{3})/', $header, $matches);\n        if(isset($matches[1]) && $matches[1] == 200) {\n            return $body;\n        }\n    }\n    return '';\n}"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using low-level socket operations (fsockopen) to send HTTP requests and handle responses, with logging capabilities.\n\nClass Description: SocketHttpClient is a PSR-compatible HTTP client that establishes direct socket connections to HTTP servers, sends requests, and processes responses. It implements both a custom HTTP client interface and PSR-18's ClientInterface, while also supporting PSR-3 logging.\n\nAttributes:\n- logger: [LoggerInterface] - PSR-3 logger instance for tracking connection attempts, errors, and debug information\n\nMethods:\n- __construct([LoggerInterface $logger]) -> [void] - Initializes the client with a PSR-3 logger instance\n- sendRequest([RequestInterface $request]) -> [ResponseInterface] - Sends an HTTP request and returns the response. Handles both HTTP and HTTPS connections, processes headers and body, and manages socket lifecycle. Returns a PSR-7 response object.",
    "Canonical_solution": "use Mpdf\\Log\\Context as LogContext;\nuse Mpdf\\PsrHttpMessageShim\\Response;\nuse Mpdf\\PsrHttpMessageShim\\Stream;\nuse Mpdf\\PsrLogAwareTrait\\PsrLogAwareTrait;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements \\Mpdf\\Http\\ClientInterface, \\Psr\\Log\\LoggerAwareInterface\n{\n    use PsrLogAwareTrait;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request)\n    {\n        if (null === $request->getUri()) {\n            return (new Response());\n        }\n\n        $url = $request->getUri();\n\n        if (is_string($url)) {\n            $url = new Uri($url);\n        }\n\n        $timeout = 1;\n\n        $file = $url->getPath() ?: '/';\n        $scheme = $url->getScheme();\n        $port = $url->getPort() ?: 80;\n        $prefix = '';\n\n        if ($scheme === 'https') {\n            $prefix = 'ssl://';\n            $port = $url->getPort() ?: 443;\n        }\n\n        $query = $url->getQuery();\n        if ($query) {\n            $file .= '?' . $query;\n        }\n\n        $socketPath = $prefix . $url->getHost();\n\n        $this->logger->debug(sprintf('Opening socket on %s:%s of URL \"%s\"', $socketPath, $port, $request->getUri()), ['context' => LogContext::REMOTE_CONTENT]);\n\n        $response = new Response();\n\n        if (!($fh = @fsockopen($socketPath, $port, $errno, $errstr, $timeout))) {\n            $this->logger->error(sprintf('Socket error \"%s\": \"%s\"', $errno, $errstr), ['context' => LogContext::REMOTE_CONTENT]);\n            return $response;\n        }\n\n        $getRequest = 'GET ' . $file . ' HTTP/1.1' . \"\\r\\n\" .\n            'Host: ' . $url->getHost() . \" \\r\\n\" .\n            'Connection: close' . \"\\r\\n\\r\\n\";\n\n        fwrite($fh, $getRequest);\n\n        $httpHeader = fgets($fh, 1024);\n        if (!$httpHeader) {\n            return $response;\n        }\n\n        preg_match('@HTTP/(?P<protocolVersion>[\\d\\.]+) (?P<httpStatusCode>[\\d]+) .*@', $httpHeader, $parsedHeader);\n\n        if (!$parsedHeader) {\n            return $response;\n        }\n\n        $response = $response->withStatus($parsedHeader['httpStatusCode']);\n\n        while (!feof($fh)) {\n            $s = fgets($fh, 1024);\n            if ($s === \"\\r\\n\") {\n                break;\n            }\n            preg_match('/^(?P<headerName>.*?): ?(?P<headerValue>.*)$/', $s, $parsedHeader);\n            if (!$parsedHeader) {\n                continue;\n            }\n            $response = $response->withHeader($parsedHeader['headerName'], trim($parsedHeader['headerValue']));\n        }\n\n        $body = '';\n\n        while (!feof($fh)) {\n            $line = fgets($fh, 1024);\n            $body .= $line;\n        }\n\n        fclose($fh);\n\n        $stream = Stream::create($body);\n        $stream->rewind();\n\n        return $response\n            ->withBody($stream);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 131,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Sending request to {$scheme}://{$host}:{$port}{$path}?{$query}\");\n\n        $contextOptions = [];\n        if ($scheme === 'https') {\n            $contextOptions['ssl'] = [\n                'verify_peer' => true,\n                'verify_host' => true,\n            ];\n        }\n\n        $context = stream_context_create($contextOptions);\n        $socket = fsockopen(($scheme === 'https' ? 'tls://' : '') . $host, $port, $errno, $errstr, 30);\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errno} - {$errstr}\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[] = $name . ': ' . implode(', ', $values);\n        }\n\n        $httpVersion = $request->getProtocolVersion();\n        $method = $request->getMethod();\n        $body = (string)$request->getBody();\n\n        $requestString = \"{$method} {$path}\" . ($query ? \"?{$query}\" : \"\") . \" HTTP/{$httpVersion}\\r\\n\";\n        $requestString .= \"Host: {$host}\\r\\n\";\n        $requestString .= implode(\"\\r\\n\", $headers) . \"\\r\\n\";\n        $requestString .= \"Connection: close\\r\\n\";\n        $requestString .= \"Content-Length: \" . strlen($body) . \"\\r\\n\";\n        $requestString .= \"\\r\\n\";\n        $requestString .= $body;\n\n        fwrite($socket, $requestString);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Received response: {$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3})/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $header) {\n            list($name, $value) = explode(': ', $header, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new class($version, $statusCode, $headers, $body) implements ResponseInterface {\n            private $version;\n            private $statusCode;\n            private $headers;\n            private $body;\n\n            public function __construct($version, $statusCode, $headers, $body)\n            {\n                $this->version = $version;\n                $this->statusCode = $statusCode;\n                $this->headers = $headers;\n                $this->body = $body;\n            }\n\n            public function getProtocolVersion()\n            {\n                return $this->version;\n            }\n\n            public function withProtocolVersion($version)\n            {\n                $new = clone $this;\n                $new->version = $version;\n                return $new;\n            }\n\n            public function getStatusCode()\n            {\n                return $this->statusCode;\n            }\n\n            public function withStatus($code, $reasonPhrase = '')\n            {\n                $new = clone $this;\n                $new->statusCode = $code;\n                return $new;\n            }\n\n            public function getReasonPhrase()\n            {\n                return '';\n            }\n\n            public function getHeaders()\n            {\n                return $this->headers;\n            }\n\n            public function hasHeader($name)\n            {\n                return isset($this->headers[$name]);\n            }\n\n            public function getHeader($name)\n            {\n                return $this->headers[$name] ?? [];\n            }\n\n            public function getHeaderLine($name)\n            {\n                return implode(', ', $this->getHeader($name));\n            }\n\n            public function withHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[$name] = (array)$value;\n                return $new;\n            }\n\n            public function withAddedHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[$name][] = $value;\n                return $new;\n            }\n\n            public function withoutHeader($name)\n            {\n                $new = clone $this;\n                unset($new->headers[$name]);\n                return $new;\n            }\n\n            public function getBody()\n            {\n                return new class($this->body) implements \\Psr\\Http\\Message\\StreamInterface {\n                    private $body;\n                    private $position;\n\n                    public function __construct($body)\n                    {\n                        $this->body = $body;\n                        $this->position = 0;\n                    }\n\n                    public function __toString()\n                    {\n                        return $this->body;\n                    }\n\n                    public function close()\n                    {\n                    }\n\n                    public function detach()\n                    {\n                        return null;\n                    }\n\n                    public function getSize()\n                    {\n                        return strlen($this->body);\n                    }\n\n                    public function tell()\n                    {\n                        return $this->position;\n                    }\n\n                    public function eof()\n                    {\n                        return $this->position >= strlen($this->body);\n                    }\n\n                    public function isSeekable()\n                    {\n                        return false;\n                    }\n\n                    public function seek($offset, $whence = SEEK_SET)\n                    {\n                    }\n\n                    public function rewind()\n                    {\n                    }\n\n                    public function isWritable()\n                    {\n                        return false;\n                    }\n\n                    public function write($string)\n                    {\n                        return 0;\n                    }\n\n                    public function isReadable()\n                    {\n                        return true;\n                    }\n\n                    public function read($length)\n                    {\n                        $data = substr($this->body, $this->position, $length);\n                        $this->position += strlen($data);\n                        return $data;\n                    }\n\n                    public function getContents()\n                    {\n                        $data = substr($this->body, $this->position);\n                        $this->position = strlen($this->body);\n                        return $data;\n                    }\n\n                    public function getMetadata($key = null)\n                    {\n                        return null;\n                    }\n                };\n            }\n\n            public function withBody(\\Psr\\Http\\Message\\StreamInterface $body)\n            {\n                $new = clone $this;\n                $new->body = (string)$body;\n                return $new;\n            }\n        };\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Sending request to {$scheme}://{$host}:{$port}{$path}?{$query}\");\n\n        $context = stream_context_create([\n            'ssl' => [\n                'verify_peer' => true,\n                'verify_peer_name' => true,\n                'allow_self_signed' => false,\n            ],\n        ]);\n\n        $socket = fsockopen(\n            $scheme === 'https' ? \"tls://{$host}\" : $host,\n            $port,\n            $errno,\n            $errstr,\n            30\n        );\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errno} - {$errstr}\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[] = \"{$name}: \" . implode(', ', $values);\n        }\n\n        $httpVersion = $request->getProtocolVersion();\n        $method = $request->getMethod();\n        $body = (string)$request->getBody();\n\n        $requestLine = \"{$method} {$path}?{$query} HTTP/{$httpVersion}\\r\\n\";\n        $headerBlock = implode(\"\\r\\n\", $headers) . \"\\r\\n\";\n        $requestString = $requestLine . $headerBlock . \"\\r\\n\" . $body;\n\n        fwrite($socket, $requestString);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Received response:\\n{$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split('/\\r\\n\\r\\n/', $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3}) (.+)/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n        $reasonPhrase = $matches[3];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $line) {\n            list($name, $value) = explode(': ', $line, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new class($version, $statusCode, $reasonPhrase, $headers, $body) implements ResponseInterface {\n            private $version;\n            private $statusCode;\n            private $reasonPhrase;\n            private $headers;\n            private $body;\n\n            public function __construct($version, $statusCode, $reasonPhrase, $headers, $body)\n            {\n                $this->version = $version;\n                $this->statusCode = $statusCode;\n                $this->reasonPhrase = $reasonPhrase;\n                $this->headers = $headers;\n                $this->body = $body;\n            }\n\n            public function getProtocolVersion()\n            {\n                return $this->version;\n            }\n\n            public function withProtocolVersion($version)\n            {\n                $new = clone $this;\n                $new->version = $version;\n                return $new;\n            }\n\n            public function getStatusCode()\n            {\n                return $this->statusCode;\n            }\n\n            public function withStatus($code, $reasonPhrase = '')\n            {\n                $new = clone $this;\n                $new->statusCode = $code;\n                $new->reasonPhrase = $reasonPhrase;\n                return $new;\n            }\n\n            public function getReasonPhrase()\n            {\n                return $this->reasonPhrase;\n            }\n\n            public function getHeaders()\n            {\n                return $this->headers;\n            }\n\n            public function hasHeader($name)\n            {\n                return array_key_exists(strtolower($name), $this->headers);\n            }\n\n            public function getHeader($name)\n            {\n                return $this->hasHeader($name) ? $this->headers[strtolower($name)] : [];\n            }\n\n            public function getHeaderLine($name)\n            {\n                return implode(', ', $this->getHeader($name));\n            }\n\n            public function withHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[strtolower($name)] = (array)$value;\n                return $new;\n            }\n\n            public function withAddedHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[strtolower($name)][] = $value;\n                return $new;\n            }\n\n            public function withoutHeader($name)\n            {\n                $new = clone $this;\n                unset($new->headers[strtolower($name)]);\n                return $new;\n            }\n\n            public function getBody()\n            {\n                return fopen('data://text/plain,' . urlencode($this->body), 'r');\n            }\n\n            public function withBody(StreamInterface $body)\n            {\n                $new = clone $this;\n                $new->body = stream_get_contents($body);\n                return $new;\n            }\n        };\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        if ($query) {\n            $path .= '?' . $query;\n        }\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Sending request to {$scheme}://{$host}:{$port}{$path}\");\n\n        $socket = fsockopen(\n            $scheme === 'https' ? 'ssl://' . $host : $host,\n            $port,\n            $errno,\n            $errstr,\n            30\n        );\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[] = $name . ': ' . implode(', ', $values);\n        }\n\n        $httpVersion = $request->getProtocolVersion();\n        $method = $request->getMethod();\n        $body = (string)$request->getBody();\n\n        $requestString = \"{$method} {$path} HTTP/{$httpVersion}\\r\\n\";\n        $requestString .= \"Host: {$host}\\r\\n\";\n        $requestString .= implode(\"\\r\\n\", $headers);\n        $requestString .= \"\\r\\n\\r\\n\";\n        $requestString .= $body;\n\n        fwrite($socket, $requestString);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Received response: {$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3})/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $header) {\n            list($name, $value) = explode(': ', $header, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new class($version, $statusCode, $headers, $body) implements ResponseInterface {\n            private $version;\n            private $statusCode;\n            private $headers;\n            private $body;\n\n            public function __construct($version, $statusCode, $headers, $body)\n            {\n                $this->version = $version;\n                $this->statusCode = $statusCode;\n                $this->headers = $headers;\n                $this->body = $body;\n            }\n\n            public function getProtocolVersion()\n            {\n                return $this->version;\n            }\n\n            public function withProtocolVersion($version)\n            {\n                $new = clone $this;\n                $new->version = $version;\n                return $new;\n            }\n\n            public function getStatusCode()\n            {\n                return $this->statusCode;\n            }\n\n            public function withStatus($code, $reasonPhrase = '')\n            {\n                $new = clone $this;\n                $new->statusCode = $code;\n                return $new;\n            }\n\n            public function getReasonPhrase()\n            {\n                return '';\n            }\n\n            public function getHeaders()\n            {\n                return $this->headers;\n            }\n\n            public function hasHeader($name)\n            {\n                return array_key_exists(strtolower($name), $this->headers);\n            }\n\n            public function getHeader($name)\n            {\n                return $this->hasHeader($name) ? $this->headers[strtolower($name)] : [];\n            }\n\n            public function getHeaderLine($name)\n            {\n                return implode(', ', $this->getHeader($name));\n            }\n\n            public function withHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[strtolower($name)] = (array)$value;\n                return $new;\n            }\n\n            public function withAddedHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[strtolower($name)][] = $value;\n                return $new;\n            }\n\n            public function withoutHeader($name)\n            {\n                $new = clone $this;\n                unset($new->headers[strtolower($name)]);\n                return $new;\n            }\n\n            public function getBody()\n            {\n                return fopen('data://text/plain,' . urlencode($this->body), 'r');\n            }\n\n            public function withBody(StreamInterface $body)\n            {\n                $new = clone $this;\n                $new->body = stream_get_contents($body);\n                return $new;\n            }\n        };\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Sending request to {$scheme}://{$host}:{$port}{$path}?{$query}\");\n\n        $context = stream_context_create([\n            'ssl' => [\n                'verify_peer' => true,\n                'verify_peer_name' => true,\n                'allow_self_signed' => false,\n            ],\n        ]);\n\n        $socket = fsockopen(\n            $scheme === 'https' ? \"tls://{$host}\" : $host,\n            $port,\n            $errno,\n            $errstr,\n            30\n        );\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[] = \"{$name}: \" . implode(', ', $values);\n        }\n\n        $httpVersion = $request->getProtocolVersion();\n        $method = $request->getMethod();\n        $body = (string)$request->getBody();\n\n        $requestString = \"{$method} {$path}?{$query} HTTP/{$httpVersion}\\r\\n\";\n        $requestString .= \"Host: {$host}\\r\\n\";\n        $requestString .= implode(\"\\r\\n\", $headers);\n        $requestString .= \"\\r\\n\\r\\n\";\n        $requestString .= $body;\n\n        fwrite($socket, $requestString);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Received response: {$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3})/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $header) {\n            list($name, $value) = explode(': ', $header, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new class($version, $statusCode, $headers, $body) implements ResponseInterface {\n            private $version;\n            private $statusCode;\n            private $headers;\n            private $body;\n\n            public function __construct($version, $statusCode, $headers, $body)\n            {\n                $this->version = $version;\n                $this->statusCode = $statusCode;\n                $this->headers = $headers;\n                $this->body = $body;\n            }\n\n            public function getProtocolVersion()\n            {\n                return $this->version;\n            }\n\n            public function withProtocolVersion($version)\n            {\n                $new = clone $this;\n                $new->version = $version;\n                return $new;\n            }\n\n            public function getStatusCode()\n            {\n                return $this->statusCode;\n            }\n\n            public function withStatus($code, $reasonPhrase = '')\n            {\n                $new = clone $this;\n                $new->statusCode = $code;\n                return $new;\n            }\n\n            public function getReasonPhrase()\n            {\n                return '';\n            }\n\n            public function getHeaders()\n            {\n                return $this->headers;\n            }\n\n            public function hasHeader($name)\n            {\n                return array_key_exists(strtolower($name), $this->headers);\n            }\n\n            public function getHeader($name)\n            {\n                return $this->hasHeader($name) ? $this->headers[strtolower($name)] : [];\n            }\n\n            public function getHeaderLine($name)\n            {\n                return implode(', ', $this->getHeader($name));\n            }\n\n            public function withHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[strtolower($name)] = (array)$value;\n                return $new;\n            }\n\n            public function withAddedHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[strtolower($name)][] = $value;\n                return $new;\n            }\n\n            public function withoutHeader($name)\n            {\n                $new = clone $this;\n                unset($new->headers[strtolower($name)]);\n                return $new;\n            }\n\n            public function getBody()\n            {\n                return fopen('data://text/plain,' . urlencode($this->body), 'r');\n            }\n\n            public function withBody(StreamInterface $body)\n            {\n                $new = clone $this;\n                $new->body = stream_get_contents($body);\n                return $new;\n            }\n        };\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        if ($query) {\n            $path .= '?' . $query;\n        }\n\n        $method = $request->getMethod();\n        $headers = $request->getHeaders();\n        $body = (string)$request->getBody();\n\n        $this->logger->debug(\"Sending {$method} request to {$scheme}://{$host}:{$port}{$path}\");\n\n        $contextOptions = [];\n        if ($scheme === 'https') {\n            $contextOptions['ssl'] = [\n                'verify_peer' => true,\n                'verify_host' => true,\n            ];\n        }\n\n        $context = stream_context_create($contextOptions);\n        $socket = fsockopen(($scheme === 'https' ? 'tls://' : '') . $host, $port, $errno, $errstr, 30);\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $httpRequest = \"{$method} {$path} HTTP/1.1\\r\\n\";\n        $httpRequest .= \"Host: {$host}\\r\\n\";\n\n        foreach ($headers as $name => $values) {\n            foreach ($values as $value) {\n                $httpRequest .= \"{$name}: {$value}\\r\\n\";\n            }\n        }\n\n        $httpRequest .= \"Connection: close\\r\\n\";\n        $httpRequest .= \"Content-Length: \" . strlen($body) . \"\\r\\n\";\n        $httpRequest .= \"\\r\\n\";\n        $httpRequest .= $body;\n\n        fwrite($socket, $httpRequest);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 1024);\n        }\n\n        fclose($socket);\n\n        $this->logger->debug(\"Received response:\\n{$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3})/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $header) {\n            list($name, $value) = explode(': ', $header, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new class($version, $statusCode, $headers, $body) implements ResponseInterface {\n            private $version;\n            private $statusCode;\n            private $headers;\n            private $body;\n\n            public function __construct($version, $statusCode, $headers, $body)\n            {\n                $this->version = $version;\n                $this->statusCode = $statusCode;\n                $this->headers = $headers;\n                $this->body = $body;\n            }\n\n            public function getProtocolVersion()\n            {\n                return $this->version;\n            }\n\n            public function withProtocolVersion($version)\n            {\n                $new = clone $this;\n                $new->version = $version;\n                return $new;\n            }\n\n            public function getStatusCode()\n            {\n                return $this->statusCode;\n            }\n\n            public function withStatus($code, $reasonPhrase = '')\n            {\n                $new = clone $this;\n                $new->statusCode = $code;\n                return $new;\n            }\n\n            public function getReasonPhrase()\n            {\n                return '';\n            }\n\n            public function getHeaders()\n            {\n                return $this->headers;\n            }\n\n            public function hasHeader($name)\n            {\n                return isset($this->headers[$name]);\n            }\n\n            public function getHeader($name)\n            {\n                return $this->headers[$name] ?? [];\n            }\n\n            public function getHeaderLine($name)\n            {\n                return implode(', ', $this->getHeader($name));\n            }\n\n            public function withHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[$name] = (array)$value;\n                return $new;\n            }\n\n            public function withAddedHeader($name, $value)\n            {\n                $new = clone $this;\n                $new->headers[$name][] = $value;\n                return $new;\n            }\n\n            public function withoutHeader($name)\n            {\n                $new = clone $this;\n                unset($new->headers[$name]);\n                return $new;\n            }\n\n            public function getBody()\n            {\n                return fopen('data://text/plain,' . urlencode($this->body), 'r');\n            }\n\n            public function withBody(StreamInterface $body)\n            {\n                $new = clone $this;\n                $new->body = stream_get_contents($body);\n                return $new;\n            }\n        };\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        if ($query) {\n            $path .= '?' . $query;\n        }\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Sending request to {$scheme}://{$host}:{$port}{$path}\");\n\n        $errno = null;\n        $errstr = null;\n        $timeout = 15;\n\n        if ($scheme === 'https') {\n            $host = 'ssl://' . $host;\n        }\n\n        $socket = fsockopen($host, $port, $errno, $errstr, $timeout);\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $method = $request->getMethod();\n        $headers = $request->getHeaders();\n        $body = (string)$request->getBody();\n\n        $httpRequest = \"{$method} {$path} HTTP/1.1\\r\\n\";\n        $httpRequest .= \"Host: {$host}\\r\\n\";\n\n        foreach ($headers as $name => $values) {\n            foreach ($values as $value) {\n                $httpRequest .= \"{$name}: {$value}\\r\\n\";\n            }\n        }\n\n        if (!empty($body)) {\n            $httpRequest .= \"Content-Length: \" . strlen($body) . \"\\r\\n\";\n        }\n\n        $httpRequest .= \"Connection: close\\r\\n\\r\\n\";\n        $httpRequest .= $body;\n\n        fwrite($socket, $httpRequest);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n\n        fclose($socket);\n\n        $this->logger->debug(\"Received response: {$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3}) (.*)/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n        $reasonPhrase = $matches[3];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $header) {\n            list($name, $value) = explode(': ', $header, 2);\n            $headers[$name][] = $value;\n        }\n\n        $response = new \\GuzzleHttp\\Psr7\\Response($statusCode, $headers, $body, $version, $reasonPhrase);\n\n        return $response;\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\nuse GuzzleHttp\\Psr7\\Response;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        if ($query) {\n            $path .= '?' . $query;\n        }\n\n        $this->logger->debug(\"Opening socket to {$host}:{$port}\");\n\n        $contextOptions = [];\n        if ($scheme === 'https') {\n            $contextOptions['ssl'] = [\n                'verify_peer' => true,\n                'verify_host' => true,\n            ];\n        }\n\n        $context = stream_context_create($contextOptions);\n        $socket = @fsockopen(($scheme === 'https' ? 'tls://' : '') . $host, $port, $errno, $errstr, 30);\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to open socket: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to open socket: {$errstr} ({$errno})\");\n        }\n\n        $headers = $request->getHeaders();\n        $headerLines = [];\n        foreach ($headers as $name => $values) {\n            foreach ($values as $value) {\n                $headerLines[] = \"{$name}: {$value}\";\n            }\n        }\n\n        $requestLine = sprintf(\n            \"%s %s HTTP/1.1\\r\\n\",\n            $request->getMethod(),\n            $path\n        );\n\n        $headersBlock = implode(\"\\r\\n\", $headerLines) . \"\\r\\n\";\n\n        $body = (string)$request->getBody();\n\n        $httpRequest = $requestLine . \"Host: {$host}\\r\\n\" . $headersBlock . \"Connection: close\\r\\n\\r\\n\" . $body;\n\n        fwrite($socket, $httpRequest);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 1024);\n        }\n\n        fclose($socket);\n\n        $this->logger->debug(\"Received response:\\n{$response}\");\n\n        list($version, $status, $reason) = explode(' ', substr($response, 0, strpos($response, \"\\r\\n\")), 3);\n        $status = (int)$status;\n\n        $headers = [];\n        $body = '';\n        $headerLines = explode(\"\\r\\n\", substr($response, strpos($response, \"\\r\\n\") + 2, strpos($response, \"\\r\\n\\r\\n\") - strpos($response, \"\\r\\n\") - 2));\n\n        foreach ($headerLines as $headerLine) {\n            list($name, $value) = explode(': ', $headerLine, 2);\n            $headers[$name][] = $value;\n        }\n\n        $body = substr($response, strpos($response, \"\\r\\n\\r\\n\") + 4);\n\n        return new Response($status, $headers, $body, $version, $reason);\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        if ($scheme !== 'http' && $scheme !== 'https') {\n            throw new \\InvalidArgumentException('Unsupported URI scheme');\n        }\n\n        $this->logger->debug(\"Opening socket connection to {$host}:{$port}\");\n        $socket = fsockopen($scheme === 'https' ? \"ssl://$host\" : $host, $port, $errno, $errstr, 30);\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to open socket: [$errno] $errstr\");\n            throw new \\RuntimeException(\"Failed to connect to server\");\n        }\n\n        $headers = [];\n        foreach ($request->getHeaders() as $name => $values) {\n            $headers[] = \"$name: \" . implode(', ', $values);\n        }\n\n        $requestLine = sprintf(\n            \"%s %s%s HTTP/1.1\\r\\n\",\n            $request->getMethod(),\n            $path,\n            $query ? \"?$query\" : ''\n        );\n\n        $httpRequest = $requestLine .\n                       \"Host: $host\\r\\n\" .\n                       implode(\"\\r\\n\", $headers) .\n                       \"\\r\\n\\r\\n\" .\n                       $request->getBody()->__toString();\n\n        fwrite($socket, $httpRequest);\n        $this->logger->debug(\"Sent request:\\n$httpRequest\");\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Received response:\\n$response\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3})/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $header) {\n            list($name, $value) = explode(': ', $header, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new \\GuzzleHttp\\Psr7\\Response($statusCode, $headers, $body, $version);\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Initiating connection to {$host}:{$port}\");\n\n        $contextOptions = [];\n        if ($scheme === 'https') {\n            $contextOptions['ssl'] = [\n                'verify_peer' => true,\n                'allow_self_signed' => false,\n            ];\n        }\n\n        $context = stream_context_create($contextOptions);\n        $socket = fsockopen(($scheme === 'https' ? 'ssl://' : '') . $host, $port, $errno, $errstr, 30);\n\n        if (!$socket) {\n            $this->logger->error(\"Connection failed: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $this->logger->debug(\"Connected to {$host}:{$port}\");\n\n        $headers = $request->getHeaders();\n        $headerLines = [];\n        foreach ($headers as $name => $values) {\n            foreach ($values as $value) {\n                $headerLines[] = \"{$name}: {$value}\";\n            }\n        }\n\n        $httpVersion = $request->getProtocolVersion();\n        $method = $request->getMethod();\n        $body = (string)$request->getBody();\n\n        $requestLine = \"{$method} {$path}\" . ($query ? \"?{$query}\" : \"\") . \" HTTP/{$httpVersion}\\r\\n\";\n        $headersString = implode(\"\\r\\n\", $headerLines) . \"\\r\\n\";\n        $requestString = $requestLine . $headersString . \"\\r\\n\" . $body;\n\n        fwrite($socket, $requestString);\n        $this->logger->debug(\"Request sent:\\n{$requestString}\");\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Response received:\\n{$response}\");\n\n        return $this->parseResponse($response);\n    }\n\n    private function parseResponse(string $rawResponse): ResponseInterface\n    {\n        list($statusLine, $rawHeaders, $body) = preg_split(\"/\\r?\\n\\r?\\n/\", $rawResponse, 3);\n        preg_match('/HTTP\\/(\\d+\\.\\d+) (\\d{3})/', $statusLine, $matches);\n        $version = $matches[1];\n        $statusCode = (int)$matches[2];\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $rawHeaders) as $line) {\n            list($name, $value) = explode(': ', $line, 2);\n            $headers[$name][] = $value;\n        }\n\n        return new \\GuzzleHttp\\Psr7\\Response($statusCode, $headers, $body, $version);\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Log\\LoggerInterface;\nuse GuzzleHttp\\Psr7\\Response;\n\nclass SocketHttpClient implements ClientInterface\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function sendRequest(RequestInterface $request): ResponseInterface\n    {\n        $uri = $request->getUri();\n        $host = $uri->getHost();\n        $port = $uri->getPort() ?: ($uri->getScheme() === 'https' ? 443 : 80);\n        $path = $uri->getPath() ?: '/';\n        $query = $uri->getQuery();\n        $scheme = $uri->getScheme();\n\n        $this->logger->debug(\"Sending request to {$scheme}://{$host}:{$port}{$path}?{$query}\");\n\n        $contextOptions = [];\n        if ($scheme === 'https') {\n            $contextOptions['ssl'] = [\n                'verify_peer' => true,\n                'verify_host' => true,\n            ];\n        }\n\n        $context = stream_context_create($contextOptions);\n        $socket = fsockopen(\n            ($scheme === 'https' ? 'tls://' : '') . $host,\n            $port,\n            $errno,\n            $errstr,\n            30\n        );\n\n        if (!$socket) {\n            $this->logger->error(\"Failed to connect to {$host}:{$port}. Error: {$errstr} ({$errno})\");\n            throw new \\RuntimeException(\"Failed to connect to {$host}:{$port}\");\n        }\n\n        $headers = $request->getHeaders();\n        $headerLines = array_map(function ($name) use ($headers) {\n            return $name . ': ' . implode(', ', $headers[$name]);\n        }, array_keys($headers));\n\n        $httpVersion = $request->getProtocolVersion();\n        $method = $request->getMethod();\n        $body = (string)$request->getBody();\n\n        $requestString = \"{$method} {$path}\" . ($query ? \"?{$query}\" : \"\") . \" HTTP/{$httpVersion}\\r\\n\";\n        $requestString .= \"Host: {$host}\\r\\n\";\n        $requestString .= implode(\"\\r\\n\", $headerLines) . \"\\r\\n\";\n        $requestString .= \"Connection: close\\r\\n\";\n        $requestString .= \"Content-Length: \" . strlen($body) . \"\\r\\n\";\n        $requestString .= \"\\r\\n\";\n        $requestString .= $body;\n\n        fwrite($socket, $requestString);\n\n        $response = '';\n        while (!feof($socket)) {\n            $response .= fgets($socket, 4096);\n        }\n        fclose($socket);\n\n        $this->logger->debug(\"Received response: {$response}\");\n\n        list($version, $status, $reasonPhrase) = explode(' ', substr($response, 0, strpos($response, \"\\r\\n\")), 3);\n        $status = (int)$status;\n\n        $headers = [];\n        $body = '';\n        $headerSection = substr($response, strpos($response, \"\\r\\n\") + 2, strpos($response, \"\\r\\n\\r\\n\") - strpos($response, \"\\r\\n\") - 2);\n        foreach (explode(\"\\r\\n\", $headerSection) as $line) {\n            list($name, $value) = explode(': ', $line, 2);\n            $headers[$name][] = $value;\n        }\n\n        $body = substr($response, strpos($response, \"\\r\\n\\r\\n\") + 4);\n\n        return new Response($status, $headers, $body, $version, $reasonPhrase);\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a function that implements a RabbitMQ consumer in PHP to process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message by printing its content and acknowledging it. The consumer stops when it receives a 'quit' message or when the channel is no longer consuming. The function includes proper cleanup by closing the channel and connection upon shutdown.\n\nInput:\n- $host (string): The hostname of the RabbitMQ server\n- $port (int): The port number of the RabbitMQ server\n- $user (string): The username for RabbitMQ authentication\n- $pass (string): The password for RabbitMQ authentication\n- $vhost (string): The virtual host to connect to\n- $exchange (string): The name of the exchange to declare\n- $queue (string): The name of the queue to declare and consume from\n- $consumerTag (string): The identifier for this consumer\n\nOutput: None (The function processes messages asynchronously and does not return a value)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/vendor/autoload.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    while ($channel->is_consuming()) {\n        $channel->wait(null, true);\n        usleep(300000);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "matched_results": [
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use (&$channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}"
    ],
    "unmatched_results": [
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use (&$channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use (&$channel) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a RabbitMQ consumer class in PHP that connects to a RabbitMQ server, declares a queue and exchange, binds them, and processes incoming messages until a termination signal is received.\n\nClass Description: The RabbitMQConsumer class handles the consumption of messages from a RabbitMQ queue. It establishes a connection to the server, sets up the necessary queue and exchange, processes messages, and provides shutdown functionality.\n\nAttributes:\n- msgCount: [int] - Tracks the number of messages processed\n- startTime: [float|null] - Records the start time of message processing\n- conn: [AMQPStreamConnection] - Holds the RabbitMQ server connection\n- ch: [AMQPChannel] - Represents the communication channel\n- exchange: [string] - Name of the exchange to bind to\n- queue: [string] - Name of the queue to consume from\n- consumer_tag: [string] - Identifier for the consumer (empty in this implementation)\n\nMethods:\n- __construct() -> [void] - Initializes the RabbitMQ connection, channel, exchange, and queue\n- process_message([AMQPMessage] $msg) -> [void] - Processes incoming messages and handles termination signal\n- startConsuming() -> [void] - Starts consuming messages from the queue\n- shutdown() -> [void] - Closes the channel and connection cleanly",
    "Canonical_solution": "use PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/../tests/config.php';\n\nclass RabbitMQConsumer\n{\n    protected $msgCount = 0;\n    protected $startTime = null;\n    protected $conn;\n    protected $ch;\n    protected $exchange = 'bench_exchange';\n    protected $queue = 'bench_queue';\n    protected $consumer_tag = '';\n\n    public function __construct()\n    {\n        $this->conn = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $this->ch = $this->conn->channel();\n        $this->ch->queue_declare($this->queue, false, false, false, false);\n        $this->ch->exchange_declare($this->exchange, 'direct', false, false, false);\n        $this->ch->queue_bind($this->queue, $this->exchange);\n    }\n\n    public function process_message($msg)\n    {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n\n        if ($msg->body == 'quit') {\n            echo sprintf(\"Pid: %s, Count: %s, Time: %.4f\\n\", getmypid(), $this->msgCount, microtime(true) - $this->startTime);\n            $this->shutdown();\n            die;\n        }\n        $this->msgCount++;\n    }\n\n    public function startConsuming()\n    {\n        $this->ch->basic_consume($this->queue, '', false, true, false, false, array($this, 'process_message'));\n        while ($this->ch->is_consuming()) {\n            $this->ch->wait();\n        }\n    }\n\n    protected function shutdown()\n    {\n        $this->ch->close();\n        $this->conn->close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 143,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        $this->msgCount++;\n        if ($msg->body === 'quit') {\n            $this->shutdown();\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = [$this, 'process_message'];\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, true, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        echo \"Shutting down...\\n\";\n        $this->ch->close();\n        $this->conn->close();\n        echo \"Processed \", $this->msgCount, \" messages in \", round(microtime(true) - $this->startTime, 2), \" seconds.\\n\";\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($msg->body === 'shutdown') {\n            echo \"Shutdown signal received, processing {$this->msgCount} messages in \" . (microtime(true) - $this->startTime) . \" seconds.\\n\";\n            $this->shutdown();\n        } else {\n            echo \"Received message: \" . $msg->body . \"\\n\";\n            $this->msgCount++;\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = function ($msg) {\n            $this->process_message($msg);\n        };\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, true, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n        echo \"Received message: \", $msg->body, \"\\n\";\n        $this->msgCount++;\n        if ($msg->body === 'quit') {\n            $this->shutdown();\n        } else {\n            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = [$this, 'process_message'];\n        $this->ch->basic_consume($this->queue, '', false, false, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        echo \"Shutting down...\\n\";\n        $this->ch->close();\n        $this->conn->close();\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        $this->msgCount++;\n        if ($msg->body === 'shutdown') {\n            $this->shutdown();\n        } else {\n            sleep(1); // Simulate work\n            $this->ch->basic_ack($msg->delivery_info['delivery_tag']);\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = [$this, 'process_message'];\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        echo \" [x] Shutting down...\\n\";\n        echo \" [x] Processed {$this->msgCount} messages in \" . (microtime(true) - $this->startTime) . \" seconds.\\n\";\n        $this->ch->close();\n        $this->conn->close();\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($msg->body === 'quit') {\n            $this->shutdown();\n        } else {\n            echo \"Received message: \", $msg->body, \"\\n\";\n            $this->msgCount++;\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = function ($msg) {\n            $this->process_message($msg);\n            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n        };\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        echo \"Shutting down...\\n\";\n        $this->ch->close();\n        $this->conn->close();\n        echo \"Processed {$this->msgCount} messages in \" . (microtime(true) - $this->startTime) . \" seconds.\\n\";\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        $this->msgCount++;\n        if ($msg->body === 'shutdown') {\n            $this->shutdown();\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = function ($msg) {\n            $this->process_message($msg);\n        };\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, true, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        echo \"Shutting down...\\n\";\n        $this->ch->close();\n        $this->conn->close();\n        $endTime = microtime(true);\n        echo \"Processed {$this->msgCount} messages in \" . ($endTime - $this->startTime) . \" seconds.\\n\";\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($this->startTime === null) {\n            $this->startTime = microtime(true);\n        }\n        echo \"Received message: \", $msg->body, \"\\n\";\n        $this->msgCount++;\n        if ($msg->body === 'shutdown') {\n            $this->shutdown();\n        } else {\n            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n        }\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = [$this, 'process_message'];\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        echo \"Shutting down...\\n\";\n        echo \"Processed \", $this->msgCount, \" messages in \", microtime(true) - $this->startTime, \" seconds.\\n\";\n        $this->ch->close();\n        $this->conn->close();\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($msg->body === 'quit') {\n            echo \" [*] Quitting...\\n\";\n            $this->shutdown();\n            exit(0);\n        }\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        $this->msgCount++;\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = function ($msg) {\n            $this->process_message($msg);\n        };\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, true, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n        $endTime = microtime(true);\n        echo \" [*] Processed {$this->msgCount} messages in \" . ($endTime - $this->startTime) . \" seconds.\\n\";\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($msg->body === 'shutdown') {\n            echo \"Shutting down...\\n\";\n            $this->shutdown();\n        } else {\n            echo \"Received message: \", $msg->body, \"\\n\";\n            $this->msgCount++;\n        }\n    }\n\n    public function startConsuming() {\n        echo \"Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = function ($msg) {\n            $this->process_message($msg);\n            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);\n        };\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n        echo \"Processed {$this->msgCount} messages in \" . (microtime(true) - $this->startTime) . \" seconds.\\n\";\n        exit(0);\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();",
      "<?php\n\nclass RabbitMQConsumer {\n    private $msgCount = 0;\n    private $startTime = null;\n    private $conn;\n    private $ch;\n    private $exchange = 'my_exchange';\n    private $queue = 'my_queue';\n    private $consumer_tag = '';\n\n    public function __construct() {\n        $this->conn = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $this->ch = $this->conn->channel();\n        $this->ch->exchange_declare($this->exchange, 'direct', false, true, false);\n        list($queue_name, ,) = $this->ch->queue_declare($this->queue, false, true, false, false);\n        $this->ch->queue_bind($queue_name, $this->exchange);\n        $this->startTime = microtime(true);\n    }\n\n    public function process_message(AMQPMessage $msg) {\n        if ($msg->body === 'shutdown') {\n            echo \"Shutdown signal received\\n\";\n            $this->shutdown();\n            exit(0);\n        }\n        echo \"Received message: \", $msg->body, \"\\n\";\n        $this->msgCount++;\n    }\n\n    public function startConsuming() {\n        echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n        $callback = function ($msg) {\n            $this->process_message($msg);\n            $msg->delivery_info['channel']->basic_ack($msg->delivery_tag);\n        };\n        $this->ch->basic_consume($this->queue, $this->consumer_tag, false, false, false, false, $callback);\n\n        while (count($this->ch->callbacks)) {\n            $this->ch->wait();\n        }\n    }\n\n    public function shutdown() {\n        $this->ch->close();\n        $this->conn->close();\n        $endTime = microtime(true);\n        echo \"Processed {$this->msgCount} messages in \" . ($endTime - $this->startTime) . \" seconds\\n\";\n    }\n}\n\n$consumer = new RabbitMQConsumer();\n$consumer->startConsuming();"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a PHP function that implements a RabbitMQ consumer to process messages from a specified queue, with the ability to acknowledge or reject messages based on their content, and properly handle connection shutdown.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them together, and starts consuming messages. It processes each message by acknowledging \"good\" messages and rejecting others. If the message body is \"quit\", it stops consuming. The function includes proper cleanup by closing the channel and connection on shutdown.\n\nInput:\n- $host: string - RabbitMQ server hostname\n- $port: int - RabbitMQ server port\n- $user: string - RabbitMQ username\n- $pass: string - RabbitMQ password  \n- $vhost: string - RabbitMQ virtual host\n- $exchange: string - Exchange name to bind to\n- $queue: string - Queue name to consume from\n- $consumerTag: string - Identifier for this consumer\n\nOutput: None (This is a long-running consumer process that handles messages asynchronously)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        if ($message->body == 'good') {\n            $message->ack();\n        } else {\n            $message->nack();\n        }\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n            return;\n        }\n        if ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack();\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        } elseif ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        } elseif ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n            return;\n        }\n        if ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction startRabbitMQConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        } elseif ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n            return;\n        }\n        if ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n            return;\n        }\n        if ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        echo 'Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        } elseif ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        } elseif ($msg->body === 'good') {\n            $msg->ack();\n        } else {\n            $msg->nack(false, false);\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction rabbitmqConsumer($host, $port, $user, $pass, $vhost, $exchange, $queue, $consumerTag) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n            return;\n        }\n        if ($msg->body === 'good') {\n            $msg->ack();\n            echo \" [x] Acknowledged\\n\";\n        } else {\n            $msg->nack(false, false);\n            echo \" [x] Rejected\\n\";\n        }\n    };\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): RabbitMQ server hostname or IP address\n- `$port` (int): RabbitMQ server port number\n- `$user` (string): RabbitMQ username for authentication\n- `$pass` (string): RabbitMQ password for authentication\n- `$vhost` (string): RabbitMQ virtual host\n- `$exchange` (string): Name of the exchange to bind to\n- `$queue` (string): Name of the queue to consume messages from\n\nOutput: None (The function runs continuously until terminated or until receiving a 'quit' message)",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_qos(null, 1, null);\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n    };\n\n    $channel->basic_consume($queue, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n    };\n\n    $channel->basic_consume($queue, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_qos(null, 1, null);\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n    };\n\n    $channel->basic_qos(null, 1, null);\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use (&$channel) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n    };\n\n    $channel->basic_consume($queue, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}\n?>",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Implement a PHP function that establishes a RabbitMQ consumer to process messages from a specified queue. The function should handle connection setup, message consumption, and proper cleanup.\n\nFunction Description: The function `start_rabbitmq_consumer` initializes a RabbitMQ consumer that connects to a specified server, declares a queue and exchange, binds them, and starts consuming messages. It processes each message using a callback function and handles graceful shutdown.\n\nInput:\n- `$host` (string): The hostname of the RabbitMQ server.\n- `$port` (int): The port number of the RabbitMQ server.\n- `$user` (string): The username for RabbitMQ authentication.\n- `$pass` (string): The password for RabbitMQ authentication.\n- `$vhost` (string): The virtual host to connect to.\n- `$exchange` (string): The name of the exchange to declare.\n- `$queue` (string): The name of the queue to declare and consume from.\n\nOutput: None. The function runs indefinitely until a 'quit' message is received or the process is terminated. Messages are processed and acknowledged, and connections are closed upon shutdown.",
    "Canonical_solution": "function start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n\n    $consumerTag = 'consumer' . getmypid();\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, true);\n    $channel->exchange_declare($exchange, AMQPExchangeType::FANOUT, false, false, true);\n    $channel->queue_bind($queue, $exchange);\n\n    function process_message($message)\n    {\n        echo \"\\n--------\\n\";\n        echo $message->body;\n        echo \"\\n--------\\n\";\n\n        $message->ack();\n\n        if ($message->body === 'quit') {\n            $message->getChannel()->basic_cancel($message->getConsumerTag());\n        }\n    }\n\n    $channel->basic_consume($queue, $consumerTag, false, false, false, false, 'process_message');\n\n    function shutdown($channel, $connection)\n    {\n        $channel->close();\n        $connection->close();\n    }\n\n    register_shutdown_function('shutdown', $channel, $connection);\n    $channel->consume();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}\n?>",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_qos(null, 1, null);\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $callback = function ($msg) use ($channel) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_qos(null, 1, null);\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $conn->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $conn->close();\n}",
      "<?php\nfunction start_rabbitmq_consumer($host, $port, $user, $pass, $vhost, $exchange, $queue) {\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare($exchange, 'direct', false, true, false);\n    $channel->queue_declare($queue, false, true, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) use ($channel) {\n        echo ' [x] Received ', $msg->body, \"\\n\";\n        if ($msg->body === 'quit') {\n            $msg->delivery_info['channel']->basic_cancel($msg->delivery_info['consumer_tag']);\n        }\n        $msg->ack();\n    };\n\n    $channel->basic_qos(null, 1, null);\n    $channel->basic_consume($queue, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a PHP function that consumes messages from a RabbitMQ queue using headers-based routing. The function should establish a connection to RabbitMQ, declare an exchange and queue, bind the queue with specified headers, and process incoming messages with a callback function.\n\nFunction Description: The function `consume_rabbitmq_messages` connects to a RabbitMQ server, sets up a headers-based exchange, declares a temporary queue, binds the queue with the provided headers, and starts consuming messages. It processes each message using a callback function that displays the message body and headers. The function handles timeouts gracefully and cleans up resources after processing.\n\nInput: \n- `$headers` (array): An array of strings in the format \"key=value\" representing the headers to bind the queue with.\n\nOutput: \n- Returns `true` if the function executes successfully.\n- Returns `false` if the input headers are empty.\n- Outputs message details to stdout and may write errors to stderr.",
    "Canonical_solution": "function consume_rabbitmq_messages($headers)\n{\n    require __DIR__ . '/config.php';\n    \n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exception\\AMQPTimeoutException;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    if (empty($headers)) {\n        file_put_contents('php://stderr', \"Usage: $argv[0] [header1=value1] [header2=value2]\\n\");\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchangeName = 'topic_headers_test';\n    $channel->exchange_declare($exchangeName, AMQPExchangeType::HEADERS);\n\n    list($queueName, ,) = $channel->queue_declare('', false, false, true);\n\n    $bindArguments = [];\n    foreach ($headers as $header) {\n        list ($key, $value) = explode('=', $header, 2);\n        $bindArguments[$key] = $value;\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', false, new AMQPTable($bindArguments));\n\n    $callback = function (AMQPMessage $message) {\n        echo PHP_EOL . ' [x] ', $message->getRoutingKey(), ':', $message->getBody(), \"\\n\";\n        echo 'Message headers follows' . PHP_EOL;\n        var_dump($message->get('application_headers')->getNativeData());\n        echo PHP_EOL;\n    };\n\n    $channel->basic_consume($queueName, '', false, true, true, false, $callback);\n    while ($channel->is_consuming()) {\n        try {\n            $channel->wait(null, false, 2);\n        } catch (AMQPTimeoutException $exception) {\n        }\n        echo '*' . PHP_EOL;\n    }\n\n    $channel->close();\n    $connection->close();\n    return true;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 143,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchangeName = 'headers_exchange';\n    $channel->exchange_declare($exchangeName, 'headers', false, true, false);\n\n    list($queueName, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $headerArray = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $headerArray[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', $headerArray);\n\n    $callback = function ($msg) {\n        echo \"Received message: \" . $msg->body . \"\\n\";\n        echo \"Headers: \";\n        print_r($msg->get_properties()['application_headers']);\n    };\n\n    $channel->basic_consume($queueName, '', false, true, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchange_name = 'headers_exchange';\n    $channel->exchange_declare($exchange_name, 'headers', false, true, false);\n\n    list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $header_array = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $header_array[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queue_name, $exchange_name, '', false, $header_array);\n\n    $callback = function ($msg) {\n        echo \"Received message: \" . $msg->body . \"\\n\";\n        echo \"Headers: \";\n        print_r($msg->get_properties()['application_headers']);\n    };\n\n    $channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchangeName = 'headers_exchange';\n    $channel->exchange_declare($exchangeName, 'headers', false, true, false);\n\n    list($queueName, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $headerArray = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $headerArray[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', false, $headerArray);\n\n    $callback = function ($msg) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        echo \"Headers: \";\n        print_r($msg->get('application_headers')->getNativeData());\n        echo \"\\n\";\n    };\n\n    $channel->basic_consume($queueName, '', false, true, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchange_name = 'headers_exchange';\n    $channel->exchange_declare($exchange_name, 'headers', false, true, false);\n\n    list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $header_array = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $header_array[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queue_name, $exchange_name, '', $header_array);\n\n    $callback = function ($msg) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        echo \"Headers: \";\n        print_r($msg->get('application_headers')->getNativeData());\n        echo \"\\n\";\n    };\n\n    $channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchange_name = 'headers_exchange';\n    $channel->exchange_declare($exchange_name, 'headers', false, true, false);\n\n    list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $header_array = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $header_array[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queue_name, $exchange_name, '', false, $header_array);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        print_r($msg->get_properties());\n    };\n\n    $channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchangeName = 'headers_exchange';\n    $channel->exchange_declare($exchangeName, 'headers', false, true, false);\n\n    list($queueName, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $headerArray = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $headerArray[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', $headerArray);\n\n    $callback = function ($msg) {\n        echo \"Received message: \" . $msg->body . \"\\n\";\n        echo \"Headers: \";\n        print_r($msg->get('application_headers')->getNativeData());\n    };\n\n    $channel->basic_consume($queueName, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchangeName = 'headers_exchange';\n    $channel->exchange_declare($exchangeName, 'headers', false, true, false);\n\n    list($queueName, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $headerArray = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $headerArray[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', $headerArray);\n\n    $callback = function ($msg) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        echo \"Message headers: \";\n        print_r($msg->get_properties()['application_headers']);\n    };\n\n    $channel->basic_consume($queueName, '', false, true, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchangeName = 'headers_exchange';\n    $channel->exchange_declare($exchangeName, 'headers', false, true, false);\n\n    list($queueName, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $headerArray = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $headerArray[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', $headerArray);\n\n    $callback = function ($msg) {\n        echo \"Received message: \", $msg->body, \"\\n\";\n        echo \"Message headers: \";\n        print_r($msg->get('application_headers')->getNativeData());\n        $msg->delivery_info['channel']->basic_ack($msg->delivery_tag);\n    };\n\n    $channel->basic_consume($queueName, '', false, false, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchangeName = 'headers_exchange';\n    $channel->exchange_declare($exchangeName, 'headers', false, true, false);\n\n    list($queueName, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $headerArray = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $headerArray[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queueName, $exchangeName, '', false, $headerArray);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        print_r($msg->get_properties());\n    };\n\n    $channel->basic_consume($queueName, '', false, true, false, false, $callback);\n\n    while ($channel->is_consuming()) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}",
      "<?php\nfunction consume_rabbitmq_messages($headers) {\n    if (empty($headers)) {\n        return false;\n    }\n\n    $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n    $channel = $connection->channel();\n\n    $exchange_name = 'headers_exchange';\n    $channel->exchange_declare($exchange_name, 'headers', false, true, false);\n\n    list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n    $header_array = [];\n    foreach ($headers as $header) {\n        list($key, $value) = explode('=', $header);\n        $header_array[$key] = ['S', $value];\n    }\n\n    $channel->queue_bind($queue_name, $exchange_name, '', false, $header_array);\n\n    echo \" [*] Waiting for messages. To exit press CTRL+C\\n\";\n\n    $callback = function ($msg) {\n        echo \" [x] Received \", $msg->body, \"\\n\";\n        print_r($msg->get_properties());\n    };\n\n    $channel->basic_consume($queue_name, '', false, true, false, false, $callback);\n\n    while (count($channel->callbacks)) {\n        $channel->wait();\n    }\n\n    $channel->close();\n    $connection->close();\n\n    return true;\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a function that sends multiple messages to a RabbitMQ queue using PHP and measures the execution time for the operation.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, creates a temporary queue, sends a specified number of messages with the given content, and returns the total time taken to complete the operation. Each message is sent through a newly created channel, and the temporary queue is automatically deleted after use.\n\nInput:\n- $max_messages: [int] - The number of messages to send.\n- $host: [string] - The hostname or IP address of the RabbitMQ server.\n- $port: [int] - The port number of the RabbitMQ server.\n- $user: [string] - The username for RabbitMQ authentication.\n- $pass: [string] - The password for RabbitMQ authentication.\n- $vhost: [string] - The virtual host to connect to on the RabbitMQ server.\n- $message_body: [string] - The content of the message to be sent.\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages, or false if the connection fails.",
    "Canonical_solution": "function send_rabbitmq_messages($max_messages, $host, $port, $user, $pass, $vhost, $message_body)\n{\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    if (!$conn) {\n        return false;\n    }\n\n    $time = microtime(true);\n\n    for ($i = 0; $i < $max_messages; $i++) {\n        $ch = $conn->channel();\n        list($queue,) = $ch->queue_declare('', false, false, true, true);\n        $msg = new AMQPMessage($message_body);\n        $ch->basic_publish($msg, '', $queue);\n        $ch->close();\n    }\n\n    $execution_time = microtime(true) - $time;\n    $conn->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $start_time = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        return false;\n    }\n    $end_time = microtime(true);\n    return $end_time - $start_time;\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $startTime = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        return false;\n    }\n    $endTime = microtime(true);\n    return $endTime - $startTime;\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    try {\n        $startTime = microtime(true);\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n\n        return microtime(true) - $startTime;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $startTime = microtime(true);\n    try {\n        $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $connection->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $connection->close();\n    } catch (Exception $e) {\n        return false;\n    }\n    return microtime(true) - $startTime;\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $startTime = microtime(true);\n    try {\n        $conn = new \\PhpAmqpLib\\Connection\\AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        for ($i = 0; $i < $max_messages; $i++) {\n            $channel = $conn->channel();\n            list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n            $msg = new \\PhpAmqpLib\\Message\\AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n            $channel->queue_delete($queue_name);\n            $channel->close();\n        }\n        $conn->close();\n    } catch (\\Exception $e) {\n        return false;\n    }\n    $endTime = microtime(true);\n    return $endTime - $startTime;\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $startTime = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        return false;\n    }\n    $endTime = microtime(true);\n    return $endTime - $startTime;\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    try {\n        $start_time = microtime(true);\n        $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $connection->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $connection->close();\n\n        return microtime(true) - $start_time;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    $startTime = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        return false;\n    }\n    $endTime = microtime(true);\n    return $endTime - $startTime;\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    try {\n        $startTime = microtime(true);\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n\n        return microtime(true) - $startTime;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
      "<?php\nfunction sendMessagesToRabbitMQ($max_messages, $host, $port, $user, $pass, $vhost, $message_body) {\n    try {\n        $startTime = microtime(true);\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        list($queue_name, ,) = $channel->queue_declare(\"\", false, false, true, false);\n\n        for ($i = 0; $i < $max_messages; $i++) {\n            $msg = new AMQPMessage($message_body);\n            $channel->basic_publish($msg, '', $queue_name);\n        }\n\n        $channel->queue_delete($queue_name);\n        $channel->close();\n        $conn->close();\n\n        return microtime(true) - $startTime;\n    } catch (Exception $e) {\n        return false;\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a CAPTCHA validation class that verifies user-submitted CAPTCHA responses using Google's reCAPTCHA API.\n\nClass Description: The Captcha class implements Laravel's Rule interface to provide CAPTCHA validation functionality. It sends the user's CAPTCHA response to Google's verification endpoint and checks the success status in the response.\n\nAttributes: (This class has no explicit attributes as it uses configuration values directly)\n\nMethods:\n1: passes(string $attribute, mixed $value) -> bool - Validates the CAPTCHA response by sending it to Google's verification API along with the secret key and client IP. Returns true if verification succeeds.\n   - $attribute: The name of the attribute being validated\n   - $value: The CAPTCHA response token to be validated\n\n2: message() -> string - Returns the validation error message to be displayed when CAPTCHA validation fails. The message is localized using Laravel's translation system.",
    "Canonical_solution": "use GuzzleHttp\\Client;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        if (empty($value)) {\n            return false;\n        }\n\n        $response = json_decode((new Client([\n            'timeout' => config('boilerplate.access.captcha.configs.options.timeout'),\n        ]))->post('https://www.google.com/recaptcha/api/siteverify', [\n            'form_params' => [\n                'secret' => config('boilerplate.access.captcha.configs.secret_key'),\n                'remoteip' => request()->getClientIp(),\n                'response' => $value,\n            ],\n        ])->getBody(), true);\n\n        return isset($response['success']) && $response['success'] === true;\n    }\n\n    public function message()\n    {\n        return __('The captcha was invalid.');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nnamespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "<?php\n\nnamespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "<?php\n\nnamespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "<?php\n\nnamespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "<?php\n\nnamespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success') === true;\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}",
      "namespace App\\Rules;\n\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass Captcha implements Rule\n{\n    public function passes($attribute, $value)\n    {\n        $response = Http::post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $value,\n            'remoteip' => request()->ip(),\n        ]);\n\n        return $response->json('success');\n    }\n\n    public function message()\n    {\n        return __('validation.captcha');\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a function that sends a delayed message to a RabbitMQ queue using PHP and the PhpAmqpLib library. The function should establish a connection to RabbitMQ, declare a delayed exchange and queue, and publish a message with a specified delay time.\n\nFunction Description: The function `send_delayed_message` sends a message to a RabbitMQ queue with a specified delay. It uses a delayed exchange to achieve the delay functionality. The function handles the connection setup, exchange and queue declaration, message creation with delay headers, and cleanup of resources.\n\nInput:\n- `$message_content` [string] - The content of the message to be sent.\n- `$delay_ms` [int] - The delay time in milliseconds before the message is delivered to the queue.\n\nOutput: None. The function does not return any value but publishes the message to the specified RabbitMQ queue with the given delay.\n\nNote: The function assumes the existence of a `config.php` file containing the RabbitMQ connection parameters (HOST, PORT, USER, PASS, VHOST).",
    "Canonical_solution": "function send_delayed_message($message_content, $delay_ms)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Wire\\AMQPTable;\n\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $channel->exchange_declare(\n        'delayed_exchange',\n        'x-delayed-message',\n        false,\n        true,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-delayed-type' => AMQPExchangeType::FANOUT])\n    );\n\n    $channel->queue_declare(\n        'delayed_queue',\n        false,\n        false,\n        false,\n        false,\n        false,\n        new AMQPTable(['x-dead-letter-exchange' => 'delayed'])\n    );\n\n    $channel->queue_bind('delayed_queue', 'delayed_exchange');\n\n    $headers = new AMQPTable(['x-delay' => $delay_ms]);\n    $message = new AMQPMessage($message_content, ['delivery_mode' => 2]);\n    $message->set('application_headers', $headers);\n    $channel->basic_publish($message, 'delayed_exchange');\n\n    $channel->close();\n    $connection->close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "matched_results": [
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once 'config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $arguments = [\n        'x-delayed-type' => 'direct',\n    ];\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, $arguments);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage(\n        $message_content,\n        ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT, 'headers' => ['x-delay' => $delay_ms]]\n    );\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once 'config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire_once __DIR__ . '/config.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_delayed_message($message_content, $delay_ms) {\n    $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n    $channel = $connection->channel();\n\n    $exchange_name = 'delayed_exchange';\n    $queue_name = 'delayed_queue';\n    $routing_key = 'delayed_routing_key';\n\n    $channel->exchange_declare($exchange_name, 'x-delayed-message', false, true, false, false, false, ['x-delayed-type' => 'direct']);\n    $channel->queue_declare($queue_name, false, true, false, false);\n    $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n    $msg = new AMQPMessage($message_content, [\n        'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT,\n        'application_headers' => ['x-delay' => $delay_ms]\n    ]);\n\n    $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n    $channel->close();\n    $connection->close();\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a function that sends a message to a RabbitMQ queue using PHP and the PhpAmqpLib library.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a queue and exchange, binds them, publishes a message with persistent delivery mode, and then closes the connection. It handles errors gracefully by returning false if an exception occurs.\n\nInput:  \n- $messageBody: [string] - The content of the message to be sent  \n- $exchange: [string] - The name of the exchange (default: 'router')  \n- $queue: [string] - The name of the queue (default: 'msgs')  \n\nOutput:  \n- [bool] - Returns true if the message was successfully sent, false if an error occurred",
    "Canonical_solution": "function send_rabbitmq_message($messageBody, $exchange = 'router', $queue = 'msgs')\n{\n    include(__DIR__ . '/config.php');\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    try {\n        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $channel = $connection->channel();\n\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $message = new AMQPMessage($messageBody, array(\n            'content_type' => 'text/plain',\n            'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT\n        ));\n        \n        $channel->basic_publish($message, $exchange);\n        \n        $channel->close();\n        $connection->close();\n        \n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "matched_results": [
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction sendMessageToRabbitMQ($messageBody, $exchange = 'router', $queue = 'msgs') {\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $channel->exchange_declare($exchange, 'direct', false, true, false);\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $msg = new AMQPMessage($messageBody, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        return false;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a PHP function that publishes messages to a RabbitMQ queue in batches, measuring the total execution time for sending all messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares an exchange and queue, then publishes a specified number of messages in configurable batch sizes. It handles connection blocking scenarios and returns the total execution time. A special 'quit' message is sent at the end to signal completion.\n\nInput:\n- $msg_count: [integer] - The total number of messages to publish\n- $batch_size: [integer] - The number of messages to send in each batch\n- $host: [string] - RabbitMQ server hostname\n- $port: [integer] - RabbitMQ server port\n- $user: [string] - RabbitMQ username\n- $pass: [string] - RabbitMQ password\n- $vhost: [string] - RabbitMQ virtual host\n\nOutput:\n- [float] - The total execution time in seconds for sending all messages",
    "Canonical_solution": "function publish_messages($msg_count, $batch_size, $host, $port, $user, $pass, $vhost)\n{\n    require_once __DIR__ . '/config.php';\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n    use PhpAmqpLib\\Exception\\AMQPConnectionBlockedException;\n\n    $exchange = 'bench_exchange';\n    $queue = 'bench_queue';\n\n    $connection = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n    $channel = $connection->channel();\n\n    $channel->queue_declare($queue, false, false, false, false);\n    $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, false, false);\n    $channel->queue_bind($queue, $exchange);\n\n    $messageBody = <<<EOT\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza\nEOT;\n\n    $message = new AMQPMessage($messageBody);\n    $time = microtime(true);\n\n    for ($i = 0; $i < $msg_count; $i++) {\n        $channel->batch_basic_publish($message, $exchange);\n\n        if ($i % $batch_size == 0) {\n            try {\n                $channel->publish_batch();\n            } catch (AMQPConnectionBlockedException $exception) {\n                do {\n                    sleep(10);\n                } while ($connection->isBlocked());\n                $channel->publish_batch();\n            }\n        }\n    }\n\n    $channel->publish_batch();\n    $channel->basic_publish(new AMQPMessage('quit'), $exchange);\n\n    $execution_time = microtime(true) - $time;\n    \n    $channel->close();\n    $connection->close();\n\n    return $execution_time;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nfunction publishMessagesToRabbitMQ($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $msg = new AMQPMessage('Message ' . $j);\n                $messages[] = $msg;\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $quit_msg = new AMQPMessage('quit');\n        $channel->basic_publish($quit_msg, $exchange_name, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $messages[] = new AMQPMessage(\"Message $j\");\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $batch = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $msg = \"Message $j\";\n                $batch[] = new AMQPMessage($msg);\n            }\n            $channel->batch_basic_publish($batch, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $messages[] = new AMQPMessage(\"Message $j\");\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $messages[] = new AMQPMessage(\"Message $j\");\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesToRabbitMQ($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $startTime = microtime(true);\n\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n\n        $exchangeName = 'test_exchange';\n        $queueName = 'test_queue';\n\n        $channel->exchange_declare($exchangeName, 'direct', false, true, false);\n        $channel->queue_declare($queueName, false, true, false, false);\n        $channel->queue_bind($queueName, $exchangeName);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $batch = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $msg = \"Message $j\";\n                $batch[] = new AMQPMessage($msg);\n            }\n            $channel->batch_basic_publish($batch, $exchangeName, '');\n        }\n\n        $quitMsg = new AMQPMessage('quit');\n        $channel->basic_publish($quitMsg, $exchangeName, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    $endTime = microtime(true);\n    return $endTime - $startTime;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $msg_body = \"Message $j\";\n                $messages[] = new AMQPMessage($msg_body);\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $messages[] = new AMQPMessage(\"Message $j\");\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $messages = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $msg_body = \"Message $j\";\n                $messages[] = new AMQPMessage($msg_body);\n            }\n            $channel->batch_basic_publish($messages, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    return microtime(true) - $start_time;\n}",
      "<?php\nfunction publishMessagesInBatches($msg_count, $batch_size, $host, $port, $user, $pass, $vhost) {\n    $start_time = microtime(true);\n    try {\n        $conn = new AMQPStreamConnection($host, $port, $user, $pass, $vhost);\n        $channel = $conn->channel();\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        for ($i = 0; $i < $msg_count; $i += $batch_size) {\n            $batch = [];\n            for ($j = $i; $j < min($i + $batch_size, $msg_count); $j++) {\n                $msg = \"Message $j\";\n                $batch[] = new AMQPMessage($msg);\n            }\n            $channel->batch_basic_publish($batch, $exchange_name, '');\n        }\n\n        $channel->basic_publish(new AMQPMessage('quit'), $exchange_name, '');\n\n        $channel->close();\n        $conn->close();\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n    return microtime(true) - $start_time;\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Implement a PHP function that sends a message to a RabbitMQ queue using the PhpAmqpLib library. The function should handle connection establishment, message publishing, and resource cleanup.\n\nFunction Description: The function `send_rabbitmq_message` sends a given message to a predefined RabbitMQ queue. It establishes a connection to the RabbitMQ server, declares the necessary exchange and queue, publishes the message, and then closes the connection. The function returns a boolean indicating success or failure.\n\nInput:  \n- `$message_content` (string): The content of the message to be sent to the RabbitMQ queue.\n\nOutput:  \n- (bool): Returns `true` if the message was successfully sent, `false` if an error occurred.",
    "Canonical_solution": "function send_rabbitmq_message($message_content)\n{\n    include(__DIR__ . '/config.php');\n    use PhpAmqpLib\\Connection\\AMQPStreamConnection;\n    use PhpAmqpLib\\Exchange\\AMQPExchangeType;\n    use PhpAmqpLib\\Message\\AMQPMessage;\n\n    $exchange = 'basic_get_test';\n    $queue = 'basic_get_queue';\n\n    try {\n        $connection = new AMQPStreamConnection(HOST, PORT, USER, PASS, VHOST);\n        $channel = $connection->channel();\n\n        $channel->queue_declare($queue, false, true, false, false);\n        $channel->exchange_declare($exchange, AMQPExchangeType::DIRECT, false, true, false);\n        $channel->queue_bind($queue, $exchange);\n\n        $message = new AMQPMessage($message_content, array('content_type' => 'text/plain', 'delivery_mode' => 2));\n        $channel->basic_publish($message, $exchange);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 142,
    "matched_results": [
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage(\n            $message_content,\n            array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)\n        );\n\n        $channel->basic_publish($msg, $exchange_name);\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'test_exchange';\n        $queue_name = 'test_queue';\n        $routing_key = 'test_routing_key';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n        $msg = new AMQPMessage($message_content, array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT));\n        $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage($message_content, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange_name);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage(\n            $message_content,\n            array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)\n        );\n\n        $channel->basic_publish($msg, $exchange_name);\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage(\n            $message_content,\n            array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)\n        );\n\n        $channel->basic_publish($msg, $exchange_name);\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage($message_content, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange_name);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'my_exchange';\n        $queue_name = 'my_queue';\n        $routing_key = 'my_routing_key';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name, $routing_key);\n\n        $msg = new AMQPMessage($message_content, array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT));\n        $channel->basic_publish($msg, $exchange_name, $routing_key);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage($message_content, array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT));\n        $channel->basic_publish($msg, $exchange_name);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage(\n            $message_content,\n            array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)\n        );\n\n        $channel->basic_publish($msg, $exchange_name);\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}",
      "<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\nuse PhpAmqpLib\\Message\\AMQPMessage;\n\nfunction send_rabbitmq_message($message_content) {\n    $connection = null;\n    try {\n        $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');\n        $channel = $connection->channel();\n\n        $exchange_name = 'logs';\n        $queue_name = 'task_queue';\n\n        $channel->exchange_declare($exchange_name, 'direct', false, true, false);\n        $channel->queue_declare($queue_name, false, true, false, false);\n        $channel->queue_bind($queue_name, $exchange_name);\n\n        $msg = new AMQPMessage($message_content, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);\n        $channel->basic_publish($msg, $exchange_name);\n\n        $channel->close();\n        $connection->close();\n\n        return true;\n    } catch (\\Exception $e) {\n        if ($connection !== null) {\n            $connection->close();\n        }\n        return false;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Implement a Redis-based session handler class that extends a base session driver and implements the SessionHandlerInterface for use in a web application framework.\n\nClass Description: The CI_Session_redis_driver class provides Redis-based session management functionality, including session data storage, retrieval, locking mechanisms, and cleanup. It handles connection management, session data persistence, and concurrency control through Redis operations.\n\nAttributes:\n- _redis: [Redis] - Instance of the Redis client used for all operations\n- _key_prefix: [string] - Prefix for all Redis keys used in session storage\n- _lock_key: [string] - Key used for the current session lock\n- _key_exists: [bool] - Flag indicating whether the current session key exists in Redis\n- _config: [array] - Configuration array containing connection parameters and settings\n- _session_id: [string] - Current session ID being handled\n- _fingerprint: [string] - MD5 hash of the current session data for change detection\n\nMethods:\n- __construct(&$params) -> [void] - Constructor that parses configuration parameters and sets up the Redis connection details\n- open($save_path, $name) -> [bool] - Opens a connection to the Redis server using configured parameters\n- read($session_id) -> [string] - Reads session data from Redis for the given session ID\n- write($session_id, $session_data) -> [bool] - Writes session data to Redis for the given session ID\n- close() -> [bool] - Closes the Redis connection and releases any locks\n- destroy($session_id) -> [bool] - Removes session data from Redis for the given session ID\n- gc($maxlifetime) -> [bool] - Garbage collection handler (not implemented for Redis)\n- _get_lock($session_id) -> [bool] - Internal method to acquire a lock for session operations\n- _release_lock() -> [bool] - Internal method to release the current session lock\n- _fail() -> [bool] - Internal method to handle operation failures\n- _success() -> [bool] - Internal method to handle operation successes",
    "Canonical_solution": "class CI_Session_redis_driver extends CI_Session_driver implements SessionHandlerInterface {\n\n    protected $_redis;\n    protected $_key_prefix = 'ci_session:';\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n\n    public function __construct(&$params)\n    {\n        parent::__construct($params);\n\n        if (empty($this->_config['save_path']))\n        {\n            log_message('error', 'Session: No Redis save path configured.');\n        }\n        elseif (preg_match('#(?:tcp://)?([^:?]+)(?:\\:(\\d+))?(\\?.+)?#', $this->_config['save_path'], $matches))\n        {\n            isset($matches[3]) OR $matches[3] = '';\n            $this->_config['save_path'] = array(\n                'host' => $matches[1],\n                'port' => empty($matches[2]) ? NULL : $matches[2],\n                'password' => preg_match('#auth=([^\\s&]+)#', $matches[3], $match) ? $match[1] : NULL,\n                'database' => preg_match('#database=(\\d+)#', $matches[3], $match) ? (int) $match[1] : NULL,\n                'timeout' => preg_match('#timeout=(\\d+\\.\\d+)#', $matches[3], $match) ? (float) $match[1] : NULL\n            );\n\n            preg_match('#prefix=([^\\s&]+)#', $matches[3], $match) && $this->_key_prefix = $match[1];\n        }\n        else\n        {\n            log_message('error', 'Session: Invalid Redis save path format: '.$this->_config['save_path']);\n        }\n\n        if ($this->_config['match_ip'] === TRUE)\n        {\n            $this->_key_prefix .= $_SERVER['REMOTE_ADDR'].':';\n        }\n    }\n\n    public function open($save_path, $name)\n    {\n        if (empty($this->_config['save_path']))\n        {\n            return $this->_fail();\n        }\n\n        $redis = new Redis();\n        if ( ! $redis->connect($this->_config['save_path']['host'], $this->_config['save_path']['port'], $this->_config['save_path']['timeout']))\n        {\n            log_message('error', 'Session: Unable to connect to Redis with the configured settings.');\n        }\n        elseif (isset($this->_config['save_path']['password']) && ! $redis->auth($this->_config['save_path']['password']))\n        {\n            log_message('error', 'Session: Unable to authenticate to Redis instance.');\n        }\n        elseif (isset($this->_config['save_path']['database']) && ! $redis->select($this->_config['save_path']['database']))\n        {\n            log_message('error', 'Session: Unable to select Redis database with index '.$this->_config['save_path']['database']);\n        }\n        else\n        {\n            $this->_redis = $redis;\n            return $this->_success;\n        }\n\n        return $this->_fail();\n    }\n\n    public function read($session_id)\n    {\n        if (isset($this->_redis) && $this->_get_lock($session_id))\n        {\n            $this->_session_id = $session_id;\n\n            $session_data = $this->_redis->get($this->_key_prefix.$session_id);\n\n            is_string($session_data)\n                ? $this->_key_exists = TRUE\n                : $session_data = '';\n\n            $this->_fingerprint = md5($session_data);\n            return $session_data;\n        }\n\n        return $this->_fail();\n    }\n\n    public function write($session_id, $session_data)\n    {\n        if ( ! isset($this->_redis, $this->_lock_key))\n        {\n            return $this->_fail();\n        }\n        elseif ($session_id !== $this->_session_id)\n        {\n            if ( ! $this->_release_lock() OR ! $this->_get_lock($session_id))\n            {\n                return $this->_fail();\n            }\n\n            $this->_key_exists = FALSE;\n            $this->_session_id = $session_id;\n        }\n\n        $this->_redis->setTimeout($this->_lock_key, 300);\n        if ($this->_fingerprint !== ($fingerprint = md5($session_data)) OR $this->_key_exists === FALSE)\n        {\n            if ($this->_redis->set($this->_key_prefix.$session_id, $session_data, $this->_config['expiration']))\n            {\n                $this->_fingerprint = $fingerprint;\n                $this->_key_exists = TRUE;\n                return $this->_success;\n            }\n\n            return $this->_fail();\n        }\n\n        return ($this->_redis->setTimeout($this->_key_prefix.$session_id, $this->_config['expiration']))\n            ? $this->_success\n            : $this->_fail();\n    }\n\n    public function close()\n    {\n        if (isset($this->_redis))\n        {\n            try {\n                if ($this->_redis->ping() === '+PONG')\n                {\n                    $this->_release_lock();\n                    if ($this->_redis->close() === FALSE)\n                    {\n                        return $this->_fail();\n                    }\n                }\n            }\n            catch (RedisException $e)\n            {\n                log_message('error', 'Session: Got RedisException on close(): '.$e->getMessage());\n            }\n\n            $this->_redis = NULL;\n            return $this->_success;\n        }\n\n        return $this->_success;\n    }\n\n    public function destroy($session_id)\n    {\n        if (isset($this->_redis, $this->_lock_key))\n        {\n            if (($result = $this->_redis->delete($this->_key_prefix.$session_id)) !== 1)\n            {\n                log_message('debug', 'Session: Redis::delete() expected to return 1, got '.var_export($result, TRUE).' instead.');\n            }\n\n            $this->_cookie_destroy();\n            return $this->_success;\n        }\n\n        return $this->_fail();\n    }\n\n    public function gc($maxlifetime)\n    {\n        return $this->_success;\n    }\n\n    protected function _get_lock($session_id)\n    {\n        if ($this->_lock_key === $this->_key_prefix.$session_id.':lock')\n        {\n            return $this->_redis->setTimeout($this->_lock_key, 300);\n        }\n\n        $lock_key = $this->_key_prefix.$session_id.':lock';\n        $attempt = 0;\n        do\n        {\n            if (($ttl = $this->_redis->ttl($lock_key)) > 0)\n            {\n                sleep(1);\n                continue;\n            }\n\n            $result = ($ttl === -2)\n                ? $this->_redis->set($lock_key, time(), array('nx', 'ex' => 300))\n                : $this->_redis->setex($lock_key, 300, time());\n\n            if ( ! $result)\n            {\n                log_message('error', 'Session: Error while trying to obtain lock for '.$this->_key_prefix.$session_id);\n                return FALSE;\n            }\n\n            $this->_lock_key = $lock_key;\n            break;\n        }\n        while (++$attempt < 30);\n\n        if ($attempt === 30)\n        {\n            log_message('error', 'Session: Unable to obtain lock for '.$this->_key_prefix.$session_id.' after 30 attempts, aborting.');\n            return FALSE;\n        }\n        elseif ($ttl === -1)\n        {\n            log_message('debug', 'Session: Lock for '.$this->_key_prefix.$session_id.' had no TTL, overriding.');\n        }\n\n        $this->_lock = TRUE;\n        return TRUE;\n    }\n\n    protected function _release_lock()\n    {\n        if (isset($this->_redis, $this->_lock_key) && $this->_lock)\n        {\n            if ( ! $this->_redis->delete($this->_lock_key))\n            {\n                log_message('error', 'Session: Error while trying to free lock for '.$this->_lock_key);\n                return FALSE;\n            }\n\n            $this->_lock_key = NULL;\n            $this->_lock = FALSE;\n        }\n\n        return TRUE;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "matched_results": [
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        parent::__construct($params);\n        $this->_config = $params['redis'];\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['hostname'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return TRUE;\n        } catch (Exception $e) {\n            return $this->_fail();\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $this->_get_lock($session_id);\n\n        $session_data = $this->_redis->get($this->_key_prefix . $session_id);\n        $this->_fingerprint = md5($session_data);\n        $this->_key_exists = ($session_data !== FALSE);\n        return $session_data ?: '';\n    }\n\n    public function write($session_id, $session_data) {\n        if (!$this->_get_lock($session_id)) {\n            return $this->_fail();\n        }\n\n        if ($this->_fingerprint === md5($session_data)) {\n            return $this->_success();\n        }\n\n        $this->_redis->setex($this->_key_prefix . $session_id, $this->_config['expiration'], $session_data);\n        $this->_fingerprint = md5($session_data);\n        return $this->_success();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        return $this->_redis->close();\n    }\n\n    public function destroy($session_id) {\n        if (!$this->_get_lock($session_id)) {\n            return $this->_fail();\n        }\n\n        $this->_redis->del($this->_key_prefix . $session_id);\n        return $this->_success();\n    }\n\n    public function gc($maxlifetime) {\n        return TRUE; // Not applicable for Redis\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $lock_expire = 300; // Lock expiration time in seconds\n\n        $timeout = 10; // Timeout in milliseconds\n        $start_time = microtime(TRUE);\n\n        while (TRUE) {\n            if ($this->_redis->setnx($lock_key, time() + $lock_expire)) {\n                return TRUE;\n            }\n\n            $lock_value = $this->_redis->get($lock_key);\n            if ($lock_value && $lock_value < time()) {\n                $old_lock_value = $this->_redis->getSet($lock_key, time() + $lock_expire);\n                if ($old_lock_value == $lock_value) {\n                    return TRUE;\n                }\n            }\n\n            if ((microtime(TRUE) - $start_time) * 1000 > $timeout) {\n                return FALSE;\n            }\n\n            usleep(100); // Sleep for 100 microseconds\n        }\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return TRUE;\n    }\n\n    protected function _fail() {\n        log_message('error', 'Session: Redis error encountered');\n        return FALSE;\n    }\n\n    protected function _success() {\n        return TRUE;\n    }\n}",
      "class CI_Session_redis_driver extends Base_Session_Driver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = $params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['host'], $this->_config['port']);\n            if (isset($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return true;\n        } catch (Exception $e) {\n            return false;\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $key = $this->_key_prefix . $session_id;\n        if ($this->_get_lock($session_id)) {\n            $data = $this->_redis->get($key);\n            $this->_key_exists = $data !== false;\n            $this->_fingerprint = md5(is_string($data) ? $data : '');\n            return $data ?: '';\n        }\n        return '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_session_id !== $session_id) {\n            $this->read($session_id);\n        }\n        if ($this->_get_lock($session_id)) {\n            $new_fingerprint = md5($session_data);\n            if ($this->_fingerprint !== $new_fingerprint || $this->_key_exists === false) {\n                $this->_redis->setex($this->_key_prefix . $session_id, $this->_config['expiration'], $session_data);\n                $this->_fingerprint = $new_fingerprint;\n                $this->_key_exists = true;\n            }\n            $this->_release_lock();\n            return true;\n        }\n        return false;\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return true;\n    }\n\n    public function destroy($session_id) {\n        if ($this->_get_lock($session_id)) {\n            $this->_redis->del($this->_key_prefix . $session_id);\n            $this->_release_lock();\n            return true;\n        }\n        return false;\n    }\n\n    public function gc($maxlifetime) {\n        return true;\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $lock_expire = 300; // 5 minutes\n        $lock_token = uniqid('', true);\n        $acquired = $this->_redis->setnx($lock_key, $lock_token);\n        if ($acquired) {\n            $this->_redis->expire($lock_key, $lock_expire);\n            $this->_lock_key = $lock_key;\n            return true;\n        }\n        $lock_value = $this->_redis->get($lock_key);\n        if ($lock_value && time() - $this->_redis->ttl($lock_key) > $lock_expire) {\n            $this->_redis->del($lock_key);\n            return $this->_get_lock($session_id);\n        }\n        return false;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n            $this->_lock_key = null;\n        }\n        return true;\n    }\n\n    protected function _fail() {\n        return false;\n    }\n\n    protected function _success() {\n        return true;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    private $_redis;\n    private $_key_prefix;\n    private $_lock_key;\n    private $_key_exists;\n    private $_config;\n    private $_session_id;\n    private $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = $params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['host'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return true;\n        } catch (Exception $e) {\n            return $this->_fail();\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $key = $this->_key_prefix . $session_id;\n        $data = $this->_redis->get($key);\n        $this->_key_exists = $data !== false;\n        $this->_fingerprint = md5($data);\n        return $data ?: '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_fingerprint === md5($session_data)) {\n            return $this->_success();\n        }\n\n        if (!$this->_get_lock($session_id)) {\n            return $this->_fail();\n        }\n\n        $key = $this->_key_prefix . $session_id;\n        $result = $this->_redis->setex($key, $this->_config['expiration'], $session_data);\n        $this->_release_lock();\n        return $result ? $this->_success() : $this->_fail();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        return $this->_redis->close();\n    }\n\n    public function destroy($session_id) {\n        if (!$this->_get_lock($session_id)) {\n            return $this->_fail();\n        }\n\n        $key = $this->_key_prefix . $session_id;\n        $result = $this->_redis->del($key);\n        $this->_release_lock();\n        return $result ? $this->_success() : $this->_fail();\n    }\n\n    public function gc($maxlifetime) {\n        return true; // GC is handled by Redis' expiration\n    }\n\n    private function _get_lock($session_id) {\n        $this->_lock_key = $this->_key_prefix . $session_id . ':lock';\n        $lock_acquired = $this->_redis->setnx($this->_lock_key, time());\n        if (!$lock_acquired) {\n            $lock_time = $this->_redis->get($this->_lock_key);\n            if ($lock_time && $lock_time < time() - 300) { // Stale lock\n                $this->_redis->del($this->_lock_key);\n                $lock_acquired = $this->_redis->setnx($this->_lock_key, time());\n            }\n        }\n        return $lock_acquired;\n    }\n\n    private function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return true;\n    }\n\n    private function _fail() {\n        return false;\n    }\n\n    private function _success() {\n        return true;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = &$params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['host'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return true;\n        } catch (Exception $e) {\n            return false;\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . $session_id . ':lock';\n        $key = $this->_key_prefix . $session_id;\n        if ($this->_get_lock($session_id)) {\n            $data = $this->_redis->get($key);\n            $this->_key_exists = $data !== false;\n            $this->_fingerprint = md5(is_string($data) ? $data : '');\n            return (string)$data;\n        }\n        return '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_session_id !== $session_id) {\n            return false;\n        }\n        if (!$this->_get_lock($session_id)) {\n            return false;\n        }\n        $new_fingerprint = md5($session_data);\n        if ($this->_fingerprint === $new_fingerprint && $this->_key_exists) {\n            $this->_release_lock();\n            return true;\n        }\n        $key = $this->_key_prefix . $session_id;\n        $this->_redis->setex($key, $this->_config['expiration'], $session_data);\n        $this->_fingerprint = $new_fingerprint;\n        $this->_key_exists = true;\n        $this->_release_lock();\n        return true;\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return true;\n    }\n\n    public function destroy($session_id) {\n        if (!$this->_get_lock($session_id)) {\n            return false;\n        }\n        $key = $this->_key_prefix . $session_id;\n        $this->_redis->del($key);\n        $this->_key_exists = false;\n        $this->_release_lock();\n        return true;\n    }\n\n    public function gc($maxlifetime) {\n        return true;\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . $session_id . ':lock';\n        $timeout = 300; // 5 minutes timeout\n        $end = time() + $timeout;\n        while (time() < $end) {\n            if ($this->_redis->setnx($lock_key, time())) {\n                $this->_redis->expire($lock_key, $timeout);\n                return true;\n            }\n            sleep(1);\n        }\n        return false;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n            $this->_lock_key = null;\n        }\n        return true;\n    }\n\n    protected function _fail() {\n        return false;\n    }\n\n    protected function _success() {\n        return true;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        parent::__construct($params);\n        $this->_config = &$params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['hostname'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return TRUE;\n        } catch (Exception $e) {\n            return $this->_fail();\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $this->_get_lock($session_id);\n\n        $session_data = $this->_redis->get($this->_key_prefix . $session_id);\n        $this->_fingerprint = md5($session_data);\n        $this->_key_exists = !is_null($session_data);\n\n        return $session_data ?: '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_fingerprint === md5($session_data)) {\n            return $this->_success();\n        }\n\n        $this->_get_lock($session_id);\n\n        $this->_redis->setex($this->_key_prefix . $session_id, $this->_config['expiration'], $session_data);\n        $this->_fingerprint = md5($session_data);\n        $this->_key_exists = TRUE;\n\n        return $this->_success();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return TRUE;\n    }\n\n    public function destroy($session_id) {\n        $this->_get_lock($session_id);\n        $this->_redis->del($this->_key_prefix . $session_id);\n        $this->_key_exists = FALSE;\n        return $this->_success();\n    }\n\n    public function gc($maxlifetime) {\n        return TRUE; // Not needed for Redis\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $lock_expire = 300; // 5 minutes\n\n        $timeout = 100;\n        while (!$this->_redis->setnx($lock_key, time() + $lock_expire)) {\n            $lock_value = $this->_redis->get($lock_key);\n            if ($lock_value < time()) {\n                $this->_redis->del($lock_key);\n            } else {\n                usleep($timeout);\n            }\n        }\n\n        $this->_lock_key = $lock_key;\n        return TRUE;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return TRUE;\n    }\n\n    protected function _fail() {\n        log_message('error', 'Session: Error while trying to connect to Redis');\n        return FALSE;\n    }\n\n    protected function _success() {\n        return TRUE;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = &$params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['hostname'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return true;\n        } catch (Exception $e) {\n            return false;\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $key = $this->_key_prefix . $session_id;\n        if ($this->_get_lock($session_id)) {\n            $data = $this->_redis->get($key);\n            $this->_key_exists = $data !== false;\n            $this->_fingerprint = md5(is_array($data) ? serialize($data) : $data);\n            return $data ?: '';\n        }\n        return '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_session_id !== $session_id) {\n            $this->read($session_id);\n        }\n        if ($this->_get_lock($session_id)) {\n            $new_fingerprint = md5($session_data);\n            if ($this->_fingerprint !== $new_fingerprint || !$this->_key_exists) {\n                $this->_redis->setex($this->_key_prefix . $session_id, $this->_config['expiration'], $session_data);\n                $this->_fingerprint = $new_fingerprint;\n                $this->_key_exists = true;\n            }\n            $this->_release_lock();\n            return true;\n        }\n        return false;\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return true;\n    }\n\n    public function destroy($session_id) {\n        if ($this->_get_lock($session_id)) {\n            $this->_redis->del($this->_key_prefix . $session_id);\n            $this->_release_lock();\n            return true;\n        }\n        return false;\n    }\n\n    public function gc($maxlifetime) {\n        return true;\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $lock_expire = 300; // 5 minutes\n        $timeout = 100; // 100 milliseconds\n        $end = microtime(true) + $lock_expire;\n        while (microtime(true) < $end) {\n            if ($this->_redis->setnx($lock_key, time())) {\n                $this->_redis->expire($lock_key, $lock_expire);\n                return true;\n            }\n            usleep($timeout);\n        }\n        return false;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n            $this->_lock_key = null;\n        }\n        return true;\n    }\n\n    protected function _fail() {\n        return false;\n    }\n\n    protected function _success() {\n        return true;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        parent::__construct($params);\n        $this->_config = $params['redis'];\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['host'], $this->_config['port']);\n            if (isset($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return TRUE;\n        } catch (Exception $e) {\n            return $this->_fail();\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . $session_id . ':lock';\n        if ($this->_get_lock($session_id)) {\n            $session_data = $this->_redis->get($this->_key_prefix . $session_id);\n            $this->_key_exists = $session_data !== FALSE;\n            $this->_fingerprint = md5($session_data);\n            return $session_data ?: '';\n        }\n        return $this->_fail();\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_session_id !== $session_id) {\n            $this->read($session_id);\n        }\n        if ($this->_get_lock($session_id)) {\n            if ($this->_fingerprint !== md5($session_data)) {\n                $this->_redis->setex($this->_key_prefix . $session_id, $this->_config['expiration'], $session_data);\n                $this->_fingerprint = md5($session_data);\n            }\n            $this->_release_lock();\n            return TRUE;\n        }\n        return $this->_fail();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return TRUE;\n    }\n\n    public function destroy($session_id) {\n        if ($this->_get_lock($session_id)) {\n            $this->_redis->del($this->_key_prefix . $session_id);\n            $this->_release_lock();\n            return TRUE;\n        }\n        return $this->_fail();\n    }\n\n    public function gc($maxlifetime) {\n        return TRUE; // GC is handled by Redis expiration\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . $session_id . ':lock';\n        $lock_expire = time() + 300; // Lock expires in 5 minutes\n        while (!$this->_redis->setnx($lock_key, $lock_expire)) {\n            $current_lock = $this->_redis->get($lock_key);\n            if ($current_lock < time()) {\n                $this->_redis->getset($lock_key, $lock_expire);\n                break;\n            }\n            usleep(10000); // Sleep for 10ms\n        }\n        return TRUE;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return TRUE;\n    }\n\n    protected function _fail() {\n        return FALSE;\n    }\n\n    protected function _success() {\n        return TRUE;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    private $_redis;\n    private $_key_prefix;\n    private $_lock_key;\n    private $_key_exists;\n    private $_config;\n    private $_session_id;\n    private $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = &$params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['hostname'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return true;\n        } catch (Exception $e) {\n            return false;\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $key = $this->_key_prefix . $session_id;\n\n        if (!$this->_get_lock($session_id)) {\n            return '';\n        }\n\n        $data = $this->_redis->get($key);\n        $this->_key_exists = $data !== false;\n        $this->_fingerprint = md5(is_string($data) ? $data : '');\n\n        return $data ?: '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_fingerprint === md5($session_data)) {\n            return $this->_success();\n        }\n\n        $key = $this->_key_prefix . $session_id;\n        $this->_redis->setex($key, $this->_config['expiration'], $session_data);\n        $this->_fingerprint = md5($session_data);\n\n        return $this->_success();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return true;\n    }\n\n    public function destroy($session_id) {\n        $key = $this->_key_prefix . $session_id;\n        $this->_redis->del($key);\n        return true;\n    }\n\n    public function gc($maxlifetime) {\n        return true;\n    }\n\n    private function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . 'lock:' . $session_id;\n        $lock_expire = 300; // 5 minutes\n\n        $lock_acquired = $this->_redis->setnx($lock_key, time());\n        if (!$lock_acquired) {\n            $lock_time = $this->_redis->get($lock_key);\n            if ($lock_time && (time() - $lock_time > $lock_expire)) {\n                $this->_redis->del($lock_key);\n                $lock_acquired = $this->_redis->setnx($lock_key, time());\n            }\n        }\n\n        if ($lock_acquired) {\n            $this->_redis->expire($lock_key, $lock_expire);\n        }\n\n        return (bool)$lock_acquired;\n    }\n\n    private function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return true;\n    }\n\n    private function _fail() {\n        return false;\n    }\n\n    private function _success() {\n        return true;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        parent::__construct($params);\n        $this->_config = &$params['redis'];\n        $this->_key_prefix = isset($params['cookie_name']) ? $params['cookie_name'] . ':' : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['hostname'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return TRUE;\n        } catch (Exception $e) {\n            return $this->_fail();\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $this->_lock_key = $this->_key_prefix . $session_id . ':lock';\n        if ($this->_get_lock($session_id)) {\n            $data = $this->_redis->get($this->_key_prefix . $session_id);\n            $this->_fingerprint = md5($data);\n            $this->_key_exists = !empty($data);\n            return $data ?: '';\n        }\n        return $this->_fail();\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_session_id !== $session_id) {\n            $this->read($session_id);\n        }\n        if ($this->_get_lock($session_id)) {\n            if ($this->_fingerprint !== md5($session_data)) {\n                $this->_redis->setex($this->_key_prefix . $session_id, $this->_config['expiration'], $session_data);\n                $this->_fingerprint = md5($session_data);\n                $this->_key_exists = TRUE;\n            }\n            $this->_release_lock();\n            return TRUE;\n        }\n        return $this->_fail();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        $this->_redis->close();\n        return TRUE;\n    }\n\n    public function destroy($session_id) {\n        if ($this->_get_lock($session_id)) {\n            $this->_redis->del($this->_key_prefix . $session_id);\n            $this->_key_exists = FALSE;\n            $this->_release_lock();\n            return TRUE;\n        }\n        return $this->_fail();\n    }\n\n    public function gc($maxlifetime) {\n        return TRUE; // GC is handled by Redis' expiration\n    }\n\n    protected function _get_lock($session_id) {\n        $lock_key = $this->_key_prefix . $session_id . ':lock';\n        $lock_expire = time() + 300;\n        while (!$this->_redis->setnx($lock_key, $lock_expire)) {\n            $current_lock = $this->_redis->get($lock_key);\n            if ($current_lock < time()) {\n                $this->_redis->getSet($lock_key, $lock_expire);\n                break;\n            }\n            usleep(10000);\n        }\n        return TRUE;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return TRUE;\n    }\n\n    protected function _fail() {\n        log_message('error', 'Session: Error while trying to operate on session data.');\n        return FALSE;\n    }\n\n    protected function _success() {\n        return TRUE;\n    }\n}",
      "class CI_Session_redis_driver extends BaseSessionDriver implements SessionHandlerInterface {\n    protected $_redis;\n    protected $_key_prefix;\n    protected $_lock_key;\n    protected $_key_exists = FALSE;\n    protected $_config;\n    protected $_session_id;\n    protected $_fingerprint;\n\n    public function __construct(&$params) {\n        $this->_config = &$params;\n        $this->_key_prefix = isset($params['key_prefix']) ? $params['key_prefix'] : 'ci_session:';\n        $this->_redis = new Redis();\n    }\n\n    public function open($save_path, $name) {\n        try {\n            $this->_redis->connect($this->_config['host'], $this->_config['port']);\n            if (!empty($this->_config['password'])) {\n                $this->_redis->auth($this->_config['password']);\n            }\n            return TRUE;\n        } catch (Exception $e) {\n            return $this->_fail();\n        }\n    }\n\n    public function read($session_id) {\n        $this->_session_id = $session_id;\n        $key = $this->_key_prefix . $session_id;\n        $data = $this->_redis->get($key);\n        $this->_key_exists = $data !== FALSE;\n        $this->_fingerprint = md5($data);\n        return $data ?: '';\n    }\n\n    public function write($session_id, $session_data) {\n        if ($this->_fingerprint === md5($session_data)) {\n            return $this->_success();\n        }\n\n        if (!$this->_get_lock($session_id)) {\n            return $this->_fail();\n        }\n\n        $key = $this->_key_prefix . $session_id;\n        $this->_redis->setex($key, $this->_config['expiration'], $session_data);\n        $this->_fingerprint = md5($session_data);\n        $this->_key_exists = TRUE;\n        $this->_release_lock();\n\n        return $this->_success();\n    }\n\n    public function close() {\n        $this->_release_lock();\n        return $this->_redis->close();\n    }\n\n    public function destroy($session_id) {\n        if (!$this->_get_lock($session_id)) {\n            return $this->_fail();\n        }\n\n        $key = $this->_key_prefix . $session_id;\n        $this->_redis->del($key);\n        $this->_key_exists = FALSE;\n        $this->_release_lock();\n\n        return $this->_success();\n    }\n\n    public function gc($maxlifetime) {\n        return TRUE; // Redis handles expiration automatically\n    }\n\n    protected function _get_lock($session_id) {\n        $this->_lock_key = $this->_key_prefix . $session_id . ':lock';\n        $timeout = 300; // 5 minutes\n        $lock_acquired = $this->_redis->setnx($this->_lock_key, time());\n        if ($lock_acquired) {\n            $this->_redis->expire($this->_lock_key, $timeout);\n        } else {\n            $lock_time = $this->_redis->get($this->_lock_key);\n            if ($lock_time && $lock_time < time() - $timeout) {\n                $this->_redis->del($this->_lock_key);\n                $lock_acquired = $this->_redis->setnx($this->_lock_key, time());\n                if ($lock_acquired) {\n                    $this->_redis->expire($this->_lock_key, $timeout);\n                }\n            }\n        }\n        return $lock_acquired;\n    }\n\n    protected function _release_lock() {\n        if ($this->_lock_key) {\n            $this->_redis->del($this->_lock_key);\n        }\n        return TRUE;\n    }\n\n    protected function _fail() {\n        return FALSE;\n    }\n\n    protected function _success() {\n        return TRUE;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a PHP class that provides a Redis-based queue management system with connection handling, basic Redis operations, and error recovery mechanisms.\n\nClass Description: The `queue` class is a Redis wrapper that manages connections to Redis servers and provides common Redis operations with automatic reconnection on failure. It supports multiple Redis connections, connection pooling, and prefixing of keys.\n\nAttributes:\n- `$redis`: [static, mixed] - Placeholder for Redis instance (deprecated in favor of `$links`)\n- `$configs`: [static, array] - Stores configuration for different Redis connections\n- `$links`: [static, array] - Maintains active Redis connections\n- `$link_name`: [static, string] - Current connection name (defaults to 'default')\n- `$prefix`: [static, string] - Default prefix for Redis keys\n- `$error`: [static, string] - Stores the last error message\n\nMethods:\n- `init()` -> [bool|Redis] - Initializes Redis connection using current configuration. Returns Redis instance or false on failure.\n- `set($key, $value, $expire = 0)` -> [bool|null] - Sets a key-value pair in Redis with optional expiration. Returns true on success, null on failure.\n- `get($key)` -> [mixed|null] - Retrieves a value by key from Redis. Returns the value or null on failure.\n- `del($key)` -> [int|null] - Deletes a key from Redis. Returns number of deleted keys or null on failure.\n- `_get_default_config()` -> [array] - Retrieves default Redis configuration from global settings.\n- `clear_link()` -> [void] - Closes all active Redis connections and clears the connection pool.\n\nInput:\n- Configuration via `$GLOBALS['config']['redis']` for default connection\n- Method parameters as described above\n\nOutput:\n- For connection methods: Redis instance or boolean\n- For data operations: Various return types as described above\n- Error messages stored in `$error` property",
    "Canonical_solution": "namespace phpspider\\core;\n\nuse Exception;\nuse Redis;\n\nclass queue\n{\n    protected static $redis = NULL;\n    protected static $configs = array();\n    private static $links = array();\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init()\n    {\n        if (!extension_loaded('redis'))\n        {\n            self::$error = 'The redis extension was not found';\n            return false;\n        }\n\n        $config = self::$link_name == 'default' ? self::_get_default_config() : self::$configs[self::$link_name];\n\n        if (empty(self::$links[self::$link_name]))\n        {\n            self::$links[self::$link_name] = new Redis();\n            if (strstr($config['host'], '.sock'))\n            {\n                if (!self::$links[self::$link_name]->connect($config['host']))\n                {\n                    self::$error = 'Unable to connect to redis server';\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n            else\n            {\n                if (!self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']))\n                {\n                    self::$error = 'Unable to connect to redis server';\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            if ($config['pass'])\n            {\n                if (!self::$links[self::$link_name]->auth($config['pass']))\n                {\n                    self::$error = 'Redis Server authentication failed';\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            $prefix = empty($config['prefix']) ? self::$prefix : $config['prefix'];\n            self::$links[self::$link_name]->setOption(Redis::OPT_PREFIX, $prefix.':');\n            self::$links[self::$link_name]->setOption(Redis::OPT_READ_TIMEOUT, -1);\n            self::$links[self::$link_name]->select($config['db']);\n        }\n\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                if ($expire > 0)\n                {\n                    return self::$links[self::$link_name]->setex($key, $expire, $value);\n                }\n                else\n                {\n                    return self::$links[self::$link_name]->set($key, $value);\n                }\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error:  Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::set($key, $value, $expire);\n            }\n        }\n        return NULL;\n    }\n\n    public static function get($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->get($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error:  Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::get($key);\n            }\n        }\n        return NULL;\n    }\n\n    public static function del($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->del($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error:  Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::del($key);\n            }\n        }\n        return NULL;\n    }\n\n    protected static function _get_default_config()\n    {\n        if (empty(self::$configs['default']))\n        {\n            if (!is_array($GLOBALS['config']['redis']))\n            {\n                exit('cls_redis.php _get_default_config()' . '没有redis配置');\n            }\n            self::$configs['default'] = $GLOBALS['config']['redis'];\n        }\n        return self::$configs['default'];\n    }\n\n    public static function clear_link()\n    {\n        if(self::$links) \n        {\n            foreach(self::$links as $k=>$v)\n            {\n                $v->close();\n                unset(self::$links[$k]);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "matched_results": [
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!extension_loaded('redis')) {\n            self::$error = 'Redis extension is not loaded.';\n            return false;\n        }\n\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        $config = self::$configs[self::$link_name];\n        if (isset(self::$links[self::$link_name]) && self::$links[self::$link_name]->ping()) {\n            return self::$links[self::$link_name];\n        }\n\n        try {\n            $redis = new Redis();\n            $redis->connect($config['host'], $config['port']);\n            if (isset($config['password'])) {\n                $redis->auth($config['password']);\n            }\n            self::$links[self::$link_name] = $redis;\n            return $redis;\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->get($key);\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->del($key);\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    static function init() {\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n        $config = self::$configs[self::$link_name];\n        try {\n            if (!isset(self::$links[self::$link_name]) || !self::$links[self::$link_name]->ping()) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (isset($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            if ($expire > 0) {\n                return $redis->setex($key, $expire, $value);\n            } else {\n                return $redis->set($key, $value);\n            }\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            return $redis->del($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!extension_loaded('redis')) {\n            self::$error = 'Redis extension is not loaded.';\n            return false;\n        }\n\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        $config = self::$configs[self::$link_name];\n\n        try {\n            if (!isset(self::$links[self::$link_name])) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (isset($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            if ($expire > 0) {\n                return $redis->setex($key, $expire, $value);\n            } else {\n                return $redis->set($key, $value);\n            }\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            return $redis->del($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    static function init() {\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n        $config = self::$configs[self::$link_name];\n        try {\n            if (!isset(self::$links[self::$link_name]) || !self::$links[self::$link_name]->ping()) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (isset($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            if ($expire > 0) {\n                return $redis->setex($key, $expire, $value);\n            } else {\n                return $redis->set($key, $value);\n            }\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            return $redis->del($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!extension_loaded('redis')) {\n            self::$error = 'Redis extension is not loaded.';\n            return false;\n        }\n\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        $config = self::$configs[self::$link_name];\n\n        try {\n            if (!isset(self::$links[self::$link_name]) || !self::$links[self::$link_name]->ping()) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (isset($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->get($key);\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->del($key);\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    static function init() {\n        if (isset(self::$links[self::$link_name])) {\n            return self::$links[self::$link_name];\n        }\n\n        $config = self::_get_default_config();\n        if (!$config) {\n            self::$error = 'No configuration found for Redis.';\n            return false;\n        }\n\n        try {\n            $redis = new Redis();\n            $redis->connect($config['host'], $config['port']);\n            if (isset($config['password'])) {\n                $redis->auth($config['password']);\n            }\n            self::$links[self::$link_name] = $redis;\n            return $redis;\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            if ($expire > 0) {\n                return $redis->setex($key, $expire, $value);\n            } else {\n                return $redis->set($key, $value);\n            }\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        try {\n            return $redis->del($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    static function _get_default_config() {\n        return isset($GLOBALS['config']['redis'][self::$link_name]) ? $GLOBALS['config']['redis'][self::$link_name] : [];\n    }\n\n    static function clear_link() {\n        foreach (self::$links as $name => $redis) {\n            $redis->close();\n        }\n        self::$links = [];\n    }\n}",
      "class queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!extension_loaded('redis')) {\n            self::$error = 'Redis extension is not loaded.';\n            return false;\n        }\n\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        $config = self::$configs[self::$link_name];\n\n        try {\n            if (!isset(self::$links[self::$link_name]) || !self::$links[self::$link_name]->ping()) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (isset($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->get($key);\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->del($key);\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!extension_loaded('redis')) {\n            self::$error = 'Redis extension is not loaded.';\n            return false;\n        }\n\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        $config = self::$configs[self::$link_name];\n\n        try {\n            if (!isset(self::$links[self::$link_name]) || !self::$links[self::$link_name]->ping()) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']);\n                if (!empty($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (!empty($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->get($key);\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n\n        $key = self::$prefix . $key;\n        return $redis->del($key);\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'timeout' => 2.5,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!extension_loaded('redis')) {\n            self::$error = 'Redis extension is not loaded.';\n            return false;\n        }\n\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        $config = self::$configs[self::$link_name];\n\n        try {\n            if (!isset(self::$links[self::$link_name])) {\n                self::$links[self::$link_name] = new Redis();\n                self::$links[self::$link_name]->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    self::$links[self::$link_name]->auth($config['password']);\n                }\n                if (isset($config['database'])) {\n                    self::$links[self::$link_name]->select($config['database']);\n                }\n            }\n            return self::$links[self::$link_name];\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            if ($expire > 0) {\n                return $redis->setex($key, $expire, $value);\n            } else {\n                return $redis->set($key, $value);\n            }\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            return $redis->get($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        try {\n            return $redis->del($key);\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return null;\n        }\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => '',\n            'database' => 0\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}",
      "class Queue {\n    static $redis;\n    static $configs = [];\n    static $links = [];\n    static $link_name = 'default';\n    static $prefix = '';\n    static $error = '';\n\n    public static function init() {\n        if (!isset(self::$configs[self::$link_name])) {\n            self::$configs[self::$link_name] = self::_get_default_config();\n        }\n\n        if (isset(self::$links[self::$link_name]) && self::$links[self::$link_name]->ping()) {\n            return self::$links[self::$link_name];\n        }\n\n        try {\n            $config = self::$configs[self::$link_name];\n            $redis = new Redis();\n            $redis->connect($config['host'], $config['port']);\n            if (isset($config['password'])) {\n                $redis->auth($config['password']);\n            }\n            self::$links[self::$link_name] = $redis;\n            return $redis;\n        } catch (Exception $e) {\n            self::$error = $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        return $redis->get($key);\n    }\n\n    public static function del($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . $key;\n        return $redis->del($key);\n    }\n\n    private static function _get_default_config() {\n        return isset($GLOBALS['config']['redis']) ? $GLOBALS['config']['redis'] : [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Redis cache driver class for CodeIgniter that implements basic cache operations using Redis as the backend storage.\n\nClass Description: The CI_Cache_redis class extends CI_Driver and provides an interface for caching data in Redis. It handles connection management, serialization of complex data types, and standard cache operations like get, save, delete, increment, and decrement.\n\nAttributes:\n- $_default_config: [array] - Default configuration for Redis connection\n- $_redis: [Redis] - Redis client instance\n- $_serialized: [array] - Track which keys contain serialized data\n\nMethods:\n- __construct() -> [void] - Initializes Redis connection using configuration\n- get($key) -> [mixed] - Retrieves data from cache by key\n- save($id, $data, $ttl = 60, $raw = FALSE) -> [bool] - Stores data in cache with optional TTL\n- delete($key) -> [bool] - Removes data from cache by key\n- increment($id, $offset = 1) -> [int|bool] - Increments a numeric value in cache\n- decrement($id, $offset = 1) -> [int|bool] - Decrements a numeric value in cache\n- clean() -> [bool] - Clears all cache entries\n- cache_info($type = NULL) -> [array] - Returns Redis server information\n- get_metadata($key) -> [array|bool] - Returns metadata about a cache entry\n- is_supported() -> [bool] - Checks if Redis extension is loaded\n- __destruct() -> [void] - Closes Redis connection when object is destroyed",
    "Canonical_solution": "class CI_Cache_redis extends CI_Driver\n{\n    protected static $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'password' => NULL,\n        'port' => 6379,\n        'timeout' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if ( ! $this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to create Redis object; extension not loaded?');\n            return;\n        }\n\n        $CI =& get_instance();\n\n        if ($CI->config->load('redis', TRUE, TRUE))\n        {\n            $config = array_merge(self::$_default_config, $CI->config->item('redis'));\n        }\n        else\n        {\n            $config = self::$_default_config;\n        }\n\n        $this->_redis = new Redis();\n\n        try\n        {\n            if ($config['socket_type'] === 'unix')\n            {\n                $success = $this->_redis->connect($config['socket']);\n            }\n            else\n            {\n                $success = $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if ( ! $success)\n            {\n                log_message('error', 'Cache: Redis connection failed. Check your configuration.');\n            }\n\n            if (isset($config['password']) && ! $this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Redis authentication failed.');\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection refused ('.$e->getMessage().')');\n        }\n\n        $serialized = $this->_redis->sMembers('_ci_redis_serialized');\n        empty($serialized) OR $this->_serialized = array_flip($serialized);\n    }\n\n    public function get($key)\n    {\n        $value = $this->_redis->get($key);\n\n        if ($value !== FALSE && isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if (is_array($data) OR is_object($data))\n        {\n            if ( ! $this->_redis->sIsMember('_ci_redis_serialized', $id) && ! $this->_redis->sAdd('_ci_redis_serialized', $id))\n            {\n                return FALSE;\n            }\n\n            isset($this->_serialized[$id]) OR $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n        elseif (isset($this->_serialized[$id]))\n        {\n            $this->_serialized[$id] = NULL;\n            $this->_redis->sRemove('_ci_redis_serialized', $id);\n        }\n\n        return $this->_redis->set($id, $data, $ttl);\n    }\n\n    public function delete($key)\n    {\n        if ($this->_redis->delete($key) !== 1)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            $this->_serialized[$key] = NULL;\n            $this->_redis->sRemove('_ci_redis_serialized', $key);\n        }\n\n        return TRUE;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incr($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decr($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info();\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n\n        if ($value !== FALSE)\n        {\n            return array(\n                'expire' => time() + $this->_redis->ttl($key),\n                'data' => $value\n            );\n        }\n\n        return FALSE;\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "matched_results": [
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if ( ! $this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to load Redis Cache extension');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (isset($config['password']) && ! $this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Redis authentication failed');\n                return;\n            }\n\n            if (isset($config['database']) && ! $this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Failed to select Redis database');\n                return;\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection failed ('.$e->getMessage().')');\n        }\n    }\n\n    public function get($key)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        $value = $this->_redis->get($key);\n\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            $value = unserialize($value);\n            unset($this->_serialized[$key]);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        if (is_array($data) OR is_object($data))\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        if ($raw)\n        {\n            return $this->_redis->set($id, $data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        unset($this->_serialized[$key]);\n\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        if ( ! isset($this->_redis))\n        {\n            return FALSE;\n        }\n\n        $value = $this->_redis->get($key);\n\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        $filemtime = time();\n        $expire = $this->_redis->ttl($key);\n\n        return array(\n            'expire' => $expire === -1 ? NULL : $filemtime + $expire,\n            'mtime' => $filemtime,\n            'data' => $value\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->_redis))\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to create Redis object; extension not loaded.');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n        $this->_redis = new Redis();\n\n        try\n        {\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']) && !$this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Redis authentication failed.');\n                return;\n            }\n\n            if (!$this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Redis select database failed.');\n                return;\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection failed. ' . $e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE)\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n\n        if ($value !== FALSE)\n        {\n            return array(\n                'expire' => time() + $this->_redis->ttl($key),\n                'data'   => $value\n            );\n        }\n\n        return FALSE;\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis instanceof Redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to initialize Redis; extension not loaded.');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']))\n            {\n                $this->_redis->auth($config['password']);\n            }\n\n            if ($config['database'] > 0)\n            {\n                $this->_redis->select($config['database']);\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection failed. Error: '.$e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        $value = $this->_redis->get($key);\n\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        if (is_array($data) OR is_object($data))\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n        else\n        {\n            $this->_serialized[$id] = FALSE;\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        $this->_redis->flushDB();\n        $this->_serialized = array();\n        return TRUE;\n    }\n\n    public function cache_info($type = NULL)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        if (!$this->_redis)\n        {\n            return FALSE;\n        }\n\n        $value = $this->_redis->get($key);\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        $filemtime = time();\n        $expire = $this->_redis->ttl($key);\n\n        return array(\n            'expire' => $expire === -1 ? NULL : $filemtime + $expire,\n            'mtime' => $filemtime,\n            'data' => $this->get($key),\n            'raw' => isset($this->_serialized[$key]) ? $this->_serialized[$key] : FALSE\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis && $this->_redis->isConnected())\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to initialize Redis; extension not loaded.');\n            return;\n        }\n\n        $this->_redis = new Redis();\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']))\n            {\n                $this->_redis->auth($config['password']);\n            }\n\n            if ($config['database'] > 0)\n            {\n                $this->_redis->select($config['database']);\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection failed. Error: ' . $e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE && !is_string($data))\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n        else\n        {\n            unset($this->_serialized[$id]);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n        if ($value !== FALSE)\n        {\n            return array(\n                'expire' => time() + $this->_redis->ttl($key),\n                'data'   => $value\n            );\n        }\n\n        return FALSE;\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis instanceof Redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to create Redis object; extension not loaded.');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']) && !$this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Failed to authenticate with Redis server.');\n                return;\n            }\n\n            if (!$this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Failed to select Redis database.');\n                return;\n            }\n        }\n        catch (Exception $e)\n        {\n            log_message('error', 'Cache: Redis error: '.$e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE)\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        return array(\n            'expire' => time() + $this->_redis->ttl($key),\n            'data'   => $value\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if (is_resource($this->_redis))\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to initialize Redis; extension not loaded.');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout'], 'ci_redis_persistent');\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']) && !$this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Failed to authenticate with Redis server.');\n                return;\n            }\n\n            if (!$this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Failed to select Redis database.');\n                return;\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis error: '.$e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE && !is_string($data))\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n        else\n        {\n            unset($this->_serialized[$id]);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrby($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrby($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushdb();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        return array(\n            'expire' => time() + $this->_redis->ttl($key),\n            'data'   => $value\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis instanceof Redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'timeout' => 0,\n        'password' => NULL,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to create Redis object; extension not loaded?');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']) && !$this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Redis authentication failed.');\n                return;\n            }\n\n            if (!$this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Redis select database failed.');\n                return;\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis connection failed. ' . $e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE)\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        return array(\n            'expire' => time() + $this->_redis->ttl($key),\n            'data'   => $value\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'timeout' => 0,\n        'password' => NULL,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to load Redis extension');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']) && !$this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Failed to authenticate with Redis server');\n                return;\n            }\n\n            if (!$this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Failed to select Redis database');\n                return;\n            }\n        }\n        catch (Exception $e)\n        {\n            log_message('error', 'Cache: Redis connection failed ('.$e->getMessage().')');\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE)\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n        if ($value !== FALSE)\n        {\n            return array(\n                'expire' => time() + $this->_redis->ttl($key),\n                'data'   => $value\n            );\n        }\n\n        return FALSE;\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if (is_resource($this->_redis))\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if ( ! $this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to load Redis Cache extension');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_cache_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout']);\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (isset($config['password']) && ! $this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Failed to authenticate with Redis server');\n                return;\n            }\n\n            if (isset($config['database']) && ! $this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Failed to select Redis database');\n                return;\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis error - '.$e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE)\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->get($key);\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        return array(\n            'expire' => time() + $this->_redis->ttl($key),\n            'data'   => $value\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if ($this->_redis)\n        {\n            $this->_redis->close();\n        }\n    }\n}",
      "class CI_Cache_redis extends CI_Driver {\n\n    protected $_default_config = array(\n        'socket_type' => 'tcp',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'password' => NULL,\n        'timeout' => 0,\n        'persistent' => FALSE,\n        'database' => 0\n    );\n\n    protected $_redis;\n    protected $_serialized = array();\n\n    public function __construct()\n    {\n        if (!$this->is_supported())\n        {\n            log_message('error', 'Cache: Failed to create Redis object; extension not loaded.');\n            return;\n        }\n\n        $config = array_merge($this->_default_config, $this->_get_config());\n\n        try\n        {\n            $this->_redis = new Redis();\n            if ($config['persistent'])\n            {\n                $this->_redis->pconnect($config['host'], $config['port'], $config['timeout'], 'ci_redis_persistent');\n            }\n            else\n            {\n                $this->_redis->connect($config['host'], $config['port'], $config['timeout']);\n            }\n\n            if (!empty($config['password']) && !$this->_redis->auth($config['password']))\n            {\n                log_message('error', 'Cache: Failed to authenticate with Redis server.');\n                return;\n            }\n\n            if (!$this->_redis->select($config['database']))\n            {\n                log_message('error', 'Cache: Failed to select Redis database.');\n                return;\n            }\n        }\n        catch (RedisException $e)\n        {\n            log_message('error', 'Cache: Redis error: '.$e->getMessage());\n        }\n    }\n\n    public function get($key)\n    {\n        if (($value = $this->_redis->get($key)) === FALSE)\n        {\n            return FALSE;\n        }\n\n        if (isset($this->_serialized[$key]))\n        {\n            return unserialize($value);\n        }\n\n        return $value;\n    }\n\n    public function save($id, $data, $ttl = 60, $raw = FALSE)\n    {\n        if ($raw === FALSE)\n        {\n            $this->_serialized[$id] = TRUE;\n            $data = serialize($data);\n        }\n\n        return $this->_redis->setex($id, $ttl, $data);\n    }\n\n    public function delete($key)\n    {\n        unset($this->_serialized[$key]);\n        return $this->_redis->del($key) > 0;\n    }\n\n    public function increment($id, $offset = 1)\n    {\n        return $this->_redis->incrBy($id, $offset);\n    }\n\n    public function decrement($id, $offset = 1)\n    {\n        return $this->_redis->decrBy($id, $offset);\n    }\n\n    public function clean()\n    {\n        return $this->_redis->flushDB();\n    }\n\n    public function cache_info($type = NULL)\n    {\n        return $this->_redis->info($type);\n    }\n\n    public function get_metadata($key)\n    {\n        $value = $this->_redis->dump($key);\n        if ($value === FALSE)\n        {\n            return FALSE;\n        }\n\n        return array(\n            'expire' => $this->_redis->ttl($key),\n            'data'   => $value\n        );\n    }\n\n    public function is_supported()\n    {\n        return extension_loaded('redis');\n    }\n\n    public function __destruct()\n    {\n        if (is_resource($this->_redis))\n        {\n            $this->_redis->close();\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Redis wrapper class in PHP that provides a simplified interface for connecting to and interacting with a Redis server, including connection management, basic operations, and error handling.\n\nClass Description: The cls_redis class is a singleton-style wrapper for PHP's Redis extension that manages Redis connections, provides common Redis operations, and handles connection errors gracefully. It supports multiple connection configurations, automatic reconnection on failure, and key prefixing.\n\nAttributes:\n\nAttribute1: protected static $redis - Redis - Singleton Redis instance (deprecated)\nAttribute2: protected static $configs - array - Stores Redis connection configurations\nAttribute3: private static $links - array - Maintains active Redis connections\nAttribute4: private static $link_name - string - Current connection name (default 'default')\nAttribute5: public static $prefix - string - Default key prefix ('phpspider')\nAttribute6: public static $error - string - Stores last error message\n\nMethods:\n\nMethod1: init() -> Redis|false - Initializes and returns a Redis connection instance\nMethod2: set(string $key, mixed $value, int $expire = 0) -> bool|null - Stores a value in Redis with optional expiration\nMethod3: get(string $key) -> mixed|null - Retrieves a value from Redis by key\nMethod4: clear_link() -> void - Closes all active Redis connections\nMethod5: _get_default_config() -> array - Retrieves default Redis configuration from global settings",
    "Canonical_solution": "class cls_redis\n{\n    protected static $redis = NULL;\n    protected static $configs = array();\n    private static $links = array();\n    private static $link_name = 'default';\n    public static $prefix = \"phpspider\";\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!extension_loaded(\"redis\"))\n        {\n            self::$error = \"The redis extension was not found\";\n            return false;\n        }\n\n        $config = self::$link_name == 'default' ? self::_get_default_config() : self::$configs[self::$link_name];\n\n        if (empty(self::$links[self::$link_name]))\n        {\n            self::$links[self::$link_name] = new Redis();\n            if (!self::$links[self::$link_name]->connect($config['host'], $config['port'], $config['timeout']))\n            {\n                self::$error = \"Unable to connect to redis server\\nPlease check the configuration file config/inc_config.php\";\n                unset(self::$links[self::$link_name]);\n                return false;\n            }\n\n            if ($config['pass'])\n            {\n                if (!self::$links[self::$link_name]->auth($config['pass'])) \n                {\n                    self::$error = \"Redis Server authentication failed\\nPlease check the configuration file config/inc_config.php\";\n                    unset(self::$links[self::$link_name]);\n                    return false;\n                }\n            }\n\n            $prefix = empty($config['prefix']) ? self::$prefix : $config['prefix'];\n            self::$links[self::$link_name]->setOption(Redis::OPT_PREFIX, $prefix . \":\");\n            self::$links[self::$link_name]->setOption(Redis::OPT_READ_TIMEOUT, -1);\n            self::$links[self::$link_name]->select($config['db']);\n        }\n\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                if ($expire > 0)\n                {\n                    return self::$links[self::$link_name]->setex($key, $expire, $value);\n                }\n                else\n                {\n                    return self::$links[self::$link_name]->set($key, $value);\n                }\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::set($key, $value, $expire);\n            }\n        }\n        return NULL;\n    }\n\n    public static function get($key)\n    {\n        self::init();\n        try\n        {\n            if (self::$links[self::$link_name])\n            {\n                return self::$links[self::$link_name]->get($key);\n            }\n        }\n        catch (Exception $e)\n        {\n            $msg = \"PHP Fatal error: Uncaught exception 'RedisException' with message '\".$e->getMessage().\"'\\n\";\n            log::warn($msg);\n            if ($e->getCode() == 0) \n            {\n                self::$links[self::$link_name]->close();\n                self::$links[self::$link_name] = null;\n                usleep(100000);\n                return self::get($key);\n            }\n        }\n        return NULL;\n    }\n\n    public static function clear_link()\n    {\n        if(self::$links) \n        {\n            foreach(self::$links as $k=>$v)\n            {\n                $v->close();\n                unset(self::$links[$k]);\n            }\n        }\n    }\n\n    protected static function _get_default_config()\n    {\n        if (empty(self::$configs['default']))\n        {\n            if (!is_array($GLOBALS['config']['redis']))\n            {\n                exit('cls_redis.php _get_default_config()' . '没有redis配置');\n            }\n            self::$configs['default'] = $GLOBALS['config']['redis'];\n        }\n        return self::$configs['default'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 144,
    "matched_results": [
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should retrieve the default Redis configuration from global settings\n        // For demonstration purposes, we'll return a hardcoded configuration\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should be implemented to retrieve default Redis configuration\n        // For example, it could fetch from a global configuration array\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if (!$redis) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should retrieve default Redis configuration from global settings\n        // For demonstration purposes, returning a hardcoded configuration\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should be implemented to retrieve default Redis configuration\n        // For example, from a global configuration array or environment variables\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should be implemented to fetch default configuration\n        // For demonstration, returning a static array\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should retrieve default Redis configuration from global settings\n        // For demonstration purposes, returning a static array\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should retrieve default Redis configuration from global settings\n        // For demonstration purposes, returning a hardcoded configuration\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should be implemented to retrieve default Redis configuration\n        // For example, from a global configuration array or environment variables\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}",
      "class cls_redis {\n    protected static $redis;\n    protected static $configs = [];\n    private static $links = [];\n    private static $link_name = 'default';\n    public static $prefix = 'phpspider';\n    public static $error = '';\n\n    public static function init() {\n        if (!isset(self::$links[self::$link_name])) {\n            $config = self::_get_default_config();\n            try {\n                $redis = new Redis();\n                $redis->connect($config['host'], $config['port']);\n                if (isset($config['password']) && !empty($config['password'])) {\n                    $redis->auth($config['password']);\n                }\n                self::$links[self::$link_name] = $redis;\n            } catch (Exception $e) {\n                self::$error = $e->getMessage();\n                return false;\n            }\n        }\n        return self::$links[self::$link_name];\n    }\n\n    public static function set($key, $value, $expire = 0) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        if ($expire > 0) {\n            return $redis->setex($key, $expire, $value);\n        } else {\n            return $redis->set($key, $value);\n        }\n    }\n\n    public static function get($key) {\n        $redis = self::init();\n        if ($redis === false) {\n            return null;\n        }\n        $key = self::$prefix . ':' . $key;\n        return $redis->get($key);\n    }\n\n    public static function clear_link() {\n        foreach (self::$links as $link) {\n            $link->close();\n        }\n        self::$links = [];\n    }\n\n    private static function _get_default_config() {\n        // This method should be implemented to retrieve default configuration\n        // For demonstration, returning a static array\n        return [\n            'host' => '127.0.0.1',\n            'port' => 6379,\n            'password' => ''\n        ];\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a PHP class that implements a Redis client connection using TCP sockets and the phpiredis extension for efficient communication with a Redis server.\n\nClass Description: PhpiredisSocketConnection is a Redis client connection class that handles TCP socket communication with a Redis server. It manages socket creation, connection, data transmission, and response parsing using the phpiredis extension for optimal performance.\n\nAttributes:\n- reader: [resource] - The phpiredis reader resource used for parsing Redis protocol responses\n- parameters: [ParametersInterface] - Connection parameters including host, port, timeout, etc.\n\nMethods:\n- __construct(ParametersInterface $parameters) -> [void] - Initializes the connection and verifies required extensions\n- __destruct() -> [void] - Cleans up resources when the object is destroyed\n- assertExtensions() -> [void] - Verifies required PHP extensions are loaded\n- createReader() -> [resource] - Creates and configures a phpiredis reader resource\n- getStatusHandler() -> [callable] - Returns the handler for status responses\n- getErrorHandler() -> [callable] - Returns the handler for error responses\n- createResource() -> [resource] - Creates and connects the socket resource\n- connectWithTimeout(resource $socket, string $address, ParametersInterface $parameters) -> [void] - Establishes connection with timeout handling\n- write(string $buffer) -> [void] - Writes data to the socket connection\n- read() -> [mixed] - Reads and parses response from the server\n- writeRequest(CommandInterface $command) -> [void] - Formats and writes a Redis command to the server",
    "Canonical_solution": "use Predis\\Command\\CommandInterface;\nuse Predis\\NotSupportedException;\nuse Predis\\Response\\Error as ErrorResponse;\nuse Predis\\Response\\ErrorInterface as ErrorResponseInterface;\nuse Predis\\Response\\Status as StatusResponse;\n\nclass PhpiredisSocketConnection extends AbstractConnection\n{\n    private $reader;\n\n    public function __construct(ParametersInterface $parameters)\n    {\n        $this->assertExtensions();\n        parent::__construct($parameters);\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct()\n    {\n        parent::__destruct();\n        phpiredis_reader_destroy($this->reader);\n    }\n\n    protected function assertExtensions()\n    {\n        if (!extension_loaded('sockets')) {\n            throw new NotSupportedException(\n                'The \"sockets\" extension is required by this connection backend.'\n            );\n        }\n\n        if (!extension_loaded('phpiredis')) {\n            throw new NotSupportedException(\n                'The \"phpiredis\" extension is required by this connection backend.'\n            );\n        }\n    }\n\n    private function createReader()\n    {\n        $reader = phpiredis_reader_create();\n        phpiredis_reader_set_status_handler($reader, $this->getStatusHandler());\n        phpiredis_reader_set_error_handler($reader, $this->getErrorHandler());\n        return $reader;\n    }\n\n    protected function getStatusHandler()\n    {\n        static $statusHandler;\n\n        if (!$statusHandler) {\n            $statusHandler = function ($payload) {\n                return StatusResponse::get($payload);\n            };\n        }\n\n        return $statusHandler;\n    }\n\n    protected function getErrorHandler()\n    {\n        static $errorHandler;\n\n        if (!$errorHandler) {\n            $errorHandler = function ($errorMessage) {\n                return new ErrorResponse($errorMessage);\n            };\n        }\n\n        return $errorHandler;\n    }\n\n    protected function createResource()\n    {\n        $parameters = $this->parameters;\n\n        if ($parameters->scheme === 'unix') {\n            $address = $parameters->path;\n            $domain = AF_UNIX;\n            $protocol = 0;\n        } else {\n            if (false === $address = self::getAddress($parameters)) {\n                $this->onConnectionError(\"Cannot resolve the address of '$parameters->host'.\");\n            }\n\n            $domain = filter_var($address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) ? AF_INET6 : AF_INET;\n            $protocol = SOL_TCP;\n        }\n\n        if (false === $socket = @socket_create($domain, SOCK_STREAM, $protocol)) {\n            $this->emitSocketError();\n        }\n\n        $this->setSocketOptions($socket, $parameters);\n        $this->connectWithTimeout($socket, $address, $parameters);\n\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters)\n    {\n        socket_set_nonblock($socket);\n\n        if (@socket_connect($socket, $address, (int) $parameters->port) === false) {\n            $error = socket_last_error();\n            if ($error != SOCKET_EINPROGRESS && $error != SOCKET_EALREADY) {\n                $this->emitSocketError();\n            }\n        }\n\n        socket_set_block($socket);\n\n        $null = null;\n        $selectable = array($socket);\n\n        $timeout = (isset($parameters->timeout) ? (float) $parameters->timeout : 5.0);\n        $timeoutSecs = floor($timeout);\n        $timeoutUSecs = ($timeout - $timeoutSecs) * 1000000;\n\n        $selected = socket_select($selectable, $selectable, $null, $timeoutSecs, $timeoutUSecs);\n\n        if ($selected === 2) {\n            $this->onConnectionError('Connection refused.', SOCKET_ECONNREFUSED);\n        }\n\n        if ($selected === 0) {\n            $this->onConnectionError('Connection timed out.', SOCKET_ETIMEDOUT);\n        }\n\n        if ($selected === false) {\n            $this->emitSocketError();\n        }\n    }\n\n    protected function write($buffer)\n    {\n        $socket = $this->getResource();\n\n        while (($length = strlen($buffer)) > 0) {\n            $written = socket_write($socket, $buffer, $length);\n\n            if ($length === $written) {\n                return;\n            }\n\n            if ($written === false) {\n                $this->onConnectionError('Error while writing bytes to the server.');\n            }\n\n            $buffer = substr($buffer, $written);\n        }\n    }\n\n    public function read()\n    {\n        $socket = $this->getResource();\n        $reader = $this->reader;\n\n        while (PHPIREDIS_READER_STATE_INCOMPLETE === $state = phpiredis_reader_get_state($reader)) {\n            if (@socket_recv($socket, $buffer, 4096, 0) === false || $buffer === '' || $buffer === null) {\n                $this->emitSocketError();\n            }\n\n            phpiredis_reader_feed($reader, $buffer);\n        }\n\n        if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n            return phpiredis_reader_get_reply($reader);\n        } else {\n            $this->onProtocolError(phpiredis_reader_get_error($reader));\n            return;\n        }\n    }\n\n    public function writeRequest(CommandInterface $command)\n    {\n        $arguments = $command->getArguments();\n        array_unshift($arguments, $command->getId());\n        $this->write(phpiredis_format_command($arguments));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "matched_results": [
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('The phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return $status;\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket: ' . socket_strerror(socket_last_error()));\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server: ' . socket_strerror(socket_last_error($socket)));\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        $result = socket_write($socket, $buffer, strlen($buffer));\n        if ($result === false) {\n            throw new Exception('Failed to write to socket: ' . socket_strerror(socket_last_error($socket)));\n        }\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $part = socket_read($socket, 1024);\n            if ($part === false) {\n                throw new Exception('Failed to read from socket: ' . socket_strerror(socket_last_error($socket)));\n            }\n            $response .= $part;\n        } while ($part !== '');\n        socket_close($socket);\n        phpiredis_reader_feed($this->reader, $response);\n        $result = phpiredis_reader_get_reply($this->reader);\n        if (phpiredis_reader_get_state($this->reader) === PHPIREDIS_READER_STATE_ERROR) {\n            throw new Exception(phpiredis_reader_get_error($this->reader));\n        }\n        return $result;\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('phpiredis extension is not loaded');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return ['status' => $status];\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket');\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server');\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        socket_write($socket, $buffer, strlen($buffer));\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $chunk = socket_read($socket, 4096);\n            if ($chunk === false) {\n                throw new Exception('Failed to read from socket');\n            }\n            $response .= $chunk;\n        } while (!phpiredis_reader_feed($this->reader, $response));\n        $result = phpiredis_reader_get_reply($this->reader);\n        socket_close($socket);\n        return $result;\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return ['status' => $status];\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception(\"Redis error: $error\");\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket.');\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server.');\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        $result = socket_write($socket, $buffer, strlen($buffer));\n        if ($result === false) {\n            throw new Exception('Failed to write to socket.');\n        }\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        while (true) {\n            $part = socket_read($socket, 1024);\n            if ($part === false) {\n                throw new Exception('Failed to read from socket.');\n            }\n            $response .= $part;\n            $state = phpiredis_reader_feed($this->reader, $response);\n            if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n                break;\n            } elseif ($state === PHPIREDIS_READER_STATE_ERROR) {\n                throw new Exception('Error reading response from Redis server.');\n            }\n        }\n        socket_close($socket);\n        return phpiredis_reader_get_reply($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('phpiredis extension is not loaded');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return ['status' => $status];\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception('Redis error: ' . $error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket');\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server');\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        socket_write($socket, $buffer, strlen($buffer));\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $chunk = socket_read($socket, 4096);\n            if ($chunk === false) {\n                throw new Exception('Failed to read from socket');\n            }\n            $response .= $chunk;\n            phpiredis_reader_feed($this->reader, $response);\n            $state = phpiredis_reader_get_state($this->reader);\n        } while ($state === PHPIREDIS_READER_STATE_INCOMPLETE);\n        socket_close($socket);\n\n        if ($state === PHPIREDIS_READER_STATE_ERROR) {\n            $errorHandler = $this->getErrorHandler();\n            return $errorHandler(phpiredis_reader_get_error($this->reader));\n        }\n\n        return phpiredis_reader_get_reply($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('phpiredis extension is not loaded');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return ['status' => $status];\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket');\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $this->parameters);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters) {\n        $timeout = $parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server');\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        if (false === socket_write($socket, $buffer, strlen($buffer))) {\n            throw new Exception('Failed to write to socket');\n        }\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $part = socket_read($socket, 1024);\n            if ($part === false) {\n                throw new Exception('Failed to read from socket');\n            }\n            $response .= $part;\n        } while ($part !== '');\n        socket_close($socket);\n\n        phpiredis_reader_feed($this->reader, $response);\n        $result = phpiredis_reader_get_reply($this->reader);\n        if (phpiredis_reader_get_state($this->reader) !== PHPIREDIS_READER_STATE_COMPLETE) {\n            throw new Exception('Incomplete response from Redis server');\n        }\n        return $result;\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_free($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return ['status' => $status];\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception(\"Redis error: $error\");\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket.');\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server.');\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        socket_write($socket, $buffer, strlen($buffer));\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        while (true) {\n            $chunk = socket_read($socket, 4096);\n            if ($chunk === false) {\n                throw new Exception('Failed to read from socket.');\n            }\n            $response .= $chunk;\n            $state = phpiredis_reader_feed($this->reader, $response);\n            if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n                break;\n            } elseif ($state !== PHPIREDIS_READER_STATE_OK) {\n                throw new Exception('Error reading response from Redis server.');\n            }\n        }\n        socket_close($socket);\n        return phpiredis_reader_get_reply($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('The phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return ['status' => $status];\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception(\"Redis error: $error\");\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket.');\n        }\n        $address = $this->parameters->getHost();\n        $this->connectWithTimeout($socket, $address, $this->parameters);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters) {\n        $port = $parameters->getPort();\n        $timeout = $parameters->getTimeout();\n        socket_set_nonblock($socket);\n        $result = @socket_connect($socket, $address, $port);\n        if ($result === false && socket_last_error($socket) !== SOCKET_EINPROGRESS) {\n            throw new Exception('Failed to connect to Redis server.');\n        }\n        $start = microtime(true);\n        while (!@socket_getpeername($socket, $address, $port)) {\n            $now = microtime(true);\n            if ($now - $start > $timeout) {\n                throw new Exception('Connection timed out.');\n            }\n            usleep(10000); // 10 ms\n        }\n        socket_set_block($socket);\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        $written = socket_write($socket, $buffer, strlen($buffer));\n        if ($written === false || $written !== strlen($buffer)) {\n            throw new Exception('Failed to write to socket.');\n        }\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $part = socket_read($socket, 8192);\n            if ($part === false) {\n                throw new Exception('Failed to read from socket.');\n            }\n            $response .= $part;\n        } while (!phpiredis_reader_feed($this->reader, $response));\n        $result = phpiredis_reader_get_reply($this->reader);\n        socket_close($socket);\n        return $result;\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('The phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return $status;\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket: ' . socket_strerror(socket_last_error()));\n        }\n        $address = gethostbyname($this->parameters->getHost());\n        $this->connectWithTimeout($socket, $address, $this->parameters);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, ParametersInterface $parameters) {\n        $timeout = $parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $parameters->getPort())) {\n            throw new Exception('Failed to connect to Redis server: ' . socket_strerror(socket_last_error($socket)));\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        $bytesWritten = socket_write($socket, $buffer, strlen($buffer));\n        if ($bytesWritten === false) {\n            throw new Exception('Failed to write to socket: ' . socket_strerror(socket_last_error($socket)));\n        }\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $part = socket_read($socket, 1024);\n            if ($part === false) {\n                throw new Exception('Failed to read from socket: ' . socket_strerror(socket_last_error($socket)));\n            }\n            $response .= $part;\n        } while ($part !== '');\n        socket_close($socket);\n\n        phpiredis_reader_feed($this->reader, $response);\n        $result = phpiredis_reader_get_reply($this->reader);\n        if (phpiredis_reader_get_state($this->reader) === PHPIREDIS_READER_STATE_ERROR) {\n            $errorHandler = $this->getErrorHandler();\n            $errorHandler(phpiredis_reader_get_error($this->reader));\n        }\n        return $result;\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('The phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return $status;\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if ($socket === false) {\n            throw new Exception(socket_strerror(socket_last_error()));\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception(socket_strerror(socket_last_error($socket)));\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        socket_write($socket, $buffer, strlen($buffer));\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        while (true) {\n            $chunk = socket_read($socket, 4096);\n            if ($chunk === false) {\n                throw new Exception(socket_strerror(socket_last_error($socket)));\n            }\n            $response .= $chunk;\n            $state = phpiredis_reader_feed($this->reader, $response);\n            if ($state === PHPIREDIS_READER_STATE_COMPLETE) {\n                break;\n            } elseif ($state !== PHPIREDIS_READER_STATE_OK) {\n                throw new Exception('Error reading response');\n            }\n        }\n        socket_close($socket);\n        return phpiredis_reader_get_reply($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->toRedisProtocol();\n        $this->write($buffer);\n    }\n}",
      "class PhpiredisSocketConnection {\n    private $reader;\n    private $parameters;\n\n    public function __construct(ParametersInterface $parameters) {\n        $this->assertExtensions();\n        $this->parameters = $parameters;\n        $this->reader = $this->createReader();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->reader)) {\n            phpiredis_reader_destroy($this->reader);\n        }\n    }\n\n    private function assertExtensions() {\n        if (!extension_loaded('phpiredis')) {\n            throw new Exception('The phpiredis extension is not loaded.');\n        }\n    }\n\n    private function createReader() {\n        return phpiredis_reader_create();\n    }\n\n    private function getStatusHandler() {\n        return function ($status) {\n            return $status;\n        };\n    }\n\n    private function getErrorHandler() {\n        return function ($error) {\n            throw new Exception($error);\n        };\n    }\n\n    private function createResource() {\n        $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!$socket) {\n            throw new Exception('Failed to create socket.');\n        }\n        $address = $this->parameters->getHost();\n        $port = $this->parameters->getPort();\n        $this->connectWithTimeout($socket, $address, $port);\n        return $socket;\n    }\n\n    private function connectWithTimeout($socket, $address, $port) {\n        $timeout = $this->parameters->getTimeout();\n        socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $timeout, 'usec' => 0]);\n        if (!socket_connect($socket, $address, $port)) {\n            throw new Exception('Failed to connect to Redis server.');\n        }\n    }\n\n    private function write($buffer) {\n        $socket = $this->createResource();\n        socket_write($socket, $buffer, strlen($buffer));\n        socket_close($socket);\n    }\n\n    private function read() {\n        $socket = $this->createResource();\n        $response = '';\n        do {\n            $part = socket_read($socket, 8192);\n            if ($part === false) {\n                throw new Exception('Failed to read from socket.');\n            }\n            $response .= $part;\n            phpiredis_reader_feed($this->reader, $response);\n        } while (phpiredis_reader_get_state($this->reader) !== PHPIREDIS_READER_STATE_COMPLETE);\n        socket_close($socket);\n        return phpiredis_reader_get_reply($this->reader);\n    }\n\n    public function writeRequest(CommandInterface $command) {\n        $buffer = $command->serialize();\n        $this->write($buffer);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Implement a Radius class in PHP that handles RADIUS protocol communication for authentication and accounting purposes using UDP sockets.\n\nClass Description: The Radius class provides functionality to communicate with a RADIUS server for authentication (Access-Request) and accounting operations. It handles packet construction, socket communication, and response parsing according to RADIUS protocol standards.\n\nAttributes:\n\n_ip_radius_server: [string] - IP address of the RADIUS server\n_shared_secret: [string] - Shared secret for communication with RADIUS server\n_radius_suffix: [string] - Suffix to append to usernames\n_udp_timeout: [int] - Timeout for UDP operations in seconds\n_authentication_port: [int] - Port for authentication requests (default 1812)\n_accounting_port: [int] - Port for accounting requests (default 1813)\n_nas_ip_address: [string] - NAS IP address to send in requests\n_nas_port: [int] - NAS port to send in requests\n_encrypted_password: [string] - Encrypted password for authentication\n_user_ip_address: [string] - User's IP address\n_request_authenticator: [string] - Request authenticator value\n_response_authenticator: [string] - Response authenticator value\n_username: [string] - Username for authentication\n_password: [string] - Password for authentication\n_identifier_to_send: [int] - Packet identifier to send\n_identifier_received: [int] - Received packet identifier\n_radius_packet_to_send: [int] - RADIUS packet code to send\n_radius_packet_received: [int] - Received RADIUS packet code\n_attributes_to_send: [array] - Attributes to include in outgoing packets\n_attributes_received: [array] - Attributes received from server\n_socket_to_server: [resource] - Socket connection to server\n_debug_mode: [bool] - Debug mode flag\ndebug_text: [array] - Debug messages\n_attributes_info: [array] - RADIUS attribute information\n_radius_packet_info: [array] - RADIUS packet type information\n_last_error_code: [int] - Last error code\n_last_error_message: [string] - Last error message\n\nMethods:\n\n__construct: [function]($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) -> [void] - Initializes the Radius object with server details and default values\n\nAccessRequest: [function]($username = '', $password = '', $udp_timeout = 0, $state = NULL) -> [bool] - Sends an Access-Request to the RADIUS server and returns true if authentication is successful (Access-Accept received)\n\nSetIpRadiusServer: [function]($ip_radius_server) -> [void] - Sets the RADIUS server IP address\n\nSetSharedSecret: [function]($shared_secret) -> [void] - Sets the shared secret for RADIUS communication\n\nSetAuthenticationPort: [function]($authentication_port) -> [void] - Sets the authentication port\n\nSetAccountingPort: [function]($accounting_port) -> [void] - Sets the accounting port\n\nSetRadiusSuffix: [function]($radius_suffix) -> [void] - Sets the username suffix\n\nSetUdpTimeout: [function]($udp_timeout) -> [void] - Sets the UDP timeout value\n\nSetUsername: [function]($username = '') -> [void] - Sets the username for authentication\n\nSetPassword: [function]($password = '') -> [void] - Sets the password for authentication\n\nSetNasIpAddress: [function]($nas_ip_address = '') -> [void] - Sets the NAS IP address\n\nSetNasPort: [function]($nas_port = 0) -> [void] - Sets the NAS port\n\nSetPacketCodeToSend: [function]($packet_code) -> [void] - Sets the RADIUS packet code to send\n\nSetAttribute: [function]($attribute_type, $attribute_value) -> [void] - Adds an attribute to the outgoing packet\n\nGetNextIdentifier: [function]() -> [int] - Returns the next packet identifier\n\nGenerateRequestAuthenticator: [function]() -> [void] - Generates a new request authenticator\n\nDecodeAttribute: [function]($attribute_raw_value, $attribute_type) -> [mixed] - Decodes a received attribute value\n\nClearLastError: [function]() -> [void] - Clears the last error information\n\nClearDataToSend: [function]() -> [void] - Clears all data to be sent\n\nClearDataReceived: [function]() -> [void] - Clears all received data",
    "Canonical_solution": "class Radius\n{\n    var $_ip_radius_server;\n    var $_shared_secret;\n    var $_radius_suffix;\n    var $_udp_timeout;\n    var $_authentication_port;\n    var $_accounting_port;\n    var $_nas_ip_address;\n    var $_nas_port;\n    var $_encrypted_password;\n    var $_user_ip_address;\n    var $_request_authenticator;\n    var $_response_authenticator;\n    var $_username;\n    var $_password;\n    var $_identifier_to_send;\n    var $_identifier_received;\n    var $_radius_packet_to_send;\n    var $_radius_packet_received;\n    var $_attributes_to_send;\n    var $_attributes_received;\n    var $_socket_to_server;\n    var $_debug_mode;\n    var $debug_text = [];\n    var $_attributes_info;\n    var $_radius_packet_info;\n    var $_last_error_code;\n    var $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813)\n    {\n        $this->_radius_packet_info[1] = 'Access-Request';\n        $this->_radius_packet_info[2] = 'Access-Accept';\n        $this->_radius_packet_info[3] = 'Access-Reject';\n        $this->_radius_packet_info[4] = 'Accounting-Request';\n        $this->_radius_packet_info[5] = 'Accounting-Response';\n        $this->_radius_packet_info[11] = 'Access-Challenge';\n        $this->_radius_packet_info[12] = 'Status-Server (experimental)';\n        $this->_radius_packet_info[13] = 'Status-Client (experimental)';\n        $this->_radius_packet_info[255] = 'Reserved';\n\n        $this->_identifier_to_send = 0;\n        $this->_user_ip_address = (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '0.0.0.0');\n\n        $this->GenerateRequestAuthenticator();\n        $this->SetIpRadiusServer($ip_radius_server);\n        $this->SetSharedSecret($shared_secret);\n        $this->SetAuthenticationPort($authentication_port);\n        $this->SetAccountingPort($accounting_port);\n        $this->SetRadiusSuffix($radius_suffix);\n        $this->SetUdpTimeout($udp_timeout);\n        $this->SetUsername();\n        $this->SetPassword();\n        $this->SetNasIpAddress();\n        $this->SetNasPort();\n\n        $this->ClearLastError();\n        $this->ClearDataToSend();\n        $this->ClearDataReceived();\n    }\n\n    function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL)\n    {\n        $this->ClearDataReceived();\n        $this->ClearLastError();\n\n        $this->SetPacketCodeToSend(1);\n\n        if (0 < strlen($username))\n        {\n            $this->SetUsername($username);\n        }\n\n        if (0 < strlen($password))\n        {\n            $this->SetPassword($password);\n        }\n\n        if ($state !== NULL)\n        {\n            $this->SetAttribute(24, $state);\n        }\n        else\n        {\n            $this->SetAttribute(6, 1);\n        }\n\n        if (intval($udp_timeout) > 0)\n        {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n\n        $attributes_content = '';\n        $attribute_count1 = count((array)$this->_attributes_to_send);\n        for ($attributes_loop = 0; $attributes_loop < $attribute_count1; $attributes_loop++)\n        {\n            $attributes_content .= $this->_attributes_to_send[$attributes_loop];\n        }\n\n        $packet_length  = 4;\n        $packet_length += strlen($this->_request_authenticator);\n        $packet_length += strlen($attributes_content);\n\n        $packet_data  = chr($this->_radius_packet_to_send);\n        $packet_data .= chr($this->GetNextIdentifier());\n        $packet_data .= chr(intval($packet_length / 256));\n        $packet_data .= chr(intval($packet_length % 256));\n        $packet_data .= $this->_request_authenticator;\n        $packet_data .= $attributes_content;\n\n        $_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, 17);\n\n        if ($_socket_to_server === FALSE)\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_connect($_socket_to_server, $this->_ip_radius_server, $this->_authentication_port))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        elseif (FALSE === socket_write($_socket_to_server, $packet_data, $packet_length))\n        {\n            $this->_last_error_code    = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n        }\n        else\n        {\n            $read_socket_array   = array($_socket_to_server);\n            $write_socket_array  = NULL;\n            $except_socket_array = NULL;\n\n            $received_packet = chr(0);\n\n            if (!(FALSE === socket_select($read_socket_array, $write_socket_array, $except_socket_array, $this->_udp_timeout)))\n            {\n                if (in_array($_socket_to_server, $read_socket_array))\n                {\n                    if (FALSE === ($received_packet = @socket_read($_socket_to_server, 1024)))\n                    {\n                        $received_packet = chr(0);\n                        $this->_last_error_code    = socket_last_error();\n                        $this->_last_error_message = socket_strerror($this->_last_error_code);\n                    }\n                    else\n                    {\n                        socket_close($_socket_to_server);\n                    }\n                }\n            }\n            else\n            {\n                socket_close($_socket_to_server);\n            }\n        }\n\n        $this->_radius_packet_received = intval(ord(substr($received_packet, 0, 1)));\n\n        if ($this->_radius_packet_received > 0)\n        {\n            $this->_identifier_received = intval(ord(substr($received_packet, 1, 1)));\n            $packet_length = (intval(ord(substr($received_packet, 2, 1))) * 256) + (intval(ord(substr($received_packet, 3, 1)));\n            $this->_response_authenticator = substr($received_packet, 4, 16);\n            $attributes_content = substr($received_packet, 20, ($packet_length - 4 - 16));\n            while (strlen($attributes_content) > 2)\n            {\n                $attribute_type = intval(ord(substr($attributes_content, 0, 1)));\n                $attribute_length = intval(ord(substr($attributes_content, 1, 1)));\n                $attribute_raw_value = substr($attributes_content, 2, $attribute_length - 2);\n                $attributes_content = substr($attributes_content, $attribute_length);\n\n                $attribute_value = $this->DecodeAttribute($attribute_raw_value, $attribute_type);\n\n                $this->_attributes_received[] = array($attribute_type, $attribute_value);\n            }\n        }\n\n        return (2 == ($this->_radius_packet_received));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "matched_results": [
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->ClearDataToSend();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        $this->SetAttribute(61, $this->_user_ip_address); // Framed-IP-Address\n        $this->GenerateRequestAuthenticator();\n        $this->_encrypted_password = $this->EncryptPassword($this->_password, $this->_request_authenticator);\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        socket_connect($this->_socket_to_server, $this->_ip_radius_server, $this->_authentication_port);\n        socket_send($this->_socket_to_server, $packet, strlen($packet), 0);\n        $response = socket_read($this->_socket_to_server, 4096);\n        socket_close($this->_socket_to_server);\n        if ($response === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        $this->ParseResponse($response);\n        return $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    public function GetNextIdentifier() {\n        $this->_identifier_to_send++;\n        if ($this->_identifier_to_send > 255) {\n            $this->_identifier_to_send = 1;\n        }\n        return $this->_identifier_to_send;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    public function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return $attribute_raw_value;\n            case 4: // NAS-IP-Address\n            case 61: // Framed-IP-Address\n                return inet_ntop($attribute_raw_value);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $this->_identifier_to_send = $this->GetNextIdentifier();\n        $packet = chr($this->_radius_packet_to_send) . chr($this->_identifier_to_send) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $attribute = chr($type);\n            if (is_int($value)) {\n                $value = pack('n', $value);\n            } elseif (filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n                $value = inet_pton($value);\n            }\n            $attribute .= chr(strlen($value) + 2) . $value;\n            $packet .= $attribute;\n        }\n        $length = strlen($packet);\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        return $packet;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $length = (ord($response[2]) << 8) + ord($response[3]);\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $length) {\n            $type = ord($response[$offset]);\n            $len = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $len - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $len;\n        }\n    }\n\n    private function EncryptPassword($password, $authenticator) {\n        $secret = $this->_shared_secret;\n        $password_chunks = str_split($password, 16);\n        $encrypted_password = '';\n        $current_vector = $authenticator;\n        foreach ($password_chunks as $index => $chunk) {\n            $padded_chunk = str_pad($chunk, 16, chr(0));\n            $xor_result = '';\n            for ($i = 0; $i < 16; $i++) {\n                $xor_result .= chr(ord($padded_chunk[$i]) ^ ord($current_vector[$i]));\n            }\n            $encrypted_chunk = mcrypt_encrypt(MCRYPT_MD5, $secret, $xor_result, MCRYPT_MODE_ECB);\n            $encrypted_password .= $encrypted_chunk;\n            $current_vector = $encrypted_chunk;\n        }\n        return $encrypted_password;\n    }\n\n    private function SetLastError($error_code, $error_message) {\n        $this->_last_error_code = $error_code;\n        $this->_last_error_message = $error_message;\n    }\n}"
    ],
    "unmatched_results": [
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->ClearDataToSend();\n        $this->ClearDataReceived();\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        if (!$this->SendPacket($packet, $this->_authentication_port)) {\n            return false;\n        }\n        $response = $this->ReceivePacket($this->_udp_timeout);\n        if ($response === false) {\n            return false;\n        }\n        if ($this->ParseResponse($response)) {\n            return $this->_radius_packet_received == 2; // Access-Accept\n        }\n        return false;\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    private function GetNextIdentifier() {\n        $this->_identifier_to_send++;\n        if ($this->_identifier_to_send > 255) {\n            $this->_identifier_to_send = 1;\n        }\n        return $this->_identifier_to_send;\n    }\n\n    private function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return trim($attribute_raw_value);\n            case 4: // NAS-IP-Address\n                return inet_ntop($attribute_raw_value);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $length = strlen($packet);\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        $packet = $this->AddMessageAuthenticator($packet);\n        $packet = $this->AddHmacMd5($packet);\n        return $packet;\n    }\n\n    private function SendPacket($packet, $port) {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $result = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $port);\n        if ($result === false) {\n            $this->SetLastError(socket_last_error($this->_socket_to_server), socket_strerror(socket_last_error($this->_socket_to_server)));\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        return true;\n    }\n\n    private function ReceivePacket($timeout) {\n        $buffer = '';\n        $from = '';\n        $port = 0;\n        $result = socket_recvfrom($this->_socket_to_server, $buffer, 1024, 0, $from, $port);\n        socket_close($this->_socket_to_server);\n        if ($result === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        return $buffer;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $length) {\n            $type = ord($response[$offset]);\n            $attr_length = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $attr_length - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $attr_length;\n        }\n        return true;\n    }\n\n    private function EncryptPassword($password) {\n        $password = str_pad($password, ceil(strlen($password) / 16) * 16, \"\\0\");\n        $b = $this->_shared_secret;\n        $c = $this->_request_authenticator;\n        $crypt_password = '';\n        for ($i = 0; $i < strlen($password); $i += 16) {\n            $block = substr($password, $i, 16);\n            $hash = md5($b . $c, true);\n            $c = $block;\n            for ($j = 0; $j < 16; $j++) {\n                $crypt_password .= chr(ord($block[$j]) ^ ord($hash[$j]));\n            }\n        }\n        return $crypt_password;\n    }\n\n    private function AddMessageAuthenticator(&$packet) {\n        $original_length = strlen($packet);\n        $packet .= chr(80) . chr(18) . str_repeat(\"\\0\", 16);\n        $hmac = hash_hmac('md5', $packet, $this->_shared_secret, true);\n        $packet = substr_replace($packet, $hmac, $original_length + 2, 16);\n        return $packet;\n    }\n\n    private function AddHmacMd5(&$packet) {\n        $length = strlen($packet);\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        $hmac = hash_hmac('md5', $packet, $this->_shared_secret, true);\n        $packet .= chr(80) . chr(18) . $hmac;\n        $length += 18;\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        return $packet;\n    }\n\n    private function SetLastError($code, $message) {\n        $this->_last_error_code = $code;\n        $this->_last_error_message = $message;\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        $response = $this->SendPacket($packet, $this->_authentication_port);\n        if ($response === false) {\n            return false;\n        }\n        $this->ParseResponse($response);\n        return $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    public function GetNextIdentifier() {\n        $this->_identifier_to_send = rand(1, 255);\n        return $this->_identifier_to_send;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function EncryptPassword($password) {\n        $secret = $this->_shared_secret;\n        $authenticator = $this->_request_authenticator;\n        $password_chunks = str_split($password, 16);\n        $encrypted_password = '';\n        $previous_block = $authenticator;\n        foreach ($password_chunks as $chunk) {\n            $xor_result = '';\n            for ($i = 0; $i < 16; $i++) {\n                $xor_result .= chr(ord($chunk[$i]) ^ ord($secret[$i]));\n            }\n            $encrypted_password .= $xor_result;\n            $previous_block = $this->Md5Hash($secret . $previous_block);\n        }\n        return $encrypted_password;\n    }\n\n    private function Md5Hash($data) {\n        return md5($data, true);\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send);\n        $packet .= chr($this->GetNextIdentifier());\n        $packet .= pack('n', 0); // Length placeholder\n        $packet .= $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $length = strlen($packet);\n        $packet[2] = chr($length >> 8);\n        $packet[3] = chr($length & 0xFF);\n        return $packet;\n    }\n\n    private function SendPacket($packet, $port) {\n        $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($socket === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $sent = socket_sendto($socket, $packet, strlen($packet), 0, $this->_ip_radius_server, $port);\n        if ($sent === false) {\n            $this->SetLastError(socket_last_error($socket), socket_strerror(socket_last_error($socket)));\n            socket_close($socket);\n            return false;\n        }\n        $response = '';\n        $from = '';\n        $port = 0;\n        $received = socket_recvfrom($socket, $response, 1024, 0, $from, $port);\n        socket_close($socket);\n        if ($received === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        return $response;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $attributes_data = substr($response, 20, $length - 20);\n        $this->_attributes_received = [];\n        while (!empty($attributes_data)) {\n            $type = ord($attributes_data[0]);\n            $attr_length = ord($attributes_data[1]);\n            $value = substr($attributes_data, 2, $attr_length - 2);\n            $this->_attributes_received[$type] = $value;\n            $attributes_data = substr($attributes_data, $attr_length);\n        }\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return $attribute_raw_value;\n            case 4: // NAS-IP-Address\n                return long2ip(unpack('N', $attribute_raw_value)[1]);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    private function SetLastError($error_code, $error_message) {\n        $this->_last_error_code = $error_code;\n        $this->_last_error_message = $error_message;\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        if (!$this->SendPacket($packet)) {\n            return false;\n        }\n        $response = $this->ReceivePacket();\n        if (!$response) {\n            return false;\n        }\n        return $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    private function GetNextIdentifier() {\n        $this->_identifier_to_send++;\n        if ($this->_identifier_to_send > 255) {\n            $this->_identifier_to_send = 1;\n        }\n        return $this->_identifier_to_send;\n    }\n\n    private function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return trim($attribute_raw_value);\n            case 4: // NAS-IP-Address\n                return inet_ntop($attribute_raw_value);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $attribute = chr($type) . chr(strlen($value) + 2) . $value;\n            $packet .= $attribute;\n        }\n        $length = strlen($packet);\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        $packet = $this->AddMessageAuthenticator($packet);\n        return $packet;\n    }\n\n    private function AddMessageAuthenticator($packet) {\n        $message_authenticator_offset = 4 + 16; // Code + ID + Length + Authenticator\n        $message_authenticator = str_repeat(\"\\x00\", 16);\n        $packet[$message_authenticator_offset] = $message_authenticator;\n        $hmac = hash_hmac('md5', $packet, $this->_shared_secret, true);\n        $packet[$message_authenticator_offset] = $hmac;\n        return $packet;\n    }\n\n    private function SendPacket($packet) {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->_last_error_code = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $sent = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $this->_authentication_port);\n        if ($sent === false) {\n            $this->_last_error_code = socket_last_error($this->_socket_to_server);\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        return true;\n    }\n\n    private function ReceivePacket() {\n        $buffer = '';\n        $from = '';\n        $port = 0;\n        $received = socket_recvfrom($this->_socket_to_server, $buffer, 1024, 0, $from, $port);\n        socket_close($this->_socket_to_server);\n        if ($received === false) {\n            $this->_last_error_code = socket_last_error();\n            $this->_last_error_message = socket_strerror($this->_last_error_code);\n            return false;\n        }\n        $this->_radius_packet_received = ord($buffer[0]);\n        $this->_identifier_received = ord($buffer[1]);\n        $length = unpack('n', substr($buffer, 2, 2))[1];\n        $this->_response_authenticator = substr($buffer, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20; // Code + ID + Length + Authenticator\n        while ($offset < $length) {\n            $type = ord($buffer[$offset]);\n            $attr_length = ord($buffer[$offset + 1]);\n            $value = substr($buffer, $offset + 2, $attr_length - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $attr_length;\n        }\n        return true;\n    }\n\n    private function EncryptPassword($password) {\n        $password = str_pad($password, ceil(strlen($password) / 16) * 16, \"\\0\");\n        $b = $this->_request_authenticator;\n        $crypt_password = '';\n        for ($i = 0; $i < strlen($password); $i += 16) {\n            $block = substr($password, $i, 16);\n            $crypt_block = hash_hmac('md5', $b . $this->_shared_secret, true);\n            $crypt_password .= $block ^ $crypt_block;\n            $b = $crypt_block;\n        }\n        return $crypt_password;\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->_udp_timeout = $udp_timeout;\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->_socket_to_server) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $this->_authentication_port);\n        $response = '';\n        socket_recvfrom($this->_socket_to_server, $response, 1024, 0, $this->_ip_radius_server, $this->_authentication_port);\n        socket_close($this->_socket_to_server);\n        if (!$response) {\n            $this->SetLastError(1, 'No response from RADIUS server');\n            return false;\n        }\n        $this->ParseResponse($response);\n        if ($this->_radius_packet_received == 2) { // Access-Accept\n            return true;\n        } else {\n            $this->SetLastError(2, 'Access rejected by RADIUS server');\n            return false;\n        }\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    private function GetNextIdentifier() {\n        $this->_identifier_to_send = rand(1, 255);\n        return $this->_identifier_to_send;\n    }\n\n    private function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return $attribute_raw_value;\n            case 4: // NAS-IP-Address\n                return long2ip(unpack('N', $attribute_raw_value)[1]);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    private function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    private function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    private function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $packet .= chr($type) . chr(strlen($value) + 2) . $value;\n        }\n        $length = strlen($packet);\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        $packet = $this->AddMessageAuthenticator($packet);\n        $packet = $this->AddHmacMd5($packet);\n        return $packet;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $length = (ord($response[2]) << 8) + ord($response[3]);\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $length) {\n            $type = ord($response[$offset]);\n            $len = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $len - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $len;\n        }\n    }\n\n    private function EncryptPassword($password) {\n        $password = str_pad($password, ceil(strlen($password) / 16) * 16, \"\\0\");\n        $b = $this->_request_authenticator;\n        $crypt_password = '';\n        for ($i = 0; $i < strlen($password); $i += 16) {\n            $block = substr($password, $i, 16);\n            $des_key = $this->DesKey($this->_shared_secret . $b);\n            $crypt_block = $this->DesEncrypt($block, $des_key);\n            $crypt_password .= $crypt_block;\n            $b = $crypt_block;\n        }\n        return $crypt_password;\n    }\n\n    private function AddMessageAuthenticator(&$packet) {\n        $packet .= chr(80) . chr(18) . str_repeat(\"\\0\", 16);\n        $hmac_md5 = $this->AddHmacMd5($packet);\n        $packet[20] = chr(80);\n        $packet[21] = chr(18);\n        for ($i = 0; $i < 16; $i++) {\n            $packet[22 + $i] = $hmac_md5[$i];\n        }\n        return $packet;\n    }\n\n    private function AddHmacMd5($packet) {\n        $authenticator = str_repeat(\"\\0\", 16);\n        $packet_copy = $packet;\n        $packet_copy[4] = $authenticator[0];\n        $packet_copy[5] = $authenticator[1];\n        $packet_copy[6] = $authenticator[2];\n        $packet_copy[7] = $authenticator[3];\n        $packet_copy[8] = $authenticator[4];\n        $packet_copy[9] = $authenticator[5];\n        $packet_copy[10] = $authenticator[6];\n        $packet_copy[11] = $authenticator[7];\n        $packet_copy[12] = $authenticator[8];\n        $packet_copy[13] = $authenticator[9];\n        $packet_copy[14] = $authenticator[10];\n        $packet_copy[15] = $authenticator[11];\n        $packet_copy[16] = $authenticator[12];\n        $packet_copy[17] = $authenticator[13];\n        $packet_copy[18] = $authenticator[14];\n        $packet_copy[19] = $authenticator[15];\n        $hmac_md5 = hash_hmac('md5', $packet_copy, $this->_shared_secret, true);\n        return $hmac_md5;\n    }\n\n    private function DesKey($secret) {\n        $key = str_pad(substr($secret, 0, 8), 8, \"\\0\");\n        $key[0] = chr(ord($key[0]) & 254);\n        $key[7] = chr((ord($key[7]) & 127) | 2);\n        for ($i = 0; $i < 8; $i++) {\n            $key[$i] = chr(((ord($key[$i]) << 1) & 255) | ((ord($key[$i + 1]) >> 7) & 1));\n        }\n        return $key;\n    }\n\n    private function DesEncrypt($data, $key) {\n        $td = mcrypt_module_open(MCRYPT_DES, '', MCRYPT_MODE_ECB, '');\n        mcrypt_generic_init($td, $key, '');\n        $encrypted_data = mcrypt_generic($td, $data);\n        mcrypt_generic_deinit($td);\n        mcrypt_module_close($td);\n        return $encrypted_data;\n    }\n\n    private function SetLastError($code, $message) {\n        $this->_last_error_code = $code;\n        $this->_last_error_message = $message;\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->ClearDataToSend();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        $this->SetAttribute(61, $this->_user_ip_address); // Framed-IP-Address\n        $this->GenerateRequestAuthenticator();\n        $this->_encrypted_password = $this->EncryptPassword($this->_password, $this->_request_authenticator);\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        $this->SendPacket($packet, $this->_authentication_port);\n        $response = $this->ReceivePacket($this->_authentication_port);\n        if ($response === false) {\n            return false;\n        }\n        $this->ParseResponse($response);\n        return $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    public function GetNextIdentifier() {\n        $this->_identifier_to_send++;\n        if ($this->_identifier_to_send > 255) {\n            $this->_identifier_to_send = 1;\n        }\n        return $this->_identifier_to_send;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function EncryptPassword($password, $authenticator) {\n        $secret = $this->_shared_secret;\n        $password_chunks = str_split($password, 16);\n        $encrypted_password = '';\n        $previous_block = $authenticator;\n        foreach ($password_chunks as $index => $chunk) {\n            $block = $chunk;\n            if (strlen($block) < 16) {\n                $block .= str_repeat(chr(0), 16 - strlen($block));\n            }\n            $xor_result = '';\n            for ($i = 0; $i < 16; $i++) {\n                $xor_result .= chr(ord($block[$i]) ^ ord($previous_block[$i]));\n            }\n            $encrypted_chunk = hash_hmac('md5', $xor_result, $secret, true);\n            $encrypted_password .= $encrypted_chunk;\n            $previous_block = $encrypted_chunk;\n        }\n        return substr($encrypted_password, 0, strlen($password));\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send);\n        $packet .= chr($this->GetNextIdentifier());\n        $packet .= pack('n', 0); // Length placeholder\n        $packet .= $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $length = strlen($packet);\n        $packet[2] = chr(($length >> 8) & 0xFF);\n        $packet[3] = chr($length & 0xFF);\n        return $packet;\n    }\n\n    private function SendPacket($packet, $port) {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $result = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $port);\n        if ($result === false) {\n            $this->SetLastError(socket_last_error($this->_socket_to_server), socket_strerror(socket_last_error($this->_socket_to_server)));\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        return true;\n    }\n\n    private function ReceivePacket($port) {\n        $buffer = '';\n        $from = '';\n        $port = 0;\n        $result = socket_recvfrom($this->_socket_to_server, $buffer, 1024, 0, $from, $port);\n        if ($result === false) {\n            $this->SetLastError(socket_last_error($this->_socket_to_server), socket_strerror(socket_last_error($this->_socket_to_server)));\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        socket_close($this->_socket_to_server);\n        return $buffer;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $length) {\n            $type = ord($response[$offset]);\n            $attr_length = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $attr_length - 2);\n            $this->_attributes_received[$type] = $value;\n            $offset += $attr_length;\n        }\n    }\n\n    private function SetLastError($code, $message) {\n        $this->_last_error_code = $code;\n        $this->_last_error_message = $message;\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        $this->SendPacket($packet, $this->_authentication_port);\n        $response = $this->ReceivePacket($this->_authentication_port);\n        if ($response === false) {\n            return false;\n        }\n        $this->ParseResponse($response);\n        return $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    private function GetNextIdentifier() {\n        $this->_identifier_to_send++;\n        if ($this->_identifier_to_send > 255) {\n            $this->_identifier_to_send = 1;\n        }\n        return $this->_identifier_to_send;\n    }\n\n    private function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return trim($attribute_raw_value);\n            case 4: // NAS-IP-Address\n                return long2ip(unpack('N', $attribute_raw_value)[1]);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        $packet = $this->AddMessageAuthenticator($packet);\n        $packet = $this->AddHmacMd5($packet);\n        return $packet;\n    }\n\n    private function SendPacket($packet, $port) {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $result = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $port);\n        if ($result === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        return true;\n    }\n\n    private function ReceivePacket($port) {\n        $buffer = '';\n        $from = '';\n        $port = 0;\n        $result = socket_recvfrom($this->_socket_to_server, $buffer, 1024, 0, $from, $port);\n        socket_close($this->_socket_to_server);\n        if ($result === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        return $buffer;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $packet_length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $packet_length) {\n            $type = ord($response[$offset]);\n            $length = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $length - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $length;\n        }\n    }\n\n    private function EncryptPassword($password) {\n        $this->_encrypted_password = '';\n        $current = $this->_shared_secret . $this->_request_authenticator;\n        $blocks = ceil(strlen($password) / 16);\n        for ($i = 0; $i < $blocks; $i++) {\n            $block = substr($password, $i * 16, 16);\n            $current = md5($current, true);\n            $this->_encrypted_password .= $block ^ $current;\n        }\n        return $this->_encrypted_password;\n    }\n\n    private function AddMessageAuthenticator(&$packet) {\n        $original_length = strlen($packet);\n        $packet .= chr(80) . chr(18) . str_repeat(\"\\x00\", 16);\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        $hmac = hash_hmac('md5', $packet, $this->_shared_secret, true);\n        $packet = substr_replace($packet, $hmac, $original_length + 2, 16);\n        return $packet;\n    }\n\n    private function AddHmacMd5(&$packet) {\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        $hmac = hash_hmac('md5', $packet, $this->_shared_secret, true);\n        $packet .= $hmac;\n        $packet_length += 16;\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        return $packet;\n    }\n\n    private function SetLastError($code, $message) {\n        $this->_last_error_code = $code;\n        $this->_last_error_message = $message;\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_nas_ip_address = '';\n        $this->_nas_port = 0;\n        $this->_encrypted_password = '';\n        $this->_user_ip_address = '';\n        $this->_request_authenticator = '';\n        $this->_response_authenticator = '';\n        $this->_username = '';\n        $this->_password = '';\n        $this->_identifier_to_send = 0;\n        $this->_identifier_received = 0;\n        $this->_radius_packet_to_send = 0;\n        $this->_radius_packet_received = 0;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_socket_to_server = null;\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->ClearDataToSend();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        $this->SetAttribute(61, $this->_user_ip_address); // Framed-IP-Address\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        return $this->SendPacket() && $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    public function GetNextIdentifier() {\n        $this->_identifier_to_send++;\n        if ($this->_identifier_to_send > 255) {\n            $this->_identifier_to_send = 1;\n        }\n        return $this->_identifier_to_send;\n    }\n\n    public function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function EncryptPassword($password) {\n        $secret = $this->_shared_secret;\n        $authenticator = $this->_request_authenticator;\n        $password_chunks = str_split($password, 16);\n        $encrypted_password = '';\n        $previous_block = $authenticator;\n        foreach ($password_chunks as $chunk) {\n            $block = $chunk . str_repeat(\"\\0\", 16 - strlen($chunk));\n            $xor_block = '';\n            for ($i = 0; $i < 16; $i++) {\n                $xor_block .= chr(ord($block[$i]) ^ ord($previous_block[$i]));\n            }\n            $encrypted_block = md5($secret . $xor_block, true);\n            $encrypted_password .= $encrypted_block;\n            $previous_block = $encrypted_block;\n        }\n        return $encrypted_password;\n    }\n\n    private function SendPacket() {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $packet = $this->BuildPacket();\n        $sent = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $this->_authentication_port);\n        if ($sent === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        $response = '';\n        $from = '';\n        $port = 0;\n        $received = socket_recvfrom($this->_socket_to_server, $response, 4096, 0, $from, $port);\n        socket_close($this->_socket_to_server);\n        if ($received === false) {\n            $this->SetLastError(socket_last_error(), socket_strerror(socket_last_error()));\n            return false;\n        }\n        return $this->ParseResponse($response);\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . \"\\0\\0\";\n        $attributes = '';\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $attributes .= chr($type) . chr($length) . $value;\n        }\n        $packet_length = 20 + strlen($attributes);\n        $packet = substr_replace($packet, pack('n', $packet_length), 2, 2);\n        $packet .= $this->_request_authenticator . $attributes;\n        $packet = substr_replace($packet, md5($packet . $this->_shared_secret . $this->_request_authenticator, true), 4, 16);\n        return $packet;\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $packet_length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $attributes = substr($response, 20, $packet_length - 20);\n        $this->_attributes_received = [];\n        while (!empty($attributes)) {\n            $type = ord($attributes[0]);\n            $length = ord($attributes[1]);\n            $value = substr($attributes, 2, $length - 2);\n            $this->_attributes_received[$type] = $value;\n            $attributes = substr($attributes, $length);\n        }\n        return true;\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return $attribute_raw_value;\n            case 4: // NAS-IP-Address\n            case 61: // Framed-IP-Address\n                return long2ip(unpack('N', $attribute_raw_value)[1]);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function SetLastError($code, $message) {\n        $this->_last_error_code = $code;\n        $this->_last_error_message = $message;\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        $this->SendPacket($packet, $this->_authentication_port);\n        $response = $this->ReceivePacket($this->_udp_timeout);\n        if ($response !== false && $this->_radius_packet_received == 2) { // Access-Accept\n            return true;\n        }\n        return false;\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    private function GetNextIdentifier() {\n        $this->_identifier_to_send = rand(1, 255);\n        return $this->_identifier_to_send;\n    }\n\n    private function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return trim($attribute_raw_value);\n            case 4: // NAS-IP-Address\n                return inet_ntop($attribute_raw_value);\n            case 5: // NAS-Port\n                return unpack('n', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    public function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    public function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $packet = chr($this->_radius_packet_to_send) . chr($this->GetNextIdentifier()) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        $packet = $this->AddMessageAuthenticator($packet);\n        return $packet;\n    }\n\n    private function AddMessageAuthenticator($packet) {\n        $packet[20] = chr(0);\n        $packet[21] = chr(0);\n        $packet[22] = chr(0);\n        $packet[23] = chr(0);\n        $packet[24] = chr(0);\n        $packet[25] = chr(0);\n        $packet[26] = chr(0);\n        $packet[27] = chr(0);\n        $hmac = hash_hmac('md5', $packet . $this->_shared_secret, $this->_request_authenticator, true);\n        for ($i = 0; $i < 16; $i++) {\n            $packet[20 + $i] = $hmac[$i];\n        }\n        return $packet;\n    }\n\n    private function SendPacket($packet, $port) {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->_last_error_code = 1;\n            $this->_last_error_message = 'Socket creation failed';\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $result = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $port);\n        if ($result === false) {\n            $this->_last_error_code = 2;\n            $this->_last_error_message = 'Socket send failed';\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        return true;\n    }\n\n    private function ReceivePacket($timeout) {\n        $response = '';\n        $from = '';\n        $port = 0;\n        $result = socket_recvfrom($this->_socket_to_server, $response, 4096, 0, $from, $port);\n        socket_close($this->_socket_to_server);\n        if ($result === false) {\n            $this->_last_error_code = 3;\n            $this->_last_error_message = 'Socket receive failed';\n            return false;\n        }\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $length) {\n            $type = ord($response[$offset]);\n            $attr_length = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $attr_length - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $attr_length;\n        }\n        return $response;\n    }\n\n    private function EncryptPassword($password) {\n        $password = str_pad($password, ceil(strlen($password) / 16) * 16, \"\\0\");\n        $b = $this->_request_authenticator;\n        $crypt_password = '';\n        for ($i = 0; $i < strlen($password); $i += 16) {\n            $block = substr($password, $i, 16);\n            $crypt_block = '';\n            for ($j = 0; $j < 16; $j++) {\n                $crypt_block .= chr(ord($block[$j]) ^ ord($b[$j]));\n            }\n            $crypt_password .= $crypt_block;\n            $b = hash_hmac('md5', substr($crypt_password, 0, strlen($crypt_password) - 16) . $this->_shared_secret, $this->_request_authenticator, true);\n        }\n        return $crypt_password;\n    }\n}",
      "class Radius {\n    private $_ip_radius_server;\n    private $_shared_secret;\n    private $_radius_suffix;\n    private $_udp_timeout;\n    private $_authentication_port;\n    private $_accounting_port;\n    private $_nas_ip_address;\n    private $_nas_port;\n    private $_encrypted_password;\n    private $_user_ip_address;\n    private $_request_authenticator;\n    private $_response_authenticator;\n    private $_username;\n    private $_password;\n    private $_identifier_to_send;\n    private $_identifier_received;\n    private $_radius_packet_to_send;\n    private $_radius_packet_received;\n    private $_attributes_to_send;\n    private $_attributes_received;\n    private $_socket_to_server;\n    private $_debug_mode;\n    private $debug_text;\n    private $_attributes_info;\n    private $_radius_packet_info;\n    private $_last_error_code;\n    private $_last_error_message;\n\n    public function __construct($ip_radius_server = '127.0.0.1', $shared_secret = '', $radius_suffix = '', $udp_timeout = 5, $authentication_port = 1812, $accounting_port = 1813) {\n        $this->_ip_radius_server = $ip_radius_server;\n        $this->_shared_secret = $shared_secret;\n        $this->_radius_suffix = $radius_suffix;\n        $this->_udp_timeout = $udp_timeout;\n        $this->_authentication_port = $authentication_port;\n        $this->_accounting_port = $accounting_port;\n        $this->_attributes_to_send = [];\n        $this->_attributes_received = [];\n        $this->_debug_mode = false;\n        $this->debug_text = [];\n        $this->_attributes_info = [];\n        $this->_radius_packet_info = [];\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    public function AccessRequest($username = '', $password = '', $udp_timeout = 0, $state = NULL) {\n        $this->SetUsername($username);\n        $this->SetPassword($password);\n        if ($udp_timeout > 0) {\n            $this->SetUdpTimeout($udp_timeout);\n        }\n        $this->SetPacketCodeToSend(1); // Access-Request\n        $this->GenerateRequestAuthenticator();\n        $this->SetAttribute(1, $this->_username . $this->_radius_suffix); // User-Name\n        $this->SetAttribute(2, $this->_encrypted_password); // User-Password\n        $this->SetAttribute(4, $this->_nas_ip_address); // NAS-IP-Address\n        $this->SetAttribute(5, $this->_nas_port); // NAS-Port\n        $this->SetAttribute(8, $this->_user_ip_address); // Framed-IP-Address\n        if ($state !== NULL) {\n            $this->SetAttribute(24, $state); // State\n        }\n        $packet = $this->BuildPacket();\n        if (!$this->SendPacket($packet)) {\n            return false;\n        }\n        $response = $this->ReceivePacket();\n        if ($response === false) {\n            return false;\n        }\n        $this->ParseResponse($response);\n        return $this->_radius_packet_received == 2; // Access-Accept\n    }\n\n    public function SetIpRadiusServer($ip_radius_server) {\n        $this->_ip_radius_server = $ip_radius_server;\n    }\n\n    public function SetSharedSecret($shared_secret) {\n        $this->_shared_secret = $shared_secret;\n    }\n\n    public function SetAuthenticationPort($authentication_port) {\n        $this->_authentication_port = $authentication_port;\n    }\n\n    public function SetAccountingPort($accounting_port) {\n        $this->_accounting_port = $accounting_port;\n    }\n\n    public function SetRadiusSuffix($radius_suffix) {\n        $this->_radius_suffix = $radius_suffix;\n    }\n\n    public function SetUdpTimeout($udp_timeout) {\n        $this->_udp_timeout = $udp_timeout;\n    }\n\n    public function SetUsername($username = '') {\n        $this->_username = $username;\n    }\n\n    public function SetPassword($password = '') {\n        $this->_password = $password;\n        $this->_encrypted_password = $this->EncryptPassword($password);\n    }\n\n    public function SetNasIpAddress($nas_ip_address = '') {\n        $this->_nas_ip_address = $nas_ip_address;\n    }\n\n    public function SetNasPort($nas_port = 0) {\n        $this->_nas_port = $nas_port;\n    }\n\n    public function SetPacketCodeToSend($packet_code) {\n        $this->_radius_packet_to_send = $packet_code;\n    }\n\n    public function SetAttribute($attribute_type, $attribute_value) {\n        $this->_attributes_to_send[$attribute_type] = $attribute_value;\n    }\n\n    private function GetNextIdentifier() {\n        static $identifier = 0;\n        $identifier++;\n        if ($identifier > 255) {\n            $identifier = 1;\n        }\n        return $identifier;\n    }\n\n    private function GenerateRequestAuthenticator() {\n        $this->_request_authenticator = random_bytes(16);\n    }\n\n    private function DecodeAttribute($attribute_raw_value, $attribute_type) {\n        switch ($attribute_type) {\n            case 1: // User-Name\n            case 24: // State\n                return trim($attribute_raw_value);\n            case 4: // NAS-IP-Address\n                return inet_ntop($attribute_raw_value);\n            case 5: // NAS-Port\n            case 8: // Framed-IP-Address\n                return unpack('N', $attribute_raw_value)[1];\n            default:\n                return $attribute_raw_value;\n        }\n    }\n\n    private function ClearLastError() {\n        $this->_last_error_code = 0;\n        $this->_last_error_message = '';\n    }\n\n    private function ClearDataToSend() {\n        $this->_attributes_to_send = [];\n    }\n\n    private function ClearDataReceived() {\n        $this->_attributes_received = [];\n    }\n\n    private function BuildPacket() {\n        $this->_identifier_to_send = $this->GetNextIdentifier();\n        $packet = chr($this->_radius_packet_to_send) . chr($this->_identifier_to_send) . pack('n', 0) . $this->_request_authenticator;\n        foreach ($this->_attributes_to_send as $type => $value) {\n            $length = strlen($value) + 2;\n            $packet .= chr($type) . chr($length) . $value;\n        }\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        $packet = $this->AddMessageAuthenticator($packet);\n        $packet = $this->AddHmacMd5($packet);\n        return $packet;\n    }\n\n    private function SendPacket($packet) {\n        $this->_socket_to_server = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->_socket_to_server === false) {\n            $this->_last_error_code = 1;\n            $this->_last_error_message = 'Socket creation failed';\n            return false;\n        }\n        socket_set_option($this->_socket_to_server, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->_udp_timeout, 'usec' => 0]);\n        $result = socket_sendto($this->_socket_to_server, $packet, strlen($packet), 0, $this->_ip_radius_server, $this->_authentication_port);\n        if ($result === false) {\n            $this->_last_error_code = 2;\n            $this->_last_error_message = 'Socket send failed';\n            socket_close($this->_socket_to_server);\n            return false;\n        }\n        return true;\n    }\n\n    private function ReceivePacket() {\n        $buffer = str_repeat(\"\\0\", 1024);\n        $from = '';\n        $port = 0;\n        $result = socket_recvfrom($this->_socket_to_server, $buffer, 1024, 0, $from, $port);\n        socket_close($this->_socket_to_server);\n        if ($result === false) {\n            $this->_last_error_code = 3;\n            $this->_last_error_message = 'Socket receive failed';\n            return false;\n        }\n        return substr($buffer, 0, $result);\n    }\n\n    private function ParseResponse($response) {\n        $this->_radius_packet_received = ord($response[0]);\n        $this->_identifier_received = ord($response[1]);\n        $packet_length = unpack('n', substr($response, 2, 2))[1];\n        $this->_response_authenticator = substr($response, 4, 16);\n        $this->_attributes_received = [];\n        $offset = 20;\n        while ($offset < $packet_length) {\n            $type = ord($response[$offset]);\n            $length = ord($response[$offset + 1]);\n            $value = substr($response, $offset + 2, $length - 2);\n            $this->_attributes_received[$type] = $this->DecodeAttribute($value, $type);\n            $offset += $length;\n        }\n    }\n\n    private function EncryptPassword($password) {\n        $padded_password = str_pad($password, ceil(strlen($password) / 16) * 16, \"\\0\");\n        $encrypted_password = '';\n        $last_block = $this->_request_authenticator;\n        for ($i = 0; $i < strlen($padded_password); $i += 16) {\n            $block = substr($padded_password, $i, 16);\n            $xor_block = '';\n            for ($j = 0; $j < 16; $j++) {\n                $xor_block .= chr(ord($block[$j]) ^ ord($last_block[$j]));\n            }\n            $encrypted_block = mcrypt_encrypt(MCRYPT_MD5, $this->_shared_secret, $xor_block, MCRYPT_MODE_ECB);\n            $encrypted_password .= $encrypted_block;\n            $last_block = $encrypted_block;\n        }\n        return $encrypted_password;\n    }\n\n    private function AddMessageAuthenticator(&$packet) {\n        $original_authenticator = $this->_request_authenticator;\n        $this->_request_authenticator = str_repeat(\"\\0\", 16);\n        $packet = substr_replace($packet, str_repeat(\"\\0\", 16), 4, 16);\n        $hmac_md5 = hash_hmac('md5', $packet, $this->_shared_secret, true);\n        $packet = substr_replace($packet, $hmac_md5, 4, 16);\n        $this->_request_authenticator = $original_authenticator;\n        return $packet;\n    }\n\n    private function AddHmacMd5(&$packet) {\n        $hmac_md5 = hash_hmac('md5', $packet . $this->_shared_secret . $this->_response_authenticator, $this->_shared_secret, true);\n        $packet .= chr(80) . chr(18) . $hmac_md5;\n        $packet_length = strlen($packet);\n        $packet[2] = chr(($packet_length >> 8) & 0xFF);\n        $packet[3] = chr($packet_length & 0xFF);\n        return $packet;\n    }\n}"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Symfony's HTTP client components to handle HTTP requests and responses.\n\nClass Description: The HttpClientKernel class is an implementation of HttpKernelInterface that provides HTTP client capabilities using Symfony's HTTP client components. It handles HTTP requests by sending them to a remote server and returning the response, supporting various request methods, headers, cookies, and body content (including form data and file uploads).\n\nAttributes:\n- client: [HttpClientInterface] - The Symfony HTTP client instance used to send requests\n\nMethods:\n- __construct(?HttpClientInterface $client = null) -> [void] - Initializes the HTTP client. If no client is provided, creates a default HttpClient instance. Throws an exception if the HttpClient component is not installed.\n- handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true) -> [Response] - Processes an HTTP request by sending it to the target server and returns the response. Handles headers, cookies, and request body preparation.\n- getBody(Request $request) -> [?AbstractPart] - Prepares the request body content. Returns null for GET/HEAD requests, a TextPart for raw content, or a FormDataPart for form data including file uploads. Throws an exception if the Mime component is not installed when needed.\n- getHeaders(Request $request) -> [array] - Extracts and formats headers from the request object, including cookies, into an array suitable for the HTTP client.",
    "Canonical_solution": "use Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client && !class_exists(HttpClient::class)) {\n            throw new \\LogicException(sprintf('You cannot use \"%s\" as the HttpClient component is not installed. Try running \"composer require symfony/http-client\".', __CLASS__));\n        }\n\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $headers = $this->getHeaders($request);\n        $body = '';\n        if (null !== $part = $this->getBody($request)) {\n            $headers = array_merge($headers, $part->getPreparedHeaders()->toArray());\n            $body = $part->bodyToIterable();\n        }\n        $response = $this->client->request($request->getMethod(), $request->getUri(), [\n            'headers' => $headers,\n            'body' => $body,\n        ] + $request->attributes->get('http_client_options', []));\n\n        $response = new Response($response->getContent(!$catch), $response->getStatusCode(), $response->getHeaders(!$catch));\n\n        $response->headers->remove('X-Body-File');\n        $response->headers->remove('X-Body-Eval');\n        $response->headers->remove('X-Content-Digest');\n\n        $response->headers = new class($response->headers->all()) extends ResponseHeaderBag {\n            protected function computeCacheControlValue(): string\n            {\n                return $this->getCacheControlHeader();\n            }\n        };\n\n        return $response;\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        if (!class_exists(AbstractPart::class)) {\n            throw new \\LogicException('You cannot pass non-empty bodies as the Mime component is not installed. Try running \"composer require symfony/mime\".');\n        }\n\n        if ($content = $request->getContent()) {\n            return new TextPart($content, 'utf-8', 'plain', '8bit');\n        }\n\n        $fields = $request->request->all();\n        foreach ($request->files->all() as $name => $file) {\n            $fields[$name] = DataPart::fromPath($file->getPathname(), $file->getClientOriginalName(), $file->getClientMimeType());\n        }\n\n        return new FormDataPart($fields);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = [];\n        foreach ($request->headers as $key => $value) {\n            $headers[$key] = $value;\n        }\n        $cookies = [];\n        foreach ($request->cookies->all() as $name => $value) {\n            $cookies[] = $name.'='.$value;\n        }\n        if ($cookies) {\n            $headers['cookie'] = implode('; ', $cookies);\n        }\n\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 134,
    "matched_results": [
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content) {\n            return new TextPart($content);\n        }\n\n        $files = [];\n        foreach ($request->files->all() as $name => $file) {\n            $files[$name] = fopen($file->getPathname(), 'r');\n        }\n\n        $formData = array_merge($request->request->all(), $files);\n        if (!empty($formData)) {\n            if (!class_exists(FormDataPart::class)) {\n                throw new \\RuntimeException('Symfony Mime component is not installed.');\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $headers['Cookie'] = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content) {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if ($files) {\n            $formData = [];\n            foreach ($request->request->all() as $key => $value) {\n                $formData[$key] = new TextPart((string)$value);\n            }\n            foreach ($files as $key => $file) {\n                $formData[$key] = \\Symfony\\Component\\Mime\\Part\\DataPart::fromPath($file->getPathname(), $file->getClientOriginalName());\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if ($cookies) {\n            $headers['Cookie'] = [http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986)];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (!empty($files)) {\n            $formData = [];\n            foreach ($request->request->all() as $key => $value) {\n                $formData[$key] = $value;\n            }\n            foreach ($files as $key => $file) {\n                $formData[$key] = fopen($file->getPathname(), 'r');\n            }\n            return new FormDataPart($formData);\n        }\n\n        if (class_exists(FormDataPart::class)) {\n            throw new \\RuntimeException('Symfony Mime component is not installed.');\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (!empty($files)) {\n            $formData = new FormDataPart([]);\n            foreach ($files as $name => $file) {\n                $formData->attachFromPath($name, $file->getPathname(), $file->getClientOriginalName());\n            }\n            return $formData;\n        }\n\n        $parameters = $request->request->all();\n        if (!empty($parameters)) {\n            $formData = new FormDataPart([]);\n            foreach ($parameters as $name => $value) {\n                $formData->addTextPart($value, $name);\n            }\n            return $formData;\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Contracts\\HttpClient\\ResponseInterface as SymfonyResponseInterface;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $method = $request->getMethod();\n        $uri = $request->getUri();\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers']['Content-Type'] = $body->getPreparedHeaders()->toString();\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        /** @var SymfonyResponseInterface $response */\n        $response = $this->client->request($method, $uri, $options);\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (!empty($files)) {\n            $formData = new FormDataPart([]);\n            foreach ($files as $name => $file) {\n                $formData->attachFromPath($name, $file->getPathname(), $file->getClientOriginalName());\n            }\n            return $formData;\n        }\n\n        $parameters = $request->request->all();\n        if (!empty($parameters)) {\n            $formData = new FormDataPart([]);\n            foreach ($parameters as $name => $value) {\n                $formData->addTextPart($value, $name);\n            }\n            return $formData;\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClient::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $this->client = HttpClient::create();\n        } else {\n            $this->client = $client;\n        }\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $method = $request->getMethod();\n        $uri = $request->getUri();\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request($method, $uri, $options);\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        $method = $request->getMethod();\n        if (in_array($method, ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (!empty($files)) {\n            $formData = new FormDataPart([]);\n            foreach ($files as $name => $file) {\n                $formData->attachFromPath($name, $file->getPathname(), $file->getClientOriginalName());\n            }\n            return $formData;\n        }\n\n        $parameters = $request->request->all();\n        if (!empty($parameters)) {\n            $formData = new FormDataPart([]);\n            foreach ($parameters as $name => $value) {\n                $formData->addTextPart($value, $name);\n            }\n            return $formData;\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}"
    ],
    "unmatched_results": [
      "<?php\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Contracts\\HttpClient\\ResponseInterface as HttpClientResponseInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClientInterface::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = \\Symfony\\Component\\HttpClient\\HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $method = $request->getMethod();\n        $uri = $request->getUri();\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers']['Content-Type'] = $body->getPreparedHeaders()->toString();\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        /** @var HttpClientResponseInterface $httpClientResponse */\n        $httpClientResponse = $this->client->request($method, $uri, $options);\n\n        return new Response(\n            $httpClientResponse->getContent(false),\n            $httpClientResponse->getStatusCode(),\n            $httpClientResponse->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        $method = $request->getMethod();\n        if (in_array($method, ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (!empty($files)) {\n            $formData = [];\n            foreach ($request->request->all() as $key => $value) {\n                $formData[$key] = new TextPart((string)$value);\n            }\n            foreach ($files as $key => $file) {\n                $formData[$key] = \\Symfony\\Component\\Mime\\Part\\DataPart::fromPath($file->getPathname(), $file->getClientOriginalName());\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n        if (!empty($cookies)) {\n            $headers['Cookie'] = [http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986)];\n        }\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Contracts\\HttpClient\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\FormDataPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClientInterface::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = \\Symfony\\Component\\HttpClient\\HttpClient::create();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        try {\n            $options = [\n                'headers' => $this->getHeaders($request),\n                'body' => $this->getBody($request),\n            ];\n\n            $response = $this->client->request(\n                $request->getMethod(),\n                $request->getUri(),\n                $options\n            );\n\n            return new Response(\n                $response->getContent(false),\n                $response->getStatusCode(),\n                $response->getHeaders(false)\n            );\n        } catch (ExceptionInterface $e) {\n            if (!$catch) {\n                throw $e;\n            }\n            return new Response($e->getMessage(), 500);\n        }\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (empty($files) && empty($request->request->all())) {\n            return null;\n        }\n\n        if (!class_exists(FormDataPart::class)) {\n            throw new \\RuntimeException('Symfony Mime component is not installed.');\n        }\n\n        $formData = new FormDataPart([]);\n        foreach ($request->request->all() as $key => $value) {\n            $formData->addTextPart($value, $key);\n        }\n\n        foreach ($files as $key => $file) {\n            $formData->addResourcePart(\\Symfony\\Component\\HttpFoundation\\File\\File::createFromPathname($file->getPathname()), $key, $file->getClientOriginalName());\n        }\n\n        return $formData;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $headers['cookie'] = [http_build_query($cookies, '', '; ', \\PHP_QUERY_RFC3986)];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Contracts\\HttpClient\\ResponseInterface as SymfonyResponseInterface;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\n\nclass HttpClientKernel implements HttpKernelInterface, ServiceSubscriberInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClientInterface::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = \\Symfony\\Component\\HttpClient\\HttpClient::create();\n        }\n\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers']['Content-Type'] = $body->getPreparedHeaders()->toString();\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        /** @var SymfonyResponseInterface $response */\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart((string)$content);\n        }\n\n        $files = [];\n        foreach ($request->files->all() as $key => $file) {\n            $files[$key] = fopen($file->getPathname(), 'r');\n        }\n\n        $formData = array_merge($request->request->all(), $files);\n\n        if (!empty($formData)) {\n            if (!class_exists(FormDataPart::class)) {\n                throw new \\RuntimeException('Symfony Mime component is not installed.');\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n\n        // Handle cookies\n        if ($cookies = $request->cookies->all()) {\n            $cookieString = http_build_query($cookies, '', '; ');\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n\n    public static function getSubscribedServices(): array\n    {\n        return [\n            HttpClientInterface::class => '?',\n        ];\n    }\n}",
      "use Psr\\Http\\Message\\ResponseInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Contracts\\HttpClient\\ResponseInterface as SymfonyResponseInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(?HttpClientInterface $client = null)\n    {\n        if (null === $client) {\n            if (!class_exists(HttpClientInterface::class)) {\n                throw new \\RuntimeException('Symfony HttpClient component is not installed.');\n            }\n            $client = new \\Symfony\\Component\\HttpClient\\HttpClient();\n        }\n        $this->client = $client;\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $method = $request->getMethod();\n        $uri = $request->getUri();\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers']['Content-Type'] = $body->getPreparedHeaders()->getHeaderLine('Content-Type');\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        /** @var SymfonyResponseInterface $response */\n        $response = $this->client->request($method, $uri, $options);\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        $method = $request->getMethod();\n        if (in_array($method, ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        $parameters = $request->request->all();\n\n        if (empty($files) && empty($parameters)) {\n            return null;\n        }\n\n        if (!class_exists(FormDataPart::class)) {\n            throw new \\RuntimeException('Symfony Mime component is not installed.');\n        }\n\n        $formData = new FormDataPart([]);\n        foreach ($parameters as $name => $value) {\n            $formData->addTextPart($value, $name);\n        }\n\n        foreach ($files as $name => $file) {\n            $formData->addResourcePart(\\Symfony\\Component\\HttpFoundation\\File\\File::create($file->getPathname()), $name, $file->getClientOriginalName());\n        }\n\n        return $formData;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ');\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Implement a UDP scraper class for interacting with BitTorrent trackers to scrape torrent statistics using UDP protocol.\n\nClass Description: UdpScraper is a class that handles communication with BitTorrent trackers via UDP protocol to retrieve scrape information (seeders, leechers, downloads) for given torrent info hashes. It manages socket connections, transaction IDs, and packet formatting according to the UDP tracker protocol.\n\nAttributes:\n- currentConnectionId: [string] - The connection ID received from the tracker after initial connection\n- transactionId: [int] - The current transaction ID used for request/response tracking\n- socket: [resource|null] - The UDP socket resource for communication\n- timeout: [int] - Socket timeout in seconds for send/receive operations\n\nMethods:\n- scrape([Tracker $tracker, array $hashes]) -> [array] - Main method to scrape multiple torrent hashes by splitting them into chunks\n- scrapeChunk([Tracker $tracker, array $hashes]) -> [array] - Scrapes a chunk of torrent hashes (max 74 at a time)\n- initSocket() -> [resource] - Initializes and returns a UDP socket\n- connect([string $domain, int $port]) -> [void] - Connects the socket to the tracker\n- generateTransactionId() -> [void] - Generates a random transaction ID\n- startTransaction() -> [void] - Initiates connection with the tracker and establishes connection ID\n- scrapeHashes([array $hashes]) -> [array] - Sends scrape request for given hashes and processes response\n- request([string $packet, int $readLength]) -> [string] - Sends packet and reads response with timeout\n- closeSocket() -> [void] - Closes the socket and resets connection state\n- checkError([string $response]) -> [void] - Checks for and handles error responses from tracker",
    "Canonical_solution": "namespace common\\modules\\torrent_scraper\\models;\n\nuse common\\models\\ScraperException;\n\nclass UdpScraper extends BaseScraper\n{\n    const ACTION_CONNECT = 0;\n    const ACTION_ANNOUNCE = 1;\n    const ACTION_SCRAPE = 2;\n    const ACTION_ERROR = 3;\n\n    const CONNECTION_ID = \"\\x00\\x00\\x04\\x17\\x27\\x10\\x19\\x80\";\n\n    protected $currentConnectionId = null;\n    protected $transactionId = null;\n    protected $socket = null;\n    protected $timeout = 15;\n\n    public function scrape(Tracker $tracker, array $hashes)\n    {\n        $chunks = array_chunk($hashes, 74);\n        $result = [];\n        foreach ($chunks as $chunk) {\n            $result = array_merge($result, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $result;\n    }\n\n    public function scrapeChunk(Tracker $tracker, $hashes)\n    {\n        $this->initSocket();\n        $this->connect($tracker->host, $tracker->port);\n        $this->startTransaction();\n        $torrents = $this->scrapeHashes($hashes);\n        $this->closeSocket();\n        return $torrents;\n    }\n\n    protected function initSocket()\n    {\n        if ($this->socket === null) {\n            $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n            if ($socket === false) {\n                throw new UdpScraperException(socket_strerror(socket_last_error()));\n            }\n            $this->socket = $socket;\n        }\n        return $this->socket;\n    }\n\n    protected function connect($domain, $port)\n    {\n        if (socket_connect($this->socket, $domain, $port) === false) {\n            throw new UdpScraperException(socket_strerror(socket_last_error($this->socket)));\n        }\n    }\n\n    protected function generateTransactionId()\n    {\n        $this->transactionId = mt_rand(0, 65535);\n    }\n\n    protected function startTransaction()\n    {\n        $this->generateTransactionId();\n        $packet = static::CONNECTION_ID . pack('N', static::ACTION_CONNECT) . pack('N', $this->transactionId);\n        $res = $this->request($packet, 16);\n        if (strlen($res) < 1) {\n            throw new UdpScraperException('No connection response.');\n        }\n        if (strlen($res) < 16) {\n            throw new UdpScraperException('Too short connection response.');\n        }\n        $resUnpacked = unpack(\"Naction/Ntransid\", $res);\n\n        if ($resUnpacked['action'] != static::ACTION_CONNECT || $resUnpacked['transid'] != $this->transactionId) {\n            throw new UdpScraperException('Invalid connection response.');\n        }\n\n        $this->currentConnectionId = substr($res, 8, 8);\n    }\n\n    protected function scrapeHashes($hashes)\n    {\n        $hashString = '';\n        foreach ($hashes as $hash) {\n            $hashString .= pack('H*', $hash);\n        }\n\n        $packet = $this->currentConnectionId . pack(\"N\", static::ACTION_SCRAPE) . pack(\"N\", $this->transactionId) . $hashString;\n\n        $readLength = 8 + (12 * count($hashes));\n\n        $res = $this->request($packet, $readLength);\n\n        if (strlen($res) < 1) {\n            throw new UdpScraperException('No scrape response.');\n        }\n        if (strlen($res) < 8) {\n            throw new UdpScraperException('Too short scrape response.');\n        }\n\n        $resUnpacked = unpack(\"Naction/Ntransid\", $res);\n\n        if ($resUnpacked['action'] == static::ACTION_ERROR) {\n            $this->checkError($res);\n        }\n\n        if (strlen($res) < $readLength) {\n            throw new UdpScraperException('Too short scrape response.');\n        }\n\n        $torrents = [];\n        $index = 8;\n        foreach ($hashes as $hash) {\n            $resUnpacked = unpack(\"Ncomplete/Ndownloaded/Nincomplete\", substr($res, $index, 12));\n            $torrents[$hash] = $resUnpacked;\n            $index = $index + 12;\n        }\n        return $torrents;\n    }\n\n    protected function request($packet, $readLength)\n    {\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n        socket_set_option($this->socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n\n        if (socket_write($this->socket, $packet, strlen($packet)) === false) {\n            throw new UdpScraperException(socket_strerror(socket_last_error($this->socket)));\n        }\n\n        $res = socket_read($this->socket, $readLength, PHP_BINARY_READ);\n        return $res;\n    }\n\n    protected function closeSocket()\n    {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->transactionId = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    protected function checkError($response)\n    {\n        $unpacked = unpack(\"Naction/Ntransid/H*error\", $response);\n        throw new UdpScraperException($unpacked['error']);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 137,
    "matched_results": [
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        foreach (array_chunk($hashes, 74) as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('NNN', 0x41727101980, 0, $this->transactionId);\n        $response = $this->request($packet, 16);\n        list(, $action, $transactionId, $this->currentConnectionId) = unpack('Naction/NtransactionId/QconnectionId', $response);\n        if ($action !== 0 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid connection response');\n        }\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('N3', $this->currentConnectionId, 2, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        list(, $action, $transactionId) = unpack('Naction/NtransactionId', $response);\n        if ($action !== 2 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid scrape response');\n        }\n        $results = [];\n        $offset = 8;\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = unpack('Nseeders/Ncompleted/Nleechers', substr($response, $offset, 12));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        if (!socket_send($this->socket, $packet, strlen($packet), 0)) {\n            throw new Exception('Failed to send packet');\n        }\n        $response = socket_read($this->socket, $readLength);\n        if ($response === false) {\n            throw new Exception('Failed to read response');\n        }\n        $this->checkError($response);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        list($action, $transactionId, $errorCode) = unpack('Naction/NtransactionId/NerrorCode', $response);\n        if ($action === 3) {\n            throw new Exception('Tracker error: ' . $errorCode);\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        $chunkSize = 74; // Max 74 hashes per request\n        for ($i = 0; $i < count($hashes); $i += $chunkSize) {\n            $chunk = array_slice($hashes, $i, $chunkSize);\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    private function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('NNN', 0x41727101980, 0, $this->transactionId);\n        $response = $this->request($packet, 16);\n        $this->checkError($response);\n        list(, $action, $transactionId, $this->currentConnectionId) = unpack('Naction/NtransactionId/QconnectionId', $response);\n        if ($transactionId !== $this->transactionId) {\n            throw new Exception('Invalid transaction ID');\n        }\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('NQN', 2, $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        $this->checkError($response);\n        $data = unpack('Naction/NtransactionId', $response);\n        if ($data['transactionId'] !== $this->transactionId) {\n            throw new Exception('Invalid transaction ID');\n        }\n        $offset = 8;\n        $results = [];\n        foreach ($hashes as $index => $hash) {\n            list($seeders, $completed, $leechers) = array_values(unpack('Nseeders/Ncompleted/Nleechers', substr($response, $offset, 12)));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        if (!socket_send($this->socket, $packet, strlen($packet), 0)) {\n            throw new Exception('Failed to send packet');\n        }\n        $response = socket_read($this->socket, $readLength);\n        if ($response === false) {\n            throw new Exception('Failed to read response');\n        }\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        $data = unpack('Naction/NtransactionId', $response);\n        if ($data['action'] === 3) {\n            $errorMessage = trim(substr($response, 8));\n            throw new Exception(\"Tracker error: $errorMessage\");\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}"
    ],
    "unmatched_results": [
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        $chunks = array_chunk($hashes, 74);\n        foreach ($chunks as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        if (strlen($response) < 16) {\n            throw new Exception('Invalid response length');\n        }\n        list(, $action, $transactionId, $connectionId) = unpack('Naction/NtransactionId/QconnectionId', $response);\n        if ($action !== 0 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid connection response');\n        }\n        $this->currentConnectionId = $connectionId;\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('N2', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        if (strlen($response) < 8 + 12 * count($hashes)) {\n            throw new Exception('Invalid response length');\n        }\n        list(, $action, $transactionId) = unpack('Naction/NtransactionId', $response);\n        if ($action !== 2 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid scrape response');\n        }\n        $results = [];\n        $offset = 8;\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = unpack('N3', substr($response, $offset, 12));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        socket_send($this->socket, $packet, strlen($packet), 0);\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n        $response = '';\n        socket_recv($this->socket, $response, $readLength, 0);\n        $this->checkError($response);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        if (strlen($response) >= 8) {\n            list(, $action, $transactionId) = unpack('Naction/NtransactionId', $response);\n            if ($action === 3) {\n                $errorMessage = trim(substr($response, 8));\n                throw new Exception(\"Tracker error: $errorMessage\");\n            }\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        foreach (array_chunk($hashes, 74) as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        list(, $action, $transactionId, $this->currentConnectionId) = unpack('Naction/NtransactionId/QconnectionId', $response);\n        if ($action !== 0 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid connection response');\n        }\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $this->generateTransactionId();\n        $packet = pack('N2', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        list(, $action, $transactionId) = unpack('Naction/NtransactionId', $response);\n        if ($action !== 2 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid scrape response');\n        }\n        $results = [];\n        $offset = 8;\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = unpack('N3', substr($response, $offset, 12));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        if (!socket_send($this->socket, $packet, strlen($packet), 0)) {\n            throw new Exception('Failed to send packet');\n        }\n        $response = '';\n        if (!socket_recv($this->socket, $response, $readLength, 0)) {\n            throw new Exception('Failed to receive response');\n        }\n        $this->checkError($response);\n        return $response;\n    }\n\n    public function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        list($action) = unpack('Naction', $response);\n        if ($action === 3) {\n            list(, $transactionId, $errorCode) = unpack('N2/errorCode', $response);\n            throw new Exception('Tracker error: ' . $errorCode);\n        }\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        $chunks = array_chunk($hashes, 74);\n        foreach ($chunks as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    private function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = mt_rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        if (strlen($response) !== 16) {\n            throw new Exception('Invalid response length');\n        }\n        list(, $action, $transactionId, $this->currentConnectionId) = unpack('N*', $response);\n        if ($action !== 0 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid connection response');\n        }\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $this->generateTransactionId();\n        $packet = pack('N2', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        if (strlen($response) !== 8 + 12 * count($hashes)) {\n            throw new Exception('Invalid response length');\n        }\n        list(, $action, $transactionId) = unpack('N*', substr($response, 0, 8));\n        if ($action !== 2 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid scrape response');\n        }\n        $results = [];\n        $offset = 8;\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = unpack('N*', substr($response, $offset, 12));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        if (!socket_send($this->socket, $packet, strlen($packet), 0)) {\n            throw new Exception('Failed to send packet');\n        }\n        $response = '';\n        $bytesRead = socket_recv($this->socket, $response, $readLength, 0);\n        if ($bytesRead === false) {\n            throw new Exception('Failed to receive response');\n        }\n        $this->checkError($response);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        list($action) = unpack('N', $response);\n        if ($action === 3) {\n            list(, $transactionId, $errorCode) = unpack('N*', substr($response, 0, 12));\n            if ($transactionId === $this->transactionId) {\n                throw new Exception('Tracker error: ' . substr($response, 12));\n            }\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        foreach (array_chunk($hashes, 74) as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        list(, $action, $transactionId, $this->currentConnectionId) = unpack('N*', $response);\n        if ($action !== 0 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid connection response');\n        }\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('N2', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= hex2bin($hash);\n        }\n        $response = $this->request($packet, 8 + (12 * count($hashes)));\n        list(, $action, $transactionId) = unpack('N*', substr($response, 0, 8));\n        if ($action !== 2 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid scrape response');\n        }\n        $results = [];\n        $offset = 8;\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = unpack('N*', substr($response, $offset, 12));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n        socket_send($this->socket, $packet, strlen($packet), 0);\n        $response = '';\n        socket_recv($this->socket, $response, $readLength, 0);\n        $this->checkError($response);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        list(, $action, $transactionId, $errorCode) = unpack('N*', substr($response, 0, 16));\n        if ($action === 3) {\n            throw new Exception('Tracker error: ' . trim(substr($response, 16)));\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        foreach (array_chunk($hashes, 74) as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = random_int(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        if (strlen($response) !== 16 || substr($response, 0, 8) !== pack('N', 0x41727101980)) {\n            throw new Exception('Invalid connection response');\n        }\n        $this->currentConnectionId = unpack('Nconnection_id', substr($response, 8, 8))['connection_id'];\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('NN', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= hex2bin($hash);\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        $this->checkError($response);\n        $data = unpack('Naction/Ntransaction_id/a*', $response);\n        $offset = 8;\n        $results = [];\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = array_values(unpack('N3', substr($data[3], $offset, 12)));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        socket_send($this->socket, $packet, strlen($packet), 0);\n        $response = '';\n        socket_recv($this->socket, $response, $readLength, 0);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        if (strlen($response) < 8) {\n            throw new Exception('Response too short');\n        }\n        $data = unpack('Naction/Ntransaction_id', $response);\n        if ($data['action'] === 3) {\n            throw new Exception('Tracker error: ' . substr($response, 8));\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        foreach (array_chunk($hashes, 74) as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->socket === false) {\n            throw new Exception(\"Failed to create socket: \" . socket_strerror(socket_last_error()));\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception(\"Failed to connect to tracker: \" . socket_strerror(socket_last_error($this->socket)));\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = mt_rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        if (strlen($response) !== 16) {\n            throw new Exception(\"Invalid response length\");\n        }\n        list(, $action, $this->transactionId, $this->currentConnectionId) = unpack('N*', $response);\n        if ($action !== 0) {\n            throw new Exception(\"Unexpected action in response\");\n        }\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('N2', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        if (strlen($response) !== 8 + 12 * count($hashes)) {\n            throw new Exception(\"Invalid response length\");\n        }\n        list(, $action) = unpack('N*', substr($response, 0, 8));\n        if ($action !== 2) {\n            throw new Exception(\"Unexpected action in response\");\n        }\n        $results = [];\n        for ($i = 0; $i < count($hashes); $i++) {\n            list($seeders, $completed, $leechers) = unpack('N*', substr($response, 8 + 12 * $i, 12));\n            $results[$hashes[$i]] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        if (!socket_send($this->socket, $packet, strlen($packet), 0)) {\n            throw new Exception(\"Failed to send data: \" . socket_strerror(socket_last_error($this->socket)));\n        }\n        $response = '';\n        do {\n            $buffer = '';\n            if (!socket_recv($this->socket, $buffer, $readLength, 0)) {\n                break;\n            }\n            $response .= $buffer;\n        } while (strlen($buffer) > 0);\n        $this->checkError($response);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n            $this->transactionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        if (strlen($response) >= 16 && substr($response, 0, 4) === pack('N', 3)) {\n            list(, $action, $transactionId, $errorCode) = unpack('N*', substr($response, 0, 16));\n            if ($action === 3) {\n                throw new Exception(\"Tracker returned error: \" . trim(substr($response, 16)));\n            }\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        $chunks = array_chunk($hashes, 74);\n        foreach ($chunks as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if (!$this->socket) {\n            throw new Exception('Failed to create socket');\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker');\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = mt_rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('NNN', 0x41727101980, 0, $this->transactionId);\n        $response = $this->request($packet, 16);\n        if (strlen($response) !== 16 || substr($response, 0, 8) !== \"\\x00\\x00\\x04\\x17\\x27\\x10\\x19\\x80\") {\n            throw new Exception('Invalid connection response');\n        }\n        $this->currentConnectionId = unpack('Nconnection_id', substr($response, 8, 8))['connection_id'];\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $this->generateTransactionId();\n        $packet = pack('NN', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        $this->checkError($response);\n        $data = unpack('Naction/Ntransaction_id/a*', $response);\n        $offset = 8;\n        $results = [];\n        foreach ($hashes as $hash) {\n            list($seeders, $completed, $leechers) = array_values(unpack('N3', substr($data[3], $offset, 12)));\n            $results[$hash] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n            $offset += 12;\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        socket_send($this->socket, $packet, strlen($packet), 0);\n        $response = '';\n        socket_recv($this->socket, $response, $readLength, 0);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        if (strlen($response) < 8) {\n            throw new Exception('Invalid response length');\n        }\n        $data = unpack('Naction/Ntransaction_id', $response);\n        if ($data['action'] === 3) {\n            throw new Exception('Tracker error: ' . substr($response, 8));\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}",
      "class UdpScraper {\n    private $currentConnectionId;\n    private $transactionId;\n    private $socket;\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->initSocket();\n    }\n\n    public function scrape(Tracker $tracker, array $hashes) {\n        $results = [];\n        foreach (array_chunk($hashes, 74) as $chunk) {\n            $results = array_merge($results, $this->scrapeChunk($tracker, $chunk));\n        }\n        return $results;\n    }\n\n    public function scrapeChunk(Tracker $tracker, array $hashes) {\n        $this->connect($tracker->getDomain(), $tracker->getPort());\n        $this->startTransaction();\n        return $this->scrapeHashes($hashes);\n    }\n\n    private function initSocket() {\n        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n        if ($this->socket === false) {\n            throw new Exception('Failed to create socket: ' . socket_strerror(socket_last_error()));\n        }\n        socket_set_option($this->socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => $this->timeout, 'usec' => 0]);\n    }\n\n    private function connect($domain, $port) {\n        if (!socket_connect($this->socket, $domain, $port)) {\n            throw new Exception('Failed to connect to tracker: ' . socket_strerror(socket_last_error()));\n        }\n    }\n\n    private function generateTransactionId() {\n        $this->transactionId = mt_rand(0, PHP_INT_MAX);\n    }\n\n    private function startTransaction() {\n        $this->generateTransactionId();\n        $packet = pack('N2', 0x41727101980, $this->transactionId);\n        $response = $this->request($packet, 16);\n        if (strlen($response) !== 16) {\n            throw new Exception('Invalid response length');\n        }\n        list(, $action, $transactionId, $connectionId) = unpack('N*', $response);\n        if ($action !== 0 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid connection response');\n        }\n        $this->currentConnectionId = $connectionId;\n    }\n\n    private function scrapeHashes(array $hashes) {\n        $packet = pack('N2', $this->currentConnectionId, $this->transactionId);\n        foreach ($hashes as $hash) {\n            $packet .= $hash;\n        }\n        $response = $this->request($packet, 8 + 12 * count($hashes));\n        if (strlen($response) !== 8 + 12 * count($hashes)) {\n            throw new Exception('Invalid response length');\n        }\n        list(, $action, $transactionId) = unpack('N*', substr($response, 0, 8));\n        if ($action !== 2 || $transactionId !== $this->transactionId) {\n            throw new Exception('Invalid scrape response');\n        }\n        $results = [];\n        for ($i = 0; $i < count($hashes); $i++) {\n            list($seeders, $completed, $leechers) = unpack('N*', substr($response, 8 + 12 * $i, 12));\n            $results[$hashes[$i]] = ['seeders' => $seeders, 'completed' => $completed, 'leechers' => $leechers];\n        }\n        return $results;\n    }\n\n    private function request($packet, $readLength) {\n        if (!socket_send($this->socket, $packet, strlen($packet), 0)) {\n            throw new Exception('Failed to send packet: ' . socket_strerror(socket_last_error()));\n        }\n        $response = '';\n        do {\n            $buffer = '';\n            if (!socket_recv($this->socket, $buffer, $readLength, 0)) {\n                throw new Exception('Failed to receive response: ' . socket_strerror(socket_last_error()));\n            }\n            $response .= $buffer;\n        } while (strlen($response) < $readLength);\n        $this->checkError($response);\n        return $response;\n    }\n\n    private function closeSocket() {\n        if ($this->socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n            $this->currentConnectionId = null;\n        }\n    }\n\n    private function checkError($response) {\n        list(, $action, $transactionId) = unpack('N*', substr($response, 0, 8));\n        if ($action === 3) {\n            $errorMessage = trim(substr($response, 8));\n            throw new Exception('Tracker error: ' . $errorMessage);\n        }\n    }\n\n    public function __destruct() {\n        $this->closeSocket();\n    }\n}"
    ],
    "match_count": 2,
    "pass@3": 0.5333333333333333,
    "pass@5": 0.7777777777777778
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a PHP function that implements a basic TCP socket server capable of handling client connections, executing commands, and managing directory changes.\n\nFunction Description: The function starts a TCP socket server on a specified port, accepts client connections, and provides an interactive shell-like interface. It handles 'cd' commands for directory navigation, 'exit'/'quit' commands for termination, and executes other system commands. The server sends command outputs and current working directory information back to the client.\n\nInput:\n- $port: integer - The port number to bind the server socket to\n- $wpxf_disabled: array - List of disabled functions/callables\n- $wpxf_exec: callable - Function to execute system commands\n\nOutput: None (The function runs indefinitely until the client disconnects or sends an exit command)",
    "Canonical_solution": "function start_socket_server($port, $wpxf_disabled, $wpxf_exec)\n{\n    $scl = 'socket_create_listen';\n    if (is_callable($scl) && !in_array($scl, $wpxf_disabled)) {\n        $sock = @$scl($port);\n    } else {\n        $sock = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        $ret = @socket_bind($sock, 0, $port);\n        $ret = @socket_listen($sock, 5);\n    }\n\n    $msg_sock = @socket_accept($sock);\n    @socket_close($sock);\n\n    $output = getcwd() . ' > ';\n    @socket_write($msg_sock, $output, strlen($output));\n\n    while (false !== @socket_select($r = array($msg_sock), $w = null, $e = null, null)) {\n        $output = '';\n        $cmd = @socket_read($msg_sock, 2048, PHP_NORMAL_READ);\n\n        if (false === $cmd) {\n            break;\n        }\n        if (substr($cmd, 0, 3) == 'cd ') {\n            chdir(substr($cmd, 3, -1));\n            $output = getcwd() . ' > ';\n        } elseif (substr($cmd, 0, 4) == 'quit' || substr($cmd, 0, 4) == 'exit') {\n            break;\n        } else {\n            if (false === strpos(strtolower(PHP_OS), 'win')) {\n                $cmd = rtrim($cmd) . ' 2>&1';\n            }\n\n            $output = $wpxf_exec($cmd);\n            $output .= getcwd() . ' > ';\n        }\n\n        @socket_write($msg_sock, $output, strlen($output));\n    }\n\n    @socket_close($msg_sock);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 136,
    "matched_results": [
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    if (!socket_bind($socket, '0.0.0.0', $port)) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    if (!socket_listen($socket, 5)) {\n        die('Unable to listen on socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Unable to accept incoming connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Error reading from client: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected.\\n\";\n                break;\n            }\n\n            $input = trim($input);\n            if (strtolower($input) === 'exit' || strtolower($input) === 'quit') {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($input, 0, 3) === 'cd ') {\n                $dir = substr($input, 3);\n                if (chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to: $dir\\n\");\n                }\n            } else {\n                $command = trim($input);\n                if (in_array($command, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$command' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $result = $wpxf_exec($command);\n                    $output = ob_get_clean();\n                    socket_write($client, \"$output\\n\");\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    if (!socket_bind($socket, '0.0.0.0', $port)) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    if (!socket_listen($socket, 5)) {\n        die('Unable to listen on socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Unable to accept incoming connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Error reading from socket: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            } elseif ($input === '') {\n                echo \"Client disconnected.\\n\";\n                break;\n            }\n\n            $command = trim($input);\n            if ($command === 'exit' || $command === 'quit') {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($command, 0, 3) === 'cd ') {\n                $dir = substr($command, 3);\n                if (in_array('chdir', $wpxf_disabled)) {\n                    socket_write($client, \"Command 'cd' is disabled.\\n\");\n                } else {\n                    if (@chdir($dir)) {\n                        $cwd = getcwd();\n                        socket_write($client, \"Changed directory to: $cwd\\n\");\n                    } else {\n                        socket_write($client, \"Failed to change directory to: $dir\\n\");\n                    }\n                }\n            } else {\n                if (in_array($command, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$command' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $result = $wpxf_exec($command);\n                    $output = ob_get_clean();\n                    socket_write($client, $output . \"\\n\");\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    $result = socket_bind($socket, '0.0.0.0', $port);\n    if ($result === false) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    socket_listen($socket, 5);\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Failed to accept connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to PHP Socket Server\\nCurrent Directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Failed to read input: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected\\n\";\n                break;\n            }\n\n            $command = trim($input);\n            if (in_array($command, ['exit', 'quit'])) {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($command, 0, 3) === 'cd ') {\n                $dir = substr($command, 3);\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory\\n\");\n                }\n            } else {\n                if (in_array($command, $wpxf_disabled)) {\n                    socket_write($client, \"Command disabled\\n\");\n                } else {\n                    ob_start();\n                    $wpxf_exec($command);\n                    $output = ob_get_clean();\n                    socket_write($client, $output);\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die(\"Could not create socket: \" . socket_strerror(socket_last_error()));\n    }\n\n    if (!socket_bind($socket, '0.0.0.0', $port)) {\n        die(\"Could not bind socket: \" . socket_strerror(socket_last_error($socket)));\n    }\n\n    if (!socket_listen($socket, 5)) {\n        die(\"Could not set up socket listener: \" . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Listening on port $port...\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Could not accept incoming connection: \" . socket_strerror(socket_last_error($socket));\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to server. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Error reading from socket: \" . socket_strerror(socket_last_error($client));\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected.\\n\";\n                break;\n            }\n\n            $command = trim($input);\n            if (in_array($command, ['exit', 'quit'])) {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($command, 0, 3) === 'cd ') {\n                $dir = substr($command, 3);\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to $dir\\n\");\n                }\n            } else {\n                if (in_array($command, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$command' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($command);\n                    if ($output === null) {\n                        $output = ob_get_contents();\n                    }\n                    ob_end_clean();\n                    socket_write($client, \"$output\\n\");\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    if (!socket_bind($socket, '0.0.0.0', $port)) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    if (!socket_listen($socket, 5)) {\n        die('Unable to listen on socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Unable to accept incoming connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to server. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Error reading from client: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            } elseif ($input === '') {\n                echo \"Client disconnected.\\n\";\n                break;\n            }\n\n            $input = trim($input);\n            if (in_array($input, ['exit', 'quit'])) {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (strpos($input, 'cd ') === 0) {\n                $dir = trim(substr($input, 3));\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to: $dir\\n\");\n                }\n            } else {\n                if (in_array($input, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$input' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($input);\n                    if ($output === null) {\n                        $output = ob_get_contents();\n                    }\n                    ob_end_clean();\n                    socket_write($client, \"$output\\n\");\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    if (!socket_bind($socket, '0.0.0.0', $port)) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    if (!socket_listen($socket, 5)) {\n        die('Unable to listen on socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Failed to accept connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to server. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Failed to read input from client: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected\\n\";\n                break;\n            }\n\n            $input = trim($input);\n            if ($input === 'exit' || $input === 'quit') {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($input, 0, 3) === 'cd ') {\n                $dir = substr($input, 3);\n                if (in_array('chdir', $wpxf_disabled)) {\n                    socket_write($client, \"Command 'chdir' is disabled.\\n\");\n                } else {\n                    if (@chdir($dir)) {\n                        $cwd = getcwd();\n                        socket_write($client, \"Changed directory to: $cwd\\n\");\n                    } else {\n                        socket_write($client, \"Failed to change directory to: $dir\\n\");\n                    }\n                }\n            } else {\n                if (in_array($input, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$input' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($input);\n                    if ($output === false) {\n                        $output = \"Failed to execute command: $input\\n\";\n                    }\n                    socket_write($client, $output);\n                    ob_end_clean();\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    $result = socket_bind($socket, '0.0.0.0', $port);\n    if ($result === false) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    socket_listen($socket, 5);\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            die('Unable to accept incoming connection: ' . socket_strerror(socket_last_error($socket)));\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to server. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                die('Error reading from socket: ' . socket_strerror(socket_last_error($client)));\n            } elseif ($input === '') {\n                break;\n            }\n\n            $command = trim($input);\n            if (in_array($command, ['exit', 'quit'])) {\n                break;\n            } elseif (strpos($command, 'cd ') === 0) {\n                $dir = trim(substr($command, 3));\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to: $dir\\n\");\n                }\n            } else {\n                if (in_array($command, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$command' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($command);\n                    $buffer = ob_get_clean();\n                    socket_write($client, $output . $buffer);\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    if (socket_bind($socket, '0.0.0.0', $port) === false) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    if (socket_listen($socket, 5) === false) {\n        die('Unable to listen on socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Unable to accept incoming connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Error reading from client: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected.\\n\";\n                break;\n            }\n\n            $input = trim($input);\n            if (in_array($input, ['exit', 'quit'])) {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($input, 0, 3) === 'cd ') {\n                $dir = substr($input, 3);\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to: $dir\\n\");\n                }\n            } else {\n                if (in_array($input, $wpxf_disabled)) {\n                    socket_write($client, \"Command disabled: $input\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($input);\n                    if ($output === false) {\n                        $output = \"Failed to execute command: $input\\n\";\n                    }\n                    $output .= \"Current directory: $cwd\\n\";\n                    socket_write($client, $output);\n                    ob_end_clean();\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction start_tcp_socket_server($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    $result = socket_bind($socket, '0.0.0.0', $port);\n    if ($result === false) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    $result = socket_listen($socket, 5);\n    if ($result === false) {\n        die('Unable to set up socket listener: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Failed to accept incoming connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to PHP Shell. Current directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Failed to read input from client: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected\\n\";\n                break;\n            }\n\n            $input = trim($input);\n            if ($input === 'exit' || $input === 'quit') {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($input, 0, 3) === 'cd ') {\n                $dir = substr($input, 3);\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to: $dir\\n\");\n                }\n            } else {\n                $command = explode(' ', $input);\n                if (in_array($command[0], $wpxf_disabled)) {\n                    socket_write($client, \"Command disabled: $input\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($input);\n                    $buffer = ob_get_clean();\n                    socket_write($client, $output . $buffer);\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>",
      "<?php\nfunction startSocketServer($port, $wpxf_disabled, $wpxf_exec) {\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if ($socket === false) {\n        die('Unable to create socket: ' . socket_strerror(socket_last_error()));\n    }\n\n    $result = socket_bind($socket, '0.0.0.0', $port);\n    if ($result === false) {\n        die('Unable to bind socket: ' . socket_strerror(socket_last_error($socket)));\n    }\n\n    socket_listen($socket, 5);\n    echo \"Server started on port $port\\n\";\n\n    while (true) {\n        $client = socket_accept($socket);\n        if ($client === false) {\n            echo \"Failed to accept connection: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n            continue;\n        }\n\n        $cwd = getcwd();\n        socket_write($client, \"Connected to PHP Socket Server\\nCurrent Directory: $cwd\\n\");\n\n        while (true) {\n            $input = socket_read($client, 1024);\n            if ($input === false) {\n                echo \"Failed to read input: \" . socket_strerror(socket_last_error($client)) . \"\\n\";\n                break;\n            }\n            if ($input === '') {\n                echo \"Client disconnected\\n\";\n                break;\n            }\n\n            $input = trim($input);\n            if (in_array($input, ['exit', 'quit'])) {\n                socket_write($client, \"Exiting...\\n\");\n                break;\n            } elseif (substr($input, 0, 3) === 'cd ') {\n                $dir = substr($input, 3);\n                if (@chdir($dir)) {\n                    $cwd = getcwd();\n                    socket_write($client, \"Changed directory to: $cwd\\n\");\n                } else {\n                    socket_write($client, \"Failed to change directory to: $dir\\n\");\n                }\n            } else {\n                if (in_array($input, $wpxf_disabled)) {\n                    socket_write($client, \"Command '$input' is disabled.\\n\");\n                } else {\n                    ob_start();\n                    $output = $wpxf_exec($input);\n                    if ($output === false) {\n                        $output = \"Failed to execute command.\\n\";\n                    }\n                    $output .= ob_get_clean();\n                    socket_write($client, $output);\n                }\n            }\n        }\n\n        socket_close($client);\n    }\n\n    socket_close($socket);\n}\n?>"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a MySQL proxy class that handles communication between a client and MySQL server using Swoole's coroutine client for TCP/UDP communication, implementing authentication and packet handling.\n\nClass Description: MysqlProxy - A class that manages MySQL protocol communication between client and server, handling connection establishment, authentication, packet processing, and error handling.\n\nAttributes:\n\nisDuplex: [bool] - Indicates whether duplex communication is supported by Swoole version\nserver: [swoole_server] - Swoole server instance\nserverFd: [int] - File descriptor of the server connection\ncharset: [string] - Character set for MySQL communication\naccount: [array] - MySQL account credentials\nauth: [bool] - Authentication status flag\nchan: [Swoole\\Coroutine\\Channel] - Coroutine channel for communication\nserverPublicKey: [string] - Server's public key for authentication\nsalt: [array] - Salt used for password encryption\nconnected: [bool] - Connection status flag\ntimeout: [float] - Connection timeout value\nmysqlClient: [Swoole\\Coroutine\\Channel] - Channel for MySQL client communication\nmysqlServer: [HandshakePacket] - Server handshake information\nclient: [Swoole\\Coroutine\\Client] - Coroutine client instance\n\nMethods:\n\n__construct: [function](swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) -> [void] - Initializes the proxy with server, file descriptor and channel\nconnect: [function](string $host, int $port, float $timeout = 0.1, int $tryStep = 0) -> [Client|bool] - Establishes connection to MySQL server with retry logic\nonClientReceive: [function](Swoole\\Coroutine\\Client $cli, string $data) -> [void] - Handles incoming data from MySQL server\nprocessAuth: [function](string $pluginName) -> [array] - Processes authentication based on plugin type\nsend: [function](...$data) -> [bool] - Sends data to MySQL server\nrecv: [function](&$remain) -> [mixed] - Receives data from MySQL server\nonClientClose: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client connection closure\nonClientError: [function](Swoole\\Coroutine\\Client $cli) -> [void] - Handles client errors",
    "Canonical_solution": "use Swoole\\Coroutine\\Client;\nuse SMProxy\\MysqlPacket\\AuthPacket;\nuse SMProxy\\MysqlPacket\\BinaryPacket;\nuse SMProxy\\MysqlPacket\\ErrorPacket;\nuse SMProxy\\MysqlPacket\\HandshakePacket;\nuse SMProxy\\MysqlPacket\\MySQLMessage;\nuse SMProxy\\MysqlPacket\\OkPacket;\nuse SMProxy\\MysqlPacket\\Util\\Capabilities;\nuse SMProxy\\MysqlPacket\\Util\\CharsetUtil;\nuse SMProxy\\MysqlPacket\\Util\\SecurityUtil;\nuse SMProxy\\MysqlPool\\MySQLException;\nuse SMProxy\\MysqlPool\\MySQLPool;\n\nclass MysqlProxy\n{\n    private $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth = false;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected = false;\n    public $timeout = 0.1;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(\\swoole_server $server, int $fd, \\Swoole\\Coroutine\\Channel $chan)\n    {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->client = new Client(CONFIG['server']['swoole_client_sock_setting']['sock_type'] ?? SWOOLE_SOCK_TCP);\n        $this->client->set(CONFIG['server']['swoole_client_setting'] ?? []);\n        $this->client->set(packageLengthSetting());\n        $this->isDuplex = version_compare(SWOOLE_VERSION, '4.2.13', '>=');\n        if (!$this->isDuplex) {\n            $this->mysqlClient = new Channel(1);\n        }\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0)\n    {\n        $this->timeout = $timeout;\n        if (!$this->client->connect($host, $port, $timeout)) {\n            if ($tryStep < 3) {\n                $this->client->close();\n                return $this->connect($host, $port, $timeout, ++$tryStep);\n            } else {\n                $this->onClientError($this->client);\n                return false;\n            }\n        } else {\n            if (!$this->isDuplex) {\n                $this->mysqlClient->push($this->client);\n            }\n            self::go(function () {\n                $remain = '';\n                while (true) {\n                    $data = $this->recv($remain);\n                    if ($data === '' || $data === false) {\n                        break;\n                    }\n                }\n            });\n            return $this->client;\n        }\n    }\n\n    public function onClientReceive(\\Swoole\\Coroutine\\Client $cli, string $data)\n    {\n        self::go(function () use ($cli, $data) {\n            $fd = $this->serverFd;\n            $binaryPacket = new BinaryPacket();\n            $binaryPacket->data = getBytes($data);\n            $binaryPacket->packetLength = $binaryPacket->calcPacketSize();\n            if (isset($binaryPacket->data[4])) {\n                $send = true;\n                if ($binaryPacket->data[4] == ErrorPacket::$FIELD_COUNT) {\n                    $errorPacket = new ErrorPacket();\n                    $errorPacket->read($binaryPacket);\n                    $data = getString($errorPacket->write());\n                } elseif (!$this->connected) {\n                    if ($binaryPacket->data[4] == OkPacket::$FIELD_COUNT) {\n                        $send = false;\n                        $this->connected = true;\n                        $this->chan->push($this);\n                    } elseif ($binaryPacket->data[4] == 0x01) {\n                        if ($binaryPacket->packetLength == 6) {\n                            if ($binaryPacket->data[$binaryPacket->packetLength - 1] == 4) {\n                                $data = getString(array_merge(getMysqlPackSize(1), [3, 2]));\n                                $this->send($data);\n                            }\n                        } else {\n                            $this->serverPublicKey = substr($data, 5, strlen($data) - 2);\n                            $encryptData = SecurityUtil::sha2RsaEncrypt($this->account['password'], $this->salt, $this->serverPublicKey);\n                            $data = getString(array_merge(getMysqlPackSize(strlen($encryptData)), [5])) . $encryptData;\n                            $this->send($data);\n                        }\n                        $send = false;\n                    } elseif ($binaryPacket->data[4] == 0xfe) {\n                        $mm = new MySQLMessage($binaryPacket->data);\n                        $mm->move(5);\n                        $pluginName = $mm->readStringWithNull();\n                        $this->salt = $mm->readBytesWithNull();\n                        $password = $this->processAuth($pluginName ?: 'mysql_native_password');\n                        $this->send(getString(array_merge(getMysqlPackSize(count($password)), [3], $password)));\n                        $send = false;\n                    } elseif (!$this->auth) {\n                        $handshakePacket = (new HandshakePacket())->read($binaryPacket);\n                        $this->mysqlServer = $handshakePacket;\n                        $this->salt = array_merge($handshakePacket->seed, $handshakePacket->restOfScrambleBuff);\n                        $password = $this->processAuth($handshakePacket->pluginName);\n                        $clientFlag = Capabilities::CLIENT_CAPABILITIES;\n                        $authPacket = new AuthPacket();\n                        $authPacket->pluginName = $handshakePacket->pluginName;\n                        $authPacket->packetId = 1;\n                        if (isset($this->database) && $this->database) {\n                            $authPacket->database = $this->database;\n                        } else {\n                            $authPacket->database = 0;\n                        }\n                        if ($authPacket->database) {\n                            $clientFlag |= Capabilities::CLIENT_CONNECT_WITH_DB;\n                        }\n                        if (version_compare($handshakePacket->serverVersion, '5.0', '>=')) {\n                            $clientFlag |= Capabilities::CLIENT_MULTI_RESULTS;\n                        }\n                        $authPacket->clientFlags = $clientFlag;\n                        $authPacket->serverCapabilities = $handshakePacket->serverCapabilities;\n                        $authPacket->maxPacketSize =\n                            CONFIG['server']['swoole_client_setting']['package_max_length'] ?? 16777215;\n                        $authPacket->charsetIndex = CharsetUtil::getIndex($this->charset ?? 'utf8mb4');\n                        $authPacket->user = $this->account['user'];\n                        $authPacket->password = $password;\n                        $this->auth = true;\n                        $this->send(getString($authPacket->write()));\n                        $send = false;\n                    }\n                }\n                if ($send && $this->server->exist($fd)) {\n                    $this->server->send($fd, $data);\n                }\n            }\n        });\n    }\n\n    public function processAuth(string $pluginName)\n    {\n        switch ($pluginName) {\n            case 'mysql_native_password':\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n            case 'caching_sha2_password':\n                $password = SecurityUtil::scrambleSha256($this->account['password'], $this->salt);\n                break;\n            case 'sha256_password':\n                throw new MySQLException('Sha256_password plugin is not supported yet');\n                break;\n            case 'mysql_old_password':\n                throw new MySQLException('mysql_old_password plugin is not supported yet');\n                break;\n            case 'mysql_clear_password':\n                $password = array_merge(getBytes($this->account['password']), [0]);\n                break;\n            default:\n                $password = SecurityUtil::scramble411($this->account['password'], $this->salt);\n                break;\n        }\n        return $password;\n    }\n\n    public function send(...$data)\n    {\n        if ($this->isDuplex) {\n            if ($this->client->isConnected()) {\n                return $this->client->send(...$data);\n            } else {\n                return false;\n            }\n        } else {\n            $client = self::coPop($this->mysqlClient);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $result = $client->send(...$data);\n                $this->mysqlClient->push($client);\n                return $result;\n            }\n            return false;\n        }\n    }\n\n    public function recv(&$remain)\n    {\n        if ($this->isDuplex) {\n            $client = $this->client;\n            $data = $client->recv(-1);\n        } else {\n            $client = self::coPop($this->mysqlClient, $this->timeout);\n            if ($client === false) {\n                return false;\n            }\n            if ($client->isConnected()) {\n                $data = $client->recv($this->timeout / 500);\n            } else {\n                $data = '';\n            }\n            $this->mysqlClient->push($client);\n            if ($data === false && $client->errCode == 110) {\n                $data = true;\n            }\n            if ($data === '' || $data === false) {\n                $this->mysqlClient->close();\n            }\n        }\n        if ($data === '' || $data === false) {\n            $this->onClientClose($client);\n        } elseif (is_string($data)) {\n            $this->onClientReceive($client, $data);\n        }\n        return $data;\n    }\n\n    public function onClientClose(\\Swoole\\Coroutine\\Client $cli)\n    {\n        MySQLPool::destruct($cli, $this->connName);\n    }\n\n    public function onClientError(\\Swoole\\Coroutine\\Client $cli)\n    {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "matched_results": [],
    "unmatched_results": [
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Process received data\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Handle authentication based on plugin\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client close\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client error\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Handle incoming data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Process authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        $this->timeout = $timeout;\n        if ($this->client->connect($host, $port, $this->timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Process received data\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Handle authentication based on plugin\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client close\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client error\n    }\n}",
      "class MysqlProxy {\n    private $isDuplex;\n    private $server;\n    private $serverFd;\n    private $charset;\n    private $account;\n    private $auth;\n    private $chan;\n    private $serverPublicKey;\n    private $salt;\n    private $connected;\n    private $timeout;\n    private $mysqlClient;\n    private $mysqlServer;\n    private $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n        $this->isDuplex = swoole_version() >= '4.5.0';\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): ?Client {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Process received data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Handle authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain) {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): ?Client {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Process received data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Handle authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        if ($this->connected) {\n            return $this->client->send(implode('', $data));\n        }\n        return false;\n    }\n\n    public function recv(&$remain) {\n        if ($this->connected) {\n            return $this->client->recv();\n        }\n        return false;\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Handle incoming data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Process authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Handle incoming data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Process authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n        $this->isDuplex = swoole_version() >= '4.5.0';\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): ?Client {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Handle incoming data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Process authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain) {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Process received data\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Handle authentication based on plugin\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client close\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client error\n    }\n}",
      "class MysqlProxy {\n    public $isDuplex;\n    public $server;\n    public $serverFd;\n    public $charset;\n    public $account;\n    public $auth;\n    public $chan;\n    public $serverPublicKey;\n    public $salt;\n    public $connected;\n    public $timeout;\n    public $mysqlClient;\n    public $mysqlServer;\n    public $client;\n\n    public function __construct(swoole_server $server, int $fd, Swoole\\Coroutine\\Channel $chan) {\n        $this->server = $server;\n        $this->serverFd = $fd;\n        $this->chan = $chan;\n        $this->isDuplex = swoole_version() >= '4.5.0';\n        $this->charset = 'utf8mb4';\n        $this->account = [];\n        $this->auth = false;\n        $this->serverPublicKey = '';\n        $this->salt = [];\n        $this->connected = false;\n        $this->timeout = 0.1;\n        $this->mysqlClient = new Swoole\\Coroutine\\Channel(1);\n        $this->mysqlServer = null;\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect(string $host, int $port, float $timeout = 0.1, int $tryStep = 0): Client|bool {\n        if ($this->client->connect($host, $port, $timeout)) {\n            $this->connected = true;\n            return $this->client;\n        }\n        if ($tryStep < 3) {\n            return $this->connect($host, $port, $timeout, $tryStep + 1);\n        }\n        return false;\n    }\n\n    public function onClientReceive(Swoole\\Coroutine\\Client $cli, string $data): void {\n        // Handle incoming data from MySQL server\n    }\n\n    public function processAuth(string $pluginName): array {\n        // Process authentication based on plugin type\n        return [];\n    }\n\n    public function send(...$data): bool {\n        return $this->client->send(implode('', $data));\n    }\n\n    public function recv(&$remain): mixed {\n        return $this->client->recv();\n    }\n\n    public function onClientClose(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client connection closure\n    }\n\n    public function onClientError(Swoole\\Coroutine\\Client $cli): void {\n        // Handle client errors\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a PHP class that implements a JSON-RPC client using Swoole's coroutine-based TCP client for asynchronous communication with a JSON-RPC server. The class should handle connection management, request/response serialization, and middleware processing.\n\nClass Description: The Connection class provides a JSON-RPC client implementation using Swoole's coroutine client for TCP communication. It manages the connection lifecycle, handles JSON-RPC protocol serialization/deserialization, and supports middleware processing for requests.\n\nAttributes:\n- host: [string] - The hostname or IP address of the JSON-RPC server\n- port: [int] - The port number of the JSON-RPC server\n- timeout: [float] - Connection timeout in seconds\n- callTimeout: [float] - Timeout for RPC calls in seconds\n- middleware: [array] - Array of middleware objects to process requests\n- client: [Swoole\\Coroutine\\Client] - The Swoole coroutine client instance (protected)\n\nMethods:\n- __construct([array $config = []]) -> [void] - Constructor that initializes the connection with optional configuration\n- connect() -> [void] - Establishes a TCP connection to the JSON-RPC server\n- call([Request $request]) -> [Response] - Sends a JSON-RPC request and returns the response, processing through middleware\n- close() -> [void] - Closes the connection to the server\n- recv([float $timeout = -1]) -> [string] - Receives data from the server with optional timeout (protected)\n- send([string $data]) -> [void] - Sends data to the server (protected)",
    "Canonical_solution": "use Mix\\Bean\\BeanInjector;\nuse Mix\\JsonRpc\\Constants;\nuse Mix\\JsonRpc\\Exception\\DeserializeException;\nuse Mix\\JsonRpc\\Helper\\JsonRpcHelper;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareDispatcher;\nuse Mix\\JsonRpc\\Middleware\\MiddlewareInterface;\nuse Mix\\JsonRpc\\Message\\Request;\nuse Mix\\JsonRpc\\Message\\Response;\nuse Swoole\\Coroutine\\Client;\n\nclass Connection\n{\n    public $host = '';\n    public $port = 0;\n    public $timeout = 0.0;\n    public $callTimeout = 10.0;\n    public $middleware = [];\n    protected $client;\n\n    public function __construct(array $config = [])\n    {\n        BeanInjector::inject($this, $config);\n    }\n\n    public function connect()\n    {\n        $host    = $this->host;\n        $port    = $this->port;\n        $timeout = $this->timeout;\n        $client  = new Client(SWOOLE_SOCK_TCP);\n        $client->set([\n            'open_eof_check' => true,\n            'package_eof'    => Constants::EOF,\n        ]);\n        if (!$client->connect($host, $port, $timeout)) {\n            throw new \\Swoole\\Exception(sprintf(\"JSON-RPC: %s (host:%s, port: %s)\", $client->errMsg, $host, $port), $client->errCode);\n        }\n        $this->client = $client;\n    }\n\n    public function call(Request $request)\n    {\n        $process              = function (Request $request) {\n            $jsonString = JsonRpcHelper::encode($request) . Constants::EOF;\n            $this->send($jsonString);\n            $data = $this->recv($this->callTimeout);\n            return JsonRpcHelper::deserializeResponse($data);\n        };\n        $middlewareDispatcher = new MiddlewareDispatcher($this->middleware, $process, $request);\n        return $middlewareDispatcher->dispatch();\n    }\n\n    public function close()\n    {\n        if (!$this->client->close()) {\n            $errMsg  = $this->client->errMsg;\n            $errCode = $this->client->errCode;\n            if ($errMsg == '' && $errCode == 0) {\n                return;\n            }\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n    }\n\n    protected function recv(float $timeout = -1)\n    {\n        $data = $this->client->recv($timeout);\n        if ($data === false) {\n            $client = $this->client;\n            throw new \\Swoole\\Exception($client->errMsg, $client->errCode);\n        }\n        if ($data === \"\") {\n            $errCode = stripos(PHP_OS, 'Darwin') !== false ? 54 : 104;\n            $errMsg  = swoole_strerror($errCode, 9);\n            throw new \\Swoole\\Exception($errMsg, $errCode);\n        }\n        return $data;\n    }\n\n    protected function send(string $data)\n    {\n        $len  = strlen($data);\n        $size = $this->client->send($data);\n        if ($size === false) {\n            throw new \\Swoole\\Exception($this->client->errMsg, $this->client->errCode);\n        }\n        if ($len !== $size) {\n            throw new \\Swoole\\Exception('The sending data is incomplete, it may be that the socket has been closed by the peer.');\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 139,
    "matched_results": [],
    "unmatched_results": [
      "class Connection {\n    private $host;\n    private $port;\n    private $timeout;\n    private $callTimeout;\n    private $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n\n        $requestData = json_encode($request->toArray());\n        $this->send($requestData);\n\n        $response = $this->recv($this->callTimeout);\n        return new Response(json_decode($response, true));\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "class Connection {\n    private $host;\n    private $port;\n    private $timeout;\n    private $callTimeout;\n    private $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request) {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n        $this->send(json_encode($request));\n        $response = json_decode($this->recv($this->callTimeout), true);\n        return new Response($response);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1) {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "<?php\n\nclass Connection {\n    protected $host;\n    protected $port;\n    protected $timeout;\n    protected $callTimeout;\n    protected $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $request = $middleware->process($request);\n        }\n\n        $jsonRequest = json_encode($request);\n        $this->send($jsonRequest);\n\n        $responseJson = $this->recv($this->callTimeout);\n        $response = json_decode($responseJson, true);\n\n        return new Response($response);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "<?php\n\nclass Connection {\n    protected $host;\n    protected $port;\n    protected $timeout;\n    protected $callTimeout;\n    protected $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n\n        $requestData = json_encode($request->toArray());\n        $this->send($requestData);\n\n        $responseJson = $this->recv($this->callTimeout);\n        $responseData = json_decode($responseJson, true);\n\n        return new Response($responseData);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "class Connection {\n    protected $host;\n    protected $port;\n    protected $timeout;\n    protected $callTimeout;\n    protected $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request) {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n        $jsonRequest = json_encode($request);\n        $this->send($jsonRequest);\n        $response = $this->recv($this->callTimeout);\n        return json_decode($response, true);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1) {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "<?php\n\nclass Connection {\n    protected $host;\n    protected $port;\n    protected $timeout;\n    protected $callTimeout;\n    protected $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n\n        $requestData = json_encode($request->toArray());\n        $this->send($requestData);\n\n        $responseJson = $this->recv($this->callTimeout);\n        $responseData = json_decode($responseJson, true);\n\n        return new Response($responseData);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        $data = '';\n        $startTime = microtime(true);\n        while (($timeout < 0 || (microtime(true) - $startTime) < $timeout) && !$this->client->isConnected()) {\n            $data .= $this->client->recv();\n            if ($data !== '') {\n                break;\n            }\n            \\Swoole\\Coroutine::sleep(0.01);\n        }\n        if ($data === '') {\n            throw new Exception(\"Receive timeout\");\n        }\n        return $data;\n    }\n\n    protected function send(string $data) {\n        if (!$this->client->send($data)) {\n            throw new Exception(\"Send failed: {$this->client->errCode}\");\n        }\n    }\n}",
      "class Connection {\n    private $host;\n    private $port;\n    private $timeout;\n    private $callTimeout;\n    private $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request) {\n        foreach ($this->middleware as $middleware) {\n            $request = $middleware->process($request);\n        }\n\n        $this->send(json_encode($request));\n        $responseJson = $this->recv($this->callTimeout);\n        return json_decode($responseJson, false);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1) {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "class Connection {\n    private $host;\n    private $port;\n    private $timeout;\n    private $callTimeout;\n    private $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n        $data = json_encode($request->toArray());\n        $this->send($data);\n        $response = $this->recv($this->callTimeout);\n        return new Response(json_decode($response, true));\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "class Connection {\n    private $host;\n    private $port;\n    private $timeout;\n    private $callTimeout;\n    private $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\");\n        }\n    }\n\n    public function call(Request $request) {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n        $this->send(json_encode($request));\n        $response = json_decode($this->recv($this->callTimeout), true);\n        return new Response($response);\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1) {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}",
      "class Connection {\n    private $host;\n    private $port;\n    private $timeout;\n    private $callTimeout;\n    private $middleware;\n    protected $client;\n\n    public function __construct(array $config = []) {\n        $this->host = $config['host'] ?? '127.0.0.1';\n        $this->port = $config['port'] ?? 9501;\n        $this->timeout = $config['timeout'] ?? 3.0;\n        $this->callTimeout = $config['callTimeout'] ?? 5.0;\n        $this->middleware = $config['middleware'] ?? [];\n        $this->client = new Swoole\\Coroutine\\Client(SWOOLE_SOCK_TCP);\n    }\n\n    public function connect() {\n        if (!$this->client->connect($this->host, $this->port, $this->timeout)) {\n            throw new Exception(\"Connection failed: {$this->client->errCode}\\n\");\n        }\n    }\n\n    public function call(Request $request): Response {\n        foreach ($this->middleware as $middleware) {\n            $middleware->process($request);\n        }\n        $jsonRequest = json_encode($request);\n        $this->send($jsonRequest);\n        $response = $this->recv($this->callTimeout);\n        return new Response(json_decode($response, true));\n    }\n\n    public function close() {\n        $this->client->close();\n    }\n\n    protected function recv(float $timeout = -1): string {\n        return $this->client->recv($timeout);\n    }\n\n    protected function send(string $data) {\n        $this->client->send($data);\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a WebSocket server in PHP using stream_socket_server that handles client connections, processes requests, and sends responses.\n\nClass Description: The Server class implements a WebSocket server that listens for incoming connections, handles client requests through callbacks, and manages socket communication. It supports non-blocking operations and provides hooks for custom logic.\n\nAttributes:\n- host: string - The host address to bind the server to\n- port: int - The port number to listen on\n- output: OutputInterface - Interface for debug and status output\n- stop: bool - Flag to control server shutdown\n- socket: resource - The main server socket resource\n- clientSockets: array - Array of connected client sockets\n- afterCallback: Closure - Callback executed after server starts\n- tickerCallback: Closure - Periodic callback during server loop\n- routerCallback: Closure - Request routing callback\n\nMethods:\n- __construct(string $host, int $port, OutputInterface $output) -> void - Initializes server with host, port and output interface\n- checkRequiredExtensionsExists() -> void - Validates required PHP extensions are loaded\n- run() -> void - Starts the server main loop\n- createServerSocket() -> resource - Creates and configures the server socket\n- updatePort() -> void - Updates the port number from actual socket binding\n- acceptNewConnections() -> void - Accepts new client connections\n- handleClientRequests() -> void - Processes requests from connected clients\n- readClientRequest(resource $clientSocket) -> string - Reads complete request from client\n- parseRequest(string $request) -> array - Parses request into path and payload\n- sendResponse(resource $clientSocket, Response $response) -> void - Sends formatted response to client\n- closeClientSocket(resource $clientSocket, int $key) -> void - Closes and removes client socket\n- afterRun(Closure $param) -> void - Sets after-start callback\n- ticker(Closure $param) -> void - Sets periodic tick callback\n- router(Closure $param) -> void - Sets request routing callback\n- stop() -> void - Signals server to stop",
    "Canonical_solution": "use Closure;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass Server\n{\n    private string $host;\n    private int $port;\n    private OutputInterface $output;\n    private bool $stop = false;\n    private $socket;\n    private array $clientSockets = [];\n    private Closure $afterCallback;\n    private Closure $tickerCallback;\n    private Closure $routerCallback;\n\n    public function __construct($host, $port, OutputInterface $output)\n    {\n        self::checkRequiredExtensionsExists();\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n    }\n\n    public static function checkRequiredExtensionsExists(): void\n    {\n        if (!function_exists('socket_import_stream')) {\n            throw new Exception('Required PHP extension \"sockets\" is not loaded');\n        }\n        if (!function_exists('stream_set_blocking')) {\n            throw new Exception('Required PHP extension \"stream\" is not loaded');\n        }\n    }\n\n    public function run(): void\n    {\n        try {\n            $this->socket = $this->createServerSocket();\n            $this->updatePort();\n            if ($this->output->isDebug()) {\n                $this->output->writeln(\"[master] Starting server at http://{$this->host}:{$this->port}\");\n            }\n\n            ($this->afterCallback)($this->port);\n\n            while (true) {\n                $this->acceptNewConnections();\n                $this->handleClientRequests();\n                usleep(16_000);\n                ($this->tickerCallback)();\n                if ($this->stop) {\n                    break;\n                }\n            }\n\n            if ($this->output->isDebug()) {\n                $this->output->writeln(\"[master] Stopping server at http://{$this->host}:{$this->port}\");\n            }\n        } finally {\n            if (isset($this->socket)) {\n                fclose($this->socket);\n            }\n        }\n    }\n\n    private function createServerSocket()\n    {\n        $server = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$server) {\n            throw new Exception(\"Socket creation failed: $errstr ($errno)\");\n        }\n        if (!stream_set_blocking($server, false)) {\n            throw new Exception(\"Failed to set server socket to non-blocking mode\");\n        }\n        return $server;\n    }\n\n    private function updatePort(): void\n    {\n        $name = stream_socket_get_name($this->socket, false);\n        if ($name) {\n            list(, $port) = explode(':', $name);\n            $this->port = (int) $port;\n        } else {\n            throw new Exception(\"Failed to get the assigned port\");\n        }\n    }\n\n    private function acceptNewConnections(): void\n    {\n        $newClientSocket = @stream_socket_accept($this->socket, 0);\n        if ($newClientSocket) {\n            if (!stream_set_blocking($newClientSocket, false)) {\n                throw new Exception(\"Failed to set client socket to non-blocking mode\");\n            }\n            $this->clientSockets[] = $newClientSocket;\n        }\n    }\n\n    private function handleClientRequests(): void\n    {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            if (feof($clientSocket)) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $request = $this->readClientRequest($clientSocket);\n            list($path, $payload) = $this->parseRequest($request);\n            $response = ($this->routerCallback)($path, $payload);\n            $this->sendResponse($clientSocket, $response);\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    private function readClientRequest($clientSocket)\n    {\n        $request = '';\n        while (($chunk = @fread($clientSocket, 1024)) !== false) {\n            $request .= $chunk;\n            if (strpos($request, \"\\r\\n\\r\\n\") !== false) {\n                break;\n            }\n        }\n        if ($chunk === false && !feof($clientSocket)) {\n            throw new Exception(\"Socket read failed\");\n        }\n        return $request;\n    }\n\n    private function parseRequest($request)\n    {\n        $lines = explode(\"\\r\\n\", $request);\n        $requestLine = $lines[0];\n        $parts = explode(' ', $requestLine);\n        if (count($parts) !== 3) {\n            throw new Exception(\"Malformed request line: $requestLine\");\n        }\n        $path = $parts[1];\n\n        $headers = [];\n        for ($i = 1; $i < count($lines); $i++) {\n            $line = $lines[$i];\n            if (empty($line)) {\n                break;\n            }\n            [$key, $value] = explode(':', $line, 2);\n            $headers[$key] = trim($value);\n        }\n        if (empty($headers['Content-Type']) || $headers['Content-Type'] !== 'application/json') {\n            throw new Exception(\"Malformed request: invalid Content-Type\");\n        }\n\n        $payload = json_decode(implode(\"\\n\", array_slice($lines, $i + 1)), true, flags: JSON_THROW_ON_ERROR);\n        return [$path, $payload];\n    }\n\n    private function sendResponse($clientSocket, Response $response)\n    {\n        $code = $response->getStatus();\n        $content = json_encode($response->getBody(), flags: JSON_PRETTY_PRINT);\n        $headers = \"HTTP/1.1 $code OK\\r\\n\" .\n            \"Content-Type: application/json\\r\\n\" .\n            \"Content-Length: \" . strlen($content) . \"\\r\\n\" .\n            \"Connection: close\\r\\n\\r\\n\";\n        fwrite($clientSocket, $headers . $content);\n    }\n\n    private function closeClientSocket($clientSocket, $key): void\n    {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n    }\n\n    public function afterRun(Closure $param): void\n    {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param): void\n    {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param)\n    {\n        $this->routerCallback = $param;\n    }\n\n    public function stop(): void\n    {\n        $this->stop = true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 129,
    "matched_results": [
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->checkRequiredExtensionsExists();\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(1000); // Sleep for 1ms to prevent high CPU usage\n        }\n\n        $this->closeAllClientSockets();\n        fclose($this->socket);\n        $this->output->write(\"Server stopped.\");\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$socket) {\n            throw new Exception(\"Could not create socket: [$errno] $errstr\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = $info['local_port'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New client connected.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 2048)) !== '') {\n            $request .= $buffer;\n        }\n        if ($buffer === '' && feof($clientSocket)) {\n            return false;\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request): array {\n        // Simple parsing, assuming JSON payload\n        $data = json_decode($request, true);\n        return [\n            'path' => $data['path'] ?? '/',\n            'payload' => $data['payload'] ?? null\n        ];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        $data = $response->getData();\n        fwrite($clientSocket, json_encode($data));\n    }\n\n    private function closeClientSocket($clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\");\n    }\n\n    private function closeAllClientSockets() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('The sockets extension is required but not installed.');\n        }\n    }\n\n    public function run() {\n        $this->checkRequiredExtensionsExists();\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms to prevent high CPU usage\n        }\n\n        $this->closeAllClientSockets();\n        fclose($this->socket);\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, 128);\n        if (!$socket) {\n            throw new Exception(\"Could not create socket: [$errno] $errstr\");\n        }\n        return $socket;\n    }\n\n    private function updatePort() {\n        $name = stream_socket_get_name($this->socket, false);\n        $this->port = (int)substr($name, strrpos($name, ':') + 1);\n    }\n\n    private function acceptNewConnections() {\n        $read = $this->clientSockets;\n        $read[] = $this->socket;\n        $write = null;\n        $except = null;\n\n        if (stream_select($read, $write, $except, 0) < 1) {\n            return;\n        }\n\n        foreach ($read as $index => $socket) {\n            if ($socket === $this->socket) {\n                $newSocket = stream_socket_accept($this->socket, -1);\n                if ($newSocket) {\n                    $this->clientSockets[] = $newSocket;\n                }\n            } else {\n                $buffer = fread($socket, 1024);\n                if ($buffer === '' || $buffer === false) {\n                    $this->closeClientSocket($socket, $index);\n                }\n            }\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $index => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request) {\n                $parsedRequest = $this->parseRequest($request);\n                if ($this->routerCallback) {\n                    $response = call_user_func($this->routerCallback, $parsedRequest['path'], $parsedRequest['payload']);\n                    if ($response instanceof Response) {\n                        $this->sendResponse($clientSocket, $response);\n                    }\n                }\n            }\n        }\n    }\n\n    private function readClientRequest(resource $clientSocket): string {\n        $request = '';\n        while (($buffer = fread($clientSocket, 1024)) !== '') {\n            $request .= $buffer;\n            if (strpos($request, \"\\r\\n\\r\\n\") !== false) {\n                break;\n            }\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request): array {\n        $lines = explode(\"\\r\\n\", $request);\n        $firstLine = explode(' ', $lines[0]);\n        $path = $firstLine[1];\n        $payload = '';\n        $foundPayload = false;\n        foreach ($lines as $line) {\n            if ($foundPayload) {\n                $payload .= $line . \"\\r\\n\";\n            }\n            if ($line === '') {\n                $foundPayload = true;\n            }\n        }\n        return ['path' => $path, 'payload' => trim($payload)];\n    }\n\n    private function sendResponse(resource $clientSocket, Response $response) {\n        $data = $response->getData();\n        $responseText = \"HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nContent-Length: \" . strlen($data) . \"\\r\\nConnection: close\\r\\n\\r\\n\" . $data;\n        fwrite($clientSocket, $responseText);\n    }\n\n    private function closeClientSocket(resource $clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n    }\n\n    private function closeAllClientSockets() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n        $this->checkRequiredExtensionsExists();\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms to prevent high CPU usage\n        }\n\n        $this->output->write(\"Server stopped.\");\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN);\n        if (!$socket) {\n            throw new Exception(\"Could not create server socket: [$errno] $errstr\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = $info['local_port'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New client connected.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 2048)) !== '') {\n            $request .= $buffer;\n        }\n        if ($buffer === '' && feof($clientSocket)) {\n            return false;\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request): array {\n        // Simple parsing, assuming JSON format for demonstration\n        return json_decode($request, true);\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        fwrite($clientSocket, json_encode(['response' => $response->getData()]));\n    }\n\n    private function closeClientSocket($clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\");\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->checkRequiredExtensionsExists();\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(1000); // Sleep for 1ms to prevent high CPU usage\n        }\n\n        $this->output->write(\"Shutting down server...\");\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n        fclose($this->socket);\n    }\n\n    private function createServerSocket() {\n        $uri = \"tcp://{$this->host}:{$this->port}\";\n        $socket = stream_socket_server($uri, $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, 128);\n        if (!$socket) {\n            throw new Exception(\"Could not bind to socket: [$errno] $errstr\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = $info['local_port'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New connection accepted.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request !== '') {\n                $parsedRequest = $this->parseRequest($request);\n                if ($this->routerCallback) {\n                    $response = call_user_func($this->routerCallback, $parsedRequest);\n                    if ($response instanceof Response) {\n                        $this->sendResponse($clientSocket, $response);\n                    }\n                }\n            } else {\n                $this->closeClientSocket($clientSocket, $key);\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $buffer = '';\n        while (($data = fread($clientSocket, 1024)) !== '') {\n            $buffer .= $data;\n        }\n        return $buffer;\n    }\n\n    private function parseRequest(string $request) {\n        // Simple parsing logic, needs to be expanded for full WebSocket protocol compliance\n        return ['path' => '/', 'payload' => $request];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        $data = $response->getData();\n        fwrite($clientSocket, $data);\n    }\n\n    private function closeClientSocket($clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Connection closed.\");\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n        $this->checkRequiredExtensionsExists();\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\");\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n            usleep(10000); // Sleep for 10ms\n        }\n        $this->closeAllClientSockets();\n        fclose($this->socket);\n        $this->output->write(\"Server stopped.\");\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$socket) {\n            throw new Exception(\"Could not create socket: [$errno] $errstr\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = (int)$info['uri'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New connection accepted.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 2048)) !== '') {\n            $request .= $buffer;\n            if (strpos($request, \"\\r\\n\\r\\n\") !== false) {\n                break;\n            }\n        }\n        if ($buffer === '' && feof($clientSocket)) {\n            return false;\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request): array {\n        $lines = explode(\"\\r\\n\", $request);\n        $firstLine = explode(' ', $lines[0]);\n        $path = $firstLine[1];\n        $payload = '';\n        $foundPayload = false;\n        foreach ($lines as $line) {\n            if ($foundPayload) {\n                $payload .= $line . \"\\r\\n\";\n            }\n            if ($line === '') {\n                $foundPayload = true;\n            }\n        }\n        return ['path' => $path, 'payload' => $payload];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        $data = $response->getData();\n        $responseText = \"HTTP/1.1 200 OK\\r\\nContent-Length: \" . strlen($data) . \"\\r\\nConnection: close\\r\\n\\r\\n\" . $data;\n        fwrite($clientSocket, $responseText);\n        fclose($clientSocket);\n        $this->output->write(\"Response sent.\");\n    }\n\n    private function closeClientSocket($clientSocket, $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\");\n    }\n\n    private function closeAllClientSockets() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n        $this->checkRequiredExtensionsExists();\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}.\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms to prevent high CPU usage\n        }\n\n        $this->output->write(\"Shutting down server.\");\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n        fclose($this->socket);\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$socket) {\n            throw new Exception(\"Could not create server socket: [$errno] $errstr\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = (int)$info['uri'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New client connected.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 2048)) !== '') {\n            $request .= $buffer;\n        }\n        if ($buffer === false) {\n            return false; // Connection closed by client\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request) {\n        // Simple parsing for demonstration purposes\n        $lines = explode(\"\\r\\n\", $request);\n        $firstLine = explode(' ', $lines[0]);\n        $path = $firstLine[1];\n        $payload = '';\n        $foundBody = false;\n        foreach ($lines as $line) {\n            if ($foundBody) {\n                $payload .= $line . \"\\r\\n\";\n            } elseif ($line === '') {\n                $foundBody = true;\n            }\n        }\n        return ['path' => $path, 'payload' => $payload];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        $data = $response->getData();\n        fwrite($clientSocket, \"HTTP/1.1 200 OK\\r\\n\");\n        fwrite($clientSocket, \"Content-Type: application/json\\r\\n\");\n        fwrite($clientSocket, \"Connection: close\\r\\n\");\n        fwrite($clientSocket, \"\\r\\n\");\n        fwrite($clientSocket, json_encode($data));\n        fclose($clientSocket);\n        unset($this->clientSockets[array_search($clientSocket, $this->clientSockets)]);\n    }\n\n    private function closeClientSocket($clientSocket, $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\");\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('The sockets extension is required but not installed.');\n        }\n    }\n\n    public function run() {\n        $this->checkRequiredExtensionsExists();\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\\n\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms to prevent high CPU usage\n        }\n\n        $this->closeAllClientSockets();\n        fclose($this->socket);\n        $this->output->write(\"Server stopped.\\n\");\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, 128);\n        if (!$socket) {\n            throw new Exception(\"Could not create server socket: [$errno] $errstr\\n\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = $info['local_port'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New client connected.\\n\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 1024)) !== '') {\n            $request .= $buffer;\n        }\n        if ($buffer === '' && feof($clientSocket)) {\n            return false;\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request) {\n        // Simple parsing, assuming JSON format for demonstration\n        $data = json_decode($request, true);\n        return [\n            'path' => $data['path'] ?? '/',\n            'payload' => $data['payload'] ?? null,\n        ];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        $data = json_encode(['response' => $response->getData()]);\n        fwrite($clientSocket, $data);\n    }\n\n    private function closeClientSocket($clientSocket, $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\\n\");\n    }\n\n    private function closeAllClientSockets() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('The sockets extension is required but not installed.');\n        }\n    }\n\n    public function run() {\n        $this->checkRequiredExtensionsExists();\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms to prevent high CPU usage\n        }\n\n        $this->closeAllClientSockets();\n        fclose($this->socket);\n        $this->output->write(\"Server stopped.\");\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$socket) {\n            throw new Exception(\"Could not create server socket: [$errno] $errstr\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = (int)$info['uri'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New client connected.\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $buffer = '';\n        while (($data = fread($clientSocket, 8192)) !== '') {\n            $buffer .= $data;\n        }\n        if ($data === '' && feof($clientSocket)) {\n            return false;\n        }\n        return $buffer;\n    }\n\n    private function parseRequest(string $request): array {\n        // Simple parsing logic, should be replaced with proper WebSocket frame parsing\n        return ['path' => '/', 'payload' => $request];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        // Simple sending logic, should be replaced with proper WebSocket frame creation\n        fwrite($clientSocket, $response->getData());\n    }\n\n    private function closeClientSocket($clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\");\n    }\n\n    private function closeAllClientSockets() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n        $this->checkRequiredExtensionsExists();\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\\n\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms to prevent high CPU usage\n        }\n\n        $this->closeAllClientSockets();\n        fclose($this->socket);\n        $this->output->write(\"Server stopped.\\n\");\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr);\n        if (!$socket) {\n            throw new Exception(\"Could not create server socket: [$errno] $errstr\\n\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = $info['local_port'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New client connected.\\n\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request === false) {\n                $this->closeClientSocket($clientSocket, $key);\n                continue;\n            }\n\n            $parsedRequest = $this->parseRequest($request);\n            if ($this->routerCallback) {\n                $response = call_user_func($this->routerCallback, $parsedRequest);\n                if ($response instanceof Response) {\n                    $this->sendResponse($clientSocket, $response);\n                }\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 2048)) !== '') {\n            $request .= $buffer;\n        }\n        if ($buffer === '' && feof($clientSocket)) {\n            return false;\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request) {\n        // Simple parsing logic, should be replaced with proper WebSocket frame parsing\n        return ['path' => '/', 'payload' => $request];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        // Simple response sending logic, should be replaced with proper WebSocket frame creation\n        fwrite($clientSocket, $response->getData());\n    }\n\n    private function closeClientSocket($clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Client disconnected.\\n\");\n    }\n\n    private function closeAllClientSockets() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}",
      "<?php\n\ninterface OutputInterface {\n    public function write($message);\n}\n\nclass Response {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\nclass Server {\n    private $host;\n    private $port;\n    private $output;\n    private $stop;\n    private $socket;\n    private $clientSockets;\n    private $afterCallback;\n    private $tickerCallback;\n    private $routerCallback;\n\n    public function __construct(string $host, int $port, OutputInterface $output) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->output = $output;\n        $this->stop = false;\n        $this->clientSockets = [];\n        $this->checkRequiredExtensionsExists();\n    }\n\n    private function checkRequiredExtensionsExists() {\n        if (!extension_loaded('sockets')) {\n            throw new Exception('Sockets extension is not loaded.');\n        }\n    }\n\n    public function run() {\n        $this->socket = $this->createServerSocket();\n        $this->updatePort();\n        $this->output->write(\"Server started on {$this->host}:{$this->port}\\n\");\n\n        if ($this->afterCallback) {\n            call_user_func($this->afterCallback);\n        }\n\n        while (!$this->stop) {\n            $this->acceptNewConnections();\n            $this->handleClientRequests();\n\n            if ($this->tickerCallback) {\n                call_user_func($this->tickerCallback);\n            }\n\n            usleep(10000); // Sleep for 10ms\n        }\n\n        $this->output->write(\"Shutting down server...\\n\");\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $this->closeClientSocket($clientSocket, $key);\n        }\n        fclose($this->socket);\n    }\n\n    private function createServerSocket() {\n        $socket = stream_socket_server(\"tcp://{$this->host}:{$this->port}\", $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, 128);\n        if (!$socket) {\n            throw new Exception(\"Could not create socket: [$errno] $errstr\\n\");\n        }\n        stream_set_blocking($socket, 0);\n        return $socket;\n    }\n\n    private function updatePort() {\n        $info = stream_get_meta_data($this->socket);\n        $this->port = $info['local_port'];\n    }\n\n    private function acceptNewConnections() {\n        $newSocket = @stream_socket_accept($this->socket, 0);\n        if ($newSocket) {\n            stream_set_blocking($newSocket, 0);\n            $this->clientSockets[] = $newSocket;\n            $this->output->write(\"New connection accepted.\\n\");\n        }\n    }\n\n    private function handleClientRequests() {\n        foreach ($this->clientSockets as $key => $clientSocket) {\n            $request = $this->readClientRequest($clientSocket);\n            if ($request !== '') {\n                $parsedRequest = $this->parseRequest($request);\n                if ($this->routerCallback) {\n                    $response = call_user_func($this->routerCallback, $parsedRequest);\n                    if ($response instanceof Response) {\n                        $this->sendResponse($clientSocket, $response);\n                    }\n                }\n            } else {\n                $this->closeClientSocket($clientSocket, $key);\n            }\n        }\n    }\n\n    private function readClientRequest($clientSocket) {\n        $request = '';\n        while (($buffer = fread($clientSocket, 2048)) !== '') {\n            $request .= $buffer;\n        }\n        return $request;\n    }\n\n    private function parseRequest(string $request) {\n        // Simple parsing, assuming JSON format for demonstration\n        $data = json_decode($request, true);\n        return [\n            'path' => $data['path'] ?? '/',\n            'payload' => $data['payload'] ?? null\n        ];\n    }\n\n    private function sendResponse($clientSocket, Response $response) {\n        $data = json_encode(['response' => $response->getData()]);\n        fwrite($clientSocket, $data);\n    }\n\n    private function closeClientSocket($clientSocket, int $key) {\n        fclose($clientSocket);\n        unset($this->clientSockets[$key]);\n        $this->output->write(\"Connection closed.\\n\");\n    }\n\n    public function afterRun(Closure $param) {\n        $this->afterCallback = $param;\n    }\n\n    public function ticker(Closure $param) {\n        $this->tickerCallback = $param;\n    }\n\n    public function router(Closure $param) {\n        $this->routerCallback = $param;\n    }\n\n    public function stop() {\n        $this->stop = true;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a function that executes a shell command and captures its output using PHP's proc_open for inter-process communication.\n\nFunction Description: The function executes a given shell command as a subprocess and returns its standard output. It handles both string and array command formats, manages Windows code page settings if applicable, and ensures proper cleanup of resources. The function returns null if proc_open is unavailable or if process creation fails.\n\nInput: \n- $command: string|array - The shell command to execute, either as a string or array of arguments\n\nOutput: \n- ?string - The captured standard output from the command, or null if execution failed",
    "Canonical_solution": "function readFromProcess(string|array $command): ?string\n{\n    if (!\\function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $cp = \\function_exists('sapi_windows_cp_set') ? sapi_windows_cp_get() : 0;\n\n    $process = proc_open($command, $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);\n    if (!\\is_resource($process)) {\n        return null;\n    }\n\n    $info = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    proc_close($process);\n\n    if ($cp) {\n        sapi_windows_cp_set($cp);\n    }\n\n    return $info;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fclose($pipes[0]); // Close stdin as we don't need it\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        proc_close($process);\n\n        return $output;\n    }\n\n    return null;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fclose($pipes[0]); // Close stdin as we don't need to send anything\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $returnCode = proc_close($process);\n\n        if ($returnCode === 0) {\n            return $output;\n        }\n    }\n\n    return null;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need to send anything\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $return_value = proc_close($process);\n\n    if ($return_value !== 0) {\n        error_log(\"Command failed with error: \" . $errorOutput);\n        return null;\n    }\n\n    return $output;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]); // Close stdin\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        error_log(\"Command failed with error: \" . $errorOutput);\n        return null;\n    }\n\n    return $output;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $return_value = proc_close($process);\n\n    if ($return_value !== 0) {\n        error_log(\"Command failed with error: \" . $errorOutput);\n        return null;\n    }\n\n    return $output;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        error_log(\"Command failed with return code $returnCode and error output: $errorOutput\");\n        return null;\n    }\n\n    return $output;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]);  // Close stdin\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        error_log(\"Command failed with error: \" . trim($errorOutput));\n        return null;\n    }\n\n    return $output;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[2]); // Close stderr\n\n    $return_value = proc_close($process);\n\n    return $output;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fclose($pipes[0]); // Close stdin\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $returnCode = proc_close($process);\n\n        if ($returnCode === 0) {\n            return $output;\n        }\n    }\n\n    return null;\n}",
      "function executeShellCommand($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n        1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n        2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n    ];\n\n    $pipes = [];\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    fclose($pipes[0]); // Close stdin\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        error_log(\"Command failed with error: \" . $errorOutput);\n        return null;\n    }\n\n    return $output;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a function that generates an image from a DOT script using the Graphviz `dot` command-line tool through inter-process communication in PHP.\n\nFunction Description: The function takes a DOT script and an image type as input, executes the `dot` command with the specified type, and returns the generated image data. It handles the subprocess communication using pipes for stdin, stdout, and stderr, ensuring proper resource cleanup and error handling.\n\nInput: \n- $dot_script: string - The DOT language script to be processed by Graphviz\n- $type: string - The output image type (e.g., 'png', 'svg', 'jpg')\n\nOutput: \n- Returns: string - The binary data of the generated image\n- On error: Prints error message to stderr and exits the program",
    "Canonical_solution": "function xhprof_generate_image_by_dot($dot_script, $type) {\n  $descriptorspec = array(\n       // stdin is a pipe that the child will read from\n       0 => array(\"pipe\", \"r\"),\n       // stdout is a pipe that the child will write to\n       1 => array(\"pipe\", \"w\"),\n       // stderr is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")\n       );\n\n  $cmd = \" dot -T\".$type;\n\n  $process = proc_open( $cmd, $descriptorspec, $pipes, sys_get_temp_dir(), array( 'PATH' => getenv( 'PATH' ) );\n  if (is_resource($process)) {\n    fwrite($pipes[0], $dot_script);\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n\n    $err = stream_get_contents($pipes[2]);\n    if (!empty($err)) {\n      print \"failed to execute cmd: \\\"$cmd\\\". stderr: `$err'\\n\";\n      exit;\n    }\n\n    fclose($pipes[2]);\n    fclose($pipes[1]);\n    proc_close($process);\n    return $output;\n  }\n  print \"failed to execute cmd \\\"$cmd\\\"\";\n  exit();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        proc_close($process);\n\n        if (!empty($error)) {\n            fwrite(STDERR, $error);\n            exit(1);\n        }\n\n        return $output;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\\n\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $image_data = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error_output = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0) {\n            fwrite(STDERR, \"Error generating image: \" . $error_output);\n            exit(1);\n        }\n\n        return $image_data;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0) {\n            fwrite(STDERR, \"Error generating image: \" . $error);\n            exit(1);\n        }\n\n        return $output;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        fwrite(STDERR, \"Failed to start process.\\n\");\n        exit(1);\n    }\n\n    fwrite($pipes[0], $dot_script);\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $return_value = proc_close($process);\n\n    if ($return_value !== 0 || !empty($errorOutput)) {\n        fwrite(STDERR, \"Error generating image: \" . $errorOutput . \"\\n\");\n        exit(1);\n    }\n\n    return $output;\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0 || !empty($error)) {\n            fwrite(STDERR, \"Error generating image: \" . $error);\n            exit(1);\n        }\n\n        return $output;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        proc_close($process);\n\n        if (!empty($error)) {\n            fwrite(STDERR, $error);\n            exit(1);\n        }\n\n        return $output;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\\n\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        fwrite(STDERR, \"Failed to start process.\\n\");\n        exit(1);\n    }\n\n    fwrite($pipes[0], $dot_script);\n    fclose($pipes[0]);\n\n    $image_data = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $error_output = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $return_value = proc_close($process);\n\n    if ($return_value !== 0 || !empty($error_output)) {\n        fwrite(STDERR, \"Error generating image: \" . $error_output . \"\\n\");\n        exit(1);\n    }\n\n    return $image_data;\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0) {\n            fwrite(STDERR, \"Error generating image: \" . $error);\n            exit(1);\n        }\n\n        return $output;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $image_data = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error_output = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0 || !empty($error_output)) {\n            fwrite(STDERR, \"Error generating image: \" . $error_output);\n            exit(1);\n        }\n\n        return $image_data;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\");\n        exit(1);\n    }\n}",
      "<?php\nfunction generateImageFromDot($dot_script, $type) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('dot -T' . escapeshellarg($type), $descriptorspec, $pipes);\n\n    if (is_resource($process)) {\n        fwrite($pipes[0], $dot_script);\n        fclose($pipes[0]);\n\n        $image_data = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error_output = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_value = proc_close($process);\n\n        if ($return_value !== 0) {\n            fwrite(STDERR, \"Error generating image: \" . $error_output);\n            exit(1);\n        }\n\n        return $image_data;\n    } else {\n        fwrite(STDERR, \"Failed to start process.\");\n        exit(1);\n    }\n}\n?>"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, providing methods to initialize, communicate with, and terminate the process, while handling errors and resource cleanup.\n\nClass Description: The ProcessStream class manages a subprocess execution through pipes for stdin, stdout, and stderr communication. It handles process initialization, error checking, and proper resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The stdin pipe for writing to the subprocess\n- out: resource - The stdout pipe for reading from the subprocess\n\nMethods:\n- setCommand(string $command) -> void - Sets the command to be executed by the subprocess\n- initialize() -> void - Starts the subprocess, sets up communication pipes, and checks for startup errors\n- terminate() -> void - Closes all pipes and terminates the subprocess\n- getReadConnectionDescription() -> string - Returns a description of the process connection (for logging/debugging)",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command)\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [],
    "unmatched_results": [
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (empty($this->command)) {\n            throw new Exception(\"Command not set.\");\n        }\n\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin\n            1 => [\"pipe\", \"w\"], // stdout\n            2 => [\"file\", \"/dev/null\", \"a\"] // stderr\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process.\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\".get_resource_type($this->stream).\", In=\".get_resource_type($this->in).\", Out=\".get_resource_type($this->out);\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!$this->command) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr pipe as it's not used here\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"active\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!isset($this->command)) {\n            throw new Exception(\"Command not set.\");\n        }\n\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process.\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr pipe\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"active\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!isset($this->command)) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin\n            1 => [\"pipe\", \"w\"], // stdout\n            2 => [\"file\", \"/dev/null\", \"a\"] // stderr\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command: {$this->command}, Stream: \" . (is_resource($this->stream) ? \"active\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!$this->command) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr pipe\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"open\" : \"closed\") . \", In=\" . (is_resource($this->in) ? \"open\" : \"closed\") . \", Out=\" . (is_resource($this->out) ? \"open\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!isset($this->command)) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin\n            1 => [\"pipe\", \"w\"], // stdout\n            2 => [\"pipe\", \"w\"]  // stderr\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"active\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!$this->command) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin is a pipe that the child will read from\n            1 => [\"pipe\", \"w\"], // stdout is a pipe that the child will write to\n            2 => [\"pipe\", \"w\"]  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr pipe\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\".get_resource_type($this->stream).\", In=\".get_resource_type($this->in).\", Out=\".get_resource_type($this->out);\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!isset($this->command)) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin is a pipe that the child will read from\n            1 => [\"pipe\", \"w\"], // stdout is a pipe that the child will write to\n            2 => [\"pipe\", \"w\"]  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"active\" : \"closed\") . \", In=\" . (is_resource($this->in) ? \"open\" : \"closed\") . \", Out=\" . (is_resource($this->out) ? \"open\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr pipe as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"active\" : \"closed\") . \", In=\" . (is_resource($this->in) ? \"open\" : \"closed\") . \", Out=\" . (is_resource($this->out) ? \"open\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        if (!isset($this->command)) {\n            throw new Exception(\"Command not set\");\n        }\n\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"active\" : \"closed\") . \", In=\" . (is_resource($this->in) ? \"open\" : \"closed\") . \", Out=\" . (is_resource($this->out) ? \"open\" : \"closed\");\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a function that retrieves Git tag information from a specified directory using subprocess communication via pipes.\n\nFunction Description: The function checks if a given directory is a Git repository (by checking for .git folder) and then executes the 'git describe --tags' command to get the latest tag information. It handles subprocess communication using pipes for stdout and stderr, properly manages resources, and returns the tag information or false if unsuccessful.\n\nInput: \n- $path (string): The filesystem path to check for Git repository information\n\nOutput:\n- Returns either:\n  - (string) The trimmed output from 'git describe --tags' command if successful\n  - (bool) false if:\n    - The path is not a Git repository\n    - The subprocess cannot be created\n    - The command returns a non-zero exit code",
    "Canonical_solution": "function getGitInformation(string $path)\n{\n    if (!\\is_dir($path . DIRECTORY_SEPARATOR . '.git')) {\n        return false;\n    }\n\n    $process = \\proc_open(\n        'git describe --tags',\n        [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ],\n        $pipes,\n        $path\n    );\n\n    if (!\\is_resource($process)) {\n        return false;\n    }\n\n    $result = \\trim(\\stream_get_contents($pipes[1]));\n\n    \\fclose($pipes[1]);\n    \\fclose($pipes[2]);\n\n    $returnCode = \\proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as it's not needed\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as it's not needed\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = 'git describe --tags';\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = \"git describe --tags\";\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    $errorOutput = stream_get_contents($pipes[2]);\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0 || !empty($errorOutput)) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = 'git describe --tags';\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    $errorOutput = stream_get_contents($pipes[2]);\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = ['git', '-C', $path, 'describe', '--tags'];\n    $process = proc_open($command, [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ], $pipes);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    $errorOutput = stream_get_contents($pipes[2]);\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir(\"$path/.git\")) {\n        return false;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as it's not needed\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a PHP class that manages subprocess execution using proc_open, handling input/output through pipes, with support for timeouts and temporary files.\n\nClass Description: The DefaultPhpProcess class provides functionality to execute subprocesses in PHP using proc_open, managing standard input/output/error streams through pipes. It supports timeout handling, environment variable configuration, and temporary file usage for large inputs.\n\nAttributes:\n- tempFile: [string|null] - Path to temporary file used for storing input when needed\n- stdin: [string|null] - Standard input content for the subprocess\n- env: [array|null] - Environment variables to pass to the subprocess\n- timeout: [int|null] - Maximum execution time in seconds before terminating the subprocess\n\nMethods:\n- runJob(string $job, array $settings = []): array - Executes a job with optional settings, returns output\n  Input: \n    - $job: [string] - The input content for the subprocess\n    - $settings: [array] - Additional execution settings\n  Output: [array] - Associative array containing 'stdout' and 'stderr' output\n\n- getHandles(): array - Returns additional stream handles for the subprocess\n  Output: [array] - Array of stream handles\n\n- runProcess(string $job, array $settings): array - Internal method to execute the subprocess\n  Input:\n    - $job: [string] - The input content\n    - $settings: [array] - Execution settings\n  Output: [array] - Associative array containing 'stdout' and 'stderr'\n\n- process(resource $pipe, string $job): void - Writes job content to the input pipe\n  Input:\n    - $pipe: [resource] - The input pipe resource\n    - $job: [string] - Content to write\n\n- cleanup(): void - Cleans up temporary resources (files)\n  \n- useTemporaryFile(): bool - Determines whether to use temporary files for input\n  Output: [bool] - True if temporary files should be used",
    "Canonical_solution": "use function array_merge;\nuse function fclose;\nuse function file_put_contents;\nuse function fread;\nuse function fwrite;\nuse function is_array;\nuse function is_resource;\nuse function proc_close;\nuse function proc_open;\nuse function proc_terminate;\nuse function rewind;\nuse function sprintf;\nuse function stream_get_contents;\nuse function stream_select;\nuse function sys_get_temp_dir;\nuse function tempnam;\nuse function unlink;\nuse PHPUnit\\Framework\\Exception;\n\nclass DefaultPhpProcess\n{\n    protected $tempFile;\n\n    public function runJob(string $job, array $settings = []): array\n    {\n        if ($this->stdin || $this->useTemporaryFile()) {\n            if (!($this->tempFile = tempnam(sys_get_temp_dir(), 'PHPUnit')) ||\n                file_put_contents($this->tempFile, $job) === false) {\n                throw new Exception(\n                    'Unable to write temporary file',\n                );\n            }\n\n            $job = $this->stdin;\n        }\n\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array\n    {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array\n    {\n        $handles = $this->getHandles();\n\n        $env = null;\n\n        if ($this->env) {\n            $env = $_SERVER ?? [];\n            unset($env['argv'], $env['argc']);\n            $env = array_merge($env, $this->env);\n\n            foreach ($env as $envKey => $envVar) {\n                if (is_array($envVar)) {\n                    unset($env[$envKey]);\n                }\n            }\n        }\n\n        $pipeSpec = [\n            0 => $handles[0] ?? ['pipe', 'r'],\n            1 => $handles[1] ?? ['pipe', 'w'],\n            2 => $handles[2] ?? ['pipe', 'w'],\n        ];\n\n        $process = proc_open(\n            $this->getCommand($settings, $this->tempFile),\n            $pipeSpec,\n            $pipes,\n            null,\n            $env,\n        );\n\n        if (!is_resource($process)) {\n            throw new Exception(\n                'Unable to spawn worker process',\n            );\n        }\n\n        if ($job) {\n            $this->process($pipes[0], $job);\n        }\n\n        fclose($pipes[0]);\n\n        $stderr = $stdout = '';\n\n        if ($this->timeout) {\n            unset($pipes[0]);\n\n            while (true) {\n                $r = $pipes;\n                $w = null;\n                $e = null;\n\n                $n = @stream_select($r, $w, $e, $this->timeout);\n\n                if ($n === false) {\n                    break;\n                }\n\n                if ($n === 0) {\n                    proc_terminate($process, 9);\n\n                    throw new Exception(\n                        sprintf(\n                            'Job execution aborted after %d seconds',\n                            $this->timeout,\n                        ),\n                    );\n                }\n\n                if ($n > 0) {\n                    foreach ($r as $pipe) {\n                        $pipeOffset = 0;\n\n                        foreach ($pipes as $i => $origPipe) {\n                            if ($pipe === $origPipe) {\n                                $pipeOffset = $i;\n\n                                break;\n                            }\n                        }\n\n                        if (!$pipeOffset) {\n                            break;\n                        }\n\n                        $line = fread($pipe, 8192);\n\n                        if ($line === '' || $line === false) {\n                            fclose($pipes[$pipeOffset]);\n\n                            unset($pipes[$pipeOffset]);\n                        } elseif ($pipeOffset === 1) {\n                            $stdout .= $line;\n                        } else {\n                            $stderr .= $line;\n                        }\n                    }\n\n                    if (empty($pipes)) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (isset($pipes[1])) {\n                $stdout = stream_get_contents($pipes[1]);\n\n                fclose($pipes[1]);\n            }\n\n            if (isset($pipes[2])) {\n                $stderr = stream_get_contents($pipes[2]);\n\n                fclose($pipes[2]);\n            }\n        }\n\n        if (isset($handles[1])) {\n            rewind($handles[1]);\n\n            $stdout = stream_get_contents($handles[1]);\n\n            fclose($handles[1]);\n        }\n\n        if (isset($handles[2])) {\n            rewind($handles[2]);\n\n            $stderr = stream_get_contents($handles[2]);\n\n            fclose($handles[2]);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    protected function process($pipe, string $job): void\n    {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void\n    {\n        if ($this->tempFile) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool\n    {\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($tempFile = null, $stdin = null, $env = null, $timeout = null) {\n        $this->tempFile = $tempFile;\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_get_status($process);\n            if ($this->timeout && $status['running']) {\n                proc_terminate($process);\n            }\n            proc_close($process);\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        if ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipe, file_get_contents($this->tempFile));\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return $this->tempFile !== null;\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            proc_close($process);\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        if ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipe, file_get_contents($this->tempFile));\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin) > 1024; // Example condition for using temp file\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['stdout' => '', 'stderr' => 'Failed to start process'];\n        }\n\n        if ($this->useTemporaryFile()) {\n            $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process');\n            file_put_contents($this->tempFile, $this->stdin);\n            $input = fopen($this->tempFile, 'r');\n        } else {\n            $input = $this->stdin;\n        }\n\n        $this->process($pipes[0], $input);\n        fclose($pipes[0]);\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_get_status($process);\n        if ($this->timeout && $status['running']) {\n            proc_terminate($process);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    private function process($pipe, $job) {\n        if (is_resource($job)) {\n            while (!feof($job)) {\n                fwrite($pipe, fread($job, 8192));\n            }\n            fclose($job);\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return $this->stdin !== null && strlen($this->stdin) > 1024;\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            proc_close($process);\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin) > 1024 * 1024; // Example threshold\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_close($process);\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to open process'];\n    }\n\n    private function process($pipe, $job) {\n        if ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipe, file_get_contents($this->tempFile));\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin ?? '') > 1024;\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_close($process);\n\n            if ($this->timeout && $status === -1) {\n                proc_terminate($process);\n            }\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        if ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipe, file_get_contents($this->tempFile));\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin) > 1024 * 1024; // Example threshold\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n\n            fclose($pipes[0]);\n\n            $stdout = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $stderr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            proc_close($process);\n\n            return ['stdout' => $stdout, 'stderr' => $stderr];\n        }\n\n        return ['stdout' => '', 'stderr' => 'Failed to open process'];\n    }\n\n    private function process($pipe, $job) {\n        if ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipe, file_get_contents($this->tempFile));\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin) > 1024 * 1024; // Example threshold\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['stdout' => '', 'stderr' => 'Failed to start process'];\n        }\n\n        $this->process($pipes[0], $job);\n\n        fclose($pipes[0]);\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_close($process);\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin) > 1024; // Example threshold\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        return $descriptorspec;\n    }\n\n    private function runProcess($job, $settings) {\n        $process = proc_open($job, $this->getHandles(), $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['stdout' => '', 'stderr' => 'Failed to start process'];\n        }\n\n        $this->process($pipes[0], $job);\n\n        fclose($pipes[0]);\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_get_status($process);\n        if ($this->timeout && $status['running']) {\n            proc_terminate($process);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    private function process($pipe, $job) {\n        if ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipe, $this->tempFile);\n        } else {\n            fwrite($pipe, $job);\n        }\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin ?? '') > 1024 * 1024; // Example threshold\n    }\n}",
      "class DefaultPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = null, $timeout = null) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = null;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    public function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['stdout' => '', 'stderr' => 'Failed to start process'];\n        }\n\n        $this->process($pipes[0], $job);\n\n        fclose($pipes[0]);\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_close($process);\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return strlen($this->stdin) > 1024 * 1024; // Example threshold\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Symfony's HTTP client components to handle HTTP requests and responses.\n\nClass Description: The `HttpClientKernel` class is a Symfony HTTP client implementation that handles HTTP requests by sending them to a server and processing the responses. It supports various request methods, headers, cookies, and body content (including form data and file uploads).\n\nAttributes:\n- client: [HttpClientInterface] - The Symfony HTTP client instance used to send requests\n\nMethods:\n- __construct([HttpClientInterface $client = null]) -> [void] - Initializes the HTTP client. If no client is provided, creates a new instance. Requires Symfony HTTP client component.\n- handle([Request $request], [int $type = HttpKernelInterface::MAIN_REQUEST], [bool $catch = true]) -> [Response] - Processes an HTTP request, sends it using the client, and returns the response. Handles headers, cookies, and request body.\n- getBody([Request $request]) -> [AbstractPart|null] - Prepares the request body content. Returns null for GET/HEAD requests, TextPart for raw content, or FormDataPart for form data including files.\n- getHeaders([Request $request]) -> [array] - Prepares request headers including cookies from the request object. Returns an array of headers.",
    "Canonical_solution": "use Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private HttpClientInterface $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        if (null === $client && !class_exists(HttpClient::class)) {\n            throw new \\LogicException(sprintf('You cannot use \"%s\" as the HttpClient component is not installed. Try running \"composer require symfony/http-client\".', __CLASS__));\n        }\n\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $headers = $this->getHeaders($request);\n        $body = '';\n        if (null !== $part = $this->getBody($request)) {\n            $headers = array_merge($headers, $part->getPreparedHeaders()->toArray());\n            $body = $part->bodyToIterable();\n        }\n        $response = $this->client->request($request->getMethod(), $request->getUri(), [\n            'headers' => $headers,\n            'body' => $body,\n        ] + $request->attributes->get('http_client_options', []));\n\n        $response = new Response($response->getContent(!$catch), $response->getStatusCode(), $response->getHeaders(!$catch));\n\n        $response->headers->remove('X-Body-File');\n        $response->headers->remove('X-Body-Eval');\n        $response->headers->remove('X-Content-Digest');\n\n        $response->headers = new class($response->headers->all()) extends ResponseHeaderBag {\n            protected function computeCacheControlValue(): string\n            {\n                return $this->getCacheControlHeader();\n            }\n        };\n\n        return $response;\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        if (!class_exists(AbstractPart::class)) {\n            throw new \\LogicException('You cannot pass non-empty bodies as the Mime component is not installed. Try running \"composer require symfony/mime\".');\n        }\n\n        if ($content = $request->getContent()) {\n            return new TextPart($content, 'utf-8', 'plain', '8bit');\n        }\n\n        $fields = $request->request->all();\n        foreach ($request->files->all() as $name => $file) {\n            $fields[$name] = DataPart::fromPath($file->getPathname(), $file->getClientOriginalName(), $file->getClientMimeType());\n        }\n\n        return new FormDataPart($fields);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = [];\n        foreach ($request->headers as $key => $value) {\n            $headers[$key] = $value;\n        }\n        $cookies = [];\n        foreach ($request->cookies->all() as $name => $value) {\n            $cookies[] = $name.'='.$value;\n        }\n        if ($cookies) {\n            $headers['cookie'] = implode('; ', $cookies);\n        }\n\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 134,
    "matched_results": [
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers']['Content-Type'] = $body->getPreparedHeaders()->getHeaderLine('Content-Type');\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if (!empty($content)) {\n            return new TextPart($content);\n        }\n\n        $parameters = $request->request->all();\n        if (!empty($parameters)) {\n            $formData = [];\n            foreach ($parameters as $key => $value) {\n                if ($value instanceof \\SplFileInfo) {\n                    $formData[$key] = DataPart::fromPath($value->getPath());\n                } else {\n                    $formData[$key] = $value;\n                }\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ');\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers'] = array_merge($options['headers'], $body->getPreparedHeaders()->toArray());\n        } else {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if (!empty($content)) {\n            return new TextPart($content);\n        }\n\n        $parameters = $request->request->all();\n        $files = $request->files->all();\n\n        if (empty($parameters) && empty($files)) {\n            return null;\n        }\n\n        $formData = [];\n        foreach ($parameters as $key => $value) {\n            $formData[$key] = new TextPart((string)$value);\n        }\n\n        foreach ($files as $key => $file) {\n            $formData[$key] = \\Symfony\\Component\\Mime\\Part\\DataPart::fromPath($file->getPathname(), $file->getClientOriginalName(), $file->getClientMimeType());\n        }\n\n        return new FormDataPart($formData);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $headers['Cookie'] = http_build_query($cookies, '', '; ');\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers'] = array_merge($options['headers'], $body->getPreparedHeaders()->toArray());\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = [];\n        foreach ($request->files->all() as $key => $file) {\n            $files[$key] = fopen($file->getPathname(), 'r');\n        }\n\n        return new FormDataPart(array_merge($request->request->all(), $files));\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n\n        if ($request->cookies->count() > 0) {\n            $cookieString = $request->cookies->getIterator()->getArrayCopy();\n            $headers['Cookie'] = implode('; ', array_map(function ($key, $value) {\n                return \"$key=$value\";\n            }, array_keys($cookieString), $cookieString));\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } else {\n            $options['body'] = $request->getContent();\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (\\in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        if ($request->server->get('CONTENT_TYPE') === 'application/x-www-form-urlencoded') {\n            return new FormDataPart($request->request->all());\n        }\n\n        if ($request->files->count() > 0) {\n            $formData = [];\n            foreach ($request->request->all() as $key => $value) {\n                $formData[$key] = new TextPart((string)$value);\n            }\n            foreach ($request->files->all() as $key => $file) {\n                $formData[$key] = \\Symfony\\Component\\Mime\\Part\\DataPart::fromPath($file->getPathname(), $file->getClientOriginalName());\n            }\n            return new FormDataPart($formData);\n        }\n\n        return new TextPart($request->getContent());\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        if ($cookies = $request->cookies->all()) {\n            $headers['Cookie'] = http_build_query($cookies, '', '; ');\n        }\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $parameters = $request->request->all();\n        if (empty($parameters)) {\n            return null;\n        }\n\n        $formData = [];\n        foreach ($parameters as $key => $value) {\n            if ($value instanceof UploadedFile) {\n                $formData[$key] = DataPart::fromPath($value->getPathname(), $value->getClientOriginalName());\n            } else {\n                $formData[$key] = $value;\n            }\n        }\n\n        return new FormDataPart($formData);\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n\n        if ($request->cookies->count() > 0) {\n            $cookieString = $request->cookies->getIterator()->getArrayCopy();\n            $headers['Cookie'] = http_build_query($cookieString, '', '; ');\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers'] = array_merge($options['headers'], $body->getPreparedHeaders()->toArray());\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = $request->files->all();\n        if (!empty($files)) {\n            $formData = [];\n            foreach ($request->request->all() as $key => $value) {\n                $formData[$key] = $value;\n            }\n            foreach ($files as $key => $file) {\n                $formData[$key] = fopen($file->getPathname(), 'r');\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ');\n            $headers['Cookie'][] = $cookieString;\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers'] = array_merge($options['headers'], $body->getPreparedHeaders()->toArray());\n        } else {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $parameters = $request->request->all();\n        if (!empty($parameters)) {\n            $formData = [];\n            foreach ($parameters as $key => $value) {\n                if (is_resource($value) || $value instanceof \\SplFileInfo) {\n                    $formData[$key] = $value;\n                } else {\n                    $formData[$key] = new TextPart((string)$value);\n                }\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ');\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = HttpKernelInterface::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToString();\n            $options['headers']['Content-Type'] = $body->getPreparedHeaders()->getHeaderLine('Content-Type');\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = [];\n        foreach ($request->files->all() as $name => $file) {\n            $files[$name] = fopen($file->getPathname(), 'r');\n        }\n\n        return new FormDataPart(array_merge($request->request->all(), $files));\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $cookieString = http_build_query($cookies, '', '; ');\n            $headers['Cookie'] = [$cookieString];\n        }\n\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body;\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== false && $content !== '') {\n            return new TextPart($content);\n        }\n\n        $parameters = $request->request->all();\n        if (!empty($parameters)) {\n            $formData = [];\n            foreach ($parameters as $key => $value) {\n                if (is_array($value) && isset($value['tmp_name'])) {\n                    $formData[$key] = DataPart::fromPath($value['tmp_name'], basename($value['name']));\n                } else {\n                    $formData[$key] = $value;\n                }\n            }\n            return new FormDataPart($formData);\n        }\n\n        return null;\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        if ($cookies = $request->cookies->all()) {\n            $headers['Cookie'] = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n        }\n        return $headers;\n    }\n}",
      "<?php\n\nuse Symfony\\Component\\HttpClient\\HttpClient;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Symfony\\Component\\Mime\\Part\\AbstractPart;\nuse Symfony\\Component\\Mime\\Part\\FormDataPart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\nclass HttpClientKernel implements HttpKernelInterface\n{\n    private $client;\n\n    public function __construct(HttpClientInterface $client = null)\n    {\n        $this->client = $client ?? HttpClient::create();\n    }\n\n    public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = true): Response\n    {\n        $options = [\n            'headers' => $this->getHeaders($request),\n        ];\n\n        $body = $this->getBody($request);\n        if ($body instanceof AbstractPart) {\n            $options['body'] = $body->bodyToIterable();\n            $options['headers'] = array_merge($options['headers'], $body->getPreparedHeaders()->toArray());\n        } elseif (is_string($body)) {\n            $options['body'] = $body;\n        }\n\n        $response = $this->client->request(\n            $request->getMethod(),\n            $request->getUri(),\n            $options\n        );\n\n        return new Response(\n            $response->getContent(false),\n            $response->getStatusCode(),\n            $response->getHeaders(false)\n        );\n    }\n\n    private function getBody(Request $request): ?AbstractPart\n    {\n        if (in_array($request->getMethod(), ['GET', 'HEAD'])) {\n            return null;\n        }\n\n        $content = $request->getContent();\n        if ($content !== '') {\n            return new TextPart($content);\n        }\n\n        $files = [];\n        foreach ($request->files->all() as $name => $file) {\n            $files[$name] = fopen($file->getPathname(), 'r');\n        }\n\n        return new FormDataPart(array_merge($request->request->all(), $files));\n    }\n\n    private function getHeaders(Request $request): array\n    {\n        $headers = $request->headers->all();\n        $cookies = $request->cookies->all();\n\n        if (!empty($cookies)) {\n            $headers['Cookie'] = http_build_query($cookies, '', '; ', PHP_QUERY_RFC3986);\n        }\n\n        return $headers;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a PHP class that facilitates the execution of shell commands as subprocesses, handling input/output streams, and providing process execution details.\n\nClass Description: The Process class provides a way to execute shell commands as subprocesses, capturing their output streams (stdout and stderr), return codes, and execution time. It includes methods for basic execution and error-checked execution variants.\n\nAttributes:\n\ncommand: [string] - The shell command to be executed\ncwd: [string|null] - The working directory for the command execution\nenv: [array] - Environment variables for the command\ndescriptors: [array] - Static array defining I/O streams configuration\nlog_run_times: [bool] - Static flag to enable execution time logging\nrun_times: [array] - Static array storing command execution time statistics\n\nMethods:\n\ncreate: [static](string $command, string|null $cwd = null, array $env = []) -> [Process] - Factory method to create a new Process instance\nrun: [](void) -> [ProcessRun] - Executes the command and returns execution details including stdout, stderr, and return code\nrun_check: [](void) -> [ProcessRun] - Executes the command and throws RuntimeException if return code is non-zero\nrun_check_stderr: [](void) -> [ProcessRun] - Executes the command and throws RuntimeException if return code is non-zero or if stderr contains unexpected output (with specific exception for known PSR-0 deprecation warning)",
    "Canonical_solution": "namespace WP_CLI;\n\nuse RuntimeException;\n\nclass Process {\n\tprivate $command;\n\tprivate $cwd;\n\tprivate $env;\n\tprivate static $descriptors = [\n\t\t0 => STDIN,\n\t\t1 => [ 'pipe', 'w' ],\n\t\t2 => [ 'pipe', 'w' ],\n\t];\n\tpublic static $log_run_times = false;\n\tpublic static $run_times = [];\n\n\tpublic static function create( $command, $cwd = null, $env = [] ) {\n\t\t$proc = new self();\n\t\t$proc->command = $command;\n\t\t$proc->cwd = $cwd;\n\t\t$proc->env = $env;\n\t\treturn $proc;\n\t}\n\n\tprivate function __construct() {}\n\n\tpublic function run() {\n\t\tUtils\\check_proc_available( 'Process::run' );\n\n\t\t$start_time = microtime( true );\n\t\t$pipes = [];\n\t\t$proc = Utils\\proc_open_compat( $this->command, self::$descriptors, $pipes, $this->cwd, $this->env );\n\n\t\t$stdout = stream_get_contents( $pipes[1] );\n\t\tfclose( $pipes[1] );\n\n\t\t$stderr = stream_get_contents( $pipes[2] );\n\t\tfclose( $pipes[2] );\n\n\t\t$return_code = proc_close( $proc );\n\n\t\t$run_time = microtime( true ) - $start_time;\n\n\t\tif ( self::$log_run_times ) {\n\t\t\tif ( ! isset( self::$run_times[ $this->command ] ) ) {\n\t\t\t\tself::$run_times[ $this->command ] = [ 0, 0 ];\n\t\t\t}\n\t\t\tself::$run_times[ $this->command ][0] += $run_time;\n\t\t\t++self::$run_times[ $this->command ][1];\n\t\t}\n\n\t\treturn new ProcessRun( [\n\t\t\t'stdout' => $stdout,\n\t\t\t'stderr' => $stderr,\n\t\t\t'return_code' => $return_code,\n\t\t\t'command' => $this->command,\n\t\t\t'cwd' => $this->cwd,\n\t\t\t'env' => $this->env,\n\t\t\t'run_time' => $run_time,\n\t\t] );\n\t}\n\n\tpublic function run_check() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code ) {\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n\n\tpublic function run_check_stderr() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code ) {\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\tif ( ! empty( $r->stderr ) ) {\n\t\t\t$stderr_lines = array_filter( explode( \"\\n\", $r->stderr ) );\n\t\t\tif ( 1 === count( $stderr_lines ) ) {\n\t\t\t\t$stderr_line = $stderr_lines[0];\n\t\t\t\tif ( false !== strpos( $stderr_line, 'The PSR-0 `Requests_...` class names in the Request library are deprecated.' ) ) {\n\t\t\t\t\treturn $r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => STDIN,\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n        if (self::$log_run_times) {\n            self::$run_times[] = ['command' => $this->command, 'time' => $execution_time];\n        }\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        $stderr = $result->getStderr();\n        if (!empty($stderr) && strpos($stderr, 'PSR-0') === false) {\n            throw new RuntimeException(\"Command produced unexpected error output: $stderr\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    public static $log_run_times = false;\n    public static $run_times = [];\n\n    private function __construct($command, $cwd, $env) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create($command, $cwd = null, $env = []) {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run() {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check() {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr() {\n        $result = $this->run_check();\n        $stderr = $result->getStderr();\n        if (!empty($stderr) && strpos($stderr, 'PSR-0') === false) {\n            throw new RuntimeException(\"Command produced unexpected stderr output: $stderr\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct($stdout, $stderr, $return_code, $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout() {\n        return $this->stdout;\n    }\n\n    public function getStderr() {\n        return $this->stderr;\n    }\n\n    public function getReturnCode() {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime() {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    public static $log_run_times = false;\n    public static $run_times = [];\n\n    private function __construct($command, $cwd, $env) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create($command, $cwd = null, $env = []) {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run() {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check() {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr() {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        if (!empty($result->getStderr()) && strpos($result->getStderr(), 'PSR-0') === false) {\n            throw new RuntimeException(\"Unexpected stderr output: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct($stdout, $stderr, $return_code, $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout() {\n        return $this->stdout;\n    }\n\n    public function getStderr() {\n        return $this->stderr;\n    }\n\n    public function getReturnCode() {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime() {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    public static $log_run_times = false;\n    public static $run_times = [];\n\n    private function __construct($command, $cwd, $env) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create($command, $cwd = null, $env = []) {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run() {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        if (self::$log_run_times) {\n            self::$run_times[$this->command][] = $end_time - $start_time;\n        }\n        return new ProcessRun($stdout, $stderr, $return_code);\n    }\n\n    public function run_check() {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr() {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        if (!empty($result->getStderr()) && strpos($result->getStderr(), 'PSR-0') === false) {\n            throw new RuntimeException(\"Unexpected stderr output: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n\n    public function __construct($stdout, $stderr, $return_code) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n    }\n\n    public function getStdout() {\n        return $this->stdout;\n    }\n\n    public function getStderr() {\n        return $this->stderr;\n    }\n\n    public function getReturnCode() {\n        return $this->return_code;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        if (!empty($result->getStderr()) && strpos($result->getStderr(), 'PSR-0') === false) {\n            throw new RuntimeException(\"Command produced unexpected stderr output: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        if (!empty($result->getStderr()) && strpos($result->getStderr(), 'PSR-0') === false) {\n            throw new RuntimeException(\"Command produced unexpected stderr output: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process.\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        if (!empty($result->getStderr()) && strpos($result->getStderr(), 'PSR-0') === false) {\n            throw new RuntimeException(\"Unexpected stderr output: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()} and stderr: {$result->getStderr()}\");\n        }\n        $stderr = $result->getStderr();\n        if (!empty($stderr) && strpos($stderr, 'PSR-0') === false) {\n            throw new RuntimeException(\"Unexpected stderr output: {$stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public function __construct(string $command, ?string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create(string $command, ?string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command][] = $execution_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        $stderr = $result->getStderr();\n        if (!empty($stderr) && strpos($stderr, 'PSR-0') === false) {\n            throw new RuntimeException(\"Command produced unexpected stderr output: $stderr\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $execution_time = $end_time - $start_time;\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = $execution_time;\n        }\n        return new ProcessRun($stdout, $stderr, $return_code, $execution_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->getReturnCode() !== 0) {\n            throw new RuntimeException(\"Command failed with return code {$result->getReturnCode()}\");\n        }\n        $stderr = $result->getStderr();\n        if (!empty($stderr) && strpos($stderr, 'PSR-0') === false) {\n            throw new RuntimeException(\"Unexpected error output: $stderr\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    private $stdout;\n    private $stderr;\n    private $return_code;\n    private $execution_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, float $execution_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->execution_time = $execution_time;\n    }\n\n    public function getStdout(): string {\n        return $this->stdout;\n    }\n\n    public function getStderr(): string {\n        return $this->stderr;\n    }\n\n    public function getReturnCode(): int {\n        return $this->return_code;\n    }\n\n    public function getExecutionTime(): float {\n        return $this->execution_time;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a PHP class that manages subprocess execution with proper pipe handling for inter-process communication, including input/output streams and error handling.\n\nClass Description: The Process class provides a way to execute shell commands as subprocesses, capturing their output streams (stdout and stderr) and exit codes. It supports custom working directories and environment variables, and includes optional execution time tracking.\n\nAttributes:\n- command: string - The shell command to be executed\n- cwd: string|null - The working directory for the command execution\n- env: array - Environment variables for the command\n- descriptors: array - Static array defining I/O descriptors for proc_open\n- log_run_times: bool - Static flag to enable execution time logging\n- run_times: array - Static array storing aggregated execution times\n\nMethods:\n- create(string $command, string|null $cwd = null, array $env = array()) -> Process - Static factory method to create a new Process instance\n- run() -> ProcessRun - Executes the command and returns a ProcessRun object containing execution results\n- run_check() -> ProcessRun - Executes the command and throws RuntimeException if return code or stderr is non-empty\n- run_check_stderr() -> ProcessRun - Executes the command and throws RuntimeException if return code is non-zero or stderr exists\n\nNote: The ProcessRun return type refers to an object containing these properties:\n- stdout: string - Output from stdout\n- stderr: string - Output from stderr\n- return_code: int - Process exit code\n- command: string - The executed command\n- cwd: string|null - Working directory used\n- env: array - Environment variables used\n- run_time: float - Execution time in seconds",
    "Canonical_solution": "namespace EE;\n\nuse EE\\Utils;\n\nclass Process {\n\tprivate $command;\n\tprivate $cwd;\n\tprivate $env;\n\tprivate static $descriptors = array(\n\t\t0 => STDIN,\n\t\t1 => array( 'pipe', 'w' ),\n\t\t2 => array( 'pipe', 'w' ),\n\t);\n\tpublic static $log_run_times = false;\n\tpublic static $run_times = array();\n\n\tpublic static function create( $command, $cwd = null, $env = array() ) {\n\t\t$proc = new self;\n\t\t$proc->command = $command;\n\t\t$proc->cwd = $cwd;\n\t\t$proc->env = $env;\n\t\treturn $proc;\n\t}\n\n\tprivate function __construct() {}\n\n\tpublic function run() {\n\t\t$start_time = microtime( true );\n\t\t$proc = Utils\\proc_open_compat( $this->command, self::$descriptors, $pipes, $this->cwd, $this->env );\n\n\t\t$stdout = stream_get_contents( $pipes[1] );\n\t\tfclose( $pipes[1] );\n\n\t\t$stderr = stream_get_contents( $pipes[2] );\n\t\tfclose( $pipes[2] );\n\n\t\t$return_code = proc_close( $proc );\n\t\t$run_time = microtime( true ) - $start_time;\n\n\t\tif ( self::$log_run_times ) {\n\t\t\tif ( ! isset( self::$run_times[ $this->command ] ) ) {\n\t\t\t\tself::$run_times[ $this->command ] = array( 0, 0 );\n\t\t\t}\n\t\t\tself::$run_times[ $this->command ][0] += $run_time;\n\t\t\tself::$run_times[ $this->command ][1]++;\n\t\t}\n\n\t\treturn new ProcessRun( array(\n\t\t\t'stdout' => $stdout,\n\t\t\t'stderr' => $stderr,\n\t\t\t'return_code' => $return_code,\n\t\t\t'command' => $this->command,\n\t\t\t'cwd' => $this->cwd,\n\t\t\t'env' => $this->env,\n\t\t\t'run_time' => $run_time,\n\t\t) );\n\t}\n\n\tpublic function run_check() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code || ! empty( $r->STDERR ) ) {\n\t\t\tthrow new \\RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n\n\tpublic function run_check_stderr() {\n\t\t$r = $this->run();\n\t\tif ( $r->return_code || ! empty( $r->stderr ) ) {\n\t\t\tthrow new \\RuntimeException( $r );\n\t\t}\n\t\treturn $r;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($end_time - $start_time);\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $end_time - $start_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public function __construct($command, $cwd = null, $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create($command, $cwd = null, $env = []) {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run() {\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $start_time = microtime(true);\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n\n        $run_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($run_times[$this->command] ?? 0) + $run_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n    }\n\n    public function run_check() {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr() {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct($stdout, $stderr, $return_code, $command, $cwd, $env, $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public function __construct($command, $cwd = null, $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public static function create($command, $cwd = null, $env = []) {\n        return new self($command, $cwd, $env);\n    }\n\n    public function run() {\n        $pipes = [];\n        $start_time = microtime(true);\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($end_time - $start_time);\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $end_time - $start_time);\n    }\n\n    public function run_check() {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with exit code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr() {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== \"\") {\n            throw new RuntimeException(\"Command failed with exit code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct($stdout, $stderr, $return_code, $command, $cwd, $env, $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($end_time - $start_time);\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $end_time - $start_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create($command, $cwd = null, $env = []) {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct($command, $cwd, $env) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run() {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $run_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($run_times[$this->command] ?? 0) + $run_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n    }\n\n    public function run_check() {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr() {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct($stdout, $stderr, $return_code, $command, $cwd, $env, $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $run_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command][] = $run_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n\n        $end_time = microtime(true);\n        $run_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($run_time + (self::$run_times[$this->command] ?? 0));\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n        $run_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[] = $run_time;\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n\n        $end_time = microtime(true);\n        $run_time = $end_time - $start_time;\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($run_time + (self::$run_times[$this->command] ?? 0));\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $run_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}",
      "class Process {\n    private $command;\n    private $cwd;\n    private $env;\n    private static $descriptors = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n    private static $log_run_times = false;\n    private static $run_times = [];\n\n    public static function create(string $command, string $cwd = null, array $env = []): Process {\n        return new self($command, $cwd, $env);\n    }\n\n    private function __construct(string $command, string $cwd = null, array $env = []) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n    }\n\n    public function run(): ProcessRun {\n        $start_time = microtime(true);\n        $pipes = [];\n        $process = proc_open($this->command, self::$descriptors, $pipes, $this->cwd, $this->env);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Failed to start process\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $stderr = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $return_code = proc_close($process);\n        $end_time = microtime(true);\n\n        if (self::$log_run_times) {\n            self::$run_times[$this->command] = ($end_time - $start_time);\n        }\n\n        return new ProcessRun($stdout, $stderr, $return_code, $this->command, $this->cwd, $this->env, $end_time - $start_time);\n    }\n\n    public function run_check(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || !empty($result->stderr)) {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n\n    public function run_check_stderr(): ProcessRun {\n        $result = $this->run();\n        if ($result->return_code !== 0 || $result->stderr !== '') {\n            throw new RuntimeException(\"Command failed with return code {$result->return_code} and stderr: {$result->stderr}\");\n        }\n        return $result;\n    }\n}\n\nclass ProcessRun {\n    public $stdout;\n    public $stderr;\n    public $return_code;\n    public $command;\n    public $cwd;\n    public $env;\n    public $run_time;\n\n    public function __construct(string $stdout, string $stderr, int $return_code, string $command, ?string $cwd, array $env, float $run_time) {\n        $this->stdout = $stdout;\n        $this->stderr = $stderr;\n        $this->return_code = $return_code;\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->env = $env;\n        $this->run_time = $run_time;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a PHP class that provides a convenient way to execute shell commands with options for argument escaping, error capturing, and different execution methods (proc_open vs exec).\n\nClass Description: The Command class encapsulates shell command execution functionality, allowing for flexible command building, execution, and result handling. It supports both proc_open and exec methods, with options for capturing stderr, escaping arguments, and configuring process execution environment.\n\nAttributes:\n\nescapeArgs: [bool] - Whether to escape arguments automatically (default true)\nescapeCommand: [bool] - Whether to escape the command (default false)\nuseExec: [bool] - Whether to use exec() instead of proc_open() (default false)\ncaptureStdErr: [bool] - Whether to capture stderr output (default true)\nprocCwd: [string|null] - Working directory for the process\nprocEnv: [array|null] - Environment variables for the process\nprocOptions: [array|null] - Additional options for proc_open\n_command: [string] - The base command to execute\n_args: [array] - Array of command arguments\n_execCommand: [string|null] - The final constructed command string\n_stdOut: [string] - Captured stdout output\n_stdErr: [string] - Captured stderr output\n_exitCode: [int|null] - Process exit code\n_error: [string] - Last error message\n_executed: [bool] - Whether command has been executed\n\nMethods:\n\n__construct: [mixed $options = null] -> [void] - Constructor that accepts either configuration array or command string\nsetCommand: [string $command] -> [self] - Sets the base command to execute\ngetCommand: [void] -> [string] - Gets the current base command\ngetExecCommand: [void] -> [string|false] - Gets the fully constructed command string\naddArg: [string $key, mixed $value = null, bool $escape = null] -> [self] - Adds an argument to the command\nexecute: [void] -> [bool] - Executes the command and returns success status\ngetOutput: [void] -> [string] - Gets the stdout output\ngetError: [void] -> [string] - Gets the last error message\ngetStdErr: [void] -> [string] - Gets the stderr output\ngetExitCode: [void] -> [int|null] - Gets the process exit code",
    "Canonical_solution": "class Command\n{\n    public $escapeArgs = true;\n    public $escapeCommand = false;\n    public $useExec = false;\n    public $captureStdErr = true;\n    public $procCwd;\n    public $procEnv;\n    public $procOptions;\n\n    protected $_command;\n    protected $_args = array();\n    protected $_execCommand;\n    protected $_stdOut = '';\n    protected $_stdErr = '';\n    protected $_exitCode;\n    protected $_error = '';\n    protected $_executed = false;\n\n    public function __construct($options = null)\n    {\n        if (is_array($options)) {\n            $this->setOptions($options);\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand($command)\n    {\n        $this->_command = $this->escapeCommand ? escapeshellcmd($command) : $command;\n        return $this;\n    }\n\n    public function getCommand()\n    {\n        return $this->_command;\n    }\n\n    public function getExecCommand()\n    {\n        if ($this->_execCommand===null) {\n            $command = $this->getCommand();\n            if (!$command) {\n                $this->_error = 'Could not locate any executable command';\n                return false;\n            }\n            $args = $this->getArgs();\n            $this->_execCommand = $args ? $command.' '.$args : $command;\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg($key, $value = null, $escape = null)\n    {\n        $doEscape = $escape!==null ? $escape : $this->escapeArgs;\n        if ($value===null) {\n            $this->_args[] = $escape ? escapeshellarg($key) : $key;\n        } else {\n            $separator = substr($key, -1)==='=' ? '' : ' ';\n            if (is_array($value)) {\n                $params = array();\n                foreach ($value as $v) {\n                    $params[] = $doEscape ? escapeshellarg($v) : $v;\n                }\n                $this->_args[] = $key.$separator.implode(' ',$params);\n            } else {\n                $this->_args[] = $key.$separator.($doEscape ? escapeshellarg($value) : $value);\n            }\n        }\n        return $this;\n    }\n\n    public function execute()\n    {\n        $command = $this->getExecCommand();\n\n        if (!$command) {\n            return false;\n        }\n\n        if ($this->useExec) {\n            $execCommand = $this->captureStdErr ? \"$command 2>&1\" : $command;\n            exec($execCommand, $output, $this->_exitCode);\n            $this->_stdOut = trim(implode(\"\\n\", $output));\n            if ($this->_exitCode!==0) {\n                $this->_stdErr = $this->_stdOut;\n                $this->_error = empty($this->_stdErr) ? 'Command failed' : $this->_stdErr;\n                return false;\n            }\n        } else {\n            $descriptors = array(\n                1 => array('pipe','w'),\n                2 => array('pipe','a'),\n            );\n            $process = proc_open($command, $descriptors, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n            if (is_resource($process)) {\n                $this->_stdOut = trim(stream_get_contents($pipes[1]));\n                $this->_stdErr = trim(stream_get_contents($pipes[2]));\n                fclose($pipes[1]);\n                fclose($pipes[2]);\n\n                $this->_exitCode = proc_close($process);\n\n                if ($this->_exitCode!==0) {\n                    $this->_error = $this->_stdErr ? $this->_stdErr : \"Failed without error message: $command\";\n                    return false;\n                }\n            } else {\n                $this->_error = \"Could not run command $command\";\n                return false;\n            }\n        }\n\n        $this->_executed = true;\n        return true;\n    }\n\n    public function getOutput()\n    {\n        return $this->_stdOut;\n    }\n\n    public function getError()\n    {\n        return $this->_error;\n    }\n\n    public function getStdErr()\n    {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode()\n    {\n        return $this->_exitCode;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand(): ?string {\n        if ($this->_execCommand === null) {\n            $this->_execCommand = $this->_command;\n            foreach ($this->_args as $key => $value) {\n                if (is_int($key)) {\n                    $this->_execCommand .= ' ' . ($this->escapeArgs ? escapeshellarg($value) : $value);\n                } else {\n                    $this->_execCommand .= ' ' . $key . '=' . ($this->escapeArgs ? escapeshellarg($value) : $value);\n                }\n            }\n            if ($this->escapeCommand) {\n                $this->_execCommand = escapeshellcmd($this->_execCommand);\n            }\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape !== null) {\n            $this->escapeArgs = $escape;\n        }\n        if ($value === null) {\n            $this->_args[] = $key;\n        } else {\n            $this->_args[$key] = $value;\n        }\n        $this->_execCommand = null; // Reset cached command\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_executed = false;\n        $this->_stdOut = '';\n        $this->_stdErr = '';\n        $this->_exitCode = null;\n        $this->_error = '';\n\n        $command = $this->getExecCommand();\n        if (!$command) {\n            $this->_error = 'Command not set';\n            return false;\n        }\n\n        if ($this->useExec) {\n            $output = [];\n            exec($command, $output, $this->_exitCode);\n            $this->_stdOut = implode(\"\\n\", $output);\n        } else {\n            $descriptorspec = [\n                0 => ['pipe', 'r'],\n                1 => ['pipe', 'w'],\n                2 => $this->captureStdErr ? ['pipe', 'w'] : ['pipe', 'w']\n            ];\n            $pipes = [];\n            $process = proc_open($command, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n            if (is_resource($process)) {\n                fclose($pipes[0]);\n                $this->_stdOut = stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                if ($this->captureStdErr) {\n                    $this->_stdErr = stream_get_contents($pipes[2]);\n                    fclose($pipes[2]);\n                }\n                $this->_exitCode = proc_close($process);\n            } else {\n                $this->_error = 'Failed to open process';\n                return false;\n            }\n        }\n\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode(): ?int {\n        return $this->_exitCode;\n    }\n}",
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand(): ?string {\n        if ($this->_execCommand === null) {\n            $this->buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_executed = false;\n        $this->_stdOut = '';\n        $this->_stdErr = '';\n        $this->_exitCode = null;\n        $this->_error = '';\n\n        if ($this->useExec) {\n            $this->executeWithExec();\n        } else {\n            $this->executeWithProcOpen();\n        }\n\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    private function buildCommand() {\n        $command = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        $args = [];\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $args[] = $key;\n            } else {\n                $args[] = \"$key=$value\";\n            }\n        }\n        $this->_execCommand = $command . (empty($args) ? '' : ' ' . implode(' ', $args));\n    }\n\n    private function executeWithExec() {\n        $this->buildCommand();\n        $output = [];\n        exec($this->_execCommand, $output, $this->_exitCode);\n        $this->_stdOut = implode(\"\\n\", $output);\n    }\n\n    private function executeWithProcOpen() {\n        $this->buildCommand();\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => $this->captureStdErr ? ['pipe', 'w'] : ['file', '/dev/null', 'a']\n        ];\n        $pipes = [];\n        $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n        if (is_resource($process)) {\n            fclose($pipes[0]);\n            $this->_stdOut = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            if ($this->captureStdErr) {\n                $this->_stdErr = stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n            $this->_exitCode = proc_close($process);\n        } else {\n            $this->_error = 'Failed to open process';\n        }\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode(): ?int {\n        return $this->_exitCode;\n    }\n}",
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand(): ?string {\n        if ($this->_execCommand === null) {\n            $this->_execCommand = $this->_buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_execCommand = $this->_buildCommand();\n        if ($this->useExec) {\n            $output = [];\n            exec($this->_execCommand, $output, $this->_exitCode);\n            $this->_stdOut = implode(\"\\n\", $output);\n        } else {\n            $descriptorspec = [\n                0 => [\"pipe\", \"r\"],\n                1 => [\"pipe\", \"w\"],\n                2 => $this->captureStdErr ? [\"pipe\", \"w\"] : STDERR,\n            ];\n            $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n            if (is_resource($process)) {\n                fclose($pipes[0]);\n                $this->_stdOut = stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                if ($this->captureStdErr) {\n                    $this->_stdErr = stream_get_contents($pipes[2]);\n                    fclose($pipes[2]);\n                }\n                $this->_exitCode = proc_close($process);\n            } else {\n                $this->_error = \"Failed to open process\";\n                return false;\n            }\n        }\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode(): ?int {\n        return $this->_exitCode;\n    }\n\n    private function _buildCommand(): string {\n        $command = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $command .= \" $key\";\n            } else {\n                $command .= \" $key=$value\";\n            }\n        }\n        return $command;\n    }\n}",
      "class Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand() {\n        if ($this->_execCommand === null) {\n            $this->_buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_executed = false;\n        $this->_stdOut = '';\n        $this->_stdErr = '';\n        $this->_exitCode = null;\n        $this->_error = '';\n\n        if ($this->useExec) {\n            $this->_executeWithExec();\n        } else {\n            $this->_executeWithProcOpen();\n        }\n\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode() {\n        return $this->_exitCode;\n    }\n\n    private function _buildCommand() {\n        $cmd = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $cmd .= \" $key\";\n            } else {\n                $cmd .= \" $key=$value\";\n            }\n        }\n        $this->_execCommand = $cmd;\n    }\n\n    private function _executeWithExec() {\n        $this->_buildCommand();\n        $output = [];\n        exec($this->_execCommand, $output, $this->_exitCode);\n        $this->_stdOut = implode(\"\\n\", $output);\n    }\n\n    private function _executeWithProcOpen() {\n        $this->_buildCommand();\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => $this->captureStdErr ? ['pipe', 'w'] : STDERR,\n        ];\n        $pipes = [];\n        $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n        if (is_resource($process)) {\n            fclose($pipes[0]);\n            $this->_stdOut = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            if ($this->captureStdErr) {\n                $this->_stdErr = stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n            $this->_exitCode = proc_close($process);\n        } else {\n            $this->_error = 'Failed to start process';\n        }\n    }\n}",
      "class Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand() {\n        if ($this->_execCommand === null) {\n            $this->_execCommand = $this->_buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_executed = false;\n        $this->_stdOut = '';\n        $this->_stdErr = '';\n        $this->_exitCode = null;\n        $this->_error = '';\n\n        $command = $this->getExecCommand();\n        if ($command === false) {\n            $this->_error = 'Failed to build command';\n            return false;\n        }\n\n        if ($this->useExec) {\n            $output = [];\n            exec($command, $output, $this->_exitCode);\n            $this->_stdOut = implode(\"\\n\", $output);\n        } else {\n            $descriptorspec = [\n                0 => [\"pipe\", \"r\"],\n                1 => [\"pipe\", \"w\"],\n                2 => $this->captureStdErr ? [\"pipe\", \"w\"] : STDERR,\n            ];\n\n            $process = proc_open($command, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n            if (is_resource($process)) {\n                fclose($pipes[0]);\n                $this->_stdOut = stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                if ($this->captureStdErr) {\n                    $this->_stdErr = stream_get_contents($pipes[2]);\n                    fclose($pipes[2]);\n                }\n                $this->_exitCode = proc_close($process);\n            } else {\n                $this->_error = 'Failed to open process';\n                return false;\n            }\n        }\n\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode() {\n        return $this->_exitCode;\n    }\n\n    private function _buildCommand() {\n        if ($this->_command === '') {\n            return false;\n        }\n\n        $command = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        $args = [];\n\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $args[] = $key;\n            } else {\n                $args[] = \"$key=$value\";\n            }\n        }\n\n        return $command . (empty($args) ? '' : ' ' . implode(' ', $args));\n    }\n}",
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand() {\n        if (!$this->_executed) {\n            $this->buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->buildCommand();\n        if ($this->useExec) {\n            $this->_executed = $this->executeWithExec();\n        } else {\n            $this->_executed = $this->executeWithProcOpen();\n        }\n        return $this->_executed;\n    }\n\n    private function buildCommand() {\n        $cmd = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $cmd .= \" $key\";\n            } else {\n                $cmd .= \" $key=$value\";\n            }\n        }\n        $this->_execCommand = $cmd;\n    }\n\n    private function executeWithExec(): bool {\n        $output = [];\n        exec($this->_execCommand, $output, $this->_exitCode);\n        $this->_stdOut = implode(\"\\n\", $output);\n        return $this->_exitCode === 0;\n    }\n\n    private function executeWithProcOpen(): bool {\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"],\n            1 => [\"pipe\", \"w\"],\n            2 => $this->captureStdErr ? [\"pipe\", \"w\"] : STDERR,\n        ];\n        $pipes = [];\n        $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n        if (!is_resource($process)) {\n            $this->_error = 'Failed to start process';\n            return false;\n        }\n        fclose($pipes[0]);\n        $this->_stdOut = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        if ($this->captureStdErr) {\n            $this->_stdErr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n        }\n        $this->_exitCode = proc_close($process);\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode() {\n        return $this->_exitCode;\n    }\n}",
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand(): ?string {\n        if ($this->_execCommand === null) {\n            $this->_execCommand = $this->_buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_execCommand = $this->_buildCommand();\n        $this->_executed = false;\n        $this->_stdOut = '';\n        $this->_stdErr = '';\n        $this->_exitCode = null;\n        $this->_error = '';\n\n        if ($this->useExec) {\n            $this->_execWithExec();\n        } else {\n            $this->_execWithProcOpen();\n        }\n\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode(): ?int {\n        return $this->_exitCode;\n    }\n\n    private function _buildCommand(): string {\n        $command = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $command .= \" $key\";\n            } else {\n                $command .= \" $key=$value\";\n            }\n        }\n        return $command;\n    }\n\n    private function _execWithExec() {\n        $descriptorspec = [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $pipes = [];\n        $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n        if (is_resource($process)) {\n            $this->_stdOut = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            if ($this->captureStdErr) {\n                $this->_stdErr = stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n\n            $this->_exitCode = proc_close($process);\n        } else {\n            $this->_error = 'Failed to open process';\n        }\n    }\n\n    private function _execWithProcOpen() {\n        $descriptorspec = [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $pipes = [];\n        $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n        if (is_resource($process)) {\n            $this->_stdOut = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            if ($this->captureStdErr) {\n                $this->_stdErr = stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n\n            $this->_exitCode = proc_close($process);\n        } else {\n            $this->_error = 'Failed to open process';\n        }\n    }\n}",
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand(): ?string {\n        if ($this->_execCommand === null) {\n            $this->_execCommand = $this->_buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_executed = false;\n        $this->_stdOut = '';\n        $this->_stdErr = '';\n        $this->_exitCode = null;\n        $this->_error = '';\n\n        $command = $this->getExecCommand();\n        if (!$command) {\n            $this->_error = 'Command not set';\n            return false;\n        }\n\n        if ($this->useExec) {\n            $output = [];\n            exec($command, $output, $this->_exitCode);\n            $this->_stdOut = implode(\"\\n\", $output);\n        } else {\n            $descriptorspec = [\n                0 => [\"pipe\", \"r\"],\n                1 => [\"pipe\", \"w\"],\n                2 => $this->captureStdErr ? [\"pipe\", \"w\"] : STDERR,\n            ];\n            $pipes = [];\n            $process = proc_open($command, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n\n            if (is_resource($process)) {\n                fclose($pipes[0]);\n                $this->_stdOut = stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                if ($this->captureStdErr) {\n                    $this->_stdErr = stream_get_contents($pipes[2]);\n                    fclose($pipes[2]);\n                }\n                $this->_exitCode = proc_close($process);\n            } else {\n                $this->_error = 'Failed to open process';\n                return false;\n            }\n        }\n\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode(): ?int {\n        return $this->_exitCode;\n    }\n\n    private function _buildCommand(): ?string {\n        if (!$this->_command) {\n            return null;\n        }\n\n        $command = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        $args = [];\n\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $args[] = $key;\n            } else {\n                $args[] = \"$key=$value\";\n            }\n        }\n\n        return $command . (count($args) > 0 ? ' ' . implode(' ', $args) : '');\n    }\n}",
      "class Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand() {\n        if ($this->_execCommand === null) {\n            $this->_buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->_buildCommand();\n        if ($this->useExec) {\n            $output = [];\n            $return_var = 0;\n            exec($this->_execCommand, $output, $return_var);\n            $this->_stdOut = implode(\"\\n\", $output);\n            $this->_exitCode = $return_var;\n        } else {\n            $descriptorspec = [\n                1 => ['pipe', 'w'],\n                2 => ['pipe', 'w']\n            ];\n            $pipes = [];\n            $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n            if (is_resource($process)) {\n                $this->_stdOut = stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                if ($this->captureStdErr) {\n                    $this->_stdErr = stream_get_contents($pipes[2]);\n                    fclose($pipes[2]);\n                }\n                $this->_exitCode = proc_close($process);\n            } else {\n                $this->_error = 'Failed to open process';\n                return false;\n            }\n        }\n        $this->_executed = true;\n        return $this->_exitCode === 0;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode() {\n        return $this->_exitCode;\n    }\n\n    private function _buildCommand() {\n        $cmd = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $cmd .= \" $key\";\n            } else {\n                $cmd .= \" $key=$value\";\n            }\n        }\n        $this->_execCommand = $cmd;\n    }\n}",
      "<?php\nclass Command {\n    private $escapeArgs = true;\n    private $escapeCommand = false;\n    private $useExec = false;\n    private $captureStdErr = true;\n    private $procCwd = null;\n    private $procEnv = null;\n    private $procOptions = null;\n    private $_command = '';\n    private $_args = [];\n    private $_execCommand = null;\n    private $_stdOut = '';\n    private $_stdErr = '';\n    private $_exitCode = null;\n    private $_error = '';\n    private $_executed = false;\n\n    public function __construct($options = null) {\n        if (is_array($options)) {\n            foreach ($options as $key => $value) {\n                if (property_exists($this, $key)) {\n                    $this->$key = $value;\n                }\n            }\n        } elseif (is_string($options)) {\n            $this->setCommand($options);\n        }\n    }\n\n    public function setCommand(string $command): self {\n        $this->_command = $command;\n        return $this;\n    }\n\n    public function getCommand(): string {\n        return $this->_command;\n    }\n\n    public function getExecCommand() {\n        if (!$this->_executed) {\n            $this->buildCommand();\n        }\n        return $this->_execCommand;\n    }\n\n    public function addArg(string $key, $value = null, bool $escape = null): self {\n        if ($escape === null) {\n            $escape = $this->escapeArgs;\n        }\n        if ($escape) {\n            $key = escapeshellarg($key);\n            if ($value !== null) {\n                $value = escapeshellarg($value);\n            }\n        }\n        $this->_args[$key] = $value;\n        return $this;\n    }\n\n    public function execute(): bool {\n        $this->buildCommand();\n        if ($this->useExec) {\n            $this->_executed = $this->executeWithExec();\n        } else {\n            $this->_executed = $this->executeWithProcOpen();\n        }\n        return $this->_executed;\n    }\n\n    public function getOutput(): string {\n        return $this->_stdOut;\n    }\n\n    public function getError(): string {\n        return $this->_error;\n    }\n\n    public function getStdErr(): string {\n        return $this->_stdErr;\n    }\n\n    public function getExitCode() {\n        return $this->_exitCode;\n    }\n\n    private function buildCommand() {\n        $command = $this->escapeCommand ? escapeshellcmd($this->_command) : $this->_command;\n        $args = [];\n        foreach ($this->_args as $key => $value) {\n            if ($value === null) {\n                $args[] = $key;\n            } else {\n                $args[] = \"$key=$value\";\n            }\n        }\n        $this->_execCommand = $command . (empty($args) ? '' : ' ' . implode(' ', $args));\n    }\n\n    private function executeWithExec(): bool {\n        $output = [];\n        exec($this->_execCommand, $output, $this->_exitCode);\n        $this->_stdOut = implode(\"\\n\", $output);\n        if ($this->_exitCode !== 0) {\n            $this->_error = \"Command failed with exit code {$this->_exitCode}\";\n            return false;\n        }\n        return true;\n    }\n\n    private function executeWithProcOpen(): bool {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => $this->captureStdErr ? ['pipe', 'w'] : ['file', '/dev/null', 'a']\n        ];\n        $pipes = [];\n        $process = proc_open($this->_execCommand, $descriptorspec, $pipes, $this->procCwd, $this->procEnv, $this->procOptions);\n        if (!is_resource($process)) {\n            $this->_error = \"Failed to open process\";\n            return false;\n        }\n        fclose($pipes[0]);\n        $this->_stdOut = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        if ($this->captureStdErr) {\n            $this->_stdErr = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n        }\n        $this->_exitCode = proc_close($process);\n        if ($this->_exitCode !== 0) {\n            $this->_error = \"Command failed with exit code {$this->_exitCode}\";\n            return false;\n        }\n        return true;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a PHP class that handles process execution and communication using pipes, specifically designed for logging purposes. The class should manage subprocess creation, input/output streams, and error handling.\n\nClass Description: ProcessHandler is a logging handler that executes a subprocess and communicates with it through pipes (stdin, stdout, stderr). It ensures proper process management, handles startup errors, and provides methods for writing input and reading errors.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle\n- command: [string] - The command to execute as a subprocess\n- cwd: [string|null] - The working directory for the subprocess\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command, log level, and working directory\n- write(LogRecord $record) -> [void] - Writes formatted log record to the process stdin\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Ensures the subprocess is running (starts if not)\n- startProcess() -> [void] - Starts the subprocess using proc_open\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors the stderr pipe for activity\n- readProcessErrors() -> [string] - Reads and returns error output from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to the process stdin",
    "Canonical_solution": "use Monolog\\Level;\nuse Monolog\\LogRecord;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private string $command;\n    private ?string $cwd;\n    private array $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(LogRecord $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record->formatted);\n\n        $errors = $this->readProcessErrors();\n        if ($errors !== '') {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || $errors !== '') {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [],
    "unmatched_results": [
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->writeProcessInput($record->formatted());\n    }\n\n    public function close() {\n        foreach ($this->pipes as $pipe) {\n            fclose($pipe);\n        }\n        proc_close($this->process);\n    }\n\n    private function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->writeProcessInput($record->formatted);\n    }\n\n    public function close() {\n        foreach ($this->pipes as $pipe) {\n            fclose($pipe);\n        }\n        proc_close($this->process);\n    }\n\n    private function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin\n            1 => ['pipe', 'w'], // stdout\n            2 => ['pipe', 'w']  // stderr\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process: \" . error_get_last()['message']);\n        }\n    }\n\n    private function selectErrorStream(): int|false {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors(): string {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process !== null) {\n            fclose($this->pipes[0]); // Close stdin\n            fclose($this->pipes[1]); // Close stdout\n            fclose($this->pipes[2]); // Close stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if ($this->process === null) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement your formatting logic here\n        return json_encode($record);\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, int|string|Level $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->writeProcessInput($record->formatted());\n    }\n\n    public function close() {\n        foreach ($this->pipes as $pipe) {\n            fclose($pipe);\n        }\n        proc_close($this->process);\n    }\n\n    private function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process !== null) {\n            fclose($this->pipes[0]); // stdin\n            fclose($this->pipes[1]); // stdout\n            fclose($this->pipes[2]); // stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if ($this->process === null) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process: \" . $this->command);\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement your log record formatting logic here\n        return json_encode($record) . PHP_EOL;\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process !== null) {\n            fclose($this->pipes[0]); // stdin\n            fclose($this->pipes[1]); // stdout\n            fclose($this->pipes[2]); // stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if ($this->process === null) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin\n            1 => ['pipe', 'w'], // stdout\n            2 => ['pipe', 'w']  // stderr\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process: \" . $this->command);\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        $errors = '';\n        while ($this->selectErrorStream()) {\n            $errors .= stream_get_contents($this->pipes[2]);\n        }\n        return $errors;\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement your log record formatting logic here\n        return json_encode($record) . PHP_EOL;\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process !== null) {\n            fclose($this->pipes[0]); // stdin\n            fclose($this->pipes[1]); // stdout\n            fclose($this->pipes[2]); // stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if ($this->process === null) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin\n            1 => ['pipe', 'w'],  // stdout\n            2 => ['pipe', 'w']   // stderr\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: \" . $this->command);\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement your formatting logic here\n        return json_encode($record) . PHP_EOL;\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement formatting logic here\n        return json_encode($record);\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process !== null) {\n            fclose($this->pipes[0]); // Close stdin\n            fclose($this->pipes[1]); // Close stdout\n            fclose($this->pipes[2]); // Close stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if ($this->process === null) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process: \" . $this->command);\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        $errors = '';\n        while ($this->selectErrorStream()) {\n            $errors .= fread($this->pipes[2], 8192);\n        }\n        return $errors;\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement your log record formatting logic here\n        return json_encode($record) . PHP_EOL;\n    }\n}",
      "class ProcessHandler {\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Level::Debug, bool $bubble = true, ?string $cwd = null) {\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n        $this->ensureProcessIsStarted();\n    }\n\n    public function write(LogRecord $record) {\n        $this->ensureProcessIsStarted();\n        $formattedRecord = $this->format($record);\n        $this->writeProcessInput($formattedRecord);\n    }\n\n    public function close() {\n        if ($this->process) {\n            fclose($this->pipes[0]); // Close stdin\n            fclose($this->pipes[1]); // Close stdout\n            fclose($this->pipes[2]); // Close stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted() {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess() {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors() {\n        if (!is_resource($this->process)) {\n            throw new Exception(\"Failed to start process: \" . $this->command);\n        }\n    }\n\n    private function selectErrorStream() {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors() {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string) {\n        fwrite($this->pipes[0], $string);\n    }\n\n    private function format(LogRecord $record) {\n        // Implement your formatting logic here\n        return json_encode($record) . PHP_EOL;\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a function that retrieves Git tag information from a specified directory using subprocess communication via pipes.\n\nFunction Description: The function checks if a given directory is a Git repository (by checking for .git folder) and then executes the 'git describe --tags' command to get the latest tag information. It handles subprocess communication using pipes for stdout and stderr, properly manages resources, and returns the tag information or false if unsuccessful.\n\nInput: \n- $path (string): The filesystem path to check for Git repository and execute Git command\n\nOutput:\n- Returns (string|bool): The trimmed output from 'git describe --tags' command as string if successful, false if:\n  - The path is not a Git repository\n  - The subprocess cannot be created\n  - The Git command returns a non-zero exit code",
    "Canonical_solution": "function getGitInformation(string $path)\n{\n    if (!\\is_dir($path . DIRECTORY_SEPARATOR . '.git')) {\n        return false;\n    }\n\n    $process = \\proc_open(\n        'git describe --tags',\n        [\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w'],\n        ],\n        $pipes,\n        $path\n    );\n\n    if (!\\is_resource($process)) {\n        return false;\n    }\n\n    $result = \\trim(\\stream_get_contents($pipes[1]));\n\n    \\fclose($pipes[1]);\n    \\fclose($pipes[2]);\n\n    $returnCode = \\proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = 'git describe --tags';\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as we don't need it\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as it's not needed\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = ['git', '-C', $path, 'describe', '--tags'];\n    $process = proc_open($command, [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ], $pipes);\n\n    if ($process === false) {\n        return false;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    $errorOutput = stream_get_contents($pipes[2]);\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    if ($exitCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin as it's not needed\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = ['git', '-C', $path, 'describe', '--tags'];\n    $process = proc_open($command, [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ], $pipes);\n\n    if ($process === false) {\n        return false;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    $errorOutput = stream_get_contents($pipes[2]);\n\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    if ($exitCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]); // Close stdin\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open('git describe --tags', $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}",
      "<?php\nfunction getGitTagInfo($path) {\n    if (!is_dir($path . '/.git')) {\n        return false;\n    }\n\n    $command = escapeshellcmd(\"git describe --tags\");\n    $descriptorspec = array(\n       0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes, $path);\n\n    if (!is_resource($process)) {\n        return false;\n    }\n\n    fclose($pipes[0]);\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $errorOutput = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $returnCode = proc_close($process);\n\n    if ($returnCode !== 0) {\n        return false;\n    }\n\n    return trim($output);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a function that executes a shell command in a subprocess and captures its standard output while properly handling resources and errors.\n\nFunction Description: The function `readFromProcess` executes a given shell command as a subprocess using PHP's `proc_open`, captures the output from the subprocess's stdout stream, and ensures all resources are properly closed. It handles cases where the `proc_open` function is unavailable or fails to create the subprocess.\n\nInput: \n- `$command` (string): The shell command to be executed in the subprocess.\n\nOutput: \n- (string|null): Returns the captured output from the subprocess's stdout if successful, or null if the subprocess could not be created or if `proc_open` is unavailable.",
    "Canonical_solution": "function readFromProcess($command)\n{\n    if (!\\function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = [\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);\n    if (!\\is_resource($process)) {\n        return null;\n    }\n\n    $info = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    proc_close($process);\n\n    return $info;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "<?php\nfunction readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "<?php\nfunction readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "function readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}",
      "<?php\nfunction readFromProcess($command) {\n    if (!function_exists('proc_open')) {\n        return null;\n    }\n\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return null;\n    }\n\n    $output = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    fclose($pipes[0]);\n    fclose($pipes[2]);\n\n    proc_close($process);\n\n    return $output;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a PHP class that manages a subprocess using proc_open, handling input/output streams and proper cleanup.\n\nClass Description: ProcessStream is a class that manages the lifecycle of a subprocess, including initialization, stream handling, and termination. It provides access to the subprocess's standard input and output streams while properly handling errors and resource cleanup.\n\nAttributes:\n- command: string - The command to be executed in the subprocess\n- stream: resource - The process resource created by proc_open\n- in: resource - The input stream (stdin) of the subprocess\n- out: resource - The output stream (stdout) of the subprocess\n\nMethods:\n- setCommand(string $command): void - Sets the command to be executed by the subprocess\n- initialize(): void - Starts the subprocess, sets up streams, and checks for startup errors\n- terminate(): void - Closes all streams and terminates the subprocess\n- getReadConnectionDescription(): string - Returns a description of the process connection",
    "Canonical_solution": "namespace Symfony\\Component\\Mailer\\Transport\\Smtp\\Stream;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\nfinal class ProcessStream extends AbstractStream\n{\n    private string $command;\n\n    public function setCommand(string $command): void\n    {\n        $this->command = $command;\n    }\n\n    public function initialize(): void\n    {\n        $descriptorSpec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', '\\\\' === \\DIRECTORY_SEPARATOR ? 'a' : 'w'],\n        ];\n        $pipes = [];\n        $this->stream = proc_open($this->command, $descriptorSpec, $pipes);\n        stream_set_blocking($pipes[2], false);\n        if ($err = stream_get_contents($pipes[2])) {\n            throw new TransportException('Process could not be started: '.$err);\n        }\n        $this->in = &$pipes[0];\n        $this->out = &$pipes[1];\n    }\n\n    public function terminate(): void\n    {\n        if (null !== $this->stream) {\n            fclose($this->in);\n            fclose($this->out);\n            proc_close($this->stream);\n        }\n\n        parent::terminate();\n    }\n\n    protected function getReadConnectionDescription(): string\n    {\n        return 'process '.$this->command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [],
    "unmatched_results": [
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command={$this->command}, Stream=\" . (is_resource($this->stream) ? \"Active\" : \"Closed\") . \", In=\" . (is_resource($this->in) ? \"Open\" : \"Closed\") . \", Out=\" . (is_resource($this->out) ? \"Open\" : \"Closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command '{$this->command}' with output stream status \" . (is_resource($this->out) ? \"open\" : \"closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command: {$this->command}, Stream: \" . (is_resource($this->stream) ? 'open' : 'closed');\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin is a pipe that the child will read from\n            1 => [\"pipe\", \"w\"], // stdout is a pipe that the child will write to\n            2 => [\"pipe\", \"w\"]  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return is_resource($this->out) ? \"Connected to stdout\" : \"Not connected\";\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin is a pipe that the child will read from\n            1 => [\"pipe\", \"w\"], // stdout is a pipe that the child will write to\n            2 => [\"pipe\", \"w\"]  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return is_resource($this->out) ? \"Output stream is open\" : \"Output stream is closed\";\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command: {$this->command}, Stream: \" . (is_resource($this->stream) ? 'active' : 'closed');\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return \"ProcessStream: Command: {$this->command}, Stream: \" . (is_resource($this->stream) ? \"Active\" : \"Closed\") . \", Input: \" . (is_resource($this->in) ? \"Open\" : \"Closed\") . \", Output: \" . (is_resource($this->out) ? \"Open\" : \"Closed\");\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin is a pipe that the child will read from\n            1 => [\"pipe\", \"w\"], // stdout is a pipe that the child will write to\n            2 => [\"pipe\", \"w\"]  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n        fclose($pipes[2]); // Close stderr as we're not using it\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return is_resource($this->out) ? \"Connected to subprocess stdout\" : \"Not connected\";\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n\n        fclose($pipes[2]); // Close stderr\n    }\n\n    public function terminate(): void {\n        if (is_resource($this->in)) {\n            fclose($this->in);\n        }\n        if (is_resource($this->out)) {\n            fclose($this->out);\n        }\n        if (is_resource($this->stream)) {\n            proc_close($this->stream);\n        }\n    }\n\n    public function getReadConnectionDescription(): string {\n        return is_resource($this->out) ? \"Connected to stdout\" : \"Not connected\";\n    }\n}",
      "class ProcessStream {\n    private $command;\n    private $stream;\n    private $in;\n    private $out;\n\n    public function setCommand(string $command): void {\n        $this->command = $command;\n    }\n\n    public function initialize(): void {\n        $descriptorspec = [\n            0 => [\"pipe\", \"r\"], // stdin is a pipe that the child will read from\n            1 => [\"pipe\", \"w\"], // stdout is a pipe that the child will write to\n            2 => [\"file\", \"/dev/null\", \"a\"] // stderr is a file to write to\n        ];\n\n        $this->stream = proc_open($this->command, $descriptorspec, $pipes);\n\n        if (!is_resource($this->stream)) {\n            throw new Exception(\"Failed to start subprocess\");\n        }\n\n        $this->in = $pipes[0];\n        $this->out = $pipes[1];\n    }\n\n    public function terminate(): void {\n        fclose($this->in);\n        fclose($this->out);\n        proc_close($this->stream);\n    }\n\n    public function getReadConnectionDescription(): string {\n        return stream_get_meta_data($this->out)['uri'];\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a function that executes a shell command and captures its standard output and error streams using PHP's proc_open.\n\nFunction Description: The function should execute a given shell command, capture both stdout and stderr streams, properly close all resources, and return the exit code of the process. It should handle cases where process creation fails.\n\nInput:\n- $command: string - The shell command to execute\n- &$stdout: ?string (optional reference) - Variable to store the standard output\n- &$stderr: ?string (optional reference) - Variable to store the standard error\n\nOutput:\n- int - The exit code of the executed process. Returns -1 if process creation fails.",
    "Canonical_solution": "function execute(string $command, ?string &$stdout = null, ?string &$stderr = null) : int\n{\n    $process = proc_open($command, [\n        [\"pipe\", \"r\"],\n        [\"pipe\", \"w\"],\n        [\"pipe\", \"w\"]\n    ], $pipes);\n\n    if($process === false){\n        $stderr = \"Failed to open process\";\n        $stdout = \"\";\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    $stderr = stream_get_contents($pipes[2]);\n\n    foreach($pipes as $p){\n        fclose($p);\n    }\n\n    return proc_close($process);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = array(\n        0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n        1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n        2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n    );\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w']\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}",
      "function executeCommand($command, &$stdout = null, &$stderr = null) {\n    $descriptorspec = [\n        0 => [\"pipe\", \"r\"],\n        1 => [\"pipe\", \"w\"],\n        2 => [\"pipe\", \"w\"]\n    ];\n\n    $process = proc_open($command, $descriptorspec, $pipes);\n\n    if (!is_resource($process)) {\n        return -1;\n    }\n\n    $stdout = stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    $stderr = stream_get_contents($pipes[2]);\n    fclose($pipes[2]);\n\n    $exitCode = proc_close($process);\n\n    return $exitCode;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a function that executes system commands using various PHP execution methods, with fallback options from most to least preferred, and returns the command output along with execution method information.\n\nFunction Description: The function attempts to execute a system command using multiple PHP execution methods in a prioritized order (COM, exec, shell_exec, system, passthru, popen, proc_open). It handles both Windows and Unix-like systems, sets the working directory, and properly manages process pipes and resources. The function returns the command output and indicates which execution method was successful.\n\nInput:\n- $cmd: [string] - The system command to be executed\n- $cwd: [string] - The working directory where the command should be executed\n- $com: [bool] (optional) - Flag to force using COM method on Windows (default: false)\n\nOutput:\n- Returns [array] with two elements:\n  - 'res': [string] - The output from the executed command\n  - 'msg': [string] - Status message indicating the execution method used or NULL if no output",
    "Canonical_solution": "function command($cmd, $cwd, $com = false) {\n    $iswin = substr(PHP_OS,0,3) == 'WIN' ? true : false;\n    $res = $msg = '';\n    \n    if($cwd == 'com' || $com) {\n        if($iswin && class_exists('COM')) {\n            $wscript = new COM('Wscript.Shell');\n            $exec = $wscript->exec('c:\\\\windows\\\\system32\\\\cmd.exe /c '.$cmd);\n            $stdout = $exec->StdOut();\n            $res = $stdout->ReadAll();\n            $msg = 'Wscript.Shell';\n        }\n    } else {\n        chdir($cwd);\n        $cwd = getcwd();\n        \n        if(function_exists('exec')) {\n            @exec($cmd, $res);\n            $res = join(\"\\n\", $res);\n            $msg = 'exec';\n        }\n        elseif(function_exists('shell_exec')) {\n            $res = @shell_exec($cmd);\n            $msg = 'shell_exec';\n        }\n        elseif(function_exists('system')) {\n            ob_start();\n            @system($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'system';\n        }\n        elseif(function_exists('passthru')) {\n            ob_start();\n            @passthru($cmd);\n            $res = ob_get_contents();\n            ob_end_clean();\n            $msg = 'passthru';\n        }\n        elseif(function_exists('popen')) {\n            $fp = @popen($cmd, 'r');\n            if($fp) {\n                while(!feof($fp)) {\n                    $res .= fread($fp, 1024);\n                }\n            }\n            @pclose($fp);\n            $msg = 'popen';\n        }\n        elseif(function_exists('proc_open')) {\n            $env = $iswin ? array('path' => 'c:\\\\windows\\\\system32') : array('path' => '/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin');\n            $des = array(\n                0 => array(\"pipe\", \"r\"),\n                1 => array(\"pipe\", \"w\"),\n                2 => array(\"pipe\", \"w\")\n            );\n            $process = @proc_open($cmd, $des, $pipes, $cwd, $env);\n            \n            if(is_resource($process)) {\n                fwrite($pipes[0], $cmd);\n                fclose($pipes[0]);\n                $res .= stream_get_contents($pipes[1]);\n                fclose($pipes[1]);\n                $res .= stream_get_contents($pipes[2]);\n                fclose($pipes[2]);\n            }\n            @proc_close($process);\n            $msg = 'proc_open';\n        }\n    }\n    \n    $msg = $res == '' ? '<h1>NULL</h1>' : '<h2>利用'.$msg.'执行成功</h2>';\n    return array('res' => $res, 'msg' => $msg);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = null;\n\n    if (substr(PHP_OS, 0, 3) === 'WIN' && class_exists('COM') && ($com || !function_exists('exec'))) {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $exec = $wshShell->Exec(\"cmd /c cd \" . escapeshellarg($cwd) . \" && \" . $cmd);\n            $output = $exec->StdOut()->ReadAll();\n            $method = 'COM';\n        } catch (Exception $e) {\n            // Fallback to other methods\n        }\n    }\n\n    if (empty($output) && function_exists('exec')) {\n        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $out);\n        $output = implode(\"\\n\", $out);\n        $method = 'exec';\n    }\n\n    if (empty($output) && function_exists('shell_exec')) {\n        $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $method = 'shell_exec';\n    }\n\n    if (empty($output) && function_exists('system')) {\n        ob_start();\n        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'system';\n    }\n\n    if (empty($output) && function_exists('passthru')) {\n        ob_start();\n        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'passthru';\n    }\n\n    if (empty($output) && function_exists('popen')) {\n        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n        if ($handle) {\n            while (!feof($handle)) {\n                $output .= fread($handle, 8192);\n            }\n            pclose($handle);\n            $method = 'popen';\n        }\n    }\n\n    if (empty($output) && function_exists('proc_open')) {\n        $descriptorspec = array(\n            0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n            1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n            2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n        );\n\n        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n\n        if (is_resource($process)) {\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            proc_close($process);\n            $method = 'proc_open';\n        }\n    }\n\n    return array('res' => trim($output), 'msg' => $method);\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = '';\n\n    if (substr(PHP_OS, 0, 3) == 'WIN' && class_exists('COM') && $com) {\n        $wshShell = new COM(\"WScript.Shell\");\n        $exec = $wshShell->Exec(\"cmd /c cd \" . escapeshellarg($cwd) . \" && \" . $cmd);\n        $output = $exec->StdOut()->ReadAll();\n        $method = 'COM';\n    } elseif (function_exists('exec')) {\n        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $out);\n        $output = implode(\"\\n\", $out);\n        $method = 'exec';\n    } elseif (function_exists('shell_exec')) {\n        $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $method = 'shell_exec';\n    } elseif (function_exists('system')) {\n        ob_start();\n        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'system';\n    } elseif (function_exists('passthru')) {\n        ob_start();\n        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'passthru';\n    } elseif (function_exists('popen')) {\n        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n        $output = stream_get_contents($handle);\n        pclose($handle);\n        $method = 'popen';\n    } elseif (function_exists('proc_open')) {\n        $descriptorspec = array(\n            0 => array(\"pipe\", \"r\"),\n            1 => array(\"pipe\", \"w\"),\n            2 => array(\"pipe\", \"w\")\n        );\n        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n        if (is_resource($process)) {\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            proc_close($process);\n            $method = 'proc_open';\n        }\n    }\n\n    return array('res' => trim($output), 'msg' => $method ?: null);\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $methods = ['exec', 'shell_exec', 'system', 'passthru', 'popen', 'proc_open'];\n    $res = '';\n    $msg = '';\n\n    if (substr(PHP_OS, 0, 3) === 'WIN' && ($com || class_exists('COM'))) {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $oExec = $wshShell->Exec(\"cmd /c cd /d \" . escapeshellarg($cwd) . \" && \" . $cmd);\n            $res = $oExec->StdOut()->ReadAll();\n            $msg = 'COM';\n        } catch (\\Exception $e) {\n            // Fallback to other methods\n        }\n    }\n\n    if (!$msg) {\n        foreach ($methods as $method) {\n            if (function_exists($method)) {\n                switch ($method) {\n                    case 'exec':\n                        $output = [];\n                        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $output, $return_var);\n                        $res = implode(\"\\n\", $output);\n                        break;\n                    case 'shell_exec':\n                        $res = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n                        break;\n                    case 'system':\n                        ob_start();\n                        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $return_var);\n                        $res = ob_get_clean();\n                        break;\n                    case 'passthru':\n                        ob_start();\n                        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $return_var);\n                        $res = ob_get_clean();\n                        break;\n                    case 'popen':\n                        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n                        if ($handle) {\n                            $res = stream_get_contents($handle);\n                            pclose($handle);\n                        }\n                        break;\n                    case 'proc_open':\n                        $descriptorspec = array(\n                            0 => array(\"pipe\", \"r\"),\n                            1 => array(\"pipe\", \"w\"),\n                            2 => array(\"pipe\", \"w\")\n                        );\n                        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n                        if (is_resource($process)) {\n                            $res = stream_get_contents($pipes[1]);\n                            fclose($pipes[1]);\n                            fclose($pipes[2]);\n                            proc_close($process);\n                        }\n                        break;\n                }\n                if ($res !== '') {\n                    $msg = $method;\n                    break;\n                }\n            }\n        }\n    }\n\n    return ['res' => $res, 'msg' => $msg];\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $methods = ['exec', 'shell_exec', 'system', 'passthru', 'popen', 'proc_open'];\n    $output = '';\n    $methodUsed = null;\n\n    if ($com && strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $execObj = $wshShell->Exec(\"cmd /c cd /d \" . escapeshellarg($cwd) . \" && \" . $cmd);\n            $output = $execObj->StdOut()->ReadAll();\n            $methodUsed = 'COM';\n        } catch (Exception $e) {\n            // Fallback to other methods\n        }\n    }\n\n    if (!$methodUsed) {\n        foreach ($methods as $method) {\n            if (function_exists($method)) {\n                if ($method == 'exec') {\n                    $result = [];\n                    exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $result);\n                    $output = implode(\"\\n\", $result);\n                } elseif ($method == 'shell_exec') {\n                    $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n                } elseif ($method == 'system') {\n                    ob_start();\n                    system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n                    $output = ob_get_clean();\n                } elseif ($method == 'passthru') {\n                    ob_start();\n                    passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n                    $output = ob_get_clean();\n                } elseif ($method == 'popen') {\n                    $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n                    if ($handle) {\n                        $output = stream_get_contents($handle);\n                        pclose($handle);\n                    }\n                } elseif ($method == 'proc_open') {\n                    $descriptorspec = array(\n                        0 => array(\"pipe\", \"r\"),\n                        1 => array(\"pipe\", \"w\"),\n                        2 => array(\"pipe\", \"w\")\n                    );\n                    $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n                    if (is_resource($process)) {\n                        $output = stream_get_contents($pipes[1]);\n                        fclose($pipes[1]);\n                        fclose($pipes[2]);\n                        proc_close($process);\n                    }\n                }\n                if (!empty($output)) {\n                    $methodUsed = $method;\n                    break;\n                }\n            }\n        }\n    }\n\n    return ['res' => $output, 'msg' => $methodUsed];\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = '';\n\n    if (substr(PHP_OS, 0, 3) === 'WIN' && class_exists('COM') && ($com || !function_exists('exec'))) {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $oExec = $wshShell->Exec(\"cmd /c cd \" . escapeshellarg($cwd) . \" && \" . $cmd);\n            $output = $oExec->StdOut()->ReadAll();\n            $method = 'COM';\n        } catch (Exception $e) {\n            // Fallback to other methods\n        }\n    }\n\n    if (empty($output) && function_exists('exec')) {\n        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $out);\n        $output = implode(\"\\n\", $out);\n        $method = 'exec';\n    }\n\n    if (empty($output) && function_exists('shell_exec')) {\n        $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $method = 'shell_exec';\n    }\n\n    if (empty($output) && function_exists('system')) {\n        ob_start();\n        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'system';\n    }\n\n    if (empty($output) && function_exists('passthru')) {\n        ob_start();\n        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'passthru';\n    }\n\n    if (empty($output) && function_exists('popen')) {\n        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n        if ($handle) {\n            while (!feof($handle)) {\n                $output .= fread($handle, 8192);\n            }\n            pclose($handle);\n            $method = 'popen';\n        }\n    }\n\n    if (empty($output) && function_exists('proc_open')) {\n        $descriptorspec = array(\n            0 => array(\"pipe\", \"r\"),\n            1 => array(\"pipe\", \"w\"),\n            2 => array(\"pipe\", \"w\")\n        );\n        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n        if (is_resource($process)) {\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            proc_close($process);\n            $method = 'proc_open';\n        }\n    }\n\n    return array('res' => $output, 'msg' => $method ? \"Command executed using $method\" : null);\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = null;\n\n    if (substr(PHP_OS, 0, 3) === 'WIN' && class_exists('COM') && ($com || !function_exists('exec'))) {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $exec = $wshShell->Exec(\"cmd /c cd \" . escapeshellarg($cwd) . \" && \" . $cmd);\n            $output = $exec->StdOut()->ReadAll();\n            $method = 'COM';\n        } catch (Exception $e) {}\n    }\n\n    if (!$output && function_exists('exec')) {\n        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $out);\n        $output = implode(\"\\n\", $out);\n        $method = 'exec';\n    }\n\n    if (!$output && function_exists('shell_exec')) {\n        $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $method = 'shell_exec';\n    }\n\n    if (!$output && function_exists('system')) {\n        ob_start();\n        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $ret);\n        $output = ob_get_clean();\n        $method = 'system';\n    }\n\n    if (!$output && function_exists('passthru')) {\n        ob_start();\n        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'passthru';\n    }\n\n    if (!$output && function_exists('popen')) {\n        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n        if ($handle) {\n            $output = stream_get_contents($handle);\n            pclose($handle);\n            $method = 'popen';\n        }\n    }\n\n    if (!$output && function_exists('proc_open')) {\n        $descriptorspec = array(\n            0 => array(\"pipe\", \"r\"),\n            1 => array(\"pipe\", \"w\"),\n            2 => array(\"pipe\", \"w\")\n        );\n        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n        if (is_resource($process)) {\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            proc_close($process);\n            $method = 'proc_open';\n        }\n    }\n\n    return array('res' => trim($output), 'msg' => $method);\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = '';\n\n    if (substr(PHP_OS, 0, 3) === 'WIN' && class_exists('COM') && ($com || !function_exists('exec'))) {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $oExec = $wshShell->Exec(\"cmd /c cd /d \" . escapeshellarg($cwd) . \" && \" . escapeshellarg($cmd));\n            $output = $oExec->StdOut()->ReadAll();\n            $method = 'COM';\n        } catch (Exception $e) {\n            $output = null;\n        }\n    }\n\n    if (empty($output) && function_exists('exec')) {\n        $result = [];\n        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $result);\n        $output = implode(\"\\n\", $result);\n        $method = 'exec';\n    }\n\n    if (empty($output) && function_exists('shell_exec')) {\n        $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $method = 'shell_exec';\n    }\n\n    if (empty($output) && function_exists('system')) {\n        ob_start();\n        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'system';\n    }\n\n    if (empty($output) && function_exists('passthru')) {\n        ob_start();\n        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'passthru';\n    }\n\n    if (empty($output) && function_exists('popen')) {\n        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n        if ($handle) {\n            $output = stream_get_contents($handle);\n            pclose($handle);\n            $method = 'popen';\n        }\n    }\n\n    if (empty($output) && function_exists('proc_open')) {\n        $descriptorspec = array(\n            0 => array(\"pipe\", \"r\"),\n            1 => array(\"pipe\", \"w\"),\n            2 => array(\"pipe\", \"w\")\n        );\n        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n        if (is_resource($process)) {\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            proc_close($process);\n            $method = 'proc_open';\n        }\n    }\n\n    return ['res' => $output, 'msg' => $method ?: null];\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $output = '';\n    $method = '';\n\n    if (substr(PHP_OS, 0, 3) === 'WIN' && class_exists('COM') && ($com || !function_exists('exec'))) {\n        $wsh = new COM('WScript.Shell');\n        $exec = $wsh->Exec('cmd /c cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $stdout = $exec->StdOut();\n        while (!$stdout->AtEndOfStream) {\n            $output .= $stdout->ReadLine() . \"\\n\";\n        }\n        $method = 'COM';\n    } elseif (function_exists('exec')) {\n        exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $out);\n        $output = implode(\"\\n\", $out);\n        $method = 'exec';\n    } elseif (function_exists('shell_exec')) {\n        $output = shell_exec('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $method = 'shell_exec';\n    } elseif (function_exists('system')) {\n        ob_start();\n        system('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'system';\n    } elseif (function_exists('passthru')) {\n        ob_start();\n        passthru('cd ' . escapeshellarg($cwd) . ' && ' . $cmd);\n        $output = ob_get_clean();\n        $method = 'passthru';\n    } elseif (function_exists('popen')) {\n        $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n        if ($handle) {\n            while (!feof($handle)) {\n                $output .= fread($handle, 8192);\n            }\n            pclose($handle);\n            $method = 'popen';\n        }\n    } elseif (function_exists('proc_open')) {\n        $descriptorspec = array(\n            0 => array(\"pipe\", \"r\"),\n            1 => array(\"pipe\", \"w\"),\n            2 => array(\"pipe\", \"w\")\n        );\n        $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n        if (is_resource($process)) {\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n            fclose($pipes[2]);\n            proc_close($process);\n            $method = 'proc_open';\n        }\n    }\n\n    return array('res' => trim($output), 'msg' => $method ? 'Command executed using ' . $method : null);\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $methods = ['exec', 'shell_exec', 'system', 'passthru', 'popen', 'proc_open'];\n    $output = '';\n    $methodUsed = null;\n\n    if ($com && strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $execObj = $wshShell->Exec(\"cmd /c cd \\\"$cwd\\\" && $cmd\");\n            $stdout = $execObj->StdOut();\n            $output = $stdout->ReadAll();\n            $methodUsed = 'COM';\n        } catch (Exception $e) {\n            // Fallback to other methods\n        }\n    }\n\n    if (!$methodUsed) {\n        foreach ($methods as $method) {\n            if (function_exists($method)) {\n                if ($method == 'exec') {\n                    $result = [];\n                    exec(\"cd \\\"$cwd\\\" && $cmd\", $result);\n                    $output = implode(\"\\n\", $result);\n                } elseif ($method == 'shell_exec') {\n                    $output = shell_exec(\"cd \\\"$cwd\\\" && $cmd\");\n                } elseif ($method == 'system') {\n                    ob_start();\n                    system(\"cd \\\"$cwd\\\" && $cmd\");\n                    $output = ob_get_clean();\n                } elseif ($method == 'passthru') {\n                    ob_start();\n                    passthru(\"cd \\\"$cwd\\\" && $cmd\");\n                    $output = ob_get_clean();\n                } elseif ($method == 'popen') {\n                    $handle = popen(\"cd \\\"$cwd\\\" && $cmd\", 'r');\n                    $output = stream_get_contents($handle);\n                    pclose($handle);\n                } elseif ($method == 'proc_open') {\n                    $descriptorspec = array(\n                        0 => array(\"pipe\", \"r\"),\n                        1 => array(\"pipe\", \"w\"),\n                        2 => array(\"pipe\", \"w\")\n                    );\n                    $process = proc_open(\"cd \\\"$cwd\\\" && $cmd\", $descriptorspec, $pipes);\n                    if (is_resource($process)) {\n                        $output = stream_get_contents($pipes[1]);\n                        fclose($pipes[1]);\n                        fclose($pipes[2]);\n                        proc_close($process);\n                    }\n                }\n                if (!empty($output)) {\n                    $methodUsed = $method;\n                    break;\n                }\n            }\n        }\n    }\n\n    return [\n        'res' => $output,\n        'msg' => $methodUsed ? \"Command executed using $methodUsed\" : null\n    ];\n}",
      "function executeCommand($cmd, $cwd, $com = false) {\n    $methods = ['exec', 'shell_exec', 'system', 'passthru', 'popen', 'proc_open'];\n    $output = '';\n    $methodUsed = '';\n\n    if ($com && strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        try {\n            $wshShell = new COM(\"WScript.Shell\");\n            $exec = $wshShell->Exec(\"cmd /c cd \" . escapeshellarg($cwd) . \" && \" . $cmd);\n            $output = $exec->StdOut()->ReadAll();\n            $methodUsed = 'COM';\n        } catch (Exception $e) {\n            // Fallback to other methods\n        }\n    }\n\n    if (!$methodUsed) {\n        foreach ($methods as $method) {\n            if (function_exists($method)) {\n                if ($method == 'exec') {\n                    $result = [];\n                    $return_var = 0;\n                    chdir($cwd);\n                    exec($cmd, $result, $return_var);\n                    $output = implode(\"\\n\", $result);\n                    chdir(__DIR__);\n                } elseif ($method == 'shell_exec') {\n                    chdir($cwd);\n                    $output = shell_exec($cmd);\n                    chdir(__DIR__);\n                } elseif ($method == 'system') {\n                    $return_var = 0;\n                    ob_start();\n                    chdir($cwd);\n                    system($cmd, $return_var);\n                    $output = ob_get_clean();\n                    chdir(__DIR__);\n                } elseif ($method == 'passthru') {\n                    ob_start();\n                    chdir($cwd);\n                    passthru($cmd);\n                    $output = ob_get_clean();\n                    chdir(__DIR__);\n                } elseif ($method == 'popen') {\n                    $handle = popen('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, 'r');\n                    if ($handle) {\n                        $output = stream_get_contents($handle);\n                        pclose($handle);\n                    }\n                } elseif ($method == 'proc_open') {\n                    $descriptorspec = array(\n                        0 => array(\"pipe\", \"r\"),\n                        1 => array(\"pipe\", \"w\"),\n                        2 => array(\"pipe\", \"w\")\n                    );\n                    $pipes = [];\n                    $process = proc_open('cd ' . escapeshellarg($cwd) . ' && ' . $cmd, $descriptorspec, $pipes);\n                    if (is_resource($process)) {\n                        $output = stream_get_contents($pipes[1]);\n                        fclose($pipes[1]);\n                        fclose($pipes[2]);\n                        proc_close($process);\n                    }\n                }\n                if (!empty($output)) {\n                    $methodUsed = $method;\n                    break;\n                }\n            }\n        }\n    }\n\n    return ['res' => $output, 'msg' => $methodUsed ? \"Command executed using $methodUsed\" : null];\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a PHP helper class for executing system commands and handling inter-process communication using pipes.\n\nClass Description: ProcessHelper is a utility class designed to execute system commands in a cross-platform manner (supporting both Windows and Unix-like systems). It provides a clean interface for running commands, capturing their output and errors, and properly managing process resources.\n\nMethods:\n\nMethod1: run(string $command, string $cwd = null) -> array - Executes a system command and returns the exit code, output, and error messages. The method uses proc_open to create pipes for inter-process communication, properly handles resource cleanup, and returns trimmed output strings.\n\nInput:\n- $command: [string] - The system command to be executed\n- $cwd: [string|null] - The working directory for the command (optional)\n\nOutput:\n- Returns [array] containing three elements:\n  1. [int] Exit code of the process (0 typically indicates success)\n  2. [string] Standard output from the command (trimmed)\n  3. [string] Error output from the command (trimmed)\n\nThrows:\n- RuntimeException if the process cannot be started",
    "Canonical_solution": "namespace SMProxy\\Helper;\n\nclass ProcessHelper\n{\n    /**\n     * run a command. it is support windows\n     * @param string $command\n     * @param string|null $cwd\n     * @return array\n     * @throws \\RuntimeException\n     */\n    public static function run(string $command, string $cwd = null): array\n    {\n        $descriptors = [\n            0 => ['pipe', 'r'], // stdin - read channel\n            1 => ['pipe', 'w'], // stdout - write channel\n            2 => ['pipe', 'w'], // stdout - error channel\n            3 => ['pipe', 'r'], // stdin - This is the pipe we can feed the password into\n        ];\n\n        $process = proc_open($command, $descriptors, $pipes, $cwd);\n\n        if (!\\is_resource($process)) {\n            throw new \\RuntimeException('Can\\'t open resource with proc_open.');\n        }\n\n        // Nothing to push to input.\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        fclose($pipes[3]);\n\n        // Close all pipes before proc_close! $code === 0 is success.\n        $code = proc_close($process);\n\n        return [trim($code), trim($output), trim($error)];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            trim((string)$exitCode),\n            trim((string)$output),\n            trim((string)$errorOutput)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n\n        fclose($pipes[0]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [$exitCode, trim($stdout), trim($stderr)];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        fclose($pipes[0]); // Close stdin\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            (int)$exitCode,\n            trim($output),\n            trim($errorOutput)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        fclose($pipes[0]); // Close stdin as we don't need to send anything\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            (int)$exitCode,\n            trim($output),\n            trim($errorOutput)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        fclose($pipes[0]); // Close stdin\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            trim((string)$exitCode),\n            trim((string)$output),\n            trim((string)$errorOutput)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new \\RuntimeException(\"Process cannot be started\");\n        }\n\n        $stdout = stream_get_contents($pipes[1]);\n        $stderr = stream_get_contents($pipes[2]);\n\n        fclose($pipes[0]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            $exitCode,\n            trim($stdout),\n            trim($stderr)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        fclose($pipes[0]); // Close stdin\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            trim((string)$exitCode),\n            trim($output),\n            trim($errorOutput)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $pipes = [];\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException('Process cannot be started');\n        }\n\n        fclose($pipes[0]);  // Close stdin as we don't need it\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            trim((string)$exitCode),\n            trim((string)$output),\n            trim((string)$errorOutput)\n        ];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $pipes = [];\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        $output = stream_get_contents($pipes[1]);\n        $errorOutput = stream_get_contents($pipes[2]);\n\n        fclose($pipes[0]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [$exitCode, trim($output), trim($errorOutput)];\n    }\n}",
      "class ProcessHelper {\n    public function run(string $command, string $cwd = null): array {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $pipes = [];\n        $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n        if (!is_resource($process)) {\n            throw new RuntimeException(\"Process cannot be started\");\n        }\n\n        fclose($pipes[0]); // Close stdin\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $errorOutput = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return [\n            trim((string)$exitCode),\n            trim((string)$output),\n            trim((string)$errorOutput)\n        ];\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for various HTTP methods, custom headers, and JSON response handling.\n\nFunction Description: The function should initialize a cURL session, configure it based on input parameters, execute the request, handle errors, process the response, and return a structured result including status, headers, and response body. It should support GET, POST, PUT, DELETE, PATCH, and OPTIONS methods, with options for custom headers, additional cURL options, JSON response parsing, and timeout configuration.\n\nInput:\n- $url (string): The target URL for the HTTP request\n- $method (string, optional, default='GET'): HTTP method (GET|POST|PUT|DELETE|PATCH|OPTIONS)\n- $data (mixed, optional, default=false): Request payload data\n- $headers (mixed, optional, default=false): Request headers (string or array)\n- $options (mixed, optional, default=false): Additional cURL options as array\n- $json (bool, optional, default=false): Whether to parse response as JSON\n- $timeout (int, optional, default=3600): Request timeout in seconds\n\nOutput:\nReturns an associative array containing:\n- 'data': Response body (parsed as array if $json=true and valid JSON)\n- 'status': Boolean indicating success (HTTP status 200-299)\n- 'code': HTTP status code\n- 'header': Parsed response headers as associative array\n\nIn case of cURL errors:\n- 'data': Error message\n- 'code': 0\n- 'header': cURL info array",
    "Canonical_solution": "function url_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_HEADER, 1);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);\n    curl_setopt($ch, CURLINFO_HEADER_OUT, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_REFERER, get_url_link($url));\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n    if ($headers) {\n        if (is_string($headers)) {\n            $headers = array($headers);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    switch ($method) {\n        case 'GET':\n            curl_setopt($ch, CURLOPT_HTTPGET, 1);\n            break;\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PUT':\n        case 'DELETE':\n        case 'PATCH':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n    }\n\n    if (!empty($options)) {\n        curl_setopt_array($ch, $options);\n    }\n\n    $response = curl_exec($ch);\n    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $response_info = curl_getinfo($ch);\n    $http_body = substr($response, $header_size);\n    $http_header = substr($response, 0, $header_size);\n    $http_header = parse_headers($http_header);\n\n    if ($response_info['http_code'] == 0) {\n        $error_message = curl_error($ch);\n        if (!empty($error_message)) {\n            $error_message = \"API call to $url failed; $error_message\";\n        } else {\n            $error_message = \"API call to $url failed; maybe network error!\";\n        }\n        return array(\n            'data' => $error_message,\n            'code' => 0,\n            'header' => $response_info,\n        );\n    }\n\n    curl_close($ch);\n\n    if ($json && ($response_info['http_code'] >= 200 && $response_info['http_code'] <= 299)) {\n        $data = @json_decode($http_body, true);\n        if (json_last_error() == 0) {\n            $http_body = $data;\n        }\n    }\n\n    return array(\n        'data' => $http_body,\n        'status' => ($response_info['http_code'] >= 200 && $response_info['http_code'] <= 299),\n        'code' => $response_info['http_code'],\n        'header' => $http_header,\n    );\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function performCurlRequest($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) use (&$responseHeaders) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $responseHeaders[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    });\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            break;\n    }\n\n    if ($headers !== false) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options !== false && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $responseBody = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $curlInfo = curl_getinfo($ch);\n\n    if (curl_errno($ch)) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return [\n            'data' => $error,\n            'status' => false,\n            'code' => 0,\n            'header' => $curlInfo\n        ];\n    }\n\n    curl_close($ch);\n\n    if ($json) {\n        $decodedData = json_decode($responseBody, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $responseBody = $decodedData;\n        }\n    }\n\n    return [\n        'data' => $responseBody,\n        'status' => $httpCode >= 200 && $httpCode < 300,\n        'code' => $httpCode,\n        'header' => $responseHeaders ?? []\n    ];\n}",
      "function httpRequest($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) use (&$responseHeaders) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $responseHeaders[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    });\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n    }\n\n    if ($headers !== false) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options !== false && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $responseBody = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $curlInfo = curl_getinfo($ch);\n\n    if (curl_errno($ch)) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return [\n            'data' => $error,\n            'status' => false,\n            'code' => 0,\n            'header' => $curlInfo\n        ];\n    }\n\n    curl_close($ch);\n\n    if ($json) {\n        $decodedData = json_decode($responseBody, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $responseBody = $decodedData;\n        }\n    }\n\n    return [\n        'data' => $responseBody,\n        'status' => $httpCode >= 200 && $httpCode < 300,\n        'code' => $httpCode,\n        'header' => $responseHeaders ?? []\n    ];\n}",
      "function http_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n    }\n\n    if ($headers) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $response = curl_exec($ch);\n    $info = curl_getinfo($ch);\n    $error = curl_error($ch);\n    curl_close($ch);\n\n    $result = [\n        'data' => $response,\n        'status' => $info['http_code'] >= 200 && $info['http_code'] < 300,\n        'code' => $info['http_code'],\n        'header' => []\n    ];\n\n    if ($json && $response) {\n        $decoded = json_decode($response, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $result['data'] = $decoded;\n        }\n    }\n\n    if ($error) {\n        $result['data'] = $error;\n        $result['code'] = 0;\n        $result['header'] = $info;\n    } else {\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header_text = substr($response, 0, $header_size);\n        $result['header'] = [];\n        foreach (explode(\"\\r\\n\", $header_text) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $result['header'][$key] = $value;\n            }\n        }\n    }\n\n    return $result;\n}",
      "function performCurlRequest($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) use (&$responseHeaders) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $responseHeaders[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    });\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n    }\n\n    if ($headers !== false) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options !== false && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $responseBody = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $curlInfo = curl_getinfo($ch);\n    $error = curl_error($ch);\n\n    curl_close($ch);\n\n    if ($error) {\n        return [\n            'data' => $error,\n            'status' => false,\n            'code' => 0,\n            'header' => $curlInfo\n        ];\n    }\n\n    if ($json) {\n        $decodedData = json_decode($responseBody, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $responseBody = $decodedData;\n        }\n    }\n\n    return [\n        'data' => $responseBody,\n        'status' => $httpCode >= 200 && $httpCode < 300,\n        'code' => $httpCode,\n        'header' => isset($responseHeaders) ? $responseHeaders : []\n    ];\n}",
      "function performCurlRequest($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) use (&$responseHeaders) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $responseHeaders[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    });\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            break;\n    }\n\n    if ($headers !== false) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options !== false && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $responseBody = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $curlError = curl_error($ch);\n    $curlInfo = curl_getinfo($ch);\n\n    curl_close($ch);\n\n    $result = [\n        'data' => $responseBody,\n        'status' => $httpCode >= 200 && $httpCode < 300,\n        'code' => $httpCode,\n        'header' => isset($responseHeaders) ? $responseHeaders : []\n    ];\n\n    if ($json && $result['status']) {\n        $decodedData = json_decode($responseBody, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $result['data'] = $decodedData;\n        }\n    }\n\n    if ($curlError) {\n        $result['data'] = $curlError;\n        $result['code'] = 0;\n        $result['header'] = $curlInfo;\n    }\n\n    return $result;\n}",
      "function http_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_HTTPGET, true);\n    }\n\n    if ($headers !== false) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options !== false && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $response = curl_exec($ch);\n    $info = curl_getinfo($ch);\n    $error = curl_error($ch);\n\n    curl_close($ch);\n\n    if ($error) {\n        return [\n            'data' => $error,\n            'status' => false,\n            'code' => 0,\n            'header' => $info\n        ];\n    }\n\n    $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $headerText = substr($response, 0, $headerSize);\n    $body = substr($response, $headerSize);\n\n    $headers = [];\n    foreach (explode(\"\\r\\n\", $headerText) as $line) {\n        if (strpos($line, ':') !== false) {\n            list($key, $value) = explode(': ', $line, 2);\n            $headers[$key] = $value;\n        }\n    }\n\n    if ($json) {\n        $decodedBody = json_decode($body, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $body = $decodedBody;\n        }\n    }\n\n    return [\n        'data' => $body,\n        'status' => $info['http_code'] >= 200 && $info['http_code'] < 300,\n        'code' => $info['http_code'],\n        'header' => $headers\n    ];\n}",
      "function http_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n    }\n\n    if ($headers) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $response = curl_exec($ch);\n    $info = curl_getinfo($ch);\n    $error = curl_error($ch);\n\n    curl_close($ch);\n\n    if ($error) {\n        return [\n            'data' => $error,\n            'status' => false,\n            'code' => 0,\n            'header' => $info\n        ];\n    }\n\n    $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    $headerText = substr($response, 0, $headerSize);\n    $body = substr($response, $headerSize);\n\n    $headers = [];\n    foreach (explode(\"\\r\\n\", $headerText) as $line) {\n        if (strpos($line, ':') !== false) {\n            list($key, $value) = explode(': ', $line, 2);\n            $headers[$key] = $value;\n        }\n    }\n\n    if ($json) {\n        $decodedBody = json_decode($body, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $body = $decodedBody;\n        }\n    }\n\n    return [\n        'data' => $body,\n        'status' => $info['http_code'] >= 200 && $info['http_code'] < 300,\n        'code' => $info['http_code'],\n        'header' => $headers\n    ];\n}",
      "function http_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_HTTPGET, true);\n    }\n\n    if ($headers) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $response = curl_exec($ch);\n    $info = curl_getinfo($ch);\n    $error = curl_error($ch);\n    curl_close($ch);\n\n    $result = [\n        'data' => $response,\n        'status' => $info['http_code'] >= 200 && $info['http_code'] < 300,\n        'code' => $info['http_code'],\n        'header' => []\n    ];\n\n    if ($json && $response) {\n        $decoded = json_decode($response, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $result['data'] = $decoded;\n        }\n    }\n\n    if ($error) {\n        $result['data'] = $error;\n        $result['code'] = 0;\n        $result['header'] = $info;\n    } else {\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header_text = substr($response, 0, $header_size);\n        $result['header'] = [];\n        foreach (explode(\"\\r\\n\", $header_text) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $result['header'][$key] = $value;\n            }\n        }\n    }\n\n    return $result;\n}",
      "function httpRequest($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n        case 'DELETE':\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n    }\n\n    if ($headers) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $response = curl_exec($ch);\n    $info = curl_getinfo($ch);\n    $error = curl_error($ch);\n\n    curl_close($ch);\n\n    if ($error) {\n        return [\n            'data' => $error,\n            'status' => false,\n            'code' => 0,\n            'header' => $info\n        ];\n    }\n\n    $statusCode = $info['http_code'];\n    $status = $statusCode >= 200 && $statusCode < 300;\n\n    $responseHeaders = [];\n    if (isset($info['header_size'])) {\n        $rawHeaders = substr($response, 0, $info['header_size']);\n        $response = substr($response, $info['header_size']);\n        $headerLines = explode(\"\\r\\n\", trim($rawHeaders));\n        foreach ($headerLines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $responseHeaders[$key] = $value;\n            }\n        }\n    }\n\n    if ($json) {\n        $decodedData = json_decode($response, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $response = $decodedData;\n        }\n    }\n\n    return [\n        'data' => $response,\n        'status' => $status,\n        'code' => $statusCode,\n        'header' => $responseHeaders\n    ];\n}",
      "function http_request($url, $method = 'GET', $data = false, $headers = false, $options = false, $json = false, $timeout = 3600) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) use (&$responseHeaders) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $responseHeaders[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    });\n\n    switch (strtoupper($method)) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'PUT':\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            if ($data !== false) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($data) ? http_build_query($data) : $data);\n            }\n            break;\n        case 'DELETE':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n            if ($data !== false) {\n                $url .= '?' . (is_array($data) ? http_build_query($data) : $data);\n                curl_setopt($ch, CURLOPT_URL, $url);\n            }\n            break;\n        case 'OPTIONS':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'OPTIONS');\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_HTTPGET, true);\n    }\n\n    if ($headers !== false) {\n        if (!is_array($headers)) {\n            $headers = [$headers];\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($options !== false && is_array($options)) {\n        foreach ($options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n    }\n\n    $responseBody = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $curlError = curl_error($ch);\n    $curlInfo = curl_getinfo($ch);\n\n    curl_close($ch);\n\n    if ($curlError) {\n        return [\n            'data' => $curlError,\n            'status' => false,\n            'code' => 0,\n            'header' => $curlInfo\n        ];\n    }\n\n    if ($json) {\n        $decodedData = json_decode($responseBody, true);\n        if (json_last_error() === JSON_ERROR_NONE) {\n            $responseBody = $decodedData;\n        }\n    }\n\n    return [\n        'data' => $responseBody,\n        'status' => $httpCode >= 200 && $httpCode < 300,\n        'code' => $httpCode,\n        'header' => $responseHeaders ?? []\n    ];\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a PHP class that manages the execution of a subprocess using proc_open, handles input/output through pipes, and provides timeout functionality for process execution.\n\nClass Description: DefaultPhpProcess is a class that extends AbstractPhpProcess and provides concrete implementation for running PHP jobs in a subprocess. It handles process creation, I/O management through pipes, timeout enforcement, and resource cleanup.\n\nAttributes:\ntempFile: string - Temporary file path used for storing job input when stdin is not used\nstdin: mixed - Input source for the subprocess\nenv: array - Environment variables for the subprocess\ntimeout: int - Maximum execution time in seconds before process termination\n\nMethods:\nrunJob(string $job, array $settings = []) -> array - Executes a PHP job with optional settings, returns output and error\ngetHandles() -> array - Returns empty array by default, can be overridden to provide custom handles\nrunProcess(string $job, array $settings) -> array - Core method that manages process execution and I/O handling\nprocess(resource $pipe, string $job) -> void - Writes job input to the process pipe\ncleanup() -> void - Cleans up temporary resources (files)\nuseTemporaryFile() -> bool - Determines whether to use temporary files for input (default false)",
    "Canonical_solution": "use function array_merge;\nuse function fclose;\nuse function file_put_contents;\nuse function fread;\nuse function fwrite;\nuse function is_array;\nuse function is_resource;\nuse function proc_close;\nuse function proc_open;\nuse function proc_terminate;\nuse function rewind;\nuse function sprintf;\nuse function stream_get_contents;\nuse function stream_select;\nuse function sys_get_temp_dir;\nuse function tempnam;\nuse function unlink;\nuse PHPUnit\\Framework\\Exception;\n\nclass DefaultPhpProcess extends AbstractPhpProcess\n{\n    protected $tempFile;\n\n    public function runJob(string $job, array $settings = []): array\n    {\n        if ($this->stdin || $this->useTemporaryFile()) {\n            if (!($this->tempFile = tempnam(sys_get_temp_dir(), 'PHPUnit')) ||\n                file_put_contents($this->tempFile, $job) === false) {\n                throw new Exception(\n                    'Unable to write temporary file'\n                );\n            }\n\n            $job = $this->stdin;\n        }\n\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array\n    {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array\n    {\n        $handles = $this->getHandles();\n\n        $env = null;\n\n        if ($this->env) {\n            $env = $_SERVER ?? [];\n            unset($env['argv'], $env['argc']);\n            $env = array_merge($env, $this->env);\n\n            foreach ($env as $envKey => $envVar) {\n                if (is_array($envVar)) {\n                    unset($env[$envKey]);\n                }\n            }\n        }\n\n        $pipeSpec = [\n            0 => $handles[0] ?? ['pipe', 'r'],\n            1 => $handles[1] ?? ['pipe', 'w'],\n            2 => $handles[2] ?? ['pipe', 'w'],\n        ];\n\n        $process = proc_open(\n            $this->getCommand($settings, $this->tempFile),\n            $pipeSpec,\n            $pipes,\n            null,\n            $env\n        );\n\n        if (!is_resource($process)) {\n            throw new Exception(\n                'Unable to spawn worker process'\n            );\n        }\n\n        if ($job) {\n            $this->process($pipes[0], $job);\n        }\n\n        fclose($pipes[0]);\n\n        $stderr = $stdout = '';\n\n        if ($this->timeout) {\n            unset($pipes[0]);\n\n            while (true) {\n                $r = $pipes;\n                $w = null;\n                $e = null;\n\n                $n = @stream_select($r, $w, $e, $this->timeout);\n\n                if ($n === false) {\n                    break;\n                }\n\n                if ($n === 0) {\n                    proc_terminate($process, 9);\n\n                    throw new Exception(\n                        sprintf(\n                            'Job execution aborted after %d seconds',\n                            $this->timeout\n                        )\n                    );\n                }\n\n                if ($n > 0) {\n                    foreach ($r as $pipe) {\n                        $pipeOffset = 0;\n\n                        foreach ($pipes as $i => $origPipe) {\n                            if ($pipe === $origPipe) {\n                                $pipeOffset = $i;\n\n                                break;\n                            }\n                        }\n\n                        if (!$pipeOffset) {\n                            break;\n                        }\n\n                        $line = fread($pipe, 8192);\n\n                        if ($line === '' || $line === false) {\n                            fclose($pipes[$pipeOffset]);\n\n                            unset($pipes[$pipeOffset]);\n                        } elseif ($pipeOffset === 1) {\n                            $stdout .= $line;\n                        } else {\n                            $stderr .= $line;\n                        }\n                    }\n\n                    if (empty($pipes)) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (isset($pipes[1])) {\n                $stdout = stream_get_contents($pipes[1]);\n\n                fclose($pipes[1]);\n            }\n\n            if (isset($pipes[2])) {\n                $stderr = stream_get_contents($pipes[2]);\n\n                fclose($pipes[2]);\n            }\n        }\n\n        if (isset($handles[1])) {\n            rewind($handles[1]);\n\n            $stdout = stream_get_contents($handles[1]);\n\n            fclose($handles[1]);\n        }\n\n        if (isset($handles[2])) {\n            rewind($handles[2]);\n\n            $stderr = stream_get_contents($handles[2]);\n\n            fclose($handles[2]);\n        }\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['stdout' => $stdout, 'stderr' => $stderr];\n    }\n\n    protected function process($pipe, string $job): void\n    {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void\n    {\n        if ($this->tempFile) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool\n    {\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    protected $tempFile;\n    protected $stdin;\n    protected $env;\n    protected $timeout;\n\n    public function __construct($env = [], $timeout = 60) {\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    protected function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? fopen($this->tempFile, 'r') : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $error = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_get_status($process);\n            $exitCode = proc_close($process);\n\n            if ($status['running'] && $this->timeout > 0) {\n                proc_terminate($process);\n                proc_close($process);\n                throw new Exception(\"Process timed out\");\n            }\n\n            return ['output' => $output, 'error' => $error, 'exitCode' => $exitCode];\n        }\n\n        throw new Exception(\"Failed to start process\");\n    }\n\n    protected function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup() {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile() {\n        return false;\n    }\n}",
      "<?php\n\nabstract class AbstractPhpProcess {\n    abstract public function runJob(string $job, array $settings = []): array;\n    abstract protected function getHandles(): array;\n    abstract protected function runProcess(string $job, array $settings): array;\n    abstract protected function process(resource $pipe, string $job): void;\n    abstract protected function cleanup(): void;\n    abstract protected function useTemporaryFile(): bool;\n}\n\nclass DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process');\n    }\n\n    public function runJob(string $job, array $settings = []): array {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? $this->tempFile : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $process = proc_open('php', $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->process($pipes[0], $job);\n\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_get_status($process);\n        proc_terminate($process, 9);\n\n        $this->cleanup();\n\n        if ($status['running']) {\n            proc_close($process);\n            throw new Exception(\"Process timed out\");\n        }\n\n        return ['output' => $output, 'error' => $error];\n    }\n\n    protected function process(resource $pipe, string $job): void {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool {\n        return false;\n    }\n}",
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process');\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? $this->tempFile : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open('php', $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $error = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_get_status($process);\n            if ($status['running']) {\n                proc_terminate($process, 9);\n            }\n            proc_close($process);\n\n            return ['output' => $output, 'error' => $error];\n        }\n\n        return ['output' => '', 'error' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    private function cleanup() {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return $this->stdin === null;\n    }\n\n    public function __destruct() {\n        $this->cleanup();\n    }\n}",
      "<?php\n\nabstract class AbstractPhpProcess {\n    abstract public function runJob(string $job, array $settings = []): array;\n    abstract protected function getHandles(): array;\n    abstract protected function runProcess(string $job, array $settings): array;\n    abstract protected function process(resource $pipe, string $job): void;\n    abstract protected function cleanup(): void;\n}\n\nclass DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process_');\n    }\n\n    public function runJob(string $job, array $settings = []): array {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? $this->tempFile : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $process = proc_open('php', $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->process($pipes[0], $job);\n\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_get_status($process);\n        $exitCode = $status['exitcode'];\n\n        proc_close($process);\n\n        if ($status['running']) {\n            proc_terminate($process);\n            throw new Exception(\"Process timed out\");\n        }\n\n        $this->cleanup();\n\n        return [\n            'output' => $output,\n            'error' => $error,\n            'exit_code' => $exitCode\n        ];\n    }\n\n    protected function process(resource $pipe, string $job): void {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool {\n        return false;\n    }\n}",
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 30) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process');\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? $this->tempFile : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open('php', $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $error = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_get_status($process);\n            if ($status['running']) {\n                proc_terminate($process, 9);\n            }\n            proc_close($process);\n\n            return ['output' => $output, 'error' => $error];\n        }\n\n        return ['output' => '', 'error' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    private function cleanup() {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return $this->stdin === null;\n    }\n\n    public function __destruct() {\n        $this->cleanup();\n    }\n}",
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($tempFile = '', $stdin = null, $env = [], $timeout = 30) {\n        $this->tempFile = $tempFile;\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    private function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->stdin !== null ? $this->stdin : ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['output' => '', 'error' => 'Failed to start process'];\n        }\n\n        if ($this->stdin === null && !$this->useTemporaryFile()) {\n            fwrite($pipes[0], $job);\n            fclose($pipes[0]);\n        }\n\n        $startTime = microtime(true);\n        $output = '';\n        $error = '';\n\n        while (true) {\n            $status = proc_get_status($process);\n            if (!$status['running']) {\n                break;\n            }\n\n            if (microtime(true) - $startTime > $this->timeout) {\n                proc_terminate($process);\n                return ['output' => $output, 'error' => 'Process timed out'];\n            }\n\n            stream_set_blocking($pipes[1], 0);\n            $output .= stream_get_contents($pipes[1]);\n\n            stream_set_blocking($pipes[2], 0);\n            $error .= stream_get_contents($pipes[2]);\n\n            usleep(100000); // Sleep for 100ms\n        }\n\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        $exitCode = proc_close($process);\n\n        return ['output' => $output, 'error' => $error, 'exit_code' => $exitCode];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n        fclose($pipe);\n    }\n\n    private function cleanup() {\n        if ($this->tempFile && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return false;\n    }\n}",
      "<?php\n\nabstract class AbstractPhpProcess {\n    abstract public function runJob(string $job, array $settings = []): array;\n    abstract protected function getHandles(): array;\n    abstract protected function runProcess(string $job, array $settings): array;\n    abstract protected function process(resource $pipe, string $job): void;\n    abstract protected function cleanup(): void;\n}\n\nclass DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, array $env = [], int $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process_');\n    }\n\n    public function runJob(string $job, array $settings = []): array {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles(): array {\n        return [];\n    }\n\n    protected function runProcess(string $job, array $settings): array {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? $this->tempFile : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open('php', $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            throw new Exception(\"Failed to start process\");\n        }\n\n        $this->process($pipes[0], $job);\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_get_status($process);\n        $exitCode = proc_close($process);\n\n        if ($status['running'] && time() - $status['start_time'] > $this->timeout) {\n            proc_terminate($process);\n            $exitCode = proc_close($process);\n            $error .= \"\\nProcess timed out after {$this->timeout} seconds.\";\n        }\n\n        $this->cleanup();\n\n        return ['output' => $output, 'error' => $error, 'exit_code' => $exitCode];\n    }\n\n    protected function process(resource $pipe, string $job): void {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup(): void {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile(): bool {\n        return false;\n    }\n}",
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    protected $tempFile;\n    protected $stdin;\n    protected $env;\n    protected $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    protected function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->stdin !== null ? $this->stdin : ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['output' => '', 'error' => 'Failed to start process'];\n        }\n\n        if ($this->stdin === null && !$this->useTemporaryFile()) {\n            fwrite($pipes[0], $job);\n        } elseif ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fclose($pipes[0]);\n        }\n\n        $startTime = microtime(true);\n        $output = '';\n        $error = '';\n\n        while (true) {\n            $status = proc_get_status($process);\n            if (!$status['running']) {\n                break;\n            }\n\n            if (microtime(true) - $startTime > $this->timeout) {\n                proc_terminate($process);\n                return ['output' => '', 'error' => 'Process timed out'];\n            }\n\n            stream_set_blocking($pipes[1], false);\n            $output .= stream_get_contents($pipes[1]);\n\n            stream_set_blocking($pipes[2], false);\n            $error .= stream_get_contents($pipes[2]);\n\n            usleep(100000); // Sleep for 100ms\n        }\n\n        fclose($pipes[0]);\n        fclose($pipes[1]);\n        fclose($pipes[2]);\n\n        proc_close($process);\n\n        $this->cleanup();\n\n        return ['output' => $output, 'error' => $error];\n    }\n\n    protected function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup() {\n        if ($this->useTemporaryFile() && isset($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile() {\n        return false;\n    }\n}",
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    private $tempFile;\n    private $stdin;\n    private $env;\n    private $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n        $this->tempFile = tempnam(sys_get_temp_dir(), 'php_process');\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    protected function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->useTemporaryFile() ? $this->tempFile : $this->stdin,\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open('php', $descriptorspec, $pipes, null, $this->env);\n\n        if (is_resource($process)) {\n            $this->process($pipes[0], $job);\n            fclose($pipes[0]);\n\n            $output = stream_get_contents($pipes[1]);\n            fclose($pipes[1]);\n\n            $error = stream_get_contents($pipes[2]);\n            fclose($pipes[2]);\n\n            $status = proc_get_status($process);\n            $startTime = time();\n\n            while ($status['running']) {\n                if (time() - $startTime > $this->timeout) {\n                    proc_terminate($process, 9);\n                    break;\n                }\n                usleep(100000);\n                $status = proc_get_status($process);\n            }\n\n            proc_close($process);\n            $this->cleanup();\n\n            return ['output' => $output, 'error' => $error];\n        }\n\n        return ['output' => '', 'error' => 'Failed to start process'];\n    }\n\n    private function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    private function cleanup() {\n        if ($this->useTemporaryFile() && file_exists($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    private function useTemporaryFile() {\n        return $this->stdin === null;\n    }\n}",
      "class DefaultPhpProcess extends AbstractPhpProcess {\n    protected $tempFile;\n    protected $stdin;\n    protected $env;\n    protected $timeout;\n\n    public function __construct($stdin = null, $env = [], $timeout = 60) {\n        $this->stdin = $stdin;\n        $this->env = $env;\n        $this->timeout = $timeout;\n    }\n\n    public function runJob($job, $settings = []) {\n        return $this->runProcess($job, $settings);\n    }\n\n    protected function getHandles() {\n        return [];\n    }\n\n    protected function runProcess($job, $settings) {\n        $descriptorspec = [\n            0 => $this->stdin !== null ? $this->stdin : ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $pipes = [];\n        $process = proc_open($job, $descriptorspec, $pipes, null, $this->env);\n\n        if (!is_resource($process)) {\n            return ['output' => '', 'error' => 'Failed to start process'];\n        }\n\n        if ($this->stdin === null && !$this->useTemporaryFile()) {\n            fwrite($pipes[0], $job);\n        } elseif ($this->useTemporaryFile()) {\n            file_put_contents($this->tempFile, $job);\n            fwrite($pipes[0], file_get_contents($this->tempFile));\n        }\n        fclose($pipes[0]);\n\n        $output = stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        $error = stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        $status = proc_get_status($process);\n        if ($status['running'] && $this->timeout > 0) {\n            sleep($this->timeout);\n            proc_terminate($process);\n        }\n\n        proc_close($process);\n        $this->cleanup();\n\n        return ['output' => $output, 'error' => $error];\n    }\n\n    protected function process($pipe, $job) {\n        fwrite($pipe, $job);\n    }\n\n    protected function cleanup() {\n        if ($this->useTemporaryFile() && isset($this->tempFile)) {\n            unlink($this->tempFile);\n        }\n    }\n\n    protected function useTemporaryFile() {\n        return false;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a PHP class that handles inter-process communication (IPC) using proc_open to execute external commands, manage input/output streams, and handle errors.\n\nClass Description: The ProcessHandler class manages subprocess execution via proc_open, providing methods to write input to the process, read output/errors, and properly clean up resources. It extends Monolog's AbstractProcessingHandler for logging integration.\n\nAttributes:\n- process: [resource|null] - The subprocess resource handle or null if not running\n- command: [string] - The command to execute in the subprocess\n- cwd: [string|null] - The working directory for the subprocess or null for default\n- pipes: [array] - Array of file pointers for process pipes (stdin, stdout, stderr)\n\nMethods:\n- __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null) -> [void] - Initializes the handler with command and optional working directory\n- write(array $record) -> [void] - Writes formatted log record to process stdin (inherited from AbstractProcessingHandler)\n- close() -> [void] - Closes all pipes and terminates the process\n- ensureProcessIsStarted() -> [void] - Starts the process if not already running\n- startProcess() -> [void] - Executes proc_open to start the subprocess\n- handleStartupErrors() -> [void] - Checks for and handles any startup errors\n- selectErrorStream() -> [int|false] - Monitors stderr for error output\n- readProcessErrors() -> [string] - Reads and returns content from stderr\n- writeProcessInput(string $string) -> [void] - Writes data to process stdin",
    "Canonical_solution": "use Monolog\\Logger;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes = [];\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],\n        1 => ['pipe', 'w'],\n        2 => ['pipe', 'w'],\n    ];\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n        $errors = $this->readProcessErrors();\n        if (empty($errors) === false) {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n        if (is_resource($this->process) === false || empty($errors) === false) {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 145,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!is_resource($this->process)) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],  // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'],  // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']   // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException('Failed to start process');\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    private function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], (string)$record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException('Failed to start process');\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    private function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]); // stdin\n            fclose($this->pipes[1]); // stdout\n            fclose($this->pipes[2]); // stderr\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin\n            1 => ['pipe', 'w'], // stdout\n            2 => ['pipe', 'w'], // stderr\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException('Failed to start process');\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    private function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], (string)$record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'], // stdin is a pipe that the child will read from\n            1 => ['pipe', 'w'], // stdout is a pipe that the child will write to\n            2 => ['pipe', 'w']  // stderr is a pipe that the child will write to\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    private function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process = null;\n    private $command;\n    private $cwd;\n    private $pipes = [];\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], (string) $record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException('Failed to start process');\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        $this->writeProcessInput($record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        return stream_select($read, $write, $except, 0);\n    }\n\n    private function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    private function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], (string)$record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process !== null) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if ($this->process === null) {\n            $this->startProcess();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException('Failed to start process');\n        }\n\n        $this->handleStartupErrors();\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if ($this->selectErrorStream() !== false) {\n            $errorOutput = $this->readProcessErrors();\n            throw new \\RuntimeException('Process started with errors: ' . $errorOutput);\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = null;\n        $except = null;\n        $timeout = 0;\n\n        return stream_select($read, $write, $except, $timeout);\n    }\n\n    private function readProcessErrors(): string\n    {\n        return stream_get_contents($this->pipes[2]);\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process;\n    private $command;\n    private $cwd;\n    private $pipes;\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n        $this->process = null;\n        $this->pipes = [];\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], (string)$record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n\n        return stream_select($read, $write, $except, 0);\n    }\n\n    private function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}",
      "<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\AbstractProcessingHandler;\n\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    private $process = null;\n    private $command;\n    private $cwd;\n    private $pipes = [];\n\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        parent::__construct($level, $bubble);\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], (string) $record['formatted']);\n    }\n\n    public function close(): void\n    {\n        if ($this->process) {\n            fclose($this->pipes[0]);\n            fclose($this->pipes[1]);\n            fclose($this->pipes[2]);\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n\n    private function ensureProcessIsStarted(): void\n    {\n        if (!$this->process) {\n            $this->startProcess();\n            $this->handleStartupErrors();\n        }\n    }\n\n    private function startProcess(): void\n    {\n        $descriptorspec = [\n            0 => ['pipe', 'r'],\n            1 => ['pipe', 'w'],\n            2 => ['pipe', 'w']\n        ];\n\n        $this->process = proc_open($this->command, $descriptorspec, $this->pipes, $this->cwd);\n    }\n\n    private function handleStartupErrors(): void\n    {\n        if (!is_resource($this->process)) {\n            throw new \\RuntimeException(\"Failed to start process: {$this->command}\");\n        }\n    }\n\n    private function selectErrorStream(): int|false\n    {\n        $read = [$this->pipes[2]];\n        $write = [];\n        $except = [];\n        return stream_select($read, $write, $except, 0);\n    }\n\n    public function readProcessErrors(): string\n    {\n        if ($this->selectErrorStream()) {\n            return stream_get_contents($this->pipes[2]);\n        }\n        return '';\n    }\n\n    public function writeProcessInput(string $string): void\n    {\n        $this->ensureProcessIsStarted();\n        fwrite($this->pipes[0], $string);\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a PHP class that handles interactions with the Alipay payment gateway, specifically for transferring funds to Alipay accounts. The class should handle request signing, HTTP communication, and response processing.\n\nClass Description: The AlipayService class provides functionality to interact with Alipay's fund transfer API. It handles request signing using RSA, constructs proper API requests, and processes responses. The class manages authentication credentials and provides methods for executing fund transfers.\n\nAttributes:\n- appId: string - Alipay application ID\n- rsaPrivateKey: string - RSA private key for request signing\n- alipayRootCertSn: string - Alipay root certificate serial number\n- appCertSn: string - Application certificate serial number\n- charset: string - Character encoding (default: 'utf-8')\n\nMethods:\n- __construct(string $appid, string $saPrivateKey) -> void - Initializes the service with app ID and private key\n- setAlipayRootCertSn(string $alipayRootCertSn) -> void - Sets the Alipay root certificate serial number\n- setAppCertSn(string $appCertSn) -> void - Sets the application certificate serial number\n- doTransfer(float $totalFee, string $outTradeNo, string $account, string $realName, string $remark='') -> array - Executes a fund transfer with given parameters\n- curlPost(string $url='', mixed $postData='', array $options=array()) -> string - Sends a POST request using cURL\n- generateSign(array $params, string $signType=\"RSA\") -> string - Generates a signature for request parameters\n- sign(string $data, string $signType=\"RSA\") -> string - Signs data using RSA\n- checkEmpty(mixed $value) -> bool - Checks if a value is empty\n- getSignContent(array $params) -> string - Prepares parameters for signing\n- characet(string $data, string $targetCharset) -> string - Converts character encoding",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $rsaPrivateKey;\n    protected $alipayRootCertSn = '';\n    protected $appCertSn = '';\n    protected $charset = 'utf-8';\n\n    public function __construct($appid, $saPrivateKey)\n    {\n        $this->appId = $appid;\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn)\n    {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn)\n    {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark='')\n    {\n        $requestConfigs = array(\n            'out_biz_no'=>$outTradeNo,\n            'payee_type'=>'ALIPAY_LOGONID',\n            'trans_amount'=>$totalFee,\n            'product_code'=>'TRANS_ACCOUNT_NO_PWD',\n            'biz_scene'=>'DIRECT_TRANSFER',\n            'order_title'=>'织梦猫提现',\n            'payee_info'=>array(\n                'identity'=>$account,\n                'identity_type'=>'ALIPAY_LOGON_ID',\n                'name'=>$realName,\n            ),\n            'remark'=>$remark,\n        );\n        $commonConfigs = array(\n            'alipay_root_cert_sn' => $this->alipayRootCertSn,\n            'app_cert_sn' => $this->appCertSn,\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.uni.transfer',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($requestParams)), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        $stringToBeSigned = substr($stringToBeSigned, 0, -1);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        $stringToBeSigned = substr($stringToBeSigned, 0, -1);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n\n        return false;\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $params = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        $stringToBeSigned = substr($stringToBeSigned, 0, -1);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\n\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        $response = $this->curlPost($url, $requestParams);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=' . $this->charset]);\n        foreach ($options as $key => $val) {\n            curl_setopt($ch, constant('CURLOPT_' . strtoupper($key)), $val);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if ($this->checkEmpty($v))\n                continue;\n\n            $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n        }\n        $stringToBeSigned = substr($stringToBeSigned, 0, -1);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        $unsignedItems = $this->getSignContent($params);\n        $sign = $this->sign($unsignedItems, $signType);\n        return $sign;\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\n\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($requestParams)), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n        curl_setopt($ch, CURLOPT_CAINFO, 'path/to/alipay_root_cert.pem');\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=utf-8']);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === \"\";\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (!empty($k) && !$this->checkEmpty($v) && $k != \"sign\" && $k != \"sign_type\") {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function doTransfer($totalFee, $outTradeNo, $account, $realName, $remark = '') {\n        $requestParams = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $account,\n                'amount' => $totalFee,\n                'payer_show_name' => $realName,\n                'payee_real_name' => $realName,\n                'remark' => $remark\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams), true);\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=utf-8']);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (!empty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            file_put_contents(\"test.txt\", \"file data = \" . $data . \"\\r\\n\", FILE_APPEND);\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'ISO-8859-1', 'ASCII'));\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL for sending upgrade notifications, with error handling and response processing capabilities.\n\nClass Description: UpgradeNoticeBehavior is a class designed to manage HTTP communications for upgrade notifications. It encapsulates cURL functionality to send requests to specified URLs, handle parameters and headers, process responses, and manage errors.\n\nAttributes:\nheader_: [string] - Stores HTTP headers for requests\nhttpCode_: [int] - Stores HTTP status code from responses\nhttpDesc_: [string] - Stores HTTP status description from responses\naccesskey_: [string] - Stores access key for authentication\nsecretkey_: [string] - Stores secret key for authentication\n\nMethods:\nsend: [send]([string $url, array $params = array(), array $headers = array()]) -> [mixed] - Sends an HTTP request to the specified URL with optional parameters and headers. Returns the decoded JSON response on success or false on failure. Handles cURL errors and invalid response formats.",
    "Canonical_solution": "namespace Behavior;\n\nclass UpgradeNoticeBehavior {\n    protected $header_ = '';\n    protected $httpCode_;\n    protected $httpDesc_;\n    protected $accesskey_;\n    protected $secretkey_;\n\n    private function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        if (!empty($params)) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        if (!empty($headers)) curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $txt = curl_exec($ch);\n        if (curl_errno($ch)) {\n            trace(curl_error($ch), '升级通知出错', 'NOTIC', true);\n            return false;\n        }\n        curl_close($ch);\n        $ret = json_decode($txt, true);\n        if (!$ret) {\n            trace('接口[' . $url . ']返回格式不正确', '升级通知出错', 'NOTIC', true);\n            return false;\n        }\n        return $ret;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ]));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_strerror(curl_errno($ch));\n        curl_close($ch);\n\n        if ($response === false || $this->httpCode_ != 200) {\n            return false;\n        }\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ]));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_VERSION);\n\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ]));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_VERSION);\n\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ]));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_VERSION);\n\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, array($this, 'headerCallback'));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, array(\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        )));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_CODE) == 200 ? 'OK' : 'Error';\n\n        if (curl_errno($ch)) {\n            error_log('cURL Error: ' . curl_error($ch));\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($this->httpCode_ == 200) {\n            $decodedResponse = json_decode($response, true);\n            if (json_last_error() === JSON_ERROR_NONE) {\n                return $decodedResponse;\n            } else {\n                error_log('JSON Decode Error: ' . json_last_error_msg());\n                return false;\n            }\n        } else {\n            error_log('HTTP Error: ' . $this->httpCode_);\n            return false;\n        }\n    }\n\n    private function headerCallback($ch, $header) {\n        $this->header_ .= $header;\n        return strlen($header);\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        \n        $defaultHeaders = array(\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        );\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($defaultHeaders, $headers));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_strerror(curl_errno($ch));\n\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, array($this, 'readHeader'));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, array(\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        )));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_VERSION);\n\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($this->httpCode_ >= 200 && $this->httpCode_ < 300) {\n            return json_decode($response, true);\n        }\n\n        return false;\n    }\n\n    private function readHeader($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        $this->header_[$name] = $value;\n        return $len;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ]));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_VERSION);\n\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n\n        $defaultHeaders = [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ];\n\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($defaultHeaders, $headers));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_strerror(curl_errno($ch));\n\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}",
      "class UpgradeNoticeBehavior {\n    private $header_;\n    private $httpCode_;\n    private $httpDesc_;\n    private $accesskey_;\n    private $secretkey_;\n\n    public function __construct($accesskey, $secretkey) {\n        $this->accesskey_ = $accesskey;\n        $this->secretkey_ = $secretkey;\n    }\n\n    public function send($url, $params = array(), $headers = array()) {\n        $ch = curl_init();\n        if (!empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge($headers, [\n            'Authorization: Bearer ' . $this->accesskey_,\n            'Secret-Key: ' . $this->secretkey_\n        ]));\n\n        $response = curl_exec($ch);\n        $this->httpCode_ = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->httpDesc_ = curl_getinfo($ch, CURLINFO_HTTP_VERSION);\n\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        $decodedResponse = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $decodedResponse;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL with support for custom headers, payloads, and proxy configuration.\n\nClass Description: The Meting class provides functionality to make HTTP requests using PHP's cURL library. It supports GET/POST requests, custom headers, timeout settings, retry mechanism, and proxy configuration.\n\nAttributes:\n- header: array - Stores HTTP headers to be sent with the request\n- proxy: string - Stores proxy server address if configured\n- raw: mixed - Stores the raw response from the cURL request\n- info: array - Stores cURL request information\n- error: int - Stores cURL error code if any\n- status: string - Stores cURL error message if any\n\nMethods:\n- curl(string $url, mixed $payload = null, int $headerOnly = 0) -> self - Makes an HTTP request to the specified URL with optional payload and header-only response flag. Returns the class instance for method chaining.\n  Parameters:\n    - $url: string - The target URL for the request\n    - $payload: mixed - Optional request payload (array or string)\n    - $headerOnly: int - Flag to return only headers (1) or full response (0)",
    "Canonical_solution": "namespace Sakura\\API;\n\nclass Meting\n{\n    private function curl($url, $payload = null, $headerOnly = 0)\n    {\n        $header = array_map(function ($k, $v) {\n            return $k.': '.$v;\n        }, array_keys($this->header), $this->header);\n        $curl = curl_init();\n        if (!is_null($payload)) {\n            curl_setopt($curl, CURLOPT_POST, 1);\n            curl_setopt($curl, CURLOPT_POSTFIELDS, is_array($payload) ? http_build_query($payload) : $payload);\n        }\n        curl_setopt($curl, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 20);\n        curl_setopt($curl, CURLOPT_ENCODING, 'gzip');\n        curl_setopt($curl, CURLOPT_IPRESOLVE, 1);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HTTPHEADER, $header);\n        if ($this->proxy) {\n            curl_setopt($curl, CURLOPT_PROXY, $this->proxy);\n        }\n        for ($i = 0; $i < 3; $i++) {\n            $this->raw = curl_exec($curl);\n            $this->info = curl_getinfo($curl);\n            $this->error = curl_errno($curl);\n            $this->status = $this->error ? curl_error($curl) : '';\n            if (!$this->error) {\n                break;\n            }\n        }\n        curl_close($curl);\n\n        return $this;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Meting {\n    private $header = [];\n    private $proxy = '';\n    private $raw;\n    private $info;\n    private $error;\n    private $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                $payload = http_build_query($payload);\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n\n    public function setHeader($header) {\n        $this->header = $header;\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function getRaw() {\n        return $this->raw;\n    }\n\n    public function getInfo() {\n        return $this->info;\n    }\n\n    public function getError() {\n        return $this->error;\n    }\n\n    public function getStatus() {\n        return $this->status;\n    }\n}",
      "class Meting {\n    public $header = [];\n    public $proxy = '';\n    public $raw;\n    public $info;\n    public $error;\n    public $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                $payload = http_build_query($payload);\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    private $header = [];\n    private $proxy = '';\n    private $raw;\n    private $info;\n    private $error;\n    private $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($payload) ? http_build_query($payload) : $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    public $header = [];\n    public $proxy = '';\n    public $raw = null;\n    public $info = [];\n    public $error = 0;\n    public $status = '';\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                $payload = http_build_query($payload);\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    public $header = [];\n    public $proxy = '';\n    public $raw;\n    public $info;\n    public $error;\n    public $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($payload) ? http_build_query($payload) : $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    public $header = [];\n    public $proxy = '';\n    public $raw;\n    public $info;\n    public $error;\n    public $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($payload) ? http_build_query($payload) : $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    public $header = [];\n    public $proxy = '';\n    public $raw = null;\n    public $info = [];\n    public $error = 0;\n    public $status = '';\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                $payload = http_build_query($payload);\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    public $header = [];\n    public $proxy = '';\n    public $raw;\n    public $info;\n    public $error;\n    public $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                $payload = http_build_query($payload);\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n}",
      "class Meting {\n    private $header = [];\n    private $proxy = '';\n    private $raw;\n    private $info;\n    private $error;\n    private $status;\n\n    public function curl(string $url, $payload = null, int $headerOnly = 0): self {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payload));\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n            }\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n\n    public function setHeader(array $headers): self {\n        $this->header = $headers;\n        return $this;\n    }\n\n    public function setProxy(string $proxy): self {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function getRaw() {\n        return $this->raw;\n    }\n\n    public function getInfo() {\n        return $this->info;\n    }\n\n    public function getError() {\n        return $this->error;\n    }\n\n    public function getStatus() {\n        return $this->status;\n    }\n}",
      "class Meting {\n    private $header = [];\n    private $proxy = '';\n    private $raw;\n    private $info;\n    private $error;\n    private $status;\n\n    public function curl($url, $payload = null, $headerOnly = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, $headerOnly);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($this->header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->header);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($payload !== null) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (is_array($payload)) {\n                $payload = http_build_query($payload);\n            }\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n        }\n\n        $this->raw = curl_exec($ch);\n        $this->info = curl_getinfo($ch);\n        $this->error = curl_errno($ch);\n        $this->status = curl_error($ch);\n\n        curl_close($ch);\n\n        return $this;\n    }\n\n    public function setHeader($headers) {\n        $this->header = $headers;\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function getRaw() {\n        return $this->raw;\n    }\n\n    public function getInfo() {\n        return $this->info;\n    }\n\n    public function getError() {\n        return $this->error;\n    }\n\n    public function getStatus() {\n        return $this->status;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests to interact with WeChat Pay API, supporting both GET and POST methods with proper SSL configuration.\n\nClass Description: The Wechatpay class provides methods for making HTTP requests to WeChat Pay API endpoints. It handles both GET and POST requests, with special consideration for HTTPS connections and SSL configuration. The class includes error handling through HTTP status codes.\n\nMethods:\n\nMethod1: http_get(string $url) -> string|false - Performs a GET request to the specified URL. Returns the response content if successful (HTTP 200), or false otherwise.\nMethod2: http_post(string $url, array $param, bool $post_file=false) -> string|false - Performs a POST request to the specified URL with given parameters. Handles both regular form data and file uploads. Returns the response content if successful (HTTP 200), or false otherwise.",
    "Canonical_solution": "class Wechatpay\n{\n    /**\n     * GET 请求\n     * @param string $url\n     */\n    private function http_get($url){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n\n    /**\n     * POST 请求\n     * @param string $url\n     * @param array $param\n     * @param boolean $post_file 是否文件上传\n     * @return string content\n     */\n    private function http_post($url,$param,$post_file=false){\n        $oCurl = curl_init();\n        if(stripos($url,\"https://\")!==FALSE){\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, false);\n            curl_setopt($oCurl, CURLOPT_SSLVERSION, 1); //CURL_SSLVERSION_TLSv1\n        }\n        if (is_string($param) || $post_file) {\n            $strPOST = $param;\n        } else {\n            $aPOST = array();\n            foreach($param as $key=>$val){\n                $aPOST[] = $key.\"=\".urlencode($val);\n            }\n            $strPOST =  join(\"&\", $aPOST);\n        }\n        curl_setopt($oCurl, CURLOPT_URL, $url);\n        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );\n        curl_setopt($oCurl, CURLOPT_POST,true);\n        curl_setopt($oCurl, CURLOPT_POSTFIELDS,$strPOST);\n        $sContent = curl_exec($oCurl);\n        $aStatus = curl_getinfo($oCurl);\n        curl_close($oCurl);\n        if(intval($aStatus[\"http_code\"])==200){\n            return $sContent;\n        }else{\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass Wechatpay {\n    private $sslCertPath;\n    private $sslKeyPath;\n\n    public function __construct($sslCertPath, $sslKeyPath) {\n        $this->sslCertPath = $sslCertPath;\n        $this->sslKeyPath = $sslKeyPath;\n    }\n\n    public function http_get($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n        curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem'); // Ensure you have the latest CA bundle\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return ($httpCode == 200) ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n        curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem'); // Ensure you have the latest CA bundle\n\n        if ($post_file) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return ($httpCode == 200) ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $sslCertPath;\n    private $sslKeyPath;\n\n    public function __construct($sslCertPath, $sslKeyPath) {\n        $this->sslCertPath = $sslCertPath;\n        $this->sslKeyPath = $sslKeyPath;\n    }\n\n    public function http_get($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n        curl_setopt($ch, CURLOPT_CAINFO, 'path/to/cacert.pem'); // Ensure this path is correct\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return $httpCode == 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n        curl_setopt($ch, CURLOPT_CAINFO, 'path/to/cacert.pem'); // Ensure this path is correct\n\n        if ($post_file) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return $httpCode == 200 ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $sslCertPath;\n    private $sslKeyPath;\n\n    public function __construct($sslCertPath, $sslKeyPath) {\n        $this->sslCertPath = $sslCertPath;\n        $this->sslKeyPath = $sslKeyPath;\n    }\n\n    public function http_get($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return $httpCode === 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n\n        if ($post_file) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return $httpCode === 200 ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $sslCertPath;\n    private $sslKeyPath;\n\n    public function __construct($sslCertPath, $sslKeyPath) {\n        $this->sslCertPath = $sslCertPath;\n        $this->sslKeyPath = $sslKeyPath;\n    }\n\n    public function http_get($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return $httpCode == 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSLCERT, $this->sslCertPath);\n        curl_setopt($ch, CURLOPT_SSLKEY, $this->sslKeyPath);\n\n        if ($post_file) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return $httpCode == 200 ? $response : false;\n    }\n}"
    ],
    "unmatched_results": [
      "<?php\nclass Wechatpay {\n    private $ch;\n\n    public function __construct() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    public function __destruct() {\n        curl_close($this->ch);\n    }\n\n    public function http_get($url) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_HTTPGET, true);\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return ($http_code == 200) ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_POST, true);\n        if ($post_file) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return ($http_code == 200) ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $ch;\n\n    public function __construct() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    public function __destruct() {\n        curl_close($this->ch);\n    }\n\n    public function http_get($url) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_HTTPGET, true);\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return $http_code === 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_POST, true);\n        if ($post_file) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return $http_code === 200 ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $ch;\n\n    public function __construct() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    public function __destruct() {\n        curl_close($this->ch);\n    }\n\n    public function http_get($url) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_HTTPGET, true);\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return ($http_code == 200) ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_POST, true);\n        if ($post_file) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return ($http_code == 200) ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $ch;\n\n    public function __construct() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    public function __destruct() {\n        curl_close($this->ch);\n    }\n\n    public function http_get($url) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_HTTPGET, true);\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return $http_code == 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_POST, true);\n        if ($post_file) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return $http_code == 200 ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $ch;\n\n    public function __construct() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    public function __destruct() {\n        curl_close($this->ch);\n    }\n\n    public function http_get($url) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_HTTPGET, true);\n\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n\n        return $http_code == 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_POST, true);\n\n        if ($post_file) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n\n        return $http_code == 200 ? $response : false;\n    }\n}",
      "<?php\nclass Wechatpay {\n    private $ch;\n\n    public function __construct() {\n        $this->ch = curl_init();\n        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n\n    public function __destruct() {\n        curl_close($this->ch);\n    }\n\n    public function http_get($url) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_HTTPGET, true);\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return $http_code == 200 ? $response : false;\n    }\n\n    public function http_post($url, $param, $post_file = false) {\n        curl_setopt($this->ch, CURLOPT_URL, $url);\n        curl_setopt($this->ch, CURLOPT_POST, true);\n        if ($post_file) {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, $param);\n        } else {\n            curl_setopt($this->ch, CURLOPT_POSTFIELDS, http_build_query($param));\n        }\n        $response = curl_exec($this->ch);\n        $http_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);\n        return $http_code == 200 ? $response : false;\n    }\n}"
    ],
    "match_count": 4,
    "pass@3": 0.8333333333333334,
    "pass@5": 0.9761904761904762
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using Guzzle library to download files and fetch GitHub release information.\n\nClass Description: The HttpClient class provides methods for downloading remote files via HTTP and retrieving GitHub release information (both stable and pre-release) using the Guzzle HTTP client library.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- getSourceFile(string $fileName, string $savePath, string $url) -> [bool] - Downloads a file from the specified URL and saves it to the given path\n- getLatestReleaseTagName(string $repo) -> [string] - Gets the latest stable release tag name from a GitHub repository\n- getLatestPreReleaseTagName(string $repo) -> [string] - Gets the latest pre-release tag name from a GitHub repository",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\GuzzleException;\n\nclass HttpClient\n{\n    private Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client();\n    }\n\n    /**\n     * Download remote file via HTTP\n     *\n     * @param string $fileName\n     * @param string $savePath\n     * @param string $url\n     * @return bool\n     */\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool\n    {\n        try {\n            if (! file_exists($savePath)) {\n                echo '目标文件夹 ' . $savePath . ' 不存在，下載失败。' . PHP_EOL;\n                return false;\n            }\n\n            echo '- 开始下载 ' . $fileName . '...' . PHP_EOL;\n            $request = $this->client->get($url);\n            echo '- 下载 ' . $fileName . ' 成功，正在保存...' . PHP_EOL;\n            $result = file_put_contents($savePath . $fileName, $request->getBody()->getContents());\n\n            if (! $result) {\n                echo '- 保存 ' . $fileName . ' 至 ' . $savePath . ' 失败。' . PHP_EOL;\n            } else {\n                echo '- 保存 ' . $fileName . ' 至 ' . $savePath . ' 成功。' . PHP_EOL;\n            }\n\n            return true;\n        } catch (GuzzleException $e) {\n            echo '- 下载 ' . $fileName . ' 失败...' . PHP_EOL;\n            echo $e->getMessage() . PHP_EOL;\n\n            return false;\n        }\n    }\n\n    /**\n     * Get latest GitHub release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases/latest' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n\n        return json_decode(\n            $request->getBody()->getContents(),\n            true\n        )['tag_name'];\n    }\n\n    /**\n     * Get latest GitHub pre-release tag\n     *\n     * @param string $repo\n     * @return string\n     * @throws GuzzleException\n     */\n    public function getLatestPreReleaseTagName(string $repo): string\n    {\n        $url = 'https://api.github.com/repos/' . $repo . '/releases' .\n            ($_ENV['github_access_token'] !== '' ? '?access_token=' . $_ENV['github_access_token'] : '');\n        $request = $this->client->get($url);\n        $latest = json_decode(\n            $request->getBody()->getContents(),\n            true\n        )[0];\n\n        return $latest['tag_name'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/$repo/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception if needed\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestTagName($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestTagName($repo, true);\n    }\n\n    private function getLatestTagName(string $repo, bool $includePrereleases): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/$repo/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($includePrereleases || !$release['prerelease']) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception if needed\n        }\n        return '';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/$repo/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\nuse GuzzleHttp\\Client;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() == 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (\\Exception $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/{$repo}/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (\\Exception $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/$repo/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() == 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/{$repo}/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            echo $e->getMessage();\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getReleaseTagName($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getReleaseTagName($repo, true);\n    }\n\n    private function getReleaseTagName(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/$repo/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            echo $e->getMessage();\n        }\n        return '';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestTagName($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestTagName($repo, true);\n    }\n\n    private function getLatestTagName(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/{$repo}/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() === 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/{$repo}/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}",
      "<?php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass HttpClient {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function getSourceFile(string $fileName, string $savePath, string $url): bool {\n        try {\n            $response = $this->client->request('GET', $url);\n            if ($response->getStatusCode() == 200) {\n                file_put_contents($savePath . DIRECTORY_SEPARATOR . $fileName, $response->getBody());\n                return true;\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return false;\n    }\n\n    public function getLatestReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, false);\n    }\n\n    public function getLatestPreReleaseTagName(string $repo): string {\n        return $this->getLatestReleaseTag($repo, true);\n    }\n\n    private function getLatestReleaseTag(string $repo, bool $preRelease): string {\n        try {\n            $response = $this->client->request('GET', \"https://api.github.com/repos/$repo/releases\");\n            $releases = json_decode($response->getBody(), true);\n            foreach ($releases as $release) {\n                if ($release['prerelease'] === $preRelease) {\n                    return $release['tag_name'];\n                }\n            }\n        } catch (RequestException $e) {\n            // Handle exception\n        }\n        return '';\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a PHP function that sends a POST request to a specified URL with given data using cURL and returns the response.\n\nFunction Description: The function initializes a cURL session, configures it for a POST request with the provided URL and data, sets various options including timeouts and SSL verification settings, executes the request, and returns the response. It handles the entire lifecycle of the cURL session from initialization to cleanup.\n\nInput:\n- $url (string): The target URL to which the POST request will be sent\n- $data (mixed): The data to be sent with the POST request (can be an array or string)\n\nOutput:\n- Returns the response from the server as a string if the request is successful\n- Returns false if the request fails (though error handling could be enhanced in a production environment)",
    "Canonical_solution": "function post2url($url, $data) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function sendPostRequest($url, $data) {\n    $ch = curl_init();\n    if (is_array($data)) {\n        $data = http_build_query($data);\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a class that handles file downloads using cURL in PHP, with support for temporary file management and cleanup.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using cURL, storing them in a temporary directory, and managing the downloaded files' lifecycle.\n\nAttributes:\n- tempDir: string - The directory path where temporary files will be stored. Defaults to system temp directory if not specified.\n- outputFile: string - The path to the downloaded file.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets the temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL using cURL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file.\n- cleanup() -> void - Removes the downloaded file if it exists.\n\nInput:\n- For setTempDir(): A string representing the directory path.\n- For download(): A string representing the URL to download from.\n\nOutput:\n- For download(): A boolean indicating success (true) or failure (false).\n- For getFilename(): A string representing the path to the downloaded file.\n- Other methods do not return values.",
    "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Shell;\n\nclass CurlDownloader implements Downloader\n{\n    private $tempDir = null;\n    private $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if (\\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        if (!curl_exec($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_download_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        if (!curl_exec($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            unlink($this->outputFile);\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a Qiniu storage client class in PHP that handles HTTP requests to Qiniu's cloud storage service, including file uploads, downloads, and management operations.\n\nClass Description: QiniuStorage is a client class for interacting with Qiniu's cloud storage service. It provides methods for making HTTP requests to Qiniu's API endpoints with proper headers and request handling.\n\nAttributes:\n- QINIU_RSF_HOST: string - Qiniu's RSF (Resource List) API host\n- QINIU_RS_HOST: string - Qiniu's RS (Resource Management) API host  \n- QINIU_UP_HOST: string - Qiniu's file upload API host\n- timeout: string - Request timeout duration\n- error: string - Last error message\n- errorStr: string - Detailed error information\n\nMethods:\n- request(string $path, string $method, array|null $headers = null, mixed $body = null) -> mixed - Makes an HTTP request to Qiniu's API. Handles request setup, execution, and response processing.\n- response(string $text) -> array - Processes the response text and extracts JSON data from headers.\n- error(string $header, string $body) -> void - Handles error responses by parsing status codes and error messages.\n\nInput Parameters for request():\n- $path: string - The API endpoint path\n- $method: string - HTTP method (GET, POST, PUT, HEAD)\n- $headers: array|null - Optional request headers\n- $body: mixed - Request payload (can be string or resource)\n\nOutput for request():\n- Returns response body for successful GET requests\n- Returns parsed response array for other successful requests  \n- Returns false on failure and sets error information\n\nInput Parameters for response():\n- $text: string - Raw response text with headers\n\nOutput for response():\n- array - Parsed JSON data from response\n\nInput Parameters for error():\n- $header: string - Response header\n- $body: string - Response body\n\nOutput for error():\n- void - Sets error and errorStr properties",
    "Canonical_solution": "namespace Think\\Upload\\Driver\\Qiniu;\n\nclass QiniuStorage\n{\n    public $QINIU_RSF_HOST = 'http://rsf.qbox.me';\n    public $QINIU_RS_HOST = 'http://rs.qbox.me';\n    public $QINIU_UP_HOST = 'http://up.qiniu.com';\n    public $timeout = '';\n\n    private function request($path, $method, $headers = null, $body = null)\n    {\n        $ch = curl_init($path);\n\n        $_headers = array('Expect:');\n        if (!is_null($headers) && is_array($headers)) {\n            foreach ($headers as $k => $v) {\n                array_push($_headers, \"{$k}: {$v}\");\n            }\n        }\n\n        $length = 0;\n        $date = gmdate('D, d M Y H:i:s \\G\\M\\T');\n\n        if (!is_null($body)) {\n            if (is_resource($body)) {\n                fseek($body, 0, SEEK_END);\n                $length = ftell($body);\n                fseek($body, 0);\n\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_INFILE, $body);\n                curl_setopt($ch, CURLOPT_INFILESIZE, $length);\n            } else {\n                $length = @strlen($body);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } else {\n            array_push($_headers, \"Content-Length: {$length}\");\n        }\n\n        array_push($_headers, \"Date: {$date}\");\n\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $_headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ('PUT' == $method || 'POST' == $method) {\n            curl_setopt($ch, CURLOPT_POST, 1);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, 0);\n        }\n\n        if ('HEAD' == $method) {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        }\n\n        $response = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        if (200 == $status) {\n            if ('GET' == $method) {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    private function response($text)\n    {\n        $headers = explode(PHP_EOL, $text);\n        $items = array();\n        foreach ($headers as $header) {\n            $header = trim($header);\n            if (strpos($header, '{') !== false) {\n                $items = json_decode($header, 1);\n                break;\n            }\n        }\n        return $items;\n    }\n\n    private function error($header, $body)\n    {\n        list($status, $stash) = explode(\"\\r\\n\", $header, 2);\n        list($v, $code, $message) = explode(\" \", $status, 3);\n        $message = is_null($message) ? 'File Not Found' : \"[{$status}]:{$message}]\";\n        $this->error = $message;\n        $this->errorStr = json_decode($body, 1);\n        $this->errorStr = $this->errorStr['error'];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    public $timeout = 10;\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_RS_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            $this->errorStr = curl_strerror(curl_errno($ch));\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            }\n            return $this->response($response);\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        $data = json_decode(trim($text), true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return [];\n        }\n        return $data;\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    private $timeout;\n    private $error;\n    private $errorStr;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->error = '';\n        $this->errorStr = '';\n    }\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_UP_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $errno = curl_errno($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        if ($errno) {\n            $this->error = $error;\n            $this->errorStr = $error;\n            return false;\n        }\n\n        if ($info['http_code'] >= 200 && $info['http_code'] < 300) {\n            if ($method === 'GET') {\n                return $response;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($info['http_code'], $response);\n            return false;\n        }\n    }\n\n    private function response($text) {\n        $pos = strpos($text, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return false;\n        }\n        $header = substr($text, 0, $pos);\n        $body = substr($text, $pos + 4);\n        return json_decode($body, true);\n    }\n\n    private function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qbox.me';\n    const QINIU_RS_HOST = 'rs.qbox.me';\n    const QINIU_UP_HOST = 'up.qbox.me';\n\n    public $timeout = 10;\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_RS_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            $this->errorStr = curl_strerror(curl_errno($ch));\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        $headerSize = strpos($text, \"\\r\\n\\r\\n\") + 4;\n        $body = substr($text, $headerSize);\n        return json_decode($body, true);\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    public $timeout = 10;\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_UP_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            $this->errorStr = curl_strerror(curl_errno($ch));\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        $headerSize = strpos($text, \"\\r\\n\\r\\n\") + 4;\n        $body = substr($text, $headerSize);\n        return json_decode($body, true);\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    public $timeout = 10;\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_UP_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            $this->errorStr = curl_strerror(curl_errno($ch));\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        $headerSize = strpos($text, \"\\r\\n\\r\\n\") + 4;\n        $body = substr($text, $headerSize);\n        return json_decode($body, true);\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "class QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    public $timeout = 10;\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_UP_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            } else {\n                return $this->response($body);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n\n        curl_close($ch);\n    }\n\n    public function response($text) {\n        return json_decode($text, true);\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    private $timeout;\n    private $error;\n    private $errorStr;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->error = '';\n        $this->errorStr = '';\n    }\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_UP_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $errno = curl_errno($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        if ($errno) {\n            $this->error = $errno;\n            $this->errorStr = $error;\n            return false;\n        }\n\n        if ($info['http_code'] >= 400) {\n            $this->error($response, $response);\n            return false;\n        }\n\n        if ($method === 'GET') {\n            return $response;\n        }\n\n        return $this->response($response);\n    }\n\n    private function response($text) {\n        $data = json_decode($text, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            $this->error = json_last_error();\n            $this->errorStr = json_last_error_msg();\n            return false;\n        }\n        return $data;\n    }\n\n    private function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qbox.me';\n    const QINIU_RS_HOST = 'rs.qbox.me';\n    const QINIU_UP_HOST = 'up.qbox.me';\n\n    public $timeout = 10;\n    public $error = '';\n    public $errorStr = '';\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_RS_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            $this->errorStr = curl_strerror(curl_errno($ch));\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            }\n            return $this->response($body);\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        return json_decode($text, true);\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}"
    ],
    "unmatched_results": [
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    private $timeout;\n    private $error;\n    private $errorStr;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->error = '';\n        $this->errorStr = '';\n    }\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_RS_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            } else {\n                return $this->response($body);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    private function response($text) {\n        return json_decode($text, true);\n    }\n\n    private function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}",
      "<?php\nclass QiniuStorage {\n    const QINIU_RSF_HOST = 'rsf.qiniuapi.com';\n    const QINIU_RS_HOST = 'rs.qiniuapi.com';\n    const QINIU_UP_HOST = 'up.qiniup.com';\n\n    private $timeout;\n    private $error;\n    private $errorStr;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n        $this->error = '';\n        $this->errorStr = '';\n    }\n\n    public function request($path, $method, $headers = null, $body = null) {\n        $ch = curl_init();\n        $url = \"http://\" . self::QINIU_UP_HOST . $path;\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($body !== null) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } elseif ($method === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            if ($body !== null) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } elseif ($method === 'DELETE') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        }\n\n        if ($headers !== null) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            if ($method === 'GET') {\n                return $body;\n            } else {\n                return $this->response($response);\n            }\n        } else {\n            $this->error($header, $body);\n            return false;\n        }\n    }\n\n    public function response($text) {\n        $headerSize = strpos($text, \"\\r\\n\\r\\n\") + 4;\n        $body = substr($text, $headerSize);\n        return json_decode($body, true);\n    }\n\n    public function error($header, $body) {\n        $this->error = $header;\n        $this->errorStr = $body;\n    }\n}"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests to the OpenAI API using cURL, with support for different content types, streaming, and proxy configuration.\n\nClass Description: The OpenAi class is designed to interact with OpenAI's API by sending HTTP requests. It manages API keys, content types, headers, and request configurations. The class supports both JSON and multipart/form-data content types, allows for request streaming, and can be configured to use a proxy.\n\nAttributes:\n\nengine: string - The default OpenAI engine to use (default: \"davinci\")\nmodel: string - The default model for completions (default: \"text-davinci-002\")\nchatModel: string - The default model for chat completions (default: \"gpt-3.5-turbo\")\nassistantsBetaVersion: string - The version for assistants API (default: \"v1\")\nheaders: array - Array of HTTP headers to be sent with requests\ncontentTypes: array - Mapping of content types to their header strings\ntimeout: int - cURL timeout in seconds (default: 0)\nstream_method: object - Callback method for streaming responses\ncustomUrl: string - Custom base URL to override the default OpenAI API URL\nproxy: string - Proxy server address if needed\ncurlInfo: array - Information about the last cURL request\n\nMethods:\n\n__construct: __construct(string $OPENAI_API_KEY) -> void - Initializes the class with the OpenAI API key and sets default headers\nsendRequest: sendRequest(string $url, string $method, array $opts = []) -> bool|string - Sends an HTTP request to the specified URL with given method and options\nbaseUrl: baseUrl(string &$url) -> void - Modifies the base URL if a custom URL is set",
    "Canonical_solution": "namespace Orhanerday\\OpenAi;\n\nuse Exception;\n\nclass OpenAi\n{\n    private string $engine = \"davinci\";\n    private string $model = \"text-davinci-002\";\n    private string $chatModel = \"gpt-3.5-turbo\";\n    private string $assistantsBetaVersion = \"v1\";\n    private array $headers;\n    private array $contentTypes;\n    private int $timeout = 0;\n    private object $stream_method;\n    private string $customUrl = \"\";\n    private string $proxy = \"\";\n    private array $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY)\n    {\n        $this->contentTypes = [\n            \"application/json\" => \"Content-Type: application/json\",\n            \"multipart/form-data\" => \"Content-Type: multipart/form-data\",\n        ];\n\n        $this->headers = [\n            $this->contentTypes[\"application/json\"],\n            \"Authorization: Bearer $OPENAI_API_KEY\",\n        ];\n    }\n\n    /**\n     * @param  string  $url\n     * @param  string  $method\n     * @param  array   $opts\n     * @return bool|string\n     */\n    private function sendRequest(string $url, string $method, array $opts = [])\n    {\n        $post_fields = json_encode($opts);\n\n        if (array_key_exists('file', $opts) || array_key_exists('image', $opts)) {\n            $this->headers[0] = $this->contentTypes[\"multipart/form-data\"];\n            $post_fields = $opts;\n        } else {\n            $this->headers[0] = $this->contentTypes[\"application/json\"];\n        }\n        $curl_info = [\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => '',\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => $this->timeout,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => $method,\n            CURLOPT_POSTFIELDS => $post_fields,\n            CURLOPT_HTTPHEADER => $this->headers,\n        ];\n\n        if ($opts == []) {\n            unset($curl_info[CURLOPT_POSTFIELDS]);\n        }\n\n        if (! empty($this->proxy)) {\n            $curl_info[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if (array_key_exists('stream', $opts) && $opts['stream']) {\n            $curl_info[CURLOPT_WRITEFUNCTION] = $this->stream_method;\n        }\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, $curl_info);\n        $response = curl_exec($curl);\n\n        $info = curl_getinfo($curl);\n        $this->curlInfo = $info;\n\n        curl_close($curl);\n\n        if (! $response) {\n            throw new Exception(curl_error($curl));\n        }\n\n        return $response;\n    }\n\n    /**\n     * @param  string  $url\n     */\n    private function baseUrl(string &$url)\n    {\n        if ($this->customUrl != \"\") {\n            $url = str_replace(Url::ORIGIN, $this->customUrl, $url);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'multipart' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method = null;\n    private $customUrl = \"\";\n    private $proxy = \"\";\n    private $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method == 'POST' || $method == 'PUT') {\n            if (isset($opts['data'])) {\n                if (isset($opts['contentType']) && $opts['contentType'] == 'multipart') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'application/json',\n        'multipart' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl;\n    private $proxy;\n    private $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        switch (strtoupper($method)) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                if (!empty($opts['data'])) {\n                    if ($this->headers[1] == 'Content-Type: application/json') {\n                        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                    } else {\n                        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n                    }\n                }\n                break;\n            case 'GET':\n                if (!empty($opts['query'])) {\n                    $url .= '?' . http_build_query($opts['query']);\n                    curl_setopt($ch, CURLOPT_URL, $url);\n                }\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (!empty($opts['data'])) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                }\n                break;\n            case 'DELETE':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n        }\n\n        if ($this->stream_method && $method == 'POST') {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if (curl_errno($ch)) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "<?php\nclass OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $apiKey;\n    public $headers = [];\n    public $contentTypes = [\n        'json' => 'application/json',\n        'multipart' => 'multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->apiKey = $OPENAI_API_KEY;\n        $this->headers = [\n            'Authorization: Bearer ' . $this->apiKey,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (isset($opts['data'])) {\n                if ($this->headers[1] == 'Content-Type: application/json') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if (!empty($this->customUrl)) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "<?php\nclass OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    public $headers = [];\n    public $contentTypes = [\n        'json' => 'application/json',\n        'form-data' => 'multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        switch ($method) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                if (isset($opts['data'])) {\n                    if ($this->headers[1] == 'Content-Type: application/json') {\n                        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                    } else {\n                        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n                    }\n                }\n                break;\n            case 'GET':\n                if (isset($opts['query'])) {\n                    $url .= '?' . http_build_query($opts['query']);\n                    curl_setopt($ch, CURLOPT_URL, $url);\n                }\n                break;\n            // Add other methods as needed\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'application/json',\n        'form-data' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method = null;\n    private $customUrl = \"\";\n    private $proxy = \"\";\n    private $curlInfo = [];\n\n    public function __construct(string $OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (isset($opts['data'])) {\n                if (isset($opts['contentType']) && $opts['contentType'] === 'form-data') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method !== null) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(string &$url) {\n        if (!empty($this->customUrl)) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'application/json',\n        'form-data' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl = \"\";\n    private $proxy = \"\";\n    private $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $this->baseUrl($url);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($opts['data'])) {\n            if ($opts['contentType'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "<?php\nclass OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    public $headers = [];\n    public $contentTypes = [\n        'json' => 'application/json',\n        'multipart' => 'multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        switch (strtoupper($method)) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                if (!empty($opts['data'])) {\n                    if ($opts['contentType'] == 'multipart') {\n                        curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n                    } else {\n                        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                    }\n                }\n                break;\n            case 'GET':\n                if (!empty($opts['query'])) {\n                    $url .= '?' . http_build_query($opts['query']);\n                    curl_setopt($ch, CURLOPT_URL, $url);\n                }\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (!empty($opts['data'])) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                }\n                break;\n            case 'DELETE':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'application/json',\n        'multipart' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl = \"\";\n    private $proxy = \"\";\n    private $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if (isset($opts['data'])) {\n                if ($this->headers[1] == 'Content-Type: application/json') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n                }\n            }\n        }\n\n        if (isset($opts['stream']) && $opts['stream'] === true) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if (!empty($this->customUrl)) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "<?php\nclass OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $apiKey;\n    public $headers = [];\n    public $contentTypes = [\n        'json' => 'application/json',\n        'form-data' => 'multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->apiKey = $OPENAI_API_KEY;\n        $this->headers = [\n            'Authorization: Bearer ' . $this->apiKey,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $this->baseUrl($url);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (isset($opts['data'])) {\n                if ($this->headers[1] === 'Content-Type: application/json') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    public $assistantsBetaVersion = \"v1\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'application/json',\n        'form-data' => 'multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl;\n    private $proxy;\n    public $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: ' . $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $this->baseUrl($url);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST') {\n            if (isset($opts['content_type']) && $opts['content_type'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if (curl_errno($ch)) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, supports streaming for large files, and includes proxy configuration.\n\nAttributes:\n- request_url: string - The URL to send the request to\n- request_headers: array - Associative array of request headers\n- request_body: string - The request body content\n- response: string - The complete response from the server\n- response_headers: array - Parsed response headers\n- response_body: string - The response body content\n- response_code: int - HTTP response status code\n- response_info: array - Additional cURL response information\n- curl_handle: resource - The cURL handle resource\n- method: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\n- proxy: array|null - Proxy configuration details\n- username: string|null - Authentication username\n- password: string|null - Authentication password\n- curlopts: array|null - Additional cURL options\n- debug_mode: bool - Whether to enable debug mode\n- request_class: string - Class name for request objects\n- response_class: string - Class name for response objects\n- useragent: string - User agent string\n- read_file: string|null - File path for reading data\n- read_stream: resource|null - Stream resource for reading data\n- read_stream_size: int|null - Size of read stream\n- read_stream_read: int - Bytes read from stream\n- write_file: string|null - File path for writing data\n- write_stream: resource|null - Stream resource for writing data\n- seek_position: int|null - Position to seek in read stream\n- cacert_location: mixed - CA certificate location\n- ssl_verification: bool - Whether to verify SSL\n- registered_streaming_read_callback: callable|null - Callback for streaming read\n- registered_streaming_write_callback: callable|null - Callback for streaming write\n\nMethods:\n- __construct(string|null $url, array|null $proxy, array|null $helpers) -> self - Initialize the request object\n- __destruct() -> self - Clean up resources\n- set_credentials(string $user, string $pass) -> self - Set authentication credentials\n- add_header(string $key, string $value) -> self - Add a request header\n- remove_header(string $key) -> self - Remove a request header\n- set_method(string $method) -> self - Set the HTTP method\n- set_useragent(string $ua) -> self - Set the user agent\n- set_body(string $body) -> self - Set the request body\n- set_request_url(string $url) -> self - Set the request URL\n- set_curlopts(array $curlopts) -> self - Set additional cURL options\n- set_read_stream_size(int $size) -> self - Set read stream size\n- set_read_stream(resource $resource, int|null $size) -> self - Set read stream resource\n- set_read_file(string $location) -> self - Set read file location\n- set_write_stream(resource $resource) -> self - Set write stream resource\n- set_write_file(string $location) -> self - Set write file location\n- set_proxy(string $proxy) -> self - Configure proxy settings\n- set_seek_position(int|null $position) -> self - Set seek position for read stream\n- register_streaming_read_callback(callable $callback) -> self - Register read callback\n- register_streaming_write_callback(callable $callback) -> self - Register write callback\n- streaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Handle streaming read\n- streaming_write_callback(resource $curl_handle, string $data) -> int - Handle streaming write\n- prep_request() -> resource - Prepare and return cURL handle\n- process_response(resource|null $curl_handle, string|null $response) -> mixed - Process the response\n- send_request(bool $parse = false) -> mixed - Send the request and get response\n- get_response_header(string|null $header) -> mixed - Get response header(s)\n- get_response_body() -> string - Get response body\n- get_response_code() -> int - Get response status code",
    "Canonical_solution": "class RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request']))\n        {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response']))\n        {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy)\n        {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream))\n        {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream))\n        {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key]))\n        {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0)\n        {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0)\n            {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0)\n                {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size)\n        {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream))\n        {\n            if (fseek($this->read_stream, $this->seek_position) !== 0)\n            {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback)\n        {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length)\n        {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false)\n            {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback)\n        {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification)\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        }\n        else\n        {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true)\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        }\n        elseif (is_string($this->cacert_location))\n        {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode)\n        {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir'))\n        {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass']))\n            {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password)\n        {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib'))\n        {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers))\n        {\n            $temp_headers = array();\n\n            foreach ($this->request_headers as $k => $v)\n            {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method)\n        {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream))\n                {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0)\n                    {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream))\n                {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                }\n                else\n                {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0)\n        {\n            foreach ($this->curlopts as $k => $v)\n            {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response)\n        {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle))\n        {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header)\n            {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1])?$kv[1]:'';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response)\n            {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false)\n        {\n            throw new RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n\n        curl_close($curl_handle);\n\n        if ($parse)\n        {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header)\n        {\n            return $this->response_headers[strtolower($header)];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [],
    "unmatched_results": [
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if ($this->curl_handle) {\n            curl_close($this->curl_handle);\n        }\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream && $position !== null) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if (!$this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->response_body = $this->response;\n        } else {\n            $this->response_body = substr($this->response, curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE));\n        }\n        return $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $options = [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADERFUNCTION => [$this, 'process_response'],\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_HTTPHEADER => array_map(function($k, $v) { return \"$k: $v\"; }, array_keys($this->request_headers), $this->request_headers),\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n        ];\n\n        if ($this->method === 'POST' || $this->method === 'PUT') {\n            $options[CURLOPT_POSTFIELDS] = $this->request_body;\n        }\n\n        if ($this->username && $this->password) {\n            $options[CURLOPT_USERPWD] = $this->username . ':' . $this->password;\n        }\n\n        if ($this->proxy) {\n            $options[CURLOPT_PROXY] = $this->proxy['host'] . ':' . $this->proxy['port'];\n            if (isset($this->proxy['username']) && isset($this->proxy['password'])) {\n                $options[CURLOPT_PROXYUSERPWD] = $this->proxy['username'] . ':' . $this->proxy['password'];\n            }\n        }\n\n        if ($this->read_stream) {\n            $options[CURLOPT_UPLOAD] = true;\n            $options[CURLOPT_INFILE] = $this->read_stream;\n            $options[CURLOPT_INFILESIZE] = $this->read_stream_size;\n            if ($this->seek_position !== null) {\n                fseek($this->read_stream, $this->seek_position);\n            }\n        }\n\n        if ($this->write_stream) {\n            $options[CURLOPT_FILE] = $this->write_stream;\n        }\n\n        if ($this->curlopts) {\n            $options = array_merge($options, $this->curlopts);\n        }\n\n        curl_setopt_array($this->curl_handle, $options);\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        if (preg_match('/^HTTP\\/\\d+\\.\\d+ (\\d+)/', $header, $matches)) {\n            $this->response_code = (int)$matches[1];\n        }\n        $this->response .= $header;\n        list($name, $value) = explode(': ', trim($header), 2);\n        $this->response_headers[strtolower($name)] = trim($value);\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = '';\n        $this->response_body = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->response_body = $this->process_response(null, $this->response_body);\n        }\n        return $this->response_body;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return $this->response_headers[strtolower($header)] ?? null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        if ($this->read_stream_size !== null && $this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if (!$this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, 0);\n        }\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        if (preg_match('/^HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $header, $matches)) {\n            $this->response_code = (int)$matches[1];\n        }\n        if (strpos($header, ':') !== false) {\n            list($key, $value) = explode(':', $header, 2);\n            $this->response_headers[strtolower(trim($key))] = trim($value);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_body = $this->response;\n        if ($parse) {\n            $this->response_body = $this->parse_response_body();\n        }\n        return $this->response_body;\n    }\n\n    protected function parse_response_body() {\n        $contentType = isset($this->response_headers['content-type']) ? $this->response_headers['content-type'] : '';\n        if (strpos($contentType, 'application/json') !== false) {\n            return json_decode($this->response_body, true);\n        }\n        return $this->response_body;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $headers = [];\n        foreach ($this->request_headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n\n        curl_setopt_array($this->curl_handle, [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADERFUNCTION => [$this, 'process_response'],\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n            CURLOPT_PROXY => isset($this->proxy['host']) ? $this->proxy['host'] : null,\n            CURLOPT_PROXYPORT => isset($this->proxy['port']) ? $this->proxy['port'] : null,\n            CURLOPT_PROXYUSERPWD => isset($this->proxy['user']) && isset($this->proxy['pass']) ? $this->proxy['user'] . ':' . $this->proxy['pass'] : null,\n            CURLOPT_USERNAME => $this->username,\n            CURLOPT_PASSWORD => $this->password,\n            CURLOPT_POSTFIELDS => $this->request_body,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_READFUNCTION => [$this, 'streaming_read_callback'],\n            CURLOPT_WRITEFUNCTION => [$this, 'streaming_write_callback'],\n            CURLOPT_INFILESIZE => $this->read_stream_size,\n            CURLOPT_SEEKFUNCTION => function($resource, $offset) {\n                if ($this->seek_position !== null) {\n                    fseek($resource, $this->seek_position);\n                } else {\n                    fseek($resource, $offset);\n                }\n                return 0;\n            },\n        ]);\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n\n        if ($parse) {\n            $this->response_body = $this->response;\n        } else {\n            $this->response_body = substr($this->response, $this->response_info['header_size']);\n        }\n\n        return $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if (!$this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->response_body = $this->response;\n        } else {\n            $this->response_body = substr($this->response, curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE));\n        }\n        return $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if ($this->curl_handle) {\n            curl_close($this->curl_handle);\n        }\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream && $position !== null) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if (!$this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        } elseif ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        $this->process_response($this->curl_handle, $response);\n        if ($parse) {\n            return new $this->response_class($this);\n        }\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n        $data = fread($this->read_stream, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $headers = [];\n        foreach ($this->request_headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n\n        curl_setopt_array($this->curl_handle, [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADERFUNCTION => [$this, 'process_response_header'],\n            CURLOPT_WRITEFUNCTION => [$this, 'process_response_body'],\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_POSTFIELDS => $this->request_body,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n        ]);\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy['host']);\n            if (isset($this->proxy['port'])) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXYPORT, $this->proxy['port']);\n            }\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function process_response_body($curl_handle, $data) {\n        $this->response_body .= $data;\n        return strlen($data);\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n\n        if ($parse) {\n            return $this->process_response($this->curl_handle, $this->response);\n        }\n\n        return $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if ($this->curl_handle) {\n            curl_close($this->curl_handle);\n        }\n        if ($this->read_stream) {\n            fclose($this->read_stream);\n        }\n        if ($this->write_stream) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $options = [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADERFUNCTION => [$this, 'process_response'],\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_HTTPHEADER => array_map(function($k, $v) { return \"$k: $v\"; }, array_keys($this->request_headers), $this->request_headers),\n            CURLOPT_POSTFIELDS => $this->request_body,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n        ];\n\n        if ($this->proxy) {\n            $options[CURLOPT_PROXY] = $this->proxy['host'];\n            if (isset($this->proxy['port'])) {\n                $options[CURLOPT_PROXYPORT] = $this->proxy['port'];\n            }\n            if (isset($this->proxy['username']) && isset($this->proxy['password'])) {\n                $options[CURLOPT_PROXYUSERPWD] = $this->proxy['username'] . ':' . $this->proxy['password'];\n            }\n        }\n\n        if ($this->username && $this->password) {\n            $options[CURLOPT_USERPWD] = $this->username . ':' . $this->password;\n        }\n\n        if ($this->read_stream) {\n            $options[CURLOPT_UPLOAD] = true;\n            $options[CURLOPT_READFUNCTION] = [$this, 'streaming_read_callback'];\n            $options[CURLOPT_INFILESIZE] = $this->read_stream_size;\n        }\n\n        if ($this->write_stream) {\n            $options[CURLOPT_WRITEFUNCTION] = [$this, 'streaming_write_callback'];\n        }\n\n        if ($this->curlopts) {\n            $options = array_merge($options, $this->curlopts);\n        }\n\n        curl_setopt_array($this->curl_handle, $options);\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        if (preg_match('/^HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $header, $matches)) {\n            $this->response_code = (int)$matches[1];\n        } elseif (strpos($header, ':') !== false) {\n            list($key, $value) = explode(':', $header, 2);\n            $this->response_headers[strtolower(trim($key))] = trim($value);\n        }\n        $this->response .= $header;\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = '';\n        $this->response_body = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->response_body = $this->process_response(null, $this->response_body);\n        }\n        return $this->response_body;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $headers = [];\n        foreach ($this->request_headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n\n        curl_setopt_array($this->curl_handle, [\n            CURLOPT_URL => $this->request_url,\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADERFUNCTION => [$this, 'process_response'],\n            CURLOPT_USERAGENT => $this->useragent,\n            CURLOPT_SSL_VERIFYPEER => $this->ssl_verification,\n            CURLOPT_CAINFO => $this->cacert_location,\n        ]);\n\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy['host']);\n            if (isset($this->proxy['port'])) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXYPORT, $this->proxy['port']);\n            }\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($this->curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        if (preg_match('/^HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $header, $matches)) {\n            $this->response_code = (int)$matches[1];\n        }\n        if (strpos($header, ':')) {\n            list($key, $value) = explode(':', $header, 2);\n            $this->response_headers[strtolower(trim($key))] = trim($value);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_body = $this->response;\n        if ($parse) {\n            $this->response_body = $this->parse_response_body();\n        }\n        return $this->response_body;\n    }\n\n    protected function parse_response_body() {\n        $contentType = $this->get_response_header('content-type');\n        if (strpos($contentType, 'application/json') !== false) {\n            return json_decode($this->response_body, true);\n        }\n        return $this->response_body;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if (is_resource($this->curl_handle)) {\n            curl_close($this->curl_handle);\n        }\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->, $this->"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL for making GET and POST requests, with error handling and resource management.\n\nClass Description: The HttpClient class encapsulates cURL functionality to perform HTTP requests. It includes methods for GET requests, POST requests, and POST requests with download capability. The class handles cURL initialization, option setting, execution, error checking, and resource cleanup.\n\nMethods:\n\nMethod1: getCurl(string $url) -> mixed - Performs a GET request to the specified URL and returns the response data. Throws an exception if cURL is not enabled.\n\nMethod2: postDownloadCurl(string $url, mixed $data) -> array - Performs a POST request with the given data to the specified URL, returns the response as a decoded JSON array. Throws an exception if cURL is not enabled.\n\nMethod3: postCurl(string $url, mixed $data) -> array - Performs a POST request with the given data to the specified URL, decrypts the response using Faveo private key, and returns it as a decoded JSON array. Throws an exception if cURL is not enabled.\n\nNote: All methods include error handling that returns error messages to the caller when exceptions occur. Each method follows proper cURL resource management by initializing, executing, and closing the cURL session.",
    "Canonical_solution": "use App\\Http\\Controllers\\Utility\\LibraryController as Utility;\nuse Exception;\n\nclass HttpClient\n{\n    public function getCurl($url)\n    {\n        try {\n            $curl = Utility::_isCurl();\n            if (!$curl) {\n                throw new Exception('Please enable your curl function to check latest update');\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($ch, CURLOPT_URL, $url);\n            if (curl_exec($ch) === false) {\n                echo 'Curl error: '.curl_error($ch);\n            }\n            $data = curl_exec($ch);\n            curl_close($ch);\n\n            return $data;\n        } catch (Exception $ex) {\n            return redirect()->back()->with('fails', $ex->getMessage());\n        }\n    }\n\n    public function postDownloadCurl($url, $data)\n    {\n        try {\n            $curl = Utility::_isCurl();\n            if (!$curl) {\n                throw new Exception('Please enable your curl function to check latest update');\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_URL, $url);\n            if (curl_exec($ch) === false) {\n                echo 'Curl error: '.curl_error($ch);\n            }\n            $data = curl_exec($ch);\n            curl_close($ch);\n\n            return json_decode($data, true);\n        } catch (Exception $ex) {\n            return redirect()->back()->with('fails', $ex->getMessage());\n        }\n    }\n\n    public function postCurl($url, $data)\n    {\n        try {\n            $curl = Utility::_isCurl();\n            if (!$curl) {\n                throw new Exception('Please enable your curl function to check latest update');\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_URL, $url);\n            if (curl_exec($ch) === false) {\n                echo 'Curl error: '.curl_error($ch);\n            }\n            $data = curl_exec($ch);\n            curl_close($ch);\n            $data = Utility::decryptByFaveoPrivateKey($data);\n\n            return json_decode($data, true);\n        } catch (Exception $ex) {\n            return redirect()->back()->with('fails', $ex->getMessage());\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class HttpClient {\n    private $privateKey;\n\n    public function __construct($privateKey) {\n        $this->privateKey = $privateKey;\n    }\n\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        $decryptedResponse = openssl_decrypt($response, 'AES-256-CBC', $this->privateKey);\n        return json_decode($decryptedResponse, true);\n    }\n}",
      "class HttpClient {\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n        \n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        \n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n        \n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n        \n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        \n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n        \n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n        \n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        \n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n        \n        // Assuming decryptResponse is a method to decrypt the response using Faveo private key\n        $decryptedResponse = $this->decryptResponse($response);\n        \n        curl_close($ch);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($encryptedData) {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $encryptedData;\n    }\n}",
      "<?php\nclass HttpClient {\n    private $curl;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n    }\n\n    public function getCurl(string $url) {\n        $this->curl = curl_init($url);\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($this->curl);\n        $error = curl_error($this->curl);\n        curl_close($this->curl);\n\n        if ($error) {\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        return $response;\n    }\n\n    public function postDownloadCurl(string $url, mixed $data): array {\n        $this->curl = curl_init($url);\n        curl_setopt($this->curl, CURLOPT_POST, true);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($this->curl);\n        $error = curl_error($this->curl);\n        curl_close($this->curl);\n\n        if ($error) {\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        return json_decode($response, true);\n    }\n\n    public function postCurl(string $url, mixed $data): array {\n        $this->curl = curl_init($url);\n        curl_setopt($this->curl, CURLOPT_POST, true);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($this->curl);\n        $error = curl_error($this->curl);\n        curl_close($this->curl);\n\n        if ($error) {\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        // Placeholder for decryption using Faveo private key\n        $decryptedResponse = $this->decryptResponse($response);\n\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse(string $response): string {\n        // Implement decryption logic here using Faveo private key\n        // This is a placeholder implementation\n        return $response;\n    }\n}",
      "<?php\nclass HttpClient {\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        $decryptedResponse = $this->decryptResponse($response);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($encryptedData) {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $encryptedData;\n    }\n}",
      "class HttpClient {\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        $decryptedResponse = $this->decryptResponse($response);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($encryptedData) {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $encryptedData;\n    }\n}",
      "class HttpClient {\n    private $curl;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n    }\n\n    public function getCurl(string $url) {\n        $this->curl = curl_init($url);\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($this->curl);\n        if ($response === false) {\n            $error = curl_error($this->curl);\n            curl_close($this->curl);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($this->curl);\n        return $response;\n    }\n\n    public function postDownloadCurl(string $url, mixed $data): array {\n        $this->curl = curl_init($url);\n        curl_setopt($this->curl, CURLOPT_POST, true);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($this->curl);\n        if ($response === false) {\n            $error = curl_error($this->curl);\n            curl_close($this->curl);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($this->curl);\n        return json_decode($response, true);\n    }\n\n    public function postCurl(string $url, mixed $data): array {\n        $this->curl = curl_init($url);\n        curl_setopt($this->curl, CURLOPT_POST, true);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($this->curl);\n        if ($response === false) {\n            $error = curl_error($this->curl);\n            curl_close($this->curl);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        // Assuming decryptResponse is a method that decrypts the response using Faveo private key\n        $decryptedResponse = $this->decryptResponse($response);\n        curl_close($this->curl);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse(string $response): string {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $response;\n    }\n}",
      "<?php\nclass HttpClient {\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n        \n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        \n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n        \n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n        \n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        \n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n        \n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n        \n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        \n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n        \n        curl_close($ch);\n        $decryptedResponse = $this->decryptResponse($response);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($encryptedData) {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $encryptedData;\n    }\n}",
      "class HttpClient {\n    private $privateKey;\n\n    public function __construct($privateKey) {\n        $this->privateKey = $privateKey;\n    }\n\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        $decryptedResponse = openssl_decrypt($response, 'AES-256-CBC', $this->privateKey);\n        curl_close($ch);\n        return json_decode($decryptedResponse, true);\n    }\n}",
      "class HttpClient {\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        $decryptedResponse = $this->decryptResponse($response);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($encryptedData) {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $encryptedData;\n    }\n}",
      "class HttpClient {\n    public function getCurl($url) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function postDownloadCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function postCurl($url, $data) {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL is not enabled.');\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        curl_close($ch);\n\n        // Assuming decryptResponse is a method to decrypt the response using Faveo private key\n        $decryptedResponse = $this->decryptResponse($response);\n        return json_decode($decryptedResponse, true);\n    }\n\n    private function decryptResponse($encryptedData) {\n        // Placeholder for decryption logic using Faveo private key\n        // This should be replaced with actual decryption code\n        return $encryptedData;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL for making API requests to Facebook's various domains, with support for handling authentication, error management, and request configuration.\n\nClass Description: The BaseFacebook class provides core functionality for interacting with Facebook's APIs using cURL. It handles request construction, authentication, error handling, and includes utility methods for common operations. The class supports different Facebook domains and manages API credentials.\n\nAttributes:\n\nAttribute1: [array] - $CURL_OPTS - Default cURL options including timeout settings and user agent\nAttribute2: [array] - $DROP_QUERY_PARAMS - Query parameters to be removed from requests\nAttribute3: [array] - $DOMAIN_MAP - Mapping of Facebook API domains and their base URLs\nAttribute4: [string] - $appId - Facebook application ID\nAttribute5: [string] - $appSecret - Facebook application secret\nAttribute6: [mixed] - $user - Current authenticated user\nAttribute7: [mixed] - $signedRequest - Signed request data\nAttribute8: [mixed] - $state - Application state\nAttribute9: [string|null] - $accessToken - Current access token\nAttribute10: [bool] - $fileUploadSupport - Flag for file upload support\nAttribute11: [bool] - $trustForwarded - Flag for trusting forwarded headers\n\nMethods:\n\nMethod1: [makeRequest]($url, $params, $ch=null) -> [mixed] - Makes an HTTP request using cURL with the specified URL and parameters. Handles errors and SSL certificate verification.\nMethod2: [_oauthRequest]($url, $params) -> [mixed] - Makes an OAuth-authenticated request by adding access token and app secret proof to parameters before making the request.\nMethod3: [getAppSecretProof]($access_token) -> [string] - Generates an app secret proof using HMAC-SHA256 for the given access token.\nMethod4: [errorLog]($msg) -> [void] - Logs error messages, with special handling for CLI environments.",
    "Canonical_solution": "class BaseFacebook\n{\n    const VERSION = '3.2.2';\n    const SIGNED_REQUEST_ALGORITHM = 'HMAC-SHA256';\n\n    public static $CURL_OPTS = array(\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT        => 60,\n        CURLOPT_USERAGENT      => 'facebook-php-3.2',\n    );\n\n    protected static $DROP_QUERY_PARAMS = array(\n        'code',\n        'state',\n        'signed_request',\n    );\n\n    public static $DOMAIN_MAP = array(\n        'api'         => 'https://api.facebook.com/',\n        'api_video'   => 'https://api-video.facebook.com/',\n        'api_read'    => 'https://api-read.facebook.com/',\n        'graph'       => 'https://graph.facebook.com/',\n        'graph_video' => 'https://graph-video.facebook.com/',\n        'www'         => 'https://www.facebook.com/',\n    );\n\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken = null;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    protected function makeRequest($url, $params, $ch=null)\n    {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n\n        $opts = self::$CURL_OPTS;\n        if ($this->getFileUploadSupport()) {\n            $opts[CURLOPT_POSTFIELDS] = $params;\n        } else {\n            $opts[CURLOPT_POSTFIELDS] = http_build_query($params, null, '&');\n        }\n        $opts[CURLOPT_URL] = $url;\n\n        if (isset($opts[CURLOPT_HTTPHEADER])) {\n            $existing_headers = $opts[CURLOPT_HTTPHEADER];\n            $existing_headers[] = 'Expect:';\n            $opts[CURLOPT_HTTPHEADER] = $existing_headers;\n        } else {\n            $opts[CURLOPT_HTTPHEADER] = array('Expect:');\n        }\n\n        curl_setopt_array($ch, $opts);\n        $result = curl_exec($ch);\n\n        if (curl_errno($ch) == 60) {\n            self::errorLog('Invalid or no certificate authority found, using bundled information');\n            curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/fb_ca_chain_bundle.crt');\n            $result = curl_exec($ch);\n        }\n\n        if ($result === false && empty($opts[CURLOPT_IPRESOLVE])) {\n            $matches = array();\n            $regex = '/Failed to connect to ([^:].*): Network is unreachable/';\n            if (preg_match($regex, curl_error($ch), $matches)) {\n                if (strlen(inet_pton($matches[1]) ?? '') === 16) {\n                    self::errorLog('Invalid IPv6 configuration on server, Please disable or get native IPv6 on your server.');\n                    self::$CURL_OPTS[CURLOPT_IPRESOLVE] = CURL_IPRESOLVE_V4;\n                    curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);\n                    $result = curl_exec($ch);\n                }\n            }\n        }\n\n        if ($result === false) {\n            $e = new FacebookApiException(array(\n                'error_code' => curl_errno($ch),\n                'error' => array(\n                    'message' => curl_error($ch),\n                    'type' => 'CurlException',\n                ),\n            ));\n            curl_close($ch);\n            throw $e;\n        }\n        curl_close($ch);\n        return $result;\n    }\n\n    protected function _oauthRequest($url, $params)\n    {\n        if (!isset($params['access_token'])) {\n            $params['access_token'] = $this->getAccessToken();\n        }\n\n        if (isset($params['access_token'])) {\n            $params['appsecret_proof'] = $this->getAppSecretProof($params['access_token']);\n        }\n\n        foreach ($params as $key => $value) {\n            if (!is_string($value)) {\n                $params[$key] = json_encode($value);\n            }\n        }\n\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token)\n    {\n        return hash_hmac('sha256', $access_token, $this->getAppSecret());\n    }\n\n    protected static function errorLog($msg)\n    {\n        if (php_sapi_name() != 'cli') {\n            error_log($msg);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_CAINFO => __DIR__ . '/cacert.pem'\n    ];\n    protected $DROP_QUERY_PARAMS = ['api_key', 'access_token'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com',\n        'api_video' => 'https://graph-video.facebook.com',\n        'www' => 'https://www.facebook.com'\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = $config['appId'];\n        $this->appSecret = $config['secret'];\n        if (isset($config['fileUploadSupport'])) {\n            $this->fileUploadSupport = $config['fileUploadSupport'];\n        }\n        if (isset($config['trustForwarded'])) {\n            $this->trustForwarded = $config['trustForwarded'];\n        }\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        $opts = $this->CURL_OPTS;\n        if ($this->fileUploadSupport && !empty($params['file'])) {\n            $opts[CURLOPT_POSTFIELDS] = $params;\n            unset($params['file']);\n        } else {\n            $opts[CURLOPT_POSTFIELDS] = http_build_query($params, '', '&');\n        }\n        $opts[CURLOPT_URL] = $url;\n        curl_setopt_array($ch, $opts);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    private $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_CAINFO => __DIR__ . '/cacert.pem'\n    ];\n    private $DROP_QUERY_PARAMS = ['api_key', 'access_token'];\n    private $DOMAIN_MAP = [\n        'graph' => 'https://graph.facebook.com/',\n        'api' => 'https://api.facebook.com/',\n        'www' => 'https://www.facebook.com/'\n    ];\n    private $appId;\n    private $appSecret;\n    private $user;\n    private $signedRequest;\n    private $state;\n    private $accessToken;\n    private $fileUploadSupport = false;\n    private $trustForwarded = false;\n\n    public function __construct($appId, $appSecret) {\n        $this->appId = $appId;\n        $this->appSecret = $appSecret;\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        curl_setopt_array($ch, $this->CURL_OPTS);\n        $query = http_build_query($params);\n        curl_setopt($ch, CURLOPT_URL, $url . '?' . $query);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo \"Error: $msg\\n\";\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    private $CURL_OPTS = array(\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 2,\n    );\n    private $DROP_QUERY_PARAMS = array('session_key', 'api_key', 'auth_token', 'sig');\n    private $DOMAIN_MAP = array(\n        'api' => 'https://graph.facebook.com/',\n        'api_video' => 'https://graph-video.facebook.com/',\n        'www' => 'https://www.facebook.com/',\n    );\n    private $appId;\n    private $appSecret;\n    private $user;\n    private $signedRequest;\n    private $state;\n    private $accessToken;\n    private $fileUploadSupport = false;\n    private $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = isset($config['appId']) ? $config['appId'] : null;\n        $this->appSecret = isset($config['secret']) ? $config['secret'] : null;\n        if (isset($config['fileUpload'])) {\n            $this->fileUploadSupport = $config['fileUpload'];\n        }\n        if (isset($config['trustForwarded'])) {\n            $this->trustForwarded = $config['trustForwarded'];\n        }\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        foreach ($this->DROP_QUERY_PARAMS as $key) {\n            unset($params[$key]);\n        }\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        $opts = $this->CURL_OPTS;\n        if ($this->fileUploadSupport && !empty($params['file'])) {\n            $this->buildFileUpload($params);\n            $opts[CURLOPT_POSTFIELDS] = $params;\n        } else {\n            $opts[CURLOPT_POSTFIELDS] = http_build_query($params, null, '&');\n        }\n        $opts[CURLOPT_URL] = $url;\n        curl_setopt_array($ch, $opts);\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return json_decode($result, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . \"\\n\";\n        } else {\n            error_log($msg);\n        }\n    }\n\n    private function buildFileUpload(&$params) {\n        $file = $params['file'];\n        unset($params['file']);\n        foreach ($params as $key => $value) {\n            if (@is_array($value['tmp_name'])) {\n                foreach ($value as $i => $data) {\n                    $params[$key . '[' . $i . ']'] = '@' . $data['tmp_name'];\n                }\n            } else {\n                $params[$key] = '@' . $file['tmp_name'];\n            }\n        }\n    }\n}",
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_SSL_VERIFYHOST => 2,\n    ];\n    protected $DROP_QUERY_PARAMS = ['api_key', 'access_token'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com/',\n        'api_video' => 'https://graph-video.facebook.com/',\n        'www' => 'https://www.facebook.com/',\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = $config['appId'];\n        $this->appSecret = $config['secret'];\n        if (isset($config['fileUpload'])) {\n            $this->fileUploadSupport = $config['fileUpload'];\n        }\n        if (isset($config['trustForwarded'])) {\n            $this->trustForwarded = $config['trustForwarded'];\n        }\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        foreach ($this->CURL_OPTS as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n        if ($this->fileUploadSupport && !empty($params['file'])) {\n            $this->CURL_OPTS[CURLOPT_POSTFIELDS] = $params;\n            curl_setopt($ch, CURLOPT_POST, true);\n        } else {\n            $query = http_build_query($params, '', '&');\n            $url .= '?' . $query;\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return json_decode($result, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_CAINFO => __DIR__ . '/cacert.pem',\n    ];\n    protected $DROP_QUERY_PARAMS = ['api_key', 'access_token'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com/',\n        'api_video' => 'https://graph-video.facebook.com/',\n        'www' => 'https://www.facebook.com/',\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($appId, $appSecret) {\n        $this->appId = $appId;\n        $this->appSecret = $appSecret;\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        curl_setopt_array($ch, $this->CURL_OPTS);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    protected function _oauthRequest($url, $params) {\n        if ($this->accessToken) {\n            $params['access_token'] = $this->accessToken;\n            $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        }\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_HEADER => false,\n    ];\n    protected $DROP_QUERY_PARAMS = ['access_token', 'appsecret_proof'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com',\n        'api_video' => 'https://graph-video.facebook.com',\n        'www' => 'https://www.facebook.com',\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = $config['appId'];\n        $this->appSecret = $config['appSecret'];\n        if (isset($config['fileUploadSupport'])) {\n            $this->fileUploadSupport = $config['fileUploadSupport'];\n        }\n        if (isset($config['trustForwarded'])) {\n            $this->trustForwarded = $config['trustForwarded'];\n        }\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        foreach ($this->CURL_OPTS as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n        if ($this->fileUploadSupport && !empty($params['files'])) {\n            foreach ($params['files'] as $key => $file) {\n                $params[$key] = '@' . realpath($file);\n            }\n            unset($params['files']);\n        }\n        $query = http_build_query($params);\n        curl_setopt($ch, CURLOPT_URL, $url . '?' . $query);\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return json_decode($result, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo \"Error: \" . $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_CAINFO => __DIR__ . '/cacert.pem'\n    ];\n    protected $DROP_QUERY_PARAMS = ['api_key', 'access_token'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com/',\n        'api_video' => 'https://graph-video.facebook.com/',\n        'www' => 'https://www.facebook.com/'\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = $config['appId'];\n        $this->appSecret = $config['secret'];\n        if (isset($config['fileUploadSupport'])) {\n            $this->fileUploadSupport = $config['fileUploadSupport'];\n        }\n        if (isset($config['trustForwarded'])) {\n            $this->trustForwarded = $config['trustForwarded'];\n        }\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        $opts = $this->CURL_OPTS;\n        if ($this->fileUploadSupport && !empty($params['file'])) {\n            $opts[CURLOPT_POSTFIELDS] = $params;\n        } else {\n            $opts[CURLOPT_POSTFIELDS] = http_build_query($params, '', '&');\n        }\n        $opts[CURLOPT_URL] = $url;\n        curl_setopt_array($ch, $opts);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo \"CLI Error: \" . $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_SSL_VERIFYHOST => 2,\n    ];\n    protected $DROP_QUERY_PARAMS = ['access_token', 'appsecret_proof'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com/',\n        'api_video' => 'https://graph-video.facebook.com/',\n        'www' => 'https://www.facebook.com/',\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = $config['appId'];\n        $this->appSecret = $config['appSecret'];\n        if (isset($config['fileUploadSupport'])) {\n            $this->fileUploadSupport = $config['fileUploadSupport'];\n        }\n        if (isset($config['trustForwarded'])) {\n            $this->trustForwarded = $config['trustForwarded'];\n        }\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        foreach ($this->CURL_OPTS as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n        if ($this->fileUploadSupport && !empty($params['files'])) {\n            foreach ($params['files'] as $key => $file) {\n                $params[$key] = '@' . realpath($file);\n            }\n            unset($params['files']);\n        }\n        $url = $this->removeQueryParams($url, $this->DROP_QUERY_PARAMS);\n        $query = http_build_query($params);\n        if (strpos($url, '?') === false) {\n            $url .= '?' . $query;\n        } else {\n            $url .= '&' . $query;\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        if ($this->accessToken) {\n            $params['access_token'] = $this->accessToken;\n            $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        }\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n\n    private function removeQueryParams($url, $paramsToRemove) {\n        $parsedUrl = parse_url($url);\n        if (!isset($parsedUrl['query'])) {\n            return $url;\n        }\n        parse_str($parsedUrl['query'], $queryParams);\n        foreach ($paramsToRemove as $param) {\n            unset($queryParams[$param]);\n        }\n        $parsedUrl['query'] = http_build_query($queryParams);\n        return http_build_url($parsedUrl);\n    }\n}",
      "class BaseFacebook {\n    protected $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_HEADER => false,\n    ];\n    protected $DROP_QUERY_PARAMS = ['api_key', 'access_token'];\n    protected $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com/',\n        'api_video' => 'https://graph-video.facebook.com/',\n        'www' => 'https://www.facebook.com/',\n    ];\n    protected $appId;\n    protected $appSecret;\n    protected $user;\n    protected $signedRequest;\n    protected $state;\n    protected $accessToken;\n    protected $fileUploadSupport = false;\n    protected $trustForwarded = false;\n\n    public function __construct($config) {\n        $this->appId = isset($config['appId']) ? $config['appId'] : null;\n        $this->appSecret = isset($config['secret']) ? $config['secret'] : null;\n        $this->fileUploadSupport = isset($config['fileUpload']) ? $config['fileUpload'] : false;\n        $this->trustForwarded = isset($config['trustForwarded']) ? $config['trustForwarded'] : false;\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        $opts = $this->CURL_OPTS;\n        if ($this->fileUploadSupport && !empty($params['file'])) {\n            $opts[CURLOPT_POSTFIELDS] = $params;\n            $opts[CURLOPT_CUSTOMREQUEST] = 'POST';\n        } else {\n            $query = http_build_query($params);\n            $url .= '?' . $query;\n        }\n        $opts[CURLOPT_URL] = $url;\n        curl_setopt_array($ch, $opts);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        $params['access_token'] = $this->accessToken;\n        $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . \"\\n\";\n        } else {\n            error_log($msg);\n        }\n    }\n}",
      "class BaseFacebook {\n    private $CURL_OPTS = [\n        CURLOPT_CONNECTTIMEOUT => 10,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_USERAGENT => 'facebook-php-sdk',\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_SSL_VERIFYHOST => 2,\n    ];\n    private $DROP_QUERY_PARAMS = ['access_token', 'appsecret_proof'];\n    private $DOMAIN_MAP = [\n        'api' => 'https://graph.facebook.com/',\n        'dialog' => 'https://www.facebook.com/dialog/',\n        'graph_video' => 'https://graph-video.facebook.com/',\n    ];\n    private $appId;\n    private $appSecret;\n    private $user;\n    private $signedRequest;\n    private $state;\n    private $accessToken;\n    private $fileUploadSupport = false;\n    private $trustForwarded = false;\n\n    public function __construct($appId, $appSecret) {\n        $this->appId = $appId;\n        $this->appSecret = $appSecret;\n    }\n\n    public function makeRequest($url, $params, $ch = null) {\n        if (!$ch) {\n            $ch = curl_init();\n        }\n        curl_setopt_array($ch, $this->CURL_OPTS);\n        if ($params) {\n            $query = http_build_query($params);\n            $url .= '?' . $query;\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $this->errorLog(curl_error($ch));\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    protected function _oauthRequest($url, $params) {\n        if ($this->accessToken) {\n            $params['access_token'] = $this->accessToken;\n            $params['appsecret_proof'] = $this->getAppSecretProof($this->accessToken);\n        }\n        return $this->makeRequest($url, $params);\n    }\n\n    protected function getAppSecretProof($access_token) {\n        return hash_hmac('sha256', $access_token, $this->appSecret);\n    }\n\n    protected function errorLog($msg) {\n        if (php_sapi_name() == 'cli') {\n            echo $msg . PHP_EOL;\n        } else {\n            error_log($msg);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a PHP class that handles HTTP POST requests to the Coinbase API using cURL, including setting necessary headers and handling the response.\n\nClass Description: The Coinbase class encapsulates functionality for making authenticated POST requests to the Coinbase API. It manages API configuration and provides a method for executing cURL requests with proper headers and timeout settings.\n\nAttributes:\n- config: [array] - Stores configuration parameters including the Coinbase API key\n\nMethods:\n- __construct([array $config]) -> [void] - Initializes the class with configuration parameters\n- _curlPost([string $url], [mixed $params = false]) -> [mixed] - Executes a cURL POST request to the specified URL with given parameters and returns the response\n\nNote: The _curlPost method is private as it's an internal implementation detail of the class. The method handles the full cURL lifecycle including initialization, option setting, execution, error handling (implied by timeout), and resource cleanup.",
    "Canonical_solution": "namespace App\\Payments;\n\nclass Coinbase {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch, CURLOPT_HTTPHEADER, \n            array(\n                'X-CC-Api-Key:' . $this->config['coinbase_api_key'], \n                'X-CC-Version: 2018-03-22'\n            )\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'CB-ACCESS-KEY: ' . $this->config['api_key'],\n            // Additional headers like CB-ACCESS-SIGN, CB-ACCESS-TIMESTAMP, CB-ACCESS-PASSPHRASE would be added here\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception('cURL error: ' . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'CB-ACCESS-KEY: ' . $this->config['api_key'],\n            'CB-VERSION: 2023-04-09'\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'CB-ACCESS-KEY: ' . $this->config['api_key'],\n            // Additional headers can be added here if needed\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception('cURL Error: ' . $error);\n        }\n\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase {\n    private $config;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost(string $url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'CB-ACCESS-KEY: ' . $this->config['api_key'],\n            // Additional headers can be added here if needed\n        ]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Timeout after 30 seconds\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            // Handle error\n            $error_msg = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: \" . $error_msg);\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for timeout, headers, and SSL verification.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes custom configurations such as a user agent header, disabled SSL verification, and a connection timeout. The function returns the response content from the requested URL.\n\nInput: \n- $url (string): The URL to which the HTTP GET request will be made.\n\nOutput: \n- string: The content returned from the HTTP request. Returns false if the request fails.",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a PHP class that interacts with the Coinbase API to handle payment processing using cURL for HTTP requests.\n\nClass Description: The Coinbase class implements the PaymentInterface and provides functionality to make POST requests to the Coinbase API. It handles API key authentication and request configuration.\n\nAttributes:\n- config: [array] - Stores the configuration settings including the Coinbase API key.\n\nMethods:\n- __construct($config): [void] - Initializes the class with the provided configuration.\n  - Input: $config [array] - Configuration array containing API credentials\n  - Output: None\n\n- _curlPost($url, $params = false): [mixed] - Makes a POST request to the specified URL with optional parameters.\n  - Input: \n    - $url [string] - The API endpoint URL\n    - $params [mixed|false] - Optional request payload parameters\n  - Output: [mixed] - The API response or false on failure",
    "Canonical_solution": "namespace App\\Payments;\n\nuse App\\Contracts\\PaymentInterface;\nuse App\\Exceptions\\ApiException;\n\nclass Coinbase implements PaymentInterface\n{\n    protected $config;\n    public function __construct($config)\n    {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch,\n            CURLOPT_HTTPHEADER,\n            array('X-CC-Api-Key:' . $this->config['coinbase_api_key'], 'X-CC-Version: 2018-03-22')\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\n\ninterface PaymentInterface {\n    public function _curlPost($url, $params = false);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->config['api_key'],\n            'Content-Type: application/x-www-form-urlencoded'\n        ]);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "<?php\n\ninterface PaymentInterface {\n    public function _curlPost($url, $params = false);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "<?php\n\ninterface PaymentInterface {\n    public function __construct($config);\n    public function _curlPost($url, $params = false);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "<?php\n\ninterface PaymentInterface {\n    public function _curlPost($url, $params = false);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n\n        $response = curl_exec($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            return false;\n        }\n\n        return json_decode($response, true);\n    }\n}",
      "<?php\n\ninterface PaymentInterface {\n    public function _curlPost($url, $params = false);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->config['api_key'],\n            'Content-Type: application/x-www-form-urlencoded'\n        ]);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "<?php\n\ninterface PaymentInterface {\n    public function _curlPost($url, $params = false);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "<?php\n\ninterface PaymentInterface {\n    public function __construct($config);\n}\n\nclass Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: Bearer ' . $this->config['api_key']\n        ]);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n        }\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}",
      "class Coinbase implements PaymentInterface {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    private function _curlPost($url, $params = false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        if ($params) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->config['api_key'],\n            'Content-Type: application/x-www-form-urlencoded'\n        ]);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            return false;\n        }\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement a class for interacting with a pretreatment API service that handles task processing and querying, using HTTP requests with Guzzle client in PHP.\n\nClass Description: The Pretreat class provides functionality to submit tasks for processing and query their status through an API service. It handles request signing, parameter preparation, and response processing.\n\nAttributes:\n\nAttribute1: Config $config - Configuration object containing service settings like timeout, service name, and endpoint URLs\n\nMethods:\n\nMethod1: __construct(Config $config) -> void - Initializes the Pretreat instance with configuration. Throws an exception if processNotifyUrl is not configured.\n\nMethod2: process(array $tasks, array $optionalParams = []) -> array - Submits tasks for processing. Takes an array of tasks and optional parameters, returns the API response as an associative array.\n\nMethod3: query(array $taskIds, string $path) -> array|bool - Queries the status of tasks by their IDs. Returns an array of tasks if successful, or false on failure.",
    "Canonical_solution": "namespace Upyun\\Api;\n\nuse GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\nuse Upyun\\Util;\n\nclass Pretreat\n{\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        if (!$config->processNotifyUrl) {\n            throw new \\Exception(\"should config prosessNotifyUrl first.\");\n        }\n        $this->config = $config;\n    }\n\n    public function process($tasks, $optionalParams = array())\n    {\n        $encodedTasks = Util::base64Json($tasks);\n\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'notify_url' => $this->config->processNotifyUrl,\n            'tasks' => $encodedTasks,\n        );\n\n        $params = array_merge($params, $optionalParams);\n\n        $path = '/pretreatment/';\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'form_params' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n\n    public function query($taskIds, $path)\n    {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $params = array(\n            'service' => $this->config->serviceName,\n            'task_ids' => implode(',', $taskIds)\n        );\n        $path = $path . '?' . http_build_query($params);\n\n        $method = 'GET';\n        $url = $this->config->getPretreatEndPoint() . $path;\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders\n        ]);\n\n        if ($response->getStatusCode() === 200) {\n            $body = $response->getBody()->getContents();\n            $result = json_decode($body, true);\n            if (is_array($result)) {\n                return $result['tasks'];\n            }\n        }\n        return false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [],
    "unmatched_results": [
      "<?php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout'  => $this->config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post('/process', [\n                'json' => $params,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest($params)\n                ]\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest(['task_ids' => $taskIds])\n                ]\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function signRequest(array $data): string {\n        // Placeholder for request signing logic\n        return hash_hmac('sha256', json_encode($data), $this->config->secretKey);\n    }\n}",
      "<?php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout'  => $this->config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post($this->config->service . '/process', [\n                'json' => $params,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest($params)\n                ]\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path) {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest(['task_ids' => $taskIds])\n                ]\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function signRequest(array $data): string {\n        // Implement request signing logic here\n        return hash_hmac('sha256', json_encode($data), $this->config->secretKey);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout'  => $this->config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post($this->config->service . '/process', [\n                'json' => $params,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path) {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n}",
      "<?php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'timeout' => $this->config->timeout,\n            'base_uri' => $this->config->endpoint,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post('/process', [\n                'json' => $params,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout'  => $this->config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post('/process', [\n                'json' => $params,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest($params)\n                ]\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest(['task_ids' => $taskIds])\n                ]\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function signRequest(array $data): string {\n        // Placeholder for request signing logic\n        return hash_hmac('sha256', json_encode($data), $this->config->secretKey);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'timeout' => $this->config->timeout,\n            'base_uri' => $this->config->endpointUrl,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post('/process', [\n                'json' => $params,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest($params),\n                ],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path) {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest(['task_ids' => $taskIds]),\n                ],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function signRequest(array $data): string {\n        // Placeholder for request signing logic\n        return hash_hmac('sha256', json_encode($data), $this->config->secretKey);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'timeout' => $this->config->timeout,\n            'base_uri' => $this->config->endpoint,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post('/process', [\n                'json' => $params,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout'  => $this->config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = [\n            'json' => array_merge(['tasks' => $tasks], $optionalParams),\n        ];\n        try {\n            $response = $this->client->post($this->config->service . '/process', $params);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path) {\n        $query = ['task_ids' => implode(',', $taskIds)];\n        try {\n            $response = $this->client->get($path, ['query' => $query]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n}",
      "<?php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'timeout' => $this->config->timeout,\n            'base_uri' => $this->config->endpointUrl,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        try {\n            $response = $this->client->post('/process', [\n                'json' => $params,\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest($params),\n                ],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return ['error' => $e->getMessage()];\n        }\n    }\n\n    public function query(array $taskIds, string $path) {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n                'headers' => [\n                    'Authorization' => 'Bearer ' . $this->signRequest(['task_ids' => $taskIds]),\n                ],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n\n    private function signRequest(array $data): string {\n        // Placeholder for request signing logic\n        return hash_hmac('sha256', json_encode($data), $this->config->apiKey);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass Pretreat {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        if (empty($this->config->processNotifyUrl)) {\n            throw new \\InvalidArgumentException('processNotifyUrl is not configured');\n        }\n        $this->client = new Client([\n            'base_uri' => $this->config->endpoint,\n            'timeout'  => $this->config->timeout,\n        ]);\n    }\n\n    public function process(array $tasks, array $optionalParams = []): array {\n        $params = array_merge(['tasks' => $tasks], $optionalParams);\n        $response = $this->client->post('/process', [\n            'json' => $params,\n        ]);\n        return json_decode($response->getBody(), true);\n    }\n\n    public function query(array $taskIds, string $path): array|bool {\n        try {\n            $response = $this->client->get($path, [\n                'query' => ['task_ids' => implode(',', $taskIds)],\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            return false;\n        }\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a PHP function that downloads a file from a specified URL and saves it to a local file using cURL.\n\nFunction Description: The function `http_fetch` uses PHP's cURL library to make an HTTP request to a specified URL and writes the response directly to a local file. It includes custom headers (User-Agent and Referer) to mimic a browser request and handles the cURL session lifecycle properly.\n\nInput:\n- `$url` (string): The URL of the resource to download\n- `$filename` (string): The local file path where the downloaded content should be saved\n\nOutput:\n- The function does not explicitly return a value, but it writes the downloaded content to the specified file\n- The cURL session information is captured in `$ret` but not returned (could be modified to return this if needed)",
    "Canonical_solution": "function http_fetch($url, $filename)\n{\n    $fh = fopen($filename, 'w');\n\n    $options = array(\n        CURLOPT_FILE    => $fh,\n        CURLOPT_TIMEOUT => 60,\n        CURLOPT_URL     => $url,\n    );\n\n    $options[CURLOPT_HTTPHEADER] = array(\n        'Referer: https://www.facebook.com/',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    );\n\n    $ch = curl_init();\n    curl_setopt_array($ch, $options);\n    curl_exec($ch);\n    $ret = curl_getinfo($ch);\n    curl_close($ch);\n\n    fclose($fh);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction http_fetch($url, $filename) {\n    $ch = curl_init();\n    $fp = fopen($filename, 'wb');\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.com');\n\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.google.com/');\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $ch = curl_init();\n    $fp = fopen($filename, 'wb');\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.example.com');\n\n    $ret = curl_exec($ch);\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.com');\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.com');\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.example.com');\n    curl_exec($ch);\n    $ret = curl_getinfo($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.example.com');\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.example.com');\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $fp = fopen($filename, 'w');\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.example.com');\n    $ret = curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction http_fetch($url, $filename) {\n    $ch = curl_init();\n    $fp = fopen($filename, 'wb');\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.example.com');\n\n    $ret = curl_exec($ch);\n\n    curl_close($ch);\n    fclose($fp);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Implement a PHP class for sending notifications through the Pushover.net API using cURL for HTTP requests.\n\nClass Description: The Notifications_Pushover class implements push notification functionality through the Pushover.net service. It handles authentication, message formatting, and API communication to send notifications with different severity levels.\n\nAttributes:\n- token: string - The API token/key for Pushover.net authentication\n- user: string - The user key for Pushover.net authentication\n- priorities: static array - Mapping of priority levels to their string representations\n\nMethods:\n- __construct(string $token, string $user) -> void - Initializes the class with API credentials\n- static getName() -> string - Returns the service name \"pushover.net\"\n- static getParameters() -> array - Returns required configuration parameters for the service\n- notify(string $message, string $severity = 'info', ?string $event = null) -> void - Sends a notification with the given message, severity level, and optional event title",
    "Canonical_solution": "class Notifications_Pushover implements IPushNotification {\n    private $token;\n    private $user;\n    public function __construct($token, $user){\n        $this->token = $token;\n        $this->user = $user;\n    }\n    \n    static $priorities = array(\n        0 => 'info',\n        1 => 'warning',\n        2 => 'error',\n    );\n    \n    public static function getName(){\n        return \"pushover.net\";\n    }\n    \n    public static function getParameters(){\n        return array(\n            'token' => 'API Token/Key',\n            'user' => 'Your User Key',\n        );\n    }\n    \n    public function notify($message, $severity = 'info', $event = null){\n        curl_setopt_array($ch = curl_init(), array(\n            CURLOPT_URL => \"https://api.pushover.net/1/messages.json\",\n            CURLOPT_POST => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_POSTFIELDS => http_build_query($data = array(\n                \"token\" => $this->token,\n                \"user\" => $this->user,\n                \"message\" => $code = strip_tags(preg_replace('/<([\\/]?)span[^>]*>/i', '<\\1b>', $message), \"<b><i><u><a><font><p><br>\"),\n                \"title\" => strip_tags($event),\n                \"priority\" => (int)array_search($severity, self::$priorities),\n                \"timestamp\" => time(),\n                \"html\" => preg_match('/<[^>]+>/', $code),\n            )),\n        ));\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    public static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    private static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        if (!array_key_exists($severity, self::$priorities)) {\n            throw new InvalidArgumentException(\"Invalid severity level\");\n        }\n\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => self::$priorities[$severity]\n        ];\n\n        if ($event !== null) {\n            $data['title'] = $event;\n        }\n\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    private static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, \"https://api.pushover.net/1/messages.json\");\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    public static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event !== null) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    public static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event !== null) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    public static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    private static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    private static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event !== null) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    public static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, \"https://api.pushover.net/1/messages.json\");\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}",
      "class Notifications_Pushover {\n    private $token;\n    private $user;\n    private static $priorities = [\n        'emergency' => 2,\n        'high' => 1,\n        'normal' => 0,\n        'low' => -1,\n        'lowest' => -2,\n        'info' => 0,\n        'success' => 0,\n        'warning' => 1,\n        'error' => 2\n    ];\n\n    public function __construct(string $token, string $user) {\n        $this->token = $token;\n        $this->user = $user;\n    }\n\n    public static function getName(): string {\n        return \"pushover.net\";\n    }\n\n    public static function getParameters(): array {\n        return ['token', 'user'];\n    }\n\n    public function notify(string $message, string $severity = 'info', ?string $event = null): void {\n        $priority = self::$priorities[$severity] ?? 0;\n        $data = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'priority' => $priority\n        ];\n        if ($event) {\n            $data['title'] = $event;\n        }\n        $ch = curl_init('https://api.pushover.net/1/messages.json');\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: The task involves creating PHP functions to interact with a logistics tracking API (kuaidi100.com) to retrieve shipping company information and tracking data for a given tracking number.\n\nFunction Description: The code consists of three functions that work together to:\n1. Identify the logistics company from a tracking number\n2. Retrieve tracking details for the shipment\n3. Generate random IP addresses for request headers\n\nInput: \n- For get_company(): A string representing the tracking number ($text)\n- For get_data(): Two strings - tracking number ($text) and company code ($com)\n- For Rand_IP(): No input parameters\n\nOutput:\n- get_company(): Returns a string representing the logistics company code\n- get_data(): Returns a JSON string containing the tracking information\n- Rand_IP(): Returns a string representing a randomly generated IP address\n\nMethods:\n1. get_company($text) -> string - Identifies the logistics company from a tracking number by making an HTTP request to kuaidi100.com's autocomplete API and extracting the company code from the response.\n2. get_data($text, $com) -> string - Retrieves tracking details for a given tracking number and company code by making an HTTP request to kuaidi100.com's query API.\n3. Rand_IP() -> string - Generates a random IP address to be used in request headers for bypassing potential IP-based restrictions.\n\nNote: The functions use cURL for HTTP requests with specific headers and options, including SSL verification disabled, custom user agent, and random IP addresses in headers to mimic browser requests.",
    "Canonical_solution": "function get_compary($text) {\n    $headerArray = array(\"Accept-Language: zh-CN,zh;q=0.8\",\"Cache-Control: no-cache\",\"Host:www.kuaidi100.com\",\"Referer:https://www.kuaidi100.com/\");\n    $curl = curl_init();\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\".$text;\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_HTTPHEADER, array('X-FORWARDED-FOR:'.Rand_IP(), 'CLIENT-IP:'.Rand_IP()));\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST,FALSE);\n    curl_setopt($curl, CURLOPT_USERAGENT,\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\");\n    curl_setopt($curl, CURLOPT_POST, 0);\n    curl_setopt($curl,CURLOPT_HTTPHEADER,$headerArray);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    $output = curl_exec($curl);\n    curl_close($curl);\n    preg_match_all('#\"comCode\":\"(.*?)\"#',$output,$match);\n    $company = $match[1][1];\n    return $company;\n}\n\nfunction get_data($text,$com) {\n    $rand = mt_rand(1111111111111111, 8888888888888888);\n    $temp =  '0.' . $rand;\n    $headerArray = array(\"Accept: application/json, text/javascript, */*; q=0.01\",\"Cache-Control: no-cache\",\"Host:www.kuaidi100.com\",\"Referer:https://www.kuaidi100.com/?from=openv\",\"Cookie: csrftoken=C8eAjWh2fyDqqOSMlSmKaJdMqtjW8iLLOIBsUmMsgHE; WWWID=WWW8A873C08880109D493D45E7B86FC5583; Hm_lvt_22ea01af58ba2be0fec7c11b25e88e6c=1574823124,1574827551; MOBID=B53E32216F579899AC3BF9579DF8E2C5; Hm_lpvt_22ea01af58ba2be0fec7c11b25e88e6c=1574827564\");\n    $curl = curl_init();\n    $url = \"https://www.kuaidi100.com/query?type=\".$com.\"&postid=\".$text.\"&temp=\".$temp.\"&phone=\";\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_HTTPHEADER, array('X-FORWARDED-FOR:'.Rand_IP(), 'CLIENT-IP:'.Rand_IP()));\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST,FALSE);\n    curl_setopt($curl, CURLOPT_USERAGENT,\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\");\n    curl_setopt($curl, CURLOPT_POST, 0);\n    curl_setopt($curl,CURLOPT_HTTPHEADER,$headerArray);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    $output = curl_exec($curl);\n    curl_close($curl);\n    return $output;\n}\n\nfunction Rand_IP() {\n    $ip2id= round(rand(600000, 2550000) / 10000);\n    $ip3id= round(rand(600000, 2550000) / 10000);\n    $ip4id= round(rand(600000, 2550000) / 10000);\n    $arr_1 = array(\"218\",\"218\",\"66\",\"66\",\"218\",\"218\",\"60\",\"60\",\"202\",\"204\",\"66\",\"66\",\"66\",\"59\",\"61\",\"60\",\"222\",\"221\",\"66\",\"59\",\"60\",\"60\",\"66\",\"218\",\"218\",\"62\",\"63\",\"64\",\"66\",\"66\",\"122\",\"211\");\n    $randarr= mt_rand(0,count($arr_1)-1);\n    $ip1id = $arr_1[$randarr];\n    return $ip1id.\".\".$ip2id.\".\".$ip3id.\".\".$ip4id;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $key = 'your_api_key_here'; // Replace with your actual API key\n    $param = ['com' => $com, 'num' => $text];\n    $param = json_encode($param);\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $post_data = \"customer=$key&sign=\" . md5(\"$param$key\") . \"&param=$param\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://poll.kuaidi100.com/poll/querycompany.php\";\n    $data = array(\"text\" => $text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ));\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $result = json_decode($response, true);\n    return isset($result['auto'][0]['comCode']) ? $result['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $key = 'your_api_key_here'; // Replace with your actual API key\n    $param = array('com' => $com, 'num' => $text, 'key' => $key, 'show' => '0', 'muti' => '1', 'order' => 'desc');\n    $post_data = http_build_query($param);\n    $url = \"http://poll.kuaidi100.com/poll/query.do\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ));\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}\n?>",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $post_data = [\n        'com' => $com,\n        'num' => $text,\n        'phone' => '',\n        'from' => '',\n        'to' => ''\n    ];\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}\n?>",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $post_data = [\n        'com' => $com,\n        'num' => $text,\n        'phone' => '',\n        'from' => 'web',\n        'to' => ''\n    ];\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP(),\n        'Client-IP: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $key = 'your_api_key_here'; // Replace with your actual API key\n    $param = ['com' => $com, 'num' => $text];\n    $param = json_encode($param);\n    $sign = md5($param . $key . $param);\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $post_data = \"customer=$key&sign=$sign&param=$param\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP(),\n        'Client-IP: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autocomplete/queryCompany?text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $post_data = [\n        'com' => $com,\n        'num' => $text,\n        'phone' => '',\n        'from' => 'mt',\n        'to' => ''\n    ];\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $key = 'your_api_key_here'; // Replace with your actual API key\n    $param = ['com' => $com, 'num' => $text];\n    $param = json_encode($param);\n    $sign = strtoupper(md5($param . $key));\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $post_data = \"customer=$key&sign=$sign&param=$param\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $post_data = [\n        'com' => $com,\n        'num' => $text,\n        'phone' => '',\n        'from' => 'mt',\n        'to' => ''\n    ];\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autonumber/autoComNum?resultv2=1&text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $key = 'your_api_key_here'; // Replace with your actual API key\n    $param = ['com' => $com, 'num' => $text, 'key' => $key];\n    $post_data = http_build_query($param);\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}",
      "<?php\nfunction get_company($text) {\n    $url = \"https://www.kuaidi100.com/autocomplete/result.do?text=\" . urlencode($text);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    $data = json_decode($response, true);\n    return isset($data['auto'][0]['comCode']) ? $data['auto'][0]['comCode'] : '';\n}\n\nfunction get_data($text, $com) {\n    $key = 'your_api_key_here'; // Replace with your actual API key\n    $param = ['com' => $com, 'num' => $text];\n    $param = json_encode($param);\n    $url = \"https://poll.kuaidi100.com/poll/query.do\";\n    $post_data = \"customer=$key&sign=\" . md5(\"$param$key\") . \"&param=$param\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'X-Forwarded-For: ' . Rand_IP()\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction Rand_IP() {\n    return long2ip(rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255) . '.' . rand(0, 255));\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a PHP class that monitors the availability of a URL by periodically checking its HTTP response code until it meets the desired state (available or unavailable) within a specified timeout period.\n\nClass Description: The URLChecker class provides functionality to wait for a URL to become available (returns HTTP 200) or unavailable (returns non-200) within a given timeout period, using cURL for HTTP requests with configurable polling intervals and connection timeouts.\n\nAttributes:\n- POLL_INTERVAL_MS: int - The interval in milliseconds between consecutive URL checks\n- CONNECT_TIMEOUT_MS: int - The connection timeout in milliseconds for each HTTP request\n\nMethods:\n- waitUntilAvailable(int $timeout_in_ms, string $url) -> self - Waits until the specified URL returns HTTP 200 status code or throws TimeoutException if not achieved within timeout\n- waitUntilUnavailable(int $timeout_in_ms, string $url) -> self - Waits until the specified URL returns non-200 status code or throws TimeoutException if not achieved within timeout\n- getHTTPResponseCode(string $url) -> ?int - Private method that makes the actual HTTP request and returns the response code (null if request fails)",
    "Canonical_solution": "use Exception;\nuse Facebook\\WebDriver\\Exception\\TimeoutException;\n\nclass URLChecker\n{\n    const POLL_INTERVAL_MS = 500;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    public function waitUntilAvailable($timeout_in_ms, $url)\n    {\n        $end = microtime(true) + $timeout_in_ms / 1000;\n\n        while ($end > microtime(true)) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS);\n        }\n\n        throw new TimeoutException(sprintf(\n            'Timed out waiting for %s to become available after %d ms.',\n            $url,\n            $timeout_in_ms\n        ));\n    }\n\n    public function waitUntilUnavailable($timeout_in_ms, $url)\n    {\n        $end = microtime(true) + $timeout_in_ms / 1000;\n\n        while ($end > microtime(true)) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS);\n        }\n\n        throw new TimeoutException(sprintf(\n            'Timed out waiting for %s to become unavailable after %d ms.',\n            $url,\n            $timeout_in_ms\n        ));\n    }\n\n    private function getHTTPResponseCode($url)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        if (!defined('CURLOPT_CONNECTTIMEOUT_MS')) {\n            define('CURLOPT_CONNECTTIMEOUT_MS', 156);\n        }\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n\n        $code = null;\n\n        try {\n            curl_exec($ch);\n            $info = curl_getinfo($ch);\n            $code = $info['http_code'];\n        } catch (Exception $e) {\n        }\n        curl_close($ch);\n\n        return $code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new Exception(\"TimeoutException\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new Exception(\"TimeoutException\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $response_code ?: null;\n    }\n}",
      "class URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}\n\nclass TimeoutException extends Exception {}",
      "class URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}\n\nclass TimeoutException extends Exception {}",
      "<?php\n\nclass TimeoutException extends Exception {}\n\nclass URLChecker {\n    const POLL_INTERVAL_MS = 500;\n    const CONNECT_TIMEOUT_MS = 1000;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}",
      "class URLChecker {\n    const POLL_INTERVAL_MS = 500;\n    const CONNECT_TIMEOUT_MS = 1000;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}\n\nclass TimeoutException extends Exception {}",
      "class URLChecker {\n    const POLL_INTERVAL_MS = 500;\n    const CONNECT_TIMEOUT_MS = 1000;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}\n\nclass TimeoutException extends Exception {}",
      "class URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $http_code ?: null;\n    }\n}\n\nclass TimeoutException extends Exception {}",
      "class URLChecker {\n    const POLL_INTERVAL_MS = 500;\n    const CONNECT_TIMEOUT_MS = 1000;\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $start_time = microtime(true);\n        while (true) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            if ((microtime(true) - $start_time) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_setopt($ch, CURLOPT_TIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $response_code ?: null;\n    }\n}\n\nclass TimeoutException extends Exception {}",
      "<?php\n\nclass TimeoutException extends Exception {}\n\nclass URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $httpCode === 0 ? null : $httpCode;\n    }\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $startTime = microtime(true);\n        while (($currentTime = microtime(true)) - $startTime < $timeout_in_ms / 1000) {\n            if ($this->getHTTPResponseCode($url) === 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n        throw new TimeoutException(\"URL did not become available within the specified timeout.\");\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $startTime = microtime(true);\n        while (($currentTime = microtime(true)) - $startTime < $timeout_in_ms / 1000) {\n            if ($this->getHTTPResponseCode($url) !== 200) {\n                return $this;\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n        throw new TimeoutException(\"URL did not become unavailable within the specified timeout.\");\n    }\n}",
      "<?php\n\nclass TimeoutException extends Exception {}\n\nclass URLChecker {\n    const POLL_INTERVAL_MS = 1000;\n    const CONNECT_TIMEOUT_MS = 500;\n\n    private function getHTTPResponseCode(string $url): ?int {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, self::CONNECT_TIMEOUT_MS);\n        curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $httpCode === 0 ? null : $httpCode;\n    }\n\n    public function waitUntilAvailable(int $timeout_in_ms, string $url): self {\n        $startTime = microtime(true);\n        while (true) {\n            $responseCode = $this->getHTTPResponseCode($url);\n            if ($responseCode === 200) {\n                return $this;\n            }\n            if ((microtime(true) - $startTime) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become available within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n\n    public function waitUntilUnavailable(int $timeout_in_ms, string $url): self {\n        $startTime = microtime(true);\n        while (true) {\n            $responseCode = $this->getHTTPResponseCode($url);\n            if ($responseCode !== 200 && $responseCode !== null) {\n                return $this;\n            }\n            if ((microtime(true) - $startTime) * 1000 >= $timeout_in_ms) {\n                throw new TimeoutException(\"URL did not become unavailable within the timeout period.\");\n            }\n            usleep(self::POLL_INTERVAL_MS * 1000);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL to fetch data from a specified URL.\n\nFunction Description: The function initializes a cURL session, configures it with basic options (disabling SSL verification for simplicity), executes the request, and returns the response. It handles the entire cURL lifecycle from initialization to cleanup.\n\nInput: \n- $url (string): The URL to which the HTTP request will be made.\n\nOutput: \n- Returns the response from the HTTP request as a string if successful, or false on failure.",
    "Canonical_solution": "function make_curl_request($url)\n{\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $res = curl_exec($ch);\n    curl_close($ch);\n    return $res;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function fetchDataWithCurl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataWithCurl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataFromUrl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchData($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction fetchDataFromUrl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataWithCurl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataFromUrl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataWithCurl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataFromUrl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchDataFromUrl($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's API to query fund transfer orders, including request signing and HTTP communication functionality.\n\nClass Description: The AlipayService class provides methods to interact with Alipay's payment API, specifically for querying fund transfer orders. It handles request signing, parameter encoding, and HTTP communication using cURL.\n\nAttributes:\n- appId: string - The application ID provided by Alipay\n- rsaPrivateKey: string - The RSA private key for request signing\n- charset: string - The character encoding to use (default: 'utf-8')\n\nMethods:\n- __construct(string $appid, string $saPrivateKey) -> void - Initializes the service with Alipay app ID and private key\n- doQuery(string $outBizBo='', string $orderId='') -> array - Queries a fund transfer order using either out business number or order ID\n- generateSign(array $params, string $signType='RSA') -> string - Generates a signature for the request parameters\n- sign(string $data, string $signType='RSA') -> string - Signs the given data using the configured private key\n- checkEmpty(mixed $value) -> bool - Checks if a value is empty or null\n- getSignContent(array $params) -> string - Prepares the parameter string for signing\n- characet(string $data, string $targetCharset) -> string - Converts character encoding if needed\n- curlPost(string $url='', mixed $postData='', array $options=[]) -> string - Executes a POST request using cURL",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $rsaPrivateKey;\n    protected $charset;\n\n    public function __construct($appid, $saPrivateKey)\n    {\n        $this->appId = $appid;\n        $this->charset = 'utf-8';\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function doQuery($outBizBo='', $orderId='')\n    {\n        $requestConfigs = array(\n            'out_biz_no'=>$outBizBo,\n            'order_id'=>$orderId,\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'trade_no' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = 'RSA2') {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return !isset($value) || $value === '' || $value === null;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'order_id' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = 'RSA2') {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'trade_no' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = 'RSA2') {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return !isset($value) || $value === '' || $value === null;\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = []) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=utf-8']);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'trade_no' => $orderId\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    private function generateSign($params, $signType = 'RSA2') {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === '' || $value === null;\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=utf-8']);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'trade_no' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = 'RSA2') {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value) && $value !== 0 && $value !== '0';\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=utf-8']);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'order_id' => $orderId\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    private function generateSign($params, $signType = 'RSA2') {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === '' || $value === null;\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'order_id' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = 'RSA2') {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        return base64_encode($sign);\n    }\n\n    public function checkEmpty($value) {\n        return $value === '' || $value === null;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'trade_no' => $orderId\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = 'RSA2') {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value) && $value !== 0 && $value !== '0';\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/x-www-form-urlencoded;charset=' . $this->charset]);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'order_id' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, $params), true);\n    }\n\n    private function generateSign($params, $signType = 'RSA2') {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return $value === '' || $value === null;\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $rsaPrivateKey;\n    private $charset = 'utf-8';\n\n    public function __construct($appId, $rsaPrivateKey) {\n        $this->appId = $appId;\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function doQuery($outBizNo = '', $orderId = '') {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.order.query',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $outBizNo,\n                'order_id' => $orderId\n            ], JSON_UNESCAPED_UNICODE)\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function generateSign($params, $signType = 'RSA2') {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === '' || $value === null;\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            echo 'Error:' . curl_error($ch);\n        }\n        curl_close($ch);\n        return $result;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL with support for GET/POST methods, custom headers, cookies, and SSL configuration.\n\nFunction Description: The function should make HTTP requests to a specified URL with optional cookies and user agent. It should handle both HTTP and HTTPS protocols, with configurable SSL verification. The function should follow redirects (302 status) and return the response data or false on failure. Timeouts should be configurable for connection and request execution.\n\nInput:\n- $url: string - The target URL for the HTTP request\n- $cookies: string (optional) - Cookie string to be sent with the request\n- $useragent: string (optional) - User-Agent header value\n- $method: string (optional) - HTTP method ('GET' or 'POST'), defaults to 'GET'\n\nOutput:\n- Returns: mixed - The response data as string on success (HTTP 200), follows redirects automatically (HTTP 302), or returns false on failure",
    "Canonical_solution": "function download($url, $cookies='', $useragent='', $method = 'GET')\n{\n    $header = array(\n        \"Content-Type:application/x-www-form-urlencoded\",\n        'User-Agent: '.$useragent);\n    $ch = curl_init();\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n    }\n    if (stripos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_SSLVERSION, 1);\n    }\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 600);\n    $data = curl_exec($ch);\n    $status = curl_getinfo($ch);\n    curl_close($ch);\n    if (isset($status['http_code']) && $status['http_code'] == 200) {\n        return $data;\n    }\n    if (isset($status['http_code']) && $status['http_code'] == 302) {\n        return download($status['redirect_url'], $cookies, $useragent);\n    }\n    return $data;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $postData = null, $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        if (!is_null($postData)) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return $httpCode == 200 ? $response : false;\n}",
      "function http_request($url, $cookies = '', $useragent = '', $method = 'GET', $data = null, $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        if (!is_null($data)) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        }\n    }\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $postData = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if (strtoupper($method) === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($httpCode !== 200) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $data = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode !== 200) {\n        return false;\n    }\n\n    return $response;\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $data = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return $httpCode === 200 ? $response : false;\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $postData = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n    }\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode !== 200) {\n        return false;\n    }\n\n    return $response;\n}",
      "function http_request($url, $cookies = '', $useragent = '', $method = 'GET', $data = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode !== 200) {\n        return false;\n    }\n\n    return $response;\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $postData = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if ($httpCode !== 200) {\n        $response = false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $data = [], $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    return $httpCode == 200 ? $response : false;\n}",
      "function httpRequest($url, $cookies = '', $useragent = '', $method = 'GET', $postData = null, $sslVerify = true, $connectTimeout = 10, $timeout = 30) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $connectTimeout);\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $sslVerify);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, $sslVerify ? 2 : 0);\n\n    if (!empty($cookies)) {\n        curl_setopt($ch, CURLOPT_COOKIE, $cookies);\n    }\n\n    if (!empty($useragent)) {\n        curl_setopt($ch, CURLOPT_USERAGENT, $useragent);\n    }\n\n    if ($method === 'POST') {\n        curl_setopt($ch, CURLOPT_POST, true);\n        if (!is_null($postData)) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        }\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if ($httpCode !== 200) {\n        $response = false;\n    }\n\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL for making GET and POST requests to external APIs, with basic error handling and resource management.\n\nClass Description: The ApiExceptAuthController class is designed to handle HTTP requests to external APIs using PHP's cURL library. It provides methods for making GET and POST requests with basic configuration options and error handling. The class is initialized with a Request object and maintains it as an instance variable.\n\nAttributes:\n- api_controller: [mixed] - Reserved for potential future use to reference an API controller instance\n- request: [Illuminate\\Http\\Request] - The HTTP request object injected during instantiation\n\nMethods:\n- __construct(Request $request) -> [void] - Initializes the class with the given HTTP request object\n- callGetApi(string $url) -> [string|bool] - Makes a GET request to the specified URL and returns the response or false on failure\n- callPostApi(string $url, mixed $data) -> [string|bool] - Makes a POST request to the specified URL with the given data and returns the response or false on failure",
    "Canonical_solution": "use Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\n\nclass ApiExceptAuthController\n{\n    public $api_controller;\n    public $request;\n\n    public function __construct(Request $request)\n    {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url)\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HEADER, 0);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($curl);\n\n        if (curl_errno($curl)) {\n            //echo 'error:' . curl_error($curl);\n        }\n\n        return $response;\n        curl_close($curl);\n    }\n\n    public function callPostApi($url, $data)\n    {\n        $curl = curl_init($url);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HEADER, 0);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n        $response = curl_exec($curl);\n\n        if (curl_errno($curl)) {\n            echo 'error:'.curl_error($curl);\n        }\n\n        return $response;\n        curl_close($curl);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct(\\Illuminate\\Http\\Request $request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi(string $url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi(string $url, $data) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct(\\Illuminate\\Http\\Request $request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct(\\Illuminate\\Http\\Request $request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi(string $url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi(string $url, $data) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct($request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct(\\Illuminate\\Http\\Request $request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi(string $url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi(string $url, $data) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct($request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct(\\Illuminate\\Http\\Request $request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct($request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct($request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class ApiExceptAuthController {\n    private $api_controller;\n    private $request;\n\n    public function __construct(\\Illuminate\\Http\\Request $request) {\n        $this->request = $request;\n    }\n\n    public function callGetApi($url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function callPostApi($url, $data) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            curl_close($ch);\n            return false;\n        }\n        curl_close($ch);\n        return $response;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP POST request to a specified API endpoint to fetch content using cURL, with appropriate headers and request parameters.\n\nFunction Description: The function `curl_pipigaoxiao` initiates a cURL session to send a POST request to the 'http://h5.ippzone.com/ppapi/share/fetch_content' endpoint. It sets necessary headers including Content-Type, Origin, and User-Agent, along with a Referer header. The function sends JSON-formatted POST data containing a post ID and type, then returns the response from the server.\n\nInput: \n- `$id` (string|integer): The post ID to be included in the request payload\n\nOutput:\n- `$data` (string): The raw HTTP response including headers and body from the API endpoint",
    "Canonical_solution": "function curl_pipigaoxiao($id)\n{\n    $cl = curl_init();\n    curl_setopt($cl, CURLOPT_URL, 'http://h5.ippzone.com/ppapi/share/fetch_content');\n    curl_setopt($cl, CURLOPT_HEADER, 1);\n    curl_setopt($cl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($cl, CURLOPT_HTTPHEADER, array(\n        'Content-Type: application/json;charset=utf-8',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'\n    ));\n    curl_setopt($cl, CURLOPT_REFERER, 'http://h5.ippzone.com/pp/post/78266943052');\n    curl_setopt($cl, CURLOPT_POST, 1);\n    $post_data = \"{\\\"pid\\\":\".$id.\",\\\"type\\\":\\\"post\\\",\\\"mid\\\":null}\";\n    curl_setopt($cl, CURLOPT_POSTFIELDS, $post_data);\n    $data = curl_exec($cl);\n    curl_close($cl);\n    return $data;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 1]);\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://h5.ippzone.com/'\n    ]);\n    \n    $data = curl_exec($ch);\n    curl_close($ch);\n    \n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 'content']);\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://h5.ippzone.com/'\n    ]);\n    \n    $data = curl_exec($ch);\n    curl_close($ch);\n    \n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 1]);\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://pipigaoxiao.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://pipigaoxiao.com/'\n    ]);\n\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 1]);\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'Referer: http://h5.ippzone.com/',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $data = json_encode(['post_id' => $id, 'type' => 'content']);\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://h5.ippzone.com/'\n    ]);\n    \n    $response = curl_exec($ch);\n    curl_close($ch);\n    \n    return $response;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 1]);\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://h5.ippzone.com/'\n    ]);\n\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $data = json_encode(['post_id' => $id, 'type' => 'content']);\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://pipigaoxiao.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://pipigaoxiao.com/'\n    ]);\n    \n    $response = curl_exec($ch);\n    curl_close($ch);\n    \n    return $response;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 'content']);\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n        'Referer: http://h5.ippzone.com/'\n    ]);\n    \n    $data = curl_exec($ch);\n    curl_close($ch);\n    \n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 1]);\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'Referer: http://h5.ippzone.com/',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    return $data;\n}",
      "<?php\nfunction curl_pipigaoxiao($id) {\n    $url = 'http://h5.ippzone.com/ppapi/share/fetch_content';\n    $post_data = json_encode(['postId' => $id, 'type' => 1]);\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Origin: http://h5.ippzone.com',\n        'Referer: http://h5.ippzone.com/',\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    \n    $data = curl_exec($ch);\n    curl_close($ch);\n    \n    return $data;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a PHP class that generates placeholder images by downloading them from a remote HTTP server using either cURL or file operations, with various customization options.\n\nClass Description: The Image class provides functionality to generate placeholder images with customizable dimensions, categories, formats, and other visual properties. It handles the download process using either cURL or file operations depending on server capabilities.\n\nAttributes:\n- BASE_URL: string - Base URL for the placeholder image service\n- FORMAT_JPG: string - Constant for JPG format\n- FORMAT_JPEG: string - Constant for JPEG format  \n- FORMAT_PNG: string - Constant for PNG format\n- categories: array - Available image categories\n\nMethods:\n- image(\n    string|null $dir = null,\n    int $width = 640,\n    int $height = 480,\n    string|null $category = null,\n    bool $fullPath = true,\n    bool $randomize = true,\n    string|null $word = null,\n    bool $gray = false,\n    string $format = 'png'\n  ) -> string|false - Downloads and saves an image with specified parameters, returning the file path or false on failure\n- imageUrl(\n    int $width,\n    int $height,\n    string|null $category,\n    bool $randomize,\n    string|null $word,\n    bool $gray,\n    string $format\n  ) -> string - Generates the URL for the placeholder image (assumed to exist based on reference code)",
    "Canonical_solution": "namespace Faker\\Provider;\n\nclass Image extends Base\n{\n    public const BASE_URL = 'https://via.placeholder.com';\n    public const FORMAT_JPG = 'jpg';\n    public const FORMAT_JPEG = 'jpeg';\n    public const FORMAT_PNG = 'png';\n\n    protected static $categories = [\n        'abstract', 'animals', 'business', 'cats', 'city', 'food', 'nightlife',\n        'fashion', 'people', 'nature', 'sports', 'technics', 'transport',\n    ];\n\n    public static function image(\n        $dir = null,\n        $width = 640,\n        $height = 480,\n        $category = null,\n        $fullPath = true,\n        $randomize = true,\n        $word = null,\n        $gray = false,\n        $format = 'png'\n    ) {\n        $dir = null === $dir ? sys_get_temp_dir() : $dir;\n        if (!is_dir($dir) || !is_writable($dir)) {\n            throw new \\InvalidArgumentException(sprintf('Cannot write to directory \"%s\"', $dir));\n        }\n\n        $name = md5(uniqid(empty($_SERVER['SERVER_ADDR']) ? '' : $_SERVER['SERVER_ADDR'], true));\n        $filename = sprintf('%s.%s', $name, $format);\n        $filepath = $dir . DIRECTORY_SEPARATOR . $filename;\n\n        $url = static::imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n\n        if (function_exists('curl_exec')) {\n            $fp = fopen($filepath, 'w');\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_FILE, $fp);\n            $success = curl_exec($ch) && curl_getinfo($ch, CURLINFO_HTTP_CODE) === 200;\n            fclose($fp);\n            curl_close($ch);\n\n            if (!$success) {\n                unlink($filepath);\n                return false;\n            }\n        } elseif (ini_get('allow_url_fopen')) {\n            $success = copy($url, $filepath);\n            if (!$success) {\n                return false;\n            }\n        } else {\n            return new \\RuntimeException('The image formatter downloads an image from a remote HTTP server. Therefore, it requires that PHP can request remote hosts, either via cURL or fopen()');\n        }\n\n        return $fullPath ? $filepath : $filename;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        'animals',\n        'architecture',\n        'business',\n        'cats',\n        'city',\n        'food',\n        'nature',\n        'people',\n        'sports',\n        'technology',\n        'transport'\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        $filePath = ($dir ? $dir . '/' : '') . basename($url);\n\n        if (!is_dir($dir)) {\n            mkdir($dir, 0777, true);\n        }\n\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n\n        if ($imageData === false) {\n            return false;\n        }\n\n        if (file_put_contents($filePath, $imageData) === false) {\n            return false;\n        }\n\n        return $fullPath ? $filePath : basename($filePath);\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n\n        if ($gray) {\n            $url .= '/gray';\n        }\n\n        if ($category && in_array($category, $this->categories)) {\n            $url .= '?category=' . $category;\n        }\n\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n\n        if ($word) {\n            $url .= '&text=' . urlencode($word);\n        }\n\n        if (in_array($format, [self::FORMAT_JPG, self::FORMAT_JPEG, self::FORMAT_PNG])) {\n            $url .= '.' . $format;\n        }\n\n        return $url;\n    }\n}",
      "class Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        'animals', 'architecture', 'business', 'cats', 'city', 'food', 'nature', 'people', 'sports', 'technology', 'transport'\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        $filePath = rtrim($dir, '/') . '/' . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $data = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $data = file_get_contents($url);\n        }\n        if ($data !== false) {\n            file_put_contents($filePath, $data);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . time();\n        }\n        if ($word) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "<?php\nclass Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        \"animals\",\n        \"architecture\",\n        \"business\",\n        \"cats\",\n        \"city\",\n        \"food\",\n        \"nature\",\n        \"people\",\n        \"sports\",\n        \"technology\",\n        \"transport\"\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false) {\n            file_put_contents($filePath, $imageData);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category !== null && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n        if ($word !== null) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "<?php\nclass Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        \"animals\",\n        \"architecture\",\n        \"business\",\n        \"cats\",\n        \"city\",\n        \"food\",\n        \"nature\",\n        \"people\",\n        \"sports\",\n        \"technology\",\n        \"transport\"\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        if (!is_dir($dir)) {\n            mkdir($dir, 0755, true);\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false) {\n            file_put_contents($filePath, $imageData);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        $params = [];\n        if ($category && in_array($category, $this->categories)) {\n            $params[] = 'category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $params[] = 'random';\n        }\n        if ($word) {\n            $params[] = 'text=' . urlencode($word);\n        }\n        if ($gray) {\n            $params[] = 'grayscale';\n        }\n        if ($format !== self::FORMAT_PNG) {\n            $params[] = 'format=' . $format;\n        }\n        if (!empty($params)) {\n            $url .= '?' . implode('&', $params);\n        }\n        return $url;\n    }\n}",
      "class Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        \"animals\",\n        \"architecture\",\n        \"business\",\n        \"cats\",\n        \"city\",\n        \"food\",\n        \"nature\",\n        \"people\",\n        \"technology\",\n        \"transport\"\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        if (!is_dir($dir)) {\n            mkdir($dir, 0777, true);\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false) {\n            file_put_contents($filePath, $imageData);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n        if ($word) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "<?php\nclass Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        'animals', 'architecture', 'business', 'cats', 'city', 'food', 'nature', 'people', 'technology', 'transport'\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        if (!is_dir($dir)) {\n            mkdir($dir, 0755, true);\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false) {\n            file_put_contents($filePath, $imageData);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n        if ($word) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "<?php\nclass Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        'animals', 'architecture', 'business', 'cats', 'city', 'food', 'nature', 'people', 'sports', 'technics', 'transport'\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        if (!is_dir($dir)) {\n            mkdir($dir, 0777, true);\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false) {\n            file_put_contents($filePath, $imageData);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category !== null && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n        if ($word !== null) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "<?php\nclass Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        \"animals\",\n        \"architecture\",\n        \"business\",\n        \"cats\",\n        \"city\",\n        \"food\",\n        \"nature\",\n        \"people\",\n        \"technology\",\n        \"transport\"\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        if (!is_dir($dir)) {\n            mkdir($dir, 0755, true);\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false) {\n            file_put_contents($filePath, $imageData);\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category !== null && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n        if ($word !== null) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "class Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        'animals',\n        'architecture',\n        'business',\n        'cats',\n        'city',\n        'food',\n        'nature',\n        'people',\n        'sports',\n        'technology',\n        'transport'\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        if ($dir === null) {\n            $dir = sys_get_temp_dir();\n        }\n        if (!is_dir($dir)) {\n            mkdir($dir, 0777, true);\n        }\n        $filePath = $dir . DIRECTORY_SEPARATOR . uniqid() . '.' . $format;\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n        if ($imageData !== false && file_put_contents($filePath, $imageData)) {\n            return $fullPath ? $filePath : basename($filePath);\n        }\n        return false;\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n        if ($gray) {\n            $url .= '/gray';\n        }\n        $url .= '.' . $format;\n        if ($category !== null && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n        if ($word !== null) {\n            $url .= '&text=' . urlencode($word);\n        }\n        return $url;\n    }\n}",
      "class Image {\n    const BASE_URL = \"https://via.placeholder.com/\";\n    const FORMAT_JPG = \"jpg\";\n    const FORMAT_JPEG = \"jpeg\";\n    const FORMAT_PNG = \"png\";\n\n    private $categories = [\n        \"animals\",\n        \"architecture\",\n        \"business\",\n        \"cats\",\n        \"city\",\n        \"food\",\n        \"nature\",\n        \"people\",\n        \"sports\",\n        \"technology\",\n        \"transport\"\n    ];\n\n    public function image(\n        string $dir = null,\n        int $width = 640,\n        int $height = 480,\n        string $category = null,\n        bool $fullPath = true,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = $this->imageUrl($width, $height, $category, $randomize, $word, $gray, $format);\n        $filePath = ($dir ? rtrim($dir, '/') . '/' : '') . basename($url);\n\n        if (function_exists('curl_exec')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n            $imageData = curl_exec($ch);\n            curl_close($ch);\n        } else {\n            $imageData = file_get_contents($url);\n        }\n\n        if ($imageData === false) {\n            return false;\n        }\n\n        if (file_put_contents($filePath, $imageData) === false) {\n            return false;\n        }\n\n        return $fullPath ? $filePath : basename($filePath);\n    }\n\n    public function imageUrl(\n        int $width,\n        int $height,\n        string $category = null,\n        bool $randomize = true,\n        string $word = null,\n        bool $gray = false,\n        string $format = 'png'\n    ) {\n        $url = self::BASE_URL . $width . 'x' . $height;\n\n        if ($gray) {\n            $url .= '/gray';\n        }\n\n        if ($category && in_array($category, $this->categories)) {\n            $url .= '?category=' . urlencode($category);\n        }\n\n        if ($randomize) {\n            $url .= '&random=' . rand();\n        }\n\n        if ($word) {\n            $url .= '&text=' . urlencode($word);\n        }\n\n        if (in_array(strtolower($format), [self::FORMAT_JPG, self::FORMAT_JPEG, self::FORMAT_PNG])) {\n            $url .= '.' . strtolower($format);\n        }\n\n        return $url;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a PHP class that fetches currency conversion rates from an external API and stores them in a repository.\n\nClass Description: The FetchConversionRate class is responsible for retrieving currency conversion rates between a base currency and all other available currencies. It uses Guzzle HTTP client to make requests to an external currency API and stores the results in a conversion rate repository.\n\nAttributes:\n- baseCurrencyId: int - The ID of the base currency for which conversion rates will be fetched\n- currencyRepository: CurrencyRepository - Repository for accessing currency data\n- conversionRateRepository: ConversionRateRepository - Repository for storing conversion rates\n\nMethods:\n- __construct(int $baseCurrencyId) -> void - Constructor that initializes the base currency ID\n- handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) -> void - Main method that executes the conversion rate fetching process:\n  - Retrieves all currencies from the repository\n  - For each target currency, makes an API request to get the conversion rate\n  - Stores or updates the conversion rate in the repository\n  - Skips invalid currencies and handles API request failures gracefully",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Exception;\n\nclass FetchConversionRate\n{\n    protected $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n    }\n\n    public function handle(\n        CurrencyRepository $currencyRepository,\n        ConversionRateRepository $conversionRateRepository\n    ): void {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $baseCurrency = $this->currencyRepository->getById($this->baseCurrencyId);\n\n        if (!$baseCurrency || !$baseCurrency->iso) {\n            return;\n        }\n\n        $client = new Client();\n\n        foreach ($this->currencyRepository->getAll() as $targetCurrency) {\n            if (!$targetCurrency->iso || $baseCurrency->iso === $targetCurrency->iso) {\n                continue;\n            }\n\n            $url = sprintf(\n                'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/%s.json',\n                $baseCurrency->iso_lowercased,\n            );\n\n            try {\n                $response = $client->request('GET', $url);\n                $decoded_response = json_decode($response->getBody(), true);\n                $rate = $decoded_response[$baseCurrency->iso_lowercased][$targetCurrency->iso_lowercased];\n            } catch (Exception) {\n                continue;\n            }\n\n            $this->conversionRateRepository->createOrUpdate(\n                $baseCurrency->id,\n                $targetCurrency->id,\n                $rate\n            );\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass FetchConversionRate\n{\n    private $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n    private $httpClient;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', 'https://api.exchangerate-api.com/v4/latest/' . $currency->getCode());\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$this->currencyRepository->getById($this->baseCurrencyId)->getCode()])) {\n                    $rate = $data['rates'][$this->currencyRepository->getById($this->baseCurrencyId)->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($currency->getId(), $this->baseCurrencyId, $rate);\n                }\n            } catch (RequestException $e) {\n                // Handle API request failure gracefully\n                error_log('API request failed: ' . $e->getMessage());\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass FetchConversionRate\n{\n    private int $baseCurrencyId;\n    private CurrencyRepository $currencyRepository;\n    private ConversionRateRepository $conversionRateRepository;\n    private Client $httpClient;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody()->getContents(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (\\Exception $e) {\n                // Handle API request failure gracefully\n                error_log(\"Failed to fetch conversion rate for currency ID: {$currency->getId()}. Error: {$e->getMessage()}\");\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass FetchConversionRate\n{\n    private int $baseCurrencyId;\n    private CurrencyRepository $currencyRepository;\n    private ConversionRateRepository $conversionRateRepository;\n    private Client $httpClient;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (\\Exception $e) {\n                // Handle API request failure gracefully\n                error_log(\"Failed to fetch conversion rate for currency ID: {$currency->getId()}. Error: {$e->getMessage()}\");\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass FetchConversionRate\n{\n    private $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n    private $client;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->client = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->client->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (RequestException $e) {\n                // Log error or handle it as needed\n                continue;\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass FetchConversionRate\n{\n    private int $baseCurrencyId;\n    private CurrencyRepository $currencyRepository;\n    private ConversionRateRepository $conversionRateRepository;\n    private Client $httpClient;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (\\Exception $e) {\n                // Handle API request failure gracefully\n                error_log(\"Failed to fetch conversion rate for currency ID: {$currency->getId()}. Error: {$e->getMessage()}\");\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass FetchConversionRate {\n    private $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n    private $httpClient;\n\n    public function __construct(int $baseCurrencyId) {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (RequestException $e) {\n                // Handle API request failure gracefully\n                error_log(\"API request failed for currency ID: {$currency->getId()}. Error: \" . $e->getMessage());\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass FetchConversionRate\n{\n    private $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $currencyRepository->getAll();\n        $client = new Client();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $client->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (RequestException $e) {\n                // Handle API request failure\n                error_log(\"API request failed for currency ID: {$currency->getId()} - \" . $e->getMessage());\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass FetchConversionRate {\n    private $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n    private $httpClient;\n\n    public function __construct(int $baseCurrencyId) {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository) {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (RequestException $e) {\n                // Handle API request failure\n                error_log(\"API request failed for currency ID: {$currency->getId()}. Error: \" . $e->getMessage());\n            }\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass FetchConversionRate\n{\n    private int $baseCurrencyId;\n    private CurrencyRepository $currencyRepository;\n    private ConversionRateRepository $conversionRateRepository;\n    private Client $httpClient;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.example.com/convert\", [\n                    'query' => [\n                        'from' => $this->baseCurrencyId,\n                        'to' => $currency->getId(),\n                    ],\n                ]);\n\n                $rate = $this->parseResponse($response);\n                $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n            } catch (\\Exception $e) {\n                // Handle API request failure gracefully\n                error_log(\"Failed to fetch conversion rate for currency ID: {$currency->getId()}. Error: {$e->getMessage()}\");\n            }\n        }\n    }\n\n    private function parseResponse(ResponseInterface $response): float\n    {\n        $data = json_decode($response->getBody()->getContents(), true);\n        return (float)($data['rate'] ?? 0.0);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass FetchConversionRate\n{\n    private $baseCurrencyId;\n    private $currencyRepository;\n    private $conversionRateRepository;\n    private $httpClient;\n\n    public function __construct(int $baseCurrencyId)\n    {\n        $this->baseCurrencyId = $baseCurrencyId;\n        $this->httpClient = new Client();\n    }\n\n    public function handle(CurrencyRepository $currencyRepository, ConversionRateRepository $conversionRateRepository): void\n    {\n        $this->currencyRepository = $currencyRepository;\n        $this->conversionRateRepository = $conversionRateRepository;\n\n        $currencies = $this->currencyRepository->getAll();\n\n        foreach ($currencies as $currency) {\n            if ($currency->getId() === $this->baseCurrencyId) {\n                continue;\n            }\n\n            try {\n                $response = $this->httpClient->request('GET', \"https://api.exchangerate-api.com/v4/latest/{$this->baseCurrencyId}\");\n                $data = json_decode($response->getBody(), true);\n\n                if (isset($data['rates'][$currency->getCode()])) {\n                    $rate = $data['rates'][$currency->getCode()];\n                    $this->conversionRateRepository->storeOrUpdate($this->baseCurrencyId, $currency->getId(), $rate);\n                }\n            } catch (RequestException $e) {\n                // Log the error or handle it as needed\n                continue;\n            }\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a function that retrieves the content of a specified URL using PHP's cURL library, with appropriate settings for handling redirects and mimicking a mobile user agent.\n\nFunction Description: The function uses PHP's cURL functions to make an HTTP request to the specified URL. It configures the cURL session to return the response as a string rather than outputting it directly, follows any redirects, and sets a mobile user agent string to mimic a mobile browser. The function then executes the request, closes the cURL session, and returns the response content.\n\nInput: \n- $url (string): The URL from which to retrieve content\n\nOutput: \n- (string): The content retrieved from the specified URL, or false if the request fails",
    "Canonical_solution": "function GetUrlContent($url)\n{\n    $curl = curl_init($url);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($curl, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16');\n    $res = curl_exec($curl);\n    curl_close($curl);\n    return $res;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $content = false;\n    }\n    curl_close($ch);\n    return $content;\n}",
      "function fetchUrlContent($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1');\n    $content = curl_exec($ch);\n    curl_close($ch);\n    return $content;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a PHP class that implements Alipay payment integration using cURL for HTTP communication with Alipay's API.\n\nClass Description: The AlipayService class provides functionality to interact with Alipay's payment gateway. It handles payment request creation, signing, and communication with Alipay's API endpoints.\n\nAttributes:\n- appId: [string] - The application ID provided by Alipay\n- notifyUrl: [string] - The URL where Alipay will send payment notifications\n- charset: [string] - Character encoding (default: 'utf-8')\n- rsaPrivateKey: [string] - The RSA private key for signing requests\n- totalFee: [float] - The total payment amount\n- outTradeNo: [string] - The merchant's unique order number\n- orderName: [string] - Description of the order\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid(string $appid) -> [void] - Sets the Alipay application ID\n- setNotifyUrl(string $notifyUrl) -> [void] - Sets the notification URL\n- setRsaPrivateKey(string $saPrivateKey) -> [void] - Sets the RSA private key\n- setTotalFee(float $payAmount) -> [void] - Sets the payment amount\n- setOutTradeNo(string $outTradeNo) -> [void] - Sets the merchant order number\n- setOrderName(string $orderName) -> [void] - Sets the order description\n- doPay() -> [array] - Prepares and sends payment request to Alipay, returns response\n- curlPost(string $url, mixed $postData, array $options) -> [string] - Executes cURL POST request to specified URL\n- generateSign(array $params, string $signType) -> [string] - Generates signature for request parameters (implementation not shown in reference code)",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl)\n    {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName)\n    {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay()\n    {\n        $requestConfigs = array(\n            'out_trade_no'=>$this->outTradeNo,\n            'total_amount'=>$this->totalFee,\n            'subject'=>$this->orderName,\n            'timeout_express'=>'2h'\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.precreate',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY',\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!empty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        $stringToBeSigned = rtrim($stringToBeSigned, '&');\n        if ($signType == 'RSA2') {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey, OPENSSL_ALGO_SHA1);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'subject' => $this->orderName,\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY'\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params), []);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'subject' => $this->orderName,\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY'\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!empty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        $stringToBeSigned = rtrim($stringToBeSigned, '&');\n        $pkeyId = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($stringToBeSigned, $sign, $pkeyId, OPENSSL_ALGO_SHA256);\n        openssl_free_key($pkeyId);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'subject' => $this->orderName,\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY'\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {\n        // Initialize with default charset\n    }\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY',\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params), []), true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic\n        // This is a placeholder for the actual implementation\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY',\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'subject' => $this->orderName,\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY'\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY',\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!empty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        $stringToBeSigned = rtrim($stringToBeSigned, '&');\n        if ($signType == 'RSA2') {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY',\n                'total_amount' => $this->totalFee,\n                'subject' => $this->orderName,\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!empty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        $stringToBeSigned = rtrim($stringToBeSigned, '&');\n        if ($signType == 'RSA2') {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.page.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'subject' => $this->orderName,\n                'out_trade_no' => $this->outTradeNo,\n                'total_amount' => $this->totalFee,\n                'product_code' => 'FAST_INSTANT_TRADE_PAY'\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params)), true);\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!empty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        $stringToBeSigned = rtrim($stringToBeSigned, '&');\n        if ($signType == 'RSA2') {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey, OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($stringToBeSigned, $sign, $this->rsaPrivateKey);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL with file writing capabilities, including error handling and response status checking.\n\nClass Description: The timthumb class provides functionality to fetch remote URLs using cURL with controlled file writing, including size limitations and error handling. It falls back to file_get_contents if cURL is not available.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing cURL response data\n- $curlDataWritten: [int] - Tracks the amount of data written during cURL transfer\n- $lastURLError: [string|false] - Stores the last URL fetch error message\n\nMethods:\n- curlWrite($h, $d) -> [int] - Static callback function for cURL write operation that writes data to file and enforces size limits\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data to write\n  - Returns: [int] - Number of bytes written (0 if size limit exceeded)\n\n- getURL($url, $tempfile) -> [bool] - Fetches content from a URL and saves it to a temporary file\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for storing the response\n  - Returns: [bool] - True on success, False on failure\n  - Side effects: Sets $lastURLError on failure, may call set404() or error() methods",
    "Canonical_solution": "class timthumb\n{\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d)\n    {\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if (self::$curlDataWritten > MAX_FILE_SIZE) {\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile)\n    {\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if (function_exists('curl_init')) {\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if (!self::$curlFH) {\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($curl, CURLOPT_HEADER, 0);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt($curl, CURLOPT_MAXREDIRS, 10);\n\n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if ($httpStatus == 404) {\n                $this->set404();\n            }\n            if ($httpStatus == 302) {\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if ($curlResult) {\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents($url);\n            if ($img === false) {\n                $err = error_get_last();\n                if (is_array($err) && $err['message']) {\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if (preg_match('/404/', $this->lastURLError)) {\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if (!file_put_contents($tempfile, $img)) {\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop the transfer\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_exec($ch);\n\n            if (curl_errno($ch)) {\n                $this->lastURLError = curl_error($ch);\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n            fclose($this->curlFH);\n\n            if ($httpCode != 200) {\n                $this->lastURLError = \"HTTP Error: $httpCode\";\n                unlink($tempfile);\n                return false;\n            }\n        } else {\n            $data = @file_get_contents($url);\n            if ($data === false) {\n                $this->lastURLError = \"file_get_contents failed to fetch the URL.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $data);\n            fclose($this->curlFH);\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0;\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_HEADER, false);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $error = curl_error($ch);\n            curl_close($ch);\n\n            fclose($this->curlFH);\n\n            if ($error) {\n                $this->lastURLError = $error;\n                return false;\n            }\n\n            if ($httpCode != 200) {\n                unlink($tempfile);\n                $this->lastURLError = \"HTTP error: $httpCode\";\n                return false;\n            }\n\n            return true;\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed to fetch URL.\";\n                return false;\n            }\n            if (strlen($content) > 1024 * 1024) { // Example size limit: 1MB\n                $this->lastURLError = \"Fetched content exceeds size limit.\";\n                return false;\n            }\n            if (@file_put_contents($tempfile, $content) === false) {\n                $this->lastURLError = \"Failed to write fetched content to temporary file.\";\n                return false;\n            }\n            return true;\n        }\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop the transfer\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            $this->curlFH = fopen($tempfile, 'wb');\n            if (!$this->curlFH) {\n                $this->lastURLError = \"Failed to open temporary file for writing.\";\n                return false;\n            }\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            fclose($this->curlFH);\n            curl_close($ch);\n            if ($httpCode == 404) {\n                $this->set404();\n                return false;\n            } elseif ($httpCode >= 400) {\n                $this->error(\"HTTP Error: $httpCode\");\n                return false;\n            }\n            return true;\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed to fetch the URL.\";\n                return false;\n            }\n            if (strlen($content) > 1024 * 1024) { // Example size limit: 1MB\n                $this->lastURLError = \"Fetched content exceeds size limit.\";\n                return false;\n            }\n            if (@file_put_contents($tempfile, $content) === false) {\n                $this->lastURLError = \"Failed to write to temporary file.\";\n                return false;\n            }\n            return true;\n        }\n    }\n\n    private function set404() {\n        // Handle 404 Not Found\n    }\n\n    private function error($message) {\n        // Handle other errors\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Stop writing data\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            return $this->fallbackGetURL($url, $tempfile);\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($error) {\n            $this->lastURLError = $error;\n            return false;\n        }\n\n        if ($httpCode != 200) {\n            $this->lastURLError = \"HTTP Error: \" . $httpCode;\n            return false;\n        }\n\n        return true;\n    }\n\n    private function fallbackGetURL($url, $tempfile) {\n        $content = @file_get_contents($url);\n        if ($content === false) {\n            $this->lastURLError = \"Failed to fetch URL using file_get_contents.\";\n            return false;\n        }\n\n        if (strlen($content) > 1024 * 1024) { // Example size limit: 1MB\n            $this->lastURLError = \"Content exceeds size limit.\";\n            return false;\n        }\n\n        if (file_put_contents($tempfile, $content) === false) {\n            $this->lastURLError = \"Failed to write to temporary file.\";\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop the transfer\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_exec($ch);\n\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode == 404) {\n                $this->set404();\n            } elseif ($httpCode != 200) {\n                $this->error(\"HTTP error: $httpCode\");\n            }\n\n            $curlError = curl_error($ch);\n            if (!empty($curlError)) {\n                $this->lastURLError = $curlError;\n            }\n\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed.\";\n                fclose($this->curlFH);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return $this->lastURLError === false;\n    }\n\n    private function set404() {\n        // Handle 404 error\n    }\n\n    private function error($message) {\n        // Handle other errors\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Stop writing data\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            $this->curlFH = fopen($tempfile, 'wb');\n            if (!$this->curlFH) {\n                $this->lastURLError = \"Failed to open file for writing.\";\n                return false;\n            }\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_HEADER, false);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode == 404) {\n                $this->set404();\n            } elseif ($httpCode != 200) {\n                $this->error(\"HTTP Error: $httpCode\");\n            }\n            fclose($this->curlFH);\n            curl_close($ch);\n            return $httpCode == 200;\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed.\";\n                return false;\n            }\n            if (strlen($content) > 1024 * 1024) { // Example size limit: 1MB\n                $this->lastURLError = \"File size exceeds limit.\";\n                return false;\n            }\n            if (@file_put_contents($tempfile, $content) === false) {\n                $this->lastURLError = \"Failed to write file.\";\n                return false;\n            }\n            return true;\n        }\n    }\n\n    private function set404() {\n        $this->lastURLError = \"404 Not Found\";\n    }\n\n    private function error($message) {\n        $this->lastURLError = $message;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop the transfer\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Could not open file for writing: $tempfile\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_HEADER, 0);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode == 404) {\n                $this->set404();\n            } elseif ($httpCode != 200) {\n                $this->error(\"HTTP error: $httpCode\");\n            }\n\n            $curlError = curl_error($ch);\n            if ($curlError) {\n                $this->lastURLError = $curlError;\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed for URL: $url\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n\n    private function set404() {\n        $this->lastURLError = \"404 Not Found\";\n    }\n\n    private function error($message) {\n        $this->lastURLError = $message;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = &curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop the transfer\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode == 404) {\n                $this->set404();\n            } elseif ($httpCode != 200) {\n                $this->error(\"HTTP Error: $httpCode\");\n            }\n\n            $curlError = curl_error($ch);\n            if ($curlError) {\n                $this->lastURLError = $curlError;\n            }\n\n            curl_close($ch);\n        } else {\n            $data = @file_get_contents($url);\n            if ($data === false) {\n                $this->lastURLError = \"file_get_contents failed.\";\n                fclose($this->curlFH);\n                return false;\n            }\n            fwrite($this->curlFH, $data);\n        }\n\n        fclose($this->curlFH);\n        return $this->lastURLError === false;\n    }\n\n    private function set404() {\n        // Handle 404 Not Found\n        $this->lastURLError = \"Resource not found.\";\n    }\n\n    private function error($message) {\n        // Handle other errors\n        $this->lastURLError = $message;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Stop writing data\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_HEADER, false);\n\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $error = curl_error($ch);\n            curl_close($ch);\n\n            fclose($this->curlFH);\n\n            if ($error) {\n                $this->lastURLError = $error;\n                return false;\n            }\n\n            if ($httpCode != 200) {\n                unlink($tempfile);\n                $this->lastURLError = \"HTTP Error: $httpCode\";\n                return false;\n            }\n\n            return true;\n        } else {\n            $data = @file_get_contents($url);\n            if ($data === false) {\n                $this->lastURLError = \"file_get_contents failed to fetch the URL.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            if (strlen($data) > 1024 * 1024) { // Example size limit: 1MB\n                $this->lastURLError = \"Fetched data exceeds size limit.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $data);\n            fclose($this->curlFH);\n            return true;\n        }\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Stop writing\n        }\n        $bytesWritten = fwrite($self->curlFH, $d);\n        $self->curlDataWritten += $bytesWritten;\n        return $bytesWritten;\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->lastURLError = false;\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            $this->curlFH = fopen($tempfile, 'wb');\n            if (!$this->curlFH) {\n                $this->lastURLError = \"Could not open file for writing.\";\n                return false;\n            }\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_HEADER, 0);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode == 404) {\n                $this->set404();\n            } elseif ($httpCode != 200) {\n                $this->error(\"HTTP error: $httpCode\");\n            }\n            fclose($this->curlFH);\n            curl_close($ch);\n            if ($httpCode == 200) {\n                return true;\n            }\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === FALSE) {\n                $this->lastURLError = \"file_get_contents failed.\";\n                return false;\n            }\n            if (strlen($content) > 1024 * 1024) { // Example size limit: 1MB\n                $this->lastURLError = \"File size exceeds limit.\";\n                return false;\n            }\n            if (@file_put_contents($tempfile, $content) === FALSE) {\n                $this->lastURLError = \"Could not write to file.\";\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private function set404() {\n        $this->lastURLError = \"404 Not Found\";\n    }\n\n    private function error($message) {\n        $this->lastURLError = $message;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for making HTTP requests with support for various methods (GET, POST, PUT, DELETE, PATCH), custom headers, and request/response logging.\n\nClass Description: The Curl class is an HTTP client implementation that uses PHP's cURL extension to send HTTP requests and handle responses. It supports common HTTP methods, allows configuration of cURL options, handles request headers and parameters, and provides detailed response information including headers, status code, and body.\n\nAttributes:\n\ncurlOptions: [array] - Default cURL options including timeout, SSL verification, redirects, etc.\nrequestArguments: [array] - Stores the current request parameters including URI, method, parameters, and headers.\nrequestHeader: [array] - Default request headers that can be extended or overridden.\nresponseBody: [string] - Stores the response body from the last request.\nresponseHeader: [array] - Stores the response headers from the last request.\nresponseHttpCode: [int] - Stores the HTTP status code from the last request.\nresponseClientError: [string|null] - Stores any cURL error from the last request.\nresponseClientInfo: [array] - Stores cURL info from the last request.\nlogger: [object|null] - Optional logger instance for request/response logging.\n\nMethods:\n\nrequest: [request](string $uri, string $method = 'GET', array $parameters = [], array $headers = [], bool $multipart = false) -> string - Makes an HTTP request to the specified URI with given method, parameters and headers. Returns the response body.\ngetResponse: [getResponse]() -> array - Returns complete request/response information including headers, status code, body, and client info.\nsetCurlOptions: [setCurlOptions](array $curlOptions) -> void - Sets additional cURL options.\nsetLogger: [setLogger](object $logger) -> void - Sets a logger instance for request/response logging.\ngetResponseBody: [getResponseBody]() -> string - Returns the response body from the last request.\ngetResponseHeader: [getResponseHeader]() -> array - Returns the response headers from the last request.\ngetResponseHttpCode: [getResponseHttpCode]() -> int - Returns the HTTP status code from the last request.\ngetResponseClientError: [getResponseClientError]() -> string|null - Returns any cURL error from the last request.\nfetchResponseHeader: [fetchResponseHeader](resource $curl, string $header) -> int - Callback function for processing response headers.\nprepareRequestHeaders: [prepareRequestHeaders]() -> array - Prepares request headers in cURL format.\ngetResponseClientInfo: [getResponseClientInfo]() -> array - Returns cURL info from the last request.\ngetRequestArguments: [getRequestArguments]() -> array - Returns the arguments used for the last request.",
    "Canonical_solution": "namespace Hybridauth\\HttpClient;\n\nclass Curl implements HttpClientInterface\n{\n    protected $curlOptions = [\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_CONNECTTIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => false,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n        CURLINFO_HEADER_OUT => true,\n        CURLOPT_ENCODING => 'identity',\n        CURLOPT_USERAGENT => 'Hybridauth, PHP Social Authentication Library (https://github.com/hybridauth/hybridauth)',\n    ];\n\n    protected $requestArguments = [];\n    protected $requestHeader = [\n        'Accept' => '*/*',\n        'Cache-Control' => 'max-age=0',\n        'Connection' => 'keep-alive',\n        'Expect' => '',\n        'Pragma' => '',\n    ];\n\n    protected $responseBody = '';\n    protected $responseHeader = [];\n    protected $responseHttpCode = 0;\n    protected $responseClientError = null;\n    protected $responseClientInfo = [];\n    protected $logger = null;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false)\n    {\n        $this->requestHeader = array_replace($this->requestHeader, (array)$headers);\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $this->requestHeader,\n        ];\n\n        $curl = curl_init();\n\n        switch ($method) {\n            case 'GET':\n            case 'DELETE':\n                unset($this->curlOptions[CURLOPT_POST]);\n                unset($this->curlOptions[CURLOPT_POSTFIELDS]);\n                $uri = $uri . (strpos($uri, '?') ? '&' : '?') . http_build_query($parameters);\n                if ($method === 'DELETE') {\n                    $this->curlOptions[CURLOPT_CUSTOMREQUEST] = 'DELETE';\n                }\n                break;\n            case 'PUT':\n            case 'POST':\n            case 'PATCH':\n                $body_content = $multipart ? $parameters : http_build_query($parameters);\n                if (isset($this->requestHeader['Content-Type'])\n                    && $this->requestHeader['Content-Type'] == 'application/json'\n                ) {\n                    $body_content = json_encode($parameters);\n                }\n\n                if ($method === 'POST') {\n                    $this->curlOptions[CURLOPT_POST] = true;\n                } else {\n                    $this->curlOptions[CURLOPT_CUSTOMREQUEST] = $method;\n                }\n                $this->curlOptions[CURLOPT_POSTFIELDS] = $body_content;\n                break;\n        }\n\n        $this->curlOptions[CURLOPT_URL] = $uri;\n        $this->curlOptions[CURLOPT_HTTPHEADER] = $this->prepareRequestHeaders();\n        $this->curlOptions[CURLOPT_HEADERFUNCTION] = [$this, 'fetchResponseHeader'];\n\n        foreach ($this->curlOptions as $opt => $value) {\n            curl_setopt($curl, $opt, $value);\n        }\n\n        $response = curl_exec($curl);\n\n        $this->responseBody = $response;\n        $this->responseHttpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        $this->responseClientError = curl_error($curl);\n        $this->responseClientInfo = curl_getinfo($curl);\n\n        if ($this->logger) {\n            $this->logger->debug(sprintf('%s::request( %s, %s ), response:', get_class($this), $uri, $method), $this->getResponse());\n            if (false === $response) {\n                $this->logger->error(sprintf('%s::request( %s, %s ), error:', get_class($this), $uri, $method), [$this->responseClientError]);\n            }\n        }\n\n        curl_close($curl);\n        return $this->responseBody;\n    }\n\n    public function getResponse()\n    {\n        $curlOptions = $this->curlOptions;\n        $curlOptions[CURLOPT_HEADERFUNCTION] = '*omitted';\n        return [\n            'request' => $this->getRequestArguments(),\n            'response' => [\n                'code' => $this->getResponseHttpCode(),\n                'headers' => $this->getResponseHeader(),\n                'body' => $this->getResponseBody(),\n            ],\n            'client' => [\n                'error' => $this->getResponseClientError(),\n                'info' => $this->getResponseClientInfo(),\n                'opts' => $curlOptions,\n            ],\n        ];\n    }\n\n    public function setCurlOptions($curlOptions)\n    {\n        foreach ($curlOptions as $opt => $value) {\n            $this->curlOptions[$opt] = $value;\n        }\n    }\n\n    public function setLogger($logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader()\n    {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode()\n    {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError()\n    {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo()\n    {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments()\n    {\n        return $this->requestArguments;\n    }\n\n    protected function fetchResponseHeader($curl, $header)\n    {\n        $pos = strpos($header, ':');\n        if (!empty($pos)) {\n            $key = str_replace('-', '_', strtolower(substr($header, 0, $pos)));\n            $value = trim(substr($header, $pos + 2));\n            $this->responseHeader[$key] = $value;\n        }\n        return strlen($header);\n    }\n\n    protected function prepareRequestHeaders()\n    {\n        $headers = [];\n        foreach ($this->requestHeader as $header => $value) {\n            $headers[] = trim($header) . ': ' . trim($value);\n        }\n        return $headers;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Curl {\n    private $curlOptions;\n    private $requestArguments;\n    private $requestHeader;\n    private $responseBody;\n    private $responseHeader;\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_SSL_VERIFYPEER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HEADERFUNCTION => [$this, 'fetchResponseHeader']\n        ];\n        $this->requestHeader = [];\n        $this->logger = null;\n    }\n\n    public function request(string $uri, string $method = 'GET', array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers');\n        $ch = curl_init($uri);\n        curl_setopt_array($ch, $this->curlOptions);\n\n        if ($method !== 'GET') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        }\n\n        if (!empty($headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders());\n        }\n\n        if (!empty($parameters)) {\n            if ($method === 'GET') {\n                $uri .= '?' . http_build_query($parameters);\n                curl_setopt($ch, CURLOPT_URL, $uri);\n            } else {\n                if ($multipart) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n                }\n            }\n        }\n\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n\n        if ($this->logger) {\n            $this->logger->log('Request: ' . print_r($this->requestArguments, true));\n            $this->logger->log('Response: ' . print_r([\n                'body' => $this->responseBody,\n                'http_code' => $this->responseHttpCode,\n                'client_info' => $this->responseClientInfo,\n                'client_error' => $this->responseClientError\n            ], true));\n        }\n\n        curl_close($ch);\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError\n        ];\n    }\n\n    public function setCurlOptions(array $curlOptions): void {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger(object $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader(resource $curl, string $header): int {\n        $len = strlen($header);\n        if (strpos($header, ':') !== false) {\n            list($key, $value) = explode(':', $header, 2);\n            $this->responseHeader[trim($key)] = trim($value);\n        }\n        return $len;\n    }\n\n    private function prepareRequestHeaders(): array {\n        $headers = [];\n        foreach ($this->requestArguments['headers'] as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n        CURLOPT_HTTPHEADER => []\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $this->requestHeader = array_merge($this->curlOptions[CURLOPT_HTTPHEADER], $headers);\n        $ch = curl_init($uri);\n\n        if ($multipart) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n        } else {\n            switch (strtoupper($method)) {\n                case 'POST':\n                    curl_setopt($ch, CURLOPT_POST, true);\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n                    break;\n                case 'PUT':\n                case 'PATCH':\n                    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n                    break;\n                case 'DELETE':\n                    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                    if (!empty($parameters)) {\n                        $uri .= '?' . http_build_query($parameters);\n                        curl_setopt($ch, CURLOPT_URL, $uri);\n                    }\n                    break;\n                default:\n                    if (!empty($parameters)) {\n                        $uri .= '?' . http_build_query($parameters);\n                        curl_setopt($ch, CURLOPT_URL, $uri);\n                    }\n            }\n        }\n\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders());\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($this->logger) {\n            $this->logger->log('Request: ' . print_r($this->requestArguments, true));\n            $this->logger->log('Response: ' . print_r($this->getResponse(), true));\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n\n        $name = strtolower(trim($header[0]));\n        if (isset($this->responseHeader[$name])) {\n            $this->responseHeader[$name] .= ',' . trim($header[1]);\n        } else {\n            $this->responseHeader[$name] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function prepareRequestHeaders() {\n        $headers = [];\n        foreach ($this->requestHeader as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 10,\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type: application/json',\n    ];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders($headers));\n        if ($method !== 'GET') {\n            if ($multipart) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log('Request: ' . json_encode($this->requestArguments));\n            $this->logger->log('Response: ' . json_encode($this->getResponse()));\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError,\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $this->responseHeader[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function prepareRequestHeaders($headers) {\n        return array_merge($this->requestHeader, $headers);\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5\n    ];\n    private $requestArguments = [];\n    private $requestHeader = ['Content-Type: application/json'];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders());\n        if ($method !== 'GET') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            if ($multipart) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log($this->getRequestArguments(), $this->getResponse());\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $this->responseHeader[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function prepareRequestHeaders() {\n        $headers = $this->requestHeader;\n        foreach ($this->requestArguments['headers'] as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type: application/json',\n    ];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders($headers));\n        if ($method !== 'GET' && !empty($parameters)) {\n            if ($multipart) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        if (curl_errno($ch)) {\n            $this->responseClientError = curl_error($ch);\n        }\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log('Request: ' . json_encode($this->requestArguments));\n            $this->logger->log('Response: ' . json_encode($this->getResponse()));\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError,\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->responseHeader[$name])) {\n            $this->responseHeader[$name] = trim($header[1]);\n        } else {\n            $this->responseHeader[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function prepareRequestHeaders($headers) {\n        $headers = array_merge($this->requestHeader, $headers);\n        $formattedHeaders = [];\n        foreach ($headers as $key => $value) {\n            if (is_int($key)) {\n                $formattedHeaders[] = $value;\n            } else {\n                $formattedHeaders[] = \"$key: $value\";\n            }\n        }\n        return $formattedHeaders;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type' => 'application/json',\n    ];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders($headers));\n        if ($method !== 'GET') {\n            if ($multipart) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log($this->getRequestArguments(), $this->getResponse());\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError,\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $this->responseHeader[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function prepareRequestHeaders($headers) {\n        $headers = array_merge($this->requestHeader, $headers);\n        $out = [];\n        foreach ($headers as $key => $value) {\n            $out[] = $key . ': ' . $value;\n        }\n        return $out;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type: application/json'\n    ];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        if (!empty($headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders());\n        }\n        if ($method === 'POST' || $method === 'PUT' || $method === 'PATCH') {\n            if ($multipart) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        if (curl_errno($ch)) {\n            $this->responseClientError = curl_error($ch);\n        }\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log($this->getRequestArguments(), $this->getResponse());\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $this->responseHeader[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function prepareRequestHeaders() {\n        $headers = $this->requestHeader;\n        foreach ($this->requestArguments['headers'] as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 10,\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type: application/json',\n    ];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders($headers));\n        if ($method !== 'GET' && !empty($parameters)) {\n            if ($multipart) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log('Request: ' . json_encode($this->requestArguments));\n            $this->logger->log('Response: ' . json_encode($this->getResponse()));\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError,\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $this->responseHeader[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function prepareRequestHeaders($headers) {\n        return array_merge($this->requestHeader, $headers);\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5,\n    ];\n    private $requestArguments = [];\n    private $requestHeader = [\n        'Content-Type' => 'application/json',\n    ];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders());\n        if ($multipart) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n        } else {\n            if ($method === 'POST' || $method === 'PUT' || $method === 'PATCH') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parameters));\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log($this->getRequestArguments(), $this->getResponse());\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError,\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->responseHeader[$name])) {\n            $this->responseHeader[$name] = trim($header[1]);\n        } else {\n            $this->responseHeader[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function prepareRequestHeaders() {\n        $headers = [];\n        foreach ($this->requestArguments['headers'] as $key => $value) {\n            $this->requestHeader[$key] = $value;\n        }\n        foreach ($this->requestHeader as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        return $headers;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}",
      "class Curl {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_SSL_VERIFYPEER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_MAXREDIRS => 5\n    ];\n    private $requestArguments = [];\n    private $requestHeader = ['Content-Type: application/json'];\n    private $responseBody;\n    private $responseHeader = [];\n    private $responseHttpCode;\n    private $responseClientError;\n    private $responseClientInfo;\n    private $logger;\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = compact('uri', 'method', 'parameters', 'headers', 'multipart');\n        $ch = curl_init();\n        curl_setopt_array($ch, $this->curlOptions);\n        curl_setopt($ch, CURLOPT_URL, $uri);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->prepareRequestHeaders($headers));\n        if (!empty($parameters)) {\n            if ($method === 'GET') {\n                $uri .= '?' . http_build_query($parameters);\n                curl_setopt($ch, CURLOPT_URL, $uri);\n            } else {\n                if ($multipart) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($parameters));\n                }\n            }\n        }\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'fetchResponseHeader']);\n        $this->responseBody = curl_exec($ch);\n        $this->responseHttpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->responseClientInfo = curl_getinfo($ch);\n        $this->responseClientError = curl_error($ch);\n        curl_close($ch);\n        if ($this->logger) {\n            $this->logger->log($this->getRequestArguments(), $this->getResponse());\n        }\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_info' => $this->responseClientInfo,\n            'client_error' => $this->responseClientError\n        ];\n    }\n\n    public function setCurlOptions($curlOptions) {\n        $this->curlOptions = array_merge($this->curlOptions, $curlOptions);\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    public function fetchResponseHeader($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $this->responseHeader[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function prepareRequestHeaders($headers) {\n        $headers = array_merge($this->requestHeader, $headers);\n        $formattedHeaders = [];\n        foreach ($headers as $key => $value) {\n            $formattedHeaders[] = is_int($key) ? $value : \"$key: $value\";\n        }\n        return $formattedHeaders;\n    }\n\n    public function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    public function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a function that performs an HTTP request using cURL in PHP, with support for proxy configuration and error handling.\n\nFunction Description: The function makes an HTTP GET request to a specified URL using PHP's cURL library. It includes configuration options for handling redirects, timeouts, SSL verification, and proxy settings. The function returns the content of the response or null if an error occurs.\n\nInput: \n- $encUrl: string - The URL to which the HTTP request will be made\n- $proxy: string|null - (Optional) Proxy server address if proxy is required\n- $proxyAuth: array|null - (Optional) Associative array containing 'user' and 'pwd' keys for proxy authentication\n\nOutput: \n- string|null - Returns the response content as a string if successful, or null if an error occurs",
    "Canonical_solution": "function parse($encUrl)\n{\n    global $proxy;\n    global $proxyAuth;\n    $options = array(\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HEADER         => false,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_ENCODING       => \"\",\n        CURLOPT_USERAGENT      => 'sharrre',\n        CURLOPT_AUTOREFERER    => true,\n        CURLOPT_CONNECTTIMEOUT => 5,\n        CURLOPT_TIMEOUT        => 10,\n        CURLOPT_MAXREDIRS      => 3,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_SSL_VERIFYPEER => false,\n    );\n    $ch = curl_init();\n    \n    if ($proxy != null) {\n        $options[CURLOPT_PROXY] = $proxy;\n        if (isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            $options[CURLOPT_PROXYUSERPWD] = $proxyAuth['user'] . ':' . $proxyAuth['pwd'];\n        }\n    }\n    \n    $options[CURLOPT_URL] = $encUrl;\n    curl_setopt_array($ch, $options);\n\n    $content = curl_exec($ch);\n    $err = curl_errno($ch);\n    $errmsg = curl_error($ch);\n\n    curl_close($ch);\n\n    return $content;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function httpGetRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    if (!$ch) {\n        return null;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function curlRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($encUrl, $proxy = null, $proxyAuth = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $encUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    if ($proxy !== null) {\n        curl_setopt($ch, CURLOPT_PROXY, $proxy);\n        if ($proxyAuth !== null && isset($proxyAuth['user']) && isset($proxyAuth['pwd'])) {\n            curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth['user'] . ':' . $proxyAuth['pwd']);\n        }\n    }\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return null;\n    }\n\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified API endpoint using cURL in PHP, with configurable parameters and SSL verification settings.\n\nFunction Description: The function sends a POST request to a Taobao API endpoint to convert a Taobao share link (tkl) using provided authentication and configuration parameters. It handles SSL verification and returns the API response.\n\nInput:\n- $appkey (string): The application key for API authentication\n- $sid (string): The session ID or user identifier\n- $pid (string): The product ID or parameter\n- $tkl (string): The Taobao share link (tkl) to be converted\n\nOutput:\n- Returns the raw response from the API as a string, or false if the request fails",
    "Canonical_solution": "function reqApi($appkey, $sid, $pid, $tkl)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, \"https://api.zhetaoke.com:10001/api/open_gaoyongzhuanlian_tkl.ashx?appkey=\".$appkey.\"&sid=\".$sid.\"&pid=\".$pid.\"&tkl=\".$tkl.\"&signurl=5\");\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $curl_result = curl_exec($ch);\n    curl_close($ch);\n    return $curl_result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction convertTaobaoShareLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        'method' => 'taobao.tbk.tpwd.convert',\n        'app_key' => $appkey,\n        'session' => $sid,\n        'timestamp' => date('Y-m-d H:i:s'),\n        'format' => 'json',\n        'v' => '2.0',\n        'sign_method' => 'md5',\n        'data' => json_encode(['password' => $tkl, 'pid' => $pid])\n    ];\n\n    ksort($params);\n    $stringToBeSigned = '';\n    foreach ($params as $k => $v) {\n        if ('@' != substr($v, 0, 1)) {\n            $stringToBeSigned .= \"$k$v\";\n        }\n    }\n\n    $stringToBeSigned = $appkey . $stringToBeSigned . $appkey;\n    $sign = strtoupper(md5($stringToBeSigned));\n    $params['sign'] = $sign;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        \"method\" => \"taobao.tbk.tpwd.convert\",\n        \"app_key\" => $appkey,\n        \"session\" => $sid,\n        \"timestamp\" => date(\"Y-m-d H:i:s\"),\n        \"format\" => \"json\",\n        \"v\" => \"2.0\",\n        \"sign_method\" => \"md5\",\n        \"data\" => json_encode([\"password\" => $tkl, \"external_id\" => $pid])\n    ];\n\n    ksort($params);\n    $secret = \"your_secret_key\"; // Replace with your actual secret key\n    $stringToBeSigned = $secret;\n    foreach ($params as $k => $v) {\n        $stringToBeSigned .= \"$k$v\";\n    }\n    $stringToBeSigned .= $secret;\n    $params[\"sign\"] = strtoupper(md5($stringToBeSigned));\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function convertTaobaoShareLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        'method' => 'taobao.tbk.tpwd.convert',\n        'app_key' => $appkey,\n        'session' => $sid,\n        'timestamp' => date('Y-m-d H:i:s'),\n        'format' => 'json',\n        'v' => '2.0',\n        'sign_method' => 'md5',\n        'data' => json_encode(['password' => $tkl, 'pid' => $pid])\n    ];\n    \n    ksort($params);\n    $stringToBeSigned = '';\n    foreach ($params as $k => $v) {\n        $stringToBeSigned .= \"$k$v\";\n    }\n    $stringToBeSigned = $appkey . $stringToBeSigned . $appkey;\n    $params['sign'] = strtoupper(md5($stringToBeSigned));\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    \n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    \n    return $response;\n}",
      "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $data = [\n        'method' => 'taobao.tbk.tpwd.convert',\n        'app_key' => $appkey,\n        'session' => $sid,\n        'timestamp' => date('Y-m-d H:i:s'),\n        'format' => 'json',\n        'v' => '2.0',\n        'sign_method' => 'md5',\n        'fields' => 'data',\n        'password' => $tkl,\n        'adzone_id' => $pid\n    ];\n    \n    ksort($data);\n    $stringToBeSigned = '';\n    foreach ($data as $k => $v) {\n        if ('@' != substr($v, 0, 1)) {\n            $stringToBeSigned .= \"$k$v\";\n        }\n    }\n    $stringToBeSigned = strtoupper(md5($appkey . $stringToBeSigned . $appkey));\n    $data['sign'] = $stringToBeSigned;\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    \n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    \n    return $response;\n}",
      "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        'method' => 'taobao.tbk.tpwd.convert',\n        'app_key' => $appkey,\n        'session' => $sid,\n        'timestamp' => date('Y-m-d H:i:s'),\n        'format' => 'json',\n        'v' => '2.0',\n        'sign_method' => 'md5',\n        'data' => json_encode(['password' => $tkl, 'pid' => $pid])\n    ];\n    \n    ksort($params);\n    $stringToBeSigned = '';\n    foreach ($params as $k => $v) {\n        if ('@' != substr($v, 0, 1)) {\n            $stringToBeSigned .= \"$k$v\";\n        }\n    }\n    $stringToBeSigned = $appkey . $stringToBeSigned . $appkey;\n    $sign = strtoupper(md5($stringToBeSigned));\n    $params['sign'] = $sign;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function convertTaobaoShareLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        \"method\" => \"taobao.tbk.tpwd.convert\",\n        \"app_key\" => $appkey,\n        \"session\" => $sid,\n        \"timestamp\" => date(\"Y-m-d H:i:s\"),\n        \"format\" => \"json\",\n        \"v\" => \"2.0\",\n        \"sign_method\" => \"md5\",\n        \"data\" => json_encode([\"password\" => $tkl, \"pid\" => $pid])\n    ];\n    ksort($params);\n    $stringToBeSigned = \"\";\n    foreach ($params as $k => $v) {\n        $stringToBeSigned .= \"$k$v\";\n    }\n    $secretKey = \"your_secret_key\"; // Replace with your actual secret key\n    $sign = strtoupper(md5($secretKey . $stringToBeSigned . $secretKey));\n    $params[\"sign\"] = $sign;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        \"method\" => \"taobao.tbk.tpwd.convert\",\n        \"app_key\" => $appkey,\n        \"session\" => $sid,\n        \"timestamp\" => date(\"Y-m-d H:i:s\"),\n        \"format\" => \"json\",\n        \"v\" => \"2.0\",\n        \"sign_method\" => \"md5\",\n        \"data\" => json_encode([\"requests\" => [[\"request_id\" => uniqid(), \"url\" => $tkl, \"external_id\" => $pid]]])\n    ];\n    \n    ksort($params);\n    $secret = \"your_secret_key\"; // Replace with your actual secret key\n    $stringToSign = $secret;\n    foreach ($params as $k => $v) {\n        $stringToSign .= $k . $v;\n    }\n    $stringToSign .= $secret;\n    $params[\"sign\"] = strtoupper(md5($stringToSign));\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    \n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    \n    return $response;\n}",
      "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        'method' => 'taobao.tbk.tpwd.convert',\n        'app_key' => $appkey,\n        'session' => $sid,\n        'timestamp' => date('Y-m-d H:i:s'),\n        'format' => 'json',\n        'v' => '2.0',\n        'sign_method' => 'md5',\n        'data' => json_encode(['password' => $tkl, 'pid' => $pid])\n    ];\n    \n    ksort($params);\n    $stringToBeSigned = '';\n    foreach ($params as $k => $v) {\n        if ('@' != substr($v, 0, 1)) {\n            $stringToBeSigned .= \"$k$v\";\n        }\n    }\n    $stringToBeSigned = $appkey . $stringToBeSigned . $appkey;\n    $sign = strtoupper(md5($stringToBeSigned));\n    $params['sign'] = $sign;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function convertTaobaoLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        'method' => 'taobao.tbk.tpwd.convert',\n        'app_key' => $appkey,\n        'session' => $sid,\n        'timestamp' => date('Y-m-d H:i:s'),\n        'format' => 'json',\n        'v' => '2.0',\n        'sign_method' => 'md5',\n        'data' => json_encode(['password' => $tkl, 'external_id' => $pid])\n    ];\n    \n    ksort($params);\n    $stringToBeSigned = '';\n    foreach ($params as $k => $v) {\n        $stringToBeSigned .= \"$k$v\";\n    }\n    $stringToBeSigned = $appkey . $stringToBeSigned . $appkey;\n    $params['sign'] = strtoupper(md5($stringToBeSigned));\n    \n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    \n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    \n    return $response;\n}",
      "function convertTaobaoShareLink($appkey, $sid, $pid, $tkl) {\n    $url = \"https://eco.taobao.com/router/rest\";\n    $params = [\n        \"method\" => \"taobao.tbk.tpwd.convert\",\n        \"app_key\" => $appkey,\n        \"session\" => $sid,\n        \"timestamp\" => date(\"Y-m-d H:i:s\"),\n        \"format\" => \"json\",\n        \"v\" => \"2.0\",\n        \"sign_method\" => \"md5\",\n        \"data\" => json_encode([\"password\" => $tkl, \"pid\" => $pid])\n    ];\n    ksort($params);\n    $secret = \"your_secret_key\"; // Replace with your actual secret key\n    $stringToBeSigned = $secret;\n    foreach ($params as $k => $v) {\n        $stringToBeSigned .= \"$k$v\";\n    }\n    $stringToBeSigned .= $secret;\n    $params['sign'] = strtoupper(md5($stringToBeSigned));\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a PHP class that interacts with the Xiami music API to fetch details about songs, albums, or collections using cURL for HTTP requests.\n\nClass Description: The HermitJson class provides functionality to make HTTP requests to the Xiami API and retrieve JSON responses containing music details. It handles different types of requests (song, album, or collection) through a single method.\n\nAttributes: \n[This class has no explicitly defined attributes in the reference code]\n\nMethods:\n1: xiami_http(int $type, string $id) -> array|bool - Makes an HTTP request to the Xiami API based on the specified type and ID. Returns the decoded JSON response as an array or false on failure.\n   - $type: Integer specifying request type (0 for song, 1 for album, 2 for collection)\n   - $id: String containing the ID of the requested item\n   - Returns: Array containing the API response data or false if the request fails",
    "Canonical_solution": "class HermitJson\n{\n    public function __construct()\n    {\n    }\n\n    private function xiami_http($type, $id)\n    {\n        switch($type){\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&r=song/detail\";\n                break;\n\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&r=album/detail\";\n                break;\n\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&type=collectId&r=collect/detail\";\n                break;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_REFERER, \"http://m.xiami.com/\");\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53');\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        $cexecute = curl_exec($ch);\n        @curl_close($ch);\n\n        if ($cexecute) {\n            $result = json_decode($cexecute, TRUE);\n            return $result;\n        } else {\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&call=song.getinfo&id={$id}\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&call=album.getinfo&id={$id}\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&call=collection.getinfo&id={$id}\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $data;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $urls = [\n            0 => \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=&sig=&r=song/detail\",\n            1 => \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=&sig=&r=album/detail\",\n            2 => \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=&sig=&r=collection/detail\"\n        ];\n\n        if (!isset($urls[$type])) {\n            return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $urls[$type]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        return $data;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=song.get\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.get\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.get\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $data;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=track.get\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.get\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.get\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $data;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=track.get\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.get\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.get\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        return isset($data['data']) ? $data['data'] : false;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=song.getinfo\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.getinfo\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.getinfo\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $data;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=song.getdetail\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.getinfo\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.getinfo\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        return isset($data['result']) ? $data['result'] : false;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=song.getinfo\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.getinfo\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.getinfo\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        return isset($data['result']) ? $data['result'] : false;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=track.get\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.get\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.get\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            return false;\n        }\n\n        return $data;\n    }\n}",
      "class HermitJson {\n    public function xiami_http($type, $id) {\n        $url = '';\n        switch ($type) {\n            case 0:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=song.getinfo\";\n                break;\n            case 1:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=album.getinfo\";\n                break;\n            case 2:\n                $url = \"http://api.xiami.com/web?v=2.0&app_key=1&id={$id}&call=collection.getinfo\";\n                break;\n            default:\n                return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        $data = json_decode($response, true);\n        return $data;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a PHP HTTP client class that handles various types of HTTP requests (GET, POST, DELETE, multipart POST) using cURL, with proper error handling and response processing.\n\nClass Description: The Client class provides static methods to send HTTP requests and process responses. It handles request construction, cURL session management, response parsing, and error handling. The class supports standard HTTP methods and multipart form data for file uploads.\n\nAttributes: (This class has no instance attributes as all methods are static)\n\nMethods:\n\nMethod1: get(string $url, array $headers = array()) -> Response - Sends a GET request to the specified URL with optional headers.\n\nMethod2: delete(string $url, array $headers = array()) -> Response - Sends a DELETE request to the specified URL with optional headers.\n\nMethod3: post(string $url, mixed $body, array $headers = array()) -> Response - Sends a POST request with the given body to the specified URL with optional headers.\n\nMethod4: multipartPost(string $url, array $fields, string $name, string $fileName, string $fileBody, string $mimeType = null, array $headers = array()) -> Response - Sends a multipart/form-data POST request for file upload with additional form fields.\n\nMethod5: sendRequest(Request $request) -> Response - Internal method that executes the cURL request and returns a Response object. Handles request setup, execution, and response processing.\n\nMethod6: userAgent() -> string - Generates a User-Agent string with SDK, system, and PHP version information.\n\nMethod7: parseHeaders(string $raw) -> array - Parses raw HTTP response headers into an associative array.\n\nMethod8: escapeQuotes(string $str) -> string - Escapes quotes in a string for use in HTTP headers.\n\nMethod9: ucwordsHyphen(string $str) -> string - Properly capitalizes hyphenated header names.",
    "Canonical_solution": "namespace Qiniu\\Http;\n\nuse Qiniu\\Config;\nuse Qiniu\\Http\\Request;\nuse Qiniu\\Http\\Response;\n\nfinal class Client\n{\n    public static function get($url, array $headers = array())\n    {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, array $headers = array())\n    {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, array $headers = array())\n    {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(\n        $url,\n        $fields,\n        $name,\n        $fileName,\n        $fileBody,\n        $mimeType = null,\n        array $headers = array()\n    ) {\n        $data = array();\n        $mimeBoundary = md5(microtime());\n\n        foreach ($fields as $key => $val) {\n            array_push($data, '--' . $mimeBoundary);\n            array_push($data, \"Content-Disposition: form-data; name=\\\"$key\\\"\");\n            array_push($data, '');\n            array_push($data, $val);\n        }\n\n        array_push($data, '--' . $mimeBoundary);\n        $finalMimeType = empty($mimeType) ? 'application/octet-stream' : $mimeType;\n        $finalFileName = self::escapeQuotes($fileName);\n        array_push($data, \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$finalFileName\\\"\");\n        array_push($data, \"Content-Type: $finalMimeType\");\n        array_push($data, '');\n        array_push($data, $fileBody);\n\n        array_push($data, '--' . $mimeBoundary . '--');\n        array_push($data, '');\n\n        $body = implode(\"\\r\\n\", $data);\n        $contentType = 'multipart/form-data; boundary=' . $mimeBoundary;\n        $headers['Content-Type'] = $contentType;\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    private static function userAgent()\n    {\n        $sdkInfo = \"QiniuPHP/\" . Config::SDK_VER;\n        $systemInfo = php_uname(\"s\");\n        $machineInfo = php_uname(\"m\");\n        $envInfo = \"($systemInfo/$machineInfo)\";\n        $phpVer = phpversion();\n        $ua = \"$sdkInfo $envInfo PHP/$phpVer\";\n        return $ua;\n    }\n\n    public static function sendRequest($request)\n    {\n        $t1 = microtime(true);\n        $ch = curl_init();\n        $options = array(\n            CURLOPT_USERAGENT => self::userAgent(),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST => $request->method,\n            CURLOPT_URL => $request->url,\n        );\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            $options[CURLOPT_FOLLOWLOCATION] = true;\n        }\n\n        if (!empty($request->headers)) {\n            $headers = array();\n            foreach ($request->headers as $key => $val) {\n                array_push($headers, \"$key: $val\");\n            }\n            $options[CURLOPT_HTTPHEADER] = $headers;\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));\n\n        if (!empty($request->body)) {\n            $options[CURLOPT_POSTFIELDS] = $request->body;\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $t2 = microtime(true);\n        $duration = round($t2 - $t1, 3);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $r = new Response(-1, $duration, array(), null, curl_error($ch));\n            curl_close($ch);\n            return $r;\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = self::parseHeaders(substr($result, 0, $header_size));\n        $body = substr($result, $header_size);\n        curl_close($ch);\n        return new Response($code, $duration, $headers, $body, null);\n    }\n\n    private static function parseHeaders($raw)\n    {\n        $headers = array();\n        $headerLines = explode(\"\\r\\n\", $raw);\n        foreach ($headerLines as $line) {\n            $headerLine = trim($line);\n            $kv = explode(':', $headerLine);\n            if (count($kv) > 1) {\n                $kv[0] =self::ucwordsHyphen($kv[0]);\n                $headers[$kv[0]] = trim($kv[1]);\n            }\n        }\n        return $headers;\n    }\n\n    private static function escapeQuotes($str)\n    {\n        $find = array(\"\\\\\", \"\\\"\");\n        $replace = array(\"\\\\\\\\\", \"\\\\\\\"\");\n        return str_replace($find, $replace, $str);\n    }\n    \n    private static function ucwordsHyphen($str)\n    {\n        return str_replace('- ', '-', ucwords(str_replace('-', '- ', $str)));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf(\"SDK/1.0 (%s; %s; PHP %s)\", php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf('SDK/1.0 (%s; %s; PHP %s)', php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', Client::ucwordsHyphen($key), Client::escapeQuotes($value));\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf('SDK/1.0 (%s; %s; PHP %s)', php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', Client::ucwordsHyphen($key), Client::escapeQuotes($value));\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--$boundary\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n\";\n            $body .= \"$value\\r\\n\";\n        }\n\n        $body .= \"--$boundary\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$fileName\\\"\\r\\n\";\n        if ($mimeType) {\n            $body .= \"Content-Type: $mimeType\\r\\n\";\n        }\n        $body .= \"\\r\\n\";\n        $body .= \"$fileBody\\r\\n\";\n        $body .= \"--$boundary--\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary=$boundary\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $rawHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: $error\");\n        }\n\n        $headers = self::parseHeaders($rawHeaders);\n        return new Response($httpCode, $headers, $responseBody);\n    }\n\n    public static function userAgent() {\n        return sprintf('SDK/1.0 (%s; %s; PHP %s)', php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $headerLines = explode(\"\\r\\n\", trim($raw));\n        foreach ($headerLines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', Client::ucwordsHyphen($key), Client::escapeQuotes($value));\n        }\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n\n    public function __construct($statusCode, $headers, $body) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf(\n            'SDK/%s (%s; %s; PHP %s)',\n            '1.0',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        curl_close($ch);\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf(\n            'SDK/1.0 (%s; %s; PHP %s)',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = array_merge([\n            'User-Agent' => Client::userAgent(),\n        ], $this->headers);\n\n        return array_map(function($key, $value) {\n            return Client::escapeQuotes($key) . ': ' . Client::escapeQuotes($value);\n        }, array_keys($headers), $headers);\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf(\n            'Client/%s (%s; %s; PHP %s)',\n            '1.0',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $formattedHeaders = [];\n        foreach ($this->headers as $key => $value) {\n            $formattedHeaders[] = sprintf('%s: %s', Client::ucwordsHyphen($key), Client::escapeQuotes($value));\n        }\n        return $formattedHeaders;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeadersAsArray());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        $parsedHeaders = self::parseHeaders($responseHeaders);\n        return new Response($httpCode, $responseBody, $parsedHeaders);\n    }\n\n    public static function userAgent() {\n        return sprintf(\"SDK/1.0 (%s; %s; PHP/%s)\", php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeadersAsArray() {\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n        if ($request->getBody()) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        }\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        return new Response($httpCode, $responseBody, self::parseHeaders($responseHeaders));\n    }\n\n    public static function userAgent() {\n        return sprintf(\"SDK/1.0 (%s; %s; PHP %s)\", php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $headerLines = explode(\"\\r\\n\", trim($raw));\n        foreach ($headerLines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = array_merge(['User-Agent: ' . Client::userAgent()], $this->headers);\n        return array_map(function($key, $value) {\n            return Client::escapeQuotes($key) . ': ' . Client::escapeQuotes($value);\n        }, array_keys($headers), $headers);\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n    private $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $responseBody = curl_exec($ch);\n        $responseHeaders = curl_getinfo($ch, CURLINFO_HEADER_OUT) ? curl_getinfo($ch, CURLINFO_HEADER_OUT) : '';\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        $headers = self::parseHeaders($responseHeaders);\n        return new Response($httpCode, $headers, $responseBody);\n    }\n\n    public static function userAgent() {\n        return sprintf(\"SDK/1.0 (%s; %s; PHP/%s)\", php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $formattedHeaders = [];\n        foreach ($this->headers as $key => $value) {\n            $formattedHeaders[] = sprintf(\"%s: %s\", Client::ucwordsHyphen($key), Client::escapeQuotes($value));\n        }\n        return $formattedHeaders;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n\n    public function __construct($statusCode, $headers, $body) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement a PHP class for interacting with the BTCPay payment gateway to create invoices and process payments.\n\nClass Description: The BTCPay class encapsulates functionality for communicating with the BTCPay server API. It handles authentication, request formatting, and response processing for invoice creation.\n\nAttributes:\n- config: [array] - Stores configuration parameters including BTCPay server URL, store ID, and API key\n\nMethods:\n- __construct($config): [void] - Initializes the class with configuration parameters\n  - $config: [array] - Configuration array containing:\n    - btcpay_url: [string] - Base URL of BTCPay server\n    - btcpay_storeId: [string] - Store identifier\n    - btcpay_api_key: [string] - API authentication token\n\n- pay($order): [array] - Creates a payment invoice in BTCPay\n  - $order: [array] - Order details containing:\n    - total_amount: [numeric] - Order amount in smallest currency unit (e.g., cents)\n    - trade_no: [string] - Unique order identifier\n  - Returns: [array] - Payment response containing:\n    - type: [integer] - Response type identifier\n    - data: [string] - Checkout URL for payment\n\n- _curlPost($url, $params): [string] - Internal method for making HTTP POST requests\n  - $url: [string] - API endpoint URL\n  - $params: [string|false] - JSON-encoded request body or false for empty body\n  - Returns: [string] - Raw API response",
    "Canonical_solution": "namespace App\\Payments;\n\nclass BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $params = [\n            'jsonResponse' => true,\n            'amount' => sprintf('%.2f', $order['total_amount'] / 100),\n            'currency' => 'CNY',\n            'metadata' => [\n                'orderId' => $order['trade_no']\n            ]\n        ];\n\n        $params_string = @json_encode($params);\n        $ret_raw = $this->_curlPost($this->config['btcpay_url'] . 'api/v1/stores/' . $this->config['btcpay_storeId'] . '/invoices', $params_string);\n        $ret = @json_decode($ret_raw, true);\n        \n        if(empty($ret['checkoutLink'])) {\n            abort(500, \"error!\");\n        }\n        return [\n            'type' => 1,\n            'data' => $ret['checkoutLink'],\n        ];\n    }\n\n    private function _curlPost($url, $params=false) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt(\n            $ch, \n            CURLOPT_HTTPHEADER, \n            array(\n                'Authorization:' .'token '.$this->config['btcpay_api_key'], \n                'Content-Type: application/json'\n            )\n        );\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://yourdomain.com/payment-success',\n            'notificationURL' => 'https://yourdomain.com/payment-notification'\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'orderId' => $order['trade_no'],\n            'currency' => 'USD',\n            'notificationURL' => 'https://yourserver.com/notification'\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params !== false) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://example.com/success',\n            'notificationURL' => 'https://example.com/notify'\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params !== false) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'notificationURL' => '',\n            'redirectURL' => ''\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params !== false) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://example.com/payment-success',\n            'notificationURL' => 'https://example.com/payment-notification'\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://yourdomain.com/payment-success',\n            'notificationURL' => 'https://yourdomain.com/payment-notification'\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://yourdomain.com/payment-success',\n            'notificationURL' => 'https://yourdomain.com/payment-notification'\n        ]);\n\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n\n        $result = curl_exec($ch);\n        curl_close($ch);\n\n        return $result;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://example.com/payment-success',\n            'notificationURL' => 'https://example.com/payment-notification'\n        ]);\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}",
      "<?php\nclass BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD', // Assuming USD, this should be configurable\n            'orderId' => $order['trade_no'],\n            'redirectURL' => '', // Optional redirect URL after payment\n            'notificationURL' => '' // Optional notification URL for webhooks\n        ]);\n\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n\n        return [\n            'type' => 1, // Assuming 1 is a success type identifier\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return $response;\n    }\n}",
      "class BTCPay {\n    private $config;\n\n    public function __construct($config) {\n        $this->config = $config;\n    }\n\n    public function pay($order) {\n        $url = $this->config['btcpay_url'] . '/stores/' . $this->config['btcpay_storeId'] . '/invoices';\n        $params = json_encode([\n            'price' => $order['total_amount'],\n            'currency' => 'USD',\n            'orderId' => $order['trade_no'],\n            'redirectURL' => 'https://yourdomain.com/payment-success',\n            'notificationURL' => 'https://yourdomain.com/payment-notification'\n        ]);\n\n        $response = $this->_curlPost($url, $params);\n        $responseData = json_decode($response, true);\n\n        return [\n            'type' => 1,\n            'data' => $responseData['checkoutLink']\n        ];\n    }\n\n    private function _curlPost($url, $params) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        if ($params !== false) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Authorization: token ' . $this->config['btcpay_api_key']\n        ]);\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return $response;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for timeout, headers, SSL verification, and referer settings.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes custom headers (including a mobile user agent), disables SSL verification for development purposes, sets a referer header, and ensures the response is returned as a string. The function handles the complete cURL lifecycle from initialization to cleanup.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made\n\nOutput: \n- string: The contents of the response from the HTTP request, or false if the request fails",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    curl_setopt($ch, CURLOPT_REFERER, 'https://www.58pic.com/c/15990160');\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeCurlRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ]);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $headers = [\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1',\n        'Referer: https://example.com'\n    ];\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a PHP class that provides HTTP client functionality using Guzzle library, supporting various HTTP methods, request/response handling, and error logging.\n\nClass Description: The Guzzle class is an HTTP client implementation that wraps GuzzleHttp\\Client functionality. It supports GET, POST, PUT, PATCH, and DELETE methods, handles different content types (including multipart/form-data and JSON), manages request/response data, and provides logging capabilities.\n\nAttributes:\n- requestArguments: [array] - Stores request parameters including URI, method, parameters, and headers\n- requestHeader: [array] - Contains HTTP headers for the request\n- responseBody: [string] - Stores the response body content\n- responseHeader: [array] - Contains HTTP headers from the response\n- responseHttpCode: [int] - HTTP status code from the response\n- responseClientError: [string|null] - Stores any client error messages\n- responseClientInfo: [array] - Additional client information\n- logger: [object|null] - Logger instance for debugging and error logging\n- client: [GuzzleHttp\\Client] - Guzzle HTTP client instance\n\nMethods:\n- __construct([GuzzleHttp\\Client|null] $client, [array] $config) -> [void] - Initializes the HTTP client with optional existing client instance and configuration\n- request([string] $uri, [string] $method, [array] $parameters, [array] $headers, [bool] $multipart) -> [string] - Executes HTTP request and returns response body\n- getResponse() -> [array] - Returns complete request/response information including headers, body, and status code\n- setLogger([object] $logger) -> [void] - Sets a logger instance for debugging\n- getResponseBody() -> [string] - Returns the response body content\n- getResponseHeader() -> [array] - Returns response headers\n- getResponseHttpCode() -> [int] - Returns HTTP status code\n- getResponseClientError() -> [string|null] - Returns client error message if any\n- getResponseClientInfo() -> [array] - Returns additional client information (protected)\n- getRequestArguments() -> [array] - Returns request arguments (protected)",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse GuzzleHttp\\Exception\\TransferException;\n\nclass Guzzle implements HttpClientInterface\n{\n    protected $requestArguments = [];\n    protected $requestHeader = [];\n    protected $responseBody = '';\n    protected $responseHeader = [];\n    protected $responseHttpCode = 0;\n    protected $responseClientError = null;\n    protected $responseClientInfo = [];\n    protected $logger = null;\n    protected $client = null;\n\n    public function __construct($client = null, $config = [])\n    {\n        $this->client = $client ? $client : new Client($config);\n    }\n\n    public function request($uri, $method = 'GET', $parameters = [], $headers = [], $multipart = false)\n    {\n        $this->requestHeader = array_replace($this->requestHeader, (array)$headers);\n\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'parameters' => $parameters,\n            'headers' => $this->requestHeader,\n        ];\n\n        $response = null;\n\n        try {\n            switch ($method) {\n                case 'GET':\n                case 'DELETE':\n                    $response = $this->client->request($method, $uri, [\n                        'query' => $parameters,\n                        'headers' => $this->requestHeader,\n                    ]);\n                    break;\n                case 'PUT':\n                case 'PATCH':\n                case 'POST':\n                    $body_type = $multipart ? 'multipart' : 'form_params';\n\n                    if (isset($this->requestHeader['Content-Type'])\n                        && $this->requestHeader['Content-Type'] === 'application/json'\n                    ) {\n                        $body_type = 'json';\n                    }\n\n                    $body_content = $parameters;\n                    if ($multipart) {\n                        $body_content = [];\n                        foreach ($parameters as $key => $val) {\n                            if ($val instanceof \\CURLFile) {\n                                $val = fopen($val->getFilename(), 'r');\n                            }\n\n                            $body_content[] = [\n                                'name' => $key,\n                                'contents' => $val,\n                            ];\n                        }\n                    }\n\n                    $response = $this->client->request($method, $uri, [\n                        $body_type => $body_content,\n                        'headers' => $this->requestHeader,\n                    ]);\n                    break;\n            }\n        } catch (\\Exception $e) {\n            $response = $e->getResponse();\n            $this->responseClientError = $e->getMessage();\n        }\n\n        if (!$this->responseClientError) {\n            $this->responseBody = $response->getBody();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseHeader = $response->getHeaders();\n        }\n\n        if ($this->logger) {\n            $this->logger->debug(sprintf('%s::request( %s, %s ), response:', get_class($this), $uri, $method), $this->getResponse());\n\n            if ($this->responseClientError) {\n                $this->logger->error(sprintf('%s::request( %s, %s ), error:', get_class($this), $uri, $method), [$this->responseClientError]);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse()\n    {\n        return [\n            'request' => $this->getRequestArguments(),\n            'response' => [\n                'code' => $this->getResponseHttpCode(),\n                'headers' => $this->getResponseHeader(),\n                'body' => $this->getResponseBody(),\n            ],\n            'client' => [\n                'error' => $this->getResponseClientError(),\n                'info' => $this->getResponseClientInfo(),\n                'opts' => null,\n            ],\n        ];\n    }\n\n    public function setLogger($logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader()\n    {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode()\n    {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError()\n    {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo()\n    {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments()\n    {\n        return $this->requestArguments;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(?Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            $this->requestArguments['json'] = $parameters;\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error($e->getMessage());\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        try {\n            $this->requestArguments = [\n                'uri' => $uri,\n                'method' => $method,\n                'headers' => $headers,\n            ];\n\n            if ($multipart) {\n                $this->requestArguments['multipart'] = $parameters;\n            } else {\n                if (strtolower($method) === 'get') {\n                    $this->requestArguments['query'] = $parameters;\n                } else {\n                    $this->requestArguments['json'] = $parameters;\n                }\n            }\n\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n\n            if ($this->logger) {\n                $this->logger->info('Request successful', [\n                    'uri' => $uri,\n                    'method' => $method,\n                    'status_code' => $this->responseHttpCode,\n                ]);\n            }\n\n            return $this->responseBody;\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error('Request failed', [\n                    'uri' => $uri,\n                    'method' => $method,\n                    'error' => $this->responseClientError,\n                ]);\n            }\n            return '';\n        }\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(?Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            $this->requestArguments['json'] = $parameters;\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getInfo();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error($this->responseClientError);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            if ($method === 'GET') {\n                $this->requestArguments['query'] = $parameters;\n            } else {\n                $this->requestArguments['json'] = $parameters;\n            }\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error($e->getMessage());\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(?Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            if ($method === 'GET') {\n                $this->requestArguments['query'] = $parameters;\n            } else {\n                $this->requestArguments['json'] = $parameters;\n            }\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error('HTTP Request Error: ' . $e->getMessage());\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(?Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        try {\n            $this->requestArguments = [\n                'uri' => $uri,\n                'method' => $method,\n                'headers' => $headers,\n            ];\n\n            if ($multipart) {\n                $this->requestArguments['multipart'] = $parameters;\n            } else {\n                $this->requestArguments['json'] = $parameters;\n            }\n\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n\n            if ($this->logger) {\n                $this->logger->info('Request successful', [\n                    'uri' => $uri,\n                    'method' => $method,\n                    'response_code' => $this->responseHttpCode,\n                ]);\n            }\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error('Request failed', [\n                    'uri' => $uri,\n                    'method' => $method,\n                    'error_message' => $this->responseClientError,\n                ]);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            if ($method === 'GET') {\n                $this->requestArguments['query'] = $parameters;\n            } else {\n                $this->requestArguments['json'] = $parameters;\n            }\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getInfo();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error($this->responseClientError);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(?Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            if ($method === 'GET') {\n                $this->requestArguments['query'] = $parameters;\n            } else {\n                $this->requestArguments['json'] = $parameters;\n            }\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getInfo();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error($this->responseClientError);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse Psr\\Log\\LoggerInterface;\n\nclass GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct(?Client $client = null, array $config = []) {\n        $this->client = $client ?? new Client($config);\n    }\n\n    public function request(string $uri, string $method, array $parameters = [], array $headers = [], bool $multipart = false): string {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            $this->requestArguments['json'] = $parameters;\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n        } catch (\\Exception $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error('HTTP Request Error: ' . $e->getMessage());\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse(): array {\n        return [\n            'body' => $this->responseBody,\n            'headers' => $this->responseHeader,\n            'status_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger(LoggerInterface $logger): void {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody(): string {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader(): array {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode(): int {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError(): ?string {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo(): array {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments(): array {\n        return $this->requestArguments;\n    }\n}"
    ],
    "unmatched_results": [
      "class GuzzleHttpClient {\n    private $requestArguments = [];\n    private $requestHeader = [];\n    private $responseBody = '';\n    private $responseHeader = [];\n    private $responseHttpCode = 0;\n    private $responseClientError = null;\n    private $responseClientInfo = [];\n    private $logger = null;\n    private $client;\n\n    public function __construct($client = null, $config = []) {\n        $this->client = $client ?: new \\GuzzleHttp\\Client($config);\n    }\n\n    public function request($uri, $method, $parameters = [], $headers = [], $multipart = false) {\n        $this->requestArguments = [\n            'uri' => $uri,\n            'method' => $method,\n            'headers' => $headers,\n        ];\n\n        if ($multipart) {\n            $this->requestArguments['multipart'] = $parameters;\n        } else {\n            if (strtolower($method) === 'get') {\n                $this->requestArguments['query'] = $parameters;\n            } else {\n                $this->requestArguments['json'] = $parameters;\n            }\n        }\n\n        try {\n            $response = $this->client->request(\n                $method,\n                $uri,\n                $this->requestArguments\n            );\n\n            $this->responseBody = (string)$response->getBody();\n            $this->responseHeader = $response->getHeaders();\n            $this->responseHttpCode = $response->getStatusCode();\n            $this->responseClientInfo = $response->getReasonPhrase();\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            $this->responseClientError = $e->getMessage();\n            if ($this->logger) {\n                $this->logger->error($this->responseClientError);\n            }\n        }\n\n        return $this->responseBody;\n    }\n\n    public function getResponse() {\n        return [\n            'body' => $this->responseBody,\n            'header' => $this->responseHeader,\n            'http_code' => $this->responseHttpCode,\n            'client_error' => $this->responseClientError,\n            'client_info' => $this->responseClientInfo,\n        ];\n    }\n\n    public function setLogger($logger) {\n        $this->logger = $logger;\n    }\n\n    public function getResponseBody() {\n        return $this->responseBody;\n    }\n\n    public function getResponseHeader() {\n        return $this->responseHeader;\n    }\n\n    public function getResponseHttpCode() {\n        return $this->responseHttpCode;\n    }\n\n    public function getResponseClientError() {\n        return $this->responseClientError;\n    }\n\n    protected function getResponseClientInfo() {\n        return $this->responseClientInfo;\n    }\n\n    protected function getRequestArguments() {\n        return $this->requestArguments;\n    }\n}"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for timeout, headers, SSL verification, and referer settings.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes custom configurations such as a user agent string, disabled SSL verification, a referer header, and a connection timeout. The function returns the raw response content from the requested URL.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made.\n\nOutput: \n- string: The raw content returned from the HTTP request. Returns false if the request fails.",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://www.cctv.com/');\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REFERER, 'http://example.com');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement functions to verify transactions from different payment gateways (NowPayments, NextPay, and ZarinPal) using their respective APIs.\n\nFunction Description: The functions will interact with payment gateway APIs to verify transaction details and return the verification results.\n\nInput: \n- verify_nowpayment_transaction: \n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $hash_id (string): Unique transaction identifier from NowPayments\n\n- verify_nextpay_transaction:\n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $amount (numeric): Transaction amount to verify\n  - $payid (string): Transaction ID from NextPay\n\n- verify_zarinpal_transaction:\n  - $paymentKeys (array): Contains API keys for different payment gateways\n  - $Authority (string): Transaction authority code from ZarinPal\n  - $amount (numeric): Transaction amount to verify\n\nOutput:\n- All functions return the decoded API response from the respective payment gateway, typically containing transaction verification details and status.\n- Return type is object/mixed (decoded JSON response for NowPayments/NextPay, SOAP response object for ZarinPal)",
    "Canonical_solution": "function verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $base_url = 'https://api.nowpayments.io/v1/payment/' . $hash_id;\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['X-API-KEY: ' . $paymentKeys['nowpayment']]);\n    curl_setopt($ch, CURLOPT_URL, $base_url);\n    \n    $res = json_decode(curl_exec($ch));\n    curl_close($ch);\n    \n    return $res;\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $curl = curl_init();\n    curl_setopt_array($curl, array(\n        CURLOPT_URL => 'https://nextpay.org/nx/gateway/verify',\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_ENCODING => '',\n        CURLOPT_MAXREDIRS => 10,\n        CURLOPT_TIMEOUT => 0,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n        CURLOPT_CUSTOMREQUEST => 'POST',\n        CURLOPT_POSTFIELDS => 'api_key='.$paymentKeys['nextpay'].'&amount='.$amount.'&currency=IRT&trans_id='.$payid,\n    ));\n    \n    $response = curl_exec($curl);\n    curl_close($curl);\n    \n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount,\n    ]);\n    \n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $apiKey = $paymentKeys['nowpayments'];\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$apiKey}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $apiKey = $paymentKeys['nextpay'];\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $apiKey,\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $merchantId = $paymentKeys['zarinpal'];\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $merchantId,\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl');\n    $result = $client->PaymentVerification(\n        [\n            'MerchantID' => $paymentKeys['zarinpal'],\n            'Authority' => $Authority,\n            'Amount' => $amount\n        ]\n    );\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl');\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'trans_id' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl');\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl', ['encoding' => 'UTF-8']);\n    $result = $client->PaymentVerification([\n        'MerchantID' => $paymentKeys['zarinpal'],\n        'Authority' => $Authority,\n        'Amount' => $amount\n    ]);\n    return $result;\n}",
      "<?php\nfunction verify_nowpayment_transaction($paymentKeys, $hash_id) {\n    $url = \"https://api.nowpayments.io/v1/payment/{$hash_id}\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"x-api-key: {$paymentKeys['nowpayments']}\"\n    ]);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_nextpay_transaction($paymentKeys, $amount, $payid) {\n    $url = \"https://api.nextpay.org/gateway/verify\";\n    $data = [\n        'api_key' => $paymentKeys['nextpay'],\n        'amount' => $amount,\n        'code' => $payid\n    ];\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($response);\n}\n\nfunction verify_zarinpal_transaction($paymentKeys, $Authority, $amount) {\n    $client = new SoapClient('https://www.zarinpal.com/pg/services/WebGate/wsdl');\n    $result = $client->PaymentVerification(\n        [\n            'MerchantID' => $paymentKeys['zarinpal'],\n            'Authority' => $Authority,\n            'Amount' => $amount\n        ]\n    );\n    return $result;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a PHP class for interacting with the GoDaddy DNS API to manage domain records, including retrieving domains, getting DNS records, and creating/updating records.\n\nClass Description: The GodaddyDns class provides methods to interact with GoDaddy's DNS API. It handles authentication, domain parsing, and various DNS record operations through HTTP requests using cURL.\n\nAttributes:\n- accessKeyId: [string] - The API access key ID for GoDaddy authentication\n- accessSecrec: [string] - The API secret key for GoDaddy authentication\n- DomainName: [string] - The domain name being managed\n- Host: [string] - The host portion of the domain (default empty)\n- Path: [string] - The path portion of the domain (default empty)\n\nMethods:\n- __construct([string]$accessKeyId, [string]$accessSecrec, [string]$domain = \"\") -> [void] - Initializes the class with API credentials and optional domain name\n- getDomain([string]$domain) -> [array] - Static method that parses a domain into its components (self domain, second-level domain)\n- curl([string]$url, [array]$header = '', [string]$data = '', [string]$method = 'get') -> [array] - Private method that handles cURL requests and returns response\n- getDomains() -> [array] - Retrieves all domains associated with the account\n- GetDNSRecord([string]$domain, [string]$record, [string]$recordType = 'TXT') -> [array] - Gets a specific DNS record for a domain\n- UpdateDNSRecord([string]$domain, [string]$name, [string]$value, [string]$recordType = 'TXT') -> [array] - Updates an existing DNS record\n- CreateDNSRecord([string]$domain, [string]$name, [string]$value, [string]$recordType = 'TXT') -> [array] - Creates a new DNS record",
    "Canonical_solution": "$domainfile = $dir . DIRECTORY_SEPARATOR . \"domain.ini\";\n\nclass GodaddyDns\n{\n    private $accessKeyId  = null;\n    private $accessSecrec = null;\n    private $DomainName   = null;\n    private $Host         = \"\";\n    private $Path         = \"\";\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\")\n    {\n        $this->accessKeyId  = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName   = $domain;\n    }\n\n    public static function getDomain($domain)\n    {\n        global $domainfile;\n        $tmp = file($domainfile);\n        $arr = array();\n        foreach ($tmp as $k=>$v) {\n            $v = trim($v);\n            if ($v!=\"\")\n                $arr[]= \".\" . $v;\n        }\n\n        $seconddomain = \"\";\n        $selfdomain   = \"\";\n        $rootdomain   = \"\";\n        foreach ($arr as $k => $v) {\n            $pos = stripos($domain, $v);\n            if ($pos) {\n                $rootdomain   = substr($domain, $pos);\n                $s            = explode(\".\", substr($domain, 0, $pos));\n                $seconddomain = $s[count($s) - 1].$rootdomain;\n                for ($i = 0; $i < count($s) - 1; $i++)\n                    $selfdomain .= $s[$i] . \".\";\n                $selfdomain = substr($selfdomain,0,strlen($selfdomain)-1);\n                break;\n            }\n        }\n        if ($rootdomain == \"\") {\n            $seconddomain = $domain;\n            $selfdomain   = \"\";\n        }\n        return array($selfdomain, $seconddomain);\n    }\n\n    private function curl($url, $header = '', $data = '', $method = 'get')\n    {\n        $ch       = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        $result   = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return array(\n            'result' => $result,\n            'httpCode' => $httpCode\n        );\n    }\n\n    public function getDomains()\n    {\n        $url    = \"https://api.godaddy.com/v1/domains\";\n        $header = ['accept: application/json', 'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT')\n    {\n        $url    = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$record\";\n        $header = ['accept: application/json', 'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT')\n    {\n        $url    = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$name\";\n        $header = ['accept: application/json', 'Content-Type: application/json',\n            'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        $data   = array(\n            array(\n                'data' => $value,\n                'name' => $name,\n                'ttl' => 3600,\n                'type' => $recordType)\n        );\n        return $this->curl($url, $header, json_encode($data), 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT')\n    {\n        $url    = \"https://api.godaddy.com/v1/domains/$domain/records\";\n        $header = ['accept: application/json', 'Content-Type: application/json',\n            'authorization:sso-key '.$this->accessKeyId.':'.$this->accessSecrec];\n        $data   = array(\n            array(\n                'data' => $value,\n                'name' => $name,\n                'ttl' => 3600,\n                'type' => $recordType)\n        );\n        return $this->curl($url, $header, json_encode($data), 'PATCH');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host;\n    public $Path;\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n        list($this->Host, $this->Path) = self::getDomain($domain);\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $host = array_pop($parts);\n        $path = implode('.', $parts);\n        return [$host, $path];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if (!empty($header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        }\n        if ($method === 'post' || $method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return ['response' => json_decode($response, true), 'code' => $httpCode];\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = json_encode([['data' => $value]]);\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = json_encode([['type' => $recordType, 'name' => $name, 'data' => $value, 'ttl' => 3600]]);\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host = '';\n    public $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parsedUrl = parse_url($domain);\n        $hostParts = explode('.', $parsedUrl['host']);\n        $secondLevelDomain = array_slice($hostParts, -2, 2);\n        return ['domain' => implode('.', $secondLevelDomain), 'subdomain' => implode('.', array_slice($hostParts, 0, count($hostParts) - 2))];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge(['Authorization: sso-key ' . $this->accessKeyId . ':' . $this->accessSecrec], $header));\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function getDomains() {\n        return $this->curl('https://api.godaddy.com/v1/domains');\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        return $this->curl(\"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$record\");\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $data = [['data' => $value]];\n        return $this->curl(\"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$name\", [], $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $data = [['type' => $recordType, 'name' => $name, 'data' => $value, 'ttl' => 600]];\n        return $this->curl(\"https://api.godaddy.com/v1/domains/$domain/records\", [], $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host = '';\n    public $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $selfDomain = array_pop($parts);\n        $secondLevelDomain = array_pop($parts);\n        return ['selfDomain' => $selfDomain, 'secondLevelDomain' => $secondLevelDomain];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if (!empty($header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        }\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        $data = [[\"data\" => $value, \"ttl\" => 600]];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        $data = [[\"data\" => $value, \"ttl\" => 600, \"name\" => $name]];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host = '';\n    public $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $selfDomain = array_pop($parts);\n        $secondLevelDomain = array_pop($parts);\n        return ['selfDomain' => $secondLevelDomain, 'secondLevelDomain' => $selfDomain];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if (!empty($header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        }\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $headers = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $headers);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $headers = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $headers);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $headers = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        $data = [[\"data\" => $value, \"ttl\" => 600]];\n        return $this->curl($url, $headers, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $headers = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        $data = [[\"type\" => $recordType, \"name\" => $name, \"data\" => $value, \"ttl\" => 600]];\n        return $this->curl($url, $headers, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host;\n    public $Path;\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n        list($this->Host, $this->Path) = self::getDomain($domain);\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $host = array_pop($parts);\n        $path = implode('.', $parts);\n        return [$host, $path];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        if ($method == 'post' || $method == 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return ['response' => json_decode($response, true), 'code' => $httpCode];\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = json_encode([['data' => $value]]);\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = json_encode([['name' => $name, 'data' => $value, 'ttl' => 600]]);\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host = '';\n    public $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $selfDomain = array_pop($parts);\n        $secondLevelDomain = array_pop($parts);\n        return ['selfDomain' => $secondLevelDomain, 'secondLevelDomain' => $selfDomain];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge(['Content-Type: application/json'], $header));\n        $response = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\"];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\"];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = [[\"data\" => $value]];\n        $header = [\"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\"];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = [[\"type\" => $recordType, \"name\" => $name, \"data\" => $value, \"ttl\" => 600]];\n        $header = [\"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\"];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host = '';\n    public $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parsedUrl = parse_url($domain);\n        $hostParts = explode('.', $parsedUrl['host']);\n        $secondLevelDomain = array_slice($hostParts, -2, 2);\n        return ['domain' => implode('.', $secondLevelDomain), 'subdomain' => implode('.', array_slice($hostParts, 0, count($hostParts) - 2))];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_merge(['Authorization: sso-key ' . $this->accessKeyId . ':' . $this->accessSecrec], $header));\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return ['response' => json_decode($response, true), 'status' => $httpCode];\n    }\n\n    public function getDomains() {\n        $url = 'https://api.godaddy.com/v1/domains';\n        return $this->curl($url);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$record\";\n        return $this->curl($url);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType/$name\";\n        $data = [['data' => $value, 'ttl' => 600]];\n        return $this->curl($url, [], $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/$domain/records/$recordType\";\n        $data = [['name' => $name, 'data' => $value, 'ttl' => 600]];\n        return $this->curl($url, [], $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host = '';\n    public $Path = '';\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $selfDomain = array_pop($parts);\n        $secondLevelDomain = array_pop($parts);\n        return ['selfDomain' => $secondLevelDomain, 'domain' => $selfDomain];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        if ($method === 'post') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        } elseif ($method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return ['response' => json_decode($response, true), 'code' => $httpCode];\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = [['data' => $value]];\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = [['type' => $recordType, 'name' => $name, 'data' => $value, 'ttl' => 600]];\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host;\n    public $Path;\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n        list($this->Host, $this->Path) = self::getDomain($domain);\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $host = array_pop($parts);\n        $path = implode('.', $parts);\n        return [$host, $path];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        if (!empty($header)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        }\n        if ($method === 'post' || $method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return ['response' => json_decode($response, true), 'code' => $httpCode];\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = [[\"data\" => $value]];\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = [[\"type\" => $recordType, \"name\" => $name, \"data\" => $value, \"ttl\" => 600]];\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}",
      "class GodaddyDns {\n    private $accessKeyId;\n    private $accessSecrec;\n    public $DomainName;\n    public $Host;\n    public $Path;\n\n    public function __construct($accessKeyId, $accessSecrec, $domain = \"\") {\n        $this->accessKeyId = $accessKeyId;\n        $this->accessSecrec = $accessSecrec;\n        $this->DomainName = $domain;\n        list($this->Host, $this->Path) = self::getDomain($domain);\n    }\n\n    public static function getDomain($domain) {\n        $parts = explode('.', $domain);\n        $host = array_pop($parts);\n        $path = implode('.', $parts);\n        return [$host, $path];\n    }\n\n    private function curl($url, $header = [], $data = '', $method = 'get') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        if ($method === 'post' || $method === 'put') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return ['response' => json_decode($response, true), 'code' => $httpCode];\n    }\n\n    public function getDomains() {\n        $url = \"https://api.godaddy.com/v1/domains\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function GetDNSRecord($domain, $record, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$record}\";\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header);\n    }\n\n    public function UpdateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}/{$name}\";\n        $data = [[\"data\" => $value]];\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'put');\n    }\n\n    public function CreateDNSRecord($domain, $name, $value, $recordType = 'TXT') {\n        $url = \"https://api.godaddy.com/v1/domains/{$domain}/records/{$recordType}\";\n        $data = [[\"name\" => $name, \"data\" => $value, \"ttl\" => 600]];\n        $header = [\n            \"Authorization: sso-key {$this->accessKeyId}:{$this->accessSecrec}\",\n            \"Content-Type: application/json\"\n        ];\n        return $this->curl($url, $header, $data, 'post');\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a PHP class that handles file downloads using cURL with proper error handling and resource management.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using PHP's cURL library. It manages temporary file creation, download execution, and cleanup of resources. The class includes methods to set a custom temporary directory, perform the download, retrieve the downloaded filename, and clean up downloaded files.\n\nAttributes:\n- tempDir: ?string - Optional custom directory for storing temporary files. If not set, uses system temp directory.\n- outputFile: ?string - Path to the downloaded file. Null until download is completed.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets a custom temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file. Throws RuntimeException if called before download().\n- cleanup() -> void - Removes the downloaded file if it exists.",
    "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Exception\\RuntimeException;\nuse Psy\\Shell;\n\nclass CurlDownloader\n{\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        if ($this->outputFile === null) {\n            throw new RuntimeException('Call download() first');\n        }\n\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if ($this->outputFile !== null && \\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"No file has been downloaded yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory must exist and be writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file for writing.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "<?php\n\nclass CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file for writing.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $success = curl_exec($ch);\n        if ($success === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "<?php\n\nclass CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $success = curl_exec($ch);\n        if ($success === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file.\");\n        }\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $tempDir = $this->tempDir ?? sys_get_temp_dir();\n        $this->outputFile = tempnam($tempDir, 'curl_download_');\n        if ($this->outputFile === false) {\n            throw new ErrorException(\"Failed to create temporary file.\");\n        }\n\n        $fp = fopen($this->outputFile, 'w');\n        if (!$fp) {\n            throw new ErrorException(\"Failed to open file for writing.\");\n        }\n\n        $ch = curl_init($url);\n        if (!$ch) {\n            fclose($fp);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $success = curl_exec($ch);\n        if ($success === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            fclose($fp);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        curl_close($ch);\n        fclose($fp);\n\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "class CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_');\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($this->outputFile, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new ErrorException(\"Failed to open output file for writing.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($this->outputFile);\n            $this->outputFile = null;\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}",
      "<?php\n\nclass CurlDownloader {\n    private ?string $tempDir = null;\n    private ?string $outputFile = null;\n\n    public function setTempDir(string $tempDir): void {\n        if (!is_dir($tempDir) || !is_writable($tempDir)) {\n            throw new InvalidArgumentException(\"Directory is not valid or writable.\");\n        }\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool {\n        $this->outputFile = tempnam($this->tempDir ?? sys_get_temp_dir(), 'curl_download_');\n        $fileHandle = fopen($this->outputFile, 'w');\n        if (!$fileHandle) {\n            throw new ErrorException(\"Failed to open output file for writing.\");\n        }\n\n        $ch = curl_init($url);\n        if (!$ch) {\n            fclose($fileHandle);\n            unlink($this->outputFile);\n            throw new ErrorException(\"Failed to initialize cURL session.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fileHandle);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        $success = curl_exec($ch);\n        if ($success === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            fclose($fileHandle);\n            unlink($this->outputFile);\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n\n        curl_close($ch);\n        fclose($fileHandle);\n        return true;\n    }\n\n    public function getFilename(): string {\n        if ($this->outputFile === null) {\n            throw new RuntimeException(\"Download has not been performed yet.\");\n        }\n        return $this->outputFile;\n    }\n\n    public function cleanup(): void {\n        if ($this->outputFile !== null && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n            $this->outputFile = null;\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Create a PHP class that implements OAuth 1.0 authentication for interacting with the Twitter API, handling both GET and POST requests with proper parameter encoding and signature generation.\n\nClass Description: TwitterAPIExchange is a PHP class that provides a convenient way to interact with Twitter's API using OAuth 1.0 authentication. It handles the construction of OAuth signatures, request headers, and performs HTTP requests using cURL.\n\nAttributes:\n- oauth_access_token: string - Twitter OAuth access token\n- oauth_access_token_secret: string - Twitter OAuth access token secret\n- consumer_key: string - Twitter API consumer key\n- consumer_secret: string - Twitter API consumer secret\n- postfields: array - Data to be sent in POST requests\n- getfield: string - Query string for GET requests\n- oauth: array - OAuth parameters for request signing\n- url: string - API endpoint URL\n\nMethods:\n- __construct(array $settings) -> void - Constructor that validates and sets OAuth credentials\n- setPostfields(array $array) -> self - Sets POST data and returns instance for method chaining\n- setGetfield(string $string) -> self - Sets GET query string and returns instance for method chaining\n- getGetfield() -> string|null - Returns current GET query string\n- getPostfields() -> array|null - Returns current POST data\n- buildOauth(string $url, string $requestMethod) -> self - Builds OAuth signature and parameters\n- performRequest(bool $return = true) -> string|void - Executes the API request and returns response\n- buildBaseString(string $baseURI, string $method, array $params) -> string - Private method to build base string for signature\n- buildAuthorizationHeader(array $oauth) -> string - Private method to build OAuth header",
    "Canonical_solution": "class TwitterAPIExchange \n{\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    protected $oauth;\n    public $url;\n\n    public function __construct(array $settings)\n    {\n        if (!in_array('curl', get_loaded_extensions())) \n        {\n            throw new Exception('You need to install cURL, see: http://curl.haxx.se/docs/install.html');\n        }\n        \n        if (!isset($settings['oauth_access_token'])\n            || !isset($settings['oauth_access_token_secret'])\n            || !isset($settings['consumer_key'])\n            || !isset($settings['consumer_secret']))\n        {\n            throw new Exception('Make sure you are passing in the correct parameters');\n        }\n\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n    \n    public function setPostfields(array $array)\n    {\n        if (!is_null($this->getGetfield())) \n        { \n            throw new Exception('You can only choose get OR post fields.'); \n        }\n        \n        if (isset($array['status']) && substr($array['status'], 0, 1) === '@')\n        {\n            $array['status'] = sprintf(\"\\0%s\", $array['status']);\n        }\n        \n        $this->postfields = $array;\n        \n        return $this;\n    }\n    \n    public function setGetfield($string)\n    {\n        if (!is_null($this->getPostfields())) \n        { \n            throw new Exception('You can only choose get OR post fields.'); \n        }\n        \n        $search = array('#', ',', '+', ':');\n        $replace = array('%23', '%2C', '%2B', '%3A');\n        $string = str_replace($search, $replace, $string);  \n        \n        $this->getfield = $string;\n        \n        return $this;\n    }\n    \n    public function getGetfield()\n    {\n        return $this->getfield;\n    }\n    \n    public function getPostfields()\n    {\n        return $this->postfields;\n    }\n    \n    public function buildOauth($url, $requestMethod)\n    {\n        if (!in_array(strtolower($requestMethod), array('post', 'get')))\n        {\n            throw new Exception('Request method must be either POST or GET');\n        }\n        \n        $consumer_key = $this->consumer_key;\n        $consumer_secret = $this->consumer_secret;\n        $oauth_access_token = $this->oauth_access_token;\n        $oauth_access_token_secret = $this->oauth_access_token_secret;\n        \n        $oauth = array( \n            'oauth_consumer_key' => $consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        \n        $getfield = $this->getGetfield();\n        \n        if (!is_null($getfield))\n        {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n            foreach ($getfields as $g)\n            {\n                $split = explode('=', $g);\n                $oauth[$split[0]] = $split[1];\n            }\n        }\n        \n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($consumer_secret) . '&' . rawurlencode($oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        \n        $this->url = $url;\n        $this->oauth = $oauth;\n        \n        return $this;\n    }\n    \n    public function performRequest($return = true)\n    {\n        if (!is_bool($return)) \n        { \n            throw new Exception('performRequest parameter must be true or false'); \n        }\n        \n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        \n        $getfield = $this->getGetfield();\n        $postfields = $this->getPostfields();\n\n        $options = array( \n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n\n        if (!is_null($postfields))\n        {\n            $options[CURLOPT_POSTFIELDS] = $postfields;\n        }\n        else\n        {\n            if ($getfield !== '')\n            {\n                $options[CURLOPT_URL] .= $getfield;\n            }\n        }\n\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n\n        if ($return) { return $json; }\n    }\n    \n    private function buildBaseString($baseURI, $method, $params) \n    {\n        $return = array();\n        ksort($params);\n        \n        foreach($params as $key=>$value)\n        {\n            $return[] = \"$key=\" . $value;\n        }\n        \n        return $method . \"&\" . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $return)); \n    }\n    \n    private function buildAuthorizationHeader($oauth) \n    {\n        $return = 'Authorization: OAuth ';\n        $values = array();\n        \n        foreach($oauth as $key => $value)\n        {\n            $values[] = \"$key=\\\"\" . rawurlencode($value) . \"\\\"\";\n        }\n        \n        $return .= implode(', ', $values);\n        return $return;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfield = $this->getGetfield();\n        if (!is_null($getfield)) {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n            foreach ($getfields as $g) {\n                $split = explode('=', $g);\n                if (isset($split[1])) {\n                    $oauth[$split[0]] = urldecode($split[1]);\n                }\n            }\n        }\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getGetfield()) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if ($this->getPostfields()) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) { return $json; }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            $values[] = rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfield = $this->getGetfield();\n        if (!is_null($getfield)) {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n            foreach ($getfields as $g) {\n                $split = explode('=', $g);\n                if (isset($split[1])) {\n                    $oauth[$split[0]] = urldecode($split[1]);\n                }\n            }\n        }\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getGetfield()) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if ($this->getPostfields()) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) { return $json; }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            $values[] = rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfield = $this->getGetfield();\n        if (!is_null($getfield)) {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n            foreach ($getfields as $g) {\n                $split = explode('=', $g);\n                if (isset($split[1])) {\n                    $oauth[$split[0]] = urldecode($split[1]);\n                }\n            }\n        }\n        $this->oauth = $oauth;\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $this->oauth['oauth_signature'] = $oauth_signature;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if (!is_null($this->getGetfield())) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if (!is_null($this->getPostfields())) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) {\n            return $json;\n        }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            $values[] = rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $this->oauth = [\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        ];\n        $this->oauth['oauth_signature'] = $this->buildSignature($requestMethod);\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = ['Authorization: ' . $this->buildAuthorizationHeader($this->oauth)];\n        $options = [\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        ];\n        if ($this->getfield) {\n            $options[CURLOPT_URL] .= '?' . $this->getfield;\n        }\n        if ($this->postfields) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->postfields);\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) return $json;\n    }\n\n    private function buildSignature(string $method) {\n        $base_info = $this->buildBaseString($this->url, $method, $this->oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        return base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = [];\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = [];\n        foreach ($oauth as $key => $value) {\n            $values[] = \"$key=\\\"\" . rawurlencode($value) . \"\\\"\";\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfield = $this->getGetfield();\n        if (!is_null($getfield)) {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n            foreach ($getfields as $g) {\n                $split = explode('=', $g);\n                if (isset($split[1])) {\n                    $oauth[$split[0]] = urldecode($split[1]);\n                }\n            }\n        }\n        $this->url = str_replace('?' . $getfield, '', $url);\n        $base_info = $this->buildBaseString($this->url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getGetfield()) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if ($this->getPostfields()) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) { return $json; }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = $this->urlencode_rfc3986($key) . '=' . $this->urlencode_rfc3986($value);\n        }\n        return $method . \"&\" . $this->urlencode_rfc3986($baseURI) . '&' . $this->urlencode_rfc3986(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            $values[] = $key . '=\"' . $this->urlencode_rfc3986($value) . '\"';\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n\n    private function urlencode_rfc3986(string $input) {\n        return str_replace('+', ' ', str_replace('%7E', '~', rawurlencode($input)));\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfields = $this->getGetfield();\n        if (!is_null($getfields)) {\n            $getfieldsArr = array();\n            parse_str($getfields, $getfieldsArr);\n            $oauth = array_merge($oauth, $getfieldsArr);\n        }\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getGetfield()) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if ($this->getPostfields()) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) {\n            return $json;\n        }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            if (in_array($key, array('oauth_consumer_key', 'oauth_nonce', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_token', 'oauth_version'))) {\n                $values[] = rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n            }\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) || !in_array('oauth_access_token_secret', $settings) || !in_array('consumer_key', $settings) || !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfields = $this->getfield;\n        if (!is_null($getfields)) {\n            $getfields = str_replace('?', '', explode('&', $getfields));\n            foreach ($getfields as $g) {\n                $split = explode('=', $g);\n                if (!isset($split[1])) {\n                    $split[1] = '';\n                }\n                $oauth[$split[0]] = urldecode($split[1]);\n            }\n        }\n        $this->url = str_replace('?' . $this->getfield, '', $this->url);\n        $base_info = $this->buildBaseString($this->url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getfield) {\n            $options[CURLOPT_URL] .= '?' . $this->getfield;\n        }\n        if ($this->postfields) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->postfields);\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) { return $json; }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = $this->urlencode_rfc3986($key) . '=' . $this->urlencode_rfc3986($value);\n        }\n        return $method . \"&\" . $this->urlencode_rfc3986($baseURI) . '&' . $this->urlencode_rfc3986(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            $values[] = $key . '=\"' . $this->urlencode_rfc3986($value) . '\"';\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n\n    private function urlencode_rfc3986(string $input) {\n        return str_replace('+', ' ', str_replace('%7E', '~', rawurlencode($input)));\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfields = $this->getGetfield();\n        if ($getfields) {\n            $getfieldsArr = array();\n            parse_str($getfields, $getfieldsArr);\n            $oauth = array_merge($oauth, $getfieldsArr);\n        }\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getGetfield()) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if ($this->getPostfields()) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) { return $json; }\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            if (in_array($key, array('oauth_consumer_key', 'oauth_nonce', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_token', 'oauth_version'))) {\n                $values[] = rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n            }\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $this->oauth = [\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        ];\n        $this->oauth['oauth_signature'] = $this->buildSignature($requestMethod);\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = [\"Authorization: \" . $this->buildAuthorizationHeader($this->oauth)];\n        $options = [\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        ];\n        if ($this->getfield) {\n            $options[CURLOPT_URL] .= '?' . $this->getfield;\n        }\n        if ($this->postfields) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->postfields);\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) return $json;\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = [];\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = $this->urlencodeRFC3986($key) . '=' . $this->urlencodeRFC3986($value);\n        }\n        return $method . '&' . $this->urlencodeRFC3986($baseURI) . '&' . $this->urlencodeRFC3986(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = [];\n        foreach ($oauth as $key => $value) {\n            if (in_array($key, ['oauth_consumer_key', 'oauth_nonce', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_token', 'oauth_version'])) {\n                $values[] = $key . '=\"' . $this->urlencodeRFC3986($value) . '\"';\n            }\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n\n    private function buildSignature(string $requestMethod) {\n        $signatureKey = $this->urlencodeRFC3986($this->consumer_secret) . '&' . $this->urlencodeRFC3986($this->oauth_access_token_secret);\n        $baseString = $this->buildBaseString($this->url, $requestMethod, array_merge($this->oauth, $this->getGetfieldAsArray(), $this->getPostfields()));\n        return base64_encode(hash_hmac('sha1', $baseString, $signatureKey, true));\n    }\n\n    private function urlencodeRFC3986(string $input) {\n        return str_replace('+', '%20', str_replace('%7E', '~', rawurlencode($input)));\n    }\n\n    private function getGetfieldAsArray() {\n        $pairs = explode('&', $this->getfield);\n        $result = [];\n        foreach ($pairs as $pair) {\n            list($key, $value) = explode('=', $pair, 2);\n            $result[urldecode($key)] = urldecode($value);\n        }\n        return $result;\n    }\n}",
      "<?php\nclass TwitterAPIExchange {\n    private $oauth_access_token;\n    private $oauth_access_token_secret;\n    private $consumer_key;\n    private $consumer_secret;\n    private $postfields;\n    private $getfield;\n    private $oauth;\n    private $url;\n\n    public function __construct(array $settings) {\n        if (!in_array('oauth_access_token', $settings) ||\n            !in_array('oauth_access_token_secret', $settings) ||\n            !in_array('consumer_key', $settings) ||\n            !in_array('consumer_secret', $settings)) {\n            throw new Exception('Missing keys in settings');\n        }\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    public function setPostfields(array $array) {\n        $this->postfields = $array;\n        return $this;\n    }\n\n    public function setGetfield(string $string) {\n        $this->getfield = $string;\n        return $this;\n    }\n\n    public function getGetfield() {\n        return $this->getfield;\n    }\n\n    public function getPostfields() {\n        return $this->postfields;\n    }\n\n    public function buildOauth(string $url, string $requestMethod) {\n        $this->url = $url;\n        $requestMethod = strtoupper($requestMethod);\n        $oauth = array(\n            'oauth_consumer_key' => $this->consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $this->oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n        $getfields = $this->getGetfield();\n        if (!is_null($getfields)) {\n            $getfieldsArr = array();\n            parse_str($getfields, $getfieldsArr);\n            $oauth = array_merge($oauth, $getfieldsArr);\n        }\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($this->consumer_secret) . '&' . rawurlencode($this->oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n        $this->oauth = $oauth;\n        return $this;\n    }\n\n    public function performRequest(bool $return = true) {\n        $header = array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n        $options = array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false\n        );\n        if ($this->getGetfield()) {\n            $options[CURLOPT_URL] .= '?' . $this->getGetfield();\n        }\n        if ($this->getPostfields()) {\n            $options[CURLOPT_POST] = true;\n            $options[CURLOPT_POSTFIELDS] = http_build_query($this->getPostfields());\n        }\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n        curl_close($feed);\n        if ($return) return $json;\n    }\n\n    private function buildBaseString(string $baseURI, string $method, array $params) {\n        $r = array();\n        ksort($params);\n        foreach ($params as $key => $value) {\n            $r[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n        return strtoupper($method) . '&' . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));\n    }\n\n    private function buildAuthorizationHeader(array $oauth) {\n        $r = 'Authorization: OAuth ';\n        $values = array();\n        foreach ($oauth as $key => $value) {\n            if (in_array($key, array('oauth_consumer_key', 'oauth_nonce', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_token', 'oauth_version'))) {\n                $values[] = rawurlencode($key) . '=\"' . rawurlencode($value) . '\"';\n            }\n        }\n        $r .= implode(', ', $values);\n        return $r;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request to the OpenAI API using cURL, handles the response, and manages potential errors.\n\nFunction Description: The function `make_curl_request` initializes a cURL session to interact with the OpenAI API. It sets necessary headers including authentication, configures cURL options for the request, and implements a callback function to handle the response stream. The function processes both successful responses and errors, setting appropriate cookies for error conditions and returning the response data.\n\nInput:\n- `$postData` (string) - The JSON-encoded data to be sent in the POST request body.\n- `$OPENAI_API_KEY` (string) - The API key for authenticating with the OpenAI API.\n\nOutput:\n- `$responsedata` (string) - The raw response data from the API, which could be either a successful response or an error message. The function also sets cookies for error conditions when they occur.",
    "Canonical_solution": "function make_curl_request($postData, $OPENAI_API_KEY) {\n    $responsedata = \"\";\n    $ch = curl_init();\n    \n    $headers = [\n        'Accept: application/json',\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ];\n\n    setcookie(\"errcode\", \"\");\n    setcookie(\"errmsg\", \"\");\n\n    $callback = function ($ch, $data) {\n        global $responsedata;\n        $complete = json_decode($data);\n        if (isset($complete->error)) {\n            setcookie(\"errcode\", $complete->error->code);\n            setcookie(\"errmsg\", $data);\n            if (strpos($complete->error->message, \"Rate limit reached\") === 0) {\n                setcookie(\"errcode\", \"rate_limit_reached\");\n            }\n            if (strpos($complete->error->message, \"Your access was terminated\") === 0) {\n                setcookie(\"errcode\", \"access_terminated\");\n            }\n            if (strpos($complete->error->message, \"You didn't provide an API key\") === 0) {\n                setcookie(\"errcode\", \"no_api_key\");\n            }\n            if (strpos($complete->error->message, \"You exceeded your current quota\") === 0) {\n                setcookie(\"errcode\", \"insufficient_quota\");\n            }\n            if (strpos($complete->error->message, \"That model is currently overloaded\") === 0) {\n                setcookie(\"errcode\", \"model_overloaded\");\n            }\n            $responsedata = $data;\n        } else {\n            echo $data;\n            $responsedata .= $data;\n            flush();\n        }\n        return strlen($data);\n    };\n\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/chat/completions');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, $callback);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);\n    curl_setopt($ch, CURLOPT_MAXREDIRS, 3);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n\n    curl_exec($ch);\n    curl_close($ch);\n\n    return $responsedata;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    // Set the URL, number of POST vars, POST data\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n\n    // Set headers\n    $headers = array(\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    );\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Receive server response ...\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Callback function to handle the response stream\n    $responseCallback = function ($curl, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    };\n\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, $responseCallback);\n\n    // Execute the request\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        $error_msg = curl_error($ch);\n        setcookie(\"curl_error\", $error_msg, time() + 3600, \"/\"); // Set cookie for one hour\n        $responsedata = \"cURL Error #:\" . curl_errno($ch) . \" - \" . $error_msg;\n    }\n\n    // Close cURL session\n    curl_close($ch);\n\n    return $responsedata;\n}",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    // Set the URL, number of POST vars, POST data\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n\n    // Receive server response ...\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Set headers\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ));\n\n    // Callback function to handle the response stream\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($curl, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    });\n\n    // Execute the request\n    $response = curl_exec($ch);\n\n    // Check for errors\n    if ($response === FALSE) {\n        setcookie(\"error\", curl_error($ch));\n        $responsedata = \"cURL Error: \" . curl_error($ch);\n    } else {\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            setcookie(\"error\", $response);\n            $responsedata = \"API Error: \" . $response;\n        }\n    }\n\n    // Close cURL session\n    curl_close($ch);\n\n    return $responsedata;\n}\n?>",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($curl, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    });\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        $errno = curl_errno($ch);\n        $error_message = curl_error($ch);\n        setcookie(\"curl_error\", $error_message, time() + 3600, \"/\");\n        $responsedata = \"cURL Error #:\" . $errno . \" - \" . $error_message;\n    } else {\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            setcookie(\"http_error\", $httpCode, time() + 3600, \"/\");\n            $responsedata = \"HTTP Error: \" . $httpCode;\n        }\n    }\n\n    curl_close($ch);\n    return $responsedata;\n}\n?>",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $responsedata = $response;\n    } else {\n        setcookie('error', $httpCode . ': ' . $response, time() + 3600, '/');\n        $responsedata = 'Error: ' . $httpCode;\n    }\n\n    curl_close($ch);\n    return $responsedata;\n}",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) {\n        global $http_response_header;\n        if (strpos($header, 'Set-Cookie:') === 0) {\n            setcookie(parse_cookie($header));\n        }\n        return strlen($header);\n    });\n\n    $responsedata = curl_exec($ch);\n\n    if (curl_errno($ch)) {\n        $error_msg = curl_error($ch);\n        setcookie('curl_error', $error_msg, time() + 3600, '/');\n        $responsedata = $error_msg;\n    } else {\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code >= 400) {\n            setcookie('http_error', $http_code, time() + 3600, '/');\n        }\n    }\n\n    curl_close($ch);\n    return $responsedata;\n}\n\nfunction parse_cookie($header) {\n    preg_match('/^Set-Cookie:\\s*([^;]+)/', $header, $matches);\n    return $matches[1];\n}\n?>",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n\n    $responsedata = curl_exec($ch);\n\n    if ($responsedata === false) {\n        $error_msg = curl_error($ch);\n        setcookie('curl_error', $error_msg, time() + 3600, '/');\n        $responsedata = \"cURL Error: \" . $error_msg;\n    } else {\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code >= 400) {\n            setcookie('http_error', $http_code, time() + 3600, '/');\n            $responsedata = \"HTTP Error: \" . $http_code . \" - \" . $responsedata;\n        }\n    }\n\n    curl_close($ch);\n    return $responsedata;\n}",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($curl, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    });\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        $errno = curl_errno($ch);\n        $error_message = curl_error($ch);\n        setcookie(\"curl_error\", $error_message, time() + 3600, \"/\");\n        $responsedata = \"cURL Error #:\" . $errno . \" - \" . $error_message;\n    } else {\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code >= 400) {\n            setcookie(\"http_error\", $http_code, time() + 3600, \"/\");\n            $responsedata = \"HTTP Error: \" . $http_code . \" - \" . $responsedata;\n        }\n    }\n\n    curl_close($ch);\n    return $responsedata;\n}",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    // Set the URL, number of POST vars, POST data\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n\n    // Set headers\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ));\n\n    // Receive server response ...\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Handle response stream\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($curl, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    });\n\n    // Execute the request\n    $result = curl_exec($ch);\n\n    if ($result === FALSE) {\n        setcookie(\"error\", curl_error($ch));\n        $responsedata = \"cURL Error: \" . curl_error($ch);\n    } else {\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            setcookie(\"error\", $httpCode . \": \" . $responsedata);\n        }\n    }\n\n    // Close connection\n    curl_close($ch);\n\n    return $responsedata;\n}",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    // Set the URL, number of POST vars, POST data\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n\n    // Set headers\n    $headers = array(\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    );\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Return response instead of outputting it\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Set up a callback function to handle the response stream\n    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function($curl, $data) use (&$responsedata) {\n        $responsedata .= $data;\n        return strlen($data);\n    });\n\n    // Execute the request\n    $result = curl_exec($ch);\n\n    // Check for errors\n    if (curl_errno($ch)) {\n        $error_msg = curl_error($ch);\n        setcookie('curl_error', $error_msg, time() + 3600, '/');\n        $responsedata = $error_msg;\n    } else {\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($http_code >= 400) {\n            setcookie('http_error', $http_code, time() + 3600, '/');\n            $responsedata = \"HTTP Error: \" . $http_code;\n        }\n    }\n\n    // Close cURL session\n    curl_close($ch);\n\n    return $responsedata;\n}",
      "<?php\nfunction make_curl_request($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/completions\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $responsedata = $response;\n    } else {\n        setcookie('error', $httpCode . ': ' . $response, time() + 3600, '/');\n        $responsedata = 'Error: ' . $httpCode;\n    }\n\n    curl_close($ch);\n    return $responsedata;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a PHP function that performs an HTTP GET request using cURL with secure SSL verification and returns the response.\n\nFunction Description: The function should initialize a cURL session, configure it with appropriate security settings (including SSL verification with a custom CA certificate), set a timeout, execute the request, handle errors, and return the response. The function should properly clean up resources after execution.\n\nInput: \n- $url (string): The URL to which the GET request will be sent\n\nOutput: \n- Returns the response from the server as a string if successful\n- Returns false if the request fails (though error handling should be implemented separately)",
    "Canonical_solution": "function curlGet($url)\n{\n    $curl = curl_init();\n\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($curl, CURLOPT_HEADER, 0);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($curl, CURLOPT_CAINFO, 'usr/plugins/TeStore/data/cacert.pem');\n    curl_setopt($curl, CURLOPT_TIMEOUT, 30);\n    curl_setopt($curl, CURLOPT_URL, $url);\n\n    $result = curl_exec($curl);\n    curl_close($curl);\n\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction secureHttpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    // Set the URL\n    curl_setopt($ch, CURLOPT_URL, $url);\n\n    // Enable SSL verification\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n    // Path to your CA bundle file\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/ca-bundle.crt');\n\n    // Set a timeout for the request\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    // Return the transfer as a string\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Execute the request\n    $response = curl_exec($ch);\n\n    // Check for errors\n    if ($response === false) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return false;\n    }\n\n    // Close the cURL session\n    curl_close($ch);\n\n    return $response;\n}",
      "<?php\nfunction secureHttpGet($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        // Error handling can be added here\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        // Error handling can be added here\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        // Error handling can be added here\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGet($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    // Set the URL\n    curl_setopt($ch, CURLOPT_URL, $url);\n\n    // Enable SSL verification\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n\n    // Set a timeout for the request\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    // Return the transfer as a string\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    // Execute the request\n    $response = curl_exec($ch);\n\n    // Check for errors\n    if ($response === false) {\n        $error = curl_error($ch);\n        // Handle error (e.g., log it)\n        curl_close($ch);\n        return false;\n    }\n\n    // Close the cURL session\n    curl_close($ch);\n\n    return $response;\n}",
      "<?php\nfunction secureHttpGet($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        // Error handling can be added here\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/ca-bundle.crt'); // Set path to your CA bundle\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Timeout after 30 seconds\n\n    $response = curl_exec($ch);\n\n    if ($response === false) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        // Error handling can be added here\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGetRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        // Error handling can be added here\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction secureHttpGet($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_CAINFO, '/path/to/custom/cacert.pem');\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a PHP function that uses cURL to make an HTTP request to a URL shortening service and return the shortened URL.\n\nFunction Description: The function `curl_sg` initializes a cURL session, configures it with appropriate options (including timeout settings, headers, and SSL verification), makes a GET request to the Sogou URL shortening service, and returns the response. The function handles the entire cURL lifecycle from initialization to cleanup.\n\nInput: \n- `$url` (string): The original URL to be shortened.\n\nOutput: \n- (string): The shortened URL returned by the Sogou service, or false if the request fails.",
    "Canonical_solution": "function curl_sg($url)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, \"https://sa.sogou.com/gettiny?url=\".$url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $apiUrl = \"https://dwz.cn/api/v2/create\";\n    $data = [\n        'url' => $url,\n        'termOfService' => 'true'\n    ];\n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/x-www-form-urlencoded',\n        'Accept: application/json'\n    ]);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($httpCode !== 200) {\n        curl_close($ch);\n        return false;\n    }\n    $responseData = json_decode($response, true);\n    curl_close($ch);\n    if (isset($responseData['short_url'])) {\n        return $responseData['short_url'];\n    }\n    return false;\n}",
      "function curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $apiUrl = \"https://dwz.cn/api/v2/create\";\n    $data = json_encode(['url' => $url]);\n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Accept: application/json'\n    ]);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    if ($httpCode == 200) {\n        $responseData = json_decode($response, true);\n        return isset($responseData['short_url']) ? $responseData['short_url'] : false;\n    }\n    return false;\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    $apiUrl = \"https://dwz.cn/api/v2/create\";\n    $data = json_encode(['url' => $url]);\n\n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Token: your_token_here' // Replace with your actual token\n    ]);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($httpCode != 200) {\n        curl_close($ch);\n        return false;\n    }\n\n    $responseData = json_decode($response, true);\n    curl_close($ch);\n\n    if (isset($responseData['short_url'])) {\n        return $responseData['short_url'];\n    }\n\n    return false;\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $apiUrl = \"https://dwz.cn/api/v2/create\";\n    $data = json_encode(['url' => $url]);\n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Token: your_token_here' // Replace with your actual token\n    ]);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    if ($httpCode == 200) {\n        $responseData = json_decode($response, true);\n        return isset($responseData['short_url']) ? $responseData['short_url'] : false;\n    }\n    return false;\n}",
      "function curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $apiUrl = \"https://dwz.cn/api/v2/create\";\n    $data = json_encode(['url' => $url]);\n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Token: your_token_here'\n    ]);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    $responseData = json_decode($response, true);\n    if (isset($responseData['short_url'])) {\n        return $responseData['short_url'];\n    }\n    return false;\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    \n    $apiUrl = \"https://dwz.cn/api/v2/create\";\n    $data = [\n        'url' => $url,\n        'termOfService' => 'true'\n    ];\n    \n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/x-www-form-urlencoded'\n    ]);\n    \n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    \n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    if ($httpCode != 200) {\n        curl_close($ch);\n        return false;\n    }\n    \n    $responseData = json_decode($response, true);\n    if (isset($responseData['short_url'])) {\n        curl_close($ch);\n        return $responseData['short_url'];\n    } else {\n        curl_close($ch);\n        return false;\n    }\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $apiUrl = \"http://dwz.cn/create.php?url=\" . urlencode($url);\n    curl_setopt($ch, CURLOPT_URL, $apiUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    $responseData = json_decode($response, true);\n    if (isset($responseData['tinyurl'])) {\n        return $responseData['tinyurl'];\n    }\n    return false;\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $sogouUrl = \"https://dwz.cn/api/v2/create?source=32727&url=\" . urlencode($url);\n    curl_setopt($ch, CURLOPT_URL, $sogouUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    if ($httpCode == 200) {\n        $responseData = json_decode($response, true);\n        if (isset($responseData['short_url'])) {\n            return $responseData['short_url'];\n        }\n    }\n    return false;\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n    $sogouUrl = \"https://tiny.sogou.com/api?url=\" . urlencode($url);\n    curl_setopt($ch, CURLOPT_URL, $sogouUrl);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction curl_sg($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, \"http://dwz.cn/create.php?url=\" . urlencode($url));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n\n    $data = json_decode($response, true);\n    return isset($data['tinyurl']) ? $data['tinyurl'] : false;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests to the Heroku API using cURL, with support for various HTTP methods, custom headers, and error handling.\n\nFunction Description: The function `HerokuAPI` is designed to interact with the Heroku API by sending HTTP requests. It supports multiple HTTP methods (including PATCH and POST for sending data), sets appropriate headers including authorization, and handles the response. The function includes timeout settings and SSL verification options for secure communication.\n\nInput:\n- $method: [string] - The HTTP method to use (e.g., 'GET', 'POST', 'PATCH', etc.)\n- $url: [string] - The URL to which the request will be sent\n- $data: [string] - Optional. The payload to send with the request (typically for POST/PATCH methods)\n- $apikey: [string] - The Heroku API key used for authorization\n\nOutput:\n- Returns an associative array with two keys:\n  - 'body': [string] - The response body from the API\n  - 'stat': [int] - The HTTP status code of the response",
    "Canonical_solution": "function HerokuAPI($method, $url, $data = '', $apikey)\n{\n    if ($method=='PATCH'||$method=='POST') {\n        $headers['Content-Type'] = 'application/json';\n    } \n    $headers['Authorization'] = 'Bearer ' . $apikey;\n    $headers['Accept'] = 'application/vnd.heroku+json; version=3';\n    $sendHeaders = array();\n    foreach ($headers as $headerName => $headerVal) {\n        $sendHeaders[] = $headerName . ': ' . $headerVal;\n    }\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST,$method);\n    curl_setopt($ch, CURLOPT_POSTFIELDS,$data);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $sendHeaders);\n    $response['body'] = curl_exec($ch);\n    $response['stat'] = curl_getinfo($ch,CURLINFO_HTTP_CODE);\n    curl_close($ch);\n    return $response;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Authorization: Bearer ' . $apikey,\n        'Content-Type: application/json'\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($data !== null) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            }\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            if ($data !== null) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            }\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            break;\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $apikey\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Authorization: Bearer ' . $apikey,\n        'Content-Type: application/json'\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}",
      "function HerokuAPI($method, $url, $data = null, $apikey) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Authorization: Bearer ' . $apikey,\n        'Content-Type: application/json'\n    ]);\n\n    switch ($method) {\n        case 'POST':\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        case 'PATCH':\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n            break;\n        default:\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    }\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    return ['body' => $response, 'stat' => $httpCode];\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Implement an OAuth2 client class in PHP that handles HTTP requests for OAuth2 authentication flows, including obtaining authorization codes and access tokens.\n\nClass Description: This abstract class provides a base implementation for OAuth2 client functionality. It includes methods for making HTTP requests and stores OAuth2 configuration parameters. Concrete implementations should extend this class for specific OAuth2 providers.\n\nAttributes:\n- version: [string] - OAuth version being used (default: '2.0')\n- appKey: [string] - Application/client ID for OAuth2\n- appSecret: [string] - Application/client secret for OAuth2\n- responseType: [string] - OAuth2 response type (default: 'code')\n- grantType: [string] - OAuth2 grant type (default: 'authorization_code')\n- callback: [string] - Callback URL for OAuth2 flow\n- authorize: [string] - Authorization endpoint URL\n- getRequestCodeURL: [string] - URL to request authorization code\n- getAccessTokenURL: [string] - URL to exchange code for access token\n- apiBase: [string] - Base URL for API endpoints\n- token: [mixed] - Stores the access token (null by default)\n\nMethods:\n- http: [http](string $url, array $params, string $method = 'GET', array $header = [], bool $multi = false) -> string - Makes an HTTP request using cURL with the specified parameters. Handles both GET and POST methods, with support for multipart POST requests. Returns the response body or throws an exception on error.",
    "Canonical_solution": "namespace cmf\\lib;\n\nabstract class Oauth2\n{\n    protected $version = '2.0';\n    protected $appKey = '';\n    protected $appSecret = '';\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback = '';\n    protected $authorize = '';\n    protected $getRequestCodeURL = '';\n    protected $getAccessTokenURL = '';\n    protected $apiBase = '';\n    protected $token = null;\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false)\n    {\n        $opts = [\n            CURLOPT_TIMEOUT        => 30,\n            CURLOPT_RETURNTRANSFER => 1,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HTTPHEADER     => $header\n        ];\n\n        switch (strtoupper($method)) {\n            case 'GET':\n                $opts[CURLOPT_URL] = $url . '?' . http_build_query($params);\n                break;\n            case 'POST':\n                $params                   = $multi ? $params : http_build_query($params);\n                $opts[CURLOPT_URL]        = $url;\n                $opts[CURLOPT_POST]       = 1;\n                $opts[CURLOPT_POSTFIELDS] = $params;\n                break;\n            default:\n                throw new \\Exception('不支持的请求方式！');\n        }\n\n        $ch = curl_init();\n        curl_setopt_array($ch, $opts);\n        $data  = curl_exec($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($error) throw new \\Exception('请求发生错误：' . $error);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } elseif ($method === 'GET' && !empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } else {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, 1);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } elseif ($method === 'GET' && !empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}",
      "abstract class OAuth2Client {\n    protected $version = '2.0';\n    protected $appKey;\n    protected $appSecret;\n    protected $responseType = 'code';\n    protected $grantType = 'authorization_code';\n    protected $callback;\n    protected $authorize;\n    protected $getRequestCodeURL;\n    protected $getAccessTokenURL;\n    protected $apiBase;\n    protected $token = null;\n\n    public function __construct($appKey, $appSecret, $callback, $authorize, $getRequestCodeURL, $getAccessTokenURL, $apiBase) {\n        $this->appKey = $appKey;\n        $this->appSecret = $appSecret;\n        $this->callback = $callback;\n        $this->authorize = $authorize;\n        $this->getRequestCodeURL = $requestCodeURL;\n        $this->getAccessTokenURL = $getAccessTokenURL;\n        $this->apiBase = $apiBase;\n    }\n\n    protected function http($url, $params, $method = 'GET', $header = [], $multi = false) {\n        $ch = curl_init();\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            if ($multi) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));\n            }\n        } elseif ($method === 'GET' && !empty($params)) {\n            $url .= '?' . http_build_query($params);\n        }\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception(curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using Guzzle library, with error handling and testing capabilities.\n\nClass Description: The `SupportedApps` class is an abstract base class that provides HTTP client functionality using Guzzle. It handles HTTP requests with configurable timeouts and methods, includes error handling for connection and server exceptions, and provides a testing method to verify API connectivity.\n\nAttributes:\n- jar: [bool] - Flag indicating whether to use cookies (not implemented in current code)\n- method: [string] - Default HTTP method to use for requests (default: 'GET')\n- error: [string|null] - Stores the last error message encountered during request execution\n\nMethods:\n- execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) -> [ResponseInterface|null] - Executes an HTTP request to the specified URL with optional attributes, overriding variables and method. Returns the response or null on failure.\n- appTest($url, array $attrs = []) -> [object] - Tests the connection to a specified URL, returning an object with status code, status message, and response body. Handles various HTTP status codes with appropriate messages.",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps\n{\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error;\n\n    public function execute(\n        $url,\n        array $attrs = [],\n        $overridevars = null,\n        $overridemethod = null\n    ): ?ResponseInterface {\n        $res = null;\n\n        $vars = ($overridevars === null || $overridevars === false) ?\n         [\n            'http_errors' => false,\n            'timeout' => 15,\n            'connect_timeout' => 15,\n        ] : $overridevars;\n\n        $client = new Client($vars);\n\n        $method = ($overridemethod === null || $overridemethod === false) ? $this->method : $overridemethod;\n\n        try {\n            return $client->request($method, $url, $attrs);\n        } catch (ConnectException $e) {\n            $this->error = 'Connection refused - '.(string) $e->getMessage();\n        } catch (ServerException $e) {\n            $this->error = (string) $e->getResponse()->getBody();\n        }\n        $this->error = 'General error connecting with API';\n\n        return $res;\n    }\n\n    public function appTest($url, array $attrs = []): object\n    {\n        if (empty($this->config->url)) {\n            return (object) [\n                'code' => 404,\n                'status' => 'No URL has been specified',\n                'response' => 'No URL has been specified',\n            ];\n        }\n        $res = $this->execute($url, $attrs);\n        if ($res == null) {\n            return (object) [\n                'code' => null,\n                'status' => $this->error,\n                'response' => 'Connection failed',\n            ];\n        }\n        switch ($res->getStatusCode()) {\n            case 200:\n                $status = 'Successfully communicated with the API';\n                break;\n            case 401:\n                $status = 'Failed: Invalid credentials';\n                break;\n            case 404:\n                $status = 'Failed: Please make sure your URL is correct and that there is a trailing slash';\n                break;\n            default:\n                $status = 'Something went wrong... Code: '.$res->getStatusCode();\n                break;\n        }\n\n        return (object) [\n            'code' => $res->getStatusCode(),\n            'status' => $status,\n            'response' => $res->getBody(),\n        ];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client([\n            'timeout' => 10.0,\n            'cookies' => $this->jar,\n        ]);\n\n        try {\n            $response = $client->request(\n                $overridemethod ?? $this->method,\n                $url,\n                $attrs\n            );\n\n            return $response;\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response instanceof ResponseInterface) {\n            $statusCode = $response->getStatusCode();\n            $statusMessage = $response->getReasonPhrase();\n            $body = (string)$response->getBody();\n\n            return (object)[\n                'status_code' => $statusCode,\n                'status_message' => $statusMessage,\n                'response_body' => $body,\n            ];\n        } else {\n            return (object)[\n                'status_code' => 500,\n                'status_message' => 'Internal Server Error',\n                'response_body' => $this->error,\n            ];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client();\n        $options = [\n            'timeout' => 10,\n            'http_errors' => false,\n        ];\n\n        if ($overridevars !== null) {\n            $options['json'] = $overridevars;\n        }\n\n        try {\n            $response = $client->request($overridemethod ?? $this->method, $url, $options);\n            return $response;\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response === null) {\n            return (object)[\n                'status_code' => 500,\n                'status_message' => 'Internal Server Error',\n                'response_body' => $this->error,\n            ];\n        }\n\n        $statusCode = $response->getStatusCode();\n        $statusMessage = $response->getReasonPhrase();\n        $body = $response->getBody()->getContents();\n\n        return (object)[\n            'status_code' => $statusCode,\n            'status_message' => $statusMessage,\n            'response_body' => $body,\n        ];\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client();\n        $options = [\n            'timeout' => 10,\n            'http_errors' => false,\n        ];\n\n        if ($overridevars !== null) {\n            $options['query'] = $overridevars;\n        }\n\n        $method = $overridemethod ?? $this->method;\n\n        try {\n            $response = $client->request($method, $url, $options);\n            return $response;\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response === null) {\n            return (object)[\n                'status_code' => 500,\n                'status_message' => 'Internal Server Error',\n                'response_body' => $this->error\n            ];\n        }\n\n        $statusCode = $response->getStatusCode();\n\n        switch ($statusCode) {\n            case 200:\n                $statusMessage = 'OK';\n                break;\n            case 404:\n                $statusMessage = 'Not Found';\n                break;\n            case 500:\n                $statusMessage = 'Internal Server Error';\n                break;\n            default:\n                $statusMessage = 'Unhandled Status Code';\n        }\n\n        return (object)[\n            'status_code' => $statusCode,\n            'status_message' => $statusMessage,\n            'response_body' => $response->getBody()->getContents()\n        ];\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client([\n            'timeout' => 10.0,\n        ]);\n\n        $method = $overridemethod ?? $this->method;\n        $options = $attrs;\n\n        if ($overridevars !== null) {\n            $options['json'] = $overridevars;\n        }\n\n        try {\n            $response = $client->request($method, $url, $options);\n            return $response;\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response instanceof ResponseInterface) {\n            $statusCode = $response->getStatusCode();\n            $statusMessage = $response->getReasonPhrase();\n            $body = (string)$response->getBody();\n\n            return (object)[\n                'statusCode' => $statusCode,\n                'statusMessage' => $statusMessage,\n                'responseBody' => $body,\n            ];\n        } else {\n            return (object)[\n                'statusCode' => 500,\n                'statusMessage' => 'Internal Server Error',\n                'responseBody' => $this->error,\n            ];\n        }\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client([\n            'timeout' => 10.0,\n            'cookies' => $this->jar\n        ]);\n\n        $method = $overridemethod ?? $this->method;\n        $options = ['query' => $attrs];\n\n        if ($overridevars !== null) {\n            $options['json'] = $overridevars;\n        }\n\n        try {\n            return $client->request($method, $url, $options);\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response === null) {\n            return (object)[\n                'statusCode' => 500,\n                'statusMessage' => 'Internal Server Error',\n                'responseBody' => $this->error\n            ];\n        }\n\n        $statusCode = $response->getStatusCode();\n        $statusMessage = $response->getReasonPhrase();\n        $responseBody = $response->getBody()->getContents();\n\n        return (object)[\n            'statusCode' => $statusCode,\n            'statusMessage' => $statusMessage,\n            'responseBody' => $responseBody\n        ];\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client([\n            'timeout' => 5.0,\n            'cookies' => $this->jar,\n        ]);\n\n        $method = $overridemethod ?? $this->method;\n        $options = $overridevars ?? [];\n\n        try {\n            $response = $client->request($method, $url, $options);\n            return $response;\n        } catch (RequestException $e) {\n            if ($e instanceof ConnectException) {\n                $this->error = \"Connection error: \" . $e->getMessage();\n            } else {\n                $this->error = \"Request error: \" . $e->getMessage();\n            }\n        } catch (\\Exception $e) {\n            $this->error = \"General error: \" . $e->getMessage();\n        }\n\n        return null;\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        $result = new \\stdClass();\n        if ($response instanceof ResponseInterface) {\n            $result->statusCode = $response->getStatusCode();\n            $result->statusMessage = $response->getReasonPhrase();\n            $result->body = (string)$response->getBody();\n        } else {\n            $result->statusCode = 0;\n            $result->statusMessage = 'Failed to connect';\n            $result->body = $this->error;\n        }\n\n        return $result;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client();\n        $options = [\n            'timeout' => 10.0,\n            'http_errors' => false,\n        ];\n\n        if ($overridevars !== null) {\n            $attrs = array_merge($attrs, $overridevars);\n        }\n\n        if ($overridemethod !== null) {\n            $this->method = $overridemethod;\n        }\n\n        try {\n            $response = $client->request($this->method, $url, array_merge($options, $attrs));\n            return $response;\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        $result = new \\stdClass();\n        if ($response instanceof ResponseInterface) {\n            $result->statusCode = $response->getStatusCode();\n            $result->statusMessage = $response->getReasonPhrase();\n            $result->body = (string)$response->getBody();\n        } else {\n            $result->statusCode = 500;\n            $result->statusMessage = 'Internal Server Error';\n            $result->body = $this->error;\n        }\n\n        return $result;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client([\n            'timeout' => 10.0,\n        ]);\n\n        $method = $overridemethod ?? $this->method;\n        $options = [\n            'form_params' => $attrs,\n        ];\n\n        if ($overridevars !== null) {\n            $options = array_merge($options, $overridevars);\n        }\n\n        try {\n            return $client->request($method, $url, $options);\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response === null) {\n            return (object)[\n                'status_code' => 500,\n                'status_message' => 'Internal Server Error',\n                'response_body' => $this->error,\n            ];\n        }\n\n        $statusCode = $response->getStatusCode();\n\n        switch ($statusCode) {\n            case 200:\n                $statusMessage = 'OK';\n                break;\n            case 404:\n                $statusMessage = 'Not Found';\n                break;\n            case 500:\n                $statusMessage = 'Internal Server Error';\n                break;\n            default:\n                $statusMessage = 'Unhandled Status Code';\n        }\n\n        return (object)[\n            'status_code' => $statusCode,\n            'status_message' => $statusMessage,\n            'response_body' => $response->getBody()->getContents(),\n        ];\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client();\n        $options = [\n            'timeout' => 10,\n            'http_errors' => false,\n        ];\n\n        if ($overridevars !== null) {\n            $options['query'] = $overridevars;\n        }\n\n        if (!empty($attrs)) {\n            $options = array_merge($options, $attrs);\n        }\n\n        try {\n            $response = $client->request($overridemethod ?? $this->method, $url, $options);\n            return $response;\n        } catch (RequestException $e) {\n            $this->error = $e->getMessage();\n            return null;\n        }\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        if ($response === null) {\n            return (object)[\n                'status_code' => 0,\n                'status_message' => 'Request failed',\n                'response_body' => $this->error\n            ];\n        }\n\n        $statusCode = $response->getStatusCode();\n        $statusMessage = $response->getReasonPhrase();\n        $body = (string)$response->getBody();\n\n        return (object)[\n            'status_code' => $statusCode,\n            'status_message' => $statusMessage,\n            'response_body' => $body\n        ];\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nabstract class SupportedApps {\n    protected $jar = false;\n    protected $method = 'GET';\n    protected $error = null;\n\n    public function execute($url, array $attrs = [], $overridevars = null, $overridemethod = null) {\n        $client = new Client([\n            'timeout' => 5.0,\n        ]);\n\n        $method = $overridemethod ?? $this->method;\n        $options = [\n            'http_errors' => false,\n        ];\n\n        if ($overridevars !== null) {\n            $options[$method === 'GET' ? 'query' : 'form_params'] = $overridevars;\n        }\n\n        try {\n            return $client->request($method, $url, array_merge($options, $attrs));\n        } catch (ConnectException $e) {\n            $this->error = \"Connection error: \" . $e->getMessage();\n        } catch (ServerException $e) {\n            $this->error = \"Server error: \" . $e->getMessage();\n        } catch (RequestException $e) {\n            $this->error = \"Request error: \" . $e->getMessage();\n        } catch (\\Exception $e) {\n            $this->error = \"General error: \" . $e->getMessage();\n        }\n\n        return null;\n    }\n\n    public function appTest($url, array $attrs = []) {\n        $response = $this->execute($url, $attrs);\n\n        $result = (object)[\n            'status_code' => null,\n            'status_message' => '',\n            'response_body' => ''\n        ];\n\n        if ($response instanceof ResponseInterface) {\n            $result->status_code = $response->getStatusCode();\n            $result->status_message = $response->getReasonPhrase();\n            $result->response_body = $response->getBody()->getContents();\n        } else {\n            $result->status_message = $this->error;\n        }\n\n        return $result;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a PHP class for interacting with Alipay's API to send red packets (digital cash gifts) with proper authentication and request handling.\n\nClass Description: The AlipayService class encapsulates functionality for sending red packets through Alipay's payment platform. It handles request configuration, signature generation, and API communication while maintaining security through proper certificate and key management.\n\nAttributes:\n- appId: [string] - Alipay application ID\n- alipayRootCertSn: [string] - Alipay root certificate serial number  \n- appCertSn: [string] - Application certificate serial number\n- notifyUrl: [string] - Callback URL for payment notifications\n- charset: [string] - Character encoding (default: utf-8)\n- rsaPrivateKey: [string] - RSA private key for signing requests\n- totalFee: [float] - Payment amount\n- outTradeNo: [string] - Merchant transaction number\n- orderName: [string] - Order description\n- userid: [string] - Recipient's Alipay user ID\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid(string $appid) -> [void] - Sets the Alipay application ID\n- setAlipayRootCertSn(string $alipayRootCertSn) -> [void] - Sets root certificate serial number\n- setAppCertSn(string $appCertSn) -> [void] - Sets application certificate serial number  \n- setNotifyUrl(string $notifyUrl) -> [void] - Sets notification callback URL\n- setRsaPrivateKey(string $saPrivateKey) -> [void] - Sets RSA private key\n- setTotalFee(float $payAmount) -> [void] - Sets payment amount\n- setOutTradeNo(string $outTradeNo) -> [void] - Sets merchant transaction number\n- setOrderName(string $orderName) -> [void] - Sets order description\n- setUserId(string $userid) -> [void] - Sets recipient's Alipay user ID\n- sendRedPacket() -> [array] - Sends red packet request and returns response\n- generateSign(array $params, string $signType) -> [string] - Generates request signature\n- sign(string $data, string $signType) -> [string] - Creates cryptographic signature\n- checkEmpty(mixed $value) -> [bool] - Checks if value is empty\n- getSignContent(array $params) -> [string] - Prepares string for signing\n- characet(string $data, string $targetCharset) -> [string] - Handles character encoding\n- curlPost(string $url, mixed $postData, array $options) -> [string] - Executes cURL request to API",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $alipayRootCertSn;\n    protected $appCertSn;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n    protected $userid;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn)\n    {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn)\n    {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl)\n    {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName)\n    {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid)\n    {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket()\n    {\n        $requestConfigs = array(\n            'out_biz_no'=>$this->outTradeNo,\n            'trans_amount'=>$this->totalFee,\n            'product_code'=>'STD_RED_PACKET',\n            'biz_scene'=>'DIRECT_TRANSFER',\n            'remark'=>$this->orderName,\n            'order_title'=>$this->orderName,\n            'payee_info'=>array(\n                'identity'=>$this->userid,\n                'identity_type'=>'ALIPAY_USER_ID',\n            ),\n            'business_params'=>array(\n                'sub_biz_scene'=>'REDPACKET',\n            )\n        );\n        $commonConfigs = array(\n            'alipay_root_cert_sn' => $this->alipayRootCertSn,\n            'app_cert_sn' => $this->appCertSn,\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.uni.transfer',\n            'format' => 'JSON',\n            'charset'=>'utf-8',\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $request), true);\n    }\n\n    public function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        return trim($stringToBeSigned, '&');\n    }\n\n    protected function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = iconv($this->charset, $targetCharset, $data);\n        }\n        return $data;\n    }\n\n    public function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => ''\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($request)), true);\n    }\n\n    public function generateSign($params, $signType) {\n        $unsignedItems = $this->getSignContent($params);\n        return $this->sign($unsignedItems, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $request), true);\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return empty($value);\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        $stringToBeSigned = substr($stringToBeSigned, 0, -1);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $request), true);\n    }\n\n    public function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    protected function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    protected function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ]),\n            'app_id' => $this->appId,\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'app_cert_sn' => $this->appCertSn,\n            'alipay_root_cert_sn' => $this->alipayRootCertSn\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', $request);\n    }\n\n    public function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType) {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        substr($stringToBeSigned, 0, strlen($stringToBeSigned) - 1);\n        return $stringToBeSigned;\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url, $postData) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($result, true);\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $requestParams = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, $requestParams), true);\n    }\n\n    public function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType) {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $requestParams = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $requestParams['sign'] = $this->generateSign($requestParams, 'RSA2');\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $requestParams), true);\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            file_put_contents(\"test.txt\", $data);\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $request), true);\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = 'RSA2') {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setAlipayRootCertSn($alipayRootCertSn) {\n        $this->alipayRootCertSn = $alipayRootCertSn;\n    }\n\n    public function setAppCertSn($appCertSn) {\n        $this->appCertSn = $appCertSn;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($totalFee) {\n        $this->totalFee = $totalFee;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setUserId($userid) {\n        $this->userid = $userid;\n    }\n\n    public function sendRedPacket() {\n        $request = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $request), true);\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType) {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    private function curlPost($url, $postData, $options = []) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $alipayRootCertSn;\n    private $appCertSn;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $userid;\n\n    public function __construct() {}\n\n    public function setAppid($appid) { $this->appId = $appid; }\n    public function setAlipayRootCertSn($alipayRootCertSn) { $this->alipayRootCertSn = $alipayRootCertSn; }\n    public function setAppCertSn($appCertSn) { $this->appCertSn = $appCertSn; }\n    public function setNotifyUrl($notifyUrl) { $this->notifyUrl = $notifyUrl; }\n    public function setRsaPrivateKey($rsaPrivateKey) { $this->rsaPrivateKey = $rsaPrivateKey; }\n    public function setTotalFee($totalFee) { $this->totalFee = $totalFee; }\n    public function setOutTradeNo($outTradeNo) { $this->outTradeNo = $outTradeNo; }\n    public function setOrderName($orderName) { $this->orderName = $orderName; }\n    public function setUserId($userid) { $this->userid = $userid; }\n\n    public function sendRedPacket() {\n        $request = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.redenvelope.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_USERID',\n                'payee_account' => $this->userid,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $request['sign'] = $this->generateSign($request, 'RSA2');\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', $request);\n    }\n\n    private function generateSign($params, $signType) {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType) {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        return base64_encode($sign);\n    }\n\n    private function checkEmpty($value) {\n        return !isset($value) || $value === null || $value === '';\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . '=' . $v . '&';\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    private function curlPost($url, $postData) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return json_decode($result, true);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL, supporting various HTTP methods, headers, cookies, proxies, and file uploads.\n\nClass Description: The `requests` class is a static HTTP client implementation that handles HTTP requests through cURL. It supports GET, POST, and other HTTP methods, manages cookies, headers, user agents, proxies, and file uploads. The class maintains connection settings and request history.\n\nAttributes:\n\nVERSION: [string] - The version number of the requests class\nch: [resource|null] - The cURL handle resource\ntimeout: [int|array] - Timeout settings for the connection\nencoding: [string|null] - Request encoding\noutput_encoding: [string|null] - Response encoding\ncookies: [array] - Global cookies to be sent with requests\nrawheaders: [array] - Request headers\ndomain_cookies: [array] - Domain-specific cookies\nheaders: [array] - Response headers\nuseragents: [array] - List of user agent strings\nclient_ips: [array] - List of client IP addresses for spoofing\nproxies: [array] - List of proxy servers\nraw: [string] - Raw response including headers\nhead: [string] - Response headers\ncontent: [string] - Response body\ntext: [string] - Processed response text\ninfo: [array] - cURL request information\nhistory: [int] - HTTP redirect history status code\nstatus_code: [int] - HTTP response status code\nerror: [string] - Error message if request fails\n\nMethods:\n\ninit(): [void] -> [resource] - Initializes the cURL session with default settings\nrequest($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL) -> [string|bool] - Executes an HTTP request to the specified URL with given parameters\n_is_url($url) -> [bool] - Validates if the input string is a valid URL\nget_cookies($domain = '') -> [array] - Retrieves cookies for a specific domain\nget_response_headers($header) -> [array] - Parses response headers\nget_response_cookies($header, $domain) -> [void] - Extracts cookies from response headers\nsplit_header_body() -> [array] - Splits response into headers and body\nget_history($header) -> [int] - Gets redirect history from response headers\nget_mimetype($filepath) -> [string] - Gets MIME type of a file",
    "Canonical_solution": "namespace phpspider\\core;\n\nclass requests\n{\n    const VERSION = '2.0.1';\n    protected static $ch = null;\n\n    public static $timeout = 15;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = array();\n    public static $rawheaders = array();\n    public static $domain_cookies = array();\n    public static $headers = array();\n    public static $useragents = array(\"requests/2.0.0\");\n    public static $client_ips = array();\n    public static $proxies = array();\n    public static $raw = \"\";\n    public static $head = \"\";\n    public static $content = \"\";\n    public static $text = \"\";\n    public static $info = array();\n    public static $history = 302;\n    public static $status_code = 0;\n    public static $error = \"\";\n\n    public static function init()\n    {\n        if (!is_resource(self::$ch))\n        {\n            self::$ch = curl_init();\n            curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt(self::$ch, CURLOPT_HEADER, false);\n            curl_setopt(self::$ch, CURLOPT_USERAGENT, \"phpspider-requests/\".self::VERSION);\n            if (is_array(self::$timeout))\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, self::$timeout[0]);\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout[1]);\n            }\n            else\n            {\n                curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, ceil(self::$timeout / 2));\n                curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n            }\n            curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt(self::$ch, CURLOPT_NOSIGNAL, true);\n        }\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = array(), $files = array(), $allow_redirects = true, $cert = NULL)\n    {\n        $method = strtoupper($method);\n        if(!self::_is_url($url))\n        {\n            self::$error = \"You have requested URL ({$url}) is not a valid HTTP address\";\n            return false;\n        }\n\n        if ($method == 'GET' && !empty($fields))\n        {\n            $url = $url.(strpos($url, '?') === false ? '?' : '&').http_build_query($fields);\n        }\n\n        $parse_url = parse_url($url);\n        if (empty($parse_url) || empty($parse_url['host']) || !in_array($parse_url['scheme'], array('http', 'https')))\n        {\n            self::$error = \"No connection adapters were found for '{$url}'\";\n            return false;\n        }\n\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n\n        if ($method != 'GET')\n        {\n            if ($method == 'POST')\n            {\n                $tmpheaders = array_change_key_case(self::$rawheaders, CASE_LOWER);\n                if (isset($tmpheaders['content-type']) && $tmpheaders['content-type'] == 'application/json')\n                {\n                    curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n                }\n                else\n                {\n                    curl_setopt(self::$ch, CURLOPT_POST, true);\n                }\n\n                $file_fields = array();\n                if (!empty($files))\n                {\n                    foreach ($files as $postname => $file)\n                    {\n                        $filepath = realpath($file);\n                        if (!file_exists($filepath))\n                        {\n                            continue;\n                        }\n                        $filename = basename($filepath);\n                        $type = self::get_mimetype($filepath);\n                        $file_fields[$postname] = curl_file_create($filepath, $type, $filename);\n                    }\n                }\n\n                if (empty($file_fields))\n                {\n                    if (is_array($fields))\n                    {\n                        $fields = http_build_query($fields);\n                    }\n                }\n                else\n                {\n                    if (is_array($fields) && !empty($fields))\n                    {\n                        $fields = array_merge($fields, $file_fields);\n                    }\n                    else\n                    {\n                        $fields = $file_fields;\n                    }\n                }\n                curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n            }\n            else\n            {\n                self::$rawheaders['X-HTTP-Method-Override'] = $method;\n                curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n            }\n        }\n\n        $cookies = self::get_cookies();\n        $domain_cookies = self::get_cookies($parse_url['host']);\n        $cookies = array_merge($cookies, $domain_cookies);\n        if (!empty($cookies))\n        {\n            foreach ($cookies as $key=>$value)\n            {\n                $cookie_arr[] = $key.'='.$value;\n            }\n            $cookies = implode('; ', $cookie_arr);\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);\n        }\n\n        if (!empty(self::$useragents))\n        {\n            $key = rand(0, count(self::$useragents) - 1);\n            self::$rawheaders['User-Agent'] = self::$useragents[$key];\n        }\n\n        if (!empty(self::$client_ips))\n        {\n            $key = rand(0, count(self::$client_ips) - 1);\n            self::$rawheaders['CLIENT-IP'] = self::$client_ips[$key];\n            self::$rawheaders['X-FORWARDED-FOR'] = self::$client_ips[$key];\n        }\n\n        if (self::$rawheaders)\n        {\n            $http_headers = array();\n            foreach (self::$rawheaders as $k=>$v)\n            {\n                $http_headers[] = $k.': '.$v;\n            }\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $http_headers);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_ENCODING, 'gzip');\n\n        if ($parse_url['scheme'] == 'https')\n        {\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if (self::$proxies)\n        {\n            $key = rand(0, count(self::$proxies) - 1);\n            $proxy = self::$proxies[$key];\n            curl_setopt(self::$ch, CURLOPT_PROXY, $proxy);\n        }\n\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        if ($allow_redirects)\n        {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (self::$raw === false)\n        {\n            self::$error = 'Curl error: ' . curl_error(self::$ch);\n        }\n\n        curl_close(self::$ch);\n\n        list($header, $text) = self::split_header_body();\n        self::$history = self::get_history($header);\n        self::$headers = self::get_response_headers($header);\n        self::get_response_cookies($header, $parse_url['host']);\n        return $text;\n    }\n\n    private static function _is_url($url)\n    {\n        $pattern = \"/\\b(([\\w-]+:\\/\\/?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/)))/\";\n        return preg_match($pattern, $url) ? true : false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 10);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = NULL) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== NULL) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        if (self::$output_encoding && mb_check_encoding(self::$text, self::$output_encoding)) {\n            self::$text = mb_convert_encoding(self::$text, self::$output_encoding, self::$encoding);\n        }\n        curl_close(self::$ch);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_text = substr($header, 0, strpos($header, \"\\r\\n\\r\\n\"));\n        foreach (explode(\"\\r\\n\", $header_text) as $i => $line) {\n            if ($i === 0) {\n                $headers['http_code'] = $line;\n            } else {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (isset(self::$headers['Set-Cookie'])) {\n            $cookies = explode(\"\\n\", str_replace(\"\\r\\n\", \"\\n\", self::$headers['Set-Cookie']));\n            foreach ($cookies as $cookie) {\n                $parts = explode(';', $cookie);\n                $name_value = array_shift($parts);\n                list($name, $value) = explode('=', $name_value, 2);\n                self::$cookies[$name] = $value;\n                self::$domain_cookies[$domain][$name] = $value;\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        return preg_split('/\\r\\n\\r\\n|\\n\\n/', self::$raw, 2);\n    }\n\n    public static function get_history($header) {\n        if (preg_match('/HTTP\\/\\d+\\.\\d+ (\\d+)/', $header, $matches)) {\n            return (int)$matches[1];\n        }\n        return 0;\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}",
      "<?php\nclass requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = [\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[0]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = NULL) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n\n        if ($allow_redirects) {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        } else {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, false);\n        }\n\n        if ($cert !== NULL) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n\n        curl_close(self::$ch);\n        self::$text = self::$content;\n\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (isset(self::$headers['Set-Cookie'])) {\n            $cookies = explode(';', self::$headers['Set-Cookie']);\n            foreach ($cookies as $cookie) {\n                $cookie_parts = explode('=', trim($cookie), 2);\n                if (count($cookie_parts) == 2) {\n                    list($name, $value) = $cookie_parts;\n                    self::$domain_cookies[$domain][$name] = $value;\n                }\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        $parts = preg_split('/\\r\\n\\r\\n/', self::$raw, 2);\n        return count($parts) == 2 ? $parts : [self::$raw, ''];\n    }\n\n    public static function get_history($header) {\n        if (preg_match('/HTTP\\/1\\.[01] (\\d{3})/', $header, $matches)) {\n            return (int)$matches[1];\n        }\n        return 0;\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_COOKIEJAR, 'cookie.txt');\n        curl_setopt(self::$ch, CURLOPT_COOKIEFILE, 'cookie.txt');\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== null) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        if (!$allow_redirects) {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, false);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (curl_errno(self::$ch)) {\n            self::$error = curl_error(self::$ch);\n            return false;\n        }\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::$domain_cookies = self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        self::$history = self::get_history(self::$head);\n        curl_close(self::$ch);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (!isset(self::$domain_cookies[$domain])) {\n            self::$domain_cookies[$domain] = [];\n        }\n        $lines = explode(\"\\r\\n\", $header);\n        foreach ($lines as $line) {\n            if (stripos($line, 'Set-Cookie:') === 0) {\n                $cookie = trim(substr($line, 12));\n                $parts = explode(';', $cookie);\n                $name_value = explode('=', array_shift($parts), 2);\n                $name = trim($name_value[0]);\n                $value = isset($name_value[1]) ? trim($name_value[1]) : '';\n                self::$domain_cookies[$domain][$name] = $value;\n            }\n        }\n    }\n\n    public static function split_header_body() {\n        $parts = preg_split('/\\r\\n\\r\\n/', self::$raw, 2);\n        return count($parts) === 2 ? $parts : [self::$raw, ''];\n    }\n\n    public static function get_history($header) {\n        $history = [];\n        $lines = explode(\"\\r\\n\", $header);\n        foreach ($lines as $line) {\n            if (stripos($line, 'Location:') === 0) {\n                $history[] = trim(substr($line, 10));\n            }\n        }\n        return count($history) > 0 ? end($history) : 0;\n    }\n\n    public static function get_mimetype($filepath) {\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        $mimetype = finfo_file($finfo, $filepath);\n        finfo_close($finfo);\n        return $mimetype;\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== null) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::$domain_cookies = self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        if (self::$output_encoding !== null) {\n            self::$text = mb_convert_encoding(self::$text, self::$output_encoding, self::$encoding);\n        }\n        if (!$allow_redirects && self::$status_code >= 300 && self::$status_code < 400) {\n            self::$history = self::get_history(self::$head);\n        }\n        curl_close(self::$ch);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_text = substr($header, 0, strpos($header, \"\\r\\n\\r\\n\"));\n        foreach (explode(\"\\r\\n\", $header_text) as $i => $line) {\n            if ($i === 0) {\n                $headers['http_code'] = $line;\n            } else {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (isset(self::$domain_cookies[$domain])) {\n            self::$domain_cookies[$domain] = [];\n        }\n        preg_match_all('/Set-Cookie: (.*?)=(.*?);/', $header, $matches);\n        foreach ($matches[1] as $index => $name) {\n            self::$domain_cookies[$domain][$name] = $matches[2][$index];\n        }\n    }\n\n    private static function split_header_body() {\n        return preg_split(\"/\\r\\n\\r\\n|\\n\\n|\\r\\r/\", self::$raw, 2);\n    }\n\n    public static function get_history($header) {\n        preg_match('/HTTP\\/1\\.1 (\\d{3})/', $header, $matches);\n        return isset($matches[1]) ? (int)$matches[1] : 0;\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_MAXREDIRS, 10);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!$allow_redirects) {\n            curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, false);\n        }\n        if ($cert) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$history = self::get_history(self::$head);\n        self::$text = self::$content;\n        curl_close(self::$ch);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (isset(self::$headers['Set-Cookie'])) {\n            $cookies = explode(';', self::$headers['Set-Cookie']);\n            foreach ($cookies as $cookie) {\n                $parts = explode('=', $cookie, 2);\n                if (count($parts) == 2) {\n                    list($name, $value) = $parts;\n                    self::$domain_cookies[$domain][trim($name)] = trim($value);\n                }\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        $pos = strpos(self::$raw, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return [self::$raw, ''];\n        }\n        return [substr(self::$raw, 0, $pos), substr(self::$raw, $pos + 4)];\n    }\n\n    private static function get_history($header) {\n        if (preg_match('/HTTP\\/\\d+\\.\\d+ (\\d+)/', $header, $matches)) {\n            return (int)$matches[1];\n        }\n        return 0;\n    }\n\n    private static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = [\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[0]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, $allow_redirects);\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file['tmp_name']), $file['type'], $file['name']);\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n\n        if ($cert !== null) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::$domain_cookies = self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n\n        curl_close(self::$ch);\n        return self::$content;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (!isset(self::$domain_cookies[$domain])) {\n            self::$domain_cookies[$domain] = [];\n        }\n        $cookie_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($cookie_lines as $line) {\n            if (stripos($line, 'Set-Cookie:') === 0) {\n                $cookie = substr($line, strlen('Set-Cookie: '));\n                $parts = explode('; ', $cookie);\n                $cookie_parts = explode('=', array_shift($parts), 2);\n                $name = $cookie_parts[0];\n                $value = isset($cookie_parts[1]) ? $cookie_parts[1] : '';\n                self::$domain_cookies[$domain][$name] = $value;\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        $pos = strpos(self::$raw, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return ['', self::$raw];\n        }\n        return [substr(self::$raw, 0, $pos), substr(self::$raw, $pos + 4)];\n    }\n\n    public static function get_history($header) {\n        $history = 0;\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (stripos($line, 'HTTP/') === 0 && preg_match('/\\d{3}/', $line, $matches)) {\n                $history = (int)$matches[0];\n            }\n        }\n        return $history;\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = NULL) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method == 'POST' || $method == 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== NULL) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::$domain_cookies = self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        curl_close(self::$ch);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (!isset(self::$domain_cookies[$domain])) {\n            self::$domain_cookies[$domain] = [];\n        }\n        $cookie_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($cookie_lines as $line) {\n            if (stripos($line, 'Set-Cookie:') === 0) {\n                $cookie_data = substr($line, strlen('Set-Cookie: '));\n                $cookie_parts = explode('; ', $cookie_data);\n                $cookie_name_value = explode('=', array_shift($cookie_parts), 2);\n                $cookie_name = $cookie_name_value[0];\n                $cookie_value = isset($cookie_name_value[1]) ? $cookie_name_value[1] : '';\n                self::$domain_cookies[$domain][$cookie_name] = $cookie_value;\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        $parts = preg_split('/\\r\\n\\r\\n|\\n\\n/', self::$raw, 2);\n        return count($parts) > 1 ? $parts : [$parts[0], ''];\n    }\n\n    public static function get_history($header) {\n        $history = 0;\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (stripos($line, 'HTTP/') === 0 && preg_match('/ (\\d{3}) /', $line, $matches)) {\n                $history = (int)$matches[1];\n            }\n        }\n        return $history;\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}"
    ],
    "unmatched_results": [
      "<?php\nclass requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = [\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = NULL) {\n        if (!self::_is_url($url)) {\n            self::$error = \"Invalid URL\";\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== NULL) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (curl_errno(self::$ch)) {\n            self::$error = curl_error(self::$ch);\n            return false;\n        }\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::$domain_cookies = self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        if (self::$output_encoding !== null && mb_check_encoding(self::$text, self::$output_encoding)) {\n            self::$text = mb_convert_encoding(self::$text, self::$output_encoding, self::$encoding);\n        }\n        self::$history = self::get_history(self::$head);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (!isset(self::$domain_cookies[$domain])) {\n            self::$domain_cookies[$domain] = [];\n        }\n        $cookie_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($cookie_lines as $line) {\n            if (stripos($line, 'Set-Cookie:') === 0) {\n                $cookie_parts = explode('; ', substr($line, strlen('Set-Cookie:')));\n                $cookie_data = explode('=', array_shift($cookie_parts), 2);\n                $cookie_name = $cookie_data[0];\n                $cookie_value = isset($cookie_data[1]) ? $cookie_data[1] : '';\n                self::$domain_cookies[$domain][$cookie_name] = $cookie_value;\n            }\n        }\n    }\n\n    public static function split_header_body() {\n        $parts = preg_split('/\\r\\n\\r\\n/', self::$raw, 2);\n        return count($parts) === 2 ? $parts : [$parts[0], ''];\n    }\n\n    public static function get_history($header) {\n        $history = 0;\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (stripos($line, 'HTTP/') === 0 && preg_match('/ (\\d{3}) /', $line, $matches)) {\n                $history = (int)$matches[1];\n            }\n        }\n        return $history;\n    }\n\n    public static function get_mimetype($filepath) {\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        $mimetype = finfo_file($finfo, $filepath);\n        finfo_close($finfo);\n        return $mimetype;\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[array_rand(self::$useragents)]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = 'Invalid URL';\n            return false;\n        }\n        self::init();\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file), self::get_mimetype($file), basename($file));\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            curl_setopt(self::$ch, CURLOPT_COOKIE, http_build_query(self::$cookies, '', '; '));\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== null) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        if (curl_errno(self::$ch)) {\n            self::$error = curl_error(self::$ch);\n            return false;\n        }\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::$domain_cookies = self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        if (self::$output_encoding !== null) {\n            self::$text = mb_convert_encoding(self::$text, self::$output_encoding, self::$encoding);\n        }\n        self::$history = self::get_history(self::$head);\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (!isset(self::$domain_cookies[$domain])) {\n            self::$domain_cookies[$domain] = [];\n        }\n        $cookie_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($cookie_lines as $line) {\n            if (stripos($line, 'Set-Cookie:') === 0) {\n                $cookie_line = substr($line, strlen('Set-Cookie:'));\n                $cookie_parts = explode('; ', $cookie_line);\n                $cookie_data = explode('=', array_shift($cookie_parts), 2);\n                $cookie_name = $cookie_data[0];\n                $cookie_value = isset($cookie_data[1]) ? $cookie_data[1] : '';\n                self::$domain_cookies[$domain][$cookie_name] = $cookie_value;\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        $parts = preg_split('/\\r\\n\\r\\n|\\n\\n/', self::$raw, 2);\n        return count($parts) === 2 ? $parts : [self::$raw, ''];\n    }\n\n    public static function get_history($header) {\n        $history = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (stripos($line, 'Location:') === 0) {\n                $history[] = trim(substr($line, strlen('Location:')));\n            }\n        }\n        return count($history) > 0 ? end($history) : 0;\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}",
      "class requests {\n    const VERSION = '1.0';\n    private static $ch = null;\n    public static $timeout = 30;\n    public static $encoding = null;\n    public static $output_encoding = null;\n    public static $cookies = [];\n    public static $rawheaders = [];\n    public static $domain_cookies = [];\n    public static $headers = [];\n    public static $useragents = [\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ];\n    public static $client_ips = [];\n    public static $proxies = [];\n    public static $raw = '';\n    public static $head = '';\n    public static $content = '';\n    public static $text = '';\n    public static $info = [];\n    public static $history = 0;\n    public static $status_code = 0;\n    public static $error = '';\n\n    public static function init() {\n        self::$ch = curl_init();\n        curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt(self::$ch, CURLOPT_HEADER, true);\n        curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt(self::$ch, CURLOPT_TIMEOUT, self::$timeout);\n        curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$useragents[0]);\n        return self::$ch;\n    }\n\n    public static function request($url, $method = 'GET', $fields = [], $files = [], $allow_redirects = true, $cert = null) {\n        if (!self::_is_url($url)) {\n            self::$error = \"Invalid URL\";\n            return false;\n        }\n        if (!self::$ch) {\n            self::init();\n        }\n        curl_setopt(self::$ch, CURLOPT_URL, $url);\n        curl_setopt(self::$ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($method === 'POST' || $method === 'PUT') {\n            if (!empty($files)) {\n                foreach ($files as $key => $file) {\n                    $fields[$key] = new CURLFile(realpath($file['path']), self::get_mimetype($file['path']), $file['name']);\n                }\n            }\n            curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $fields);\n        }\n        if (!empty(self::$rawheaders)) {\n            curl_setopt(self::$ch, CURLOPT_HTTPHEADER, self::$rawheaders);\n        }\n        if (!empty(self::$cookies)) {\n            $cookie_string = http_build_query(self::$cookies, '', '; ');\n            curl_setopt(self::$ch, CURLOPT_COOKIE, $cookie_string);\n        }\n        if (!empty(self::$proxies)) {\n            curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxies[array_rand(self::$proxies)]);\n        }\n        if ($cert !== null) {\n            curl_setopt(self::$ch, CURLOPT_SSLCERT, $cert);\n        }\n        self::$raw = curl_exec(self::$ch);\n        self::$info = curl_getinfo(self::$ch);\n        self::$status_code = self::$info['http_code'];\n        self::$error = curl_error(self::$ch);\n        list(self::$head, self::$content) = self::split_header_body();\n        self::$headers = self::get_response_headers(self::$head);\n        self::get_response_cookies(self::$head, parse_url($url, PHP_URL_HOST));\n        self::$text = self::$content;\n        if (self::$output_encoding) {\n            self::$text = mb_convert_encoding(self::$text, self::$output_encoding, self::$encoding);\n        }\n        return self::$text;\n    }\n\n    private static function _is_url($url) {\n        return filter_var($url, FILTER_VALIDATE_URL) !== false;\n    }\n\n    public static function get_cookies($domain = '') {\n        return isset(self::$domain_cookies[$domain]) ? self::$domain_cookies[$domain] : [];\n    }\n\n    public static function get_response_headers($header) {\n        $headers = [];\n        $header_lines = explode(\"\\r\\n\", trim($header));\n        foreach ($header_lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function get_response_cookies($header, $domain) {\n        if (isset(self::$headers['Set-Cookie'])) {\n            $cookies = explode(\"\\n\", str_replace(\"\\r\\n\", \"\\n\", self::$headers['Set-Cookie']));\n            foreach ($cookies as $cookie) {\n                $parts = explode(';', $cookie);\n                $name_value = array_shift($parts);\n                list($name, $value) = explode('=', $name_value, 2);\n                self::$domain_cookies[$domain][$name] = $value;\n            }\n        }\n    }\n\n    private static function split_header_body() {\n        $pos = strpos(self::$raw, \"\\r\\n\\r\\n\");\n        if ($pos === false) {\n            return [self::$raw, ''];\n        }\n        return [substr(self::$raw, 0, $pos), substr(self::$raw, $pos + 4)];\n    }\n\n    public static function get_history($header) {\n        preg_match_all('/HTTP\\/\\d+\\.\\d+ (\\d+)/', $header, $matches);\n        return end($matches[1]);\n    }\n\n    public static function get_mimetype($filepath) {\n        return mime_content_type($filepath);\n    }\n}"
    ],
    "match_count": 7,
    "pass@3": 0.9916666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a PHP class that implements HTTP scraping functionality using cURL to make requests to a specified URL with query parameters and handle the response.\n\nClass Description: The HttpScraper class extends a BaseScraper and provides functionality to make HTTP GET requests using cURL. It includes timeout configuration and basic error handling for HTTP status codes.\n\nAttributes:\ntimeout: [int] - The maximum time in seconds the cURL request is allowed to take.\n\nMethods:\nrequest: [Name]([string $url, array $query]) -> [string|null] - Makes an HTTP GET request to the specified URL with the given query parameters. Returns the response body as a string if the request is successful (HTTP 200), or null otherwise.",
    "Canonical_solution": "use Rych\\Bencode\\Bencode;\nuse Rych\\Bencode\\Exception\\RuntimeException;\n\nclass HttpScraper extends BaseScraper\n{\n    protected $timeout = 30;\n\n    public function request($url, array $query)\n    {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $url . '?' . join('&', $query),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => $this->timeout,\n        ]);\n\n        $result = curl_exec($ch);\n\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($code != 200) {\n            $result = null;\n        }\n\n        curl_close($ch);\n\n        return $result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\n\nclass BaseScraper {\n    // Base class methods and properties can be defined here\n}\n\nclass HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "<?php\n\nclass BaseScraper {\n    // Base class methods and properties can be defined here\n}\n\nclass HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "<?php\n\nclass BaseScraper {\n    // Base class implementation\n}\n\nclass HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "class HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        } else {\n            return null;\n        }\n    }\n}",
      "<?php\n\nclass BaseScraper {\n    // Base class implementation\n}\n\nclass HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "class HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "class HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "class HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "class HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}",
      "class HttpScraper extends BaseScraper {\n    private $timeout;\n\n    public function __construct($timeout = 10) {\n        $this->timeout = $timeout;\n    }\n\n    public function request($url, $query) {\n        $queryString = http_build_query($query);\n        $fullUrl = $url . '?' . $queryString;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $fullUrl);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        if ($httpCode === 200) {\n            return $response;\n        }\n\n        return null;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Implement a class that handles file downloads using cURL in PHP, with support for temporary file management and cleanup.\n\nClass Description: The CurlDownloader class provides functionality to download files from a given URL using cURL, storing them in a temporary directory, and managing the downloaded files including cleanup operations.\n\nAttributes:\n- tempDir: string - The directory path where temporary files will be stored. Defaults to system temp directory if not specified.\n- outputFile: string - The path to the downloaded file.\n\nMethods:\n- setTempDir(string $tempDir) -> void - Sets the temporary directory for storing downloaded files.\n- download(string $url) -> bool - Downloads a file from the specified URL using cURL. Returns true on success, throws ErrorException on failure.\n- getFilename() -> string - Returns the path to the downloaded file.\n- cleanup() -> void - Removes the downloaded file if it exists.\n\nInput:\n- For setTempDir(): A string representing the directory path.\n- For download(): A string representing the URL to download from.\n\nOutput:\n- For download(): A boolean indicating success (true) or failure (false).\n- For getFilename(): A string representing the path to the downloaded file.\n- setTempDir() and cleanup() have no return value.",
    "Canonical_solution": "use Psy\\Exception\\ErrorException;\nuse Psy\\Shell;\n\nclass CurlDownloader implements Downloader\n{\n    private $tempDir = null;\n    private $outputFile = null;\n\n    public function setTempDir(string $tempDir)\n    {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download(string $url): bool\n    {\n        $tempDir = $this->tempDir ?: \\sys_get_temp_dir();\n        $this->outputFile = \\tempnam($tempDir, 'psysh-archive-');\n        $targetName = $this->outputFile.'.tar.gz';\n\n        if (!\\rename($this->outputFile, $targetName)) {\n            return false;\n        }\n\n        $this->outputFile = $targetName;\n\n        $outputHandle = \\fopen($this->outputFile, 'w');\n        if (!$outputHandle) {\n            return false;\n        }\n        $curl = \\curl_init();\n        \\curl_setopt_array($curl, [\n            \\CURLOPT_FAILONERROR    => true,\n            \\CURLOPT_HEADER         => 0,\n            \\CURLOPT_FOLLOWLOCATION => true,\n            \\CURLOPT_TIMEOUT        => 10,\n            \\CURLOPT_FILE           => $outputHandle,\n            \\CURLOPT_HTTPHEADER     => [\n                'User-Agent' => 'PsySH/'.Shell::VERSION,\n            ],\n        ]);\n        \\curl_setopt($curl, \\CURLOPT_URL, $url);\n        $result = \\curl_exec($curl);\n        $error = \\curl_error($curl);\n        \\curl_close($curl);\n\n        \\fclose($outputHandle);\n\n        if (!$result) {\n            throw new ErrorException('cURL Error: '.$error);\n        }\n\n        return (bool) $result;\n    }\n\n    public function getFilename(): string\n    {\n        return $this->outputFile;\n    }\n\n    public function cleanup()\n    {\n        if (\\file_exists($this->outputFile)) {\n            \\unlink($this->outputFile);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_download_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        if (!curl_exec($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            unlink($this->outputFile);\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        if (!curl_exec($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            unlink($this->outputFile);\n            throw new ErrorException(\"cURL error: \" . $error);\n        }\n        curl_close($ch);\n        return true;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n        $this->outputFile = '';\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if (file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}",
      "class CurlDownloader {\n    private $tempDir;\n    private $outputFile;\n\n    public function __construct($tempDir = null) {\n        $this->tempDir = $tempDir ?: sys_get_temp_dir();\n    }\n\n    public function setTempDir($tempDir) {\n        $this->tempDir = $tempDir;\n    }\n\n    public function download($url) {\n        $this->outputFile = tempnam($this->tempDir, 'curl_');\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_FILE, fopen($this->outputFile, 'w'));\n        $success = curl_exec($ch);\n        if (!$success) {\n            throw new ErrorException(curl_error($ch));\n        }\n        curl_close($ch);\n        return $success;\n    }\n\n    public function getFilename() {\n        return $this->outputFile;\n    }\n\n    public function cleanup() {\n        if ($this->outputFile && file_exists($this->outputFile)) {\n            unlink($this->outputFile);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a PHP HTTP client class that handles various types of HTTP requests (GET, POST, PUT, DELETE, multipart POST) using cURL, with proper error handling and response processing.\n\nClass Description: The Client class provides static methods to send HTTP requests and process responses. It handles request construction, cURL session management, response parsing, and error handling.\n\nAttributes: (This class has no instance attributes as all methods are static)\n\nMethods:\n\n1. get(string $url, array $headers = array()) -> Response\n   - Sends a GET request to the specified URL with optional headers\n   - Returns a Response object containing status code, headers, body, and timing information\n\n2. delete(string $url, array $headers = array()) -> Response\n   - Sends a DELETE request to the specified URL with optional headers\n   - Returns a Response object\n\n3. post(string $url, mixed $body, array $headers = array()) -> Response\n   - Sends a POST request with body content to the specified URL\n   - Returns a Response object\n\n4. put(string $url, mixed $body, array $headers = array()) -> Response\n   - Sends a PUT request with body content to the specified URL\n   - Returns a Response object\n\n5. multipartPost(\n     string $url,\n     array $fields,\n     string $name,\n     string $fileName,\n     string $fileBody,\n     string $mimeType = null,\n     array $headers = array()\n   ) -> Response\n   - Sends a multipart/form-data POST request with file upload\n   - Returns a Response object\n\n6. sendRequest(Request $request) -> Response\n   - Internal method that executes the cURL request\n   - Handles cURL initialization, option setting, execution, and cleanup\n   - Returns a Response object with request results\n\n7. userAgent() -> string\n   - Generates a User-Agent string with SDK, system, and PHP version information\n   - Returns the formatted User-Agent string\n\n8. parseHeaders(string $raw) -> array\n   - Parses raw HTTP response headers into an associative array\n   - Returns array of headers with normalized keys\n\n9. escapeQuotes(string $str) -> string\n   - Escapes quotes in a string for use in multipart form data\n   - Returns the escaped string\n\n10. ucwordsHyphen(string $str) -> string\n    - Converts hyphenated header names to proper case (e.g., 'content-type' becomes 'Content-Type')\n    - Returns the properly cased string",
    "Canonical_solution": "namespace Qiniu\\Http;\n\nuse Qiniu\\Config;\n\nfinal class Client\n{\n    public static function get($url, array $headers = array())\n    {\n        $request = new Request('GET', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, array $headers = array())\n    {\n        $request = new Request('DELETE', $url, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, array $headers = array())\n    {\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function PUT($url, $body, array $headers = array())\n    {\n        $request = new Request('PUT', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost(\n        $url,\n        $fields,\n        $name,\n        $fileName,\n        $fileBody,\n        $mimeType = null,\n        array $headers = array()\n    ) {\n        $data = array();\n        $mimeBoundary = md5(microtime());\n\n        foreach ($fields as $key => $val) {\n            array_push($data, '--' . $mimeBoundary);\n            array_push($data, \"Content-Disposition: form-data; name=\\\"$key\\\"\");\n            array_push($data, '');\n            array_push($data, $val);\n        }\n\n        array_push($data, '--' . $mimeBoundary);\n        $finalMimeType = empty($mimeType) ? 'application/octet-stream' : $mimeType;\n        $finalFileName = self::escapeQuotes($fileName);\n        array_push($data, \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$finalFileName\\\"\");\n        array_push($data, \"Content-Type: $finalMimeType\");\n        array_push($data, '');\n        array_push($data, $fileBody);\n\n        array_push($data, '--' . $mimeBoundary . '--');\n        array_push($data, '');\n\n        $body = implode(\"\\r\\n\", $data);\n        $contentType = 'multipart/form-data; boundary=' . $mimeBoundary;\n        $headers['Content-Type'] = $contentType;\n        $request = new Request('POST', $url, $headers, $body);\n        return self::sendRequest($request);\n    }\n\n    public static function sendRequest($request)\n    {\n        $t1 = microtime(true);\n        $ch = curl_init();\n        $options = array(\n            CURLOPT_USERAGENT => self::userAgent(),\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST => $request->method,\n            CURLOPT_URL => $request->url,\n        );\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            $options[CURLOPT_FOLLOWLOCATION] = true;\n        }\n        if (!empty($request->headers)) {\n            $headers = array();\n            foreach ($request->headers as $key => $val) {\n                array_push($headers, \"$key: $val\");\n            }\n            $options[CURLOPT_HTTPHEADER] = $headers;\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));\n        if (!empty($request->body)) {\n            $options[CURLOPT_POSTFIELDS] = $request->body;\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $t2 = microtime(true);\n        $duration = round($t2 - $t1, 3);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $r = new Response(-1, $duration, array(), null, curl_error($ch));\n            curl_close($ch);\n            return $r;\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = self::parseHeaders(substr($result, 0, $header_size));\n        $body = substr($result, $header_size);\n        curl_close($ch);\n        return new Response($code, $duration, $headers, $body, null);\n    }\n\n    private static function userAgent()\n    {\n        $sdkInfo = \"QiniuPHP/\" . Config::SDK_VER;\n        $systemInfo = php_uname(\"s\");\n        $machineInfo = php_uname(\"m\");\n        $envInfo = \"($systemInfo/$machineInfo)\";\n        $phpVer = phpversion();\n        $ua = \"$sdkInfo $envInfo PHP/$phpVer\";\n        return $ua;\n    }\n\n    private static function parseHeaders($raw)\n    {\n        $headers = array();\n        $headerLines = explode(\"\\r\\n\", $raw);\n        foreach ($headerLines as $line) {\n            $headerLine = trim($line);\n            $kv = explode(':', $headerLine);\n            if (count($kv) > 1) {\n                $kv[0] =self::ucwordsHyphen($kv[0]);\n                $headers[$kv[0]] = trim($kv[1]);\n            }\n        }\n        return $headers;\n    }\n\n    private static function escapeQuotes($str)\n    {\n        $find = array(\"\\\\\", \"\\\"\");\n        $replace = array(\"\\\\\\\\\", \"\\\\\\\"\");\n        return str_replace($find, $replace, $str);\n    }\n    \n    private static function ucwordsHyphen($str)\n    {\n        return str_replace('- ', '-', ucwords(str_replace('-', '- ', $str)));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $responseBody = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        $headers = self::parseHeaders($info['header_size']);\n        $body = substr($responseBody, $info['header_size']);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    private static function userAgent() {\n        return sprintf(\n            'SDK/1.0 (%s; %s; PHP/%s)',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        $request = new Request('GET', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function delete($url, $headers = []) {\n        $request = new Request('DELETE', $url, [], $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function post($url, $body, $headers = []) {\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function put($url, $body, $headers = []) {\n        $request = new Request('PUT', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--$boundary\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n\";\n            $body .= \"$value\\r\\n\";\n        }\n\n        $body .= \"--$boundary\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"$name\\\"; filename=\\\"$fileName\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: $mimeType\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"$fileBody\\r\\n\";\n        $body .= \"--$boundary--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary=$boundary\";\n\n        $request = new Request('POST', $url, $body, $headers);\n        return self::sendRequest($request);\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: $error\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headers = self::parseHeaders($rawHeaders);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    public static function userAgent() {\n        return sprintf(\n            'Client/%s (%s; PHP %s)',\n            '1.0',\n            php_uname('s'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "<?php\n\nclass Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\";\n\n        $headers[] = \"Content-Type: multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headers = self::parseHeaders($rawHeaders);\n\n        return new Response($info['http_code'], $headers, $body, $info);\n    }\n\n    private static function userAgent() {\n        return sprintf(\n            'SDK/1.0 (%s; %s; PHP %s)',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $info;\n\n    public function __construct($statusCode, $headers, $body, $info) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->info = $info;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getInfo() {\n        return $this->info;\n    }\n}",
      "<?php\n\nclass Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headers = self::parseHeaders($rawHeaders);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    private static function userAgent() {\n        return sprintf(\n            'SDK/1.0 (%s; %s; PHP %s)',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "<?php\n\nclass Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headers = self::parseHeaders($rawHeaders);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    private static function userAgent() {\n        return sprintf(\n            \"SDK/1.0 (%s; %s; PHP/%s)\",\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        return new Response(\n            $info['http_code'],\n            self::parseHeaders($rawHeaders),\n            $body,\n            $info['total_time']\n        );\n    }\n\n    public static function userAgent() {\n        return sprintf(\n            'Client/%s (%s; PHP %s)',\n            '1.0',\n            php_uname('s'),\n            PHP_VERSION\n        );\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "<?php\n\nclass Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        return new Response(\n            $info['http_code'],\n            self::parseHeaders($rawHeaders),\n            $body,\n            $info['total_time']\n        );\n    }\n\n    public static function userAgent() {\n        return sprintf(\n            'SDK/1.0 (%s; PHP %s)',\n            php_uname('s'),\n            PHP_VERSION\n        );\n    }\n\n    public static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    public static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    public static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "class Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        $headers = self::parseHeaders($header);\n\n        curl_close($ch);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    private static function userAgent() {\n        return sprintf(\"SDK/1.0 (%s; %s; PHP/%s)\", php_uname('s'), php_uname('r'), PHP_VERSION);\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "<?php\n\nclass Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= $fileBody . \"\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n\n        if ($response === false) {\n            throw new Exception(curl_error($ch));\n        }\n\n        curl_close($ch);\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headers = self::parseHeaders($rawHeaders);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    private static function userAgent() {\n        return sprintf(\n            'SDK/1.0 (%s; %s; PHP %s)',\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n            }\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = $method;\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}",
      "<?php\n\nclass Client {\n    public static function get($url, $headers = []) {\n        return self::sendRequest(new Request('GET', $url, [], $headers));\n    }\n\n    public static function delete($url, $headers = []) {\n        return self::sendRequest(new Request('DELETE', $url, [], $headers));\n    }\n\n    public static function post($url, $body, $headers = []) {\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    public static function put($url, $body, $headers = []) {\n        return self::sendRequest(new Request('PUT', $url, $body, $headers));\n    }\n\n    public static function multipartPost($url, $fields, $name, $fileName, $fileBody, $mimeType = null, $headers = []) {\n        $boundary = uniqid();\n        $body = '';\n\n        foreach ($fields as $key => $value) {\n            $body .= \"--{$boundary}\\r\\n\";\n            $body .= \"Content-Disposition: form-data; name=\\\"{$key}\\\"\\r\\n\\r\\n\";\n            $body .= \"{$value}\\r\\n\";\n        }\n\n        $body .= \"--{$boundary}\\r\\n\";\n        $body .= \"Content-Disposition: form-data; name=\\\"{$name}\\\"; filename=\\\"{$fileName}\\\"\\r\\n\";\n\n        if ($mimeType) {\n            $body .= \"Content-Type: {$mimeType}\\r\\n\";\n        }\n\n        $body .= \"\\r\\n\";\n        $body .= \"{$fileBody}\\r\\n\";\n        $body .= \"--{$boundary}--\\r\\n\";\n\n        $headers['Content-Type'] = \"multipart/form-data; boundary={$boundary}\";\n\n        return self::sendRequest(new Request('POST', $url, $body, $headers));\n    }\n\n    private static function sendRequest(Request $request) {\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $request->getUrl());\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        curl_setopt($ch, CURLOPT_USERAGENT, self::userAgent());\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            throw new Exception(\"cURL Error: {$error}\");\n        }\n\n        list($rawHeaders, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        $headers = self::parseHeaders($rawHeaders);\n\n        return new Response($info['http_code'], $headers, $body, $info['total_time']);\n    }\n\n    private static function userAgent() {\n        return sprintf(\n            \"SDK/1.0 (%s; %s; PHP %s)\",\n            php_uname('s'),\n            php_uname('r'),\n            PHP_VERSION\n        );\n    }\n\n    private static function parseHeaders($raw) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n\n            list($key, $value) = explode(':', $line, 2);\n            $headers[self::ucwordsHyphen(trim($key))] = trim($value);\n        }\n\n        return $headers;\n    }\n\n    private static function escapeQuotes($str) {\n        return str_replace('\"', '\\\"', $str);\n    }\n\n    private static function ucwordsHyphen($str) {\n        return implode('-', array_map('ucfirst', explode('-', strtolower($str))));\n    }\n}\n\nclass Request {\n    private $method;\n    private $url;\n    private $body;\n    private $headers;\n\n    public function __construct($method, $url, $body, $headers) {\n        $this->method = strtoupper($method);\n        $this->url = $url;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n\n    public function getMethod() {\n        return $this->method;\n    }\n\n    public function getUrl() {\n        return $this->url;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getHeaders() {\n        $headers = [];\n\n        foreach ($this->headers as $key => $value) {\n            $headers[] = sprintf('%s: %s', $key, $value);\n        }\n\n        return $headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $headers;\n    private $body;\n    private $time;\n\n    public function __construct($statusCode, $headers, $body, $time) {\n        $this->statusCode = $statusCode;\n        $this->headers = $headers;\n        $this->body = $body;\n        $this->time = $time;\n    }\n\n    public function getStatusCode() {\n        return $this->statusCode;\n    }\n\n    public function getHeaders() {\n        return $this->headers;\n    }\n\n    public function getBody() {\n        return $this->body;\n    }\n\n    public function getTime() {\n        return $this->time;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a PHP function that uploads a file to a cloud storage service using cURL with PUT method, including authentication and proper headers.\n\nFunction Description: The function `dogcloud_upload` uploads a specified file to DogeCloud's object storage service. It handles authentication using HMAC-SHA1, sets appropriate headers including content type, and manages the file upload via HTTP PUT request. The function checks file existence before proceeding with the upload.\n\nInput:\n- $object (string): The target path/name for the uploaded file in the cloud storage\n- $file (string): Local path to the file to be uploaded\n- $mime (string): MIME type of the file being uploaded\n\nOutput:\n- Returns the API response on successful upload (string)\n- Returns false if the file doesn't exist or if upload fails (boolean)",
    "Canonical_solution": "function dogcloud_upload($object, $file, $mime)\n{\n    if (!@file_exists($file)) {\n        return false;\n    }\n    if (@file_exists($file)) {\n        $accessKey = kratos_option('g_cos_fieldset')['g_cos_accesskey'];\n        $secretKey = kratos_option('g_cos_fieldset')['g_cos_secretkey'];\n        $bucket = kratos_option('g_cos_fieldset')['g_cos_bucketname'];\n\n        $filesize = fileSize($file);\n        $file = fopen($file, 'rb');\n\n        $signStr = \"/oss/upload/put.json?bucket=$bucket&key=$object\" . \"\\n\" . \"\";\n        $sign = hash_hmac('sha1', $signStr, $secretKey);\n        $authorization = \"TOKEN \" . $accessKey . \":\" . $sign;\n\n        $url = \"https://api.dogecloud.com/oss/upload/put.json?bucket=$bucket&key=$object\";\n        $headers = array(\"Host: api.dogecloud.com\", \"Content-Type: $mime\", \"Authorization: $authorization\");\n\n        $curl = curl_init();\n        curl_setopt_array($curl, array(\n            CURLOPT_URL => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_PUT => true,\n            CURLOPT_TIMEOUT => 0,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => \"PUT\",\n            CURLOPT_INFILE => $file,\n            CURLOPT_INFILESIZE => $filesize,\n            CURLOPT_HTTPHEADER => $headers,\n        ));\n        $response = curl_exec($curl);\n        curl_close($curl);\n    } else {\n        return false;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $access_key = 'your_access_key';\n    $secret_key = 'your_secret_key';\n    $bucket_name = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = $endpoint . '/' . $bucket_name . '/' . $object;\n    $file_content = file_get_contents($file);\n    $content_md5 = base64_encode(md5($file_content, true));\n    $date = gmdate('D, d M Y H:i:s T');\n    $string_to_sign = \"PUT\\n$content_md5\\n$mime\\n$date\\n/$bucket_name/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $secret_key, true));\n\n    $headers = [\n        \"Authorization: AWS {$access_key}:{$signature}\",\n        \"Date: {$date}\",\n        \"Content-Type: {$mime}\",\n        \"Content-MD5: {$content_md5}\"\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $file_content);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($http_code == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $access_key = 'your_access_key';\n    $secret_key = 'your_secret_key';\n    $bucket = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = $endpoint . '/' . $bucket . '/' . $object;\n    $file_content = file_get_contents($file);\n    $content_md5 = base64_encode(md5($file_content, true));\n    $date = gmdate('D, d M Y H:i:s T');\n    $string_to_sign = \"PUT\\n$content_md5\\n$mime\\n$date\\n/$bucket/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $secret_key, true));\n\n    $headers = [\n        \"Authorization: AWS {$access_key}:{$signature}\",\n        \"Date: {$date}\",\n        \"Content-Type: {$mime}\",\n        \"Content-MD5: {$content_md5}\"\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_PUT, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_INFILE, fopen($file, 'r'));\n    curl_setopt($ch, CURLOPT_INFILESIZE, filesize($file));\n\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($http_code == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}\n?>",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $access_key = 'your_access_key';\n    $secret_key = 'your_secret_key';\n    $bucket_name = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = \"$endpoint/$bucket_name/$object\";\n    $file_content = file_get_contents($file);\n    $content_md5 = base64_encode(md5($file_content, true));\n    $date = gmdate('D, d M Y H:i:s T');\n    $string_to_sign = \"PUT\\n$content_md5\\n$mime\\n$date\\n/$bucket_name/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $secret_key, true));\n\n    $headers = [\n        \"Authorization: AWS $access_key:$signature\",\n        \"Content-Type: $mime\",\n        \"Content-MD5: $content_md5\",\n        \"Date: $date\"\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $file_content);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($http_code == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $accessKey = 'your_access_key';\n    $secretKey = 'your_secret_key';\n    $bucket = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = $endpoint . '/' . $bucket . '/' . $object;\n    $fileContent = file_get_contents($file);\n    $timestamp = gmdate('D, d M Y H:i:s T');\n    $signatureString = \"PUT\\n\\n\" . $mime . \"\\n\" . $timestamp . \"\\n/\" . $bucket . \"/\" . $object;\n    $signature = base64_encode(hash_hmac('sha1', $signatureString, $secretKey, true));\n\n    $headers = [\n        'Date: ' . $timestamp,\n        'Authorization: AWS ' . $accessKey . ':' . $signature,\n        'Content-Type: ' . $mime,\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $fileContent);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $access_key = 'your_access_key';\n    $secret_key = 'your_secret_key';\n    $bucket_name = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = $endpoint . '/' . $bucket_name . '/' . $object;\n    $file_content = file_get_contents($file);\n    $content_md5 = base64_encode(md5($file_content, true));\n    $date = gmdate('D, d M Y H:i:s T');\n    $string_to_sign = \"PUT\\n$content_md5\\n$mime\\n$date\\n/$bucket_name/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $secret_key, true));\n\n    $headers = [\n        'Date: ' . $date,\n        'Content-Type: ' . $mime,\n        'Content-MD5: ' . $content_md5,\n        'Authorization: AWS ' . $access_key . ':' . $signature\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $file_content);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($http_code == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $accessKey = 'your_access_key';\n    $secretKey = 'your_secret_key';\n    $bucketName = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = $endpoint . '/' . $bucketName . '/' . $object;\n    $fileContent = file_get_contents($file);\n    $contentLength = strlen($fileContent);\n    $date = gmdate('D, d M Y H:i:s T');\n\n    $stringToSign = \"PUT\\n\\n$mime\\n$date\\n/$bucketName/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $stringToSign, $secretKey, true));\n\n    $headers = [\n        \"Authorization: AWS {$accessKey}:{$signature}\",\n        \"Date: {$date}\",\n        \"Content-Type: {$mime}\",\n        \"Content-Length: {$contentLength}\"\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"PUT\");\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $fileContent);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $accessKey = 'your_access_key';\n    $secretKey = 'your_secret_key';\n    $bucketName = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n    $method = 'PUT';\n    $date = gmdate('D, d M Y H:i:s T');\n    $contentType = $mime;\n    $contentMd5 = base64_encode(md5_file($file, true));\n    $resource = \"/$bucketName/$object\";\n\n    $stringToSign = \"$method\\n$contentMd5\\n$contentType\\n$date\\n$resource\";\n    $signature = base64_encode(hash_hmac('sha1', $stringToSign, $secretKey, true));\n\n    $url = \"$endpoint/$bucketName/$object\";\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, file_get_contents($file));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        \"Date: $date\",\n        \"Content-Type: $contentType\",\n        \"Content-MD5: $contentMd5\",\n        \"Authorization: AWS $accessKey:$signature\"\n    ]);\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $accessKey = 'your_access_key';\n    $secretKey = 'your_secret_key';\n    $bucketName = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n\n    $url = $endpoint . '/' . $bucketName . '/' . $object;\n    $fileContent = file_get_contents($file);\n    $contentLength = strlen($fileContent);\n    $date = gmdate('D, d M Y H:i:s T');\n\n    $stringToSign = \"PUT\\n\\n$mime\\n$date\\n/$bucketName/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $stringToSign, $secretKey, true));\n\n    $headers = [\n        'Date: ' . $date,\n        'Authorization: AWS ' . $accessKey . ':' . $signature,\n        'Content-Type: ' . $mime,\n        'Content-Length: ' . $contentLength\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $fileContent);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $access_key = 'your_access_key';\n    $secret_key = 'your_secret_key';\n    $bucket = 'your_bucket_name';\n    $endpoint = 'https://storage.dogecloud.com';\n    $date = gmdate('D, d M Y H:i:s T');\n    $string_to_sign = \"PUT\\n\\n$mime\\n$date\\n/$bucket/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $secret_key, true));\n\n    $headers = [\n        \"Date: $date\",\n        \"Authorization: AWS $access_key:$signature\",\n        \"Content-Type: $mime\"\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, \"$endpoint/$bucket/$object\");\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_PUT, 1);\n    curl_setopt($ch, CURLOPT_INFILE, fopen($file, 'r'));\n    curl_setopt($ch, CURLOPT_INFILESIZE, filesize($file));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($http_code == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}",
      "<?php\nfunction dogcloud_upload($object, $file, $mime) {\n    if (!file_exists($file)) {\n        return false;\n    }\n\n    $access_key = 'your_access_key';\n    $secret_key = 'your_secret_key';\n    $bucket_name = 'your_bucket_name';\n    $endpoint = 'https://api.dogecloud.com/v2/storage/buckets/' . $bucket_name . '/objects/' . urlencode($object);\n    $date = gmdate('D, d M Y H:i:s T');\n    $string_to_sign = \"PUT\\n\\n$mime\\n$date\\n/$bucket_name/$object\";\n    $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $secret_key, true));\n\n    $headers = [\n        'Date: ' . $date,\n        'Authorization: AWS ' . $access_key . ':' . $signature,\n        'Content-Type: ' . $mime,\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $endpoint);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n    curl_setopt($ch, CURLOPT_POSTFIELDS, file_get_contents($file));\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n\n    if ($http_code == 200) {\n        return $response;\n    } else {\n        return false;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Implement a file downloader class in PHP that supports both regular and resumable downloads using either fopen or cURL, with proper error handling and support for gzip-compressed files.\n\nClass Description: The Downloader class provides functionality to download files from URLs with support for resuming interrupted downloads. It handles both HTTP and HTTPS protocols, checks for server-side range support, and manages temporary files during download.\n\nAttributes: (This class doesn't have explicit attributes as it uses static methods)\n\nMethods:\n\nMethod1: start(string|array $url, string $saveFile, int $timeout = 10) -> array - Main entry point that initiates the download process. Checks URL validity and determines the best download method (fopen or cURL) based on server capabilities.\n\nMethod2: fileDownloadFopen(string $url, string $fileName, int $headerSize = 0) -> array - Downloads a file using PHP's fopen function. Handles basic downloads when range requests aren't supported.\n\nMethod3: fileDownloadCurl(string $url, string $fileName, bool $supportRange = false, int $existsLength = 0, int $length = 0) -> array - Downloads a file using cURL with support for resumable downloads if the server supports range requests.\n\nMethod4: checkGzip(string $file) -> void - Checks if a file is gzip-compressed and decompresses it if necessary. This is an internal helper method.",
    "Canonical_solution": "class Downloader {\n    static function start($url,$saveFile,$timeout = 10) {\n        $dataFile = $saveFile . '.download.cfg';\n        $saveTemp = $saveFile . '.downloading';\n        \n        if(is_array($url)){\n            $fileHeader = $url;\n        }else{\n            $fileHeader = url_header($url);\n        }\n        $url = $fileHeader['url'];\n        if(!$url){\n            return array('code'=>false,'data'=>'url error!');\n        }\n        if(!$fileHeader['supportRange'] || $fileHeader['length'] == 0 ){\n            @unlink($saveTemp);@unlink($saveFile);\n            $result = self::fileDownloadFopen($url,$saveFile,$fileHeader['length']);\n            if($result['code']) {\n                return $result;\n            }else{\n                @unlink($saveTemp);@unlink($saveFile);\n                $result = self::fileDownloadCurl($url,$saveFile,false,0,$fileHeader['length']);\n                @unlink($saveTemp);@unlink($saveFile);\n                return $result;\n            }\n        }\n\n        $existsLength  = is_file($saveTemp) ? filesize($saveTemp) : 0;\n        $contentLength = intval($fileHeader['length']);\n        if( file_exists($saveTemp) && time() - filemtime($saveTemp) < 3) {\n            return array('code'=>false,'data'=>'downloading');\n        }\n        \n        $existsData = array();\n        if(is_file($dataFile)){\n            $tempData = file_get_contents($dataFile);\n            $existsData = json_decode($tempData, 1);\n        }\n        if( file_exists($saveFile) && $contentLength == filesize($saveFile)){\n            @unlink($saveTemp);\n            @unlink($dataFile);\n            return array('code'=>true,'data'=>'exist');\n        }\n\n        if ($existsData['length'] != $contentLength) {\n            $existsData = array('length' => $contentLength);\n        }\n        if($existsLength > $contentLength){\n            @unlink($saveTemp);\n        }\n        file_put_contents($dataFile, json_encode($existsData));\n        $result = self::fileDownloadCurl($url,$saveFile,true,$existsLength,$contentLength);\n        if($result['code']){\n            @unlink($dataFile);\n        }\n        return $result;\n    }\n\n    static function fileDownloadFopen($url, $fileName,$headerSize=0){\n        @ini_set('user_agent','Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n        $fileTemp = $fileName.'.downloading';\n        @set_time_limit(0);\n        @unlink($fileTemp);\n        if ($fp = @fopen ($url, \"rb\")){\n            if(!$downloadFp = @fopen($fileTemp, \"wb\")){\n                return array('code'=>false,'data'=>'open_downloading_error');\n            }\n            while(!feof($fp)){\n                if(!file_exists($fileTemp)){\n                    fclose($downloadFp);\n                    return array('code'=>false,'data'=>'stoped');\n                }\n                clearstatcache();\n                if( $headerSize>0 && $headerSize==get_filesize(iconv_system($fileTemp))){\n                    break;\n                }\n                fwrite($downloadFp, fread($fp, 1024 * 8 ), 1024 * 8);\n            }\n            fclose($downloadFp);\n            fclose($fp);\n            self::checkGzip($fileTemp);\n            if(!@rename($fileTemp,$fileName)){\n                usleep(round(rand(0,1000)*50));\n                @unlink($fileName);\n                $res = @rename($fileTemp,$fileName);\n                if(!$res){\n                    return array('code'=>false,'data'=>'rename error![open]');\n                }\n            }\n            return array('code'=>true,'data'=>'success');\n        }else{\n            return array('code'=>false,'data'=>'url_open_error');\n        }\n    }\n\n    static function fileDownloadCurl($url, $fileName,$supportRange=false,$existsLength=0,$length=0){\n        $fileTemp = $fileName.'.downloading';\n        @set_time_limit(0);\n        if ($fp = @fopen ($fileTemp, \"a\")){\n            $ch = curl_init($url);\n            if($supportRange){\n                curl_setopt($ch, CURLOPT_RANGE, $existsLength.\"-\");\n            }\n            curl_setopt($ch, CURLOPT_FILE, $fp);\n            curl_setopt($ch, CURLOPT_REFERER,get_url_link($url));\n            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n            curl_setopt($ch, CURLOPT_USERAGENT,'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36');\n\n            $res = curl_exec($ch);\n            curl_close($ch);\n            fclose($fp);\n\n            $filesize = get_filesize(iconv_system($fileTemp));\n            if($filesize < $length && $length!=0){\n                return array('code'=>false,'data'=>'downloading');\n            }\n            if($res && filesize($fileTemp) != 0){\n                self::checkGzip($fileTemp);\n                if(!@rename($fileTemp,$fileName)){\n                    @unlink($fileName);\n                    $res = @rename($fileTemp,$fileName);\n                    if(!$res){\n                        return array('code'=>false,'data'=>'rename error![curl]');\n                    }\n                }\n                return array('code'=>true,'data'=>'success');\n            }\n            return array('code'=>false,'data'=>'curl exec error!');\n        }else{\n            return array('code'=>false,'data'=>'file create error');\n        }\n    }\n\n    static function checkGzip($file){\n        $char = \"\\x1f\\x8b\";\n        $str  = file_sub_str($file,0,2);\n        if($char != $str) return;\n\n        ob_start();   \n        readgzfile($file);   \n        $out = ob_get_clean();\n        file_put_contents($file,$out);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['status' => 'error', 'message' => 'Invalid URL'];\n            }\n        }\n\n        $tempFile = $saveFile . '.tmp';\n        $existsLength = file_exists($tempFile) ? filesize($tempFile) : 0;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url[0]);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['status' => 'error', 'message' => 'Failed to get file info'];\n        }\n\n        $headers = self::getHeaders($response);\n        $supportRange = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes';\n\n        if ($supportRange && $existsLength > 0) {\n            return self::fileDownloadCurl($url[0], $tempFile, true, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $in = fopen($url, 'rb');\n        if (!$in) {\n            return ['status' => 'error', 'message' => 'Failed to open URL'];\n        }\n\n        $out = fopen($fileName, 'wb');\n        if (!$out) {\n            fclose($in);\n            return ['status' => 'error', 'message' => 'Failed to create file'];\n        }\n\n        while ($chunk = fread($in, 8192)) {\n            fwrite($out, $chunk);\n        }\n\n        fclose($in);\n        fclose($out);\n\n        self::checkGzip($fileName);\n\n        return ['status' => 'success', 'message' => 'Download complete'];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange, $existsLength = 0, $length = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        $data = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['status' => 'error', 'message' => 'Failed to download file'];\n        }\n\n        $out = fopen($fileName, $supportRange && $existsLength > 0 ? 'ab' : 'wb');\n        if (!$out) {\n            return ['status' => 'error', 'message' => 'Failed to open file for writing'];\n        }\n\n        fwrite($out, $data);\n        fclose($out);\n\n        self::checkGzip($fileName);\n\n        return ['status' => 'success', 'message' => 'Download complete'];\n    }\n\n    private static function checkGzip($file) {\n        $fp = gzopen($file, 'r');\n        if ($fp) {\n            $content = gzread($fp, 1024);\n            gzclose($fp);\n\n            if ($content !== false) {\n                $newFile = $file . '.gz';\n                rename($file, $newFile);\n                $fp = gzopen($newFile, 'r');\n                $out = fopen($file, 'w');\n                while ($string = gzread($fp, 4096)) {\n                    fwrite($out, $string, strlen($string));\n                }\n                fclose($out);\n                gzclose($fp);\n                unlink($newFile);\n            }\n        }\n    }\n\n    private static function getHeaders($rawHeaders) {\n        $headers = [];\n        $lines = explode(\"\\n\", $rawHeaders);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['success' => false, 'message' => 'Invalid URL'];\n            }\n        }\n\n        $tempFile = $saveFile . '.tmp';\n        $existsLength = file_exists($tempFile) ? filesize($tempFile) : 0;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url[0]);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['success' => false, 'message' => 'Failed to get file info'];\n        }\n\n        $headers = self::parseHeaders($response);\n        $supportRange = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes';\n\n        if ($supportRange && $existsLength > 0) {\n            return self::fileDownloadCurl($url[0], $tempFile, true, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function parseHeaders($response) {\n        $headers = [];\n        $headerText = substr($response, 0, strpos($response, \"\\r\\n\\r\\n\"));\n        foreach (explode(\"\\r\\n\", $headerText) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $in = fopen($url, \"rb\");\n        if (!$in) {\n            return ['success' => false, 'message' => 'Failed to open URL'];\n        }\n\n        $out = fopen($fileName, \"wb\");\n        if (!$out) {\n            fclose($in);\n            return ['success' => false, 'message' => 'Failed to create file'];\n        }\n\n        while ($chunk = fread($in, 8192)) {\n            fwrite($out, $chunk);\n        }\n\n        fclose($in);\n        fclose($out);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download complete'];\n    }\n\n    public static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        $out = fopen($fileName, $supportRange && $existsLength > 0 ? 'ab' : 'wb');\n        if (!$out) {\n            curl_close($ch);\n            return ['success' => false, 'message' => 'Failed to create file'];\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $out);\n\n        if (!curl_exec($ch)) {\n            fclose($out);\n            curl_close($ch);\n            return ['success' => false, 'message' => 'cURL Error: ' . curl_error($ch)];\n        }\n\n        fclose($out);\n        curl_close($ch);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download complete'];\n    }\n\n    private static function checkGzip($file) {\n        $fp = gzopen($file, 'rb');\n        if ($fp) {\n            $content = gzread($fp, 1024);\n            gzclose($fp);\n\n            $newFile = $file . '.gz';\n            rename($file, $newFile);\n\n            $fpOut = fopen($file, 'wb');\n            if ($fpOut) {\n                $fpIn = gzopen($newFile, 'rb');\n                if ($fpIn) {\n                    while (!gzeof($fpIn)) {\n                        fwrite($fpOut, gzread($fpIn, 1024 * 1024));\n                    }\n                    gzclose($fpIn);\n                    fclose($fpOut);\n                    unlink($newFile);\n                } else {\n                    fclose($fpOut);\n                    rename($newFile, $file);\n                }\n            }\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['status' => 'error', 'message' => 'Invalid URL'];\n            }\n        }\n\n        $method = function_exists('curl_init') ? 'cURL' : 'fopen';\n        $tempFile = $saveFile . '.tmp';\n\n        if (file_exists($tempFile)) {\n            $existsLength = filesize($tempFile);\n        } else {\n            $existsLength = 0;\n        }\n\n        if ($method === 'cURL') {\n            $ch = curl_init($url[0]);\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n            curl_setopt($ch, CURLOPT_HEADER, true);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $supportRange = strpos(curl_getinfo($ch, CURLINFO_CONTENT_RANGE), '/') !== false;\n            curl_close($ch);\n\n            if ($httpCode !== 200 && $httpCode !== 206) {\n                return ['status' => 'error', 'message' => 'Failed to connect to server'];\n            }\n\n            return self::fileDownloadCurl($url[0], $tempFile, $supportRange, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $fp = fopen($url, 'rb');\n        if (!$fp) {\n            return ['status' => 'error', 'message' => 'Failed to open URL'];\n        }\n\n        $localFp = fopen($fileName, 'wb');\n        if (!$localFp) {\n            fclose($fp);\n            return ['status' => 'error', 'message' => 'Failed to create local file'];\n        }\n\n        while (!feof($fp)) {\n            fwrite($localFp, fread($fp, 8192));\n        }\n\n        fclose($fp);\n        fclose($localFp);\n\n        self::checkGzip($fileName);\n\n        return ['status' => 'success', 'message' => 'Download completed'];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange, $existsLength, $length = 0) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_FILE, fopen($fileName, $existsLength > 0 ? 'ab' : 'wb'));\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n\n        if (!curl_exec($ch)) {\n            curl_close($ch);\n            return ['status' => 'error', 'message' => 'cURL Error: ' . curl_error($ch)];\n        }\n\n        curl_close($ch);\n\n        self::checkGzip($fileName);\n\n        return ['status' => 'success', 'message' => 'Download completed'];\n    }\n\n    private static function checkGzip($file) {\n        $gzFile = gzopen($file, 'r');\n        if ($gzFile) {\n            $tempFile = tempnam(sys_get_temp_dir(), 'decompressed');\n            $fp = fopen($tempFile, 'wb');\n\n            while (!gzeof($gzFile)) {\n                fwrite($fp, gzread($gzFile, 4096));\n            }\n\n            fclose($fp);\n            gzclose($gzFile);\n\n            rename($tempFile, $file);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['success' => false, 'message' => 'Invalid URL'];\n            }\n        }\n\n        $method = function_exists('curl_init') ? 'cURL' : 'fopen';\n        if ($method === 'cURL') {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url[0]);\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $supportRange = strpos(curl_getinfo($ch, CURLINFO_CONTENT_RANGE), '/') !== false;\n            curl_close($ch);\n\n            if ($httpCode == 200 || $httpCode == 206) {\n                return self::fileDownloadCurl($url[0], $saveFile, $supportRange);\n            }\n        }\n\n        return self::fileDownloadFopen($url[0], $saveFile);\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $tempFile = $fileName . '.part';\n        $fp = fopen($tempFile, 'ab');\n        if (!$fp) {\n            return ['success' => false, 'message' => 'Cannot open file for writing'];\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        fclose($fp);\n\n        if ($httpCode == 200) {\n            rename($tempFile, $fileName);\n            self::checkGzip($fileName);\n            return ['success' => true, 'message' => 'Download completed'];\n        } else {\n            unlink($tempFile);\n            return ['success' => false, 'message' => 'Download failed'];\n        }\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $tempFile = $fileName . '.part';\n        if (file_exists($tempFile)) {\n            $existsLength = filesize($tempFile);\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $fp = fopen($tempFile, 'ab');\n        if (!$fp) {\n            return ['success' => false, 'message' => 'Cannot open file for writing'];\n        }\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300);\n        curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        fclose($fp);\n\n        if ($httpCode == 200 || $httpCode == 206) {\n            rename($tempFile, $fileName);\n            self::checkGzip($fileName);\n            return ['success' => true, 'message' => 'Download completed'];\n        } else {\n            unlink($tempFile);\n            return ['success' => false, 'message' => 'Download failed'];\n        }\n    }\n\n    private static function checkGzip($file) {\n        $gzFile = gzopen($file, 'rb');\n        if ($gzFile) {\n            $tempFile = $file . '.tmp';\n            $fp = fopen($tempFile, 'wb');\n            while (!gzeof($gzFile)) {\n                fwrite($fp, gzread($gzFile, 4096));\n            }\n            gzclose($gzFile);\n            fclose($fp);\n            unlink($file);\n            rename($tempFile, $file);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['status' => 'error', 'message' => 'Invalid URL'];\n            }\n        }\n\n        $tempFile = $saveFile . '.part';\n        $existsLength = file_exists($tempFile) ? filesize($tempFile) : 0;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url[0]);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['status' => 'error', 'message' => 'Failed to connect to server'];\n        }\n\n        $headers = self::parseHeaders($response);\n        $supportRange = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes';\n\n        if ($supportRange && $existsLength > 0) {\n            return self::fileDownloadCurl($url[0], $tempFile, true, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function parseHeaders($rawHeaders) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($rawHeaders));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $fp = fopen($url, 'rb');\n        if (!$fp) {\n            return ['status' => 'error', 'message' => 'Failed to open URL'];\n        }\n\n        $localFp = fopen($fileName, 'wb');\n        if (!$localFp) {\n            fclose($fp);\n            return ['status' => 'error', 'message' => 'Failed to create local file'];\n        }\n\n        while (!feof($fp)) {\n            fwrite($localFp, fread($fp, 8192));\n        }\n\n        fclose($fp);\n        fclose($localFp);\n\n        self::checkGzip($fileName);\n\n        return ['status' => 'success', 'message' => 'Download complete'];\n    }\n\n    public static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_FILE, fopen($fileName, 'ab'));\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['status' => 'error', 'message' => 'Failed to download file'];\n        }\n\n        self::checkGzip($fileName);\n\n        return ['status' => 'success', 'message' => 'Download complete'];\n    }\n\n    private static function checkGzip($file) {\n        $fp = gzopen($file, 'rb');\n        if ($fp) {\n            $newFile = $file . '.tmp';\n            $localFp = fopen($newFile, 'wb');\n            while (!gzeof($fp)) {\n                fwrite($localFp, gzread($fp, 4096));\n            }\n            fclose($localFp);\n            gzclose($fp);\n            unlink($file);\n            rename($newFile, $file);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n        foreach ($url as $u) {\n            if (filter_var($u, FILTER_VALIDATE_URL)) {\n                $headers = get_headers($u, true);\n                if (isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes') {\n                    return self::fileDownloadCurl($u, $saveFile, true);\n                } else {\n                    return self::fileDownloadFopen($u, $saveFile);\n                }\n            }\n        }\n        return ['success' => false, 'message' => 'Invalid URL'];\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $tempFile = tempnam(sys_get_temp_dir(), 'dl');\n        $out = fopen($tempFile, 'wb');\n        $in = fopen($url, 'rb');\n        if ($in && $out) {\n            while ($chunk = fread($in, 8192)) {\n                fwrite($out, $chunk);\n            }\n            fclose($in);\n            fclose($out);\n            rename($tempFile, $fileName);\n            self::checkGzip($fileName);\n            return ['success' => true, 'message' => 'Download completed'];\n        }\n        unlink($tempFile);\n        return ['success' => false, 'message' => 'Failed to download file'];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange, $existsLength = 0, $length = 0) {\n        $tempFile = tempnam(sys_get_temp_dir(), 'dl');\n        if ($existsLength > 0) {\n            $fp = fopen($tempFile, 'ab');\n        } else {\n            $fp = fopen($tempFile, 'wb');\n        }\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, \"$existsLength-\");\n        }\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        fclose($fp);\n        if ($httpCode == 200 || $httpCode == 206) {\n            if ($existsLength > 0) {\n                file_put_contents($fileName, file_get_contents($fileName) . file_get_contents($tempFile));\n            } else {\n                rename($tempFile, $fileName);\n            }\n            self::checkGzip($fileName);\n            return ['success' => true, 'message' => 'Download completed'];\n        }\n        unlink($tempFile);\n        return ['success' => false, 'message' => 'Failed to download file'];\n    }\n\n    private static function checkGzip($file) {\n        $gzFile = gzopen($file, 'r');\n        if ($gzFile) {\n            $tempFile = tempnam(sys_get_temp_dir(), 'gz');\n            $out = fopen($tempFile, 'wb');\n            while (!gzeof($gzFile)) {\n                fwrite($out, gzread($gzFile, 4096));\n            }\n            fclose($out);\n            gzclose($gzFile);\n            unlink($file);\n            rename($tempFile, $file);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['success' => false, 'message' => 'Invalid URL'];\n            }\n        }\n\n        $method = function_exists('curl_init') ? 'cURL' : 'fopen';\n        $existsLength = file_exists($saveFile) ? filesize($saveFile) : 0;\n\n        if ($method === 'cURL') {\n            $ch = curl_init($url[0]);\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n            curl_setopt($ch, CURLOPT_HEADER, true);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $response = curl_exec($ch);\n            curl_close($ch);\n\n            $headers = self::parseHeaders($response);\n            $supportRange = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] !== 'none';\n\n            return self::fileDownloadCurl($url[0], $saveFile, $supportRange, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $saveFile);\n        }\n    }\n\n    private static function parseHeaders($rawHeaders) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($rawHeaders));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    public static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $remote = fopen($url, 'rb');\n        if (!$remote) {\n            return ['success' => false, 'message' => 'Failed to open remote file'];\n        }\n\n        $local = fopen($fileName, 'wb');\n        if (!$local) {\n            fclose($remote);\n            return ['success' => false, 'message' => 'Failed to open local file'];\n        }\n\n        while (!feof($remote)) {\n            fwrite($local, fread($remote, 1024 * 8));\n        }\n\n        fclose($remote);\n        fclose($local);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download completed'];\n    }\n\n    public static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $ch = curl_init($url);\n        $fp = fopen($fileName, $existsLength > 0 ? 'ab' : 'wb');\n\n        if (!$fp) {\n            curl_close($ch);\n            return ['success' => false, 'message' => 'Failed to open local file'];\n        }\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept-Encoding: gzip']);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            fclose($fp);\n            curl_close($ch);\n            return ['success' => false, 'message' => curl_error($ch)];\n        }\n\n        fclose($fp);\n        curl_close($ch);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download completed'];\n    }\n\n    private static function checkGzip($file) {\n        $gzFile = gzopen($file, 'rb');\n        if ($gzFile) {\n            $tempFile = tempnam(sys_get_temp_dir(), 'decompressed');\n            $tempFp = fopen($tempFile, 'wb');\n            while (!gzeof($gzFile)) {\n                fwrite($tempFp, gzread($gzFile, 1024 * 8));\n            }\n            fclose($tempFp);\n            gzclose($gzFile);\n            unlink($file);\n            rename($tempFile, $file);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['success' => false, 'message' => 'Invalid URL'];\n            }\n        }\n\n        $tempFile = $saveFile . '.tmp';\n        $existsLength = file_exists($tempFile) ? filesize($tempFile) : 0;\n\n        $ch = curl_init($url[0]);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['success' => false, 'message' => 'Failed to get file info'];\n        }\n\n        preg_match('/Content-Length: (\\d+)/', $response, $matches);\n        $length = isset($matches[1]) ? (int)$matches[1] : 0;\n\n        $supportRange = strpos($response, 'Accept-Ranges: bytes') !== false;\n\n        if ($supportRange && $existsLength > 0) {\n            return self::fileDownloadCurl($url[0], $tempFile, $supportRange, $existsLength, $length);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $in = fopen($url, 'rb');\n        if (!$in) {\n            return ['success' => false, 'message' => 'Failed to open URL'];\n        }\n\n        $out = fopen($fileName, 'wb');\n        if (!$out) {\n            fclose($in);\n            return ['success' => false, 'message' => 'Failed to create file'];\n        }\n\n        while ($chunk = fread($in, 8192)) {\n            fwrite($out, $chunk);\n        }\n\n        fclose($in);\n        fclose($out);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download complete'];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange, $existsLength, $length) {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_FILE, fopen($fileName, 'ab'));\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-' . ($length - 1));\n        }\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['success' => false, 'message' => 'Failed to download file'];\n        }\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download complete'];\n    }\n\n    private static function checkGzip($file) {\n        $fp = gzopen($file, 'r');\n        if ($fp) {\n            $content = gzread($fp, 1024);\n            gzclose($fp);\n\n            $newFile = $file . '.gz';\n            rename($file, $newFile);\n\n            $fpOut = fopen($file, 'w');\n            fwrite($fpOut, $content);\n            fclose($fpOut);\n\n            $fpIn = gzopen($newFile, 'r');\n            while (!gzeof($fpIn)) {\n                $buffer = gzread($fpIn, 1024);\n                $fpOut = fopen($file, 'a');\n                fwrite($fpOut, $buffer);\n                fclose($fpOut);\n            }\n            gzclose($fpIn);\n\n            unlink($newFile);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['error' => 'Invalid URL'];\n            }\n        }\n\n        $tempFile = $saveFile . '.tmp';\n        $existsLength = file_exists($tempFile) ? filesize($tempFile) : 0;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url[0]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['error' => 'HTTP Error: ' . $httpCode];\n        }\n\n        $headers = self::parseHeaders($response);\n        $supportRange = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes';\n\n        if ($supportRange && $existsLength > 0) {\n            return self::fileDownloadCurl($url[0], $tempFile, true, $existsLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function parseHeaders($rawHeaders) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($rawHeaders));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $fp = fopen($url, 'rb');\n        if (!$fp) {\n            return ['error' => 'Failed to open URL'];\n        }\n\n        $localFp = fopen($fileName, 'wb');\n        if (!$localFp) {\n            fclose($fp);\n            return ['error' => 'Failed to create local file'];\n        }\n\n        while (!feof($fp)) {\n            fwrite($localFp, fread($fp, 8192));\n        }\n\n        fclose($fp);\n        fclose($localFp);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-');\n        }\n\n        $localFp = fopen($fileName, $supportRange && $existsLength > 0 ? 'ab' : 'wb');\n        if (!$localFp) {\n            curl_close($ch);\n            return ['error' => 'Failed to create local file'];\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $localFp);\n\n        if (!curl_exec($ch)) {\n            fclose($localFp);\n            curl_close($ch);\n            return ['error' => 'cURL Error: ' . curl_error($ch)];\n        }\n\n        fclose($localFp);\n        curl_close($ch);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true];\n    }\n\n    private static function checkGzip($file) {\n        $fp = gzopen($file, 'rb');\n        if ($fp) {\n            $newFile = $file . '.gz';\n            rename($file, $newFile);\n            $outFp = fopen($file, 'wb');\n            while (!gzeof($fp)) {\n                fwrite($outFp, gzread($fp, 4096));\n            }\n            fclose($outFp);\n            gzclose($fp);\n            unlink($newFile);\n        }\n    }\n}",
      "class Downloader {\n    public static function start($url, $saveFile, $timeout = 10) {\n        if (!is_array($url)) {\n            $url = [$url];\n        }\n\n        foreach ($url as $u) {\n            if (!filter_var($u, FILTER_VALIDATE_URL)) {\n                return ['success' => false, 'message' => 'Invalid URL'];\n            }\n        }\n\n        $tempFile = $saveFile . '.tmp';\n        $existsLength = file_exists($tempFile) ? filesize($tempFile) : 0;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url[0]);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            return ['success' => false, 'message' => 'Failed to get file info'];\n        }\n\n        $headers = self::getHeaders($response);\n        $contentLength = isset($headers['Content-Length']) ? (int)$headers['Content-Length'] : 0;\n        $acceptRanges = isset($headers['Accept-Ranges']) && $headers['Accept-Ranges'] === 'bytes';\n\n        if ($acceptRanges && $existsLength > 0 && $existsLength < $contentLength) {\n            return self::fileDownloadCurl($url[0], $tempFile, true, $existsLength, $contentLength);\n        } else {\n            return self::fileDownloadFopen($url[0], $tempFile);\n        }\n    }\n\n    private static function getHeaders($rawHeaders) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($rawHeaders));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n\n    private static function fileDownloadFopen($url, $fileName, $headerSize = 0) {\n        $in = fopen($url, 'rb');\n        if (!$in) {\n            return ['success' => false, 'message' => 'Failed to open URL'];\n        }\n\n        $out = fopen($fileName, 'wb');\n        if (!$out) {\n            fclose($in);\n            return ['success' => false, 'message' => 'Failed to create file'];\n        }\n\n        while ($chunk = fread($in, 8192)) {\n            fwrite($out, $chunk);\n        }\n\n        fclose($in);\n        fclose($out);\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download complete'];\n    }\n\n    private static function fileDownloadCurl($url, $fileName, $supportRange = false, $existsLength = 0, $length = 0) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\n        if ($supportRange && $existsLength > 0) {\n            curl_setopt($ch, CURLOPT_RANGE, $existsLength . '-' . ($length - 1));\n            $out = fopen($fileName, 'ab');\n        } else {\n            $out = fopen($fileName, 'wb');\n        }\n\n        if (!$out) {\n            curl_close($ch);\n            return ['success' => false, 'message' => 'Failed to create file'];\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $out);\n        curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        fclose($out);\n\n        if ($httpCode != 200 && $httpCode != 206) {\n            unlink($fileName);\n            return ['success' => false, 'message' => 'Failed to download file'];\n        }\n\n        self::checkGzip($fileName);\n\n        return ['success' => true, 'message' => 'Download complete'];\n    }\n\n    private static function checkGzip($file) {\n        $fp = gzopen($file, 'rb');\n        if ($fp) {\n            $tempFile = $file . '.tmp';\n            $out = fopen($tempFile, 'wb');\n            if (!$out) {\n                gzclose($fp);\n                return;\n            }\n\n            while (!gzeof($fp)) {\n                fwrite($out, gzread($fp, 4096));\n            }\n\n            fclose($out);\n            gzclose($fp);\n\n            unlink($file);\n            rename($tempFile, $file);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The BcsRequestcore class provides a comprehensive wrapper around PHP's cURL functions to handle HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, with features for request customization, streaming uploads/downloads, authentication, and proxy support. The class manages the entire request lifecycle including preparation, execution, and response processing.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [mixed] - The raw response from the server\nresponse_headers: [array] - Parsed response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - HTTP response status code\nresponse_info: [array] - Additional response information\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Authentication username\npassword: [string|null] - Authentication password\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Flag for debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for streaming read\nread_stream: [resource|null] - Stream resource for reading\nread_stream_size: [int|null] - Size of read stream\nread_stream_read: [int] - Bytes read from stream\nwrite_file: [string|null] - File path for streaming write\nwrite_stream: [resource|null] - Stream resource for writing\nseek_position: [int|null] - Seek position for streams\nregistered_streaming_read_callback: [callable|null] - Callback for streaming read\nregistered_streaming_write_callback: [callable|null] - Callback for streaming write\n\nMethods:\n\n__construct([string|null $url], [array|null $proxy], [array|null $helpers]) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct() -> [self] - Cleans up any open file handles\nsetCredentials([string $user], [string $pass]) -> [self] - Sets basic authentication credentials\naddHeader([string $key], [string $value]) -> [self] - Adds a request header\nremoveHeader([string $key]) -> [self] - Removes a request header\nsetMethod([string $method]) -> [self] - Sets the HTTP method\nsetUseragent([string $ua]) -> [self] - Sets the user agent string\nsetBody([string $body]) -> [self] - Sets the request body\nsetRequestUrl([string $url]) -> [self] - Sets the request URL\nsetCurlopts([array $curlopts]) -> [self] - Sets additional cURL options\nsetReadStreamSize([int $size]) -> [self] - Sets the read stream size\nsetReadStream([resource $resource], [int|null $size]) -> [self] - Sets a stream resource for reading\nsetReadFile([string $location]) -> [self] - Sets a file for streaming read\nsetWriteStream([resource $resource]) -> [self] - Sets a stream resource for writing\nsetWriteFile([string $location]) -> [self] - Sets a file for streaming write\nsetProxy([string $proxy]) -> [self] - Configures proxy settings\nsetSeekPosition([int|null $position]) -> [self] - Sets the seek position for streams\nregisterStreamingReadCallback([callable $callback]) -> [self] - Registers a streaming read callback\nregisterStreamingWriteCallback([callable $callback]) -> [self] - Registers a streaming write callback\nprepRequest() -> [resource] - Prepares and returns a cURL handle with configured options\nsendRequest([bool $parse = false]) -> [mixed] - Executes the request and returns response\nprocessResponse([resource|null $curl_handle], [mixed|null $response]) -> [mixed] - Processes the response into headers and body\nisBaeEnv() -> [bool] - Checks if running in Baidu App Engine environment\ngetResponseHeader([string|null $header]) -> [mixed] - Gets specific or all response headers\ngetResponseBody() -> [string] - Gets the response body\ngetResponseCode() -> [int] - Gets the HTTP response code",
    "Canonical_solution": "use Think\\Upload\\Driver\\Bcs\\BCS_RequestCore_Exception as BCS_RequestCore_Exception;\n\nclass BcsRequestcore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->setProxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function setCredentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function setMethod($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if (false !== $position && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->setReadStreamSize($size);\n    }\n\n    public function setReadFile($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->setReadStream($read_file_handle);\n    }\n\n    public function setWriteStream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->setWriteStream($write_file_handle);\n    }\n\n    public function setProxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new BCS_RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function sendRequest($parse = false)\n    {\n        if (false === $this->isBaeEnv()) {\n            set_time_limit(0);\n        }\n\n        $curl_handle = $this->prepRequest();\n        $this->response = curl_exec($curl_handle);\n\n        if (false === $this->response ||\n            (self::HTTP_GET === $this->method &&\n                curl_errno($curl_handle) === CURLE_PARTIAL_FILE)) {\n            throw new BCS_RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->processResponse($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                $class = '\\Think\\Upload\\Driver\\Bcs\\\\' . $this->response_class;\n                return new $class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    private function isBaeEnv()\n    {\n        if (isset($_SERVER['HTTP_HOST'])) {\n            $host = $_SERVER['HTTP_HOST'];\n            $pos = strpos($host, '.');\n            if (false !== $pos) {\n                $substr = substr($host, $pos + 1);\n                if ('duapp.com' == $substr) {\n                    return true;\n                }\n            }\n        }\n        if (isset($_SERVER[\"HTTP_BAE_LOGID\"])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function getResponseHeader($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody()\n    {\n        return $this->response_body;\n    }\n\n    public function getResponseCode()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $opt => $value) {\n                curl_setopt($this->curl_handle, $opt, $value);\n            }\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $this->response_headers[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n\n        curl_close($this->curl_handle);\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n\n        return $len;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->setRequestUrl($url);\n        }\n        if ($proxy !== null) {\n            $this->setProxy($proxy);\n        }\n        if ($helpers !== null) {\n            if (isset($helpers['request_class'])) {\n                $this->request_class = $helpers['request_class'];\n            }\n            if (isset($helpers['response_class'])) {\n                $this->response_class = $helpers['response_class'];\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->read_stream_size = $size;\n        }\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if (!empty($this->request_headers)) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->method === 'POST' || $this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n\n        curl_close($this->curl_handle);\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['BAE_ENV_APPID']);\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $opt => $value) {\n                curl_setopt($this->curl_handle, $opt, $value);\n            }\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->seek_position !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_RESUME_FROM, $this->seek_position);\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this : $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function isBaeEnv() {\n        return getenv('BAE_ENV_APPID') !== false;\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $this->response_headers[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT' || $this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n\n        if ($this->seek_position !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_RESUME_FROM, $this->seek_position);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this : $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['BAE_ENV_APPID']);\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n\n        if ($this->seek_position !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_RESUME_FROM, $this->seek_position);\n        }\n\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function isBaeEnv() {\n        return getenv('BAE_ENV_APPID') !== false;\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->seek_position !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_RESUME_FROM, $this->seek_position);\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this : $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function isBaeEnv() {\n        return getenv('BAE_ENV_APPID') !== false;\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if (!empty($this->request_headers)) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this : $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['BAE_ENV_APPID']);\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $this->response_headers[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n}",
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->seek_position !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_RESUME_FROM, $this->seek_position);\n        }\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        curl_close($this->curl_handle);\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function isBaeEnv() {\n        return getenv('BAE_ENV_APPID') !== false;\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n}"
    ],
    "unmatched_results": [
      "class BcsRequestcore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BcsRequestcore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->setRequestUrl($url);\n        if ($proxy) $this->setProxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request'])) $this->request_class = $helpers['request'];\n            if (isset($helpers['response'])) $this->response_class = $helpers['response'];\n        }\n        $this->curl_handle = curl_init();\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) fclose($this->read_stream);\n        if ($this->write_stream) fclose($this->write_stream);\n        curl_close($this->curl_handle);\n    }\n\n    public function setCredentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function addHeader($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function removeHeader($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function setMethod($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function setUseragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function setBody($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function setRequestUrl($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function setCurlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function setReadStreamSize($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadStream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function setReadFile($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        return $this;\n    }\n\n    public function setWriteStream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function setWriteFile($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function setProxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function setSeekPosition($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function registerStreamingReadCallback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function registerStreamingWriteCallback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function prepRequest() {\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->curlopts) curl_setopt_array($this->curl_handle, $this->curlopts);\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READDATA, $this->read_stream);\n            if ($this->read_stream_size) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->seek_position !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_RESUME_FROM, $this->seek_position);\n        }\n        if ($this->registered_streaming_read_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, $this->registered_streaming_read_callback);\n        }\n        if ($this->registered_streaming_write_callback) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, $this->registered_streaming_write_callback);\n        }\n        return $this->curl_handle;\n    }\n\n    public function sendRequest($parse = false) {\n        $this->prepRequest();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        if ($parse) {\n            $this->processResponse($this->curl_handle, $this->response);\n        }\n        return $this->response;\n    }\n\n    public function processResponse($curl_handle, $response) {\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name]))\n            $this->response_headers[$name] = [trim($header[1])];\n        else\n            $this->response_headers[$name][] = trim($header[1]);\n        return $len;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['BAE_ENV_APPID']);\n    }\n\n    public function getResponseHeader($header = null) {\n        if ($header) {\n            return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function getResponseBody() {\n        return $this->response_body;\n    }\n\n    public function getResponseCode() {\n        return $this->response_code;\n    }\n}"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a PHP class that implements a simple HTTP client using cURL for making GET requests, with configurable options and proper error handling.\n\nClass Description: The SimpleHttpClient class provides functionality to send HTTP GET requests using PHP's cURL extension. It includes default cURL options that can be customized, handles errors appropriately, and parses the response into status code, headers, and body.\n\nAttributes:\n\ncurlOptions: [array] - An associative array of default cURL options including settings for headers, redirects, timeouts, and response handling.\n\nMethods:\n\nhttpGet: [Name]($url, $options) -> [array] - Sends an HTTP GET request to the specified URL with optional configuration. Returns an associative array containing the response status code, headers, and body.\n- Parameters:\n  - $url: [string] - The target URL for the GET request\n  - $options: [array] - Optional configuration array (currently only supports 'timeout' override)\n- Return: [array] - Associative array with keys: 'statusCode' (int), 'headers' (array), and 'body' (string)\n- Throws: RuntimeException when cURL encounters an error",
    "Canonical_solution": "namespace Hhxsv5\\LaravelS\\Components\\HttpClient;\n\nuse Swoole\\Coroutine\\Http\\Client as CoroutineClient;\n\nclass SimpleHttpClient\n{\n    protected $curlOptions = [\n        CURLOPT_HEADER         => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_MAXREDIRS      => 3,\n        CURLOPT_TIMEOUT        => 5,\n        CURLOPT_CONNECTTIMEOUT => 3,\n    ];\n\n    public function httpGet($url, array $options)\n    {\n        $handle = curl_init();\n        $finalOptions = [\n                CURLOPT_URL     => $url,\n                CURLOPT_HTTPGET => true,\n            ] + $this->curlOptions;\n        if (isset($options['timeout'])) {\n            $finalOptions[CURLOPT_TIMEOUT] = $options['timeout'];\n        }\n        curl_setopt_array($handle, $finalOptions);\n        $responseStr = curl_exec($handle);\n        $errno = curl_errno($handle);\n        $errmsg = curl_error($handle);\n        if ($errno !== 0 || $errmsg !== '') {\n            curl_close($handle);\n            $msg = sprintf('Failed to send Http request(%s), errcode=%d, errmsg=%s', $url, $errno, $errmsg);\n            throw new \\RuntimeException($msg, $errno);\n        }\n\n        $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);\n        curl_close($handle);\n\n        $header = substr($responseStr, 0, $headerSize);\n        $body = substr($responseStr, $headerSize);\n        $lines = explode(\"\\n\", $header);\n        array_shift($lines);\n\n        $headers = [];\n        foreach ($lines as $part) {\n            $middle = explode(':', $part);\n            $key = trim($middle[0]);\n            if ($key === '') {\n                continue;\n            }\n            if (isset($headers[$key])) {\n                $headers[$key] = (array)$headers[$key];\n                $headers[$key][] = isset($middle[1]) ? trim($middle[1]) : '';\n            } else {\n                $headers[$key] = isset($middle[1]) ? trim($middle[1]) : '';\n            }\n        }\n        return ['statusCode' => $statusCode, 'headers' => $headers, 'body' => $body];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTPHEADER => ['Accept: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $mergedOptions = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $mergedOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headers = $this->parseHeaders(substr($response, 0, $headerSize));\n        $body = substr($response, $headerSize);\n\n        curl_close($ch);\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n\n    private function parseHeaders($rawHeaders) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($rawHeaders));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[trim($key)] = trim($value);\n            }\n        }\n        return $headers;\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 10,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $mergedOptions = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $mergedOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        curl_close($ch);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", trim($headersRaw)) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n\n        // Merge user options with defaults\n        $opts = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $opts);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $headersRaw) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HEADER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_TIMEOUT => 10,\n        CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n    ];\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $this->curlOptions[CURLOPT_TIMEOUT] = isset($options['timeout']) ? $options['timeout'] : $this->curlOptions[CURLOPT_TIMEOUT];\n        curl_setopt_array($ch, $this->curlOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", trim($headersRaw)) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $mergedOptions = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $mergedOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        curl_close($ch);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", trim($headersRaw)) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[trim($key)] = trim($value);\n            }\n        }\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $mergedOptions = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $mergedOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        curl_close($ch);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", trim($headersRaw)) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(':', $line, 2);\n                $headers[trim($key)] = trim($value);\n            }\n        }\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n\n        // Merge user options with defaults\n        $mergedOptions = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $mergedOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $headersRaw) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body,\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HEADER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_TIMEOUT => 10,\n        CURLOPT_HTTPHEADER => ['Content-Type: application/json']\n    ];\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $this->curlOptions[CURLOPT_TIMEOUT] = isset($options['timeout']) ? $options['timeout'] : $this->curlOptions[CURLOPT_TIMEOUT];\n        curl_setopt_array($ch, $this->curlOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headersRaw = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        curl_close($ch);\n\n        $headers = [];\n        foreach (explode(\"\\r\\n\", trim($headersRaw)) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $headers,\n            'body' => $body\n        ];\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions;\n\n    public function __construct() {\n        $this->curlOptions = [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HEADER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_TIMEOUT => 10,\n            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n        ];\n    }\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n\n        // Merge user options with defaults\n        $opts = array_merge($this->curlOptions, $options);\n        curl_setopt_array($ch, $opts);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $this->parseHeaders($headers),\n            'body' => $body,\n        ];\n    }\n\n    private function parseHeaders($headers) {\n        $headerArray = [];\n        $headerLines = explode(\"\\r\\n\", trim($headers));\n        foreach ($headerLines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headerArray[$key] = $value;\n            }\n        }\n        return $headerArray;\n    }\n}",
      "class SimpleHttpClient {\n    private $curlOptions = [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HEADER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_TIMEOUT => 30,\n        CURLOPT_HTTPHEADER => ['Content-Type: application/json'],\n    ];\n\n    public function httpGet($url, $options = []) {\n        $ch = curl_init($url);\n        $this->curlOptions[CURLOPT_TIMEOUT] = isset($options['timeout']) ? $options['timeout'] : $this->curlOptions[CURLOPT_TIMEOUT];\n        curl_setopt_array($ch, $this->curlOptions);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new RuntimeException('cURL Error: ' . curl_error($ch));\n        }\n\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headers = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        curl_close($ch);\n\n        return [\n            'statusCode' => $statusCode,\n            'headers' => $this->parseHeaders($headers),\n            'body' => $body,\n        ];\n    }\n\n    private function parseHeaders($headers) {\n        $headerLines = explode(\"\\r\\n\", trim($headers));\n        $parsedHeaders = [];\n        foreach ($headerLines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $parsedHeaders[$key] = $value;\n            }\n        }\n        return $parsedHeaders;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Implement a class for interacting with Baidu Cloud Storage (BCS) using HTTP requests through cURL in PHP, handling file uploads, downloads, and other operations with proper error handling and response parsing.\n\nClass Description: The Bcs class provides an interface to interact with Baidu Cloud Storage (BCS) service. It handles authentication, HTTP requests, and response processing for various operations on cloud storage.\n\nAttributes:\n- rootPath: [string] - The root path for storage operations\n- error: [string] - Stores the last error message encountered\n- config: [array] - Configuration array containing AccessKey, SecretKey, bucket, rename, and timeout settings\n- bcs: [BaiduBCS|null] - Instance of the BaiduBCS client\n\nMethods:\n- __construct([array $config]) -> [void] - Initializes the BCS client with configuration including AccessKey, SecretKey, and other settings\n- request([string $path], [string $method], [array|null $headers], [mixed $body]) -> [mixed] - Makes an HTTP request to BCS service and processes the response\n- response([string $text]) -> [array] - Parses the JSON response from BCS into an array\n- error([string $header]) -> [void] - Processes error responses from BCS and sets the error message\n\nThe request method specifically handles:\n1. Initializing cURL session\n2. Setting request headers and body\n3. Configuring request method (GET, POST, PUT, HEAD)\n4. Executing the request\n5. Processing response and errors\n6. Cleaning up resources",
    "Canonical_solution": "use Think\\Upload\\Driver\\Bcs\\BaiduBCS;\n\nclass Bcs\n{\n    private $rootPath;\n    const DEFAULT_URL = 'bcs.duapp.com';\n    private $error = '';\n    public $config = array(\n        'AccessKey'=> '',\n        'SecretKey'=> '',\n        'bucket'   => '',\n        'rename'   => false,\n        'timeout'  => 3600,\n    );\n    public $bcs = null;\n\n    public function __construct($config)\n    {\n        $this->config = array_merge($this->config, $config);\n        $bcsClass = dirname(__FILE__). \"/Bcs/bcs.class.php\";\n        if(is_file($bcsClass))\n            require_once($bcsClass);\n        $this->bcs = new BaiduBCS($this->config['AccessKey'], $this->config['SecretKey'], self::DEFAULT_URL);\n    }\n\n    private function request($path, $method, $headers = null, $body = null)\n    {\n        $ch = curl_init($path);\n        $_headers = array('Expect:');\n        if (!is_null($headers) && is_array($headers)){\n            foreach($headers as $k => $v) {\n                array_push($_headers, \"{$k}: {$v}\");\n            }\n        }\n\n        $length = 0;\n        $date = gmdate('D, d M Y H:i:s \\G\\M\\T');\n        if (!is_null($body)) {\n            if(is_resource($body)){\n                fseek($body, 0, SEEK_END);\n                $length = ftell($body);\n                fseek($body, 0);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_INFILE, $body);\n                curl_setopt($ch, CURLOPT_INFILESIZE, $length);\n            } else {\n                $length = @strlen($body);\n                array_push($_headers, \"Content-Length: {$length}\");\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } else {\n            array_push($_headers, \"Content-Length: {$length}\");\n        }\n\n        array_push($_headers, \"Date: {$date}\");\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $_headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout']);\n        curl_setopt($ch, CURLOPT_HEADER, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($method == 'PUT' || $method == 'POST') {\n            curl_setopt($ch, CURLOPT_POST, 1);\n        } else {\n            curl_setopt($ch, CURLOPT_POST, 0);\n        }\n\n        if ($method == 'HEAD') {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        }\n\n        $response = curl_exec($ch);\n        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n\n        if ($status == 200) {\n            if ($method == 'GET') {\n                return $body;\n            } else {\n                $data = $this->response($header);\n                return count($data) > 0 ? $data : true;\n            }\n        } else {\n            $this->error($header);\n            return false;\n        }\n    }\n\n    private function response($text)\n    {\n        $items = json_decode($text, true);\n        return $items;\n    }\n\n    private function error($header)\n    {\n        list($status, $stash) = explode(\"\\r\\n\", $header, 2);\n        list($v, $code, $message) = explode(\" \", $status, 3);\n        $message = is_null($message) ? 'File Not Found' : \"[{$status}]:{$message}\";\n        $this->error = $message;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rename']) ? $config['rename'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init($url);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        switch ($method) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                if ($body) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                }\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if ($body) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                }\n                break;\n            case 'HEAD':\n                curl_setopt($ch, CURLOPT_NOBODY, true);\n                break;\n            default:\n                curl_setopt($ch, CURLOPT_HTTPGET, true);\n        }\n\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode >= 400) {\n            $this->error(curl_error($ch));\n        } else {\n            return $this->response($response);\n        }\n\n        curl_close($ch);\n        return false;\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rename']) ? $config['rename'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init($url);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        switch ($method) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                if ($body) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                }\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if ($body) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                }\n                break;\n            case 'HEAD':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'HEAD');\n                break;\n            default:\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        }\n\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode >= 400) {\n            $this->error(curl_error($ch));\n        } else {\n            return $this->response($response);\n        }\n\n        curl_close($ch);\n        return false;\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rootPath']) ? $config['rootPath'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        if ($method === 'POST' || $method === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            if ($body !== null) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } elseif ($method === 'HEAD') {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        } else {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        }\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n        } elseif ($httpCode >= 400) {\n            $this->error($header);\n        }\n\n        curl_close($ch);\n\n        return $this->response($body);\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rootPath']) ? $config['rootPath'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init($url);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        switch ($method) {\n            case 'POST':\n                curl_setopt($ch, CURLOPT_POST, true);\n                if ($body) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                }\n                break;\n            case 'PUT':\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if ($body) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n                }\n                break;\n            case 'HEAD':\n                curl_setopt($ch, CURLOPT_NOBODY, true);\n                break;\n            default:\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        }\n\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n        } elseif ($httpCode >= 400) {\n            $this->error($response);\n        } else {\n            return $this->response($response);\n        }\n\n        curl_close($ch);\n        return false;\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rename']) ? $config['rename'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            return $this->response($response);\n        } else {\n            $this->error($response);\n            return false;\n        }\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rename']) ? $config['rename'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        if ($method === 'POST' || $method === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            if ($body !== null) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n            }\n        } elseif ($method === 'HEAD') {\n            curl_setopt($ch, CURLOPT_NOBODY, true);\n        } else {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        }\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        if ($httpCode >= 400) {\n            $this->error($header);\n            return false;\n        }\n\n        curl_close($ch);\n        return $this->response($body);\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = trim(explode(' ', $header, 3)[2]);\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rename']) ? $config['rename'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        if ($method === 'POST' || $method === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        } else {\n            curl_setopt($ch, CURLOPT_HTTPGET, ($method === 'GET'));\n        }\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $header = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n\n        curl_close($ch);\n\n        if ($httpCode >= 200 && $httpCode < 300) {\n            return $this->response($body);\n        } else {\n            $this->error($header);\n            return false;\n        }\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rename']) ? $config['rename'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout']);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode >= 400) {\n            $this->error(curl_error($ch));\n        } else {\n            return $this->response($response);\n        }\n\n        curl_close($ch);\n        return false;\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header) {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rootPath']) ? $config['rootPath'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['timeout'] ?? 30);\n\n        if ($method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        } elseif ($method === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        } elseif ($method === 'HEAD') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'HEAD');\n        }\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            curl_close($ch);\n            return false;\n        }\n\n        curl_close($ch);\n\n        if ($httpCode >= 400) {\n            $this->error($response);\n            return false;\n        }\n\n        return $this->response($response);\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}",
      "class Bcs {\n    private $rootPath;\n    private $error;\n    private $config;\n    private $bcs;\n\n    public function __construct(array $config) {\n        $this->config = $config;\n        $this->rootPath = isset($config['rootPath']) ? $config['rootPath'] : '';\n        $this->bcs = new BaiduBCS($config['AccessKey'], $config['SecretKey'], $config['bucket']);\n    }\n\n    public function request(string $path, string $method, array $headers = null, $body = null) {\n        $url = \"https://{$this->config['bucket']}.bj.bcebos.com/{$this->rootPath}{$path}\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($httpCode >= 400) {\n            $this->error($response);\n            return false;\n        }\n\n        curl_close($ch);\n        return $this->response($response);\n    }\n\n    public function response(string $text): array {\n        return json_decode($text, true);\n    }\n\n    public function error(string $header): void {\n        $this->error = $header;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a PHP class that utilizes the Guzzle HTTP client to synchronize video processing tasks with a remote API endpoint, handling request signing and response parsing.\n\nClass Description: The SyncVideo class provides functionality to send video processing requests to a remote API endpoint using HTTP POST requests. It handles request signing, timeout configuration, and response parsing.\n\nAttributes:\n- config: [Upyun\\Config] - Configuration object containing service credentials, timeout settings, and endpoint information\n\nMethods:\n- __construct(Config $config) -> [void] - Initializes the class with the provided configuration object\n- process(array $params, string $path) -> [array] - Sends a synchronized video processing request to the specified path with the given parameters, returns the parsed JSON response",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse Upyun\\Config;\nuse Upyun\\Signature;\n\nclass SyncVideo {\n    protected $config;\n\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    public function process($params, $path) {\n        $client = new Client([\n            'timeout' => $this->config->timeout,\n        ]);\n\n        $path = '/' . $this->config->serviceName . $path;\n        $method = 'POST';\n        $signedHeaders = Signature::getHeaderSign($this->config, $method, $path);\n\n        $url = $this->config->getSyncVideoEndPoint() . $path;\n        $response = $client->request($method, $url, [\n            'headers' => $signedHeaders,\n            'json' => $params\n        ]);\n\n        $body = $response->getBody()->getContents();\n        return json_decode($body, true);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->getTimeout(),\n            'base_uri' => $config->getEndpoint()\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $headers = [\n            'Authorization' => $this->signRequest($params)\n        ];\n\n        try {\n            $response = $this->client->request('POST', $path, [\n                'json' => $params,\n                'headers' => $headers\n            ]);\n\n            return json_decode($response->getBody()->getContents(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): string {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return base64_encode(hash_hmac('sha256', json_encode($params), $this->config->getSecretKey(), true));\n    }\n}"
    ],
    "unmatched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->getTimeout(),\n            'base_uri' => $config->getEndpoint(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        try {\n            $signedParams = $this->signRequest($params);\n            $response = $this->client->post($path, [\n                'json' => $signedParams,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request failed: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): array {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return array_merge($params, ['signature' => hash_hmac('sha256', json_encode($params), $this->config->getSecretKey())]);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'base_uri' => $config->getEndpoint(),\n            'timeout'  => $config->getTimeout(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        try {\n            $signedParams = $this->signRequest($params);\n            $response = $this->client->post($path, [\n                'json' => $signedParams,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request failed: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): array {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return array_merge($params, ['signature' => hash_hmac('sha256', json_encode($params), $this->config->getSecretKey())]);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->getTimeout(),\n            'base_uri' => $config->getEndpoint()\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $headers = [\n            'Authorization' => $this->signRequest($params, $path)\n        ];\n\n        try {\n            $response = $this->client->post($path, [\n                'json' => $params,\n                'headers' => $headers\n            ]);\n\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params, string $path): string {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return base64_encode(hash_hmac('sha1', $path . json_encode($params), $this->config->getSecretKey(), true));\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->getTimeout(),\n            'base_uri' => $config->getEndpoint()\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        try {\n            $signedParams = $this->signRequest($params);\n            $response = $this->client->post($path, [\n                'json' => $signedParams\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): array {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return array_merge($params, ['signature' => hash_hmac('sha256', json_encode($params), $this->config->getSecretKey())]);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->getTimeout(),\n            'base_uri' => $config->getEndpoint()\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $headers = [\n            'Authorization' => $this->signRequest($params, $path)\n        ];\n\n        try {\n            $response = $this->client->post($path, [\n                'json' => $params,\n                'headers' => $headers\n            ]);\n\n            return json_decode($response->getBody()->getContents(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request failed: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params, string $path): string {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return 'signed_request';\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'timeout' => $config->getTimeout(),\n            'base_uri' => $config->getEndpoint(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $headers = [\n            'Authorization' => $this->signRequest($params),\n            'Content-Type' => 'application/json',\n        ];\n\n        try {\n            $response = $this->client->post($path, [\n                'json' => $params,\n                'headers' => $headers,\n            ]);\n\n            return json_decode($response->getBody()->getContents(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): string {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return base64_encode(hash_hmac('sha256', json_encode($params), $this->config->getSecretKey(), true));\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $client;\n    private $config;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'base_uri' => $config->getEndpoint(),\n            'timeout'  => $config->getTimeout(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        try {\n            $signedParams = $this->signRequest($params);\n            $response = $this->client->post($path, [\n                'json' => $signedParams,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): array {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return array_merge($params, ['signature' => hash_hmac('sha256', json_encode($params), $this->config->getSecretKey())]);\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Upyun\\Config;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'base_uri' => $config->getEndpoint(),\n            'timeout'  => $config->getTimeout(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $headers = [\n            'Authorization' => $this->signRequest($params),\n            'Content-Type' => 'application/json',\n        ];\n\n        try {\n            $response = $this->client->post($path, [\n                'json' => $params,\n                'headers' => $headers,\n            ]);\n\n            return json_decode($response->getBody()->getContents(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): string {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        return base64_encode(json_encode($params) . ':' . $this->config->getSecretKey());\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass SyncVideo {\n    private $config;\n    private $client;\n\n    public function __construct(Config $config) {\n        $this->config = $config;\n        $this->client = new Client([\n            'base_uri' => $config->getEndpoint(),\n            'timeout'  => $config->getTimeout(),\n        ]);\n    }\n\n    public function process(array $params, string $path): array {\n        $signedParams = $this->signRequest($params);\n        try {\n            $response = $this->client->post($path, [\n                'json' => $signedParams,\n            ]);\n            return json_decode($response->getBody(), true);\n        } catch (RequestException $e) {\n            throw new Exception('Request error: ' . $e->getMessage());\n        }\n    }\n\n    private function signRequest(array $params): array {\n        // Implement request signing logic here\n        // This is a placeholder for demonstration purposes\n        $params['signature'] = hash_hmac('sha256', json_encode($params), $this->config->getSecretKey());\n        return $params;\n    }\n}"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a PHP class that handles interactions with the Alipay API, specifically for processing settlements and generating required signatures for secure communication.\n\nClass Description: The AlipayService class provides functionality to interact with Alipay's payment gateway, focusing on settlement operations. It handles request configuration, signature generation, and HTTP communication using cURL.\n\nAttributes:\n- appId: [string] - The application ID for Alipay API\n- charset: [string] - Character encoding (default: 'utf-8')\n- notifyUrl: [string] - Notification URL for callbacks\n- rsaPrivateKey: [string] - RSA private key for signing requests\n- totalFee: [float] - Total amount for the transaction\n- outTradeNo: [string] - Merchant's unique order number\n- orderName: [string] - Description of the order\n- tradeNo: [string] - Alipay's transaction number\n- tranOut: [string] - Account transferring funds\n- tranIn: [string] - Account receiving funds\n- amountPercentage: [float] - Percentage of amount to transfer\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid($appid) -> [void] - Sets the Alipay application ID\n- setTradeNo($tradeNo) -> [void] - Sets the Alipay transaction number\n- setTranOut($tranOut) -> [void] - Sets the transferring account\n- setTranIn($tranIn) -> [void] - Sets the receiving account\n- setRsaPrivateKey($rsaPrivateKey) -> [void] - Sets the RSA private key\n- setTotalFee($payAmount) -> [void] - Sets the transaction amount\n- setOutTradeNo($outTradeNo) -> [void] - Sets the merchant order number\n- doSettle() -> [array] - Executes the settlement request to Alipay\n- generateSign($params, $signType = \"RSA\") -> [string] - Generates signature for request\n- sign($data, $signType = \"RSA\") -> [string] - Creates RSA signature\n- checkEmpty($value) -> [bool] - Checks if a value is empty\n- getSignContent($params) -> [string] - Prepares content for signing\n- characet($data, $targetCharset) -> [string] - Handles character encoding conversion\n- curlPost($url = '', $postData = '', $options = array()) -> [string] - Executes HTTP POST request using cURL",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $charset;\n    protected $notifyUrl;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n    protected $tradeNo;\n    protected $tranOut;\n    protected $tranIn;\n    protected $amountPercentage;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo)\n    {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut)\n    {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn)\n    {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey)\n    {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle()\n    {\n        $requestConfigs = array(\n            'out_request_no'=>$this->outTradeNo,\n            'trade_no'=>$this->tradeNo,\n            'royalty_parameters'=>array(\n                array(\n                    'trans_out'=>$this->tranOut,\n                    'trans_in'=>$this->tranIn,\n                    'amount'=>$this->totalFee,\n                    'desc'=>'分账给'.$this->tranIn,\n                )\n            ),\n            'operator_id'=>'A001',\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.order.settle',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'app_auth_token'=>'',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    private function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return empty($value);\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // 设置cURL允许执行的最长秒数\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return empty($value);\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if ($this->checkEmpty($v)) continue;\n            $stringToBeSigned .= $k . '=' . $v . '&';\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            file_put_contents(\"test.txt\", \"file=\" . $data . \"\\n\", FILE_APPEND);\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // 设置超时时间\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'account' => $this->tranIn,\n                    'account_type' => 'ALIPAY_LOGONID'\n                ],\n                'payer_show_name' => $this->tranOut,\n                'payee_real_name' => '',\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return empty($value);\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if ($this->checkEmpty($v)) continue;\n            if ($stringToBeSigned === '') {\n                $stringToBeSigned .= \"$k=$v\";\n            } else {\n                $stringToBeSigned .= \"&$k=$v\";\n            }\n        }\n        unset($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        if (curl_errno($ch)) {\n            return curl_error($ch);\n        }\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    private function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return empty($value);\n    }\n\n    private function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // 设置超时时间\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if ($this->checkEmpty($v)) continue;\n            $stringToBeSigned .= $k . '=' . $v . '&';\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset != $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded;charset=' . $this->charset));\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'payee_type' => 'ALIPAY_LOGONID',\n                'payee_account' => $this->tranIn,\n                'amount' => $this->totalFee,\n                'payer_show_name' => $this->orderName,\n                'payee_real_name' => '',\n                'remark' => ''\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            file_put_contents(\"test.txt\", $data);\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', $params);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    private function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    private function checkEmpty($value) {\n        return empty($value);\n    }\n\n    private function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    private function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    private function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // 设置cURL允许执行的最长秒数\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $tradeNo;\n    private $tranOut;\n    private $tranIn;\n    private $amountPercentage;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setTradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setTranOut($tranOut) {\n        $this->tranOut = $tranOut;\n    }\n\n    public function setTranIn($tranIn) {\n        $this->tranIn = $tranIn;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function doSettle() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.fund.trans.toaccount.transfer',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_biz_no' => $this->outTradeNo,\n                'trans_amount' => $this->totalFee,\n                'product_code' => 'TRANS_ACCOUNT_NO_PWD',\n                'payee_info' => [\n                    'identity' => $this->tranIn,\n                    'identity_type' => 'ALIPAY_LOGON_ID'\n                ],\n                'remark' => $this->orderName\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params));\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for making HTTP requests, handling cookies, headers, and connection management.\n\nClass Description: HproseHttpClient is a PHP class that extends HproseBaseHttpClient to provide HTTP client functionality using cURL. It handles request sending, response processing, cookie management, and connection settings.\n\nAttributes:\n- curl: resource - The cURL session handle\n- url: string - The target URL for HTTP requests\n- header: array - Additional HTTP headers to be sent with requests\n- keepAlive: bool - Whether to use keep-alive connection\n- keepAliveTimeout: int - Timeout for keep-alive connection in seconds\n- proxy: string - Proxy server address if configured\n- timeout: int - Request timeout in milliseconds\n\nMethods:\n- __construct(string $url = '') -> void - Initializes the client with optional target URL and creates a cURL session\n- formatCookie(array $cookies) -> string - Formats cookies into a header string\n- send(string $request) -> string - Sends an HTTP request and returns the response body\n  - Input: $request - The request payload to send\n  - Output: The response body from the server\n- __destruct() -> void - Cleans up by closing the cURL session\n\nThe class handles:\n1. cURL session initialization and configuration\n2. Request header construction (including cookies)\n3. SSL verification settings\n4. Connection management (keep-alive or close)\n5. Proxy configuration\n6. Timeout handling\n7. Response processing and error checking\n8. Resource cleanup",
    "Canonical_solution": "require_once('HproseCommon.php');\nrequire_once('HproseIO.php');\nrequire_once('HproseClient.php');\n\nclass HproseHttpClient extends HproseBaseHttpClient {\n    private $curl;\n    protected function formatCookie($cookies) {\n        if (count($cookies) > 0) {\n            return \"Cookie: \" . implode('; ', $cookies);\n        }\n        return '';\n    }\n    public function __construct($url = '') {\n        parent::__construct($url);\n        $this->curl = curl_init();\n    }\n    protected function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_HEADER, TRUE);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($this->curl, CURLOPT_POST, TRUE);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        $headers_array = array($this->getCookie(),\n                                \"Content-Length: \" . strlen($request));\n        if ($this->keepAlive) {\n            $headers_array[] = \"Connection: keep-alive\";\n            $headers_array[] = \"Keep-Alive: \" . $this->keepAliveTimeout;\n        }\n        else {\n            $headers_array[] = \"Connection: close\";\n        }\n        foreach ($this->header as $name => $value) {\n            $headers_array[] = $name . \": \" . $value;\n        }\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $headers_array);\n        if ($this->proxy) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n        if (defined(CURLOPT_TIMEOUT_MS)) {\n            curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n        }\n        else {\n            curl_setopt($this->curl, CURLOPT_TIMEOUT, $this->timeout / 1000);\n        }\n        $response = curl_exec($this->curl);\n        $errno = curl_errno($this->curl);\n        if ($errno) {\n            throw new HproseException($errno . \": \" . curl_error($this->curl));\n        }\n        do {\n            list($response_headers, $response) = explode(\"\\r\\n\\r\\n\", $response, 2); \n            $http_response_header = explode(\"\\r\\n\", $response_headers);\n            $http_response_firstline = array_shift($http_response_header); \n            if (preg_match('@^HTTP/[0-9]\\.[0-9]\\s([0-9]{3})\\s(.*)@',\n                           $http_response_firstline, $matches)) { \n                $response_code = $matches[1];\n                $response_status = trim($matches[2]);\n            }\n            else {\n                $response_code = \"500\";\n                $response_status = \"Unknown Error.\";                \n            }\n        } while (substr($response_code, 0, 1) == \"1\");\n        if ($response_code != '200') {\n            throw new HproseException($response_code . \": \" . $response_status);\n        }\n        $this->setCookie($http_response_header);\n        return $response;\n    }\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct($url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie($cookies) {\n        $cookieString = '';\n        foreach ($cookies as $name => $value) {\n            $cookieString .= \"$name=$value; \";\n        }\n        return trim($cookieString, '; ');\n    }\n\n    public function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception('cURL error: ' . curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        if ($this->curl) {\n            curl_close($this->curl);\n        }\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct($url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie($cookies) {\n        $cookieString = '';\n        foreach ($cookies as $name => $value) {\n            $cookieString .= \"$name=$value; \";\n        }\n        return rtrim($cookieString, '; ');\n    }\n\n    public function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception('cURL error: ' . curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        if ($this->curl) {\n            curl_close($this->curl);\n        }\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct(string $url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->curl, CURLOPT_HEADER, false);\n        curl_setopt($this->curl, CURLOPT_COOKIESESSION, true);\n    }\n\n    private function formatCookie(array $cookies): string {\n        return implode('; ', array_map(function($value, $key) {\n            return \"$key=$value\";\n        }, $cookies, array_keys($cookies)));\n    }\n\n    public function send(string $request): string {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception(curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 0;\n\n    public function __construct(string $url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie(array $cookies): string {\n        return implode('; ', array_map(function($value, $key) {\n            return \"$key=$value\";\n        }, $cookies, array_keys($cookies)));\n    }\n\n    public function send(string $request): string {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->timeout > 0) {\n            curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n        }\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception(curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct(string $url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie(array $cookies): string {\n        return implode('; ', array_map(function($value, $key) {\n            return \"$key=$value\";\n        }, $cookies, array_keys($cookies)));\n    }\n\n    public function send(string $request): string {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception(curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        if ($this->curl) {\n            curl_close($this->curl);\n        }\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct($url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie($cookies) {\n        $cookieString = '';\n        foreach ($cookies as $name => $value) {\n            $cookieString .= \"$name=$value; \";\n        }\n        return trim($cookieString, '; ');\n    }\n\n    public function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_FRESH_CONNECT, false);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n            curl_setopt($this->curl, CURLOPT_FRESH_CONNECT, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n\n        if (curl_errno($this->curl)) {\n            throw new Exception('cURL error: ' . curl_error($this->curl));\n        }\n\n        return $response;\n    }\n\n    public function __destruct() {\n        if ($this->curl) {\n            curl_close($this->curl);\n        }\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct($url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->curl, CURLOPT_HEADER, false);\n        curl_setopt($this->curl, CURLOPT_COOKIESESSION, true);\n        curl_setopt($this->curl, CURLOPT_COOKIEFILE, '');\n        curl_setopt($this->curl, CURLOPT_COOKIEJAR, '');\n    }\n\n    private function formatCookie($cookies) {\n        $cookieString = '';\n        foreach ($cookies as $name => $value) {\n            $cookieString .= \"$name=$value; \";\n        }\n        return trim($cookieString, '; ');\n    }\n\n    public function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception('cURL Error: ' . curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        if ($this->curl) {\n            curl_close($this->curl);\n        }\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct($url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie($cookies) {\n        $cookieString = '';\n        foreach ($cookies as $name => $value) {\n            $cookieString .= \"$name=$value; \";\n        }\n        return trim($cookieString, '; ');\n    }\n\n    public function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception(curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct($url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n    }\n\n    private function formatCookie($cookies) {\n        $cookieString = '';\n        foreach ($cookies as $name => $value) {\n            $cookieString .= \"$name=$value; \";\n        }\n        return trim($cookieString, '; ');\n    }\n\n    public function send($request) {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_FRESH_CONNECT, false);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n            curl_setopt($this->curl, CURLOPT_FRESH_CONNECT, true);\n        }\n\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception(curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        if ($this->curl) {\n            curl_close($this->curl);\n        }\n    }\n}",
      "class HproseHttpClient {\n    private $curl;\n    private $url;\n    private $header = [];\n    private $keepAlive = false;\n    private $keepAliveTimeout = 5;\n    private $proxy = '';\n    private $timeout = 3000;\n\n    public function __construct(string $url = '') {\n        $this->url = $url;\n        $this->curl = curl_init();\n        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($this->curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($this->curl, CURLOPT_HEADER, false);\n        curl_setopt($this->curl, CURLOPT_COOKIESESSION, true);\n        curl_setopt($this->curl, CURLOPT_COOKIEFILE, '');\n        curl_setopt($this->curl, CURLOPT_COOKIEJAR, '');\n    }\n\n    private function formatCookie(array $cookies): string {\n        return implode('; ', array_map(function($value, $key) {\n            return \"$key=$value\";\n        }, $cookies, array_keys($cookies)));\n    }\n\n    public function send(string $request): string {\n        curl_setopt($this->curl, CURLOPT_URL, $this->url);\n        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $request);\n        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header);\n        curl_setopt($this->curl, CURLOPT_TIMEOUT_MS, $this->timeout);\n        if ($this->keepAlive) {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, false);\n            curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, $this->keepAliveTimeout);\n        } else {\n            curl_setopt($this->curl, CURLOPT_FORBID_REUSE, true);\n        }\n        if (!empty($this->proxy)) {\n            curl_setopt($this->curl, CURLOPT_PROXY, $this->proxy);\n        }\n        $response = curl_exec($this->curl);\n        if (curl_errno($this->curl)) {\n            throw new Exception(curl_error($this->curl));\n        }\n        return $response;\n    }\n\n    public function __destruct() {\n        curl_close($this->curl);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a function to download an image from a given URL and save it to a specified file path using PHP's cURL library.\n\nFunction Description: The function uses cURL to make an HTTP request to download an image from the provided URL. It saves the downloaded image to the specified file path. The function includes error handling for the cURL session and file operations.\n\nInput:\n- $url (string): The URL of the image to download\n- $filepath (string): The local file path where the image should be saved\n\nOutput:\n- void: The function does not return a value but outputs a success message when the download is complete\n- The downloaded image is saved to the specified file path\n- Errors during the download process are handled by cURL's error reporting",
    "Canonical_solution": "function downloadImage($url, $filepath)\n{\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    curl_setopt($ch, CURLOPT_REFERER, 'https://ft07.com');\n    curl_exec($ch);\n    curl_close($ch);\n    fclose($fp);\n    echo \"Downloaded: $filepath\\n\";\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        echo \"Error opening file for writing.\";\n        return;\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        die(\"Error opening file for writing: $filepath\");\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo \"cURL Error: \" . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        die(\"Error opening file for writing: $filepath\");\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if (!$fp) {\n        die(\"Error opening file for writing: $filepath\");\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo \"cURL Error: \" . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        die(\"Error opening file for writing: $filepath\");\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo \"cURL Error: \" . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        die(\"Error opening file for writing: $filepath\");\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "<?php\nfunction downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        die(\"Error opening file for writing.\");\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image downloaded successfully and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "function downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if ($fp === false) {\n        echo \"Error opening file for writing.\";\n        return;\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image downloaded successfully and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}",
      "function downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n    \n    if (!$fp) {\n        die(\"Error opening file for writing: $filepath\");\n    }\n    \n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    \n    if (!curl_exec($ch)) {\n        echo 'cURL error: ' . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n    \n    curl_close($ch);\n    fclose($fp);\n}",
      "function downloadImage($url, $filepath) {\n    $ch = curl_init($url);\n    $fp = fopen($filepath, 'wb');\n\n    if (!$fp) {\n        echo \"Error opening file for writing.\";\n        return;\n    }\n\n    curl_setopt($ch, CURLOPT_FILE, $fp);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n\n    $result = curl_exec($ch);\n\n    if ($result === false) {\n        echo 'cURL Error: ' . curl_error($ch);\n    } else {\n        echo \"Image successfully downloaded and saved to $filepath\";\n    }\n\n    curl_close($ch);\n    fclose($fp);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a PHP class for making HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The `baiduRequestCore` class provides a comprehensive wrapper around PHP's cURL functions to simplify HTTP requests. It supports GET, POST, PUT, DELETE, and HEAD methods, handles authentication, manages request/response headers and bodies, and includes streaming capabilities for both uploads and downloads.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [string] - The complete response from the server\nresponse_headers: [array] - Associative array of response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - The HTTP response status code\nresponse_info: [array] - Additional cURL response information\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - The HTTP method to use (GET, POST, etc.)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Username for authentication\npassword: [string|null] - Password for authentication\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Whether to enable debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for reading data\nread_stream: [resource|null] - Stream resource for reading data\nread_stream_size: [int|null] - Size of the read stream\nread_stream_read: [int] - Bytes read from the stream\nwrite_file: [string|null] - File path for writing data\nwrite_stream: [resource|null] - Stream resource for writing data\nseek_position: [int|null] - Position to seek in the read stream\nregistered_streaming_read_callback: [callable|null] - Callback for streaming reads\nregistered_streaming_write_callback: [callable|null] - Callback for streaming writes\n\nMethods:\n\n__construct: [function]([string|null $url, array|null $proxy, array|null $helpers]) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct: [function]() -> [self] - Cleans up any open file handles\nset_credentials: [function]([string $user, string $pass]) -> [self] - Sets authentication credentials\nadd_header: [function]([string $key, string $value]) -> [self] - Adds a request header\nremove_header: [function]([string $key]) -> [self] - Removes a request header\nset_method: [function]([string $method]) -> [self] - Sets the HTTP method\nset_useragent: [function]([string $ua]) -> [self] - Sets the user agent string\nset_body: [function]([string $body]) -> [self] - Sets the request body\nset_request_url: [function]([string $url]) -> [self] - Sets the request URL\nset_curlopts: [function]([array $curlopts]) -> [self] - Sets additional cURL options\nset_read_stream_size: [function]([int $size]) -> [self] - Sets the read stream size\nset_read_stream: [function]([resource $resource, int|null $size]) -> [self] - Sets the read stream resource\nset_read_file: [function]([string $location]) -> [self] - Sets a file to read from\nset_write_stream: [function]([resource $resource]) -> [self] - Sets the write stream resource\nset_write_file: [function]([string $location]) -> [self] - Sets a file to write to\nset_proxy: [function]([string $proxy]) -> [self] - Configures proxy settings\nset_seek_position: [function]([int|null $position]) -> [self] - Sets the seek position for the read stream\nregister_streaming_read_callback: [function]([callable $callback]) -> [self] - Registers a streaming read callback\nregister_streaming_write_callback: [function]([callable $callback]) -> [self] - Registers a streaming write callback\nstreaming_read_callback: [function]([resource $curl_handle, resource $file_handle, int $length]) -> [string] - Callback for streaming reads\nstreaming_write_callback: [function]([resource $curl_handle, string $data]) -> [int] - Callback for streaming writes\nprep_request: [function]() -> [resource] - Prepares and returns a cURL handle with configured options\nprocess_response: [function]([resource|null $curl_handle, string|null $response]) -> [mixed] - Processes the cURL response\nsend_request: [function]([bool $parse]) -> [mixed] - Sends the request and returns the response\nget_response_header: [function]([string|null $header]) -> [mixed] - Gets a specific response header or all headers\nget_response_body: [function]() -> [string] - Gets the response body\nget_response_code: [function]() -> [int] - Gets the response status code",
    "Canonical_solution": "class baiduRequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'baiduRequestCore';\n    public $response_class = 'baiduResponseCore';\n    public $useragent = 'baiduRequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n        \n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new baiduRequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n            if ($written_last === false) {\n                return $written_total;\n            }\n            $written_total += $written_last;\n        }\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n        \n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n        \n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n        \n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        \n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n        \n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n        \n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new baiduRequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n        \n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n        \n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n        \n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n            \n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n            \n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n            \n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n            \n            if ($curl_handle && $response) {\n                return new $this->response_class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n        \n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n        \n        if ($this->response === false) {\n            throw new baiduRequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n        \n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n        \n        if ($parse) {\n            return $parsed_response;\n        }\n        \n        return $this->response;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) fclose($this->read_stream);\n        if (is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT' || $this->method == 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header_line) {\n        $len = strlen($header_line);\n        $this->response .= $header_line;\n        if (preg_match('/^HTTP\\/.* ([0-9]{3})/', $header_line, $matches)) {\n            $this->response_code = (int)$matches[1];\n        }\n        if (trim($header_line) === '') {\n            $this->response_headers = [];\n            $header_lines = explode(\"\\r\\n\", trim(substr($this->response, 0, strpos($this->response, \"\\r\\n\\r\\n\"))));\n            foreach ($header_lines as $line) {\n                if (strpos($line, ': ') === false) continue;\n                list($key, $value) = explode(': ', $line, 2);\n                $this->response_headers[strtolower($key)] = $value;\n            }\n            $this->response_body = substr($this->response, strpos($this->response, \"\\r\\n\\r\\n\") + 4);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, '');\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) fclose($this->read_stream);\n        if ($this->write_stream) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response_headers']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $opt => $val) {\n                curl_setopt($this->curl_handle, $opt, $val);\n            }\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response_headers($curl_handle, $header_line) {\n        $len = strlen($header_line);\n        $header_line = trim($header_line, \"\\r\\n\");\n\n        if (preg_match('/^HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $header_line, $matches)) {\n            $this->response_code = (int)$matches[1];\n        } else {\n            list($key, $value) = explode(': ', $header_line, 2);\n            $this->response_headers[$key] = $value;\n        }\n\n        return $len;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_body = $response;\n        $this->response_info = curl_getinfo($curl_handle);\n        return $this->response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        $this->process_response($this->curl_handle, $response);\n        curl_close($this->curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        return $this->curl_handle;\n    }\n\n    private function parse_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n        if (!$response) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_body = $response;\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, $response);\n        }\n        curl_close($this->curl_handle);\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) fclose($this->read_stream);\n        if (is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    private function process_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name]))\n            $this->response_headers[$name] = [trim($header[1])];\n        else\n            $this->response_headers[$name][] = trim($header[1]);\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->response_class) {\n            return new $this->response_class($this);\n        }\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n        curl_close($this->curl_handle);\n        if ($parse) {\n            return $this->parse_response($response);\n        }\n        return $response;\n    }\n\n    private function parse_response($response) {\n        $this->response_body = $response;\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) fclose($this->read_stream);\n        if ($this->write_stream) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT' || $this->method == 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function parse_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name]))\n            $this->response_headers[$name] = trim($header[1]);\n        else\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->debug_mode) {\n            print_r($this->response_info);\n        }\n        curl_close($curl_handle);\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n        if ($parse) {\n            $this->response_body = $response;\n        }\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    private $request_url;\n    private $request_headers = [];\n    private $request_body;\n    private $response;\n    private $response_headers = [];\n    private $response_body;\n    private $response_code;\n    private $response_info;\n    private $curl_handle;\n    private $method = 'GET';\n    private $proxy;\n    private $username;\n    private $password;\n    private $curlopts;\n    private $debug_mode = false;\n    private $request_class;\n    private $response_class;\n    private $useragent = 'baiduRequestCore/1.0';\n    private $read_file;\n    private $read_stream;\n    private $read_stream_size;\n    private $read_stream_read = 0;\n    private $write_file;\n    private $write_stream;\n    private $seek_position;\n    private $registered_streaming_read_callback;\n    private $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    private function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if ($this->method === 'POST' || $this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n\n        if (!empty($this->request_headers)) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        return $this->curl_handle;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_body = $response;\n        return $this->response;\n    }\n\n    public function send_request($parse = true) {\n        $curl_handle = $this->prep_request();\n        $response = curl_exec($curl_handle);\n        if ($response === false) {\n            throw new Exception(curl_error($curl_handle));\n        }\n        $this->process_response($curl_handle, $response);\n        curl_close($curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return $this->response_headers[strtolower($header)] ?? null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}"
    ],
    "unmatched_results": [
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) fclose($this->read_stream);\n        if ($this->write_stream) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT' || $this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            if ($this->request_body) {\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n            }\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $opt => $value) {\n                curl_setopt($this->curl_handle, $opt, $value);\n            }\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($this->curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        return $this->curl_handle;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name]))\n            $this->response_headers[$name] = trim($header[1]);\n        else\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n\n        if ($this->write_stream) {\n            $this->response_body = '';\n        } else {\n            $this->response_body = $response;\n        }\n\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n\n        if ($parse) {\n            return $this->parse_response();\n        }\n\n        return $response;\n    }\n\n    private function parse_response() {\n        if ($this->response_class) {\n            return new $this->response_class($this->response, $this->response_headers, $this->response_code, $this->response_info);\n        }\n\n        return [\n            'body' => $this->response_body,\n            'headers' => $this->response_headers,\n            'code' => $this->response_code,\n            'info' => $this->response_info\n        ];\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    private $request_url;\n    private $request_headers = [];\n    private $request_body;\n    private $response;\n    private $response_headers = [];\n    private $response_body;\n    private $response_code;\n    private $response_info;\n    private $curl_handle;\n    private $method = 'GET';\n    private $proxy;\n    private $username;\n    private $password;\n    private $curlopts;\n    private $debug_mode = false;\n    private $request_class;\n    private $response_class;\n    private $useragent = 'baiduRequestCore/1.0';\n    private $read_file;\n    private $read_stream;\n    private $read_stream_size;\n    private $read_stream_read = 0;\n    private $write_file;\n    private $write_stream;\n    private $seek_position;\n    private $registered_streaming_read_callback;\n    private $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) fclose($this->read_stream);\n        if (is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        if ($this->debug_mode) {\n            curl_setopt($this->curl_handle, CURLOPT_VERBOSE, true);\n        }\n        return $this->curl_handle;\n    }\n\n    private function process_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) return $len;\n        $name = strtolower(trim($header[0]));\n        if (!array_key_exists($name, $this->response_headers)) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->write_stream) {\n            $this->response_body = '';\n        } else {\n            $this->response_body = $response;\n        }\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n        if ($parse) {\n            // Implement parsing logic here if needed\n        }\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if ($this->read_stream) fclose($this->read_stream);\n        if ($this->write_stream) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if ($this->read_stream && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'header_callback']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->curlopts) curl_setopt_array($this->curl_handle, $this->curlopts);\n\n        switch ($this->method) {\n            case 'POST':\n                curl_setopt($this->curl_handle, CURLOPT_POST, true);\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'PUT':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'DELETE':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n            case 'HEAD':\n                curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n                break;\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        return $this->curl_handle;\n    }\n\n    private function header_callback($curl_handle, $header_line) {\n        $len = strlen($header_line);\n        $header_line = trim($header_line, \"\\r\\n\");\n\n        if (preg_match('/^Set-Cookie:\\s*(.*)$/i', $header_line, $cookies)) {\n            $this->response_headers['Set-Cookie'][] = $cookies[1];\n        } else {\n            list($name, $value) = explode(':', $header_line, 2);\n            $this->response_headers[$name] = trim($value);\n        }\n\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n\n        if ($this->response_info['content_type'] === 'application/json') {\n            $this->response_body = json_decode($response, true);\n        } else {\n            $this->response_body = $response;\n        }\n\n        return $this->response_body;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($parse) {\n            return $this->process_response($this->curl_handle, $response);\n        }\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class baiduRequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'baiduRequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) $this->set_request_url($url);\n        if ($proxy) $this->set_proxy($proxy);\n        if ($helpers) {\n            if (isset($helpers['request_class'])) $this->request_class = $helpers['request_class'];\n            if (isset($helpers['response_class'])) $this->response_class = $helpers['response_class'];\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) fclose($this->read_stream);\n        if (is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream) && $position !== null) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $opt => $value) {\n                curl_setopt($this->curl_handle, $opt, $value);\n            }\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($this->curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        return $this->curl_handle;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name]))\n            $this->response_headers[$name] = [trim($header[1])];\n        else\n            $this->response_headers[$name][] = trim($header[1]);\n\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n\n        if (is_resource($this->write_stream)) {\n            $this->response_body = '';\n        } else {\n            $this->response_body = $response;\n        }\n\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n\n        if ($parse) {\n            // Implement parsing logic here if needed\n        }\n\n        return $response;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests using cURL with file download capabilities, including error handling and size limitations.\n\nClass Description: The timthumb class provides functionality to download files from URLs using cURL with progress tracking and size limitations. It includes error handling for common HTTP status codes and fallback to file_get_contents when cURL is not available.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing downloaded data\n- $curlDataWritten: [int] - Tracks the amount of data written during download\n- $lastURLError: [string|false] - Stores the last error message encountered during URL fetching\n\nMethods:\n- curlWrite($h, $d): [int] - [Static callback function for cURL write operations. Writes data to file and tracks total size written. Returns 0 if size limit exceeded, otherwise returns bytes written]\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data to write\n  - Returns: [int] - Number of bytes processed\n\n- getURL($url, $tempfile): [bool] - [Fetches content from URL and saves to temporary file. Uses cURL if available, falls back to file_get_contents. Handles HTTP errors and size limitations]\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for saving content\n  - Returns: [bool] - True on success, False on failure",
    "Canonical_solution": "class timthumb\n{\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d)\n    {\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if (self::$curlDataWritten > MAX_FILE_SIZE) {\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile)\n    {\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if (function_exists('curl_init')) {\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if (!self::$curlFH) {\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($curl, CURLOPT_HEADER, 0);\n            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);\n            curl_setopt($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt($curl, CURLOPT_MAXREDIRS, 10);\n\n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if ($httpStatus == 404) {\n                $this->set404();\n            }\n            if ($httpStatus == 302) {\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if ($curlResult) {\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents($url);\n            if ($img === false) {\n                $err = error_get_last();\n                if (is_array($err) && $err['message']) {\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if (preg_match('/404/', $this->lastURLError)) {\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if (!file_put_contents($tempfile, $img)) {\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit of 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_HEADER, false);\n            curl_setopt($ch, CURLOPT_NOBODY, false);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode != 200) {\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"Failed to fetch URL using file_get_contents.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit of 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_HEADER, false);\n            curl_setopt($ch, CURLOPT_NOBODY, false);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode != 200) {\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            if ($result === false) {\n                $this->lastURLError = \"cURL Error: \" . curl_error($ch);\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit: 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode >= 400) {\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"Failed to fetch URL using file_get_contents.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit: 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_HEADER, 0);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 10);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode != 200) {\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === FALSE) {\n                $this->lastURLError = \"Failed to fetch URL using file_get_contents.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit: 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (function_exists('curl_init')) {\n            $this->curlFH = fopen($tempfile, 'wb');\n            if (!$this->curlFH) {\n                $this->lastURLError = \"Failed to open temporary file for writing.\";\n                return false;\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_setopt($ch, CURLOPT_HEADER, false);\n            curl_setopt($ch, CURLOPT_NOBODY, false);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n            fclose($this->curlFH);\n            if ($httpCode != 200) {\n                unlink($tempfile);\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                return false;\n            }\n            return true;\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"Failed to fetch URL using file_get_contents.\";\n                return false;\n            }\n            if (strlen($content) > 1048576) { // Example size limit: 1MB\n                $this->lastURLError = \"File size exceeds limit.\";\n                return false;\n            }\n            if (file_put_contents($tempfile, $content) === false) {\n                $this->lastURLError = \"Failed to write to temporary file.\";\n                return false;\n            }\n            return true;\n        }\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 10485760) { // 10MB limit\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($result === false || $httpCode != 200) {\n                $this->lastURLError = \"cURL Error: \" . curl_error($ch) . \" HTTP Code: \" . $httpCode;\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"file_get_contents failed.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit of 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (function_exists('curl_init')) {\n            $this->curlFH = fopen($tempfile, 'wb');\n            if (!$this->curlFH) {\n                $this->lastURLError = \"Failed to open file for writing\";\n                return false;\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode != 200) {\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                fclose($this->curlFH);\n                unlink($tempfile);\n                curl_close($ch);\n                return false;\n            }\n            curl_close($ch);\n            fclose($this->curlFH);\n            return true;\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === FALSE) {\n                $this->lastURLError = \"file_get_contents failed\";\n                return false;\n            }\n            if (strlen($content) > 1048576) { // Example size limit of 1MB\n                $this->lastURLError = \"File size exceeds limit\";\n                return false;\n            }\n            if (@file_put_contents($tempfile, $content) === FALSE) {\n                $this->lastURLError = \"Failed to write to file\";\n                return false;\n            }\n            return true;\n        }\n    }\n}",
      "class timthumb {\n    private $curlFH;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // 1MB size limit\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n\n            if ($result === false || $httpCode != 200) {\n                fclose($this->curlFH);\n                unlink($tempfile);\n                $this->lastURLError = \"HTTP Error: \" . $httpCode;\n                return false;\n            }\n        } else {\n            $data = @file_get_contents($url);\n            if ($data === false || strlen($data) > 1048576) {\n                fclose($this->curlFH);\n                unlink($tempfile);\n                $this->lastURLError = \"Failed to fetch URL or size limit exceeded\";\n                return false;\n            }\n            fwrite($this->curlFH, $data);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 10485760) { // 10MB size limit\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (function_exists('curl_init')) {\n            $this->curlFH = fopen($tempfile, 'wb');\n            if (!$this->curlFH) {\n                $this->lastURLError = \"Failed to open temporary file for writing.\";\n                return false;\n            }\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(__CLASS__, 'curlWrite'));\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n            curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            curl_close($ch);\n            fclose($this->curlFH);\n            if ($httpCode != 200) {\n                unlink($tempfile);\n                $this->lastURLError = \"HTTP Error: $httpCode\";\n                return false;\n            }\n            return true;\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false || strlen($content) > 10485760) {\n                $this->lastURLError = \"Failed to fetch URL or content exceeds size limit.\";\n                return false;\n            }\n            if (@file_put_contents($tempfile, $content) === false) {\n                $this->lastURLError = \"Failed to write to temporary file.\";\n                return false;\n            }\n            return true;\n        }\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = false;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 10485760) { // 10MB limit\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Could not open temporary file for writing.\";\n            return false;\n        }\n\n        if (function_exists('curl_init')) {\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n            curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n            curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_PRIVATE, $this);\n\n            $result = curl_exec($ch);\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            if ($httpCode >= 400) {\n                $this->lastURLError = \"HTTP Error: $httpCode\";\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n\n            if ($result === false) {\n                $this->lastURLError = curl_error($ch);\n                curl_close($ch);\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n\n            curl_close($ch);\n        } else {\n            $content = @file_get_contents($url);\n            if ($content === false) {\n                $this->lastURLError = \"Failed to fetch URL using file_get_contents.\";\n                fclose($this->curlFH);\n                unlink($tempfile);\n                return false;\n            }\n            fwrite($this->curlFH, $content);\n        }\n\n        fclose($this->curlFH);\n        return true;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a PHP class that implements HTTP client functionality using cURL, supporting various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: The RequestCore class provides a comprehensive HTTP client implementation using PHP's cURL extension. It supports standard HTTP methods (GET, POST, PUT, DELETE, HEAD), handles request/response processing, streaming uploads/downloads, authentication, proxy configuration, and SSL verification.\n\nAttributes:\n\nrequest_url: string - The URL to send the request to\nrequest_headers: array - Associative array of request headers\nrequest_body: string - The request body content\nresponse: string - The complete response including headers and body\nresponse_headers: array - Parsed response headers\nresponse_body: string - The response body content\nresponse_code: int - HTTP response status code\nresponse_info: array - Additional cURL response information\ncurl_handle: resource - The cURL handle resource\nmethod: string - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: array|null - Proxy configuration details\nusername: string|null - Username for authentication\npassword: string|null - Password for authentication\ncurlopts: array|null - Additional cURL options\ndebug_mode: bool - Whether to enable debug mode\nrequest_class: string - Class name for request handling\nresponse_class: string - Class name for response handling\nuseragent: string - User-Agent header value\nread_file: string|null - File path for streaming read\nread_stream: resource|null - Stream resource for reading\nread_stream_size: int|null - Size of read stream\nread_stream_read: int - Bytes read from stream\nwrite_file: string|null - File path for streaming write\nwrite_stream: resource|null - Stream resource for writing\nseek_position: int|null - Position to seek in read stream\ncacert_location: mixed - CA certificate location\nssl_verification: bool - Whether to verify SSL\nregistered_streaming_read_callback: callable|null - Callback for streaming read\nregistered_streaming_write_callback: callable|null - Callback for streaming write\ntimeout: int - Request timeout in seconds\nconnect_timeout: int - Connection timeout in seconds\n\nMethods:\n\n__construct(string $url = null, string $proxy = null, array $helpers = null) -> self - Initializes the request with URL and optional proxy/helpers\n__destruct() -> self - Cleans up open file handles\nset_credentials(string $user, string $pass) -> self - Sets authentication credentials\nadd_header(string $key, string $value) -> self - Adds a request header\nremove_header(string $key) -> self - Removes a request header\nset_method(string $method) -> self - Sets the HTTP method\nset_useragent(string $ua) -> self - Sets the User-Agent header\nset_body(string $body) -> self - Sets the request body\nset_request_url(string $url) -> self - Sets the request URL\nset_curlopts(array $curlopts) -> self - Sets additional cURL options\nset_read_stream_size(int $size) -> self - Sets the read stream size\nset_read_stream(resource $resource, int $size = null) -> self - Sets the read stream resource\nset_read_file(string $location) -> self - Sets a file for streaming read\nset_write_stream(resource $resource) -> self - Sets the write stream resource\nset_write_file(string $location) -> self - Sets a file for streaming write\nset_proxy(string $proxy) -> self - Configures proxy settings\nset_seek_position(int $position) -> self - Sets the seek position for read stream\nregister_streaming_read_callback(callable $callback) -> self - Registers streaming read callback\nregister_streaming_write_callback(callable $callback) -> self - Registers streaming write callback\nstreaming_read_callback(resource $curl_handle, resource $file_handle, int $length) -> string - Callback for streaming read\nstreaming_write_callback(resource $curl_handle, string $data) -> int - Callback for streaming write\nprep_request() -> resource - Prepares and returns a cURL handle\nprocess_response(resource $curl_handle = null, string $response = null) -> mixed - Processes the cURL response\nsend_request(bool $parse = false) -> mixed - Sends the request and returns response\nsend_multi_request(array $handles, array $opt = null) -> array - Sends multiple requests in parallel",
    "Canonical_solution": "namespace NOS\\Http;\n\nclass RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'NOS\\Http\\RequestCore';\n    public $response_class = 'NOS\\Http\\ResponseCore';\n    public $useragent = 'RequestCore/1.4.3';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = false;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n    public $timeout = 5184000;\n    public $connect_timeout = 10;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer)$position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n\n            if ($written_last === false) {\n                return $written_total;\n            }\n\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->ssl_verification) {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 2);\n        } else {\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, false);\n        }\n\n        if ($this->cacert_location === true) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');\n        } elseif (is_string($this->cacert_location)) {\n            curl_setopt($curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if (!ini_get('safe_mode') && !ini_get('open_basedir')) {\n            curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[strtolower($kv[0])] = isset($kv[1]) ? $kv[1] : '';\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                return new ResponseCore($this->response_headers, $this->response_body, $this->response_code);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        set_time_limit(0);\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false) {\n            throw new RequestCore_Exception('cURL resource: ' . (string)$curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null)\n    {\n        set_time_limit(0);\n        if (count($handles) === 0) return array();\n        if (!$opt) $opt = array();\n\n        $limit = isset($opt['limit']) ? $opt['limit'] : -1;\n        $handle_list = $handles;\n        $http = new $this->request_class();\n        $multi_handle = curl_multi_init();\n        $handles_post = array();\n        $added = count($handles);\n        $last_handle = null;\n        $count = 0;\n        $i = 0;\n\n        while ($i < $added) {\n            if ($limit > 0 && $i >= $limit) break;\n            curl_multi_add_handle($multi_handle, array_shift($handles));\n            $i++;\n        }\n\n        do {\n            $active = false;\n            while (($status = curl_multi_exec($multi_handle, $active)) === CURLM_CALL_MULTI_PERFORM) {\n                if (count($handles) > 0) break;\n            }\n\n            $to_process = array();\n            while ($done = curl_multi_info_read($multi_handle)) {\n                if ($done['result'] > 0) {\n                    throw new RequestCore_Exception('cURL resource: ' . (string)$done['handle'] . '; cURL error: ' . curl_error($done['handle']) . ' (' . $done['result'] . ')');\n                } elseif (!isset($to_process[(int)$done['handle']])) {\n                    $to_process[(int)$done['handle']] = $done;\n                }\n            }\n\n            foreach ($to_process as $pkey => $done) {\n                $response = $http->process_response($done['handle'], curl_multi_getcontent($done['handle']));\n                $key = array_search($done['handle'], $handle_list, true);\n                $handles_post[$key] = $response;\n\n                if (count($handles) > 0) {\n                    curl_multi_add_handle($multi_handle, array_shift($handles));\n                }\n\n                curl_multi_remove_handle($multi_handle, $done['handle']);\n                curl_close($done['handle']);\n            }\n        } while ($active || count($handles_post) < $added);\n\n        curl_multi_close($multi_handle);\n        ksort($handles_post, SORT_N",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 30;\n    public $connect_timeout = 10;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->read_stream_size = $size;\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        switch ($this->method) {\n            case 'POST':\n                curl_setopt($this->curl_handle, CURLOPT_POST, true);\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'PUT':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'DELETE':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n            case 'HEAD':\n                curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n                break;\n            default:\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                break;\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        if (preg_match('/^HTTP\\/\\d+\\.\\d+\\s+(\\d+)/', $header, $matches)) {\n            $this->response_code = (int)$matches[1];\n        }\n        $this->response .= $header;\n        if (strpos($header, \"\\r\\n\\r\\n\") !== false) {\n            list($headers, $body) = explode(\"\\r\\n\\r\\n\", $this->response, 2);\n            $this->response_body = $body;\n            $this->response_headers = [];\n            foreach (explode(\"\\r\\n\", $headers) as $line) {\n                if (strpos($line, ':') !== false) {\n                    list($key, $value) = explode(':', $line, 2);\n                    $this->response_headers[trim($key)] = trim($value);\n                }\n            }\n        }\n        return $len;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, '');\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($multi_handle, $running);\n        } while ($running > 0);\n        $results = [];\n        foreach ($handles as $handle) {\n            $results[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($multi_handle, $handle);\n            curl_close($handle);\n        }\n        curl_multi_close($multi_handle);\n        return $results;\n    }\n}"
    ],
    "unmatched_results": [
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 30;\n    public $connect_timeout = 10;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->set_read_stream_size($size);\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback !== null) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback !== null) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username !== null && $this->password !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if (!empty($this->request_headers)) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        switch ($this->method) {\n            case 'POST':\n                curl_setopt($this->curl_handle, CURLOPT_POST, true);\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'PUT':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'DELETE':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n            case 'HEAD':\n                curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n                break;\n            default:\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                break;\n        }\n        if ($this->read_stream !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts !== null) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function parse_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->write_stream !== null) {\n            fclose($this->write_stream);\n        }\n        if ($this->read_stream !== null) {\n            fclose($this->read_stream);\n        }\n        if ($this->debug_mode) {\n            print_r($this->response_info);\n        }\n        return $response;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $response = $this->process_response();\n        if ($parse) {\n            $this->response_body = substr($response, $this->response_info['header_size']);\n        } else {\n            $this->response_body = $response;\n        }\n        return $this->response_body;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n        $active = null;\n        do {\n            $mrc = curl_multi_exec($multi_handle, $active);\n        } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n        while ($active && $mrc == CURLM_OK) {\n            if (curl_multi_select($multi_handle) != -1) {\n                do {\n                    $mrc = curl_multi_exec($multi_handle, $active);\n                } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n            }\n        }\n        $responses = [];\n        foreach ($handles as $handle) {\n            $responses[] = $this->process_response($handle);\n            curl_multi_remove_handle($multi_handle, $handle);\n        }\n        curl_multi_close($multi_handle);\n        return $responses;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 10;\n    public $connect_timeout = 5;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->set_read_stream_size($size);\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        return $this->curl_handle;\n    }\n\n    public function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->write_stream) {\n            $this->response_body = '';\n        } else {\n            $this->response_body = $response;\n        }\n        return $response;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        $this->process_response($this->curl_handle, $response);\n        if ($parse) {\n            return new $this->response_class($this);\n        }\n        return $response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $mh = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($mh, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($mh, $running);\n        } while ($running);\n        $responses = [];\n        foreach ($handles as $handle) {\n            $response = curl_multi_getcontent($handle);\n            $this->process_response($handle, $response);\n            $responses[] = $response;\n            curl_multi_remove_handle($mh, $handle);\n        }\n        curl_multi_close($mh);\n        return $responses;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore_Request';\n    public $response_class = 'RequestCore_Response';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $cacert_location = null;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n    public $timeout = 10;\n    public $connect_timeout = 5;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $helper) {\n                $helper->register($this);\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->read_stream_size = $size;\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback !== null) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        if ($this->seek_position !== null) {\n            fseek($file_handle, $this->seek_position);\n            $this->seek_position = null;\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback !== null) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'header_callback']);\n        curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'write_callback']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, array_map(function($k, $v) { return \"$k: $v\"; }, array_keys($this->request_headers), $this->request_headers));\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->username !== null && $this->password !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->proxy !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->ssl_verification) {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, true);\n            if ($this->cacert_location !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n            }\n        } else {\n            curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        }\n        if ($this->curlopts !== null) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        $this->response = $response;\n        return $this;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            $this->parse_response();\n        }\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($multi_handle, $running);\n        } while ($running > 0);\n        $responses = [];\n        foreach ($handles as $handle) {\n            $responses[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($multi_handle, $handle);\n        }\n        curl_multi_close($multi_handle);\n        return $responses;\n    }\n\n    private function header_callback($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    private function write_callback($curl_handle, $data) {\n        $this->response_body .= $data;\n        return strlen($data);\n    }\n\n    private function parse_response() {\n        list($headers, $this->response_body) = explode(\"\\r\\n\\r\\n\", $this->response, 2);\n        $this->response_headers = [];\n        foreach (explode(\"\\r\\n\", $headers) as $header) {\n            $header = explode(':', $header, 2);\n            if (count($header) < 2) {\n                continue;\n            }\n            $name = strtolower(trim($header[0]));\n            $value = trim($header[1]);\n            if (isset($this->response_headers[$name])) {\n                if (!is_array($this->response_headers[$name])) {\n                    $this->response_headers[$name] = [$this->response_headers[$name]];\n                }\n                $this->response_headers[$name][] = $value;\n            } else {\n                $this->response_headers[$name] = $value;\n            }\n        }\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 30;\n    public $connect_timeout = 10;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->set_read_stream_size($size);\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->method === 'PUT' || $this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        } else {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($response !== null) {\n            list($header, $this->response_body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n            $this->response_headers = [];\n            $lines = explode(\"\\r\\n\", $header);\n            foreach ($lines as $line) {\n                if (strpos($line, ':') !== false) {\n                    list($key, $value) = explode(':', $line, 2);\n                    $this->response_headers[trim($key)] = trim($value);\n                }\n            }\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n            $this->response = $response;\n        }\n        return strlen($response);\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->process_response($this->curl_handle, $this->response);\n        if ($parse) {\n            return new $this->response_class($this);\n        }\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($multi_handle, $running);\n        } while ($running > 0);\n        $results = [];\n        foreach ($handles as $handle) {\n            $results[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($multi_handle, $handle);\n        }\n        curl_multi_close($multi_handle);\n        return $results;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 30;\n    public $connect_timeout = 10;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url) {\n            $this->set_request_url($url);\n        }\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers) {\n            foreach ($helpers as $helper) {\n                $this->$helper();\n            }\n        }\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->set_read_stream_size($size);\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'header_callback']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->method == 'PUT' || $this->method == 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n        if (!$response) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->debug_mode) {\n            print_r($this->response_info);\n        }\n        return $response;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $response = $this->process_response();\n        if ($parse) {\n            $this->parse_response();\n        }\n        return $response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $mh = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($mh, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($mh, $running);\n        } while ($running > 0);\n        $results = [];\n        foreach ($handles as $handle) {\n            $results[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($mh, $handle);\n        }\n        curl_multi_close($mh);\n        return $results;\n    }\n\n    private function header_callback($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!array_key_exists($name, $this->response_headers)) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function parse_response() {\n        list($header, $body) = explode(\"\\r\\n\\r\\n\", $this->response, 2);\n        $this->response_body = $body;\n        $this->response_headers = [];\n        $lines = explode(\"\\r\\n\", $header);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n            list($key, $value) = explode(':', $line, 2);\n            $this->response_headers[strtolower(trim($key))] = trim($value);\n        }\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 30;\n    public $connect_timeout = 10;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->read_stream_size = $size;\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT' || $this->method === 'PATCH') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_code = $this->response_info['http_code'];\n        $this->response = $response;\n        return $this;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            // Implement parsing logic here\n        }\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $mh = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($mh, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($mh, $running);\n        } while ($running);\n        $results = [];\n        foreach ($handles as $handle) {\n            $results[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($mh, $handle);\n        }\n        curl_multi_close($mh);\n        return $results;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info = [];\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 30;\n    public $connect_timeout = 10;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->set_read_stream_size($size);\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        switch ($this->method) {\n            case 'POST':\n                curl_setopt($this->curl_handle, CURLOPT_POST, true);\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'PUT':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case 'DELETE':\n                curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n                break;\n            case 'HEAD':\n                curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n                break;\n            default:\n                curl_setopt($this->curl_handle, CURLOPT_HTTPGET, true);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        return $this->curl_handle;\n    }\n\n    public function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->process_response();\n        if ($parse) {\n            // Implement parsing logic here\n        }\n        return $this->response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $mh = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($mh, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($mh, $running);\n        } while ($running > 0);\n        $responses = [];\n        foreach ($handles as $handle) {\n            $responses[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($mh, $handle);\n        }\n        curl_multi_close($mh);\n        return $responses;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore_Request';\n    public $response_class = 'RequestCore_Response';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 10;\n    public $connect_timeout = 5;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $helper) {\n                $this->$helper();\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->read_stream_size = $size;\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            if ($this->read_stream) {\n                curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n                curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n                if ($this->read_stream_size !== null) {\n                    curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                }\n            } else {\n                curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n            }\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response === null) {\n            $response = curl_exec($curl_handle);\n        }\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = $this->parse_headers(substr($response, 0, $header_size));\n        $this->response_body = substr($response, $header_size);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response = $response;\n        return $this->response;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, $response);\n            return $this;\n        }\n        return $response;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $mh = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($mh, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($mh, $running);\n        } while ($running > 0);\n        $results = [];\n        foreach ($handles as $handle) {\n            $results[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($mh, $handle);\n        }\n        curl_multi_close($mh);\n        return $results;\n    }\n\n    private function parse_headers($raw_headers) {\n        $headers = [];\n        $lines = explode(\"\\n\", trim($raw_headers));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n            list($key, $value) = explode(':', $line, 2);\n            $key = trim($key);\n            $value = trim($value);\n            if (isset($headers[$key])) {\n                if (!is_array($headers[$key])) {\n                    $headers[$key] = [$headers[$key]];\n                }\n                $headers[$key][] = $value;\n            } else {\n                $headers[$key] = $value;\n            }\n        }\n        return $headers;\n    }\n}",
      "class RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class = 'RequestCore';\n    public $response_class = 'ResponseCore';\n    public $useragent = 'RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $cacert_location;\n    public $ssl_verification = true;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n    public $timeout = 10;\n    public $connect_timeout = 5;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n        return $this;\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        if ($size !== null) {\n            $this->set_read_stream_size($size);\n        }\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($this->curl_handle, CURLOPT_CONNECTTIMEOUT, $this->connect_timeout);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_SSL_VERIFYPEER, $this->ssl_verification);\n        if ($this->cacert_location) {\n            curl_setopt($this->curl_handle, CURLOPT_CAINFO, $this->cacert_location);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size !== null) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            if ($this->seek_position !== null) {\n                fseek($this->read_stream, $this->seek_position);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n        }\n        if ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        } else {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if ($curl_handle === null) {\n            $curl_handle = $this->curl_handle;\n        }\n        if ($response !== null) {\n            $this->response .= $response;\n            return strlen($response);\n        }\n        $this->response_body = $this->response;\n        $header_size = curl_getinfo($curl_handle, CURLINFO_HEADER_SIZE);\n        $this->response_headers = $this->parse_headers(substr($this->response, 0, $header_size));\n        $this->response_body = substr($this->response, $header_size);\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        return $this;\n    }\n\n    public function send_request($parse = false) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->process_response();\n        if ($parse) {\n            return $this->response_body;\n        }\n        return $this;\n    }\n\n    public function send_multi_request($handles, $opt = null) {\n        $multi_handle = curl_multi_init();\n        foreach ($handles as $handle) {\n            curl_multi_add_handle($multi_handle, $handle);\n        }\n        $running = null;\n        do {\n            curl_multi_exec($multi_handle, $running);\n        } while ($running > 0);\n        $results = [];\n        foreach ($handles as $handle) {\n            $results[] = curl_multi_getcontent($handle);\n            curl_multi_remove_handle($multi_handle, $handle);\n        }\n        curl_multi_close($multi_handle);\n        return $results;\n    }\n\n    private function parse_headers($raw_headers) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($raw_headers));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) {\n                continue;\n            }\n            list($key, $value) = explode(': ', $line, 2);\n            $headers[$key] = $value;\n        }\n        return $headers;\n    }\n}"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL to make HTTP requests, handle responses, and manage redirects while maintaining request details like headers, status codes, and response body.\n\nClass Description: The `File` class represents an HTTP client that uses cURL to make HTTP requests. It handles request execution, response parsing, redirect following, and error management. It implements the `SimplePie\\HTTP\\Response` interface, providing methods to access response details.\n\nAttributes:\n\n- url: string - The final requested URL after any redirects\n- useragent: string - The user agent string used for the request\n- success: bool - Indicates whether the request was successful\n- headers: array - The response headers from the request\n- body: string - The response body content\n- status_code: int - The HTTP status code of the response\n- redirects: int - The number of redirects followed\n- error: string - Any error message encountered during the request\n- method: int - The method used for the request (bitmask)\n- permanent_url: string - The original URL before any redirects\n- permanentUrlMutable: bool - Flag indicating if permanent URL can be changed\n\nMethods:\n\n- __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) -> void - Initializes the HTTP client, makes the request, and processes the response. Handles redirects recursively.\n- get_body_content(): string - Returns the response body content\n- get_headers(): array - Returns the response headers\n- get_status_code(): int - Returns the HTTP status code\n- get_final_requested_uri(): string - Returns the final URL after any redirects\n- get_permanent_uri(): string - Returns the original URL before any redirects",
    "Canonical_solution": "use SimplePie\\HTTP\\Response;\n\nclass File implements Response\n{\n    private $url;\n    private $useragent;\n    private $success = true;\n    private $headers = [];\n    private $body;\n    private $status_code = 0;\n    private $redirects = 0;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable = true;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = [])\n    {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent;\n\n        if (preg_match('/^http(s)?:\\/\\//i', $url)) {\n            if ($useragent === null) {\n                $useragent = ini_get('user_agent');\n                $this->useragent = $useragent;\n            }\n            if (!is_array($headers)) {\n                $headers = [];\n            }\n            if (!$force_fsockopen && function_exists('curl_exec')) {\n                $this->method = \\SimplePie\\SimplePie::FILE_SOURCE_REMOTE | \\SimplePie\\SimplePie::FILE_SOURCE_CURL;\n                $fp = curl_init();\n                $headers2 = [];\n                foreach ($headers as $key => $value) {\n                    $headers2[] = \"$key: $value\";\n                }\n                curl_setopt($fp, CURLOPT_URL, $url);\n                curl_setopt($fp, CURLOPT_HEADER, 1);\n                curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);\n                curl_setopt($fp, CURLOPT_FAILONERROR, 1);\n                curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);\n                curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);\n                curl_setopt($fp, CURLOPT_REFERER, \\SimplePie\\Misc::url_remove_credentials($url));\n                curl_setopt($fp, CURLOPT_USERAGENT, $useragent);\n                curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);\n                foreach ($curl_options as $curl_param => $curl_value) {\n                    curl_setopt($fp, $curl_param, $curl_value);\n                }\n\n                $responseHeaders = curl_exec($fp);\n                $this->status_code = curl_getinfo($fp, CURLINFO_HTTP_CODE);\n                if (curl_errno($fp)) {\n                    $this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);\n                    $this->success = false;\n                } else {\n                    if ($info = curl_getinfo($fp)) {\n                        $this->url = $info['url'];\n                    }\n                    curl_close($fp);\n                    $responseHeaders = \\SimplePie\\HTTP\\Parser::prepareHeaders($responseHeaders, $info['redirect_count'] + 1);\n                    $parser = new \\SimplePie\\HTTP\\Parser($responseHeaders, true);\n                    if ($parser->parse()) {\n                        $this->headers = $parser->headers;\n                        $this->body = trim($parser->body);\n                        $this->status_code = $parser->status_code;\n                        if ((in_array($this->status_code, [300, 301, 302, 303, 307]) || $this->status_code > 307 && $this->status_code < 400) && $this->redirects < $redirects) {\n                            $this->redirects++;\n                            $this->permanentUrlMutable = $this->permanentUrlMutable && ($this->status_code == 301 || $this->status_code == 308);\n                            $this->__construct($this->url, $timeout, $redirects, $headers, $useragent, $force_fsockopen, $curl_options);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public function get_body_content(): string\n    {\n        return (string) $this->body;\n    }\n\n    public function get_headers(): array\n    {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int\n    {\n        return (int) $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string\n    {\n        return (string) $this->url;\n    }\n\n    public function get_permanent_uri(): string\n    {\n        return (string) $this->permanent_url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\n\nclass File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'PHP';\n        $this->headers = $headers ?? [];\n        $this->redirects = $redirects;\n        $this->method = SIMPLEPIE_HTTP_GET;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'headerCallback']);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'bodyCallback']);\n\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        foreach ($curl_options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->error = curl_error($ch);\n        $this->success = $this->error === '' && $this->status_code >= 200 && $this->status_code < 300;\n\n        curl_close($ch);\n    }\n\n    private function headerCallback($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->headers[$name])) {\n            if (!is_array($this->headers[$name])) {\n                $this->headers[$name] = [$this->headers[$name]];\n            }\n            $this->headers[$name][] = $value;\n        } else {\n            $this->headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    private function bodyCallback($ch, $data) {\n        $this->body .= $data;\n        return strlen($data);\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "<?php\n\nclass File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'SimplePie';\n        $this->success = false;\n        $this->headers = [];\n        $this->body = '';\n        $this->status_code = 0;\n        $this->redirects = 0;\n        $this->error = '';\n        $this->method = SIMPLEPIE_HTTP_GET;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n        if (!empty($curl_options)) {\n            curl_setopt_array($ch, $curl_options);\n        }\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->redirects = curl_getinfo($ch, CURLINFO_REDIRECT_COUNT);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n        } else {\n            $this->success = true;\n        }\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n\n        if (isset($this->headers[$name])) {\n            if (!is_array($this->headers[$name])) {\n                $this->headers[$name] = [$this->headers[$name]];\n            }\n            $this->headers[$name][] = $value;\n        } else {\n            $this->headers[$name] = $value;\n        }\n\n        return $len;\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "<?php\n\nclass File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'PHP';\n        $this->success = false;\n        $this->headers = [];\n        $this->body = '';\n        $this->status_code = 0;\n        $this->redirects = 0;\n        $this->error = '';\n        $this->method = SIMPLEPIE_HTTP_GET;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'headerCallback']);\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n        if (!empty($curl_options)) {\n            curl_setopt_array($ch, $curl_options);\n        }\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->redirects = curl_getinfo($ch, CURLINFO_REDIRECT_COUNT);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n        } else {\n            $this->success = true;\n        }\n\n        curl_close($ch);\n    }\n\n    private function headerCallback($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->headers[$name])) {\n            $this->headers[$name] = trim($header[1]);\n        } else {\n            $this->headers[$name] .= ',' . trim($header[1]);\n        }\n\n        return $len;\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "class File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'SimplePie';\n        $this->headers = $headers ?? [];\n        $this->redirects = $redirects;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt_array($ch, $curl_options);\n\n        $this->body = curl_exec($ch);\n        $this->status_code = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->error = curl_error($ch);\n        $this->success = $this->error === '' && $this->status_code >= 200 && $this->status_code < 400;\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->headers[$name])) {\n            $this->headers[$name] .= ', ' . $value;\n        } else {\n            $this->headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "class File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'SimplePie';\n        $this->headers = $headers ?? [];\n        $this->redirects = $redirects;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt_array($ch, $curl_options);\n\n        $this->body = curl_exec($ch);\n        $this->status_code = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->success = $this->status_code >= 200 && $this->status_code < 300;\n        $this->error = curl_error($ch);\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->headers[$name])) {\n            if (!is_array($this->headers[$name])) {\n                $this->headers[$name] = [$this->headers[$name]];\n            }\n            $this->headers[$name][] = $value;\n        } else {\n            $this->headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "<?php\n\nclass File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'SimplePie';\n        $this->success = false;\n        $this->headers = [];\n        $this->body = '';\n        $this->status_code = 0;\n        $this->redirects = 0;\n        $this->error = '';\n        $this->method = SIMPLEPIE_HTTP_GET;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n        curl_setopt_array($ch, $curl_options);\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->error = curl_error($ch);\n        $this->success = $this->error === '' && $this->status_code >= 200 && $this->status_code < 300;\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n\n        if (isset($this->headers[$name])) {\n            if (!is_array($this->headers[$name])) {\n                $this->headers[$name] = [$this->headers[$name]];\n            }\n            $this->headers[$name][] = $value;\n        } else {\n            $this->headers[$name] = $value;\n        }\n\n        return $len;\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "class File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'SimplePie';\n        $this->headers = $headers ?? [];\n        $this->redirects = $redirects;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt_array($ch, $curl_options);\n\n        $this->body = curl_exec($ch);\n        $this->status_code = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->success = $this->status_code >= 200 && $this->status_code < 300;\n        $this->error = curl_error($ch);\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->headers[$name])) {\n            $this->headers[$name] = trim($header[1]);\n        } else {\n            $this->headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "<?php\n\nclass File implements SimplePie\\HTTP\\Response\n{\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = [])\n    {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'SimplePie';\n        $this->success = false;\n        $this->headers = [];\n        $this->body = '';\n        $this->status_code = 0;\n        $this->redirects = 0;\n        $this->error = '';\n        $this->method = SIMPLEPIE_HTTP_GET;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        if ($headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        }\n        curl_setopt_array($ch, $curl_options);\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->redirects = curl_getinfo($ch, CURLINFO_REDIRECT_COUNT);\n        $this->error = curl_error($ch);\n        $this->success = $this->error === '' && $this->status_code >= 200 && $this->status_code < 400;\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($curl, $header): int\n    {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->headers[$name])) {\n            $this->headers[$name] .= ', ' . $value;\n        } else {\n            $this->headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function get_body_content(): string\n    {\n        return $this->body;\n    }\n\n    public function get_headers(): array\n    {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int\n    {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string\n    {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string\n    {\n        return $this->permanent_url;\n    }\n}",
      "class File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'PHP';\n        $this->headers = $headers ?? [];\n        $this->redirects = $redirects;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'headerCallback']);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'bodyCallback']);\n\n        foreach ($curl_options as $option => $value) {\n            curl_setopt($ch, $option, $value);\n        }\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n\n        if (curl_errno($ch)) {\n            $this->error = curl_error($ch);\n            $this->success = false;\n        } else {\n            $this->success = true;\n        }\n\n        curl_close($ch);\n    }\n\n    private function headerCallback($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->headers[$name])) {\n            $this->headers[$name] = trim($header[1]);\n        } else {\n            $this->headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function bodyCallback($ch, $data) {\n        $this->body .= $data;\n        return strlen($data);\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}",
      "class File implements SimplePie\\HTTP\\Response {\n    private $url;\n    private $useragent;\n    private $success;\n    private $headers;\n    private $body;\n    private $status_code;\n    private $redirects;\n    private $error;\n    private $method;\n    private $permanent_url;\n    private $permanentUrlMutable;\n\n    public function __construct(string $url, int $timeout = 10, int $redirects = 5, ?array $headers = null, ?string $useragent = null, bool $force_fsockopen = false, array $curl_options = []) {\n        $this->url = $url;\n        $this->permanent_url = $url;\n        $this->useragent = $useragent ?? 'PHP';\n        $this->headers = $headers ?? [];\n        $this->redirects = $redirects;\n        $this->permanentUrlMutable = true;\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $redirects);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        curl_setopt($ch, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($ch, CURLOPT_HEADERFUNCTION, [$this, 'parseHeaders']);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, [$this, 'parseBody']);\n\n        if (!empty($curl_options)) {\n            curl_setopt_array($ch, $curl_options);\n        }\n\n        $this->body = curl_exec($ch);\n        $this->status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $this->url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n        $this->error = curl_error($ch);\n        $this->success = $this->error === '' && $this->status_code >= 200 && $this->status_code < 300;\n\n        curl_close($ch);\n    }\n\n    private function parseHeaders($curl, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->headers[$name])) {\n            $this->headers[$name] = trim($header[1]);\n        } else {\n            $this->headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    private function parseBody($curl, $data) {\n        $this->body .= $data;\n        return strlen($data);\n    }\n\n    public function get_body_content(): string {\n        return $this->body;\n    }\n\n    public function get_headers(): array {\n        return $this->headers;\n    }\n\n    public function get_status_code(): int {\n        return $this->status_code;\n    }\n\n    public function get_final_requested_uri(): string {\n        return $this->url;\n    }\n\n    public function get_permanent_uri(): string {\n        return $this->permanent_url;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Implement a PHP class that interacts with the Online-Convert API to handle file conversion jobs, including creating new conversion jobs and checking job statuses.\n\nClass Description: The elFinderEditorOnlineConvert class extends elFinderEditor and provides functionality to interact with the Online-Convert API. It handles initialization, API key validation, and processing conversion requests through HTTP calls using cURL.\n\nAttributes:\n- allowed: array - Defines the allowed actions for this editor (init and api)\n\nMethods:\n- enabled() -> bool - Checks if the editor is enabled by verifying the API key constant and that Online-Convert isn't disabled\n- init() -> array - Initializes the editor and checks for API key and cURL availability\n- api() -> array - Main method to handle API interactions with Online-Convert service. Processes both job creation and status checking\n\nMethod Details:\n1. enabled() -> bool\n   - Input: None\n   - Output: Returns true if the editor is enabled (API key defined and Online-Convert not disabled)\n\n2. init() -> array\n   - Input: None\n   - Output: Returns array with API availability status (checks for API key and cURL function)\n\n3. api() -> array\n   - Input: (Handled through class properties)\n     - category: string - Conversion category\n     - convert: string - Target conversion format\n     - options: string/array - Conversion options\n     - source: string - Source file URL\n     - filename: string - Name of the file\n     - mime: string - MIME type of the file\n     - jobid: string - Job ID for status checking\n   - Output: Returns array containing either:\n     - API response data\n     - Error information\n     - Empty array for non-API conversions",
    "Canonical_solution": "class elFinderEditorOnlineConvert extends elFinderEditor\n{\n    protected $allowed = array('init', 'api');\n\n    public function enabled()\n    {\n        return defined('ELFINDER_ONLINE_CONVERT_APIKEY') && ELFINDER_ONLINE_CONVERT_APIKEY && (!defined('ELFINDER_DISABLE_ONLINE_CONVERT') || !ELFINDER_DISABLE_ONLINE_CONVERT);\n    }\n\n    public function init()\n    {\n        return array('api' => defined('ELFINDER_ONLINE_CONVERT_APIKEY') && ELFINDER_ONLINE_CONVERT_APIKEY && function_exists('curl_init'));\n    }\n\n    public function api()\n    {\n        $endpoint = 'https://api2.online-convert.com/jobs';\n        $category = $this->argValue('category');\n        $convert = $this->argValue('convert');\n        $options = $this->argValue('options');\n        $source = $this->argValue('source');\n        $filename = $this->argValue('filename');\n        $mime = $this->argValue('mime');\n        $jobid = $this->argValue('jobid');\n        $string_method = '';\n        $options = array();\n        $nonApi = array('android', 'blackberry', 'dpg', 'ipad', 'iphone', 'ipod', 'nintendo-3ds', 'nintendo-ds', 'ps3', 'psp', 'wii', 'xbox');\n        if (in_array($convert, $nonApi)) {\n            return array('apires' => array());\n        }\n        $ch = null;\n        if ($convert && $source) {\n            $request = array(\n                'input' => array(array(\n                    'type' => 'remote',\n                    'source' => $source\n                )),\n                'conversion' => array(array(\n                    'target' => $convert\n                ))\n            );\n\n            if ($filename !== '') {\n                $request['input'][0]['filename'] = $filename;\n            }\n\n            if ($mime !== '') {\n                $request['input'][0]['content_type'] = $mime;\n            }\n\n            if ($category) {\n                $request['conversion'][0]['category'] = $category;\n            }\n\n            if ($options && $options !== 'null') {\n                $options = json_decode($options, true);\n            }\n            if (!is_array($options)) {\n                $options = array();\n            }\n            if ($options) {\n                $request['conversion'][0]['options'] = $options;\n            }\n\n            $ch = curl_init($endpoint);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($request));\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'X-Oc-Api-Key: ' . ELFINDER_ONLINE_CONVERT_APIKEY,\n                'Content-Type: application/json',\n                'cache-control: no-cache'\n            ));\n        } else if ($jobid) {\n            $ch = curl_init($endpoint . '/' . $jobid);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n                'X-Oc-Api-Key: ' . ELFINDER_ONLINE_CONVERT_APIKEY,\n                'cache-control: no-cache'\n            ));\n        }\n\n        if ($ch) {\n            $response = curl_exec($ch);\n            $info = curl_getinfo($ch);\n            $error = curl_error($ch);\n            curl_close($ch);\n\n            if (!empty($error)) {\n                $res = array('error' => $error);\n            } else {\n                $data = json_decode($response, true);\n                if (isset($data['status']) && isset($data['status']['code']) && $data['status']['code'] === 'completed') {\n                    $session = $this->elfinder->getSession();\n                    $urlContentSaveIds = $session->get('urlContentSaveIds', array());\n                    $urlContentSaveIds['OnlineConvert-' . $data['id']] = true;\n                    $session->set('urlContentSaveIds', $urlContentSaveIds);\n                }\n                $res = array('apires' => $data);\n            }\n\n            return $res;\n        } else {\n            return array('error' => array('errCmdParams', 'editor.OnlineConvert.api'));\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => $this->enabled(),\n            'cURL' => function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!$this->enabled()) {\n            return ['error' => 'API key not set or Online-Convert is disabled'];\n        }\n\n        $category = $this->request['category'] ?? '';\n        $convert = $this->request['convert'] ?? '';\n        $options = $this->request['options'] ?? [];\n        $source = $this->request['source'] ?? '';\n        $filename = $this->request['filename'] ?? '';\n        $mime = $this->request['mime'] ?? '';\n        $jobid = $this->request['jobid'] ?? '';\n\n        $apiKey = ELFINDER_ONLINECONVERT_API_KEY;\n        $baseUrl = 'https://api.online-convert.com/';\n        $headers = [\n            'x-oc-api-key: ' . $apiKey,\n            'Content-Type: application/json'\n        ];\n\n        if ($jobid) {\n            // Check job status\n            $url = $baseUrl . 'jobs/' . $jobid;\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $response = curl_exec($ch);\n            curl_close($ch);\n            return json_decode($response, true);\n        } else {\n            // Create new conversion job\n            $data = [\n                'input' => [\n                    'type' => 'remote',\n                    'source' => $source\n                ],\n                'conversion' => [\n                    [\n                        'target' => 'file',\n                        'format' => $convert,\n                        'options' => $options\n                    ]\n                ]\n            ];\n\n            $url = $baseUrl . 'jobs';\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $response = curl_exec($ch);\n            curl_close($ch);\n            return json_decode($response, true);\n        }\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => defined('ELFINDER_ONLINECONVERT_API_KEY') && function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!isset($_POST['jobid'])) {\n            $data = [\n                'conversion' => [\n                    $_POST['category'] => [\n                        'target' => $_POST['convert'],\n                        'options' => is_array($_POST['options']) ? $_POST['options'] : json_decode($_POST['options'], true),\n                        'source' => [\n                            'type' => 'remote',\n                            'url' => $_POST['source']\n                        ]\n                    ]\n                ]\n            ];\n\n            $ch = curl_init('https://api2.online-convert.com/jobs');\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Content-Type: application/json',\n                'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n            ]);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $response = curl_exec($ch);\n            curl_close($ch);\n\n            return json_decode($response, true);\n        } else {\n            $ch = curl_init('https://api2.online-convert.com/jobs/' . $_POST['jobid']);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n            ]);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            $response = curl_exec($ch);\n            curl_close($ch);\n\n            return json_decode($response, true);\n        }\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => defined('ELFINDER_ONLINECONVERT_API_KEY') && function_exists('curl_init'),\n        ];\n    }\n\n    public function api() {\n        if (!isset($_POST['action'])) {\n            return [];\n        }\n\n        $action = $_POST['action'];\n        $apiKey = ELFINDER_ONLINECONVERT_API_KEY;\n        $ch = curl_init();\n\n        switch ($action) {\n            case 'create':\n                $category = $_POST['category'] ?? '';\n                $convert = $_POST['convert'] ?? '';\n                $options = $_POST['options'] ?? [];\n                $source = $_POST['source'] ?? '';\n                $filename = $_POST['filename'] ?? '';\n                $mime = $_POST['mime'] ?? '';\n\n                $data = [\n                    'input' => [\n                        'type' => 'remote',\n                        'source' => $source,\n                    ],\n                    'conversion' => [\n                        [\n                            'target' => 'file',\n                            'format' => $convert,\n                            'options' => $options,\n                        ],\n                    ],\n                ];\n\n                curl_setopt($ch, CURLOPT_URL, \"https://api.online-convert.com/jobs\");\n                curl_setopt($ch, CURLOPT_POST, 1);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n                curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                    'Content-Type: application/json',\n                    'x-oc-api-key: ' . $apiKey,\n                ]);\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n                $response = curl_exec($ch);\n                curl_close($ch);\n\n                return json_decode($response, true);\n\n            case 'status':\n                $jobId = $_POST['jobid'] ?? '';\n\n                curl_setopt($ch, CURLOPT_URL, \"https://api.online-convert.com/jobs/\" . $jobId);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                    'x-oc-api-key: ' . $apiKey,\n                ]);\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n                $response = curl_exec($ch);\n                curl_close($ch);\n\n                return json_decode($response, true);\n\n            default:\n                return [];\n        }\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && !defined('ELFINDER_DISABLE_ONLINECONVERT') && ELFINDER_DISABLE_ONLINECONVERT !== true;\n    }\n\n    public function init() {\n        return [\n            'api' => $this->enabled(),\n            'curl' => function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!$this->enabled()) {\n            return ['error' => 'API is not enabled'];\n        }\n\n        $category = $this->request['category'] ?? '';\n        $convert = $this->request['convert'] ?? '';\n        $options = $this->request['options'] ?? [];\n        $source = $this->request['source'] ?? '';\n        $filename = $this->request['filename'] ?? '';\n        $mime = $this->request['mime'] ?? '';\n        $jobid = $this->request['jobid'] ?? '';\n\n        if ($jobid) {\n            return $this->checkJobStatus($jobid);\n        } else {\n            return $this->createConversionJob($category, $convert, $options, $source, $filename, $mime);\n        }\n    }\n\n    private function createConversionJob($category, $convert, $options, $source, $filename, $mime) {\n        $url = 'https://api.online-convert.com/jobs';\n        $data = [\n            'input' => [\n                'type' => 'remote',\n                'source' => $source\n            ],\n            'conversion' => [\n                [\n                    'target' => $convert,\n                    'options' => $options\n                ]\n            ]\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n\n    private function checkJobStatus($jobid) {\n        $url = \"https://api.online-convert.com/jobs/$jobid\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => $this->enabled(),\n            'curl' => function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!$this->enabled()) {\n            return ['error' => 'API key not set or Online-Convert is disabled'];\n        }\n\n        $category = $this->request->get('category');\n        $convert = $this->request->get('convert');\n        $options = $this->request->get('options');\n        $source = $this->request->get('source');\n        $filename = $this->request->get('filename');\n        $mime = $this->request->get('mime');\n        $jobid = $this->request->get('jobid');\n\n        if ($jobid) {\n            return $this->checkJobStatus($jobid);\n        } else {\n            return $this->createConversionJob($category, $convert, $options, $source, $filename, $mime);\n        }\n    }\n\n    private function createConversionJob($category, $convert, $options, $source, $filename, $mime) {\n        $url = \"https://api.online-convert.com/jobs\";\n        $data = [\n            'input' => [\n                'type' => 'remote',\n                'source' => $source\n            ],\n            'conversion' => [\n                [\n                    'target' => 'file',\n                    'format' => $convert,\n                    'options' => $options\n                ]\n            ]\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n\n    private function checkJobStatus($jobid) {\n        $url = \"https://api.online-convert.com/jobs/$jobid\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => $this->enabled(),\n            'curl' => function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!$this->enabled()) {\n            return ['error' => 'API not enabled'];\n        }\n\n        $category = $this->request['category'] ?? '';\n        $convert = $this->request['convert'] ?? '';\n        $options = $this->request['options'] ?? [];\n        $source = $this->request['source'] ?? '';\n        $filename = $this->request['filename'] ?? '';\n        $mime = $this->request['mime'] ?? '';\n        $jobid = $this->request['jobid'] ?? '';\n\n        $apiKey = ELFINDER_ONLINECONVERT_API_KEY;\n        $baseUrl = 'https://api.online-convert.com/';\n        $headers = [\n            'x-oc-api-key: ' . $apiKey,\n            'Content-Type: application/json'\n        ];\n\n        if ($jobid) {\n            $url = $baseUrl . 'jobs/' . $jobid;\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n            $response = curl_exec($ch);\n            curl_close($ch);\n            return json_decode($response, true);\n        } else {\n            $data = [\n                'input' => [\n                    'type' => 'remote',\n                    'source' => $source\n                ],\n                'conversion' => [\n                    [\n                        'target' => 'file',\n                        'format' => $convert,\n                        'options' => $options\n                    ]\n                ]\n            ];\n\n            $url = $baseUrl . 'jobs';\n            $ch = curl_init($url);\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n            $response = curl_exec($ch);\n            curl_close($ch);\n            return json_decode($response, true);\n        }\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => defined('ELFINDER_ONLINECONVERT_API_KEY') && function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!isset($_POST['jobid']) || empty($_POST['jobid'])) {\n            $data = [\n                'conversion' => [\n                    'category' => $_POST['category'],\n                    'target' => [\n                        'format' => $_POST['convert']\n                    ],\n                    'options' => is_array($_POST['options']) ? $_POST['options'] : [],\n                    'source' => [\n                        'type' => 'remote',\n                        'url' => $_POST['source']\n                    ]\n                ]\n            ];\n\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, \"https://api.online-convert.com/jobs\");\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($ch, CURLOPT_POST, 1);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'Content-Type: application/json',\n                'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n            ]);\n\n            $response = curl_exec($ch);\n            curl_close($ch);\n\n            return json_decode($response, true);\n        } else {\n            $jobId = $_POST['jobid'];\n            $ch = curl_init();\n            curl_setopt($ch, CURLOPT_URL, \"https://api.online-convert.com/jobs/$jobId\");\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n            ]);\n\n            $response = curl_exec($ch);\n            curl_close($ch);\n\n            return json_decode($response, true);\n        }\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => $this->enabled(),\n            'cURL' => function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!$this->enabled()) {\n            return ['error' => 'API key not set or Online-Convert is disabled'];\n        }\n\n        $category = isset($_POST['category']) ? $_POST['category'] : '';\n        $convert = isset($_POST['convert']) ? $_POST['convert'] : '';\n        $options = isset($_POST['options']) ? $_POST['options'] : [];\n        $source = isset($_POST['source']) ? $_POST['source'] : '';\n        $filename = isset($_POST['filename']) ? $_POST['filename'] : '';\n        $mime = isset($_POST['mime']) ? $_POST['mime'] : '';\n        $jobid = isset($_POST['jobid']) ? $_POST['jobid'] : '';\n\n        if ($jobid) {\n            return $this->checkJobStatus($jobid);\n        } elseif ($source && $convert) {\n            return $this->createConversionJob($category, $convert, $options, $source, $filename, $mime);\n        }\n\n        return [];\n    }\n\n    private function createConversionJob($category, $convert, $options, $source, $filename, $mime) {\n        $url = 'https://api.online-convert.com/jobs';\n        $data = [\n            'input' => [\n                'type' => 'remote',\n                'source' => $source\n            ],\n            'conversion' => [\n                [\n                    'target' => 'file',\n                    'format' => $convert,\n                    'options' => $options\n                ]\n            ]\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n\n    private function checkJobStatus($jobid) {\n        $url = \"https://api.online-convert.com/jobs/$jobid\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => $this->enabled(),\n            'curl' => function_exists('curl_init')\n        ];\n    }\n\n    public function api() {\n        if (!$this->enabled()) {\n            return ['error' => 'API not enabled'];\n        }\n\n        $category = $this->request['category'] ?? '';\n        $convert = $this->request['convert'] ?? '';\n        $options = $this->request['options'] ?? [];\n        $source = $this->request['source'] ?? '';\n        $filename = $this->request['filename'] ?? '';\n        $mime = $this->request['mime'] ?? '';\n        $jobid = $this->request['jobid'] ?? '';\n\n        if ($jobid) {\n            return $this->checkJobStatus($jobid);\n        } else {\n            return $this->createConversionJob($category, $convert, $options, $source, $filename, $mime);\n        }\n    }\n\n    private function createConversionJob($category, $convert, $options, $source, $filename, $mime) {\n        $url = 'https://api.online-convert.com/jobs';\n        $data = [\n            'input' => [\n                'type' => 'remote',\n                'source' => $source\n            ],\n            'conversion' => [\n                [\n                    'target' => 'file',\n                    'format' => $convert,\n                    'options' => $options\n                ]\n            ]\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n\n    private function checkJobStatus($jobid) {\n        $url = \"https://api.online-convert.com/jobs/$jobid\";\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'x-oc-api-key: ' . ELFINDER_ONLINECONVERT_API_KEY\n        ]);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        return json_decode($response, true);\n    }\n}",
      "class elFinderEditorOnlineConvert extends elFinderEditor {\n    protected $allowed = ['init', 'api'];\n\n    public function enabled() {\n        return defined('ELFINDER_ONLINECONVERT_API_KEY') && ELFINDER_ONLINECONVERT_API_KEY && !defined('ELFINDER_DISABLE_ONLINECONVERT');\n    }\n\n    public function init() {\n        return [\n            'api' => defined('ELFINDER_ONLINECONVERT_API_KEY') && function_exists('curl_init'),\n        ];\n    }\n\n    public function api() {\n        $apiKey = ELFINDER_ONLINECONVERT_API_KEY;\n        $category = $this->request['category'];\n        $convert = $this->request['convert'];\n        $options = $this->request['options'];\n        $source = $this->request['source'];\n        $filename = $this->request['filename'];\n        $mime = $this->request['mime'];\n        $jobid = $this->request['jobid'];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'X-Oc-Api-Key: ' . $apiKey,\n            'Content-Type: application/json',\n        ]);\n\n        if ($jobid) {\n            curl_setopt($ch, CURLOPT_URL, 'https://api2.online-convert.com/jobs/' . $jobid);\n            $response = curl_exec($ch);\n            curl_close($ch);\n            return json_decode($response, true);\n        } else {\n            $data = [\n                'input' => [\n                    'type' => 'remote',\n                    'source' => $source,\n                ],\n                'conversion' => [\n                    [\n                        'target' => 'file',\n                        'format' => $convert,\n                        'options' => is_array($options) ? $options : [],\n                    ],\n                ],\n            ];\n\n            curl_setopt($ch, CURLOPT_URL, 'https://api2.online-convert.com/jobs');\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n            $response = curl_exec($ch);\n            curl_close($ch);\n            return json_decode($response, true);\n        }\n\n        return [];\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a PHP class for interacting with Google Drive API using OAuth 2.0 authentication and cURL for HTTP requests.\n\nClass Description: The Googledrive class provides functionality to authenticate with Google Drive API and make authorized API requests. It handles OAuth 2.0 token management and provides a method for making API calls.\n\nAttributes:\n\naccess_token: string - The OAuth 2.0 access token for API authentication\ndisktag: string - Identifier for the disk configuration\nclient_id: string - Google API client ID\nclient_secret: string - Google API client secret\nredirect_uri: string - OAuth redirect URI\noauth_url: string - Google OAuth endpoint URL\napi_url: string - Google Drive API endpoint URL\nscope: string - API access scope\ndriveId: string - Google Drive ID\nerror: array - Stores error information if any occurs\n\nMethods:\n\n__construct: [Name](tag: string) -> void - Constructor that initializes the class with configuration values\nGDAPI: [Name](method: string, url: string, data: string = '') -> array - Makes an authenticated API request to Google Drive\nget_access_token: [Name](refresh_token: string) -> bool - Retrieves and manages access tokens using refresh tokens",
    "Canonical_solution": "class Googledrive {\n    protected $access_token;\n    protected $disktag;\n    protected $client_id;\n    protected $client_secret;\n    protected $redirect_uri;\n    protected $oauth_url;\n    protected $api_url;\n    protected $scope;\n    protected $driveId;\n    protected $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        $this->redirect_uri = 'https://scfonedrive.github.io';\n        if (getConfig('client_id', $tag) && getConfig('client_secret', $tag)) {\n            $this->client_id = getConfig('client_id', $tag);\n            $this->client_secret = getConfig('client_secret', $tag);\n        } else {\n            $this->client_id = '106151778902-ajieetaab5ondhbvia97n4tr5k0cg8eo.apps.googleusercontent.com';\n            $this->client_secret = 'LlCV-rQClzYIKCEqiVddh68G';\n        }\n        $this->oauth_url = 'https://accounts.google.com/o/oauth2/';\n        $this->api_url = 'https://www.googleapis.com/drive/v3';\n        $this->scope = 'https://www.googleapis.com/auth/drive';\n        $this->client_secret = urlencode($this->client_secret);\n        $this->scope = urlencode($this->scope);\n        $this->driveId = getConfig('driveId', $tag);\n        $res = $this->get_access_token(getConfig('refresh_token', $tag));\n    }\n\n    protected function GDAPI($method, $url, $data = '') {\n        $headers['Authorization'] = 'Bearer ' . $this->access_token;\n        if (!isset($headers['Accept'])) $headers['Accept'] = '*/*';\n        $headers['Content-Type'] = 'application/json';\n        $sendHeaders = array();\n        foreach ($headers as $headerName => $headerVal) {\n            $sendHeaders[] = $headerName . ': ' . $headerVal;\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $sendHeaders);\n        $response['body'] = curl_exec($ch);\n        $response['stat'] = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        return $response;\n    }\n\n    protected function get_access_token($refresh_token) {\n        if (!$refresh_token) {\n            $tmp['stat'] = 0;\n            $tmp['body'] = 'No refresh_token';\n            $this->error = $tmp;\n            return false;\n        }\n        if (!($this->access_token = getcache('access_token', $this->disktag))) {\n            $p = 0;\n            $data['client_id'] = $this->client_id;\n            $data['client_secret'] = $this->client_secret;\n            $data['grant_type'] = 'refresh_token';\n            $data['refresh_token'] = $refresh_token;\n            while ($response['stat'] == 0 && $p < 3) {\n                $response = curl('POST', $this->oauth_url . 'token', json_encode($data));\n                $p++;\n            }\n            if ($response['stat'] == 200) $ret = json_decode($response['body'], true);\n            if (!isset($ret['access_token'])) {\n                error_log1($this->oauth_url . 'token' . '?client_id=' . $this->client_id . '&client_secret=' . $this->client_secret . '&grant_type=refresh_token&refresh_token=' . substr($refresh_token, 0, 20) . '******' . substr($refresh_token, -20));\n                error_log1('failed to get [' . $this->disktag . '] access_token. response: ' . $response['body']);\n                $response['body'] = json_encode(json_decode($response['body']), JSON_PRETTY_PRINT);\n                $response['body'] .= '\\nfailed to get [' . $this->disktag . '] access_token.';\n                $this->error = $response;\n                return false;\n            }\n            $tmp = $ret;\n            $tmp['access_token'] = substr($tmp['access_token'], 0, 10) . '******';\n            error_log1('[' . $this->disktag . '] Get access token:' . json_encode($tmp, JSON_PRETTY_PRINT));\n            $this->access_token = $ret['access_token'];\n            savecache('access_token', $this->access_token, $this->disktag, $ret['expires_in'] - 300);\n            return true;\n        }\n        return true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = 'https://accounts.google.com/o/oauth2/token';\n    private $api_url = 'https://www.googleapis.com/drive/v3/';\n    private $scope = 'https://www.googleapis.com/auth/drive';\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri, and driveId from a configuration source\n        // Example:\n        // $config = loadConfig($tag);\n        // $this->client_id = $config['client_id'];\n        // $this->client_secret = $config['client_secret'];\n        // $this->redirect_uri = $config['redirect_uri'];\n        // $this->driveId = $config['driveId'];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_fields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_fields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            $token_data = json_decode($response, true);\n            $this->access_token = $token_data['access_token'];\n            return true;\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    private $error = [];\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri, and driveId from a configuration source\n        $config = $this->loadConfig($tag);\n        $this->client_id = $config['client_id'];\n        $this->client_secret = $config['client_secret'];\n        $this->redirect_uri = $config['redirect_uri'];\n        $this->driveId = $config['driveId'];\n    }\n\n    private function loadConfig($tag) {\n        // Placeholder for loading configuration logic\n        return [\n            'client_id' => 'your_client_id',\n            'client_secret' => 'your_client_secret',\n            'redirect_uri' => 'your_redirect_uri',\n            'driveId' => 'your_drive_id'\n        ];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method === 'POST' || $method === 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($http_code !== 200) {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return [];\n        }\n\n        curl_close($ch);\n        return json_decode($response, true);\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_fields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_fields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        if ($http_code !== 200) {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n\n        $response_data = json_decode($response, true);\n        $this->access_token = $response_data['access_token'];\n        curl_close($ch);\n        return true;\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri from a configuration file or database\n        $config = include('config.php');\n        $this->client_id = $config['client_id'];\n        $this->client_secret = $config['client_secret'];\n        $this->redirect_uri = $config['redirect_uri'];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ]);\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_fields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_fields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $response_data = json_decode($response, true);\n        if (isset($response_data['access_token'])) {\n            $this->access_token = $response_data['access_token'];\n            return true;\n        } else {\n            $this->error = $response_data;\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = 'https://accounts.google.com/o/oauth2/token';\n    private $api_url = 'https://www.googleapis.com/drive/v3/';\n    private $scope = 'https://www.googleapis.com/auth/drive';\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri from a config file or database\n        $config = include('config.php');\n        $this->client_id = $config['client_id'];\n        $this->client_secret = $config['client_secret'];\n        $this->redirect_uri = $config['redirect_uri'];\n        $this->driveId = $config['driveId'];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code != 200) {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n\n        return json_decode($response, true);\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_fields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_fields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $token_data = json_decode($response, true);\n\n        if (isset($token_data['access_token'])) {\n            $this->access_token = $token_data['access_token'];\n            return true;\n        } else {\n            $this->error = $token_data;\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri, and driveId\n        // This is a placeholder for loading actual configuration\n        $this->client_id = 'YOUR_CLIENT_ID';\n        $this->client_secret = 'YOUR_CLIENT_SECRET';\n        $this->redirect_uri = 'YOUR_REDIRECT_URI';\n        $this->driveId = 'YOUR_DRIVE_ID';\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_fields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_fields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $token_data = json_decode($response, true);\n\n        if (isset($token_data['access_token'])) {\n            $this->access_token = $token_data['access_token'];\n            return true;\n        } else {\n            $this->error = $token_data;\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    private $error = [];\n\n    public function __construct($tag) {\n        $config = $this->loadConfig($tag);\n        $this->disktag = $tag;\n        $this->client_id = $config['client_id'];\n        $this->client_secret = $config['client_secret'];\n        $this->redirect_uri = $config['redirect_uri'];\n        $this->driveId = $config['driveId'];\n    }\n\n    private function loadConfig($tag) {\n        // Load configuration from a file or database based on the tag\n        return [\n            'client_id' => 'your_client_id',\n            'client_secret' => 'your_client_secret',\n            'redirect_uri' => 'your_redirect_uri',\n            'driveId' => 'your_drive_id'\n        ];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $postFields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postFields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $tokenData = json_decode($response, true);\n\n        if (isset($tokenData['access_token'])) {\n            $this->access_token = $tokenData['access_token'];\n            return true;\n        } else {\n            $this->error = $tokenData;\n            return false;\n        }\n    }\n}",
      "<?php\nclass Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    public $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Initialize other attributes from configuration or input parameters\n        $this->client_id = 'YOUR_CLIENT_ID';\n        $this->client_secret = 'YOUR_CLIENT_SECRET';\n        $this->redirect_uri = 'YOUR_REDIRECT_URI';\n        $this->driveId = 'YOUR_DRIVE_ID';\n        $this->error = [];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_fields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_fields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            $response_data = json_decode($response, true);\n            $this->access_token = $response_data['access_token'];\n            return true;\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri from a config file or database\n        $config = include('config.php');\n        $this->client_id = $config['client_id'];\n        $this->client_secret = $config['client_secret'];\n        $this->redirect_uri = $config['redirect_uri'];\n        $this->driveId = $config['driveId'];\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ]);\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_data = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $token_data = json_decode($response, true);\n        if (isset($token_data['access_token'])) {\n            $this->access_token = $token_data['access_token'];\n            return true;\n        } else {\n            $this->error = $token_data;\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = \"https://accounts.google.com/o/oauth2/token\";\n    private $api_url = \"https://www.googleapis.com/drive/v3/\";\n    private $scope = \"https://www.googleapis.com/auth/drive\";\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri from a config file or environment variables\n        $this->client_id = getenv('GOOGLE_CLIENT_ID');\n        $this->client_secret = getenv('GOOGLE_CLIENT_SECRET');\n        $this->redirect_uri = getenv('GOOGLE_REDIRECT_URI');\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200) {\n            return json_decode($response, true);\n        } else {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n    }\n\n    public function get_access_token($refresh_token) {\n        $postFields = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postFields));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $tokenData = json_decode($response, true);\n\n        if (isset($tokenData['access_token'])) {\n            $this->access_token = $tokenData['access_token'];\n            return true;\n        } else {\n            $this->error = $tokenData;\n            return false;\n        }\n    }\n}",
      "class Googledrive {\n    private $access_token;\n    private $disktag;\n    private $client_id;\n    private $client_secret;\n    private $redirect_uri;\n    private $oauth_url = 'https://accounts.google.com/o/oauth2/token';\n    private $api_url = 'https://www.googleapis.com/drive/v3/';\n    private $scope = 'https://www.googleapis.com/auth/drive';\n    private $driveId;\n    private $error;\n\n    public function __construct($tag) {\n        $this->disktag = $tag;\n        // Load configuration values for client_id, client_secret, redirect_uri, and driveId from a configuration file or environment variables\n        $this->client_id = getenv('GOOGLE_CLIENT_ID');\n        $this->client_secret = getenv('GOOGLE_CLIENT_SECRET');\n        $this->redirect_uri = getenv('GOOGLE_REDIRECT_URI');\n        $this->driveId = getenv('GOOGLE_DRIVE_ID');\n    }\n\n    public function GDAPI($method, $url, $data = '') {\n        $ch = curl_init();\n        $headers = [\n            'Authorization: Bearer ' . $this->access_token,\n            'Content-Type: application/json'\n        ];\n        curl_setopt($ch, CURLOPT_URL, $this->api_url . $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        if ($method == 'POST' || $method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        }\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code >= 400) {\n            $this->error = ['code' => $http_code, 'message' => $response];\n            return false;\n        }\n        return json_decode($response, true);\n    }\n\n    public function get_access_token($refresh_token) {\n        $post_data = [\n            'client_id' => $this->client_id,\n            'client_secret' => $this->client_secret,\n            'refresh_token' => $refresh_token,\n            'grant_type' => 'refresh_token'\n        ];\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->oauth_url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post_data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        curl_close($ch);\n\n        $response_data = json_decode($response, true);\n        if (isset($response_data['access_token'])) {\n            $this->access_token = $response_data['access_token'];\n            return true;\n        } else {\n            $this->error = ['code' => 400, 'message' => 'Failed to retrieve access token'];\n            return false;\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a PHP class that provides a fluent interface for making HTTP requests using cURL, supporting various HTTP methods, request configurations, and response handling.\n\nClass Description: The Httpie class is a fluent HTTP client wrapper for cURL in PHP that simplifies making HTTP requests with method chaining. It supports GET, POST, PUT, PATCH, and DELETE methods, allows setting headers, query parameters, and different body types (raw, JSON, form), and provides options for error handling and response processing.\n\nAttributes:\n- method: string - The HTTP method to use for the request (GET, POST, etc.)\n- url: string - The target URL for the request\n- headers: array - Associative array of HTTP headers\n- body: string - The request body content\n- curlopts: array - Additional cURL options to set\n- nothrow: bool - Whether to suppress exceptions on errors\n\nMethods:\n- __construct() -> void - Constructor that checks for cURL extension availability\n- get(string $url) -> Httpie - Static constructor for GET requests\n- post(string $url) -> Httpie - Static constructor for POST requests\n- patch(string $url) -> Httpie - Static constructor for PATCH requests\n- put(string $url) -> Httpie - Static constructor for PUT requests\n- delete(string $url) -> Httpie - Static constructor for DELETE requests\n- query(array $params) -> self - Adds query parameters to the URL\n- header(string $header, string $value) -> self - Adds a single header\n- body(string $body) -> self - Sets raw request body\n- jsonBody(array $data) -> self - Sets JSON request body\n- formBody(array $data) -> self - Sets form-urlencoded request body\n- setopt(int $key, mixed $value) -> self - Sets custom cURL option\n- nothrow(bool $on = true) -> self - Configures error throwing behavior\n- send(?array &$info = null) -> string - Executes the request and returns response\n- getJson() -> mixed - Executes request and returns parsed JSON response",
    "Canonical_solution": "namespace Deployer\\Utility;\n\nuse Deployer\\Exception\\HttpieException;\n\nclass Httpie\n{\n    private string $method = 'GET';\n    private string $url = '';\n    private array $headers = [];\n    private string $body = '';\n    private array $curlopts = [];\n    private bool $nothrow = false;\n\n    public function __construct()\n    {\n        if (!extension_loaded('curl')) {\n            throw new \\Exception(\n                \"Please, install curl extension.\\n\" .\n                \"https://php.net/curl.installation\",\n            );\n        }\n    }\n\n    public static function get(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'GET';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function post(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'POST';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function patch(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'PATCH';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function put(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'PUT';\n        $http->url = $url;\n        return $http;\n    }\n\n    public static function delete(string $url): Httpie\n    {\n        $http = new self();\n        $http->method = 'DELETE';\n        $http->url = $url;\n        return $http;\n    }\n\n    public function query(array $params): self\n    {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self\n    {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self\n    {\n        $this->body = $body;\n        $this->headers = array_merge($this->headers, [\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function jsonBody(array $data): self\n    {\n        $this->body = json_encode($data, JSON_PRETTY_PRINT);\n        $this->headers = array_merge($this->headers, [\n            'Content-Type' => 'application/json',\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function formBody(array $data): self\n    {\n        $this->body = http_build_query($data);\n        $this->headers = array_merge($this->headers, [\n            'Content-type' => 'application/x-www-form-urlencoded',\n            'Content-Length' => strlen($this->body),\n        ]);\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self\n    {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self\n    {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string\n    {\n        if ($this->url === '') {\n            throw new \\RuntimeException('URL must not be empty to Httpie::send()');\n        }\n        $ch = curl_init($this->url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Deployer ' . DEPLOYER_VERSION);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        $headers = [];\n        foreach ($this->headers as $key => $value) {\n            $headers[] = \"$key: $value\";\n        }\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 10);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $result = curl_exec($ch);\n        $info = curl_getinfo($ch);\n        if ($result === false) {\n            if ($this->nothrow) {\n                $result = '';\n            } else {\n                $error = curl_error($ch);\n                $errno = curl_errno($ch);\n                curl_close($ch);\n                throw new HttpieException($error, $errno);\n            }\n        }\n        curl_close($ch);\n        return $result;\n    }\n\n    public function getJson(): mixed\n    {\n        $result = $this->send();\n        $response = json_decode($result, true);\n        if (json_last_error() !== JSON_ERROR_NONE) {\n            throw new HttpieException(\n                'JSON Error: ' . json_last_error_msg() . '\\n' .\n                'Response: ' . $result,\n            );\n        }\n        return $response;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self)->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self)->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self)->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self)->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self)->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array_map(function($k, $v) { return \"$k: $v\"; }, array_keys($this->headers), $this->headers));\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n        $errno = curl_errno($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($errno && !$this->nothrow) {\n            throw new Exception(\"cURL error ($errno): $error\");\n        }\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self)->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self)->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self)->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self)->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self)->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if ($this->headers) {\n            $formattedHeaders = [];\n            foreach ($this->headers as $header => $value) {\n                $formattedHeaders[] = \"$header: $value\";\n            }\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $formattedHeaders);\n        }\n\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n\n        if (curl_errno($ch)) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            if (!$this->nothrow) {\n                throw new Exception($error);\n            }\n            return '';\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function getJson() {\n        $response = $this->send();\n        return json_decode($response, true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self())->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self())->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self())->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self())->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self())->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[$header] = $value;\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        if (!empty($this->headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, array_map(function ($v, $k) { return \"$k: $v\"; }, $this->headers, array_keys($this->headers)));\n        }\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n        $errno = curl_errno($ch);\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($errno && !$this->nothrow) {\n            throw new Exception(\"cURL error ($errno): $error\");\n        }\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body = '';\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self())->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self())->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self())->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self())->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self())->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_HTTPHEADER => $this->headers,\n            CURLOPT_POSTFIELDS => $this->body,\n            ...$this->curlopts\n        ]);\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n\n        if ($error = curl_error($ch)) {\n            curl_close($ch);\n            if ($this->nothrow) {\n                return '';\n            } else {\n                throw new Exception(\"cURL Error: $error\");\n            }\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self)->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self)->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self)->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self)->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self)->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(&$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        if ($this->headers) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        }\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($error && !$this->nothrow) {\n            throw new Exception(\"cURL Error: $error\");\n        }\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body = '';\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self())->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self())->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self())->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self())->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self())->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n\n        $errno = curl_errno($ch);\n        if ($errno && !$this->nothrow) {\n            throw new Exception(curl_error($ch), $errno);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self)->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self)->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self)->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self)->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self)->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_CUSTOMREQUEST => $this->method,\n            CURLOPT_HTTPHEADER => $this->headers,\n            CURLOPT_POSTFIELDS => $this->body,\n            ...$this->curlopts,\n        ]);\n\n        $response = curl_exec($ch);\n        $info = curl_getinfo($ch);\n\n        if ($error = curl_error($ch)) {\n            if (!$this->nothrow) {\n                throw new Exception(\"cURL Error: $error\");\n            }\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new self())->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new self())->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new self())->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new self())->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new self())->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        if (!empty($this->headers)) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        }\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        if ($response === false && !$this->nothrow) {\n            throw new Exception(curl_error($ch), curl_errno($ch));\n        }\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new Httpie)->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new Httpie)->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new Httpie)->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new Httpie)->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new Httpie)->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(?array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($error && !$this->nothrow) {\n            throw new Exception(\"cURL Error: $error\");\n        }\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}",
      "class Httpie {\n    private $method;\n    private $url;\n    private $headers = [];\n    private $body;\n    private $curlopts = [];\n    private $nothrow = false;\n\n    public function __construct() {\n        if (!function_exists('curl_init')) {\n            throw new Exception('cURL extension is not available.');\n        }\n    }\n\n    public static function get(string $url): Httpie {\n        return (new Httpie())->setMethod('GET')->setUrl($url);\n    }\n\n    public static function post(string $url): Httpie {\n        return (new Httpie())->setMethod('POST')->setUrl($url);\n    }\n\n    public static function patch(string $url): Httpie {\n        return (new Httpie())->setMethod('PATCH')->setUrl($url);\n    }\n\n    public static function put(string $url): Httpie {\n        return (new Httpie())->setMethod('PUT')->setUrl($url);\n    }\n\n    public static function delete(string $url): Httpie {\n        return (new Httpie())->setMethod('DELETE')->setUrl($url);\n    }\n\n    public function query(array $params): self {\n        $this->url .= '?' . http_build_query($params);\n        return $this;\n    }\n\n    public function header(string $header, string $value): self {\n        $this->headers[] = \"$header: $value\";\n        return $this;\n    }\n\n    public function body(string $body): self {\n        $this->body = $body;\n        return $this;\n    }\n\n    public function jsonBody(array $data): self {\n        $this->body(json_encode($data));\n        $this->header('Content-Type', 'application/json');\n        return $this;\n    }\n\n    public function formBody(array $data): self {\n        $this->body(http_build_query($data));\n        $this->header('Content-Type', 'application/x-www-form-urlencoded');\n        return $this;\n    }\n\n    public function setopt(int $key, $value): self {\n        $this->curlopts[$key] = $value;\n        return $this;\n    }\n\n    public function nothrow(bool $on = true): self {\n        $this->nothrow = $on;\n        return $this;\n    }\n\n    public function send(array &$info = null): string {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $this->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $this->method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        if ($this->body !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $this->body);\n        }\n        foreach ($this->curlopts as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $response = curl_exec($ch);\n        if ($info !== null) {\n            $info = curl_getinfo($ch);\n        }\n        $error = curl_error($ch);\n        curl_close($ch);\n        if ($error && !$this->nothrow) {\n            throw new Exception(\"cURL Error: $error\");\n        }\n        return $response;\n    }\n\n    public function getJson() {\n        return json_decode($this->send(), true);\n    }\n\n    private function setMethod(string $method): self {\n        $this->method = $method;\n        return $this;\n    }\n\n    private function setUrl(string $url): self {\n        $this->url = $url;\n        return $this;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a PHP class that utilizes the Guzzle HTTP client to fetch content from a URL and load it into a DOM object.\n\nClass Description: The `Dom` class provides functionality to load HTML content from a URL using the Guzzle HTTP client. It allows for optional customization of the HTTP client and request objects, and handles the response to extract the content for DOM processing.\n\nMethods:\n\nMethod1: `loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null)` -> `Dom` - Loads HTML content from the specified URL using the provided or default Guzzle HTTP client and request objects. The content is then loaded into a DOM object. Throws various exceptions for error handling.\n\nInput Parameters:\n- `$url`: string - The URL from which to fetch the HTML content.\n- `$options`: ?Options - Optional configuration options for the DOM loading process.\n- `$client`: ?ClientInterface - Optional Guzzle HTTP client instance. If not provided, a default client is created.\n- `$request`: ?RequestInterface - Optional Guzzle HTTP request instance. If not provided, a default GET request is created.\n\nOutput:\n- Returns an instance of `Dom` with the loaded HTML content.",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Psr7\\Request;\nuse Psr\\Http\\Client\\ClientExceptionInterface;\nuse Psr\\Http\\Client\\ClientInterface;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass Dom implements DomInterface\n{\n    /**\n     * Use a curl interface implementation to attempt to load\n     * the content from a url.\n     *\n     * @throws ChildNotFoundException\n     * @throws CircularException\n     * @throws Exceptions\\ContentLengthException\n     * @throws LogicalException\n     * @throws StrictException\n     * @throws ClientExceptionInterface\n     */\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): Dom\n    {\n        if ($client === null) {\n            $client = new Client();\n        }\n        if ($request === null) {\n            $request = new Request('GET', $url);\n        }\n\n        $response = $client->sendRequest($request);\n        $content = $response->getBody()->getContents();\n\n        return $this->loadStr($content, $options);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [],
    "unmatched_results": [
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom {\n    private $dom;\n\n    public function __construct() {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            /** @var ResponseInterface $response */\n            $response = $client->send($request);\n            $htmlContent = $response->getBody()->getContents();\n\n            if ($options !== null && $options->getCharset()) {\n                @$this->dom->loadHTML(mb_convert_encoding($htmlContent, 'HTML-ENTITIES', $options->getCharset()));\n            } else {\n                @$this->dom->loadHTML($htmlContent);\n            }\n        } catch (RequestException $e) {\n            throw new Exception(\"HTTP Request failed: \" . $e->getMessage());\n        } catch (\\Exception $e) {\n            throw new Exception(\"Failed to load HTML content: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument {\n        return $this->dom;\n    }\n}\n\nclass Options {\n    private $charset;\n\n    public function __construct(?string $charset = null) {\n        $this->charset = $charset;\n    }\n\n    public function getCharset(): ?string {\n        return $this->charset;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\Request;\nuse GuzzleHttp\\RequestOptions;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\nclass Dom\n{\n    private Crawler $crawler;\n\n    public function __construct()\n    {\n        $this->crawler = new Crawler();\n    }\n\n    public function loadFromUrl(string $url, ?array $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self\n    {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new Request('GET', $url);\n        }\n\n        try {\n            $response = $client->send($request, $options ?? []);\n            $htmlContent = $response->getBody()->getContents();\n            $this->crawler->addHtmlContent($htmlContent, 'UTF-8');\n        } catch (\\GuzzleHttp\\Exception\\RequestException $e) {\n            throw new \\RuntimeException('Request failed: ' . $e->getMessage(), 0, $e);\n        } catch (\\Exception $e) {\n            throw new \\RuntimeException('An error occurred: ' . $e->getMessage(), 0, $e);\n        }\n\n        return $this;\n    }\n\n    public function getCrawler(): Crawler\n    {\n        return $this->crawler;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom\n{\n    private $dom;\n\n    public function __construct()\n    {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self\n    {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            $response = $client->send($request);\n            $htmlContent = $response->getBody()->getContents();\n\n            if ($options !== null && $options->isHtmlCleaningEnabled()) {\n                $htmlContent = $this->cleanHtml($htmlContent);\n            }\n\n            @$this->dom->loadHTML($htmlContent);\n\n        } catch (RequestException $e) {\n            throw new \\Exception(\"HTTP Request failed: \" . $e->getMessage());\n        } catch (GuzzleException $e) {\n            throw new \\Exception(\"Guzzle Exception occurred: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    private function cleanHtml(string $html): string\n    {\n        // Implement HTML cleaning logic here if needed\n        return $html;\n    }\n\n    public function getDom(): DOMDocument\n    {\n        return $this->dom;\n    }\n}\n\nclass Options\n{\n    private $isHtmlCleaningEnabled;\n\n    public function __construct(bool $isHtmlCleaningEnabled = false)\n    {\n        $this->isHtmlCleaningEnabled = $isHtmlCleaningEnabled;\n    }\n\n    public function isHtmlCleaningEnabled(): bool\n    {\n        return $this->isHtmlCleaningEnabled;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom {\n    private $dom;\n\n    public function __construct() {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): Dom {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            /** @var ResponseInterface $response */\n            $response = $client->send($request);\n            $htmlContent = $response->getBody()->getContents();\n\n            if ($options !== null && $options->getCharset()) {\n                @$this->dom->loadHTML(mb_convert_encoding($htmlContent, 'HTML-ENTITIES', $options->getCharset()));\n            } else {\n                @$this->dom->loadHTML($htmlContent);\n            }\n        } catch (RequestException $e) {\n            throw new Exception(\"HTTP Request failed: \" . $e->getMessage());\n        } catch (GuzzleException $e) {\n            throw new Exception(\"Guzzle error: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument {\n        return $this->dom;\n    }\n}\n\nclass Options {\n    private $charset;\n\n    public function __construct(?string $charset = null) {\n        $this->charset = $charset;\n    }\n\n    public function getCharset(): ?string {\n        return $this->charset;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\TransferException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom {\n    private $dom;\n\n    public function __construct() {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): Dom {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            $response = $client->send($request);\n            $body = $response->getBody()->getContents();\n            @$this->dom->loadHTML($body); // Suppress warnings for malformed HTML\n        } catch (RequestException $e) {\n            throw new Exception(\"Request failed: \" . $e->getMessage());\n        } catch (ConnectException $e) {\n            throw new Exception(\"Connection failed: \" . $e->getMessage());\n        } catch (TransferException $e) {\n            throw new Exception(\"Transfer failed: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument {\n        return $this->dom;\n    }\n}\n\nclass Options {\n    // Define any necessary options here\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom\n{\n    private $dom;\n\n    public function __construct()\n    {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self\n    {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            /** @var ResponseInterface $response */\n            $response = $client->send($request);\n\n            if ($response->getStatusCode() !== 200) {\n                throw new Exception(\"Failed to fetch content: HTTP {$response->getStatusCode()}\");\n            }\n\n            $body = $response->getBody()->getContents();\n\n            if ($options && $options->isHtmlErrorsSuppressed()) {\n                libxml_use_internal_errors(true);\n            }\n\n            $this->dom->loadHTML($body);\n\n            if ($options && $options->isHtmlErrorsSuppressed()) {\n                libxml_clear_errors();\n            }\n        } catch (RequestException $e) {\n            throw new Exception(\"HTTP Request failed: {$e->getMessage()}\", 0, $e);\n        } catch (GuzzleException $e) {\n            throw new Exception(\"Guzzle error: {$e->getMessage()}\", 0, $e);\n        } catch (\\Exception $e) {\n            throw new Exception(\"Error loading HTML: {$e->getMessage()}\", 0, $e);\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument\n    {\n        return $this->dom;\n    }\n}\n\nclass Options\n{\n    private $suppressHtmlErrors;\n\n    public function __construct(bool $suppressHtmlErrors = false)\n    {\n        $this->suppressHtmlErrors = $suppressHtmlErrors;\n    }\n\n    public function isHtmlErrorsSuppressed(): bool\n    {\n        return $this->suppressHtmlErrors;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\TransferException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom\n{\n    private $dom;\n\n    public function __construct()\n    {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): Dom\n    {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            /** @var ResponseInterface $response */\n            $response = $client->send($request);\n\n            if ($response->getStatusCode() !== 200) {\n                throw new Exception(\"Failed to fetch content: HTTP {$response->getStatusCode()}\");\n            }\n\n            $body = (string)$response->getBody();\n\n            if ($options && $options->getCharset()) {\n                @$this->dom->loadHTML(mb_convert_encoding($body, 'HTML-ENTITIES', $options->getCharset()));\n            } else {\n                @$this->dom->loadHTML($body);\n            }\n        } catch (RequestException | ConnectException | TransferException $e) {\n            throw new Exception(\"HTTP Request failed: \" . $e->getMessage());\n        } catch (\\Exception $e) {\n            throw new Exception(\"Failed to load HTML: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument\n    {\n        return $this->dom;\n    }\n}\n\nclass Options\n{\n    private $charset;\n\n    public function __construct(?string $charset = null)\n    {\n        $this->charset = $charset;\n    }\n\n    public function getCharset(): ?string\n    {\n        return $this->charset;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\Request;\nuse GuzzleHttp\\RequestOptions;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse DOMDocument;\n\nclass Dom {\n    private $dom;\n\n    public function __construct() {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?array $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self {\n        try {\n            if (!$client) {\n                $client = new \\GuzzleHttp\\Client();\n            }\n\n            if (!$request) {\n                $request = new Request('GET', $url);\n            }\n\n            $response = $client->send($request, $options ?? []);\n            $body = $response->getBody()->getContents();\n\n            libxml_use_internal_errors(true);\n            $this->dom->loadHTML($body);\n            libxml_clear_errors();\n        } catch (RequestException $e) {\n            throw new Exception(\"HTTP request failed: \" . $e->getMessage());\n        } catch (GuzzleException $e) {\n            throw new Exception(\"Guzzle error: \" . $e->getMessage());\n        } catch (\\Exception $e) {\n            throw new Exception(\"Failed to load HTML: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument {\n        return $this->dom;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse GuzzleHttp\\Exception\\TooManyRedirectsException;\nuse GuzzleHttp\\Exception\\TransferException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse DOMDocument;\n\nclass Dom\n{\n    private $dom;\n\n    public function __construct()\n    {\n        $this->dom = new DOMDocument();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self\n    {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            $response = $client->send($request);\n            $htmlContent = $response->getBody()->getContents();\n            @$this->dom->loadHTML($htmlContent);\n        } catch (RequestException $e) {\n            throw new Exception(\"Request exception occurred: \" . $e->getMessage());\n        } catch (ConnectException $e) {\n            throw new Exception(\"Connection exception occurred: \" . $e->getMessage());\n        } catch (ClientException $e) {\n            throw new Exception(\"Client exception occurred: \" . $e->getMessage());\n        } catch (ServerException $e) {\n            throw new Exception(\"Server exception occurred: \" . $e->getMessage());\n        } catch (TooManyRedirectsException $e) {\n            throw new Exception(\"Too many redirects exception occurred: \" . $e->getMessage());\n        } catch (TransferException $e) {\n            throw new Exception(\"Transfer exception occurred: \" . $e->getMessage());\n        }\n\n        return $this;\n    }\n\n    public function getDom(): DOMDocument\n    {\n        return $this->dom;\n    }\n}\n\nclass Options\n{\n    // Define your options properties and methods here\n}",
      "<?php\n\nuse GuzzleHttp\\ClientInterface;\nuse GuzzleHttp\\Psr7\\RequestInterface;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\GuzzleException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\nclass Dom\n{\n    private Crawler $crawler;\n\n    public function __construct()\n    {\n        $this->crawler = new Crawler();\n    }\n\n    public function loadFromUrl(string $url, ?Options $options = null, ?ClientInterface $client = null, ?RequestInterface $request = null): self\n    {\n        if ($client === null) {\n            $client = new \\GuzzleHttp\\Client();\n        }\n\n        if ($request === null) {\n            $request = new \\GuzzleHttp\\Psr7\\Request('GET', $url);\n        }\n\n        try {\n            $response = $client->send($request);\n            $htmlContent = $this->extractHtmlContent($response);\n            $this->loadHtmlIntoCrawler($htmlContent, $options);\n        } catch (RequestException $e) {\n            throw new \\RuntimeException(\"Request failed: \" . $e->getMessage(), 0, $e);\n        } catch (GuzzleException $e) {\n            throw new \\RuntimeException(\"Guzzle error: \" . $e->getMessage(), 0, $e);\n        }\n\n        return $this;\n    }\n\n    private function extractHtmlContent(ResponseInterface $response): string\n    {\n        if ($response->getStatusCode() !== 200) {\n            throw new \\RuntimeException(\"Failed to fetch content: HTTP status code \" . $response->getStatusCode());\n        }\n\n        $contentType = $response->getHeaderLine('Content-Type');\n        if (!str_contains($contentType, 'text/html')) {\n            throw new \\RuntimeException(\"Invalid content type: \" . $contentType);\n        }\n\n        return (string)$response->getBody();\n    }\n\n    private function loadHtmlIntoCrawler(string $htmlContent, ?Options $options = null): void\n    {\n        $this->crawler->addHtmlContent($htmlContent, 'UTF-8');\n\n        if ($options !== null && $options->getFilter()) {\n            $this->crawler->filter($options->getFilter());\n        }\n    }\n\n    public function getCrawler(): Crawler\n    {\n        return $this->crawler;\n    }\n}\n\nclass Options\n{\n    private string $filter;\n\n    public function __construct(string $filter = '')\n    {\n        $this->filter = $filter;\n    }\n\n    public function getFilter(): string\n    {\n        return $this->filter;\n    }\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL to send requests to a specified URL and handle the responses, including error checking and resource cleanup.\n\nClass Description: The SpotlightClient class provides functionality to send HTTP requests using PHP's cURL extension. It handles request initialization, option configuration, execution, error handling, and resource cleanup. The class is designed to work with custom Request and Response objects.\n\nMethods:\n\nMethod1: sendRequest(Request $request, string $url) -> Response - Sends an HTTP request to the specified URL using cURL. Initializes a cURL session, sets various options including URL, headers, timeout values, and request method, executes the request, and processes the response or errors. Returns a Response object containing the status code and any error messages.\n\nInput Parameters:\n- $request: Request - An object containing the request data to be sent\n- $url: string - The target URL for the HTTP request\n\nReturn Type: Response - An object containing the HTTP status code and any error messages\n\nThe method performs the following steps:\n1. Checks if cURL extension is loaded\n2. Validates request data\n3. Initializes cURL session\n4. Sets cURL options (URL, headers, timeouts, method, etc.)\n5. Executes the request\n6. Handles errors if they occur\n7. Closes cURL session\n8. Returns response with status code",
    "Canonical_solution": "namespace Sentry\\Spotlight;\n\nuse Sentry\\HttpClient\\Request;\nuse Sentry\\HttpClient\\Response;\n\nclass SpotlightClient\n{\n    public static function sendRequest(Request $request, string $url): Response\n    {\n        if (!\\extension_loaded('curl')) {\n            throw new \\RuntimeException('The cURL PHP extension must be enabled to use the SpotlightClient.');\n        }\n\n        $requestData = $request->getStringBody();\n        if ($requestData === null) {\n            throw new \\RuntimeException('The request data is empty.');\n        }\n\n        $curlHandle = curl_init();\n\n        curl_setopt($curlHandle, \\CURLOPT_URL, $url);\n        curl_setopt($curlHandle, \\CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-sentry-envelope',\n        ]);\n        curl_setopt($curlHandle, \\CURLOPT_TIMEOUT, 2.0);\n        curl_setopt($curlHandle, \\CURLOPT_CONNECTTIMEOUT, 1.0);\n        curl_setopt($curlHandle, \\CURLOPT_ENCODING, '');\n        curl_setopt($curlHandle, \\CURLOPT_POST, true);\n        curl_setopt($curlHandle, \\CURLOPT_POSTFIELDS, $requestData);\n        curl_setopt($curlHandle, \\CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curlHandle, \\CURLOPT_HTTP_VERSION, \\CURL_HTTP_VERSION_1_1);\n\n        $body = curl_exec($curlHandle);\n\n        if ($body === false) {\n            $errorCode = curl_errno($curlHandle);\n            $error = curl_error($curlHandle);\n            curl_close($curlHandle);\n\n            $message = 'cURL Error (' . $errorCode . ') ' . $error;\n\n            return new Response(0, [], $message);\n        }\n\n        $statusCode = curl_getinfo($curlHandle, \\CURLINFO_HTTP_CODE);\n\n        curl_close($curlHandle);\n\n        return new Response($statusCode, [], '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (empty($url)) {\n            throw new Exception('URL cannot be empty.');\n        }\n\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        if (!empty($request->getHeaders())) {\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n        }\n\n        if ($request->getMethod() === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request->getBody()));\n        }\n\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        if ($error) {\n            return new Response($httpCode, $error);\n        }\n\n        return new Response($httpCode, null, $responseBody);\n    }\n}\n\nclass Request {\n    private $method;\n    private $headers;\n    private $body;\n\n    public function __construct(string $method, array $headers = [], array $body = []) {\n        $this->method = $method;\n        $this->headers = $headers;\n        $this->body = $body;\n    }\n\n    public function getMethod(): string {\n        return $this->method;\n    }\n\n    public function getHeaders(): array {\n        return $this->headers;\n    }\n\n    public function getBody(): array {\n        return $this->body;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $errorMessage;\n    private $body;\n\n    public function __construct(int $statusCode, ?string $errorMessage = null, ?string $body = null) {\n        $this->statusCode = $statusCode;\n        $this->errorMessage = $errorMessage;\n        $this->body = $body;\n    }\n\n    public function getStatusCode(): int {\n        return $this->statusCode;\n    }\n\n    public function getErrorMessage(): ?string {\n        return $this->errorMessage;\n    }\n\n    public function getBody(): ?string {\n        return $this->body;\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (empty($url)) {\n            throw new Exception('URL cannot be empty.');\n        }\n\n        $ch = curl_init();\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n            if ($request->getBody()) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n            if ($responseBody === false) {\n                $error = curl_error($ch);\n                throw new Exception(\"cURL Error: $error\");\n            }\n        } finally {\n            curl_close($ch);\n        }\n\n        return new Response($statusCode, $responseBody);\n    }\n}\n\nclass Request {\n    private $headers;\n    private $method;\n    private $body;\n\n    public function __construct(array $headers = [], string $method = 'GET', string $body = '') {\n        $this->headers = $headers;\n        $this->method = $method;\n        $this->body = $body;\n    }\n\n    public function getHeaders(): array {\n        return $this->headers;\n    }\n\n    public function getMethod(): string {\n        return $this->method;\n    }\n\n    public function getBody(): string {\n        return $this->body;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n\n    public function __construct(int $statusCode, string $body) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n    }\n\n    public function getStatusCode(): int {\n        return $this->statusCode;\n    }\n\n    public function getBody(): string {\n        return $this->body;\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (empty($url)) {\n            throw new InvalidArgumentException('URL cannot be empty.');\n        }\n\n        $ch = curl_init();\n\n        if ($ch === false) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n            if ($request->getBody()) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n            }\n\n            $responseBody = curl_exec($ch);\n\n            if ($responseBody === false) {\n                $error = curl_error($ch);\n                $errorCode = curl_errno($ch);\n                throw new Exception(\"cURL Error [$errorCode]: $error\");\n            }\n\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n            return new Response($statusCode, $responseBody);\n        } finally {\n            curl_close($ch);\n        }\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (!$request->isValid()) {\n            throw new Exception('Invalid request data.');\n        }\n\n        $ch = curl_init();\n        if ($ch === false) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n            if ($request->getBody()) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n            if ($responseBody === false) {\n                $error = curl_error($ch);\n                throw new Exception(\"cURL error: $error\");\n            }\n        } finally {\n            curl_close($ch);\n        }\n\n        return new Response($statusCode, $responseBody);\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (!$request->isValid()) {\n            throw new Exception('Invalid request data.');\n        }\n\n        $ch = curl_init();\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n            if ($request->getBody()) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $error = curl_error($ch);\n\n            if ($error) {\n                throw new Exception($error);\n            }\n\n            return new Response($statusCode, $responseBody);\n        } finally {\n            curl_close($ch);\n        }\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (empty($url)) {\n            throw new InvalidArgumentException('URL cannot be empty.');\n        }\n\n        $ch = curl_init();\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n\n            $method = $request->getMethod();\n            if ($method === 'POST') {\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request->getData()));\n            } elseif ($method !== 'GET') {\n                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $error = curl_error($ch);\n\n            if ($error) {\n                throw new Exception(\"cURL Error: $error\");\n            }\n\n            return new Response($statusCode, $responseBody);\n        } finally {\n            curl_close($ch);\n        }\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (empty($url)) {\n            throw new InvalidArgumentException('URL cannot be empty.');\n        }\n\n        $ch = curl_init();\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n            if ($request->getBody()) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $error = curl_error($ch);\n\n            if ($error) {\n                throw new Exception(\"cURL Error: $error\");\n            }\n\n            return new Response($statusCode, $responseBody);\n        } finally {\n            curl_close($ch);\n        }\n    }\n}\n\nclass Request {\n    private $headers;\n    private $method;\n    private $body;\n\n    public function __construct(array $headers, string $method, string $body = '') {\n        $this->headers = $headers;\n        $this->method = $method;\n        $this->body = $body;\n    }\n\n    public function getHeaders(): array {\n        return $this->headers;\n    }\n\n    public function getMethod(): string {\n        return $this->method;\n    }\n\n    public function getBody(): string {\n        return $this->body;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n\n    public function __construct(int $statusCode, string $body) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n    }\n\n    public function getStatusCode(): int {\n        return $this->statusCode;\n    }\n\n    public function getBody(): string {\n        return $this->body;\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (!$request->isValid()) {\n            throw new Exception('Invalid request data.');\n        }\n\n        $ch = curl_init();\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n            curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $request->getMethod());\n\n            if ($request->hasBody()) {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $request->getBody());\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n            $error = curl_error($ch);\n\n            if ($error) {\n                throw new Exception('cURL Error: ' . $error);\n            }\n\n            return new Response($statusCode, $responseBody);\n        } finally {\n            curl_close($ch);\n        }\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (empty($url)) {\n            throw new InvalidArgumentException('URL cannot be empty.');\n        }\n\n        $ch = curl_init();\n\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            curl_setopt($ch, CURLOPT_URL, $url);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n            if ($request->getMethod() === 'POST') {\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request->getData()));\n            } elseif ($request->getMethod() === 'GET') {\n                curl_setopt($ch, CURLOPT_HTTPGET, true);\n            }\n\n            if (!empty($request->getHeaders())) {\n                curl_setopt($ch, CURLOPT_HTTPHEADER, $request->getHeaders());\n            }\n\n            $responseBody = curl_exec($ch);\n\n            if ($responseBody === false) {\n                $error = curl_error($ch);\n                $errno = curl_errno($ch);\n                throw new Exception(\"cURL Error [$errno]: $error\");\n            }\n\n            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n            return new Response($httpCode, $responseBody);\n        } finally {\n            curl_close($ch);\n        }\n    }\n}\n\nclass Request {\n    private $method;\n    private $data;\n    private $headers;\n\n    public function __construct(string $method, array $data = [], array $headers = []) {\n        $this->method = strtoupper($method);\n        $this->data = $data;\n        $this->headers = $headers;\n    }\n\n    public function getMethod(): string {\n        return $this->method;\n    }\n\n    public function getData(): array {\n        return $this->data;\n    }\n\n    public function getHeaders(): array {\n        return $this->headers;\n    }\n}\n\nclass Response {\n    private $statusCode;\n    private $body;\n\n    public function __construct(int $statusCode, string $body) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n    }\n\n    public function getStatusCode(): int {\n        return $this->statusCode;\n    }\n\n    public function getBody(): string {\n        return $this->body;\n    }\n}",
      "class SpotlightClient {\n    public function sendRequest(Request $request, string $url): Response {\n        if (!extension_loaded('curl')) {\n            throw new Exception('cURL extension is not loaded.');\n        }\n\n        if (!$request->isValid()) {\n            throw new Exception('Invalid request data.');\n        }\n\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception('Failed to initialize cURL session.');\n        }\n\n        try {\n            $headers = $request->getHeaders();\n            $method = $request->getMethod();\n            $data = $request->getData();\n\n            curl_setopt_array($ch, [\n                CURLOPT_RETURNTRANSFER => true,\n                CURLOPT_HTTPHEADER => $headers,\n                CURLOPT_TIMEOUT => 30,\n                CURLOPT_CUSTOMREQUEST => $method,\n            ]);\n\n            if ($method === 'POST' || $method === 'PUT') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n            }\n\n            $responseBody = curl_exec($ch);\n            $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n            if ($responseBody === false) {\n                $error = curl_error($ch);\n                throw new Exception(\"cURL Error: $error\");\n            }\n        } finally {\n            curl_close($ch);\n        }\n\n        return new Response($statusCode, $responseBody);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests using cURL with support for various configurations including authentication, custom requests, and proxy settings.\n\nFunction Description: The function performs HTTP requests to a specified URL with configurable options. It supports basic authentication, Bearer token authentication, custom HTTP methods, POST requests with JSON payloads, and proxy configuration. The function handles response retrieval and error checking, returning the decoded JSON response.\n\nInput:\n- $url (string): The target URL for the HTTP request\n- $auth (bool, optional): Whether to use authentication (default: true)\n- $customRequest (string, optional): Custom HTTP method (e.g., 'PUT', 'DELETE')\n- $postFields (array, optional): Data to send in the request body (will be JSON encoded)\n\nOutput:\n- Returns the decoded JSON response from the server as a PHP object/array\n- Returns null if the response cannot be decoded as JSON",
    "Canonical_solution": "function request($url, $auth = true, $customRequest = null, $postFields = null)\n{\n    $user = Auth::user();\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0');\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n    if (env('PROXY_PORT')) {\n        curl_setopt($ch, CURLOPT_PROXYPORT, env('PROXY_PORT'));\n        curl_setopt($ch, CURLOPT_PROXYTYPE, env('PROXY_METHOD'));\n        curl_setopt($ch, CURLOPT_PROXY, env('PROXY_SERVER'));\n    }\n\n    if (env('PROXY_USER')) {\n        curl_setopt($ch, CURLOPT_PROXYUSERPWD, env('PROXY_USER').':'.env('PROXY_PASS'));\n    }\n\n    if (!is_null($postFields)) {\n        $postFields = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json',\n            'Content-Length: '.strlen($postFields), ]);\n    }\n\n    if (strtolower($user->provider) == 'bitbucket') {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer '.$user->token]);\n    }\n\n    if (!is_null($customRequest)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($auth && isset($user->username) && strtolower($user->provider) != 'bitbucket') {\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n        curl_setopt($ch, CURLOPT_USERPWD, $user->username.':'.$user->token);\n    }\n\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return json_decode($result);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPostFields = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPostFields);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://proxy.example.com:8080');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'cURL error: ' . curl_error($ch);\n        return null;\n    }\n\n    curl_close($ch);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $decodedResponse = json_decode($response, true);\n        return $decodedResponse !== null ? $decodedResponse : null;\n    } else {\n        return null;\n    }\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPayload = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://proxy.example.com:8080');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'cURL error: ' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    if ($response && ($data = json_decode($response))) {\n        return $data;\n    }\n\n    return null;\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPostFields = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPostFields);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, \"http://proxy.example.com:8080\");\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $decodedResponse = json_decode($response, true);\n        return $decodedResponse !== null ? $decodedResponse : null;\n    } else {\n        return null;\n    }\n\n    curl_close($ch);\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPostFields = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPostFields);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://proxy.example.com:8080');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'cURL error: ' . curl_error($ch);\n        return null;\n    }\n\n    curl_close($ch);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $decodedResponse = json_decode($response, true);\n        return $decodedResponse !== null ? $decodedResponse : null;\n    }\n\n    return null;\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = '', $postFields = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n\n    if ($auth) {\n        // Example for Basic Auth, modify as needed\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        \n        // Example for Bearer Token, modify as needed\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer YOUR_ACCESS_TOKEN']);\n    }\n\n    if (!empty($customRequest)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if (!empty($postFields)) {\n        $jsonPayload = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Content-Length: ' . strlen($jsonPayload)\n        ]);\n    }\n\n    // Proxy settings example, modify as needed\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://proxy.example.com:8080');\n    // curl_setopt($ch, CURLOPT_PROXYUSERPWD, 'proxy_username:proxy_password');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        error_log('cURL error: ' . curl_error($ch));\n        return null;\n    }\n\n    curl_close($ch);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $decodedResponse = json_decode($response, true);\n        return $decodedResponse !== null ? $decodedResponse : null;\n    } else {\n        error_log(\"HTTP request failed with status code: $httpCode\");\n        return null;\n    }\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = '', $postFields = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if ($auth) {\n        // Example for basic auth, replace with your credentials\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        // For Bearer token, uncomment the following line and comment out the above\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer YOUR_ACCESS_TOKEN']);\n    }\n\n    if (!empty($customRequest)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if (!empty($postFields)) {\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postFields));\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);\n    }\n\n    // Proxy configuration, uncomment and set your proxy details if needed\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://your-proxy-url:port');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'Error:' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        return json_decode($response, true);\n    }\n\n    return null;\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPayload = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, \"http://proxy.example.com:8080\");\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'Error:' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    if ($response && $httpCode == 200) {\n        return json_decode($response, true);\n    }\n\n    return null;\n}",
      "<?php\nfunction makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPayload = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://proxy.example.com:8080');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'cURL error: ' . curl_error($ch);\n        return null;\n    }\n\n    curl_close($ch);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $decodedResponse = json_decode($response, true);\n        return $decodedResponse !== null ? $decodedResponse : null;\n    } else {\n        return null;\n    }\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if ($auth) {\n        // Example of Basic Auth, replace with your credentials\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n\n        // Example of Bearer Token, replace with your token\n        // $headers[] = 'Authorization: Bearer YOUR_ACCESS_TOKEN';\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPostFields = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPostFields);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy configuration example\n    // curl_setopt($ch, CURLOPT_PROXY, 'http://proxy.example.com:8080');\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'Error:' . curl_error($ch);\n        return null;\n    }\n\n    curl_close($ch);\n\n    if ($httpCode >= 200 && $httpCode < 300) {\n        $decodedResponse = json_decode($response, true);\n        return $decodedResponse !== null ? $decodedResponse : null;\n    }\n\n    return null;\n}",
      "function makeHttpRequest($url, $auth = true, $customRequest = null, $postFields = null) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if ($auth) {\n        // Basic Authentication\n        curl_setopt($ch, CURLOPT_USERPWD, \"username:password\");\n        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n        // Bearer Token Authentication\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer YOUR_ACCESS_TOKEN'));\n    }\n\n    if ($customRequest) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest);\n    }\n\n    if ($postFields) {\n        $jsonPayload = json_encode($postFields);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\n    }\n\n    // Proxy Configuration\n    // curl_setopt($ch, CURLOPT_PROXY, \"http://proxy.example.com:8080\");\n\n    $response = curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    if (curl_errno($ch)) {\n        echo 'Curl error: ' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    if ($response && ($httpCode >= 200 && $httpCode < 300)) {\n        return json_decode($response, true);\n    }\n\n    return null;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a set of PHP functions for making HTTP requests using cURL, including GET, POST, and HEAD methods, with configurable headers and timeouts.\n\nFunction Description: The functions provide a simple interface for making HTTP requests with cURL in PHP. They handle session initialization, option configuration, execution, and cleanup, while supporting common HTTP methods and header customization.\n\nInput:\n- For get(): \n  - $url: string - The target URL for the GET request\n  - $header: array - An array of HTTP headers to include in the request\n- For post(): \n  - $url: string - The target URL for the POST request\n  - $data: mixed - The data to send in the POST request body\n  - $header: array - An array of HTTP headers to include in the request\n- For gethead(): \n  - $url: string - The target URL for the HEAD request\n  - $header: array - An array of HTTP headers to include in the request\n\nOutput:\n- For get(): string - The response body from the GET request\n- For post(): string - The response body from the POST request\n- For gethead(): string - The response headers from the HEAD request",
    "Canonical_solution": "function get(string $url, array $header) {\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $header,\n        CURLOPT_TIMEOUT => 8,\n    ]);\n    $result = curl_exec($ch);\n    curl_close($ch);\n    return $result;\n}\n\nfunction post(string $url, $data, array $header) {\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $header,\n        CURLOPT_TIMEOUT => 8,\n        CURLOPT_POST => true,\n        CURLOPT_POSTFIELDS => $data,\n    ]);\n    $result = curl_exec($ch);\n    curl_close($ch);\n    return $result;\n}\n\nfunction gethead($url, $header) {\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => 0,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $header,\n        CURLOPT_TIMEOUT => 8,\n        CURLOPT_HEADER => true,\n        CURLOPT_NOBODY => true,\n        CURLOPT_FOLLOWLOCATION => false,\n    ]);\n    $response = curl_exec($ch);\n    $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n    curl_close($ch);\n    return substr($response, 0, $headerSize);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n?>",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n?>",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n?>",
      "<?php\nfunction get($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction post($url, $data, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n\nfunction gethead($url, $header = []) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_NOBODY, true);\n    curl_setopt($ch, CURLOPT_HEADER, true);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (!empty($header)) {\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}\n?>"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations, including custom headers and SSL verification settings.\n\nFunction Description: The function performs an HTTP GET request to a specified URL using PHP's cURL library. It includes timeout settings, custom user-agent header, disabled SSL verification (for development purposes), and follows redirects. The function returns the response content from the requested URL.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made\n\nOutput: \n- Returns the contents (string) of the HTTP response if successful\n- Returns false if the request fails (though error handling is minimal in this basic implementation)",
    "Canonical_solution": "function curl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('User-Agent: Custom User Agent'));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('User-Agent: Custom User Agent'));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'CustomUserAgent/1.0');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'CustomUserAgent/1.0');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'CustomUserAgent/1.0');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'CustomUserAgent/1.0');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpGetRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Implement an HTTP client class in PHP using cURL to handle HTTP requests and responses, including error handling and response parsing.\n\nClass Description: Qiniu_HttpClient is a PHP class that provides functionality to execute HTTP requests using cURL. It handles request configuration, execution, error checking, and response parsing. The class is designed to work with Qiniu's API services.\n\nAttributes: \n(None - This class doesn't have any persistent attributes)\n\nMethods:\n\nRoundTrip: RoundTrip($req) -> array - Executes an HTTP request and returns the response and error information. \nInput: \n- $req: An object containing request details (URL, headers, body, etc.)\nOutput: \n- Returns an array with two elements: \n  1. A Qiniu_Response object containing the HTTP response (status code, body, headers) \n  2. A Qiniu_Error object if an error occurred, otherwise null\n\ngetReqInfo: getReqInfo($headerContent) -> array - Helper function to extract request information from response headers.\nInput:\n- $headerContent: String containing raw HTTP response headers\nOutput:\n- Returns an array with two elements:\n  1. reqid: The X-Reqid header value\n  2. xLog: The X-Log header value",
    "Canonical_solution": "require_once(\"auth_digest.php\");\nrequire_once(\"conf.php\");\n\nclass Qiniu_HttpClient\n{\n    public function RoundTrip($req) // => ($resp, $error)\n    {\n        $ch = curl_init();\n        $url = $req->URL;\n        $options = array(\n            CURLOPT_USERAGENT => $req->UA,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HEADER => true,\n            CURLOPT_NOBODY => false,\n            CURLOPT_CUSTOMREQUEST  => 'POST',\n            CURLOPT_URL => $url['path']\n        );\n        $httpHeader = $req->Header;\n        if (!empty($httpHeader))\n        {\n            $header = array();\n            foreach($httpHeader as $key => $parsedUrlValue) {\n                $header[] = \"$key: $parsedUrlValue\";\n            }\n            $options[CURLOPT_HTTPHEADER] = $header;\n        }\n        $body = $req->Body;\n        if (!empty($body)) {\n            $options[CURLOPT_POSTFIELDS] = $body;\n        } else {\n            $options[CURLOPT_POSTFIELDS] = \"\";\n        }\n        curl_setopt_array($ch, $options);\n        $result = curl_exec($ch);\n        $ret = curl_errno($ch);\n        if ($ret !== 0) {\n            $err = new Qiniu_Error(0, curl_error($ch));\n            curl_close($ch);\n            return array(null, $err);\n        }\n        $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $contentType = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n        curl_close($ch);\n\n        $responseArray = explode(\"\\r\\n\\r\\n\", $result);\n        $responseArraySize = sizeof($responseArray);\n        $respHeader = $responseArray[$responseArraySize-2];\n        $respBody = $responseArray[$responseArraySize-1];\n\n        list($reqid, $xLog) = getReqInfo($respHeader);\n\n        $resp = new Qiniu_Response($code, $respBody);\n        $resp->Header['Content-Type'] = $contentType;\n        $resp->Header[\"X-Reqid\"] = $reqid;\n        return array($resp, null);\n    }\n}\n\nfunction getReqInfo($headerContent) {\n    $headers = explode(\"\\r\\n\", $headerContent);\n    $reqid = null;\n    $xLog = null;\n    foreach($headers as $header) {\n        $header = trim($header);\n        if(strpos($header, 'X-Reqid') !== false) {\n            list($k, $v) = explode(':', $header);\n            $reqid = trim($v);\n        } elseif(strpos($header, 'X-Log') !== false) {\n            list($k, $v) = explode(':', $header);\n            $xLog = trim($v);\n        }\n    }\n    return array($reqid, $xLog);\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $responseHeaders = $this->getReqInfo($headerContent);\n        $response = new Qiniu_Response($httpCode, $responseBody, $responseHeaders);\n        return [$response, $error ? new Qiniu_Error($error) : null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($headerContent));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[strtolower($key)] = $value;\n            }\n        }\n        return [\n            'reqid' => isset($headers['x-reqid']) ? $headers['x-reqid'] : null,\n            'xLog' => isset($headers['x-log']) ? $headers['x-log'] : null\n        ];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->method == 'POST' || $req->method == 'PUT') {\n            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $req->method);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($response, 0, $headerSize);\n        $body = substr($response, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $reqInfo = $this->getReqInfo($headerContent);\n        $qiniuResponse = new Qiniu_Response($httpCode, $body, $headerContent, $reqInfo['reqid'], $reqInfo['xLog']);\n        $qiniuError = $error ? new Qiniu_Error($error) : null;\n\n        return [$qiniuResponse, $qiniuError];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = explode(\"\\r\\n\", trim($headerContent));\n        $reqid = '';\n        $xLog = '';\n        foreach ($headers as $header) {\n            if (strpos($header, 'X-Reqid:') === 0) {\n                $reqid = trim(substr($header, 8));\n            } elseif (strpos($header, 'X-Log:') === 0) {\n                $xLog = trim(substr($header, 6));\n            }\n        }\n        return ['reqid' => $reqid, 'xLog' => $xLog];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n    public $reqid;\n    public $xLog;\n\n    public function __construct($statusCode, $body, $headers, $reqid, $xLog) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n        $this->reqid = $reqid;\n        $this->xLog = $xLog;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $req->method);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        if ($error) {\n            return [null, new Qiniu_Error($error)];\n        }\n\n        $responseHeaders = $this->getReqInfo($headerContent);\n        $response = new Qiniu_Response($httpCode, $responseBody, $responseHeaders);\n        return [$response, null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($headerContent));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        $reqid = isset($headers['X-Reqid']) ? $headers['X-Reqid'] : null;\n        $xLog = isset($headers['X-Log']) ? $headers['X-Log'] : null;\n        return ['reqid' => $reqid, 'xLog' => $xLog];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $req->method);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $body = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $response = new Qiniu_Response($httpCode, $body, $this->getReqInfo($headerContent));\n        return [$response, $error ? new Qiniu_Error($error) : null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        foreach (explode(\"\\r\\n\", $headerContent) as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return [\n            'reqid' => isset($headers['X-Reqid']) ? $headers['X-Reqid'] : null,\n            'xLog' => isset($headers['X-Log']) ? $headers['X-Log'] : null\n        ];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $reqInfo;\n\n    public function __construct($statusCode, $body, $reqInfo) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->reqInfo = $reqInfo;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $reqInfo = $this->getReqInfo($headerContent);\n        $response = new Qiniu_Response($httpCode, $responseBody, $headerContent, $reqInfo['reqid'], $reqInfo['xLog']);\n        return [$response, $error ? new Qiniu_Error($error) : null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = explode(\"\\r\\n\", trim($headerContent));\n        $reqid = '';\n        $xLog = '';\n        foreach ($headers as $header) {\n            list($key, $value) = explode(': ', $header, 2);\n            if ($key === 'X-Reqid') {\n                $reqid = $value;\n            } elseif ($key === 'X-Log') {\n                $xLog = $value;\n            }\n        }\n        return ['reqid' => $reqid, 'xLog' => $xLog];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n    public $reqid;\n    public $xLog;\n\n    public function __construct($statusCode, $body, $headers, $reqid, $xLog) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n        $this->reqid = $reqid;\n        $this->xLog = $xLog;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $body = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $response = new Qiniu_Response($httpCode, $body, $this->getReqInfo($headerContent));\n        return [$response, $error ? new Qiniu_Error($error) : null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", $headerContent);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return [\n            'reqid' => isset($headers['X-Reqid']) ? $headers['X-Reqid'] : null,\n            'xLog' => isset($headers['X-Log']) ? $headers['X-Log'] : null\n        ];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $reqInfo;\n\n    public function __construct($statusCode, $body, $reqInfo) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->reqInfo = $reqInfo;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $req->method);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $reqInfo = $this->getReqInfo($headerContent);\n        $response = new Qiniu_Response($httpCode, $responseBody, $headerContent, $reqInfo['reqid'], $reqInfo['xLog']);\n        $errObj = $error ? new Qiniu_Error($error) : null;\n\n        return [$response, $errObj];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = explode(\"\\r\\n\", trim($headerContent));\n        $reqid = '';\n        $xLog = '';\n        foreach ($headers as $header) {\n            list($key, $value) = explode(': ', $header, 2);\n            if ($key === 'X-Reqid') {\n                $reqid = $value;\n            } elseif ($key === 'X-Log') {\n                $xLog = $value;\n            }\n        }\n        return ['reqid' => $reqid, 'xLog' => $xLog];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n    public $reqid;\n    public $xLog;\n\n    public function __construct($statusCode, $body, $headers, $reqid, $xLog) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n        $this->reqid = $reqid;\n        $this->xLog = $xLog;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $body = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $response = new Qiniu_Response($httpCode, $body, $this->getReqInfo($headerContent));\n        return [$response, $error ? new Qiniu_Error($error) : null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($headerContent));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return [\n            'reqid' => isset($headers['X-Reqid']) ? $headers['X-Reqid'] : null,\n            'xLog' => isset($headers['X-Log']) ? $headers['X-Log'] : null\n        ];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $reqInfo;\n\n    public function __construct($statusCode, $body, $reqInfo) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->reqInfo = $reqInfo;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->method === 'POST') {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $responseHeaders = $this->getReqInfo($headerContent);\n        $response = new Qiniu_Response($httpCode, $responseBody, $responseHeaders);\n        $qiniuError = $error ? new Qiniu_Error($error) : null;\n\n        return [$response, $qiniuError];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", trim($headerContent));\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[strtolower($key)] = $value;\n            }\n        }\n        $reqid = isset($headers['x-reqid']) ? $headers['x-reqid'] : null;\n        $xLog = isset($headers['x-log']) ? $headers['x-log'] : null;\n        return ['reqid' => $reqid, 'xLog' => $xLog];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $headers;\n\n    public function __construct($statusCode, $body, $headers) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->headers = $headers;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}",
      "class Qiniu_HttpClient {\n    public function RoundTrip($req) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $req->url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $req->headers);\n        if ($req->body) {\n            curl_setopt($ch, CURLOPT_POST, true);\n            curl_setopt($ch, CURLOPT_POSTFIELDS, $req->body);\n        }\n        $responseBody = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n        $headerContent = substr($responseBody, 0, $headerSize);\n        $responseBody = substr($responseBody, $headerSize);\n        $error = curl_error($ch);\n        curl_close($ch);\n\n        $response = new Qiniu_Response($httpCode, $responseBody, $this->getReqInfo($headerContent));\n        return [$response, $error ? new Qiniu_Error($error) : null];\n    }\n\n    public function getReqInfo($headerContent) {\n        $headers = [];\n        $lines = explode(\"\\r\\n\", $headerContent);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                list($key, $value) = explode(': ', $line, 2);\n                $headers[$key] = $value;\n            }\n        }\n        return [\n            'reqid' => isset($headers['X-Reqid']) ? $headers['X-Reqid'] : null,\n            'xLog' => isset($headers['X-Log']) ? $headers['X-Log'] : null\n        ];\n    }\n}\n\nclass Qiniu_Response {\n    public $statusCode;\n    public $body;\n    public $reqInfo;\n\n    public function __construct($statusCode, $body, $reqInfo) {\n        $this->statusCode = $statusCode;\n        $this->body = $body;\n        $this->reqInfo = $reqInfo;\n    }\n}\n\nclass Qiniu_Error {\n    public $message;\n\n    public function __construct($message) {\n        $this->message = $message;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a PHP function that extracts article information (title and cover image URL) from a WeChat public article URL using cURL and regular expressions.\n\nFunction Description: The function takes a WeChat article URL as input, fetches the HTML content using cURL, then extracts the article title and cover image URL using regular expressions. The cover image URL is processed through a third-party image service (weserv.nl) to get a standardized version. The function returns an associative array containing the extracted information and a success flag.\n\nInput: \n- $url (string): The URL of a WeChat public article (must contain 'mp.weixin.qq.com')\n\nOutput: \n- Returns an associative array with these keys:\n  - 'title' (string): Extracted article title (empty string if not found)\n  - 'cover' (string): Processed cover image URL (empty string if not found)\n  - 'success' (bool): True if both title and cover were successfully extracted",
    "Canonical_solution": "function get_wechat_article_info($url)\n{\n    $result = array(\n        'title' => '',\n        'cover' => '',\n        'success' => false\n    );\n\n    if (empty($url) || strpos($url, 'mp.weixin.qq.com') === false) {\n        return $result;\n    }\n\n    $ch = curl_init(htmlspecialchars_decode($url));\n    curl_setopt_array($ch, [\n        CURLOPT_VERBOSE => true,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_SSL_VERIFYPEER => false,\n        CURLOPT_SSL_VERIFYHOST => false,\n        CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',\n    ]);\n    $response = curl_exec($ch);\n\n    preg_match('/var msg_title = \\'[\\S\\s]*?\\'.html\\\\(false\\\\);/', $response, $matches);\n    $result['title'] = empty($matches[0]) ? '' : htmlspecialchars_decode(str_replace(['var msg_title = \\'', '\\'.html(false);'], '', $matches[0]));\n    preg_match('/var msg_cdn_url = \"[\\S\\s]*?\";/', $response, $matches);\n    $result['cover'] = empty($matches[0]) ? '' : str_replace(['var msg_cdn_url = \"', '\";'], '', $matches[0]);\n    curl_close($ch);\n\n    if (!empty($result['cover'])) {\n        $result['cover'] = 'https://images.weserv.nl/?' . http_build_query([\n            'url' => $result['cover'],\n            'il' => '',\n            'we' => '',\n            'h' => 360,\n            'q' => 70,\n        ]);\n    }\n\n    $result['success'] = !empty($result['title']) && !empty($result['cover']);\n    return $result;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $htmlContent = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/', $htmlContent, $matches);\n    if (!empty($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/', $htmlContent, $matches);\n    if (!empty($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/i', $html, $matches);\n    if (!empty($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/i', $html, $matches);\n    if (!empty($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $htmlContent = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/i', $htmlContent, $matches);\n    if (isset($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/i', $htmlContent, $matches);\n    if (isset($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/i', $html, $matches);\n    if (!empty($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/i', $html, $matches);\n    if (!empty($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    preg_match('/<title>(.*?)<\\/title>/', $html, $matches);\n    if (!empty($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    $cover = '';\n    preg_match('/<img.*?data-src=\"(.*?)\"/', $html, $matches);\n    if (!empty($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $htmlContent = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/', $htmlContent, $matches);\n    if (isset($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/', $htmlContent, $matches);\n    if (isset($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/', $html, $matches);\n    if (!empty($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/', $html, $matches);\n    if (!empty($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/', $html, $matches);\n    if (isset($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/', $html, $matches);\n    if (isset($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "function extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    preg_match('/<title>(.*?)<\\/title>/', $html, $matches);\n    if (isset($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    $cover = '';\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/', $html, $matches);\n    if (isset($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}",
      "<?php\nfunction extractWeChatArticleInfo($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $html = curl_exec($ch);\n    curl_close($ch);\n\n    $title = '';\n    $cover = '';\n\n    // Extract title\n    preg_match('/<title>(.*?)<\\/title>/', $html, $matches);\n    if (isset($matches[1])) {\n        $title = trim($matches[1]);\n    }\n\n    // Extract cover image URL\n    preg_match('/\"msg_cdn_url\":\"(.*?)\"/', $html, $matches);\n    if (isset($matches[1])) {\n        $cover = 'https://images.weserv.nl/?url=' . urlencode($matches[1]);\n    }\n\n    return [\n        'title' => $title,\n        'cover' => $cover,\n        'success' => !empty($title) && !empty($cover)\n    ];\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a PHP class that handles HTTP requests to the OpenAI API using cURL, with support for different content types, streaming, and proxy configuration.\n\nClass Description: The OpenAi class is designed to interact with OpenAI's API by sending HTTP requests. It manages API keys, request headers, content types, and provides configuration options for timeouts, proxies, and custom URLs. The class supports both JSON and multipart/form-data content types and can handle streaming responses.\n\nAttributes:\n\nengine: [string] - Default engine for API requests (default: \"davinci\")\nmodel: [string] - Default model for text completions (default: \"text-davinci-002\")\nchatModel: [string] - Default model for chat completions (default: \"gpt-3.5-turbo\")\nheaders: [array] - Array of HTTP headers to be sent with requests\ncontentTypes: [array] - Mapping of content types to their header strings\ntimeout: [int] - Timeout for cURL requests in seconds (default: 0)\nstream_method: [object] - Callback method for handling streamed responses\ncustomUrl: [string] - Custom base URL to override the default API endpoint\nproxy: [string] - Proxy server address for requests\ncurlInfo: [array] - Information about the last cURL request\n\nMethods:\n\n__construct: [function]($OPENAI_API_KEY) -> [void] - Initializes the class with an API key and sets default headers\nsendRequest: [function](string $url, string $method, array $opts = []) -> [bool|string] - Sends an HTTP request to the specified URL with given method and options\nbaseUrl: [function](string &$url) -> [void] - Modifies the URL to use a custom base URL if configured",
    "Canonical_solution": "namespace Orhanerday\\OpenAi;\n\nuse Exception;\n\nclass OpenAi\n{\n    private string $engine = \"davinci\";\n    private string $model = \"text-davinci-002\";\n    private string $chatModel = \"gpt-3.5-turbo\";\n    private array $headers;\n    private array $contentTypes;\n    private int $timeout = 0;\n    private object $stream_method;\n    private string $customUrl = \"\";\n    private string $proxy = \"\";\n    private array $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY)\n    {\n        $this->contentTypes = [\n            \"application/json\"    => \"Content-Type: application/json\",\n            \"multipart/form-data\" => \"Content-Type: multipart/form-data\",\n        ];\n\n        $this->headers = [\n            $this->contentTypes[\"application/json\"],\n            \"Authorization: Bearer $OPENAI_API_KEY\",\n        ];\n    }\n\n    /**\n     * @param  string  $url\n     * @param  string  $method\n     * @param  array   $opts\n     * @return bool|string\n     */\n    private function sendRequest(string $url, string $method, array $opts = [])\n    {\n        $post_fields = json_encode($opts);\n\n        if (array_key_exists('file', $opts) || array_key_exists('image', $opts)) {\n            $this->headers[0] = $this->contentTypes[\"multipart/form-data\"];\n            $post_fields      = $opts;\n        } else {\n            $this->headers[0] = $this->contentTypes[\"application/json\"];\n        }\n        $curl_info = [\n            CURLOPT_URL            => $url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING       => '',\n            CURLOPT_MAXREDIRS      => 10,\n            CURLOPT_TIMEOUT        => $this->timeout,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST  => $method,\n            CURLOPT_POSTFIELDS     => $post_fields,\n            CURLOPT_HTTPHEADER     => $this->headers,\n        ];\n\n        if ($opts == []) {\n            unset($curl_info[CURLOPT_POSTFIELDS]);\n        }\n\n        if (!empty($this->proxy)) {\n            $curl_info[CURLOPT_PROXY] = $this->proxy;\n        }\n\n        if (array_key_exists('stream', $opts) && $opts['stream']) {\n            $curl_info[CURLOPT_WRITEFUNCTION] = $this->stream_method;\n        }\n\n        $curl = curl_init();\n\n        curl_setopt_array($curl, $curl_info);\n        $response = curl_exec($curl);\n\n        $info           = curl_getinfo($curl);\n        $this->curlInfo = $info;\n\n        curl_close($curl);\n\n        return $response;\n    }\n\n    /**\n     * @param  string  $url\n     */\n    private function baseUrl(string &$url)\n    {\n        if ($this->customUrl != \"\") {\n            $url = str_replace(Url::ORIGIN, $this->customUrl, $url);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl;\n    private $proxy;\n    private $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Accept: application/json'\n        ];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST') {\n            if (isset($opts['content_type']) && $opts['content_type'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(string &$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $apiKey;\n    public $headers = [];\n    public $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->apiKey = $OPENAI_API_KEY;\n        $this->headers = [\n            'Authorization: Bearer ' . $this->apiKey,\n            $this->contentTypes['json']\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST') {\n            if (isset($opts['data'])) {\n                if ($this->headers[1] === $this->contentTypes['json']) {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if (!empty($this->customUrl)) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    public $stream_method;\n    public $customUrl;\n    public $proxy;\n    public $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if (!empty($opts['data'])) {\n            if ($opts['contentType'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if (curl_errno($ch)) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(string &$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'multipart' => 'Content-Type: multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if (!empty($this->proxy)) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (isset($opts['data'])) {\n                if (isset($opts['contentType']) && $opts['contentType'] === 'multipart') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method !== null) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if (!empty($this->customUrl)) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method;\n    private $customUrl;\n    private $proxy;\n    private $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if (isset($opts['data'])) {\n            if ($opts['content_type'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if (curl_errno($ch)) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    public $stream_method;\n    public $customUrl;\n    public $proxy;\n    public $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (isset($opts['content_type']) && $opts['content_type'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if (curl_errno($ch)) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(string &$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $apiKey;\n    public $headers = [];\n    public $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    public $timeout = 0;\n    public $stream_method = null;\n    public $customUrl = \"\";\n    public $proxy = \"\";\n    public $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->apiKey = $OPENAI_API_KEY;\n        $this->headers = [\n            'Authorization: Bearer ' . $this->apiKey,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n        curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n\n        if ($method == 'POST' || $method == 'PUT') {\n            $contentType = isset($opts['content_type']) ? $opts['content_type'] : 'json';\n            if ($contentType == 'json') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            } elseif ($contentType == 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(string &$url) {\n        if (!empty($this->customUrl)) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers;\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    public $stream_method;\n    public $customUrl;\n    public $proxy;\n    public $curlInfo;\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $this->baseUrl($url);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if (!empty($opts['data'])) {\n            if ($opts['contentType'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    public function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method = null;\n    private $customUrl = \"\";\n    private $proxy = \"\";\n    private $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest($url, $method, $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if (!empty($opts['data'])) {\n            if ($opts['content_type'] === 'form-data') {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n            } else {\n                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if (curl_errno($ch)) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(&$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}",
      "class OpenAi {\n    public $engine = \"davinci\";\n    public $model = \"text-davinci-002\";\n    public $chatModel = \"gpt-3.5-turbo\";\n    private $headers = [];\n    private $contentTypes = [\n        'json' => 'Content-Type: application/json',\n        'form-data' => 'Content-Type: multipart/form-data'\n    ];\n    private $timeout = 0;\n    private $stream_method = null;\n    private $customUrl = \"\";\n    private $proxy = \"\";\n    private $curlInfo = [];\n\n    public function __construct($OPENAI_API_KEY) {\n        $this->headers = [\n            'Authorization: Bearer ' . $OPENAI_API_KEY,\n            'Content-Type: application/json'\n        ];\n    }\n\n    public function sendRequest(string $url, string $method, array $opts = []) {\n        $ch = curl_init();\n        $this->baseUrl($url);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);\n\n        if ($this->proxy) {\n            curl_setopt($ch, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($method === 'POST' || $method === 'PUT') {\n            if (isset($opts['data'])) {\n                if (isset($opts['contentType']) && $opts['contentType'] === 'form-data') {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, $opts['data']);\n                } else {\n                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts['data']));\n                }\n            }\n        }\n\n        if ($this->stream_method) {\n            curl_setopt($ch, CURLOPT_WRITEFUNCTION, $this->stream_method);\n        }\n\n        $response = curl_exec($ch);\n        $this->curlInfo = curl_getinfo($ch);\n        curl_close($ch);\n\n        if ($response === false) {\n            return false;\n        }\n\n        return $response;\n    }\n\n    private function baseUrl(string &$url) {\n        if ($this->customUrl) {\n            $url = str_replace('https://api.openai.com', $this->customUrl, $url);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP GET request to a specified URL using cURL, with custom headers and SSL verification disabled, and returns the response content.\n\nFunction Description: The function uses PHP's cURL library to perform an HTTP GET request to the Pipixia video detail API endpoint. It sets various cURL options including a custom user agent header, disables SSL verification for both peer and host, and configures connection timeout. The function returns the raw response content from the API.\n\nInput: \n- $id: string - The item ID to be appended to the API URL for fetching specific video details\n\nOutput: \n- string - The raw response content from the API call, or false if the request fails",
    "Canonical_solution": "function curl_pipiXia($id)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5000);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'\n    ));\n    curl_setopt($ch, CURLOPT_URL, \"https://h5.pipix.com/bds/webapi/item/detail/?item_id=\".$id);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_REDIR_PROTOCOLS, -1);\n    $contents = curl_exec($ch);\n    curl_close($ch);\n    return $contents;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction getPipixiaVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function getPipixiaVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array('User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'));\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction fetchVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail?id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction fetchPipixiaVideoDetails($id) {\n    $url = \"https://api.pipixia.com/item/detail/?item_id=\" . urlencode($id);\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP request using cURL with specific configurations for web scraping purposes, including custom headers and SSL verification settings.\n\nFunction Description: The function `MCurl` performs an HTTP GET request to a specified URL using PHP's cURL library. It's designed for web scraping with a Baidu spider user agent, follows redirects, ignores SSL verification (for testing purposes), and returns the response body. This is particularly useful when you need to mimic a search engine crawler or bypass certain security restrictions during development.\n\nInput: \n- $url (string): The target URL to which the HTTP request will be made\n\nOutput: \n- Returns the response body (string) from the HTTP request if successful\n- Returns false if the request fails (though error handling should be added in production code)\n\nNote: The current implementation lacks proper error handling which should be added in a production environment. The SSL verification is disabled (CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST set to false) which is insecure for production use - this should only be used in development or with trusted connections.",
    "Canonical_solution": "use Typecho_Db;\nuse ReflectionClass;\n\nclass CatClaw_Action extends Widget_Abstract_Contents implements Widget_Interface_Do\n{\n    private function MCurl($url)\n    {\n        $headers[] = \"User-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\";\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_URL, $url);\n        curl_setopt($curl, CURLOPT_HEADER, 0);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);\n        $tmpInfo = curl_exec($curl);\n        curl_close($curl);\n        return $tmpInfo;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function MCurl($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Baiduspider');\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a PHP class that implements an HTTP client using cURL for fetching remote resources with proper error handling and resource management.\n\nClass Description: The timthumb class provides functionality to download remote files using cURL with features like progress tracking, size limitations, and fallback to file_get_contents when cURL is unavailable. It handles various HTTP status codes and maintains error state.\n\nAttributes:\n- $curlFH: [resource|false] - File handle for writing downloaded data\n- $curlDataWritten: [int] - Tracks the amount of data written during download\n- $lastURLError: [mixed] - Stores the last error encountered during URL fetching\n\nMethods:\n- curlWrite($h, $d) -> [int] - Static callback function for cURL write operations that writes data to file and tracks bytes written. Returns bytes processed or 0 if size limit exceeded.\n  - $h: [resource] - cURL handle\n  - $d: [string] - Data chunk being written\n\n- getURL($url, $tempfile) -> [bool] - Main method to fetch a URL and save it to a temporary file. Returns true on success, false on failure.\n  - $url: [string] - URL to fetch\n  - $tempfile: [string] - Path to temporary file for storing downloaded content",
    "Canonical_solution": "Here's the extracted class-level code for the HTTP client using cURL in PHP:\n\n```php\nclass timthumb {\n    protected static $curlFH = false;\n    protected static $curlDataWritten = 0;\n    protected $lastURLError = false;\n\n    public static function curlWrite($h, $d){\n        fwrite(self::$curlFH, $d);\n        self::$curlDataWritten += strlen($d);\n        if(self::$curlDataWritten > MAX_FILE_SIZE){\n            return 0;\n        } else {\n            return strlen($d);\n        }\n    }\n\n    protected function getURL($url, $tempfile){\n        $this->lastURLError = false;\n        $url = preg_replace('/ /', '%20', $url);\n        if(function_exists('curl_init')){\n            $this->debug(3, \"Curl is installed so using it to fetch URL.\");\n            self::$curlFH = fopen($tempfile, 'w');\n            if(! self::$curlFH){\n                $this->error(\"Could not open $tempfile for writing.\");\n                return false;\n            }\n            self::$curlDataWritten = 0;\n            $this->debug(3, \"Fetching url with curl: $url\");\n            $curl = curl_init($url);\n            curl_setopt ($curl, CURLOPT_TIMEOUT, CURL_TIMEOUT);\n            curl_setopt ($curl, CURLOPT_USERAGENT, \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30\");\n            curl_setopt ($curl, CURLOPT_RETURNTRANSFER, true);\n            curl_setopt ($curl, CURLOPT_HEADER, 0);\n            curl_setopt ($curl, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt ($curl, CURLOPT_WRITEFUNCTION, 'timthumb::curlWrite');\n            @curl_setopt ($curl, CURLOPT_FOLLOWLOCATION, true);\n            @curl_setopt ($curl, CURLOPT_MAXREDIRS, 10);\n            \n            $curlResult = curl_exec($curl);\n            fclose(self::$curlFH);\n            $httpStatus = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n            if($httpStatus == 404){\n                $this->set404();\n            }\n            if($httpStatus == 302){\n                $this->error(\"External Image is Redirecting. Try alternate image url\");\n                return false;\n            }\n            if($curlResult){\n                curl_close($curl);\n                return true;\n            } else {\n                $this->lastURLError = curl_error($curl);\n                curl_close($curl);\n                return false;\n            }\n        } else {\n            $img = @file_get_contents ($url);\n            if($img === false){\n                $err = error_get_last();\n                if(is_array($err) && $err['message']){\n                    $this->lastURLError = $err['message'];\n                } else {\n                    $this->lastURLError = $err;\n                }\n                if(preg_match('/404/', $this->lastURLError)){\n                    $this->set404();\n                }\n\n                return false;\n            }\n            if(! file_put_contents($tempfile, $img)){\n                $this->error(\"Could not write to $tempfile.\");\n                return false;\n            }\n            return true;\n        }\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit of 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode != 200) {\n            unlink($tempfile);\n            $this->lastURLError = $error ?: \"HTTP Error Code: $httpCode\";\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop downloading\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            $this->lastURLError = 'cURL is not available';\n            return false;\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = 'Failed to open temporary file for writing';\n            return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($error || $httpCode != 200) {\n            unlink($tempfile);\n            $this->lastURLError = $error ?: \"HTTP Error: $httpCode\";\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode != 200) {\n            $this->lastURLError = $error ?: \"HTTP Error Code: $httpCode\";\n            unlink($tempfile);\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop downloading\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file\";\n            return false;\n        }\n\n        if (!function_exists('curl_init')) {\n            fclose($this->curlFH);\n            $this->curlFH = false;\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = \"file_get_contents failed\";\n                return false;\n            }\n        }\n\n        $ch = curl_init();\n        if (!$ch) {\n            fclose($this->curlFH);\n            $this->curlFH = false;\n            $this->lastURLError = \"cURL initialization failed\";\n            return false;\n        }\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_NOBODY, false);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n        curl_close($ch);\n        fclose($this->curlFH);\n        $this->curlFH = false;\n\n        if ($result === false || $httpCode < 200 || $httpCode >= 300) {\n            $this->lastURLError = \"HTTP request failed with code $httpCode: $error\";\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode != 200) {\n            unlink($tempfile);\n            $this->lastURLError = $error ?: \"HTTP Error Code: $httpCode\";\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop downloading\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode < 200 || $httpCode >= 300) {\n            $this->lastURLError = $error ?: \"HTTP Error Code: $httpCode\";\n            unlink($tempfile);\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0; // Signal cURL to stop downloading\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode < 200 || $httpCode >= 300) {\n            $this->lastURLError = $error ?: \"HTTP Error Code: $httpCode\";\n            unlink($tempfile);\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit of 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode < 200 || $httpCode >= 300) {\n            $this->lastURLError = $error ?: \"HTTP Error Code: $httpCode\";\n            return false;\n        }\n\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1024 * 1024) { // Example size limit: 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            if (@copy($url, $tempfile)) {\n                return true;\n            } else {\n                $this->lastURLError = error_get_last();\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = error_get_last();\n            return false;\n        }\n\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_FILE, $this->curlFH);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_FAILONERROR, true);\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $this->lastURLError = curl_error($ch);\n            curl_close($ch);\n            fclose($this->curlFH);\n            unlink($tempfile);\n            return false;\n        }\n\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        if ($httpCode >= 400) {\n            $this->lastURLError = \"HTTP Error: $httpCode\";\n            curl_close($ch);\n            fclose($this->curlFH);\n            unlink($tempfile);\n            return false;\n        }\n\n        curl_close($ch);\n        fclose($this->curlFH);\n        return true;\n    }\n}",
      "class timthumb {\n    private $curlFH = false;\n    private $curlDataWritten = 0;\n    private $lastURLError = null;\n\n    public static function curlWrite($h, $d) {\n        $self = curl_getinfo($h, CURLINFO_PRIVATE);\n        if ($self->curlDataWritten + strlen($d) > 1048576) { // Example size limit of 1MB\n            return 0;\n        }\n        fwrite($self->curlFH, $d);\n        $self->curlDataWritten += strlen($d);\n        return strlen($d);\n    }\n\n    public function getURL($url, $tempfile) {\n        if (!function_exists('curl_init')) {\n            $this->lastURLError = \"cURL is not available, falling back to file_get_contents.\";\n            if (@file_put_contents($tempfile, @file_get_contents($url)) !== false) {\n                return true;\n            } else {\n                $this->lastURLError = \"file_get_contents failed.\";\n                return false;\n            }\n        }\n\n        $this->curlFH = fopen($tempfile, 'wb');\n        if (!$this->curlFH) {\n            $this->lastURLError = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_WRITEFUNCTION, ['timthumb', 'curlWrite']);\n        curl_setopt($ch, CURLOPT_PRIVATE, $this);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n        fclose($this->curlFH);\n\n        if ($result === false || $httpCode != 200) {\n            $this->lastURLError = \"cURL error: \" . $error . \" HTTP Code: \" . $httpCode;\n            return false;\n        }\n\n        return true;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a PHP class that handles webhook triggering using Guzzle HTTP client, including formatting headers and payload data, and processing responses or errors.\n\nClass Description: The WebhookService class provides functionality to trigger webhooks by sending HTTP requests to specified endpoints. It handles request configuration, response processing, and error handling.\n\nAttributes:\n- client: [Client] - Guzzle HTTP client instance used for making requests\n\nMethods:\n- __construct() -> [void] - Initializes the Guzzle HTTP client instance\n- triggerWebhook(mixed $data) -> [array] - Sends an HTTP request to the specified endpoint with formatted headers and payload\n  Parameters:\n    - $data: [mixed] - Contains request details including method, endpoint, headers, and payload\n  Returns:\n    - [array] - Response status ('success' or 'error') and content or error message\n- formatHeaders(array $headers) -> [array] - Formats headers array into key-value pairs\n  Parameters:\n    - $headers: [array] - Raw headers array to be formatted\n  Returns:\n    - [array] - Formatted headers as key-value pairs\n- formatPayload($payload) -> [array|string] - Formats payload data into key-value pairs\n  Parameters:\n    - $payload: [mixed] - Raw payload data to be formatted\n  Returns:\n    - [array|string] - Formatted payload as key-value pairs or original string if not array",
    "Canonical_solution": "use GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Psr7\\Message;\n\nclass WebhookService\n{\n    protected Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client;\n    }\n\n    public function triggerWebhook(mixed $data): array\n    {\n        $options = [\n            'headers'     => $this->formatHeaders(json_decode($data['headers'], true)),\n            'form_params' => $this->formatPayload(json_decode($data['payload'], true)),\n        ];\n\n        try {\n            $response = $this->client->request(\n                $data['method'],\n                $data['end_point'],\n                $options,\n            );\n\n            return [\n                'status'   => 'success',\n                'response' => $response->getBody()->getContents(),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status'   => 'error',\n                'response' => $e->hasResponse() ? Message::toString($e->getResponse()) : $e->getMessage(),\n            ];\n        }\n    }\n\n    protected function formatHeaders(array $headers): array\n    {\n        $formattedHeaders = [];\n\n        foreach ($headers as $header) {\n            $formattedHeaders[$header['key']] = $header['value'];\n        }\n\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload): array|string\n    {\n        if (! is_array($payload)) {\n            $payload = json_decode($payload, true);\n        }\n\n        $formattedPayload = [];\n\n        if (\n            isset($payload['key'])\n            && isset($payload['value'])\n        ) {\n            $formattedPayload[$payload['key']] = $payload['value'];\n        } else {\n            foreach ($payload as $item) {\n                $formattedPayload[$item['key']] = $item['value'];\n            }\n        }\n\n        return $formattedPayload;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 133,
    "matched_results": [
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        $method = $data['method'] ?? 'POST';\n        $endpoint = $data['endpoint'] ?? '';\n        $headers = $this->formatHeaders($data['headers'] ?? []);\n        $payload = $this->formatPayload($data['payload'] ?? []);\n\n        try {\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => is_array($payload) ? $payload : null,\n                'body' => !is_array($payload) ? $payload : null,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => $response->getBody()->getContents(),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            list($key, $value) = explode(':', $header, 2);\n            $formattedHeaders[trim($key)] = trim($value);\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'] ?? '';\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody()->getContents(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            if (is_array($header) && count($header) === 2) {\n                [$key, $value] = $header;\n                $formattedHeaders[$key] = $value;\n            }\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data) {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'];\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers) {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            list($key, $value) = explode(':', $header, 2);\n            $formattedHeaders[trim($key)] = trim($value);\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        $method = $data['method'] ?? 'POST';\n        $endpoint = $data['endpoint'] ?? '';\n        $headers = $this->formatHeaders($data['headers'] ?? []);\n        $payload = $this->formatPayload($data['payload'] ?? []);\n\n        try {\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody()->getContents(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            if (is_array($header) && count($header) === 2) {\n                [$key, $value] = $header;\n                $formattedHeaders[$key] = $value;\n            }\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        $method = $data['method'] ?? 'POST';\n        $endpoint = $data['endpoint'] ?? '';\n        $headers = $this->formatHeaders($data['headers'] ?? []);\n        $payload = $this->formatPayload($data['payload'] ?? []);\n\n        try {\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody()->getContents(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            if (is_array($header) && count($header) === 2) {\n                [$key, $value] = $header;\n                $formattedHeaders[$key] = $value;\n            }\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'] ?? '';\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody()->getContents(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            list($key, $value) = explode(':', $header, 2);\n            $formattedHeaders[trim($key)] = trim($value);\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'];\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            list($key, $value) = explode(': ', $header);\n            $formattedHeaders[$key] = $value;\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'];\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody()->getContents(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            if (is_array($header) && count($header) === 2) {\n                [$key, $value] = $header;\n                $formattedHeaders[$key] = $value;\n            }\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data): array {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'] ?? '';\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers): array {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            if (isset($header['name'], $header['value'])) {\n                $formattedHeaders[$header['name']] = $header['value'];\n            }\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}",
      "<?php\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\n\nclass WebhookService {\n    private $client;\n\n    public function __construct() {\n        $this->client = new Client();\n    }\n\n    public function triggerWebhook($data) {\n        try {\n            $method = $data['method'] ?? 'POST';\n            $endpoint = $data['endpoint'];\n            $headers = $this->formatHeaders($data['headers'] ?? []);\n            $payload = $this->formatPayload($data['payload'] ?? []);\n\n            $response = $this->client->request($method, $endpoint, [\n                'headers' => $headers,\n                'json' => $payload,\n            ]);\n\n            return [\n                'status' => 'success',\n                'content' => json_decode($response->getBody(), true),\n            ];\n        } catch (RequestException $e) {\n            return [\n                'status' => 'error',\n                'message' => $e->getMessage(),\n            ];\n        }\n    }\n\n    private function formatHeaders(array $headers) {\n        $formattedHeaders = [];\n        foreach ($headers as $header) {\n            list($key, $value) = explode(': ', $header);\n            $formattedHeaders[$key] = $value;\n        }\n        return $formattedHeaders;\n    }\n\n    private function formatPayload($payload) {\n        if (is_array($payload)) {\n            return $payload;\n        }\n        return $payload;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a PHP function that retrieves a website's favicon.ico file from a given URL, caches it locally with a specified expiration time, and falls back to a default icon if retrieval fails or the file is not an image.\n\nFunction Description: The function attempts to fetch a favicon.ico file from a website URL, saves it to a local cache directory, and serves it with proper caching headers. If the remote favicon cannot be retrieved (invalid response, non-image content, or timeout), it falls back to a default icon. The function handles all HTTP operations via cURL and includes proper error checking and resource cleanup.\n\nInput:\n- $url: (string) The base URL of the website from which to fetch the favicon\n- $cache_time: (int) Duration in seconds for which the cached favicon should be considered valid\n- $default_ico: (string) Path to the default favicon file to use when retrieval fails\n- $basename: (string, optional) Name of the favicon file to look for (default: \"favicon.ico\")\n\nOutput:\n- The function outputs the favicon contents directly to the browser with appropriate headers\n- No explicit return value (void function)\n- Side effects: Creates/updates cache files in the designated cache directory",
    "Canonical_solution": "function pk_get_website_favicon_ico($url, $cache_time, $default_ico, $basename = \"favicon.ico\")\n{\n    $cache_filename = 'icon-'.md5($url) . '.ico';\n    $cache_file = dirname(__FILE__) . '/../cache/' . $cache_filename;\n    if (is_file($cache_file)) {\n        if (time() - filemtime($cache_file) <= $cache_time) {\n            pk_favicon_get_ico_contents($cache_file, $cache_filename);\n            return;\n        }\n    }\n    $ch = curl_init($url . '/' . $basename);\n    $ico_file = fopen($cache_file, 'w');\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_FAILONERROR, true);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_FILE, $ico_file);\n    curl_exec($ch);\n    fclose($ico_file);\n    if (curl_getinfo($ch, CURLINFO_HTTP_CODE) != 200) {\n        curl_close($ch);\n        @unlink($cache_file);\n        pk_favicon_put_default_and_output($cache_file, $cache_filename, $default_ico);\n        return;\n    }\n    $mimeArray = explode('/', curl_getinfo($ch, CURLINFO_CONTENT_TYPE));\n    curl_close($ch);\n    if (count($mimeArray) == 0 || $mimeArray[0] != 'image') {\n        @unlink($cache_file);\n        pk_favicon_put_default_and_output($cache_file, $cache_filename, $default_ico);\n        return;\n    }\n    pk_favicon_get_ico_contents($cache_file, $cache_filename);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_expired = !file_exists($cache_file) || (filemtime($cache_file) + $cache_time < time());\n\n    if ($cache_expired) {\n        $favicon_url = rtrim($url, '/') . '/' . $basename;\n        $ch = curl_init($favicon_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        $favicon_data = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n        curl_close($ch);\n\n        if ($http_code == 200 && strpos($content_type, 'image') === 0) {\n            file_put_contents($cache_file, $favicon_data);\n        } else {\n            copy($default_ico, $cache_file);\n        }\n    }\n\n    header('Content-Type: image/x-icon');\n    header('Cache-Control: public, max-age=' . $cache_time);\n    readfile($cache_file);\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $default_ico = realpath($default_ico);\n\n    if (file_exists($cache_file) && (time() - filemtime($cache_file) < $cache_time)) {\n        $ico_path = $cache_file;\n    } else {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, rtrim($url, '/') . '/' . $basename);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: image/x-icon,image/vnd.microsoft.icon']);\n        $ico_data = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200 && !empty($ico_data) && preg_match('/^(\\x00\\x00\\x01\\x00|\\x89PNG\\r\\n\\x1a\\n)/', $ico_data)) {\n            file_put_contents($cache_file, $ico_data);\n            $ico_path = $cache_file;\n        } else {\n            $ico_path = $default_ico;\n        }\n    }\n\n    if (file_exists($ico_path)) {\n        header('Content-Type: image/x-icon');\n        header('Cache-Control: public, max-age=' . $cache_time);\n        readfile($ico_path);\n    } else {\n        header(\"HTTP/1.0 404 Not Found\");\n    }\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_headers = [];\n\n    if (file_exists($cache_file)) {\n        $cache_headers = get_headers($cache_file, 1);\n        $last_modified = strtotime($cache_headers['Last-Modified']);\n        if ((time() - $last_modified) < $cache_time) {\n            header('Content-Type: image/x-icon');\n            readfile($cache_file);\n            return;\n        }\n    }\n\n    $ch = curl_init();\n    $favicon_url = rtrim($url, '/') . '/' . $basename;\n    curl_setopt($ch, CURLOPT_URL, $favicon_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: image/x-icon,image/vnd.microsoft.icon']);\n    $favicon_data = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n    curl_close($ch);\n\n    if ($http_code == 200 && strpos($content_type, 'image') === 0) {\n        file_put_contents($cache_file, $favicon_data);\n        touch($cache_file);\n        header('Content-Type: image/x-icon');\n        echo $favicon_data;\n    } else {\n        header('Content-Type: image/x-icon');\n        readfile($default_ico);\n    }\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $headers = [];\n\n    if (file_exists($cache_file) && (time() - filemtime($cache_file) < $cache_time)) {\n        $headers[] = 'Cache-Control: max-age=' . $cache_time;\n        $headers[] = 'Content-Type: image/x-icon';\n        foreach ($headers as $header) {\n            header($header);\n        }\n        readfile($cache_file);\n        return;\n    }\n\n    $ch = curl_init();\n    $favicon_url = rtrim($url, '/') . '/' . $basename;\n    curl_setopt($ch, CURLOPT_URL, $favicon_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: image/x-icon']);\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n    curl_close($ch);\n\n    if ($http_code == 200 && strpos($content_type, 'image/x-icon') !== false) {\n        file_put_contents($cache_file, $response);\n        $headers[] = 'Cache-Control: max-age=' . $cache_time;\n        $headers[] = 'Content-Type: image/x-icon';\n    } else {\n        $response = file_get_contents($default_ico);\n        $headers[] = 'Cache-Control: max-age=' . $cache_time;\n        $headers[] = 'Content-Type: image/x-icon';\n    }\n\n    foreach ($headers as $header) {\n        header($header);\n    }\n    echo $response;\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_expired = !file_exists($cache_file) || (filemtime($cache_file) + $cache_time < time());\n\n    if ($cache_expired) {\n        $favicon_url = rtrim($url, '/') . '/' . $basename;\n        $ch = curl_init($favicon_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: image/x-icon,image/vnd.microsoft.icon']);\n        $response = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($http_code == 200 && strpos(curl_getinfo($ch, CURLINFO_CONTENT_TYPE), 'image') === 0) {\n            file_put_contents($cache_file, $response);\n        } else {\n            copy($default_ico, $cache_file);\n        }\n    }\n\n    header('Content-Type: image/x-icon');\n    header('Cache-Control: public, max-age=' . $cache_time);\n    readfile($cache_file);\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/favicon_cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_headers = [];\n\n    if (file_exists($cache_file)) {\n        $cache_headers = get_headers($cache_file, true);\n        $last_modified = strtotime($cache_headers['Last-Modified']);\n        if ((time() - $last_modified) < $cache_time) {\n            header('Content-Type: image/x-icon');\n            readfile($cache_file);\n            return;\n        }\n    }\n\n    $ch = curl_init();\n    $favicon_url = rtrim($url, '/') . '/' . $basename;\n    curl_setopt($ch, CURLOPT_URL, $favicon_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function($curl, $header) use (&$cache_headers) {\n        if (stripos($header, 'Last-Modified:') === 0) {\n            $cache_headers['Last-Modified'] = trim(substr($header, 14));\n        }\n        return strlen($header);\n    });\n    $favicon_data = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n    if ($http_code == 200 && !empty($favicon_data) && strpos($favicon_data, \"\\x89PNG\") !== 0 && substr($favicon_data, 0, 4) == \"\\x00\\x00\\x01\\x00\") {\n        file_put_contents($cache_file, $favicon_data);\n        touch($cache_file, strtotime($cache_headers['Last-Modified']));\n        header('Content-Type: image/x-icon');\n        echo $favicon_data;\n    } else {\n        header('Content-Type: image/x-icon');\n        readfile($default_ico);\n    }\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/favicon_cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_expired = !file_exists($cache_file) || (filemtime($cache_file) + $cache_time < time());\n\n    if ($cache_expired) {\n        $favicon_url = rtrim($url, '/') . '/' . $basename;\n        $ch = curl_init($favicon_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        $favicon_data = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n        curl_close($ch);\n\n        if ($http_code == 200 && strpos($content_type, 'image') === 0) {\n            file_put_contents($cache_file, $favicon_data);\n        } else {\n            copy($default_ico, $cache_file);\n        }\n    }\n\n    header('Content-Type: image/x-icon');\n    header('Cache-Control: public, max-age=' . $cache_time);\n    readfile($cache_file);\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_valid = file_exists($cache_file) && (filemtime($cache_file) + $cache_time > time());\n\n    if ($cache_valid) {\n        $favicon_path = $cache_file;\n    } else {\n        $favicon_url = rtrim($url, '/') . '/' . $basename;\n        $ch = curl_init($favicon_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        $favicon_data = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n        curl_close($ch);\n\n        if ($http_code == 200 && strpos($content_type, 'image') === 0) {\n            file_put_contents($cache_file, $favicon_data);\n            $favicon_path = $cache_file;\n        } else {\n            $favicon_path = $default_ico;\n        }\n    }\n\n    header('Content-Type: image/x-icon');\n    header('Cache-Control: public, max-age=' . $cache_time);\n    readfile($favicon_path);\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/favicon_cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $cache_headers = [];\n\n    if (file_exists($cache_file)) {\n        $cache_headers = get_headers($cache_file, 1);\n        $last_modified = strtotime($cache_headers['Last-Modified']);\n        if ((time() - $last_modified) < $cache_time) {\n            header('Content-Type: image/x-icon');\n            readfile($cache_file);\n            return;\n        }\n    }\n\n    $ch = curl_init();\n    $favicon_url = rtrim($url, '/') . '/' . $basename;\n    curl_setopt($ch, CURLOPT_URL, $favicon_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: image/x-icon,image/vnd.microsoft.icon']);\n    $response = curl_exec($ch);\n    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n    curl_close($ch);\n\n    if ($http_code == 200 && strpos($content_type, 'image/') === 0) {\n        file_put_contents($cache_file, $response);\n        touch($cache_file);\n        header('Content-Type: ' . $content_type);\n        echo $response;\n    } else {\n        header('Content-Type: image/x-icon');\n        readfile($default_ico);\n    }\n}",
      "<?php\nfunction serveFavicon($url, $cache_time, $default_ico, $basename = \"favicon.ico\") {\n    $cache_dir = __DIR__ . '/favicon_cache/';\n    if (!is_dir($cache_dir)) {\n        mkdir($cache_dir, 0755, true);\n    }\n    $cache_file = $cache_dir . md5($url) . '.ico';\n    $serve_default = false;\n\n    if (file_exists($cache_file) && (time() - filemtime($cache_file) < $cache_time)) {\n        $favicon_data = file_get_contents($cache_file);\n    } else {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, rtrim($url, '/') . '/' . $basename);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: image/x-icon,image/vnd.microsoft.icon']);\n        $favicon_data = curl_exec($ch);\n        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        $content_type = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\n        curl_close($ch);\n\n        if ($http_code !== 200 || strpos($content_type, 'image') !== 0) {\n            $serve_default = true;\n        } else {\n            file_put_contents($cache_file, $favicon_data);\n        }\n    }\n\n    if ($serve_default) {\n        $favicon_data = file_get_contents($default_ico);\n    }\n\n    header('Content-Type: image/x-icon');\n    header('Cache-Control: public, max-age=' . $cache_time);\n    echo $favicon_data;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a PHP class that provides HTTP client functionality using cURL for making GET requests and downloading files from URLs.\n\nClass Description: The HttpClient class encapsulates cURL functionality to perform HTTP GET requests and file downloads. It provides static methods for simple URL fetching and file downloading with proper error handling and resource management.\n\nAttributes: (This class doesn't have any attributes as it only contains static methods)\n\nMethods:\n\nMethod1: urlGet(string $url, bool $follow_location = true, int $timeout = 10) -> string|bool - Performs a GET request to the specified URL. Follows redirects by default and allows setting a timeout. Returns the response content or throws an exception on error.\n\nMethod2: fileGet(string $url, string $target) -> string|bool - Downloads a file from the specified URL and saves it to the target location. Returns the output or throws an exception on error. Uses a longer default timeout for file downloads.",
    "Canonical_solution": "namespace Froxlor\\Http;\n\nuse Exception;\nuse Froxlor\\Froxlor;\n\nclass HttpClient\n{\n    /**\n     * Executes simple GET request\n     *\n     * @param string $url\n     * @param bool $follow_location\n     * @param int $timeout\n     *\n     * @return bool|string\n     * @throws Exception\n     */\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Froxlor/' . Froxlor::getVersion());\n        if ($follow_location) {\n            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        }\n        curl_setopt($ch, CURLOPT_TIMEOUT, (int)$timeout);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        $output = curl_exec($ch);\n        if ($output === false) {\n            $e = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"Curl error: \" . $e);\n        }\n        curl_close($ch);\n        return $output;\n    }\n\n    /**\n     * Downloads and stores a file from an url\n     *\n     * @param string $url\n     * @param string $target\n     *\n     * @return bool|string\n     * @throws Exception\n     */\n    public static function fileGet(string $url, string $target)\n    {\n        $fh = fopen($target, 'w');\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Froxlor/' . Froxlor::getVersion());\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 50);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FILE, $fh);\n        $output = curl_exec($ch);\n        if ($output === false) {\n            $e = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"Curl error: \" . $e);\n        }\n        curl_close($ch);\n        return $output;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        $fp = fopen($target, 'wb');\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            fclose($fp);\n            unlink($target); // Remove partial file on error\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        fclose($fp);\n        return $result;\n    }\n}",
      "class HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n        $fp = fopen($target, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new Exception(\"Failed to open file for writing.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($target); // Remove partially downloaded file\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        $fp = fopen($target, 'wb');\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            fclose($fp);\n            unlink($target); // Remove partial file on error\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        fclose($fp);\n        return $target;\n    }\n}",
      "<?php\n\nclass HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($target, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new Exception(\"Failed to open file for writing.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        $fp = fopen($target, 'wb');\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            fclose($fp);\n            unlink($target); // Remove partially downloaded file\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        fclose($fp);\n        return $result;\n    }\n}",
      "<?php\n\nclass HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($target, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new Exception(\"Failed to open file for writing.\");\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 300); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\n\nclass HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n\n        $fp = fopen($target, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new Exception(\"Failed to open file for writing: \" . $target);\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            unlink($target); // Remove partially downloaded file\n            throw new Exception(\"cURL error: \" . $error);\n        }\n\n        fclose($fp);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        $fp = fopen($target, 'wb');\n\n        if (!$fp) {\n            throw new Exception('Failed to open target file for writing.');\n        }\n\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            fclose($fp);\n            unlink($target); // Remove partially downloaded file\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        fclose($fp);\n        return $result;\n    }\n}",
      "class HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error = curl_error($ch);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        if (!$ch) {\n            throw new Exception(\"Failed to initialize cURL session.\");\n        }\n        $fp = fopen($target, 'wb');\n        if (!$fp) {\n            curl_close($ch);\n            throw new Exception(\"Failed to open target file for writing.\");\n        }\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n        $result = curl_exec($ch);\n        if ($result === false) {\n            $error = curl_error($ch);\n            fclose($fp);\n            curl_close($ch);\n            throw new Exception(\"cURL error: \" . $error);\n        }\n        fclose($fp);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class HttpClient {\n    public static function urlGet(string $url, bool $follow_location = true, int $timeout = 10): string|bool {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $follow_location);\n        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n\n        $response = curl_exec($ch);\n        if ($response === false) {\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        return $response;\n    }\n\n    public static function fileGet(string $url, string $target): string|bool {\n        $ch = curl_init($url);\n        $fp = fopen($target, 'wb');\n        curl_setopt($ch, CURLOPT_FILE, $fp);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Longer timeout for file downloads\n\n        $result = curl_exec($ch);\n        if ($result === false) {\n            fclose($fp);\n            unlink($target); // Remove partial file\n            throw new Exception('cURL Error: ' . curl_error($ch));\n        }\n\n        curl_close($ch);\n        fclose($fp);\n        return $result;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a PHP class that handles communication with a backend service through HTTP requests using cURL, supporting operations for task management.\n\nClass Description: The BackendService class provides methods to interact with a backend API for task management operations. It handles HTTP communication using cURL with proper error handling and response processing.\n\nAttributes:\n- None (Uses environment variables for configuration)\n\nMethods:\n- addTask(string $id) -> array - Sends a request to add a task with the given ID to the backend service. Returns an array with status and message.\n- restartTask(string $id) -> array - Sends a request to restart a task with the given ID on the backend service. Returns an array with status and message.\n- removeTask(string $id) -> array - Sends a request to remove a task with the given ID from the backend service. Returns an array with status and message.\n- setCurl(string $backendUrl, string $backendToken, string $operation, string $id) -> array - Internal method that handles the cURL request setup, execution, and response processing. Returns an array with status and message.",
    "Canonical_solution": "use Exception;\n\nclass BackendService\n{\n    public function addTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"addTask\", $id);\n    }\n\n    public function setCurl(string $backendUrl, string $backendToken, $operation, $id): array\n    {\n        if (!env('backend.enable_api')) return [\"status\" => true, \"msg\" => \"后端接口未启用\"];\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $backendUrl . \"/$operation\");\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\"token: $backendToken\"]);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, [\"id\" => $id]);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        $result = curl_exec($ch);\n        $error = curl_error($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        if (!$result || $error || $httpCode != 200)\n            return [\"status\" => false, \"msg\" => \"后端接口异常\"];\n        else {\n            try {\n                $result = json_decode($result, true);\n                if (!$result[\"status\"])\n                    return [\"status\" => false, \"msg\" => $result[\"msg\"]];\n                else\n                    return [\"status\" => true, \"msg\" => $result[\"msg\"]];\n            } catch (Exception $e) {\n                return [\"status\" => false, \"msg\" => \"后端接口异常\"];\n            }\n        }\n    }\n\n    public function restartTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"restartTask\", $id);\n    }\n\n    public function removeTask($id): array\n    {\n        $backendUrl = env('backend.api_url');\n        $backendToken = env('backend.token');\n        return $this->setCurl($backendUrl, $backendToken, \"removeTask\", $id);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $backendToken,\n            'Content-Type: application/json'\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            \"Authorization: Bearer $backendToken\",\n            \"Content-Type: application/json\"\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "<?php\n\nclass BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $url = \"$backendUrl/$operation/$id\";\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $backendToken,\n            'Content-Type: application/json'\n        ]);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "<?php\n\nclass BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $backendToken,\n            'Content-Type: application/json'\n        ]);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $backendToken,\n            'Content-Type: application/json'\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            \"Authorization: Bearer $backendToken\",\n            \"Content-Type: application/json\"\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "<?php\n\nclass BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            \"Authorization: Bearer $backendToken\",\n            \"Content-Type: application/json\"\n        ]);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            \"Authorization: Bearer $backendToken\",\n            \"Content-Type: application/json\"\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Authorization: Bearer ' . $backendToken,\n            'Content-Type: application/json'\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}",
      "class BackendService {\n    private function setCurl($backendUrl, $backendToken, $operation, $id) {\n        $ch = curl_init();\n        $url = \"$backendUrl/$operation/$id\";\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            \"Authorization: Bearer $backendToken\",\n            \"Content-Type: application/json\"\n        ]);\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode == 200) {\n            return ['status' => 'success', 'message' => json_decode($response, true)];\n        } else {\n            return ['status' => 'error', 'message' => \"HTTP Error: $httpCode\"];\n        }\n    }\n\n    public function addTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'add', $id);\n    }\n\n    public function restartTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'restart', $id);\n    }\n\n    public function removeTask($id) {\n        $backendUrl = getenv('BACKEND_URL');\n        $backendToken = getenv('BACKEND_TOKEN');\n        return $this->setCurl($backendUrl, $backendToken, 'remove', $id);\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a PHP function that makes HTTP requests using cURL with support for both HTTP and HTTPS protocols, including basic SSL verification handling and custom headers.\n\nFunction Description: The function should initialize a cURL session, configure it with the provided URL, set appropriate options for request handling (including SSL verification when needed), execute the request, handle potential errors, and return the response. The function should automatically detect HTTPS URLs and adjust SSL verification accordingly.\n\nInput: \n- $url (string): The target URL for the HTTP request (can be HTTP or HTTPS)\n\nOutput:\n- Returns the response body as a string if the request is successful\n- Returns false if the request fails (though error handling could be enhanced in a production environment)",
    "Canonical_solution": "function http_curl($url)\n{\n    $ssl = substr($url, 0, 8) == \"https://\" ? true : false;\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HEADER, 0);\n    if ($ssl) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    }\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\n        'Referer: '.$_SERVER['SERVER_NAME']\n    ));\n    $out = curl_exec($ch);\n    curl_close($ch);\n    return $out;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    // Check if the URL is HTTPS and set SSL options\n    if (stripos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    // Example of setting custom headers\n    $headers = [\n        'Content-Type: application/json',\n        'Accept: application/json'\n    ];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    // Check if the URL is HTTPS and set SSL options accordingly\n    if (stripos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    // Example of setting custom headers\n    $headers = [\n        'Content-Type: application/json',\n        'Accept: application/json'\n    ];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction makeHttpRequest($url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    }\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n    curl_close($ch);\n    return $response;\n}",
      "function makeHttpRequest($url) {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n\n    if (strpos($url, 'https://') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        curl_close($ch);\n        return false;\n    }\n\n    curl_close($ch);\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create a PHP class that interacts with Google Translate's unofficial API to translate text between languages.\n\nClass Description: The GoogleTranslate class provides functionality to translate text from a source language to a target language using Google's translation service. It handles the HTTP request/response cycle and processes the JSON response to extract the translated text.\n\nAttributes: None (This is a static utility class with no instance attributes)\n\nMethods:\n\nMethod1: translate(string $source, string $target, string $text) -> string - Translates the given text from the source language to the target language. Throws an exception if the input text exceeds 9000 characters.\n\nMethod2: requestTranslation(string $source, string $target, string $text) -> string - Makes an HTTP POST request to Google Translate's API with the specified parameters and returns the raw JSON response. Handles cURL initialization, option setting, execution, and cleanup.\n\nMethod3: getSentencesFromJSON(string $json) -> string - Parses the JSON response from Google Translate and extracts the translated sentences, concatenating them into a single string.",
    "Canonical_solution": "namespace Statickidz;\n\nclass GoogleTranslate\n{\n    public static function translate($source, $target, $text)\n    {\n        $response = self::requestTranslation($source, $target, $text);\n        $translation = self::getSentencesFromJSON($response);\n        return $translation;\n    }\n\n    protected static function requestTranslation($source, $target, $text)\n    {\n        $url = \"https://translate.google.com/translate_a/single?client=at&dt=t&dt=ld&dt=qca&dt=rm&dt=bd&dj=1&hl=es-ES&ie=UTF-8&oe=UTF-8&inputm=2&otf=2&iid=1dd3b944-fa62-4b55-b330-74909a99969e\";\n\n        $fields = array(\n            'sl' => urlencode($source),\n            'tl' => urlencode($target),\n            'q' => urlencode($text)\n        );\n\n        $max = 9000;\n        if(strlen($fields['q']) >= $max)\n            throw new \\Exception(\"Maximum number of characters exceeded: \".strlen($fields['q']).\"/$max\");\n        \n        $fields_string = \"\";\n        foreach ($fields as $key => $value) {\n            $fields_string .= $key . '=' . $value . '&';\n        }\n\n        rtrim($fields_string, '&');\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, count($fields));\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_ENCODING, 'UTF-8');\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'AndroidTranslate/5.3.0.RC02.130475354-53000263 5.1 phone TRANSLATE_OPM5_TEST_1');\n\n        $result = curl_exec($ch);\n        curl_close($ch);\n\n        return $result;\n    }\n\n    protected static function getSentencesFromJSON($json)\n    {\n        $sentencesArray = json_decode($json, true);\n        $sentences = \"\";\n\n        foreach ($sentencesArray[\"sentences\"] as $s) {\n            $sentences .= isset($s[\"trans\"]) ? $s[\"trans\"] : '';\n        }\n\n        return $sentences;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=$source&tl=$target&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters limit.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=\" . $source . \"&tl=\" . $target . \"&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $translatedText = '';\n        foreach ($data[0] as $sentence) {\n            $translatedText .= $sentence[0];\n        }\n        return $translatedText;\n    }\n}",
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters limit.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=$source&tl=$target&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "class GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Text exceeds maximum length of 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=\" . $source . \"&tl=\" . $target . \"&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=$source&tl=$target&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=$source&tl=$target&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "class GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=$source&tl=$target&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Text exceeds maximum length of 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl={$source}&tl={$target}&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "<?php\nclass GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=\" . $source . \"&tl=\" . $target . \"&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $data = json_decode($json, true);\n        $sentences = '';\n        foreach ($data[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}",
      "class GoogleTranslate {\n    public static function translate($source, $target, $text) {\n        if (strlen($text) > 9000) {\n            throw new Exception(\"Input text exceeds 9000 characters.\");\n        }\n        $json = self::requestTranslation($source, $target, $text);\n        return self::getSentencesFromJSON($json);\n    }\n\n    private static function requestTranslation($source, $target, $text) {\n        $url = \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=\" . $source . \"&tl=\" . $target . \"&dt=t&q=\" . urlencode($text);\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $response = curl_exec($ch);\n        if (curl_errno($ch)) {\n            throw new Exception('cURL error: ' . curl_error($ch));\n        }\n        curl_close($ch);\n        return $response;\n    }\n\n    private static function getSentencesFromJSON($json) {\n        $decoded = json_decode($json, true);\n        $sentences = '';\n        foreach ($decoded[0] as $sentence) {\n            $sentences .= $sentence[0];\n        }\n        return $sentences;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create a PHP class for handling HTTP requests using cURL with support for various HTTP methods, streaming, authentication, and proxy configuration.\n\nClass Description: BCS_RequestCore is a comprehensive HTTP client class that provides a flexible interface for making HTTP requests using PHP's cURL extension. It supports all major HTTP methods (GET, POST, PUT, DELETE, HEAD), handles authentication, proxy configuration, streaming uploads/downloads, and provides detailed response information.\n\nAttributes:\n\nrequest_url: [string] - The URL to send the request to\nrequest_headers: [array] - Associative array of request headers\nrequest_body: [string] - The request body content\nresponse: [string] - The complete response from the server\nresponse_headers: [array] - Parsed response headers\nresponse_body: [string] - The response body content\nresponse_code: [int] - HTTP response status code\nresponse_info: [array] - Additional response information from cURL\ncurl_handle: [resource] - The cURL handle resource\nmethod: [string] - HTTP method (GET, POST, PUT, DELETE, HEAD)\nproxy: [array|null] - Proxy configuration details\nusername: [string|null] - Username for authentication\npassword: [string|null] - Password for authentication\ncurlopts: [array|null] - Additional cURL options\ndebug_mode: [bool] - Whether to enable debug mode\nrequest_class: [string] - Class name for request handling\nresponse_class: [string] - Class name for response handling\nuseragent: [string] - User agent string\nread_file: [string|null] - File path for streaming upload\nread_stream: [resource|null] - Stream resource for reading\nread_stream_size: [int|null] - Size of the read stream\nread_stream_read: [int] - Bytes read from the stream\nwrite_file: [string|null] - File path for streaming download\nwrite_stream: [resource|null] - Stream resource for writing\nseek_position: [int|null] - Position to seek in the read stream\nregistered_streaming_read_callback: [callable|null] - Callback for streaming read\nregistered_streaming_write_callback: [callable|null] - Callback for streaming write\n\nMethods:\n\n__construct([string|null] $url, [array|null] $proxy, [array|null] $helpers) -> [self] - Initializes the request object with optional URL, proxy, and helper classes\n__destruct() -> [self] - Cleans up any open file handles\nset_credentials([string] $user, [string] $pass) -> [self] - Sets authentication credentials\nadd_header([string] $key, [string] $value) -> [self] - Adds a request header\nremove_header([string] $key) -> [self] - Removes a request header\nset_method([string] $method) -> [self] - Sets the HTTP method\nset_useragent([string] $ua) -> [self] - Sets the user agent string\nset_body([string] $body) -> [self] - Sets the request body\nset_request_url([string] $url) -> [self] - Sets the request URL\nset_curlopts([array] $curlopts) -> [self] - Sets additional cURL options\nset_read_stream_size([int] $size) -> [self] - Sets the read stream size\nset_read_stream([resource] $resource, [int|null] $size) -> [self] - Sets the read stream resource\nset_read_file([string] $location) -> [self] - Sets a file to read from\nset_write_stream([resource] $resource) -> [self] - Sets the write stream resource\nset_write_file([string] $location) -> [self] - Sets a file to write to\nset_proxy([string] $proxy) -> [self] - Configures proxy settings\nset_seek_position([int|null] $position) -> [self] - Sets the seek position for read stream\nregister_streaming_read_callback([callable] $callback) -> [self] - Registers a streaming read callback\nregister_streaming_write_callback([callable] $callback) -> [self] - Registers a streaming write callback\nstreaming_read_callback([resource] $curl_handle, [resource] $file_handle, [int] $length) -> [string] - Callback for reading from stream\nstreaming_write_callback([resource] $curl_handle, [string] $data) -> [int] - Callback for writing to stream\nprep_request() -> [resource] - Prepares and returns a cURL handle\nprocess_response([resource|null] $curl_handle, [string|null] $response) -> [mixed] - Processes the cURL response\nsend_request([bool] $parse) -> [mixed] - Sends the request and returns response\nisBaeEnv() -> [bool] - Checks if running in Baidu App Engine environment\nget_response_header([string|null] $header) -> [mixed] - Gets response header(s)\nget_response_body() -> [string] - Gets the response body\nget_response_code() -> [int] - Gets the response status code",
    "Canonical_solution": "namespace Think\\Upload\\Driver\\Bcs;\n\nclass BCS_RequestCore\n{\n    public $request_url;\n    public $request_headers;\n    public $request_body;\n    public $response;\n    public $response_headers;\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method;\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore/1.4.2';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    const HTTP_GET = 'GET';\n    const HTTP_POST = 'POST';\n    const HTTP_PUT = 'PUT';\n    const HTTP_DELETE = 'DELETE';\n    const HTTP_HEAD = 'HEAD';\n\n    public function __construct($url = null, $proxy = null, $helpers = null)\n    {\n        $this->request_url = $url;\n        $this->method = self::HTTP_GET;\n        $this->request_headers = array();\n        $this->request_body = '';\n\n        if (isset($helpers['request']) && !empty($helpers['request'])) {\n            $this->request_class = $helpers['request'];\n        }\n\n        if (isset($helpers['response']) && !empty($helpers['response'])) {\n            $this->response_class = $helpers['response'];\n        }\n\n        if ($proxy) {\n            $this->set_proxy($proxy);\n        }\n\n        return $this;\n    }\n\n    public function __destruct()\n    {\n        if (isset($this->read_file) && isset($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (isset($this->write_file) && isset($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n        return $this;\n    }\n\n    public function set_credentials($user, $pass)\n    {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value)\n    {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key)\n    {\n        if (isset($this->request_headers[$key])) {\n            unset($this->request_headers[$key]);\n        }\n        return $this;\n    }\n\n    public function set_method($method)\n    {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua)\n    {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body)\n    {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url)\n    {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts)\n    {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size)\n    {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null)\n    {\n        if (!isset($size) || $size < 0) {\n            $stats = fstat($resource);\n            if ($stats && $stats['size'] >= 0) {\n                $position = ftell($resource);\n                if ($position !== false && $position >= 0) {\n                    $size = $stats['size'] - $position;\n                }\n            }\n        }\n        $this->read_stream = $resource;\n        return $this->set_read_stream_size($size);\n    }\n\n    public function set_read_file($location)\n    {\n        $this->read_file = $location;\n        $read_file_handle = fopen($location, 'r');\n        return $this->set_read_stream($read_file_handle);\n    }\n\n    public function set_write_stream($resource)\n    {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location)\n    {\n        $this->write_file = $location;\n        $write_file_handle = fopen($location, 'w');\n        return $this->set_write_stream($write_file_handle);\n    }\n\n    public function set_proxy($proxy)\n    {\n        $proxy = parse_url($proxy);\n        $proxy['user'] = isset($proxy['user']) ? $proxy['user'] : null;\n        $proxy['pass'] = isset($proxy['pass']) ? $proxy['pass'] : null;\n        $proxy['port'] = isset($proxy['port']) ? $proxy['port'] : null;\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position)\n    {\n        $this->seek_position = isset($position) ? (integer) $position : null;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback)\n    {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback)\n    {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length)\n    {\n        if ($this->read_stream_read >= $this->read_stream_size) {\n            return '';\n        }\n\n        if ($this->read_stream_read == 0 && isset($this->seek_position) && $this->seek_position !== ftell($this->read_stream)) {\n            if (fseek($this->read_stream, $this->seek_position) !== 0) {\n                throw new BCS_RequestCore_Exception('The stream does not support seeking and is either not at the requested position or the position is unknown.');\n            }\n        }\n\n        $read = fread($this->read_stream, min($this->read_stream_size - $this->read_stream_read, $length));\n        $this->read_stream_read += strlen($read);\n        $out = $read === false ? '' : $read;\n\n        if ($this->registered_streaming_read_callback) {\n            call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $out);\n        }\n\n        return $out;\n    }\n\n    public function streaming_write_callback($curl_handle, $data)\n    {\n        $length = strlen($data);\n        $written_total = 0;\n        $written_last = 0;\n\n        while ($written_total < $length) {\n            $written_last = fwrite($this->write_stream, substr($data, $written_total));\n            if ($written_last === false) {\n                return $written_total;\n            }\n            $written_total += $written_last;\n        }\n\n        if ($this->registered_streaming_write_callback) {\n            call_user_func($this->registered_streaming_write_callback, $curl_handle, $written_total);\n        }\n\n        return $written_total;\n    }\n\n    public function prep_request()\n    {\n        $curl_handle = curl_init();\n        curl_setopt($curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_FILETIME, true);\n        curl_setopt($curl_handle, CURLOPT_FRESH_CONNECT, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, true);\n        curl_setopt($curl_handle, CURLOPT_CLOSEPOLICY, CURLCLOSEPOLICY_LEAST_RECENTLY_USED);\n        curl_setopt($curl_handle, CURLOPT_MAXREDIRS, 5);\n        curl_setopt($curl_handle, CURLOPT_HEADER, true);\n        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 5184000);\n        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 120);\n        curl_setopt($curl_handle, CURLOPT_NOSIGNAL, true);\n        curl_setopt($curl_handle, CURLOPT_REFERER, $this->request_url);\n        curl_setopt($curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($curl_handle, CURLOPT_READFUNCTION, array($this, 'streaming_read_callback'));\n\n        if ($this->debug_mode) {\n            curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($curl_handle, CURLOPT_HTTPPROXYTUNNEL, true);\n            $host = $this->proxy['host'];\n            $host .= ($this->proxy['port']) ? ':' . $this->proxy['port'] : '';\n            curl_setopt($curl_handle, CURLOPT_PROXY, $host);\n            if (isset($this->proxy['user']) && isset($this->proxy['pass'])) {\n                curl_setopt($curl_handle, CURLOPT_PROXYUSERPWD, $this->proxy['user'] . ':' . $this->proxy['pass']);\n            }\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n\n        if (extension_loaded('zlib')) {\n            curl_setopt($curl_handle, CURLOPT_ENCODING, '');\n        }\n\n        if (isset($this->request_headers) && count($this->request_headers)) {\n            $temp_headers = array();\n            foreach ($this->request_headers as $k => $v) {\n                $temp_headers[] = $k . ': ' . $v;\n            }\n            curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $temp_headers);\n        }\n\n        switch ($this->method) {\n            case self::HTTP_PUT:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n                if (isset($this->read_stream)) {\n                    if (!isset($this->read_stream_size) || $this->read_stream_size < 0) {\n                        throw new BCS_RequestCore_Exception('The stream size for the streaming upload cannot be determined.');\n                    }\n                    curl_setopt($curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n                    curl_setopt($curl_handle, CURLOPT_UPLOAD, true);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n            case self::HTTP_POST:\n                curl_setopt($curl_handle, CURLOPT_POST, true);\n                curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                break;\n            case self::HTTP_HEAD:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, self::HTTP_HEAD);\n                curl_setopt($curl_handle, CURLOPT_NOBODY, 1);\n                break;\n            default:\n                curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n                if (isset($this->write_stream)) {\n                    curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, array($this, 'streaming_write_callback'));\n                    curl_setopt($curl_handle, CURLOPT_HEADER, false);\n                } else {\n                    curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n                }\n                break;\n        }\n\n        if (isset($this->curlopts) && sizeof($this->curlopts) > 0) {\n            foreach ($this->curlopts as $k => $v) {\n                curl_setopt($curl_handle, $k, $v);\n            }\n        }\n\n        return $curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null)\n    {\n        if ($curl_handle && $response) {\n            $this->curl_handle = $curl_handle;\n            $this->response = $response;\n        }\n\n        if (is_resource($this->curl_handle)) {\n            $header_size = curl_getinfo($this->curl_handle, CURLINFO_HEADER_SIZE);\n            $this->response_headers = substr($this->response, 0, $header_size);\n            $this->response_body = substr($this->response, $header_size);\n            $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n            $this->response_info = curl_getinfo($this->curl_handle);\n\n            $this->response_headers = explode(\"\\r\\n\\r\\n\", trim($this->response_headers));\n            $this->response_headers = array_pop($this->response_headers);\n            $this->response_headers = explode(\"\\r\\n\", $this->response_headers);\n            array_shift($this->response_headers);\n\n            $header_assoc = array();\n            foreach ($this->response_headers as $header) {\n                $kv = explode(': ', $header);\n                $header_assoc[$kv[0]] = $kv[1];\n            }\n\n            $this->response_headers = $header_assoc;\n            $this->response_headers['_info'] = $this->response_info;\n            $this->response_headers['_info']['method'] = $this->method;\n\n            if ($curl_handle && $response) {\n                $class = '\\Think\\Upload\\Driver\\Bcs\\\\' . $this->response_class;\n                return new $class($this->response_headers, $this->response_body, $this->response_code, $this->curl_handle);\n            }\n        }\n\n        return false;\n    }\n\n    public function send_request($parse = false)\n    {\n        if (false === $this->isBaeEnv()) {\n            set_time_limit(0);\n        }\n\n        $curl_handle = $this->prep_request();\n        $this->response = curl_exec($curl_handle);\n\n        if ($this->response === false ||\n            ($this->method === self::HTTP_GET &&\n             curl_errno($curl_handle) === CURLE_PARTIAL_FILE)) {\n            throw new BCS_RequestCore_Exception('cURL resource: ' . (string) $curl_handle . '; cURL error: ' . curl_error($curl_handle) . ' (' . curl_errno($curl_handle) . ')');\n        }\n\n        $parsed_response = $this->process_response($curl_handle, $this->response);\n        curl_close($curl_handle);\n\n        if ($parse) {\n            return $parsed_response;\n        }\n\n        return $this->response;\n    }\n\n    private function isBaeEnv()\n    {\n        if (isset($_SERVER['HTTP_HOST'])) {\n            $host = $_SERVER['HTTP_HOST'];\n            $pos = strpos($host, '.');\n            if ($pos !== false) {\n                $substr = substr($host, $pos + 1);\n                if ($substr == 'duapp.com') {\n                    return true;\n                }\n            }\n        }\n        if (isset($_SERVER[\"HTTP_BAE_LOGID\"])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function get_response_header($header = null)\n    {\n        if ($header) {\n            return $this->response_headers[$header];\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body()\n    {\n        return $this->response_body;\n    }\n\n    public function get_response_code()\n    {\n        return $this->response_code;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            if ($this->seek_position !== null) {\n                fseek($this->read_stream, $this->seek_position);\n            }\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $opt => $value) {\n                curl_setopt($this->curl_handle, $opt, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_body = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        return $this;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, $response);\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this : $response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_FILE, $this->write_stream);\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_HTTPAUTH, CURLAUTH_ANY);\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n        if (!$response) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->write_stream) {\n            $this->response_body = '';\n        } else {\n            $this->response_body = $response;\n        }\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, $response);\n        }\n        curl_close($this->curl_handle);\n        return $response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $helper) {\n                $this->$helper();\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT' || $this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        $this->response_body = $response;\n        return $this;\n    }\n\n    public function send_request($parse = true) {\n        $curl_handle = $this->prep_request();\n        $response = curl_exec($curl_handle);\n        if ($parse) {\n            $this->process_response($curl_handle, $response);\n        }\n        curl_close($curl_handle);\n        return $parse ? $this : $response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[$header]) ? $this->response_headers[$header] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            foreach ($helpers as $key => $value) {\n                $this->$key = $value;\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        if ($this->seek_position !== null) {\n            fseek($file_handle, $this->seek_position);\n            $this->seek_position = null;\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        if ($this->response_info['http_code'] >= 200 && $this->response_info['http_code'] < 300) {\n            $this->response_body = $response;\n        } else {\n            $this->response_body = '';\n        }\n        return $this->response;\n    }\n\n    public function send_request($parse = true) {\n        $curl_handle = $this->prep_request();\n        $response = curl_exec($curl_handle);\n        if ($parse) {\n            $this->process_response($curl_handle, $response);\n        }\n        curl_close($curl_handle);\n        return $response;\n    }\n\n    public function isBaeEnv() {\n        return defined('BAE_ENV_APPID');\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        $this->response_body = $this->response;\n        if ($parse) {\n            $this->process_response($this->curl_handle, '');\n        }\n        curl_close($this->curl_handle);\n        return $this->response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['BAE_ENV_APPID']);\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            $this->response_headers[$name] .= ',' . trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function process_response($curl_handle, $response) {\n        $this->response = $response;\n        $this->response_body = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        return $this;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = curl_exec($this->curl_handle);\n        if ($parse) {\n            $this->process_response($this->curl_handle, $response);\n        }\n        curl_close($this->curl_handle);\n        return $response;\n    }\n\n    public function isBaeEnv() {\n        return defined('BAE_ENV_APPID');\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url = '';\n    public $request_headers = [];\n    public $request_body = '';\n    public $response = '';\n    public $response_headers = [];\n    public $response_body = '';\n    public $response_code = 0;\n    public $response_info = [];\n    public $curl_handle = null;\n    public $method = 'GET';\n    public $proxy = null;\n    public $username = null;\n    public $password = null;\n    public $curlopts = null;\n    public $debug_mode = false;\n    public $request_class = 'BCS_RequestCore';\n    public $response_class = 'BCS_ResponseCore';\n    public $useragent = 'BCS_RequestCore';\n    public $read_file = null;\n    public $read_stream = null;\n    public $read_stream_size = null;\n    public $read_stream_read = 0;\n    public $write_file = null;\n    public $write_stream = null;\n    public $seek_position = null;\n    public $registered_streaming_read_callback = null;\n    public $registered_streaming_write_callback = null;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        if ($url !== null) {\n            $this->set_request_url($url);\n        }\n        if ($proxy !== null) {\n            $this->set_proxy($proxy);\n        }\n        if ($helpers !== null) {\n            foreach ($helpers as $helper) {\n                if (isset($helper['name']) && isset($helper['class'])) {\n                    $this->{$helper['name']} = $helper['class'];\n                }\n            }\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback !== null) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback !== null) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        return fwrite($this->write_stream, $data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method === 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method === 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method === 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if (!empty($this->request_headers)) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username !== null && $this->password !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        }\n        if ($this->proxy !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream !== null) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts !== null) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->response_body = $this->response;\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function isBaeEnv() {\n        return getenv('BAE_ENV_APPID') !== false;\n    }\n\n    public function get_response_header($header = null) {\n        if ($header === null) {\n            return $this->response_headers;\n        }\n        return isset($this->response_headers[strtolower($header)]) ? $this->response_headers[strtolower($header)] : null;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) {\n            fseek($this->read_stream, $position);\n        }\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'process_response']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->method !== 'GET') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n        }\n        if ($this->request_body) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        if ($this->curlopts) {\n            foreach ($this->curlopts as $option => $value) {\n                curl_setopt($this->curl_handle, $option, $value);\n            }\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        if (!isset($this->response_headers[$name])) {\n            $this->response_headers[$name] = trim($header[1]);\n        } else {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = trim($header[1]);\n        }\n        return $len;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $this->response = curl_exec($this->curl_handle);\n        $this->response_code = curl_getinfo($this->curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($this->curl_handle);\n        if ($parse) {\n            $this->response_body = $this->response;\n        }\n        curl_close($this->curl_handle);\n        return $parse ? $this->response_body : $this->response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[strtolower($header)] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n}",
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) fclose($this->read_stream);\n        if (is_resource($this->write_stream)) fclose($this->write_stream);\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        if (is_resource($this->read_stream)) fseek($this->read_stream, $position);\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        if ($this->curlopts) curl_setopt_array($this->curl_handle, $this->curlopts);\n        if ($this->proxy) curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        if ($this->username && $this->password) curl_setopt($this->curl_handle, CURLOPT_USERPWD, $this->username . ':' . $this->password);\n        if ($this->method == 'POST') {\n            curl_setopt($this->curl_handle, CURLOPT_POST, true);\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'PUT') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        } elseif ($this->method == 'DELETE') {\n            curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        } elseif ($this->method == 'HEAD') {\n            curl_setopt($this->curl_handle, CURLOPT_NOBODY, true);\n        }\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n        }\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) $curl_handle = $this->curl_handle;\n        if (!$response) $response = curl_exec($curl_handle);\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        curl_close($curl_handle);\n        return $this->response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n        if ($parse) {\n            $this->parse_response();\n        }\n        return $this->response;\n    }\n\n    public function isBaeEnv() {\n        return isset($_SERVER['HTTP_BAE_ENV_APPID']);\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n\n    private function parse_header($ch, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) // ignore invalid headers\n            return $len;\n        $this->response_headers[strtolower(trim($header[0]))][] = trim($header[1]);\n        return $len;\n    }\n\n    private function parse_response() {\n        list($headers, $this->response_body) = explode(\"\\r\\n\\r\\n\", $this->response, 2);\n        $this->response_headers = [];\n        $lines = explode(\"\\r\\n\", $headers);\n        foreach ($lines as $line) {\n            if (strpos($line, ':') === false) continue;\n            list($key, $value) = explode(':', $line, 2);\n            $this->response_headers[strtolower(trim($key))][] = trim($value);\n        }\n    }\n}"
    ],
    "unmatched_results": [
      "class BCS_RequestCore {\n    public $request_url;\n    public $request_headers = [];\n    public $request_body;\n    public $response;\n    public $response_headers = [];\n    public $response_body;\n    public $response_code;\n    public $response_info;\n    public $curl_handle;\n    public $method = 'GET';\n    public $proxy;\n    public $username;\n    public $password;\n    public $curlopts;\n    public $debug_mode = false;\n    public $request_class;\n    public $response_class;\n    public $useragent = 'BCS_RequestCore/1.0';\n    public $read_file;\n    public $read_stream;\n    public $read_stream_size;\n    public $read_stream_read = 0;\n    public $write_file;\n    public $write_stream;\n    public $seek_position;\n    public $registered_streaming_read_callback;\n    public $registered_streaming_write_callback;\n\n    public function __construct($url = null, $proxy = null, $helpers = null) {\n        $this->request_url = $url;\n        $this->proxy = $proxy;\n        if ($helpers) {\n            $this->request_class = $helpers['request'] ?? null;\n            $this->response_class = $helpers['response'] ?? null;\n        }\n    }\n\n    public function __destruct() {\n        if (is_resource($this->read_stream)) {\n            fclose($this->read_stream);\n        }\n        if (is_resource($this->write_stream)) {\n            fclose($this->write_stream);\n        }\n    }\n\n    public function set_credentials($user, $pass) {\n        $this->username = $user;\n        $this->password = $pass;\n        return $this;\n    }\n\n    public function add_header($key, $value) {\n        $this->request_headers[$key] = $value;\n        return $this;\n    }\n\n    public function remove_header($key) {\n        unset($this->request_headers[$key]);\n        return $this;\n    }\n\n    public function set_method($method) {\n        $this->method = strtoupper($method);\n        return $this;\n    }\n\n    public function set_useragent($ua) {\n        $this->useragent = $ua;\n        return $this;\n    }\n\n    public function set_body($body) {\n        $this->request_body = $body;\n        return $this;\n    }\n\n    public function set_request_url($url) {\n        $this->request_url = $url;\n        return $this;\n    }\n\n    public function set_curlopts($curlopts) {\n        $this->curlopts = $curlopts;\n        return $this;\n    }\n\n    public function set_read_stream_size($size) {\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_stream($resource, $size = null) {\n        $this->read_stream = $resource;\n        $this->read_stream_size = $size;\n        return $this;\n    }\n\n    public function set_read_file($location) {\n        $this->read_file = $location;\n        $this->read_stream = fopen($location, 'r');\n        $this->read_stream_size = filesize($location);\n        return $this;\n    }\n\n    public function set_write_stream($resource) {\n        $this->write_stream = $resource;\n        return $this;\n    }\n\n    public function set_write_file($location) {\n        $this->write_file = $location;\n        $this->write_stream = fopen($location, 'w');\n        return $this;\n    }\n\n    public function set_proxy($proxy) {\n        $this->proxy = $proxy;\n        return $this;\n    }\n\n    public function set_seek_position($position) {\n        $this->seek_position = $position;\n        return $this;\n    }\n\n    public function register_streaming_read_callback($callback) {\n        $this->registered_streaming_read_callback = $callback;\n        return $this;\n    }\n\n    public function register_streaming_write_callback($callback) {\n        $this->registered_streaming_write_callback = $callback;\n        return $this;\n    }\n\n    public function streaming_read_callback($curl_handle, $file_handle, $length) {\n        if ($this->registered_streaming_read_callback) {\n            return call_user_func($this->registered_streaming_read_callback, $curl_handle, $file_handle, $length);\n        }\n        $data = fread($file_handle, $length);\n        $this->read_stream_read += strlen($data);\n        return $data;\n    }\n\n    public function streaming_write_callback($curl_handle, $data) {\n        if ($this->registered_streaming_write_callback) {\n            return call_user_func($this->registered_streaming_write_callback, $curl_handle, $data);\n        }\n        fwrite($this->write_stream, $data);\n        return strlen($data);\n    }\n\n    public function prep_request() {\n        $this->curl_handle = curl_init();\n        curl_setopt($this->curl_handle, CURLOPT_URL, $this->request_url);\n        curl_setopt($this->curl_handle, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($this->curl_handle, CURLOPT_HEADERFUNCTION, [$this, 'parse_header']);\n        curl_setopt($this->curl_handle, CURLOPT_USERAGENT, $this->useragent);\n        curl_setopt($this->curl_handle, CURLOPT_CUSTOMREQUEST, $this->method);\n\n        if ($this->request_body && in_array($this->method, ['POST', 'PUT', 'PATCH'])) {\n            curl_setopt($this->curl_handle, CURLOPT_POSTFIELDS, $this->request_body);\n        }\n\n        if ($this->request_headers) {\n            $headers = [];\n            foreach ($this->request_headers as $key => $value) {\n                $headers[] = \"$key: $value\";\n            }\n            curl_setopt($this->curl_handle, CURLOPT_HTTPHEADER, $headers);\n        }\n\n        if ($this->proxy) {\n            curl_setopt($this->curl_handle, CURLOPT_PROXY, $this->proxy);\n        }\n\n        if ($this->username && $this->password) {\n            curl_setopt($this->curl_handle, CURLOPT_USERPWD, \"$this->username:$this->password\");\n        }\n\n        if ($this->read_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_UPLOAD, true);\n            curl_setopt($this->curl_handle, CURLOPT_INFILE, $this->read_stream);\n            if ($this->read_stream_size) {\n                curl_setopt($this->curl_handle, CURLOPT_INFILESIZE, $this->read_stream_size);\n            }\n            curl_setopt($this->curl_handle, CURLOPT_READFUNCTION, [$this, 'streaming_read_callback']);\n        }\n\n        if ($this->write_stream) {\n            curl_setopt($this->curl_handle, CURLOPT_WRITEFUNCTION, [$this, 'streaming_write_callback']);\n        }\n\n        if ($this->curlopts) {\n            curl_setopt_array($this->curl_handle, $this->curlopts);\n        }\n\n        return $this->curl_handle;\n    }\n\n    public function process_response($curl_handle = null, $response = null) {\n        if (!$curl_handle) {\n            $curl_handle = $this->curl_handle;\n        }\n        if (!$response) {\n            $response = curl_exec($curl_handle);\n        }\n        $this->response = $response;\n        $this->response_code = curl_getinfo($curl_handle, CURLINFO_HTTP_CODE);\n        $this->response_info = curl_getinfo($curl_handle);\n        return $response;\n    }\n\n    public function send_request($parse = true) {\n        $this->prep_request();\n        $response = $this->process_response();\n        if ($parse) {\n            $this->parse_response();\n        }\n        return $this->response;\n    }\n\n    public function isBaeEnv() {\n        return defined('BAE_ENV_APPID');\n    }\n\n    public function get_response_header($header = null) {\n        if ($header) {\n            return $this->response_headers[$header] ?? null;\n        }\n        return $this->response_headers;\n    }\n\n    public function get_response_body() {\n        return $this->response_body;\n    }\n\n    public function get_response_code() {\n        return $this->response_code;\n    }\n\n    private function parse_header($curl_handle, $header) {\n        $len = strlen($header);\n        $header = explode(':', $header, 2);\n        if (count($header) < 2) {\n            return $len;\n        }\n        $name = strtolower(trim($header[0]));\n        $value = trim($header[1]);\n        if (isset($this->response_headers[$name])) {\n            if (!is_array($this->response_headers[$name])) {\n                $this->response_headers[$name] = [$this->response_headers[$name]];\n            }\n            $this->response_headers[$name][] = $value;\n        } else {\n            $this->response_headers[$name] = $value;\n        }\n        return $len;\n    }\n\n    private function parse_response() {\n        $this->response_body = $this->response;\n    }\n}"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's API to process refund requests, including request signing and HTTP communication using cURL.\n\nClass Description: The AlipayService class provides functionality to prepare and send refund requests to Alipay's payment gateway. It handles request signing, parameter encoding, and HTTP communication while maintaining necessary configuration parameters.\n\nAttributes:\n- appId: string - Alipay application ID\n- returnUrl: string - URL for returning after payment\n- notifyUrl: string - URL for payment notifications\n- charset: string - Character encoding (default: 'utf-8')\n- rsaPrivateKey: string - RSA private key for request signing\n- outTradeNo: string - Merchant's unique order number\n- tradeNo: string - Alipay's transaction number\n- refundAmount: string - Amount to be refunded\n\nMethods:\n- __construct() -> void - Initializes the class with default charset\n- setAppid(string $appid) -> void - Sets the Alipay application ID\n- setRsaPrivateKey(string $saPrivateKey) -> void - Sets the RSA private key\n- setOutTradeNo(string $outTradeNo) -> void - Sets the merchant's order number\n- settradeNo(string $tradeNo) -> void - Sets Alipay's transaction number\n- setRefundAmount(string $refundAmount) -> void - Sets the refund amount\n- doRefund() -> array - Processes refund request and returns response\n- generateSign(array $params, string $signType = \"RSA\") -> string - Generates request signature\n- sign(string $data, string $signType = \"RSA\") -> string - Signs the request data\n- checkEmpty(mixed $value) -> bool - Checks if value is empty\n- getSignContent(array $params) -> string - Prepares string for signing\n- characet(string $data, string $targetCharset) -> string - Handles character encoding conversion\n- curlPost(string $url = '', mixed $postData = '', array $options = array()) -> string - Executes cURL POST request",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $returnUrl;\n    protected $notifyUrl;\n    protected $charset;\n    protected $rsaPrivateKey;\n    protected $outTradeNo;\n    protected $tradeNo;\n    protected $refundAmount;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n    public function setRsaPrivateKey($saPrivateKey)\n    {\n        $this->rsaPrivateKey = $saPrivateKey;\n    }\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n    public function settradeNo($tradeNo)\n    {\n        $this->tradeNo = $tradeNo;\n    }\n    public function setRefundAmount($refundAmount)\n    {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund()\n    {\n        $requestConfigs = array(\n            'trade_no'=>$this->tradeNo,\n            'out_trade_no'=>$this->outTradeNo,\n            'refund_amount'=>$this->refundAmount,\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        $resultArr = json_decode($result,true);\n        return $resultArr;\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        return $this->sign($this->getSignContent($params), $signType);\n    }\n\n    protected function sign($data, $signType = \"RSA\") {\n        $priKey=$this->rsaPrivateKey;\n        $res = \"-----BEGIN RSA PRIVATE KEY-----\\n\" .\n            wordwrap($priKey, 64, \"\\n\", true) .\n            \"\\n-----END RSA PRIVATE KEY-----\";\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        if (\"RSA2\" == $signType) {\n            openssl_sign($data, $sign, $res, version_compare(PHP_VERSION,'5.4.0', '<') ? SHA256 : OPENSSL_ALGO_SHA256);\n        } else {\n            openssl_sign($data, $sign, $res);\n        }\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    protected function checkEmpty($value) {\n        if (!isset($value))\n            return true;\n        if ($value === null)\n            return true;\n        if (trim($value) === \"\")\n            return true;\n\n        return false;\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $v = $this->characet($v, $this->charset);\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = $this->charset;\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        $i = 0;\n        foreach ($params as $k => $v) {\n            if (false === $this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                if ($i == 0) {\n                    $stringToBeSigned .= \"$k\" . \"=\" . \"$v\";\n                } else {\n                    $stringToBeSigned .= \"&\" . \"$k\" . \"=\" . \"$v\";\n                }\n                $i++;\n            }\n        }\n        unset ($k, $v);\n        return $stringToBeSigned;\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        $stringToBeSigned = substr($stringToBeSigned, 0, -1);\n        return $stringToBeSigned;\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ], JSON_UNESCAPED_UNICODE),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = '';\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Timeout time\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ], JSON_UNESCAPED_UNICODE),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            file_put_contents(\"test.txt\", $data . \"\\r\\n\", FILE_APPEND);\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType != $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ], JSON_UNESCAPED_UNICODE),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        $signContent = $this->getSignContent($params);\n        return $this->sign($signContent, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        ksort($params);\n        $stringToBeSigned = \"\";\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // 设置超时时间\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ], JSON_UNESCAPED_UNICODE),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        ($res) or die('您使用的私钥格式错误，请检查RSA私钥配置');\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = \"\";\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30); // 设置超时时间\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ], JSON_UNESCAPED_UNICODE),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = mb_detect_encoding($data, array('UTF-8', 'GBK', 'LATIN1', 'BIG5'));\n            if ($fileType !== $targetCharset) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', $params), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return trim($stringToBeSigned, \"&\");\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        return substr($stringToBeSigned, 0, -1);\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data) && $this->charset !== $targetCharset) {\n            $data = mb_convert_encoding($data, $targetCharset, $this->charset);\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $returnUrl;\n    private $notifyUrl;\n    private $charset = 'utf-8';\n    private $rsaPrivateKey;\n    private $outTradeNo;\n    private $tradeNo;\n    private $refundAmount;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function settradeNo($tradeNo) {\n        $this->tradeNo = $tradeNo;\n    }\n\n    public function setRefundAmount($refundAmount) {\n        $this->refundAmount = $refundAmount;\n    }\n\n    public function doRefund() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.refund',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'biz_content' => json_encode([\n                'trade_no' => $this->tradeNo,\n                'out_trade_no' => $this->outTradeNo,\n                'refund_amount' => $this->refundAmount,\n            ], JSON_UNESCAPED_UNICODE),\n        ];\n\n        $params['sign'] = $this->generateSign($params);\n\n        return json_decode($this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params)), true);\n    }\n\n    public function generateSign($params, $signType = \"RSA2\") {\n        ksort($params);\n        $stringToBeSigned = $this->getSignContent($params);\n        return $this->sign($stringToBeSigned, $signType);\n    }\n\n    public function sign($data, $signType = \"RSA2\") {\n        $res = openssl_get_privatekey($this->rsaPrivateKey);\n        openssl_sign($data, $sign, $res, OPENSSL_ALGO_SHA256);\n        openssl_free_key($res);\n        $sign = base64_encode($sign);\n        return $sign;\n    }\n\n    public function checkEmpty($value) {\n        return empty($value);\n    }\n\n    public function getSignContent($params) {\n        $stringToBeSigned = '';\n        ksort($params);\n        foreach ($params as $k => $v) {\n            if (!$this->checkEmpty($v) && \"@\" != substr($v, 0, 1)) {\n                $stringToBeSigned .= $k . \"=\" . $v . \"&\";\n            }\n        }\n        $stringToBeSigned = rtrim($stringToBeSigned, \"&\");\n        return $stringToBeSigned;\n    }\n\n    public function characet($data, $targetCharset) {\n        if (!empty($data)) {\n            $fileType = 'UTF-8';\n            if (strcasecmp($fileType, $targetCharset) != 0) {\n                $data = mb_convert_encoding($data, $targetCharset, $fileType);\n            }\n        }\n        return $data;\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array()) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a PHP function that performs HTTP requests using cURL, supporting both GET and POST methods, with optional SSL verification and file upload safety checks.\n\nFunction Description: The function makes HTTP requests to a specified URL, with optional POST data. It handles SSL verification automatically based on the URL scheme (https/http) and includes safety checks for file uploads. The function returns the raw response from the server.\n\nInput:\n- $url: string - The target URL for the HTTP request\n- $data: mixed (optional) - Data to be sent with POST request (default: empty string)\n\nOutput:\n- string - The raw response data from the server\n- false - If the cURL request fails (though error handling is minimal in this implementation)",
    "Canonical_solution": "function curl($url, $data = '')\n{\n    $ch = curl_init();\n    if (class_exists('\\CURLFile')) {\n        curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);\n    } else {\n        if (defined('CURLOPT_SAFE_UPLOAD')) {\n            curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false);\n        }\n    }\n    \n    preg_match('/https:\\/\\//', $url) ? $ssl = TRUE : $ssl = FALSE;\n    if ($ssl) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    }\n    \n    curl_setopt($ch, CURLOPT_URL, $url);\n    if (!empty($data)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\");\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    \n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    $d = curl_exec($ch);\n    curl_close($ch);\n    return $d;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    if ($data !== '') {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    if (is_array($data)) {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function http_request($url, $data = '') {\n    $ch = curl_init();\n    if (is_array($data)) {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction performHttpRequest($url, $data = '') {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    if (!empty($data)) {\n        curl_setopt($ch, CURLOPT_POST, true);\n        if (is_array($data)) {\n            foreach ($data as &$value) {\n                if (is_resource($value) && get_resource_type($value) === 'stream') {\n                    $value = '@' . stream_get_meta_data($value)['uri'];\n                }\n            }\n        }\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n\n    $response = curl_exec($ch);\n    curl_close($ch);\n\n    return $response;\n}",
      "function http_request($url, $data = '') {\n    $ch = curl_init();\n    if (is_array($data)) {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    if (!empty($data)) {\n        curl_setopt($ch, CURLOPT_POST, true);\n        if (is_array($data)) {\n            foreach ($data as $key => &$value) {\n                if (is_resource($value) && get_resource_type($value) === 'stream') {\n                    $filename = stream_get_meta_data($value)['uri'];\n                    $value = new CURLFile(realpath($filename));\n                }\n            }\n            unset($value);\n        }\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    if ($data !== '') {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    if (is_array($data)) {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "function httpRequest($url, $data = '') {\n    $ch = curl_init();\n    if (is_array($data)) {\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n    $response = curl_exec($ch);\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction performHttpRequest($url, $data = '') {\n    $ch = curl_init();\n    if (!$ch) {\n        return false;\n    }\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    if (is_array($data)) {\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n    }\n\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    } else {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    }\n\n    $response = curl_exec($ch);\n    curl_close($ch);\n\n    return $response;\n}\n?>"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Implement a PHP class for interacting with Alipay's payment gateway, specifically for processing bar code payments. The class should handle request configuration, signature generation, and HTTP communication with Alipay's API.\n\nClass Description: The AlipayService class provides methods to configure and execute payments through Alipay's payment gateway. It handles parameter setting, request signing, and communication with Alipay's API endpoint.\n\nAttributes:\n- appId: [string] - The application ID provided by Alipay\n- charset: [string] - Character encoding (default: 'utf-8')\n- notifyUrl: [string] - URL for payment notifications\n- rsaPrivateKey: [string] - RSA private key for signing requests\n- totalFee: [string] - Total payment amount\n- outTradeNo: [string] - Merchant's unique order number\n- orderName: [string] - Description of the order\n- authCode: [string] - Customer's payment authorization code\n\nMethods:\n- __construct() -> [void] - Initializes the class with default charset\n- setAppid($appid) -> [void] - Sets the Alipay application ID\n- setNotifyUrl($notifyUrl) -> [void] - Sets the notification URL\n- setRsaPrivateKey($rsaPrivateKey) -> [void] - Sets the RSA private key\n- setTotalFee($payAmount) -> [void] - Sets the payment amount\n- setOutTradeNo($outTradeNo) -> [void] - Sets the merchant order number\n- setOrderName($orderName) -> [void] - Sets the order description\n- setAuthCode($authCode) -> [void] - Sets the customer's payment auth code\n- doPay() -> [array] - Executes the payment request and returns the response\n- curlPost($url, $postData, $options) -> [string] - Sends a POST request to the specified URL (private method)\n- generateSign($params, $signType) -> [string] - Generates the request signature (private method, implementation not shown)",
    "Canonical_solution": "class AlipayService\n{\n    protected $appId;\n    protected $charset;\n    protected $notifyUrl;\n    protected $rsaPrivateKey;\n    protected $totalFee;\n    protected $outTradeNo;\n    protected $orderName;\n    protected $authCode;\n\n    public function __construct()\n    {\n        $this->charset = 'utf-8';\n    }\n\n    public function setAppid($appid)\n    {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl)\n    {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey)\n    {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount)\n    {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo)\n    {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName)\n    {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode)\n    {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay()\n    {\n        $requestConfigs = array(\n            'out_trade_no'=>$this->outTradeNo,\n            'scene'=>'bar_code',\n            'auth_code'=>$this->authCode,\n            'total_amount'=>$this->totalFee,\n            'subject'=>$this->orderName,\n            'store_id'=>'DEDEMAO_001',\n            'timeout_express'=>'2m',\n        );\n        $commonConfigs = array(\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.pay',\n            'format' => 'JSON',\n            'charset'=>$this->charset,\n            'sign_type'=>'RSA2',\n            'timestamp'=>date('Y-m-d H:i:s'),\n            'version'=>'1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content'=>json_encode($requestConfigs),\n        );\n        $commonConfigs[\"sign\"] = $this->generateSign($commonConfigs, $commonConfigs['sign_type']);\n        $result = $this->curlPost('https://openapi.alipay.com/gateway.do?charset='.$this->charset,$commonConfigs);\n        return json_decode($result,true);\n    }\n\n    public function curlPost($url = '', $postData = '', $options = array())\n    {\n        if (is_array($postData)) {\n            $postData = http_build_query($postData);\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scanpay.precreate',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        $response = $this->curlPost($url, http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            foreach ($options as $key => $value) {\n                curl_setopt($ch, $key, $value);\n            }\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scan.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params), []), true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scan.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        $response = $this->curlPost($url, http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic\n        // This is a placeholder for the actual implementation\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.barcode.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n                'product_code' => 'FACE_TO_FACE_PAYMENT'\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scan.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee\n            ])\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        return json_decode($this->curlPost($url, http_build_query($params), []), true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scan.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n        $url = 'https://openapi.alipay.com/gateway.do';\n        $response = $this->curlPost($url, http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        foreach ($options as $key => $value) {\n            curl_setopt($ch, $key, $value);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic\n        // This is a placeholder for the actual signing process\n        return '';\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scanpay.precreate',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scan.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic\n        // This is a placeholder for the actual implementation\n        return '';\n    }\n}",
      "class AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scanpay.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $url = 'https://openapi.alipay.com/gateway.do';\n        $response = $this->curlPost($url, http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation goes here\n        return '';\n    }\n}",
      "<?php\nclass AlipayService {\n    private $appId;\n    private $charset = 'utf-8';\n    private $notifyUrl;\n    private $rsaPrivateKey;\n    private $totalFee;\n    private $outTradeNo;\n    private $orderName;\n    private $authCode;\n\n    public function __construct() {}\n\n    public function setAppid($appid) {\n        $this->appId = $appid;\n    }\n\n    public function setNotifyUrl($notifyUrl) {\n        $this->notifyUrl = $notifyUrl;\n    }\n\n    public function setRsaPrivateKey($rsaPrivateKey) {\n        $this->rsaPrivateKey = $rsaPrivateKey;\n    }\n\n    public function setTotalFee($payAmount) {\n        $this->totalFee = $payAmount;\n    }\n\n    public function setOutTradeNo($outTradeNo) {\n        $this->outTradeNo = $outTradeNo;\n    }\n\n    public function setOrderName($orderName) {\n        $this->orderName = $orderName;\n    }\n\n    public function setAuthCode($authCode) {\n        $this->authCode = $authCode;\n    }\n\n    public function doPay() {\n        $params = [\n            'app_id' => $this->appId,\n            'method' => 'alipay.trade.scan.pay',\n            'format' => 'JSON',\n            'charset' => $this->charset,\n            'sign_type' => 'RSA2',\n            'timestamp' => date('Y-m-d H:i:s'),\n            'version' => '1.0',\n            'notify_url' => $this->notifyUrl,\n            'biz_content' => json_encode([\n                'out_trade_no' => $this->outTradeNo,\n                'scene' => 'bar_code',\n                'auth_code' => $this->authCode,\n                'subject' => $this->orderName,\n                'total_amount' => $this->totalFee,\n            ]),\n        ];\n\n        $params['sign'] = $this->generateSign($params, 'RSA2');\n\n        $response = $this->curlPost('https://openapi.alipay.com/gateway.do', http_build_query($params), []);\n        return json_decode($response, true);\n    }\n\n    private function curlPost($url, $postData, $options) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        if (!empty($options)) {\n            curl_setopt_array($ch, $options);\n        }\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n\n    private function generateSign($params, $signType) {\n        // Implementation of signature generation logic here\n        return '';\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create a PHP function that makes an HTTP POST request to the OpenAI API's image generation endpoint using cURL, with proper headers, timeout settings, and error handling.\n\nFunction Description: The function sends a POST request to the OpenAI API to generate images based on the provided input data. It sets up necessary headers including authentication, configures cURL options for secure communication (with SSL verification disabled for testing purposes), handles redirects, and manages timeout settings. The function returns the raw API response.\n\nInput:\n- $postData: [string] - JSON-encoded string containing the image generation parameters\n- $OPENAI_API_KEY: [string] - The API key for authenticating with OpenAI's service\n\nOutput:\n- [string] - The raw response data from the API call, which should be a JSON string containing either the generated image information or an error message",
    "Canonical_solution": "function call_openai_api($postData, $OPENAI_API_KEY)\n{\n    $headers = [\n        'Accept: application/json',\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/images/generations');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);\n    curl_setopt($ch, CURLOPT_MAXREDIRS, 3);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_AUTOREFERER, true);\n\n    $responsedata = curl_exec($ch);\n    curl_close($ch);\n\n    return $responsedata;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 132,
    "matched_results": [
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $headers = [\n        \"Content-Type: application/json\",\n        \"Authorization: Bearer \" . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $response = 'Error:' . curl_error($ch);\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $headers = [\n        \"Content-Type: application/json\",\n        \"Authorization: Bearer \" . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $response = 'Error:' . curl_error($ch);\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // For testing purposes only\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return \"cURL Error: \" . $error;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n\n    if (curl_errno($ch)) {\n        $response = 'cURL error: ' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n\n    if (curl_errno($ch)) {\n        $response = 'cURL error: ' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $headers = [\n        \"Content-Type: application/json\",\n        \"Authorization: Bearer \" . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Set timeout to 30 seconds\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return \"cURL Error: \" . $error;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return \"cURL Error: \" . $error;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "<?php\nfunction generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, [\n        'Content-Type: application/json',\n        'Authorization: Bearer ' . $OPENAI_API_KEY\n    ]);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // For testing purposes only\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        $error = curl_error($ch);\n        curl_close($ch);\n        return \"cURL Error: \" . $error;\n    }\n\n    curl_close($ch);\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $headers = [\n        \"Content-Type: application/json\",\n        \"Authorization: Bearer \" . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Set timeout to 30 seconds\n\n    $response = curl_exec($ch);\n    if (curl_errno($ch)) {\n        $response = 'Error:' . curl_error($ch);\n    }\n    curl_close($ch);\n\n    return $response;\n}",
      "function generateImage($postData, $OPENAI_API_KEY) {\n    $url = \"https://api.openai.com/v1/images/generations\";\n    $headers = [\n        \"Content-Type: application/json\",\n        \"Authorization: Bearer \" . $OPENAI_API_KEY\n    ];\n\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing\n    curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Set timeout to 30 seconds\n\n    $response = curl_exec($ch);\n\n    if (curl_errno($ch)) {\n        $response = 'Error:' . curl_error($ch);\n    }\n\n    curl_close($ch);\n\n    return $response;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  }
]