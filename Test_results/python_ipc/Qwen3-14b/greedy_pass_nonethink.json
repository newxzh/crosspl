[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a Python class that implements an ActiveMQ consumer using the STOMP protocol to listen for messages from a specified queue or topic in an Artemis message broker.\n\nClass Description: The MessageArtemisExtension class provides functionality to establish a connection with an Artemis message broker and subscribe to a specified destination (queue/topic) to receive messages. It maintains connection objects and handles message listening through a custom listener.\n\nAttributes:\nconns: List[stomp.Connection] - Class attribute that stores all connection objects created by instances of this class\nconn: stomp.Connection - Instance attribute representing the current connection to the message broker\n\nMethods:\nlisten_queue(profile: dict) -> None - Establishes a connection to the Artemis broker and subscribes to the specified destination\n    Input:\n        profile: dict - A dictionary containing connection parameters with the following optional keys:\n            host: str - Broker host address (default: \"127.0.0.1\")\n            port: int - Broker port number (default: 61616)\n            username: str - Authentication username (default: \"artemis\")\n            password: str - Authentication password (default: \"artemis\")\n            destination: str - Queue/topic name to subscribe to (default: \"arkid\")\n    Output: None - The method establishes the connection and subscription but doesn't return any value",
    "Canonical_solution": "import stomp\nfrom typing import List\n\nclass MessageArtemisExtension:\n    conns = []\n    \n    def __init__(self):\n        self.conn = None\n        \n    def listen_queue(self, profile: dict):\n        if not profile:\n            return\n            \n        self.conn = stomp.Connection(\n            host_and_ports=[\n                (\n                    profile.get(\"host\",\"127.0.0.1\"), \n                    profile.get(\"port\",61616)\n                )\n            ],\n            heartbeats=(6000, 12000)\n        )\n        self.conn.set_listener('', MessageListener())\n        self.conn.connect(\n            profile.get(\"username\",\"artemis\"), \n            profile.get(\"password\",\"artemis\"), \n            wait=True,\n            headers={\"client-id\": \"arkid\"},\n        )\n        self.conn.subscribe(\n            destination=profile.get(\"destination\",\"arkid\"),\n            id=profile.get(\"destination\",\"arkid\"),\n            ack=\"auto\",\n            headers={\n                'subscription-type': 'ANYCAST',\n                'durable-subscription-name': f'arkid.{profile.get(\"destination\",\"arkid\")}',\n            },\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 81,
    "right_result": "import stomp\nfrom typing import List, Dict\n\nclass MessageArtemisExtension:\n    conns: List[stomp.Connection] = []\n\n    def __init__(self):\n        self.conn = None\n\n    def listen_queue(self, profile: Dict) -> None:\n        host = profile.get(\"host\", \"127.0.0.1\")\n        port = profile.get(\"port\", 61616)\n        username = profile.get(\"username\", \"artemis\")\n        password = profile.get(\"password\", \"artemis\")\n        destination = profile.get(\"destination\", \"arkid\")\n\n        self.conn = stomp.Connection([(host, port)])\n        self.conn.set_listener('MyListener', stomp.listener.StompListener())\n        self.conn.connect(username, password, wait=True)\n        self.conn.subscribe(destination=destination, id=1, ack='auto')\n        MessageArtemisExtension.conns.append(self.conn)"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a function to download an image from a given URL, process it, and save it locally while tracking download status and file metadata.\n\nFunction Description: The function downloads an image from a specified URL, resizes it, saves it to a local file, and returns metadata about the download process and resulting file. It handles various HTTP scenarios and includes error handling for network issues.\n\nInput:\n- row: [dict] - A dictionary containing:\n  - \"url\": [str] - The URL of the image to download\n  - Other fields will be populated by the function (see Output)\n\nOutput:\n- row: [dict] - The modified input dictionary with added/updated fields:\n  - \"status\": [int] - HTTP status code of the download (200 for success, 408 for timeout/error)\n  - \"file\": [str] - Path to the saved image file\n  - \"mimetype\": [str] - Detected MIME type of the image\n  - \"size\": [int] - Size of the saved file in bytes",
    "Canonical_solution": "import requests\n\nheaders = {\n    \"User-Agent\": \"Googlebot-Image/1.0\",\n    \"X-Forwarded-For\": \"64.18.15.200\",\n}\n\ndef download_image(row):\n    fname = _file_name(row)\n    if os.path.isfile(fname):\n        row[\"status\"] = 200\n        row[\"file\"] = fname\n        row[\"mimetype\"] = magic.from_file(row[\"file\"], mime=True)\n        row[\"size\"] = os.stat(row[\"file\"]).st_size\n        return row\n\n    try:\n        response = requests.get(\n            row[\"url\"], stream=False, timeout=5, allow_redirects=True, headers=headers\n        )\n        row[\"status\"] = response.status_code\n    except Exception as e:\n        row[\"status\"] = 408\n        return row\n\n    if response.ok:\n        try:\n            response.raw.decode_content = True\n            img = resize_img(io.BytesIO(response.content))\n            img.save(fname)\n\n            row[\"mimetype\"] = magic.from_file(fname, mime=True)\n            row[\"size\"] = os.stat(fname).st_size\n        except Exception as e:\n            row[\"status\"] = 408\n\n    row[\"file\"] = fname\n    return row",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom PIL import Image\nfrom io import BytesIO\nimport os\nimport mimetypes\n\ndef download_and_process_image(row):\n    url = row.get(\"url\")\n    if not url:\n        row[\"status\"] = 408\n        row[\"file\"] = \"\"\n        row[\"mimetype\"] = \"\"\n        row[\"size\"] = 0\n        return row\n\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        status = response.status_code\n    except requests.exceptions.RequestException as e:\n        row[\"status\"] = 408\n        row[\"file\"] = \"\"\n        row[\"mimetype\"] = \"\"\n        row[\"size\"] = 0\n        return row\n\n    try:\n        image = Image.open(BytesIO(response.content))\n        mimetype = response.headers.get(\"Content-Type\", \"image/jpeg\")\n        file_path = os.path.join(\"downloads\", f\"image_{os.urandom(4).hex()}.jpg\")\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n        image.save(file_path, format=image.format)\n        size = os.path.getsize(file_path)\n        row[\"status\"] = status\n        row[\"file\"] = file_path\n        row[\"mimetype\"] = mimetype\n        row[\"size\"] = size\n    except Exception as e:\n        row[\"status\"] = 408\n        row[\"file\"] = \"\"\n        row[\"mimetype\"] = \"\"\n        row[\"size\"] = 0\n\n    return row"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a function that handles GitHub webhook events for pull requests, fetches a random meme from an API, and posts it as a comment on the pull request.\n\nFunction Description: The function `bot()` is a webhook handler that processes GitHub pull request events. When a pull request is opened, it authenticates with the GitHub API, fetches a random meme from an external API, and posts the meme as a comment on the pull request. The function uses the `requests` library for HTTP communication with the meme API and the `PyGithub` library for GitHub interactions.\n\nInput: \n- The function receives a Flask `request` object containing JSON payload from GitHub webhook. The payload includes:\n  - `action`: The event type (e.g., \"opened\")\n  - `pull_request`: Details about the pull request\n  - `repository`: Information about the repository containing owner and name\n\nOutput: \n- Returns \"ok\" string in all cases (success or failure) to acknowledge webhook receipt\n- As a side effect, posts a meme comment on the pull request when conditions are met",
    "Canonical_solution": "import os\nimport requests\nfrom dotenv import load_dotenv\nfrom flask import Flask, request\nfrom github import Github, GithubIntegration\n\nload_dotenv()\n\n__flask_app_name__ = 'github_bot'\napp = Flask(__flask_app_name__)\napp_id = int(os.environ['GITHUB_APP_ID'])\nwith open(\n        os.path.normpath(os.path.expanduser(os.getenv(\"GITHUB_PRIVATE_KEY_FILE\", '~/.certs/github/bot_key.pem'))),\n        'r'\n) as cert_file:\n    app_key = cert_file.read()\n\ngit_integration = GithubIntegration(\n    app_id,\n    app_key,\n)\n\ndef bot():\n    payload = request.json\n    if not all(k in payload.keys() for k in ['action', 'pull_request']) and \\\n            payload['action'] == 'opened':\n        return \"ok\"\n    owner = payload['repository']['owner']['login']\n    repo_name = payload['repository']['name']\n    git_connection = Github(\n        login_or_token=git_integration.get_access_token(\n            git_integration.get_installation(owner, repo_name).id\n        ).token\n    )\n    repo = git_connection.get_repo(f\"{owner}/{repo_name}\")\n    issue = repo.get_issue(number=payload['pull_request']['number'])\n    response = requests.get(url='https://meme-api.herokuapp.com/gimme')\n    if response.status_code != 200:\n        return 'ok'\n    meme_url = response.json()['preview'][-1]\n    issue.create_comment(f\"![Alt Text]({meme_url})\")\n    return \"ok\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom flask import request\nfrom github import Github\n\ndef bot():\n    payload = request.json\n    action = payload.get('action')\n    pull_request = payload.get('pull_request', {})\n    repository = payload.get('repository', {})\n    \n    if action == 'opened':\n        repo_owner = repository.get('owner', {}).get('login')\n        repo_name = repository.get('name')\n        pr_number = pull_request.get('number')\n        \n        # Authenticate with GitHub\n        g = Github(\"your_github_token\")\n        repo = g.get_repo(f\"{repo_owner}/{repo_name}\")\n        pr = repo.get_pull(pr_number)\n        \n        # Fetch a random meme from an API\n        meme_response = requests.get(\"https://api.imgflip.com/get_memes\")\n        if meme_response.status_code == 200:\n            memes = meme_response.json().get('data', {}).get('memes', [])\n            if memes:\n                meme_url = memes[0].get('url')\n                comment_body = f\"Here's a random meme for you: {meme_url}\"\n                pr.create_issue_comment(comment_body)\n                \n    return \"ok\""
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the Python requests library, handling different HTTP methods and processing both requests and responses appropriately.\n\nFunction Description: The function should make HTTP requests to a specified URL using a given HTTP method (GET, POST, PUT, DELETE, etc.). For GET requests, it should ignore any payload, while for other methods it should properly format and send a JSON payload if provided. The function should return the response status code, headers, and body in a structured format, or an error message if the request fails.\n\nInput:\n- method (str): The HTTP method to use (e.g., 'GET', 'POST', 'PUT', 'DELETE').\n- url (str): The target URL for the HTTP request.\n- payload_json (Optional[str]): A JSON string representing the request payload (ignored for GET requests).\n\nOutput:\n- dict: A dictionary containing:\n  - 'status_code' (int): The HTTP response status code.\n  - 'headers' (dict): The response headers as a dictionary.\n  - 'body' (str): The response body as text.\n  - OR 'error' (str): An error message if the request fails.",
    "Canonical_solution": "import os\nimport requests\nfrom typing import Optional\nfrom letta.utils import json_dumps, json_loads\n\ndef http_request(self, method: str, url: str, payload_json: Optional[str] = None):\n    \"\"\"\n    Generates an HTTP request and returns the response.\n\n    Args:\n        method (str): The HTTP method (e.g., 'GET', 'POST').\n        url (str): The URL for the request.\n        payload_json (Optional[str]): A JSON string representing the request payload.\n\n    Returns:\n        dict: The response from the HTTP request.\n    \"\"\"\n    try:\n        headers = {\"Content-Type\": \"application/json\"}\n\n        # For GET requests, ignore the payload\n        if method.upper() == \"GET\":\n            print(f\"[HTTP] launching GET request to {url}\")\n            response = requests.get(url, headers=headers)\n        else:\n            # Validate and convert the payload for other types of requests\n            if payload_json:\n                payload = json_loads(payload_json)\n            else:\n                payload = {}\n            print(f\"[HTTP] launching {method} request to {url}, payload=\\n{json_dumps(payload, indent=2)}\")\n            response = requests.request(method, url, json=payload, headers=headers)\n\n        return {\"status_code\": response.status_code, \"headers\": dict(response.headers), \"body\": response.text}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef make_http_request(method, url, payload_json=None):\n    try:\n        if method.upper() == 'GET':\n            response = requests.get(url)\n        elif method.upper() == 'POST':\n            response = requests.post(url, json=payload_json)\n        elif method.upper() == 'PUT':\n            response = requests.put(url, json=payload_json)\n        elif method.upper() == 'DELETE':\n            response = requests.delete(url)\n        else:\n            return {'error': 'Unsupported HTTP method'}\n        \n        return {\n            'status_code': response.status_code,\n            'headers': dict(response.headers),\n            'body': response.text\n        }\n    except requests.exceptions.RequestException as e:\n        return {'error': str(e)}"
  },
  {
    "Task_id": 105,
    "Instruction": "Based on the reference code provided, I'll create instructions for the functions since the code is organized at the function level rather than class level.\n\nTask Description: Create a set of HTTP client functions in Python to interact with a remote agent service for Bluetooth and system operations.\n\nFunction Description: The functions make HTTP requests to a remote agent and handle responses for various Bluetooth and system operations.\n\nInput: Various parameters depending on the specific function (agent IP, port, JSON data, etc.)\nOutput: Various return values including status codes, error messages, and operation-specific data\n\nDetailed Functions:\n\n1. Function: makeGetRequest(url)\nPurpose: Make a GET request to a specified URL with timeout handling\nInput: url (string) - The URL to send the GET request to\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n2. Function: makePostRequest(url, jsonstr)\nPurpose: Make a POST request with JSON data to a specified URL\nInput: \n  - url (string) - The URL to send the POST request to\n  - jsonstr (string) - JSON data to send in the request body\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n3. Function: getRemoteBluetoothRunningServices(agentIP, agentPort)\nPurpose: Check Bluetooth service status on remote agent\nInput:\n  - agentIP (string) - IP address of remote agent\n  - agentPort (int/string) - Port number of remote agent\nOutput: tuple (errcode: int, errmsg: string, hasBluetooth: bool, hasUbertooth: bool, spectrumScanRunning: bool, discoveryScanRunning: bool)\n\n4. Function: startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth)\nPurpose: Start Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - ubertooth (bool) - Whether to use Ubertooth device\nOutput: tuple (errcode: int, errmsg: string)\n\n5. Function: stopRemoteBluetoothDiscoveryScan(agentIP, agentPort)\nPurpose: Stop Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n6. Function: getRemoteBluetoothDiscoveryStatus(agentIP, agentPort)\nPurpose: Get status of Bluetooth discovery scan and discovered devices\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, devices: dict)\n\n7. Function: getRemoteRecordingsFiles(agentIP, agentPort)\nPurpose: Get list of recording files from remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, filelist: list)\n\n8. Function: delRemoteRecordingFiles(remoteIP, remotePort, filelist)\nPurpose: Delete recording files on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - filelist (list) - List of files to delete\nOutput: tuple (errcode: int, errmsg: string)\n\n9. Function: startRecord(agentIP, agentPort, interface)\nPurpose: Start recording on specified interface of remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - interface (string) - Network interface to record from\nOutput: tuple (errcode: int, errmsg: string)\n\n10. Function: stopRecord(agentIP, agentPort)\nPurpose: Stop recording on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n11. Function: updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart)\nPurpose: Update configuration on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - startupCfg (object) - Configuration for startup\n  - runningCfg (object) - Configuration for running state\n  - sendRestart (bool) - Whether to restart agent after update\nOutput: tuple (errcode: int, errmsg: string)",
    "Canonical_solution": "import requests\nimport json\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=2)\n    except:\n        return -1, \"\"\n\n    if response.status_code != 200:\n        return response.status_code, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, data=jsonstr, timeout=2)\n    except:\n        return -1, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/running\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            hasBluetooth = responsedict['hasbluetooth']\n            hasUbertooth = responsedict['hasubertooth']\n            spectrumScanRunning = responsedict['spectrumscanrunning']\n            discoveryScanRunning = responsedict['discoveryscanrunning']\n\n            return errcode, errmsg, hasBluetooth, hasUbertooth, spectrumScanRunning, discoveryScanRunning\n        except:\n            return -1, 'Error parsing response', False, False, False, False\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', False, False, False, False\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    if ubertooth:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystartp\"\n    else:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystarta\"\n\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystop\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystatus\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            tmpDeviceData = responsedict['devices']\n            devices = {}\n            for curDevice in tmpDeviceData:\n                newdevice = BluetoothDevice()\n                try:\n                    newdevice.fromJsondict(curDevice)\n                    devices[newdevice.macAddress] = newdevice\n                except:\n                    pass\n            return errcode, errmsg, devices\n        except:\n            return -1, 'Error parsing response', None\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', None\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/getrecordings\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            filelist = []\n            try:\n                for curFileDict in responsedict['files']:\n                    curFile = FileSystemFile()\n                    curFile.fromJsondict(curFileDict)\n                    filelist.append(curFile)\n                return 0, \"\", filelist\n            except:\n                return 2, \"Error parsing response: \" + responsestr, None\n        except:\n            return 1, \"Error parsing response: \" + responsestr, None\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode), None\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/deleterecordings\"\n\n    filedict={}\n    filedict['files'] = filelist\n\n    jsonstr = json.dumps(filedict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errcode = -1\n    errmsg = \"\"\n\n    if statusCode == 200 or statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n    return errcode, errmsg\n\ndef startRecord(agentIP, agentPort, interface):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/startrecord/\" + interface\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef stopRecord(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/stoprecord\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart=False):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/config\"\n\n    cfgdict = {}\n    cfgdict['startup'] = startupCfg.toJsondict()\n    cfgdict['running'] = runningCfg.toJsondict()\n\n    if sendRestart:\n        cfgdict['rebootagent'] = True\n\n    jsonstr = json.dumps(cfgdict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errmsg = \"\"\n\n    if statusCode == 200:\n        return 0, \"\"\n    elif statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n        return -1, errmsg",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (500, str(e))\n\ndef makePostRequest(url, jsonstr):\n    try:\n        headers = {'Content-Type': 'application/json'}\n        response = requests.post(url, data=jsonstr, headers=headers, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (500, str(e))\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/status\"\n    status_code, response_text = makeGetRequest(url)\n    if status_code != 200:\n        return (status_code, response_text, False, False, False, False)\n    try:\n        data = json.loads(response_text)\n        return (\n            0,\n            \"\",\n            data.get(\"hasBluetooth\", False),\n            data.get(\"hasUbertooth\", False),\n            data.get(\"spectrumScanRunning\", False),\n            data.get(\"discoveryScanRunning\", False)\n        )\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\", False, False, False, False)\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/start\"\n    payload = {\"ubertooth\": ubertooth}\n    jsonstr = json.dumps(payload)\n    status_code, response_text = makePostRequest(url, jsonstr)\n    if status_code != 200:\n        return (status_code, response_text)\n    try:\n        data = json.loads(response_text)\n        return (data.get(\"errcode\", 0), data.get(\"errmsg\", \"\"))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\")\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/stop\"\n    status_code, response_text = makePostRequest(url, \"{}\")\n    if status_code != 200:\n        return (status_code, response_text)\n    try:\n        data = json.loads(response_text)\n        return (data.get(\"errcode\", 0), data.get(\"errmsg\", \"\"))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\")\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/status\"\n    status_code, response_text = makeGetRequest(url)\n    if status_code != 200:\n        return (status_code, response_text, {})\n    try:\n        data = json.loads(response_text)\n        return (0, \"\", data.get(\"devices\", {}))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\", {})\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/files\"\n    status_code, response_text = makeGetRequest(url)\n    if status_code != 200:\n        return (status_code, response_text, [])\n    try:\n        data = json.loads(response_text)\n        return (0, \"\", data.get(\"filelist\", []))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\", [])\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = f\"http://{remoteIP}:{remotePort}/recordings/delete\"\n    payload = {\"filelist\": filelist}\n    jsonstr = json.dumps(payload)\n    status_code, response_text = makePostRequest(url, jsonstr)\n    if status_code != 200:\n        return (status_code, response_text)\n    try:\n        data = json.loads(response_text)\n        return (data.get(\"errcode\", 0), data.get(\"errmsg\", \"\"))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\")\n\ndef startRecord(agentIP, agentPort, interface):\n    url = f\"http://{agentIP}:{agentPort}/record/start\"\n    payload = {\"interface\": interface}\n    jsonstr = json.dumps(payload)\n    status_code, response_text = makePostRequest(url, jsonstr)\n    if status_code != 200:\n        return (status_code, response_text)\n    try:\n        data = json.loads(response_text)\n        return (data.get(\"errcode\", 0), data.get(\"errmsg\", \"\"))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\")\n\ndef stopRecord(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/record/stop\"\n    status_code, response_text = makePostRequest(url, \"{}\")\n    if status_code != 200:\n        return (status_code, response_text)\n    try:\n        data = json.loads(response_text)\n        return (data.get(\"errcode\", 0), data.get(\"errmsg\", \"\"))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\")\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart):\n    url = f\"http://{remoteIP}:{remotePort}/config/update\"\n    payload = {\n        \"startupCfg\": startupCfg,\n        \"runningCfg\": runningCfg,\n        \"sendRestart\": sendRestart\n    }\n    jsonstr = json.dumps(payload)\n    status_code, response_text = makePostRequest(url, jsonstr)\n    if status_code != 200:\n        return (status_code, response_text)\n    try:\n        data = json.loads(response_text)\n        return (data.get(\"errcode\", 0), data.get(\"errmsg\", \"\"))\n    except json.JSONDecodeError:\n        return (400, \"Invalid JSON response\")"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a Python class that retrieves and formats a daily motto from an external API using HTTP requests.\n\nClass Description: The `Motto` class provides functionality to fetch a daily motto from the open.iciba.com API and format it for display. It encapsulates the HTTP request logic and response handling.\n\nAttributes: None\n\nMethods:\n\nMethod1: main() -> str - A static method that performs the following operations:\n1. Sends a GET request to \"http://open.iciba.com/dsapi\"\n2. Checks if the response status code is 200 (success)\n3. Parses the JSON response\n4. Returns a formatted string containing the motto content and note\n5. Returns an empty string if the request fails\n\nThe method takes no input parameters and returns either:\n- A formatted string combining the \"content\" and \"note\" fields from the API response, separated by a newline\n- An empty string if the HTTP request fails (non-200 status code)",
    "Canonical_solution": "import requests\n\nclass Motto:\n    @staticmethod\n    def main():\n        response = requests.get(\"http://open.iciba.com/dsapi\")\n        if response.status_code != 200:\n            return \"\"\n        res = response.json()\n        return f'{res[\"content\"]}\\n{res[\"note\"]}\\n'",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass Motto:\n    @staticmethod\n    def main():\n        url = \"http://open.iciba.com/dsapi\"\n        response = requests.get(url)\n        if response.status_code == 200:\n            data = response.json()\n            return f\"{data['content']}\\n{data['note']}\"\n        return \"\""
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a class to interact with the Gitee API for deleting files from a repository branch.\n\nClass Description: The FileOnlineDelete_gitee class provides functionality to delete files from a specified branch in a Gitee repository using the Gitee API v5. It handles authentication, file information retrieval, and deletion operations.\n\nAttributes:\n- url_prefix: str - Base URL for Gitee API v5 repository operations\n- show_help: str - Placeholder for help information (currently unused)\n\nMethods:\n- delete_file_from_branch(repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple - Deletes a file from the specified branch. Returns a success tuple or error message.\n  Parameters:\n    - repo_owner: str - Owner of the repository\n    - repo_name: str - Name of the repository\n    - file_path: str - Path to the file within the repository\n    - branch: str - Branch containing the file\n    - access_token: str - Gitee API access token\n    - commit_message: str - Commit message for the deletion (optional)\n  Returns:\n    - tuple: Either (\"Success\",) on success or (error_message,) on failure",
    "Canonical_solution": "import requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self):\n        self.url_prefix = \"https://gitee.com/api/v5/repos/\"\n        self.show_help = \"placeholder\"\n\n    def delete_file_from_branch(\n        self, repo_owner, repo_name, file_path, branch, access_token, commit_message=\"[comfyui_LLM_party] file deleted\"\n    ):\n        url = f\"https://gitee.com/api/v5/repos/{repo_owner}/{repo_name}/contents/{file_path}\"\n\n        params = {\"access_token\": access_token, \"ref\": branch}\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            print(f\"Failed to get file info. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return False\n\n        file_sha = response.json()[\"sha\"]\n\n        data = {\"access_token\": access_token, \"message\": commit_message, \"sha\": file_sha, \"branch\": branch}\n        response = requests.delete(url, json=data)\n\n        if response.status_code == 200:\n            print(f\"File '{file_path}' successfully deleted from branch '{branch}'.\")\n            return (\"Success\",)\n        else:\n            print(f\"Failed to delete file. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return (response.text,)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self):\n        self.url_prefix = \"https://gitee.com/api/v5\"\n        self.show_help = \"\"\n\n    def delete_file_from_branch(self, repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple:\n        url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/contents/{file_path}\"\n        headers = {\n            \"Authorization\": f\"token {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        data = {\n            \"message\": commit_message,\n            \"branch\": branch\n        }\n        response = requests.delete(url, headers=headers, json=data)\n        if response.status_code == 200:\n            return (\"Success\",)\n        else:\n            return (response.text,)"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server class that exposes various NLP pipeline functionalities including model information retrieval, tokenization, detokenization, and model inference.\n\nClass Description: The `ServeCommand` class encapsulates a FastAPI application that serves an NLP pipeline through RESTful endpoints. It provides methods for getting model information, tokenizing text, detokenizing tokens, and performing model inference.\n\nAttributes:\n- _pipeline: [Any] - The NLP pipeline object containing the model and tokenizer\n- host: [str] - The host address where the server will run (default: \"localhost\")\n- port: [int] - The port number for the server (default: 8888)\n- workers: [int] - Number of worker processes (default: 1)\n- _app: [FastAPI] - The FastAPI application instance\n\nMethods:\n- __init__(pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None - Initializes the server with the NLP pipeline and server configuration\n- run() -> None - Starts the FastAPI server using uvicorn\n- model_info() -> ServeModelInfoResult - Returns model configuration information\n- tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult - Tokenizes input text and optionally returns token IDs\n- detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult - Converts token IDs back to text\n- forward(inputs=Body(None, embed=True)) -> ServeForwardResult - Performs model inference on the given inputs",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\nfrom starlette.responses import JSONResponse\nfrom uvicorn import run\nfrom typing import List, Any, Optional\n\nclass ServeModelInfoResult(BaseModel):\n    infos: dict\n\nclass ServeTokenizeResult(BaseModel):\n    tokens: List[str]\n    tokens_ids: Optional[List[int]]\n\nclass ServeDeTokenizeResult(BaseModel):\n    text: str\n\nclass ServeForwardResult(BaseModel):\n    output: Any\n\nclass ServeCommand:\n    def __init__(self, pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1):\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n\n        self._app = FastAPI(\n            routes=[\n                APIRoute(\"/\", self.model_info, response_model=ServeModelInfoResult, response_class=JSONResponse, methods=[\"GET\"]),\n                APIRoute(\"/tokenize\", self.tokenize, response_model=ServeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/detokenize\", self.detokenize, response_model=ServeDeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/forward\", self.forward, response_model=ServeForwardResult, response_class=JSONResponse, methods=[\"POST\"]),\n            ],\n            timeout=600,\n        )\n\n    def run(self):\n        run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    def model_info(self):\n        return ServeModelInfoResult(infos=vars(self._pipeline.model.config))\n\n    def tokenize(self, text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)):\n        try:\n            tokens_txt = self._pipeline.tokenizer.tokenize(text_input)\n            if return_ids:\n                tokens_ids = self._pipeline.tokenizer.convert_tokens_to_ids(tokens_txt)\n                return ServeTokenizeResult(tokens=tokens_txt, tokens_ids=tokens_ids)\n            else:\n                return ServeTokenizeResult(tokens=tokens_txt)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    def detokenize(self, tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)):\n        try:\n            decoded_str = self._pipeline.tokenizer.decode(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)\n            return ServeDeTokenizeResult(text=decoded_str)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    async def forward(self, inputs=Body(None, embed=True)):\n        if len(inputs) == 0:\n            return ServeForwardResult(output=[])\n        try:\n            output = self._pipeline(inputs)\n            return ServeForwardResult(output=output)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, Body\nfrom typing import Any, List, Optional\nfrom pydantic import BaseModel\n\nclass ServeModelInfoResult(BaseModel):\n    model_name: str\n    tokenizer_name: str\n    model_type: str\n    max_length: int\n\nclass ServeTokenizeResult(BaseModel):\n    tokens: List[str]\n    token_ids: Optional[List[int]]\n\nclass ServeDeTokenizeResult(BaseModel):\n    text: str\n\nclass ServeForwardResult(BaseModel):\n    output: Any\n\nclass ServeCommand:\n    def __init__(self, pipeline: Any, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None:\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n        self._app = FastAPI()\n\n        @self._app.get(\"/model_info\")\n        def model_info() -> ServeModelInfoResult:\n            return ServeModelInfoResult(\n                model_name=self._pipeline.model.name_or_path,\n                tokenizer_name=self._pipeline.tokenizer.name_or_path,\n                model_type=self._pipeline.model.config.model_type,\n                max_length=self._pipeline.model.config.max_position_embeddings\n            )\n\n        @self._app.post(\"/tokenize\")\n        def tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult:\n            tokens = self._pipeline.tokenizer.tokenize(text_input)\n            token_ids = self._pipeline.tokenizer.convert_tokens_to_ids(tokens) if return_ids else None\n            return ServeTokenizeResult(tokens=tokens, token_ids=token_ids)\n\n        @self._app.post(\"/detokenize\")\n        def detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult:\n            text = self._pipeline.tokenizer.decode(tokens_ids, skip_special_tokens=skip_special_tokens, clean_up_tokenization_spaces=cleanup_tokenization_spaces)\n            return ServeDeTokenizeResult(text=text)\n\n        @self._app.post(\"/forward\")\n        def forward(inputs=Body(None, embed=True)) -> ServeForwardResult:\n            output = self._pipeline(inputs)\n            return ServeForwardResult(output=output)\n\n    def run(self) -> None:\n        import uvicorn\n        uvicorn.run(self._app, host=self.host, port=self.port, workers=self.workers)"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Implement a FastAPI-based HTTP server for handling conversational AI queries and chat interactions, with support for both direct queries and streaming chat responses.\n\nClass Description: RayAssistantDeployment is a class that encapsulates the functionality for handling HTTP requests in a conversational AI service. It provides endpoints for direct queries (/query) and chat interactions (/chat), with support for streaming responses in chat mode.\n\nAttributes:\n\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name](app: FastAPI) -> None - Initializes the class with a FastAPI app instance and registers the query and chat endpoints.\n\npredict: [Name](query: Query, stream: bool) -> Dict[str, Any] - Internal prediction method that processes the input query and returns a dictionary containing the AI response (implementation would be provided separately).\n\nquery: [Name](query: Query) -> Answer - Handles POST requests to the /query endpoint, processes the query using predict, and returns an Answer object containing the response.\n\nproduce_chat_answer: [Name](request: Request, result: Dict[str, Any]) -> Generator[str, None, None] - Generator function that yields chat response pieces and sources for streaming.\n\nchat: [Name](request: Request) -> StreamingResponse - Handles POST requests to the /chat endpoint, processes the conversation using predict (with streaming enabled for single messages), and returns a streaming response.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom typing import List, Dict, Any\n\nclass Message(BaseModel):\n    role: str = Field(\n        ..., description=\"The role of the author of the message, typically 'user', or 'assistant'.\"\n    )\n    content: str = Field(..., description=\"The content of the message.\")\n\nclass Request(BaseModel):\n    messages: List[Message] = Field(\n        ..., description=\"A list of messages that make up the conversation.\"\n    )\n\nclass Query(BaseModel):\n    query: str\n\nclass Answer(BaseModel):\n    question: str\n    answer: str\n    sources: List[str]\n    llm: str\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation would go here\n        pass\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer.parse_obj(result)\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]):\n        answer = []\n        for answer_piece in result[\"answer\"]:\n            answer.append(answer_piece)\n            yield answer_piece\n\n        if result[\"sources\"]:\n            yield \"\\n\\n**Sources:**\\n\"\n            for source in result[\"sources\"]:\n                yield \"* \" + source + \"\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        if len(request.messages) == 1:\n            query = Query(query=request.messages[0].content)\n            result = self.predict(query, stream=True)\n        else:\n            # Simplified implementation for follow-up questions\n            result = {\"answer\": [\"Response\"], \"llm\": \"gpt-4\", \"sources\": [], \"document_ids\": []}\n\n        return StreamingResponse(\n            self.produce_chat_answer(request, result), media_type=\"text/plain\"\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, Request, HTTPException\nfrom typing import Dict, Any, Generator\nfrom fastapi.responses import StreamingResponse\n\nclass Answer:\n    def __init__(self, response: str):\n        self.response = response\n\nclass Query:\n    def __init__(self, text: str):\n        self.text = text\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI) -> None:\n        self.app = app\n        self._register_endpoints()\n\n    def _register_endpoints(self):\n        @self.app.post(\"/query\")\n        async def query_endpoint(query: Query):\n            return self.query(query)\n\n        @self.app.post(\"/chat\")\n        async def chat_endpoint(request: Request):\n            return self.chat(request)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Placeholder for actual prediction logic\n        result = {\"response\": \"AI response to: \" + query.text}\n        return result\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer(result[\"response\"])\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]) -> Generator[str, None, None]:\n        for i, char in enumerate(result[\"response\"]):\n            yield f\"data: {char}\\n\\n\"\n            if i % 10 == 0:\n                yield f\"data: Source: example_source\\n\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        try:\n            data = await request.json()\n            query_text = data.get(\"text\")\n            if not query_text:\n                raise HTTPException(status_code=400, detail=\"Missing 'text' in request body\")\n            query = Query(text=query_text)\n            result = self.predict(query, stream=True)\n            return StreamingResponse(self.produce_chat_answer(request, result), media_type=\"text/event-stream\")\n        except Exception as e:\n            raise HTTPException(status_code=500, detail=str(e))"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a FastAPI-based action server that can execute predefined actions and list available actions through HTTP endpoints.\n\nClass Description: The ActionServer class initializes a FastAPI application with endpoints for running actions and listing available actions. It uses an action dispatcher to handle the execution of actions.\n\nAttributes:\n- _app: FastAPI - The FastAPI application instance that handles HTTP requests.\n- _action_dispatcher: Any - The dispatcher responsible for executing actions and providing the list of registered actions.\n\nMethods:\n- __init__(action_dispatcher: Any) -> None - Initializes the ActionServer with the given action dispatcher and sets up the FastAPI routes.\n- run_action(body: RequestBody) -> Dict[str, str] - Executes the specified action with the given parameters and returns the result and status.\n- get_actions_list() -> Any - Returns the list of available actions from the action dispatcher.\n- get_app() -> FastAPI - Returns the FastAPI application instance for external use.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing import Dict, Optional\n\nclass RequestBody(BaseModel):\n    action_name: str = \"\"\n    action_parameters: Dict = Field(\n        default={}, description=\"The list of action parameters.\"\n    )\n\nclass ResponseBody(BaseModel):\n    status: str = \"success\"\n    result: Optional[str]\n\nclass ActionServer:\n    def __init__(self, action_dispatcher):\n        self._app = FastAPI(\n            title=\"Guardrails Action Server API\",\n            description=\"Guardrails Action Sever API.\",\n            version=\"0.1.0\",\n            license_info={\"name\": \"Apache License, Version 2.0\"},\n        )\n        self._action_dispatcher = action_dispatcher\n\n        self._app.post(\n            \"/v1/actions/run\",\n            summary=\"Execute action\",\n            response_model=ResponseBody,\n        )(self.run_action)\n        self._app.get(\n            \"/v1/actions/list\",\n            summary=\"List available actions\",\n        )(self.get_actions_list)\n\n    async def run_action(self, body: RequestBody):\n        result, status = await self._action_dispatcher.execute_action(\n            body.action_name, body.action_parameters\n        )\n        return {\"status\": status, \"result\": result}\n\n    async def get_actions_list(self):\n        return self._action_dispatcher.get_registered_actions()\n\n    def get_app(self):\n        return self._app",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, HTTPException, Request\nfrom pydantic import BaseModel\nfrom typing import Any, Dict\n\nclass RequestBody(BaseModel):\n    action: str\n    parameters: Dict[str, Any]\n\nclass ActionServer:\n    def __init__(self, action_dispatcher: Any) -> None:\n        self._app = FastAPI()\n        self._action_dispatcher = action_dispatcher\n        self._setup_routes()\n\n    def _setup_routes(self) -> None:\n        @self._app.post(\"/run_action\")\n        async def run_action_endpoint(request: Request, body: RequestBody):\n            try:\n                result = self.run_action(body)\n                return {\"result\": result[\"result\"], \"status\": result[\"status\"]}\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))\n\n        @self._app.get(\"/actions\")\n        async def get_actions_list_endpoint():\n            return self.get_actions_list()\n\n    def run_action(self, body: RequestBody) -> Dict[str, str]:\n        if not hasattr(self._action_dispatcher, \"execute_action\"):\n            raise AttributeError(\"Action dispatcher must have an execute_action method.\")\n        result = self._action_dispatcher.execute_action(body.action, body.parameters)\n        return {\"result\": result, \"status\": \"success\"}\n\n    def get_actions_list(self) -> Any:\n        if not hasattr(self._action_dispatcher, \"get_registered_actions\"):\n            raise AttributeError(\"Action dispatcher must have a get_registered_actions method.\")\n        return self._action_dispatcher.get_registered_actions()\n\n    def get_app(self) -> FastAPI:\n        return self._app"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions from a scoring service in the appropriate format.\n\nFunction Description: The `transformation` function is a Flask route handler for \"/invocations\" endpoint that processes incoming POST requests. It checks the content type of the request, extracts and processes the data accordingly, gets predictions from a scoring service, and returns the results in the corresponding format (JSON for JSON input, CSV for CSV/text input).\n\nInput: \n- The function receives HTTP POST requests through Flask's request object\n- Supported input content types:\n  * application/json: {\"text\": string, \"bing_key\": optional string}\n  * text/csv: CSV file with a \"text\" column\n  * text/plain: Plain text file with one text per line\n\nOutput:\n- For successful processing:\n  * JSON response (for JSON input) containing top 10 predictions\n  * CSV response (for CSV/text input) containing predictions\n- For unsupported content types: 415 error response with plain text message\n\nThe function returns Flask Response objects with:\n- response: The processed data in appropriate format\n- status: HTTP status code (200 for success, 415 for unsupported type)\n- mimetype: Corresponding to the response format",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport csv\nimport io\n\napp = Flask(__name__)\n\ndef get_predictions(text):\n    # Placeholder for actual scoring service logic\n    return [f\"Prediction_{i}\" for i in range(10)]\n\n@app.route('/invocations', methods=['POST'])\ndef transformation():\n    content_type = request.content_type\n\n    if content_type == 'application/json':\n        data = request.get_json()\n        text = data.get('text')\n        if not text:\n            return Response(\"Missing 'text' field\", status=400, mimetype='text/plain')\n        predictions = get_predictions(text)\n        return Response(\n            response=str({'predictions': predictions}),\n            status=200,\n            mimetype='application/json'\n        )\n    elif content_type in ['text/csv', 'text/plain']:\n        file = request.files['file'] if 'file' in request.files else request.data\n        if isinstance(file, str):\n            lines = file.strip().splitlines()\n        else:\n            lines = file.read().decode('utf-8').strip().splitlines()\n\n        results = []\n        for line in lines:\n            predictions = get_predictions(line)\n            results.extend(predictions)\n\n        output = io.StringIO()\n        writer = csv.writer(output)\n        writer.writerow(['prediction'])\n        for pred in results:\n            writer.writerow([pred])\n\n        return Response(\n            response=output.getvalue(),\n            status=200,\n            mimetype='text/csv'\n        )\n    else:\n        return Response(\"Unsupported Content-Type: {}\".format(content_type), status=415, mimetype='text/plain')"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Python function that initializes and runs a Flask-based HTTP server for a translation service, using Waitress as the production server. The server should handle translation requests and interact with a TranslationServer instance.\n\nFunction Description: The function `start` initializes a Flask application, sets up route prefixing, starts a TranslationServer with the provided configuration, and defines a `/translate` endpoint that handles POST requests for translation. The server runs in production mode using Waitress.\n\nInput:\n- config_file: [str] - Path to the configuration file for the TranslationServer\n- url_root: [str] (optional, default=\"./translator\") - Base URL path for the routes\n- host: [str] (optional, default=\"0.0.0.0\") - Host address to bind the server to\n- port: [int] (optional, default=5000) - Port number to listen on\n- debug: [bool] (optional, default=False) - Debug mode flag (not used with Waitress)\n\nOutput:\n- None: The function doesn't return but starts a blocking HTTP server that handles incoming requests until interrupted. The `/translate` endpoint returns JSON responses containing translation results or error information.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom waitress import serve\nfrom onmt.translate import TranslationServer, ServerModelError\n\nSTATUS_OK = \"ok\"\nSTATUS_ERROR = \"error\"\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    def prefix_route(route_function, prefix=\"\", mask=\"{0}{1}\"):\n        def newroute(route, *args, **kwargs):\n            return route_function(mask.format(prefix, route), *args, **kwargs)\n        return newroute\n\n    app = Flask(__name__)\n    app.route = prefix_route(app.route, url_root)\n    translation_server = TranslationServer()\n    translation_server.start(config_file)\n\n    @app.route(\"/translate\", methods=[\"POST\"])\n    def translate():\n        inputs = request.get_json(force=True)\n        out = {}\n        try:\n            trans, scores, n_best, _, aligns, align_scores = translation_server.run(\n                inputs\n            )\n            assert len(trans) == len(inputs) * n_best\n            assert len(scores) == len(inputs) * n_best\n            assert len(aligns) == len(inputs) * n_best\n\n            out = [[] for _ in range(n_best)]\n            for i in range(len(trans)):\n                response = {\n                    \"src\": inputs[i // n_best][\"src\"],\n                    \"tgt\": trans[i],\n                    \"n_best\": n_best,\n                    \"pred_score\": scores[i],\n                }\n                if len(aligns[i]) > 0 and aligns[i][0] is not None:\n                    response[\"align\"] = aligns[i]\n                    response[\"align_score\"] = align_scores[i]\n                out[i % n_best].append(response)\n        except ServerModelError as e:\n            model_id = inputs[0].get(\"id\")\n            translation_server.models[model_id].unload()\n            out[\"error\"] = str(e)\n            out[\"status\"] = STATUS_ERROR\n        return jsonify(out)\n\n    serve(app, host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nfrom waitress import serve\nfrom flask import Flask, request, jsonify\n\nclass TranslationServer:\n    def __init__(self, config_file):\n        self.config = self._load_config(config_file)\n        self.translator = self._initialize_translator()\n\n    def _load_config(self, config_file):\n        with open(config_file, 'r') as f:\n            return json.load(f)\n\n    def _initialize_translator(self):\n        # Placeholder for actual translation initialization\n        return \"Translator Initialized\"\n\n    def translate(self, text, source_lang, target_lang):\n        # Placeholder for actual translation logic\n        return {\"translated_text\": text[::-1], \"source_language\": source_lang, \"target_language\": target_lang}\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    app = Flask(__name__)\n    translation_server = TranslationServer(config_file)\n\n    @app.route(f\"{url_root}/translate\", methods=[\"POST\"])\n    def translate():\n        data = request.get_json()\n        text = data.get(\"text\")\n        source_lang = data.get(\"source_language\")\n        target_lang = data.get(\"target_language\")\n\n        if not all([text, source_lang, target_lang]):\n            return jsonify({\"error\": \"Missing required parameters\"}), 400\n\n        try:\n            result = translation_server.translate(text, source_lang, target_lang)\n            return jsonify(result)\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    serve(app, host=host, port=port)"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request method identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter: 'time' (integer) - milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' after specified delay\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: String indicating the HTTP request method used\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    import time\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    response = 'Response from Flask'\n    return response, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return method, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Flask-based HTTP server for handling subscription requests that generates configuration files for various proxy clients based on user agent and request parameters.\n\nClass Description: SubscriptionServer is a Flask application wrapper that handles subscription requests and generates appropriate configuration files for different proxy clients (Clash, WireGuard, Surge, etc.). It includes route setup, request handling, and response generation logic.\n\nAttributes:\n- app: Flask - The Flask application instance\n- logger: logging.Logger - Logger instance for application logging\n- fake: Faker - Faker instance for generating random names\n\nMethods:\n- __init__(app_name: str = \"web\", logger: logging.Logger = None) -> None - Initializes the Flask application, sets up logging, and configures routes\n- _setup_routes() -> None - Sets up the Flask routes for handling subscription requests\n- _handle_subscription(sub_type: str) -> Any - Processes subscription requests and generates appropriate configuration files based on the subscription type\n- run(host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None - Starts the Flask server with specified host, port and debug settings",
    "Canonical_solution": "from flask import Flask, request, make_response\nimport logging\nfrom faker import Faker\nfrom typing import Dict, Any\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None):\n        self.app = Flask(app_name)\n        self.logger = logger if logger else logging.getLogger()\n        self.fake = Faker()\n        \n        # Configure logger\n        for handler in self.app.logger.handlers:\n            self.app.logger.removeHandler(handler)\n        for handler in self.logger.handlers:\n            self.app.logger.addHandler(handler)\n        self.app.logger.setLevel(self.logger.level)\n        \n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/sub', methods=['GET'])\n        def httpAutoSub():\n            user_agent = request.headers.get('User-Agent', 'unknown').lower()\n            sub_type = getSubTypeFromUA(user_agent)\n            return self._handle_subscription(sub_type)\n\n        @self.app.route('/api/<string:sub_type>', methods=['GET'])\n        def httpSubscription(sub_type: str):\n            return self._handle_subscription(sub_type)\n\n    def _handle_subscription(self, sub_type: str) -> Any:\n        user_agent = request.headers.get('User-Agent', 'unknown').lower()\n        account = getCurrentAccount(self.logger)\n        best = request.args.get('best', 'false').lower() == \"true\" or False\n        random_name = request.args.get('randomName', 'false').lower() == \"true\" or False\n        proxy_format = request.args.get('proxyFormat', 'full').lower()\n        ipv6 = request.args.get('ipv6', 'false').lower() == \"true\" or False\n\n        headers = {\n            'Content-Type': 'application/x-yaml; charset=utf-8',\n            \"Subscription-Userinfo\": f\"upload=0; download={account.usage}; total={account.quota}; \"\n                                    f\"expire=253388144714\"\n        }\n\n        is_android = \"android\" in user_agent\n\n        if sub_type == \"clash\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=False, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"meta\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=True, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"wireguard\":\n            file_data = generateWireguardSubFile(account, self.logger, best=best, ipv6=ipv6)\n            file_name = f'WireGuard-{self.fake.lexify(\"????????????\").lower()}.conf'\n        elif sub_type == \"surge\":\n            file_data = generateSurgeSubFile(account, self.logger, best=best, random_name=random_name,\n                                           proxy_format=proxy_format, ipv6=ipv6)\n            file_name = f'Surge-{self.fake.color_name()}.conf'\n        elif sub_type == 'shadowrocket':\n            file_data = generateShadowRocketSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Shadowrocket-{self.fake.color_name()}.conf'\n        elif sub_type == 'sing-box':\n            file_data = generateSingBoxSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'SingBox-{self.fake.color_name()}.json'\n        elif sub_type == 'loon':\n            file_data = generateLoonSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Loon-{self.fake.color_name()}.conf'\n        elif sub_type == \"only_proxies\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format='with_groups',\n                                           random_name=random_name, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        else:\n            return {\n                'code': 400,\n                'message': 'Unsupported sub type.'\n            }, 400\n\n        headers['Content-Disposition'] = f'attachment; filename=\"{file_name}\"'\n        response = make_response(file_data)\n        response.headers = headers\n        return response\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, send_file\nimport logging\nimport io\nfrom faker import Faker\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None):\n        self.app = Flask(app_name)\n        self.logger = logger or logging.getLogger(__name__)\n        self.fake = Faker()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/subscribe/<sub_type>', methods=['GET'])\n        def subscribe(sub_type):\n            return self._handle_subscription(sub_type)\n\n    def _handle_subscription(self, sub_type: str):\n        try:\n            if sub_type == 'clash':\n                config = self._generate_clash_config()\n            elif sub_type == 'wireguard':\n                config = self._generate_wireguard_config()\n            elif sub_type == 'surge':\n                config = self._generate_surge_config()\n            else:\n                return \"Unsupported subscription type\", 400\n\n            return send_file(\n                io.BytesIO(config.encode('utf-8')),\n                mimetype='text/plain',\n                as_attachment=True,\n                download_name=f'subscription_{sub_type}.conf'\n            )\n        except Exception as e:\n            self.logger.error(f\"Error generating subscription: {e}\")\n            return \"Internal server error\", 500\n\n    def _generate_clash_config(self):\n        return \"\"\"proxies:\n  - name: {}\n    type: ss\n    server: {}\n    port: {}\n    cipher: aes-256-gcm\n    password: {}\n\"\"\".format(self.fake.name(), self.fake.ipv4(), self.fake.random_int(min=1000, max=9999), self.fake.password())\n\n    def _generate_wireguard_config(self):\n        return \"\"\"[Interface]\nPrivateKey = {}\nAddress = {}\nDNS = {}\n\n[Peer]\nPublicKey = {}\nAllowedIPs = 0.0.0.0/0\nEndpoint = {}:{}\nPersistentKeepalive = 25\n\"\"\".format(self.fake.text(max_nb_chars=44), self.fake.ipv4(), self.fake.ipv4(), self.fake.text(max_nb_chars=44), self.fake.ipv4(), self.fake.random_int(min=1000, max=9999))\n\n    def _generate_surge_config(self):\n        return \"\"\"[General]\nproxy = {}\n[Proxy]\n{} = shadowsocks,{},{},{}\n\"\"\".format(self.fake.name(), self.fake.name(), self.fake.ipv4(), self.fake.random_int(min=1000, max=9999), self.fake.password())\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True):\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a Flask web application that serves HTML templates and CSV files based on user requests.\n\nFunction Description: The application consists of two main routes: one for serving the main HTML page and another for serving CSV files based on a user ID parameter.\n\nInput:\n- For index(): No input parameters\n- For get_data_for_uid(uid): \n  uid: int - The user ID used to locate the corresponding CSV file\n\nOutput:\n- For index(): Returns the rendered main.html template\n- For get_data_for_uid(uid): Returns the CSV file corresponding to the given user ID or raises a 404 error if not found",
    "Canonical_solution": "from flask import Flask, render_template, send_file\n\napp = Flask('stalky')\n\n@app.route('/')\ndef index():\n    return render_template(\"main.html\")\n\n@app.route('/data/<int:uid>')\ndef get_data_for_uid(uid):\n    return send_file(\"generated_graphs/csv/{uid}.csv\".format(uid=uid))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, send_from_directory, abort\nimport os\n\napp = Flask(__name__)\nCSV_DIR = 'csv_files'\n\n@app.route('/')\ndef index():\n    return render_template('main.html')\n\n@app.route('/data/<int:uid>.csv')\ndef get_data_for_uid(uid):\n    csv_path = os.path.join(CSV_DIR, f'{uid}.csv')\n    if not os.path.exists(csv_path):\n        abort(404)\n    return send_from_directory(CSV_DIR, f'{uid}.csv', as_attachment=True)"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Flask-based HTTP server for model inference that provides RESTful APIs to list available models and perform inference using specified models.\n\nClass Description: InferenceServer is a class that encapsulates a Flask web server for serving machine learning models. It loads models from specified directories, sets up API endpoints for model listing and inference, and handles JSON serialization of NumPy data types.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- api: [flask_restplus.Api] - RESTPlus API instance for route management\n- inferencers: [dict] - Dictionary storing loaded model inferencers with IDs as keys\n\nMethods:\n- __init__([models_dirs: list[str]]) -> None - Initializes the server and loads models from specified directories\n- _load_models([models_dirs: list[str]]) -> None - Private method to load models from given directories\n- _setup_routes() -> None - Private method to define API routes and handlers\n- run([host: str, port: int]) -> None - Starts the Flask server on specified host and port\n\nNested Classes:\n- ModelListEndpoint(Resource) - Handles GET requests to list available models\n  - get() -> list[dict] - Returns list of loaded models with their metadata\n\n- InferenceEndpoint(Resource) - Handles POST requests for model inference\n  - post([model_id: int]) -> dict/str - Performs inference using specified model and returns results\n\nHelper Functions:\n- resp_json([data: Any, code: int, headers: dict]) -> flask.Response - Custom JSON response handler with NumPy serialization support\n\nCustom Encoder:\n- NumpyEncoder(json.JSONEncoder) - Custom JSON encoder that handles NumPy arrays and float32 types",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom flask_cors import CORS\nfrom flask_restplus import Api, Resource\nimport json\nimport numpy as np\n\nclass NumpyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        if isinstance(obj, np.float32):\n            return str(obj)\n        return json.JSONEncoder.default(self, obj)\n\nclass InferenceServer:\n    def __init__(self, models_dirs=[\"saved_models\", \"base_models\"]):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.api = Api(self.app, debug=True, validate=True, version=\"1.0\", title=\"FARM NLP APIs\")\n        self.app.config[\"JSON_SORT_KEYS\"] = True\n        self.app.config[\"RESTPLUS_VALIDATE\"] = True\n        \n        self.inferencers = {}\n        self._load_models(models_dirs)\n        self._setup_routes()\n\n    def _load_models(self, models_dirs):\n        model_paths = []\n        for model_dir in models_dirs:\n            path = Path(model_dir)\n            if path.is_dir():\n                models = [f for f in path.iterdir() if f.is_dir()]\n                model_paths.extend(models)\n\n        for idx, model_dir in enumerate(model_paths):\n            self.inferencers[idx + 1] = Inferencer.load(str(model_dir), num_processes=0)\n\n    def _setup_routes(self):\n        @self.api.route(\"/models\")\n        class ModelListEndpoint(Resource):\n            def get(self):\n                resp = []\n                for idx, model in self.inferencers.items():\n                    prediction_type = model.model.prediction_heads[0].model_type\n                    _res = {\n                        \"id\": idx,\n                        \"name\": model.name,\n                        \"prediction_type\": prediction_type,\n                        \"language\": model.language,\n                    }\n                    resp.append(_res)\n                return resp\n\n        @self.api.route(\"/models/<int:model_id>/inference\")\n        class InferenceEndpoint(Resource):\n            def post(self, model_id):\n                model = self.inferencers.get(model_id, None)\n                if not model:\n                    return \"Model not found\", 404\n\n                dicts = request.get_json().get(\"input\", None)\n                if not dicts:\n                    return {}\n                results = model.inference_from_dicts(dicts=dicts)\n                return results[0]\n\n        @self.api.representation(\"application/json\")\n        def resp_json(data, code, headers=None):\n            resp = make_response(json.dumps(data, cls=NumpyEncoder), code)\n            resp.headers.extend(headers or {})\n            return resp\n\n    def run(self, host=\"0.0.0.0\", port=5000):\n        self.app.run(host=host, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nimport numpy as np\nfrom flask import Flask, request, Response\nfrom flask_restplus import Api, Resource, fields\n\nclass NumpyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, (np.integer, np.floating, np.bool_)):\n            return obj.item()\n        elif isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super(NumpyEncoder, self).default(obj)\n\ndef resp_json(data, code=200, headers=None):\n    return Response(json.dumps(data, cls=NumpyEncoder), status=code, mimetype=\"application/json\", headers=headers)\n\nclass InferenceServer:\n    def __init__(self, models_dirs=None):\n        self.app = Flask(__name__)\n        self.api = Api(self.app, version='1.0', title='Inference Server API')\n        self.inferencers = {}\n        self._load_models(models_dirs or [])\n        self._setup_routes()\n\n    def _load_models(self, models_dirs):\n        for model_dir in models_dirs:\n            if os.path.isdir(model_dir):\n                model_id = len(self.inferencers) + 1\n                try:\n                    # Simulating model loading - replace with actual model loading logic\n                    self.inferencers[model_id] = {\n                        'id': model_id,\n                        'path': model_dir,\n                        'metadata': {'name': os.path.basename(model_dir)}\n                    }\n                except Exception as e:\n                    print(f\"Failed to load model from {model_dir}: {str(e)}\")\n\n    def _setup_routes(self):\n        ns = self.api.namespace('inference', description='Model inference operations')\n\n        model_list_model = self.api.model('Model', {\n            'id': fields.Integer(required=True, description='Model ID'),\n            'path': fields.String(required=True, description='Model file path'),\n            'metadata': fields.Raw(description='Model metadata')\n        })\n\n        @ns.route('/models')\n        class ModelListEndpoint(Resource):\n            @ns.marshal_with(model_list_model, as_list=True)\n            def get(self):\n                return list(self.inferencers.values())\n\n        @ns.route('/models/<int:model_id>/infer')\n        class InferenceEndpoint(Resource):\n            def post(self, model_id):\n                if model_id not in self.inferencers:\n                    return resp_json({'error': 'Model not found'}, 404)\n                data = request.get_json()\n                if not data:\n                    return resp_json({'error': 'No input data provided'}, 400)\n                # Simulating inference - replace with actual inference logic\n                result = {'prediction': np.array([0.9, 0.1]), 'model_id': model_id}\n                return resp_json(result)\n\n    def run(self, host='0.0.0.0', port=5000):\n        self.app.run(host=host, port=port, debug=False)"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that allows users to submit reviews, get sentiment predictions, and provide feedback to improve the classifier.\n\nClass Description: ReviewClassifier is a Flask web application that classifies movie reviews as positive or negative using a pre-trained classifier. It provides an interface for users to submit reviews, view predictions, and give feedback which is used to update the classifier and store in a SQLite database.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- clf: [sklearn classifier] - Pre-trained sentiment classifier loaded from pickle file\n- db: [str] - Path to SQLite database file for storing reviews\n- vect: [sklearn vectorizer] - Text vectorizer for feature extraction\n\nMethods:\n- __init__: [constructor]() -> None - Initializes the Flask app, loads classifier and vectorizer, sets up routes\n- classify: [classify](document: str) -> tuple[str, float] - Classifies a review document and returns (sentiment_label, probability)\n- train: [train](document: str, y: int) -> None - Updates classifier with new training example\n- sqlite_entry: [sqlite_entry](document: str, y: int) -> None - Stores review and sentiment in database\n- index: [index]() -> str - Renders main review submission form\n- results: [results]() -> str - Processes submitted review and renders prediction results\n- feedback: [feedback]() -> str - Handles user feedback and updates model/database\n- run: [run]() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self.vect = vect\n        \n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = self.vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                content=review,\n                                prediction=y,\n                                probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                            [validators.DataRequired(),\n                            validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\nimport sqlite3\nimport pickle\nimport os\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass ReviewClassifier:\n    def __init__(self, db_path='reviews.db', model_path='classifier.pkl', vectorizer_path='vectorizer.pkl'):\n        self.app = Flask(__name__)\n        self.db = db_path\n        self.clf = LogisticRegression()\n        self.vect = TfidfVectorizer()\n        if os.path.exists(model_path):\n            with open(model_path, 'rb') as f:\n                self.clf = pickle.load(f)\n        if os.path.exists(vectorizer_path):\n            with open(vectorizer_path, 'rb') as f:\n                self.vect = pickle.load(f)\n        self._init_db()\n        self._setup_routes()\n\n    def _init_db(self):\n        with sqlite3.connect(self.db) as conn:\n            conn.execute('CREATE TABLE IF NOT EXISTS reviews (id INTEGER PRIMARY KEY, text TEXT, sentiment INTEGER)')\n\n    def _setup_routes(self):\n        @self.app.route('/', methods=['GET', 'POST'])\n        def index():\n            if request.method == 'POST':\n                return redirect(url_for('results', text=request.form['review']))\n            return render_template('index.html')\n\n        @self.app.route('/results/<text>')\n        def results(text):\n            X = self.vect.transform([text])\n            proba = self.clf.predict_proba(X)[0]\n            sentiment = 1 if proba[1] > proba[0] else 0\n            return render_template('results.html', text=text, sentiment=sentiment, probability=round(max(proba), 2), positive=proba[1], negative=proba[0])\n\n        @self.app.route('/feedback', methods=['POST'])\n        def feedback():\n            text = request.form['text']\n            sentiment = int(request.form['sentiment'])\n            self.sqlite_entry(text, sentiment)\n            self.train(text, sentiment)\n            return redirect(url_for('index'))\n\n    def classify(self, document):\n        X = self.vect.transform([document])\n        proba = self.clf.predict_proba(X)[0]\n        sentiment = 1 if proba[1] > proba[0] else 0\n        return ('positive' if sentiment else 'negative'), max(proba)\n\n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y], classes=[0, 1])\n        with open('classifier.pkl', 'wb') as f:\n            pickle.dump(self.clf, f)\n\n    def sqlite_entry(self, document, y):\n        with sqlite3.connect(self.db) as conn:\n            conn.execute('INSERT INTO reviews (text, sentiment) VALUES (?, ?)', (document, y))\n            conn.commit()\n\n    def run(self):\n        self.app.run(debug=True)"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code sets up a Flask web server with three routes:\n1. '/respond' - Simulates a delayed response based on an input parameter\n2. '/request_type' - Returns the HTTP method used in the request\n3. '/json' - Returns a simple JSON response\n\nInput:\n- For '/respond' route: Query parameter 'time' (in milliseconds)\n- For other routes: No specific input parameters required\n\nOutput:\n- For '/respond': A text response after specified delay with CORS headers\n- For '/request_type': A text response indicating the request method with CORS headers\n- For '/json': A JSON response with a greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    import time\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    response = \"Delayed response\"\n    return response, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f\"Request method: {method}\", 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({\"message\": \"Hello, world!\"}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles incoming requests, processes them with OpenTelemetry tracing, and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes GET requests to the \"/server_request\" endpoint. It starts a new OpenTelemetry span for tracing purposes, extracts the request context, collects request attributes, processes the request parameter, and returns a simple response.\n\nInput:\n- request: Flask request object containing HTTP request data\n- request.args.get(\"param\"): Optional query parameter passed in the URL\n\nOutput:\n- Returns a string \"served\" as the HTTP response\n- Side effect: Prints the value of the \"param\" query parameter if present\n- Side effect: Creates OpenTelemetry tracing span with request attributes",
    "Canonical_solution": "from flask import Flask, request\nfrom opentelemetry.instrumentation.wsgi import collect_request_attributes\nfrom opentelemetry.propagate import extract\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\nfrom opentelemetry.trace import SpanKind, get_tracer_provider, set_tracer_provider\n\napp = Flask(__name__)\nset_tracer_provider(TracerProvider())\ntracer = get_tracer_provider().get_tracer(__name__)\nget_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\n@app.route(\"/server_request\")\ndef server_request():\n    with tracer.start_as_current_span(\n        \"server_request\",\n        context=extract(request.headers),\n        kind=SpanKind.SERVER,\n        attributes=collect_request_attributes(request.environ),\n    ):\n        print(request.args.get(\"param\"))\n        return \"served\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\nfrom opentelemetry import trace\n\napp = Flask(__name__)\ntracer = trace.get_tracer(__name__)\n\n@app.route(\"/server_request\", methods=[\"GET\"])\ndef server_request():\n    param = request.args.get(\"param\")\n    with tracer.start_as_current_span(\"server_request\") as span:\n        span.set_attribute(\"http.method\", request.method)\n        span.set_attribute(\"http.route\", request.path)\n        if param:\n            print(param)\n    return \"served\""
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes credit card application data and returns a prediction result indicating the probability of approval and a binary decision.\n\nFunction Description: The function implements a prediction endpoint for a credit card approval system. It receives client data in JSON format, processes it through a machine learning model (using pre-loaded `dv` for feature transformation and `model` for prediction), and returns the prediction results including the approval probability and a binary decision.\n\nInput: \n- JSON payload containing client data for credit card application (received via HTTP POST request)\n\nOutput: \n- JSON response containing:\n  - 'get_card_probability': float - Probability of getting the credit card (between 0 and 1)\n  - 'get_card': boolean - Binary decision indicating whether the card is approved (True if probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\n\napp = Flask('credict-card')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    client = request.get_json()\n\n    X = dv.transform([client])\n    y_pred = model.predict_proba(X)[0, 1]\n    get_card = y_pred >= 0.5\n\n    result = {\n        'get_card_probability': float(y_pred),\n        'get_card': bool(get_card)\n    }\n\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Assume dv and model are pre-loaded\n# dv = ... (dict vectorizer)\n# model = ... (trained model)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n    X = dv.transform([data])\n    y_pred = model.predict_proba(X)[0][1]\n    get_card = y_pred >= 0.5\n    return jsonify({\n        'get_card_probability': float(y_pred),\n        'get_card': bool(get_card)\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Flask-based API service that handles document ingestion, question answering using a language model, and model downloading functionality.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web service for document processing and question answering. It provides endpoints for ingesting documents, querying an AI model, and downloading the required model files.\n\nAttributes:\n- app: Flask - The Flask application instance\n- embeddings_model_name: str - Name of the embeddings model to use\n- persist_directory: str - Directory to store persistent data\n- model_type: str - Type of the language model\n- model_path: str - Path to the model file\n- model_n_ctx: str - Context size for the model\n- llm: GPT4All - The language model instance\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up CORS\n- _setup_routes() -> None - Defines all API routes and their handlers\n- _load_documents(source_dir: str) -> List[Document] - Loads documents from a directory\n- _load_single_document(file_path: str) -> Document - Loads a single document\n- run() -> None - Starts the Flask server\n- _load_model() -> None - Loads the language model if available\n\nRoute Handlers (internal methods):\n- ingest_data() -> Response - Handles document ingestion (GET /ingest)\n- get_answer() -> Response - Handles question answering (POST /get_answer)\n- download_and_save() -> Response - Handles model downloading (GET /download_model)\n\nThe class integrates with LangChain for document processing and GPT4All for local language model inference, providing a complete API for document-based question answering.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom flask_cors import CORS\nimport os\nimport glob\nfrom typing import List\nimport requests\nfrom langchain.chains import RetrievalQA\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\nfrom langchain.vectorstores import Chroma\nfrom langchain.llms import GPT4All\nfrom constants import CHROMA_SETTINGS\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.embeddings_model_name = os.environ.get(\"EMBEDDINGS_MODEL_NAME\")\n        self.persist_directory = os.environ.get('PERSIST_DIRECTORY')\n        self.model_type = os.environ.get('MODEL_TYPE')\n        self.model_path = os.environ.get('MODEL_PATH')\n        self.model_n_ctx = os.environ.get('MODEL_N_CTX')\n        self.llm = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/ingest', methods=['GET'])\n        def ingest_data():\n            source_directory = os.environ.get('SOURCE_DIRECTORY', 'source_documents')\n            print(f\"Loading documents from {source_directory}\")\n            chunk_size = 500\n            chunk_overlap = 50\n            documents = self._load_documents(source_directory)\n            text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)\n            texts = text_splitter.split_documents(documents)\n            print(f\"Loaded {len(documents)} documents from {source_directory}\")\n            print(f\"Split into {len(texts)} chunks of text (max. {chunk_size} characters each)\")\n\n            embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n            db = Chroma.from_documents(texts, embeddings, persist_directory=self.persist_directory, client_settings=CHROMA_SETTINGS)\n            db.persist()\n            db = None\n            return jsonify(response=\"Success\")\n\n        @self.app.route('/get_answer', methods=['POST'])\n        def get_answer():\n            query = request.json\n            embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n            db = Chroma(persist_directory=self.persist_directory, embedding_function=embeddings, client_settings=CHROMA_SETTINGS)\n            retriever = db.as_retriever()\n            if self.llm is None:\n                return \"Model not downloaded\", 400    \n            qa = RetrievalQA.from_chain_type(llm=self.llm, chain_type=\"stuff\", retriever=retriever, return_source_documents=True)\n            if query is not None and query != \"\":\n                res = qa(query)\n                answer, docs = res['result'], res['source_documents']\n                source_data = [{\"name\": document.metadata[\"source\"]} for document in docs]\n                return jsonify(query=query, answer=answer, source=source_data)\n            return \"Empty Query\", 400\n\n        @self.app.route('/download_model', methods=['GET'])\n        def download_and_save():\n            url = 'https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin'\n            filename = 'ggml-gpt4all-j-v1.3-groovy.bin'\n            models_folder = 'models'\n\n            if not os.path.exists(models_folder):\n                os.makedirs(models_folder)\n            response = requests.get(url, stream=True)\n            total_size = int(response.headers.get('content-length', 0))\n            bytes_downloaded = 0\n            file_path = f'{models_folder}/{filename}'\n            if os.path.exists(file_path):\n                return jsonify(response=\"Download completed\")\n\n            with open(file_path, 'wb') as file:\n                for chunk in response.iter_content(chunk_size=4096):\n                    file.write(chunk)\n                    bytes_downloaded += len(chunk)\n                    progress = round((bytes_downloaded / total_size) * 100, 2)\n                    print(f'Download Progress: {progress}%')\n            callbacks = [StreamingStdOutCallbackHandler()]\n            self.llm = GPT4All(model=self.model_path, n_ctx=self.model_n_ctx, backend='gptj', callbacks=callbacks, verbose=False)\n            return jsonify(response=\"Download completed\")\n\n    def _load_documents(self, source_dir: str) -> List[Document]:\n        all_files = []\n        for ext in LOADER_MAPPING:\n            all_files.extend(glob.glob(os.path.join(source_dir, f\"**/*{ext}\"), recursive=True))\n        return [self._load_single_document(file_path) for file_path in all_files]\n\n    def _load_single_document(self, file_path: str) -> Document:\n        ext = \".\" + file_path.rsplit(\".\", 1)[-1]\n        if ext in LOADER_MAPPING:\n            loader_class, loader_args = LOADER_MAPPING[ext]\n            loader = loader_class(file_path, **loader_args)\n            return loader.load()[0]\n        raise ValueError(f\"Unsupported file extension '{ext}'\")\n\n    def run(self):\n        self._load_model()\n        self.app.run(host=\"0.0.0.0\", debug=False)\n\n    def _load_model(self):\n        filename = 'ggml-gpt4all-j-v1.3-groovy.bin'\n        models_folder = 'models'\n        file_path = f'{models_folder}/{filename}'\n        if os.path.exists(file_path):\n            callbacks = [StreamingStdOutCallbackHandler()]\n            self.llm = GPT4All(model=self.model_path, n_ctx=self.model_n_ctx, backend='gptj', callbacks=callbacks, verbose=False)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nfrom langchain.document_loaders import TextLoader, PDFLoader\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\nfrom langchain.embeddings import HuggingFaceInstructEmbeddings\nfrom langchain.chains import RetrievalQA\nfrom gpt4all import GPT4All\nimport os\nimport threading\nimport requests\nimport tempfile\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.embeddings_model_name = \"sentence-transformers/instruct-xlm-r\"\n        self.persist_directory = \"db\"\n        self.model_type = \"gpt4all\"\n        self.model_path = \"models/gpt4all-falcon-180b-q4_0.gguf\"\n        self.model_n_ctx = \"2048\"\n        self.llm = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/ingest\", methods=[\"GET\"])\n        def ingest_data():\n            source_dir = \"data\"\n            if not os.path.exists(source_dir):\n                return jsonify({\"error\": \"Source directory does not exist\"}), 400\n            documents = self._load_documents(source_dir)\n            if not documents:\n                return jsonify({\"error\": \"No documents found in the source directory\"}), 400\n            try:\n                embeddings = HuggingFaceInstructEmbeddings(model_name=self.embeddings_model_name)\n                db = Chroma.from_documents(documents, embeddings, persist_directory=self.persist_directory)\n                db.persist()\n                return jsonify({\"status\": \"success\", \"message\": \"Documents ingested and stored successfully\"}), 200\n            except Exception as e:\n                return jsonify({\"error\": str(e)}), 500\n\n        @self.app.route(\"/get_answer\", methods=[\"POST\"])\n        def get_answer():\n            if not self.llm:\n                return jsonify({\"error\": \"Model not loaded\"}), 500\n            data = request.json\n            question = data.get(\"question\")\n            if not question:\n                return jsonify({\"error\": \"Question is required\"}), 400\n            try:\n                embeddings = HuggingFaceInstructEmbeddings(model_name=self.embeddings_model_name)\n                db = Chroma(persist_directory=self.persist_directory, embedding_function=embeddings)\n                qa_chain = RetrievalQA.from_chain_type(llm=self.llm, chain_type=\"stuff\", retriever=db.as_retriever())\n                answer = qa_chain.run(question)\n                return jsonify({\"answer\": answer}), 200\n            except Exception as e:\n                return jsonify({\"error\": str(e)}), 500\n\n        @self.app.route(\"/download_model\", methods=[\"GET\"])\n        def download_and_save():\n            model_url = \"https://github.com/nomic-ai/gpt4all/releases/download/v3.3/gpt4all-falcon-180b-q4_0.gguf\"\n            model_filename = os.path.basename(model_url)\n            model_path = os.path.join(\"models\", model_filename)\n            if os.path.exists(model_path):\n                return jsonify({\"status\": \"success\", \"message\": \"Model already exists\"}), 200\n            try:\n                with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n                    response = requests.get(model_url, stream=True)\n                    response.raise_for_status()\n                    for chunk in response.iter_content(chunk_size=1024):\n                        if chunk:\n                            tmp_file.write(chunk)\n                    tmp_file_path = tmp_file.name\n                os.rename(tmp_file_path, model_path)\n                return jsonify({\"status\": \"success\", \"message\": \"Model downloaded and saved successfully\"}), 200\n            except Exception as e:\n                return jsonify({\"error\": str(e)}), 500\n\n    def _load_documents(self, source_dir: str) -> list:\n        documents = []\n        for filename in os.listdir(source_dir):\n            file_path = os.path.join(source_dir, filename)\n            if os.path.isfile(file_path):\n                if filename.endswith(\".txt\"):\n                    loader = TextLoader(file_path)\n                elif filename.endswith(\".pdf\"):\n                    loader = PDFLoader(file_path)\n                else:\n                    continue\n                docs = loader.load()\n                documents.extend(docs)\n        return documents\n\n    def _load_single_document(self, file_path: str) -> list:\n        if not os.path.exists(file_path):\n            return []\n        if file_path.endswith(\".txt\"):\n            loader = TextLoader(file_path)\n        elif file_path.endswith(\".pdf\"):\n            loader = PDFLoader(file_path)\n        else:\n            return []\n        return loader.load()\n\n    def run(self):\n        self._load_model()\n        self.app.run(host=\"0.0.0.0\", port=5000)\n\n    def _load_model(self):\n        if self.model_type == \"gpt4all\" and os.path.exists(self.model_path):\n            try:\n                self.llm = GPT4All(model=self.model_path, n_ctx=int(self.model_n_ctx))\n            except Exception as e:\n                print(f\"Error loading model: {e}\")\n        else:\n            print(\"Model type not supported or model file not found\")"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that converts text to speech (TTS) and returns the generated audio as a WAV file.\n\nFunction Description: The function `tts()` is a Flask route handler that processes GET requests to the '/api/tts' endpoint. It takes text input as a query parameter, synthesizes it into speech using a TTS synthesizer, and returns the audio as a WAV file in the response.\n\nInput: \n- text: [str] (passed as a query parameter 'text' in the GET request) - The text to be converted to speech.\n\nOutput:\n- [Flask Response] - A response containing the synthesized audio in WAV format with the appropriate MIME type ('audio/wav'). The audio data is streamed from memory using a BytesIO buffer.\n\nNote: The function assumes the existence of a pre-initialized `synthesizer` object capable of performing TTS (text-to-speech) conversion and saving the output as WAV format. The actual implementation of the synthesizer is not shown in this reference code.",
    "Canonical_solution": "from flask import Flask, render_template, request, send_file\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    text = request.args.get('text')\n    print(\" > Model input: {}\".format(text))\n    wavs = synthesizer.tts(text)\n    out = io.BytesIO()\n    synthesizer.save_wav(wavs, out)\n    return send_file(out, mimetype='audio/wav')\n\ndef main():\n    app.run(debug=args.debug, host='0.0.0.0', port=args.port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response\nfrom io import BytesIO\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    import synthesize  # Assuming this module provides the synthesizer\n    text = request.args.get('text')\n    if not text:\n        return \"Text parameter is required\", 400\n\n    audio_buffer = BytesIO()\n    synthesizer.synthesize(text, audio_buffer)\n    audio_buffer.seek(0)\n\n    return Response(audio_buffer, mimetype='audio/wav')"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles various file serving endpoints and a video processing endpoint, with CORS support.\n\nFunction Description: The code implements a Flask web server with multiple routes for serving different types of files (videos, posters, uploads) and processing video streams. It includes health check, file serving, and video propagation endpoints.\n\nInput:\n- For healthy(): None\n- For send_gallery_video(path: str): path parameter as string\n- For send_poster_image(path: str): path parameter as string\n- For send_uploaded_video(path: str): path parameter as string\n- For propagate_in_video(): JSON payload containing session_id and optional start_frame_index\n\nOutput:\n- healthy(): Returns \"OK\" with HTTP status 200\n- send_gallery_video(): Returns file from GALLERY_PATH or raises ValueError\n- send_poster_image(): Returns file from POSTERS_PATH or raises ValueError\n- send_uploaded_video(): Returns file from UPLOADS_PATH or raises ValueError\n- propagate_in_video(): Returns multipart video stream with tracking masks",
    "Canonical_solution": "from flask import Flask, make_response, Request, request, Response, send_from_directory\nfrom flask_cors import CORS\n\napp = Flask(__name__)\ncors = CORS(app, supports_credentials=True)\n\n@app.route(\"/healthy\")\ndef healthy() -> Response:\n    return make_response(\"OK\", 200)\n\n@app.route(f\"/{GALLERY_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_gallery_video(path: str) -> Response:\n    try:\n        return send_from_directory(\n            GALLERY_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{POSTERS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_poster_image(path: str) -> Response:\n    try:\n        return send_from_directory(\n            POSTERS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{UPLOADS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_uploaded_video(path: str):\n    try:\n        return send_from_directory(\n            UPLOADS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(\"/propagate_in_video\", methods=[\"POST\"])\ndef propagate_in_video() -> Response:\n    data = request.json\n    args = {\n        \"session_id\": data[\"session_id\"],\n        \"start_frame_index\": data.get(\"start_frame_index\", 0),\n    }\n\n    boundary = \"frame\"\n    frame = gen_track_with_mask_stream(boundary, **args)\n    return Response(frame, mimetype=\"multipart/x-savi-stream; boundary=\" + boundary)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, send_from_directory, Response\nimport os\nimport json\nimport numpy as np\nimport cv2\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\nGALLERY_PATH = '/path/to/gallery'\nPOSTERS_PATH = '/path/to/posters'\nUPLOADS_PATH = '/path/to/uploads'\n\n@app.route('/healthy')\ndef healthy():\n    return \"OK\", 200\n\n@app.route('/gallery_video/<path:filename>')\ndef send_gallery_video(filename):\n    try:\n        return send_from_directory(GALLERY_PATH, filename)\n    except FileNotFoundError:\n        raise ValueError(f\"File not found in gallery: {filename}\")\n\n@app.route('/poster_image/<path:filename>')\ndef send_poster_image(filename):\n    try:\n        return send_from_directory(POSTERS_PATH, filename)\n    except FileNotFoundError:\n        raise ValueError(f\"File not found in posters: {filename}\")\n\n@app.route('/uploaded_video/<path:filename>')\ndef send_uploaded_video(filename):\n    try:\n        return send_from_directory(UPLOADS_PATH, filename)\n    except FileNotFoundError:\n        raise ValueError(f\"File not found in uploads: {filename}\")\n\n@app.route('/propagate_in_video', methods=['POST'])\ndef propagate_in_video():\n    data = request.get_json()\n    session_id = data.get('session_id')\n    start_frame_index = data.get('start_frame_index', 0)\n\n    # Simulate video processing and mask generation\n    def generate_frames():\n        for frame_idx in range(start_frame_index, 100):  # Example loop over frames\n            # Generate a dummy frame (replace with actual video processing logic)\n            frame = np.zeros((480, 640, 3), dtype=np.uint8)\n            mask = np.zeros((480, 640), dtype=np.uint8)\n            mask[100:200, 150:350] = 255  # Example mask\n\n            # Encode frame and mask as JPEG\n            ret, buf = cv2.imencode('.jpg', frame)\n            if not ret:\n                yield b''\n                break\n            yield b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + buf.tobytes() + b'\\r\\n'\n\n            # Encode mask as PNG\n            ret, mask_buf = cv2.imencode('.png', mask)\n            if not ret:\n                yield b''\n                break\n            yield b'--frame\\r\\nContent-Type: image/png\\r\\n\\r\\n' + mask_buf.tobytes() + b'\\r\\n'\n\n    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a RESTful API gateway service using Flask that handles incoming requests, processes them through an MII client, and provides health check and termination endpoints.\n\nClass Description: RestfulGatewayThread is a threaded Flask server implementation that creates and manages a RESTful API gateway for interacting with an MII client. It handles request processing, health checks, and graceful shutdown.\n\nAttributes:\n\n_deployment_name: str - The name of the MII deployment to connect to\n_rest_host: str - The host address to bind the server to\n_rest_port: int - The port number to listen on\n_rest_procs: int - Number of processes to handle requests\n_stop_event: threading.Event - Event flag to track server status\nserver: werkzeug.serving.BaseWSGIServer - The Flask server instance\n\nMethods:\n\n__init__(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> None - Initializes the thread with server configuration parameters\n_create_server(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> werkzeug.serving.BaseWSGIServer - Creates and configures the Flask server with routes and resources\n_shutdown() -> None - Handles server shutdown after a configured timeout period\nrun() -> None - Starts the server and runs it indefinitely until shutdown\nget_stop_event() -> threading.Event - Returns the stop event for monitoring server status",
    "Canonical_solution": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\nfrom werkzeug.serving import make_server\nimport threading\nimport time\nimport mii\nfrom mii.constants import RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT, RESTFUL_API_PATH\n\nclass RestfulGatewayService(Resource):\n    def __init__(self, deployment_name):\n        super().__init__()\n        self.client = mii.client(deployment_name)\n\n    def post(self):\n        data = request.get_json()\n        result = self.client.generate(**data)\n        return jsonify([r.to_msg_dict() for r in result])\n\nclass RestfulGatewayThread(threading.Thread):\n    def __init__(self, deployment_name, rest_host, rest_port, rest_procs):\n        threading.Thread.__init__(self)\n        self._stop_event = threading.Event()\n        self.server = self._create_server(deployment_name, rest_host, rest_port, rest_procs)\n\n    def _create_server(self, deployment_name, rest_host, rest_port, rest_procs):\n        app = Flask(\"RestfulGateway\")\n\n        @app.route(\"/terminate\", methods=[\"GET\"])\n        def terminate():\n            threading.Thread(target=self._shutdown).start()\n            return \"Shutting down RESTful API gateway server\"\n\n        @app.route(\"/healthz\", methods=[\"GET\"])\n        def healthz():\n            return \"ok\"\n\n        api = Api(app)\n        path = \"/{}/{}\".format(RESTFUL_API_PATH, deployment_name)\n        api.add_resource(RestfulGatewayService, path, resource_class_args=(deployment_name,))\n\n        return make_server(rest_host, rest_port, app, threaded=False, processes=rest_procs)\n\n    def _shutdown(self):\n        time.sleep(RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT)\n        self.server.shutdown()\n\n    def run(self):\n        self.server.serve_forever()\n        self._stop_event.set()\n\n    def get_stop_event(self):\n        return self._stop_event",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import threading\nfrom flask import Flask, jsonify, request\nfrom werkzeug.serving import BaseWSGIServer\nimport time\n\nclass RestfulGatewayThread(threading.Thread):\n    def __init__(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int):\n        super().__init__()\n        self._deployment_name = deployment_name\n        self._rest_host = rest_host\n        self._rest_port = rest_port\n        self._rest_procs = rest_procs\n        self._stop_event = threading.Event()\n        self.server = None\n\n    def _create_server(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> BaseWSGIServer:\n        app = Flask(__name__)\n\n        @app.route('/health', methods=['GET'])\n        def health_check():\n            return jsonify({\"status\": \"healthy\"}), 200\n\n        @app.route('/terminate', methods=['POST'])\n        def terminate():\n            if self._stop_event.is_set():\n                return jsonify({\"error\": \"Server is already stopping\"}), 400\n            self._stop_event.set()\n            return jsonify({\"status\": \"shutdown initiated\"}), 200\n\n        @app.route('/', defaults={'path': ''})\n        @app.route('/<path:path>', methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH'])\n        def proxy(path):\n            # Simulate processing through MII client\n            data = request.get_json()\n            # Process with MII client (placeholder logic)\n            response_data = {\"deployment\": self._deployment_name, \"path\": path, \"data\": data}\n            return jsonify(response_data), 200\n\n        server = BaseWSGIServer((rest_host, rest_port), app.wsgi_app)\n        return server\n\n    def _shutdown(self):\n        timeout = 30  # seconds\n        deadline = time.time() + timeout\n        while not self._stop_event.is_set() and time.time() < deadline:\n            time.sleep(0.1)\n        if not self._stop_event.is_set():\n            self._stop_event.set()\n\n    def run(self):\n        self.server = self._create_server(self._deployment_name, self._rest_host, self._rest_port, self._rest_procs)\n        try:\n            self.server.serve_forever()\n        except KeyboardInterrupt:\n            self._stop_event.set()\n\n    def get_stop_event(self) -> threading.Event:\n        return self._stop_event"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Flask-based HTTP server that manages and controls multiple learner and collector processes, allowing dynamic scaling of these processes through API calls.\n\nClass Description: FlaskOperatorServer is a class that wraps a Flask application to provide RESTful API endpoints for managing learner and collector process replicas. It interacts with a Creator instance to handle the actual process management.\n\nAttributes:\n- app: Flask - The Flask application instance\n- creator: Creator - The process manager that handles learner and collector instances\n- host: str - The host address where the server will run\n- port: int - The port number where the server will listen\n- api_version: str - The version prefix for API endpoints\n\nMethods:\n- __init__(creator, host: str, port: int, api_version: str = 'v1alpha1') -> None - Initializes the Flask server with process manager, host, port, and API version. Sets up route handlers.\n- run() -> None - Starts the Flask application server on the specified host and port.\n- post_replicas() -> dict - Handles POST requests to set the desired number of replicas (route: /{api_version}/replicas). Returns a response dictionary.\n- get_replicas() -> dict - Handles GET requests to retrieve current replica information (route: /{api_version}/replicas). Returns a response dictionary with current resources.",
    "Canonical_solution": "from flask import Flask, request\nimport json\nfrom threading import Thread\nfrom queue import Queue\n\nclass Creator:\n    def __init__(self, learner_addr, collector_addr):\n        self.learner_addr = learner_addr\n        self.collector_addr = collector_addr\n        self.collector_demand = Queue()\n        self.learner_demand = Queue()\n        self.learners = {}\n        self.collectors = {}\n        self.end_flag = False\n\n    def set_target_source(self, learner_target, collector_target):\n        self.collector_demand.put(collector_target)\n        self.learner_demand.put(learner_target)\n\n    def start(self):\n        while not self.end_flag:\n            if self.learner_demand.empty() and self.collector_demand.empty():\n                continue\n            else:\n                learner_demand, collector_demand = None, None\n                if not self.learner_demand.empty():\n                    learner_demand = self.learner_demand.get()\n                if not self.collector_demand.empty():\n                    collector_demand = self.collector_demand.get()\n\n                for i in range(collector_demand):\n                    name, host, port = self.collector_addr[i]\n                    self.collectors[name] = NaiveCollector(host, port, prefix=DATA_PREFIX)\n                    self.collectors[name].start()\n                for i in range(learner_demand):\n                    name, host, port = self.learner_addr[i]\n                    self.learners[name] = NaiveLearner(host, port, prefix=DATA_PREFIX)\n                    self.learners[name].start()\n\n    def close(self):\n        self.end_flag = True\n        for t in self.learners.values():\n            t.close()\n        for t in self.collectors.values():\n            t.close()\n\n    @property\n    def current_resource(self):\n        collectors = {k: {} for k in self.collectors}\n        learners = {k: {} for k in self.learners}\n        return {\"collectors\": collectors, 'learners': learners}\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1'):\n        self.app = Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n        \n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['POST'])\n        def post_replicas():\n            data = json.loads(request.data.decode())\n            collectors = data['collectors'][\"replicas\"]\n            learners = data['learners'][\"replicas\"]\n            self.creator.set_target_source(learners, collectors)\n            return {'success': True, 'code': 0, 'message': '', 'data': ''}\n\n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['GET'])\n        def get_replicas():\n            data = json.loads(request.data.decode())\n            return {'success': True, 'code': 0, 'message': '', 'data': self.creator.current_resource}\n\n    def run(self):\n        self.app.run(host=self.host, port=self.port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1'):\n        self.app = Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(f'/{self.api_version}/replicas', methods=['POST'])\n        def post_replicas():\n            data = request.get_json()\n            replicas = data.get('replicas')\n            if replicas is None:\n                return jsonify({'error': 'Missing replicas parameter'}), 400\n            self.creator.set_replicas(replicas)\n            return jsonify({'status': 'success', 'message': f'Set replicas to {replicas}'})\n\n        @self.app.route(f'/{self.api_version}/replicas', methods=['GET'])\n        def get_replicas():\n            current_replicas = self.creator.get_current_replicas()\n            return jsonify({'status': 'success', 'current_replicas': current_replicas})\n\n    def run(self):\n        self.app.run(host=self.host, port=self.port)"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different aspects of HTTP request handling: delayed response, request method detection, and JSON response.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically detects HTTP method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Access-Control-Allow-Origin: *\n  - After specified delay\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' \n  - Headers: Access-Control-Allow-Origin: *\n- For '/json' endpoint: \n  - JSON response: {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    import time\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type', methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH'])\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles POST requests for game predictions, processing board state data and returning optimal actions.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming game board states, applies either an AlphaZero-inspired MCTS algorithm or a greedy random player to determine the best move, and returns the action as a response.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'board': [string] - Comma-separated string representing the game board state\n\nOutput:\n- HTTP Response containing:\n  - Body: [string] - The predicted action index\n  - Headers: Includes CORS permission ('Access-Control-Allow-Origin': '*')",
    "Canonical_solution": "import os\nimport sys\nimport numpy as np\nfrom flask import Flask, request, Response\n\nsys.path.append(\"..\")\nfrom utils import dotdict\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    board = np.fromstring(request.form['board'], sep=',').reshape(g.getBoardSize())\n\n    use_alpha_zero = True\n    if use_alpha_zero:\n        action = np.argmax(mcts.getActionProb(board, temp=0))\n    else:\n        action = GreedyRandomPlayer(g).play(board)\n\n    resp = Response(str(action))\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=8888)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport numpy as np\n\napp = Flask(__name__)\n\ndef get_optimal_action(board):\n    # Dummy implementation for demonstration\n    # Replace with actual AlphaZero or greedy logic\n    board_array = np.array([int(x) for x in board.split(',')])\n    # Example: return the index of the first zero (empty cell)\n    return np.where(board_array == 0)[0][0]\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    board = request.form.get('board')\n    action = get_optimal_action(board)\n    response = jsonify({'action': action})\n    response.headers.add('Access-Control-Allow-Origin', '*')\n    return response\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Flask web application that handles form submissions, stores the data in both text and CSV formats, and redirects to a thank you page upon successful submission.\n\nFunction Description: The function handles form submissions via POST and GET requests. For POST requests, it extracts form data, writes it to both a text file and CSV file, then redirects to a thank you page. For GET requests or errors, it returns an error message.\n\nInput: \n- HTTP request object (via Flask's request) containing form data with keys: \"email\", \"subject\", and \"message\"\n\nOutput:\n- For successful POST requests: HTTP redirect to './thank_you.html'\n- For GET requests or errors: String error message 'Something went wrong. Try again!'",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect\nimport csv\napp = Flask(__name__)\n\n@app.route('/submit_form', methods=['POST', 'GET'])\ndef submit_form():\n\tif request.method == \"POST\":\n\t\tdata = request.form.to_dict()\n\t\twrite_to_csv(data)\n\t\twrite_to_txt(data)\n\t\treturn redirect('./thank_you.html')\n\telse:\n\t\treturn 'Something went wrong. Try again!'\n\ndef write_to_txt(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.txt\", mode = 'a') as database:\n\t\ttext = database.write(f\"\\n{email},{subject},{message}\")\n\ndef write_to_csv(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.csv\", mode = 'a', newline='') as database2:\n\t\tcsv_writer = csv.writer(database2, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n\t\tcsv_writer.writerow([email, subject, message])",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef handle_form():\n    if request.method == 'POST':\n        try:\n            email = request.form['email']\n            subject = request.form['subject']\n            message = request.form['message']\n\n            with open('form_submissions.txt', 'a') as f:\n                f.write(f\"Email: {email}, Subject: {subject}, Message: {message}\\n\")\n\n            import csv\n            with open('form_submissions.csv', 'a', newline='') as csvfile:\n                writer = csv.writer(csvfile)\n                writer.writerow([email, subject, message])\n\n            return redirect('./thank_you.html')\n        except Exception as e:\n            return 'Something went wrong. Try again!'\n    else:\n        return 'Something went wrong. Try again!'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles streaming responses from a model pipeline, manages concurrent requests, and provides available method information.\n\nClass Description: ModelServer is a Flask application wrapper that provides HTTP endpoints for interacting with a model pipeline. It handles streaming responses, manages concurrent access to the model, and provides information about available methods.\n\nAttributes:\n- app: Flask - The Flask application instance\n- model: Any - The model pipeline object that processes requests\n- cors: CORS - Cross-Origin Resource Sharing configuration for the Flask app\n\nMethods:\n- __init__(model) -> None - Initializes the Flask app and sets up routes\n  - model: Any - The model pipeline object to be used for processing\n- run(host, port, debug) -> None - Starts the Flask server\n  - host: str (default=\"0.0.0.0\") - The host address to bind to\n  - port: int (default=5000) - The port number to listen on\n  - debug: bool (default=True) - Whether to run in debug mode\n- stream() -> Response - Handles streaming requests to the model\n  - Returns: Flask Response - A streaming response with model outputs\n- methods() -> Response - Provides information about available methods\n  - Returns: Flask Response - JSON response containing available methods",
    "Canonical_solution": "from flask import Flask, Response, stream_with_context, request\nfrom flask_cors import CORS, cross_origin\nimport json\nimport concurrent.futures\nimport time\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.model = model\n\n        @self.app.route('/stream', methods=['GET', 'POST'])\n        @cross_origin()\n        def stream():\n            data = json.loads(request.data)\n            user_input = data[\"text\"]\n            top_k = data[\"top_k\"]\n            method = data[\"method\"]\n\n            def generate(model):\n                if model.inuse:\n                    return Response(json.dumps({\n                        \"method_name\": \"error\",\n                        \"error\": \"Model in use\"\n                    }), status=409, mimetype='application/json')\n                \n                model.inuse = True\n                with concurrent.futures.ThreadPoolExecutor() as executor:\n                    future = executor.submit(model.run_pipeline, user_input, method, top_k)\n                    while True:\n                        if model.queue.empty():\n                            if future.done():\n                                break\n                            time.sleep(0.01)\n                            continue\n                        else:\n                            obj = model.queue.get()\n                        if obj[\"method_name\"] == \"unknown\": continue\n                        if obj[\"method_name\"] == \"on_request_end\":\n                            yield json.dumps(obj)\n                            break\n\n                        try:\n                            yield json.dumps(obj) + \"\\n\"\n                        except Exception as e:\n                            model.inuse = False\n                            print(e)\n\n                    try:\n                        future.result()\n                    except Exception as e:\n                        model.inuse = False\n                        print(e)\n\n                model.inuse = False\n\n            return Response(stream_with_context(generate(self.model)))\n\n        @self.app.route('/methods', methods=['GET'])\n        @cross_origin()\n        def methods():\n            return Response(json.dumps({\n                \"methods\": [\"DFS_woFilter_w2\"]\n            }), status=200, mimetype='application/json')\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(use_reloader=False, host=host, debug=debug, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response, jsonify\nfrom flask_cors import CORS\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        self.model = model\n        self.cors = CORS(self.app)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/stream', methods=['POST'])\n        def stream():\n            def generate():\n                for chunk in self.model.process_stream():\n                    yield chunk\n            return Response(generate(), mimetype='text/event-stream')\n\n        @self.app.route('/methods', methods=['GET'])\n        def methods():\n            available_methods = {\n                'stream': 'Handles streaming requests to the model'\n            }\n            return jsonify(available_methods)\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a Flask-based web service that predicts cricket match scores based on various input parameters including teams, overs, runs, and wickets.\n\nFunction Description: The `predict()` function is a Flask route handler that processes POST requests containing cricket match data, converts the input into a feature vector, uses a pre-trained model to predict the score range, and returns an HTML response with the prediction.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'batting-team': [str] - Name of the batting team (one of 8 possible teams)\n  - 'bowling-team': [str] - Name of the bowling team (one of 8 possible teams)\n  - 'overs': [float] - Current over count in the match\n  - 'runs': [int] - Total runs scored so far\n  - 'wickets': [int] - Total wickets lost so far\n  - 'runs_in_prev_5': [int] - Runs scored in previous 5 overs\n  - 'wickets_in_prev_5': [int] - Wickets lost in previous 5 overs\n\nOutput:\n- Rendered HTML template ('index1.html') containing:\n  - 'prediction_text': [str] - Formatted string showing predicted score range (prediction \u00b1 margin)",
    "Canonical_solution": "from flask import Flask, render_template, request\nimport pickle\nimport numpy as np\n\nfilename = 'model.pkl'\nregressor = pickle.load(open(filename, 'rb'))\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    temp_array = list()\n    \n    if request.method == 'POST':\n        \n        batting_team = request.form['batting-team']\n        if batting_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif batting_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif batting_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif batting_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif batting_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif batting_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif batting_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif batting_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        bowling_team = request.form['bowling-team']\n        if bowling_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif bowling_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif bowling_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif bowling_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif bowling_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif bowling_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif bowling_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif bowling_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        overs = float(request.form['overs'])\n        runs = int(request.form['runs'])\n        wickets = int(request.form['wickets'])\n        runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n        wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n        \n        temp_array = temp_array + [overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5]\n        \n        data = np.array([temp_array])\n        my_prediction = int(regressor.predict(data)[0])\n              \n        return render_template('index1.html',prediction_text=\"Predicted score ranges between {} to {}\".format(my_prediction-10,my_prediction+5))",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('cricket_model.pkl', 'rb'))\n\n@app.route('/', methods=['GET', 'POST'])\ndef predict():\n    if request.method == 'POST':\n        batting_team = request.form['batting-team']\n        bowling_team = request.form['bowling-team']\n        overs = float(request.form['overs'])\n        runs = int(request.form['runs'])\n        wickets = int(request.form['wickets'])\n        runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n        wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n\n        # Convert team names to numerical values (assuming a mapping exists)\n        team_mapping = {'Team1': 0, 'Team2': 1, 'Team3': 2, 'Team4': 3, 'Team5': 4, 'Team6': 5, 'Team7': 6, 'Team8': 7}\n        batting_team_num = team_mapping[batting_team]\n        bowling_team_num = team_mapping[bowling_team]\n\n        # Create feature vector\n        features = np.array([[batting_team_num, bowling_team_num, overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5]])\n        \n        # Predict using the model\n        prediction = model.predict(features)[0]\n        margin = model.predict(features, output_dict=True)['std'][0]\n        \n        prediction_text = f\"Predicted Score Range: {prediction - margin} to {prediction + margin}\"\n        \n        return render_template('index1.html', prediction_text=prediction_text)\n    \n    return render_template('index1.html')"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Flask web application that handles HTTP requests on a '/hello' endpoint, processes form data, and returns a rendered HTML template with the processed data.\n\nFunction Description: The function 'hello' is a Flask route handler that responds to both GET and POST requests at the '/hello' endpoint. It retrieves form data from the request, processes it, and renders an HTML template ('greeting.html') with the form data as template variables.\n\nInput: \n- The function receives HTTP requests (GET or POST) containing form data with two fields:\n  - 'say': [str] - The greeting message to be displayed\n  - 'to': [str] - The recipient of the greeting\n\nOutput:\n- Returns a rendered HTML template ('greeting.html') populated with the form data:\n  - Template variable 'say' contains the greeting message\n  - Template variable 'to' contains the recipient name",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    return render_template('greeting.html', say=request.form['say'], to=request.form['to'])\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    say = request.form.get('say', '')\n    to = request.form.get('to', '')\n    return render_template('greeting.html', say=say, to=to)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement an HTTP connection pool class to manage and reuse HTTP connections efficiently, handling connection creation, request execution, and response processing with support for retries, timeouts, and proxy configurations.\n\nClass Description: HTTPConnectionPool is a connection pooling class that manages HTTP connections to a specific host, providing methods to create connections, make requests, and handle responses with configurable timeouts and retries.\n\nAttributes:\n\nscheme: str - The URL scheme (default \"http\")\nConnectionCls: class - The connection class to use (default HTTPConnection)\nhost: str - The target host for connections\nport: int - The target port for connections (default None)\ntimeout: Timeout - The timeout configuration for connections\nretries: Retry - The retry configuration for failed requests\nproxy: str - The proxy URL if configured (default None)\nproxy_headers: dict - Headers to use for proxy connections (default {})\nconn_kw: dict - Additional connection keyword arguments\n\nMethods:\n\n_new_conn() -> HTTPConnection - Creates and returns a new HTTP connection instance, incrementing the connection counter.\n\n_make_request(conn: HTTPConnection, method: str, url: str, timeout: Timeout = _Default, chunked: bool = False, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the specified connection, handling timeouts and errors. Returns the HTTP response.\n\nurlopen(method: str, url: str, body: Optional[bytes] = None, headers: Optional[dict] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Timeout = _Default, pool_timeout: Optional[float] = None, release_conn: Optional[bool] = None, chunked: bool = False, **response_kw) -> HTTPResponse - Main method to open a URL using the connection pool, handling connection management, request execution, and response processing. Returns an HTTPResponse object.",
    "Canonical_solution": "from socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    EmptyPoolError,\n    MaxRetryError,\n    ProtocolError,\n    TimeoutError,\n    SSLError,\n    ProxyError,\n    ClosedPoolError,\n    NewConnectionError,\n)\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import get_host, parse_url\nfrom .response import HTTPResponse\nimport logging\nimport socket\nimport sys\nimport warnings\n\nlog = logging.getLogger(__name__)\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        self.num_connections += 1\n        log.debug(\n            \"Starting new HTTP connection (%d): %s:%s\",\n            self.num_connections,\n            self.host,\n            self.port or \"80\",\n        )\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        self.num_requests += 1\n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n        except (SocketTimeout, BaseSSLError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, \"sock\", None):\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n            raise\n\n        return httplib_response\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n        headers = headers or self.headers\n        retries = retries or self.retries\n\n        conn = None\n        release_this_conn = release_conn\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            if http_tunnel_required:\n                self._prepare_proxy(conn)\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n            response = HTTPResponse.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn if not release_conn else None,\n                retries=retries,\n                **response_kw\n            )\n\n        except (EmptyPoolError, TimeoutError, SSLError, ProxyError, ProtocolError) as e:\n            if conn:\n                conn.close()\n                conn = None\n            raise\n\n        finally:\n            if release_this_conn and conn:\n                self._put_conn(conn)\n\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import threading\nimport time\nfrom urllib.parse import urlparse\nfrom http.client import HTTPConnection, HTTPResponse\nfrom typing import Optional, Dict, Any, Union, cast\nfrom collections import deque\n\nclass Timeout:\n    def __init__(self, connect: float = 60.0, read: float = 60.0):\n        self.connect = connect\n        self.read = read\n\nclass Retry:\n    def __init__(self, total: int = 3, backoff_factor: float = 0.5):\n        self.total = total\n        self.backoff_factor = backoff_factor\n\nclass HTTPConnectionPool:\n    def __init__(self, host: str, port: int = None, scheme: str = \"http\", ConnectionCls: type = HTTPConnection,\n                 timeout: Timeout = Timeout(), retries: Retry = Retry(), proxy: str = None,\n                 proxy_headers: Dict[str, str] = {}, conn_kw: Dict[str, Any] = {}):\n        self.scheme = scheme\n        self.ConnectionCls = ConnectionCls\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.proxy = proxy\n        self.proxy_headers = proxy_headers\n        self.conn_kw = conn_kw\n        self.pool = deque()\n        self.lock = threading.Lock()\n        self.num_connections = 0\n        self.num_persistent_connections = 0\n\n    def _new_conn(self) -> HTTPConnection:\n        self.num_connections += 1\n        conn = self.ConnectionCls(host=self.host, port=self.port, **self.conn_kw)\n        if self.proxy:\n            conn.set_tunnel(self.host, self.port, headers=self.proxy_headers)\n        return conn\n\n    def _make_request(self, conn: HTTPConnection, method: str, url: str, timeout: Timeout = None,\n                      chunked: bool = False, **httplib_request_kw) -> HTTPResponse:\n        if timeout is None:\n            timeout = self.timeout\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            response = conn.getresponse()\n            return response\n        except Exception as e:\n            raise e\n\n    def urlopen(self, method: str, url: str, body: Optional[bytes] = None, headers: Optional[Dict[str, str]] = None,\n                retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True,\n                timeout: Timeout = Timeout(), pool_timeout: Optional[float] = None,\n                release_conn: Optional[bool] = None, chunked: bool = False, **response_kw) -> HTTPResponse:\n        parsed_url = urlparse(url)\n        if assert_same_host and parsed_url.hostname != self.host:\n            raise ValueError(f\"Host mismatch: {parsed_url.hostname} != {self.host}\")\n\n        if retries is None:\n            retries = self.retries\n\n        current_retries = retries.total\n        while current_retries > 0:\n            try:\n                with self.lock:\n                    if not self.pool:\n                        conn = self._new_conn()\n                    else:\n                        conn = self.pool.popleft()\n                    self.num_persistent_connections += 1\n\n                try:\n                    httplib_request_kw = {\n                        'body': body,\n                        'headers': headers,\n                        'chunked': chunked\n                    }\n                    response = self._make_request(conn, method, url, timeout=timeout, chunked=chunked, **httplib_request_kw)\n                    return response\n                except Exception as e:\n                    current_retries -= 1\n                    time.sleep(retries.backoff_factor * (retries.total - current_retries))\n                    if current_retries == 0:\n                        raise e\n            finally:\n                if release_conn is not None and not release_conn:\n                    self.pool.append(conn)\n                else:\n                    conn.close()"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages containing CircleCI event data, validates and extracts relevant information, and stores it in BigQuery. The endpoint should handle JSON payloads, validate message structure, and process specific CircleCI event types.\n\nFunction Description: The `index` function is a Flask route handler for POST requests at the root path (\"/\"). It receives Pub/Sub messages containing CircleCI event data, validates the message structure, processes the event if it's a supported type, and stores the processed data in BigQuery. Invalid messages or processing errors are logged with appropriate warnings.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"headers\": \"JSON string containing CircleCI headers\",\n        ...other attributes\n      },\n      \"data\": \"base64-encoded event data\",\n      \"message_id\": \"unique message identifier\"\n    }\n  }\n\nOutput: \n- HTTP response with status code 204 (No Content) on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Warning logs for processing errors that don't prevent HTTP response\n\nThe `process_circleci_event` helper function processes valid CircleCI events by extracting and formatting relevant data from the message.\n\nFunction Description: The `process_circleci_event` function extracts and formats CircleCI event data from message headers and payload. It validates the event type and creates a standardized event object for storage.\n\nInput:\n- headers: dict - Contains CircleCI event metadata including:\n  - \"Circleci-Event-Type\": string - The type of CircleCI event\n  - \"Circleci-Signature\": string - Verification signature\n- msg: dict - The Pub/Sub message containing:\n  - \"data\": string - base64-encoded JSON payload\n  - \"message_id\": string - Unique message identifier\n\nOutput:\n- dict - Formatted event data containing:\n  - \"event_type\": string - CircleCI event type\n  - \"id\": string - Event identifier\n  - \"metadata\": string - JSON string of full event data\n  - \"time_created\": string - Timestamp of event\n  - \"signature\": string - Verification signature\n  - \"msg_id\": string - Pub/Sub message ID\n  - \"source\": string - Constant \"circleci\" identifier",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n\n        if \"headers\" in attr:\n            headers = json.loads(attr[\"headers\"])\n\n            if \"Circleci-Event-Type\" in headers:\n                event = process_circleci_event(headers, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204\n\ndef process_circleci_event(headers, msg):\n    event_type = headers[\"Circleci-Event-Type\"]\n    signature = headers[\"Circleci-Signature\"]\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n    types = {\"workflow-completed\", \"job-completed\"}\n\n    if event_type not in types:\n        raise Exception(\"Unsupported CircleCI event: '%s'\" % event_type)\n\n    circleci_event = {\n        \"event_type\": event_type,\n        \"id\": metadata[\"id\"],\n        \"metadata\": json.dumps(metadata),\n        \"time_created\": metadata[\"happened_at\"],\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"source\": \"circleci\",\n    }\n\n    return circleci_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nimport logging\nfrom google.cloud import bigquery\nfrom datetime import datetime\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.WARNING)\nbq_client = bigquery.Client()\n\ndef process_circleci_event(headers, msg):\n    event_type = headers.get(\"Circleci-Event-Type\")\n    if not event_type:\n        return None\n\n    try:\n        payload = base64.b64decode(msg[\"data\"]).decode(\"utf-8\")\n        payload_data = json.loads(payload)\n    except Exception as e:\n        logging.warning(f\"Failed to decode or parse CircleCI event data: {e}\")\n        return None\n\n    event_id = payload_data.get(\"id\")\n    time_created = payload_data.get(\"time_created\", datetime.now().isoformat())\n    signature = headers.get(\"Circleci-Signature\", \"\")\n    msg_id = msg.get(\"message_id\", \"\")\n\n    formatted_event = {\n        \"event_type\": event_type,\n        \"id\": event_id,\n        \"metadata\": json.dumps(payload_data),\n        \"time_created\": time_created,\n        \"signature\": signature,\n        \"msg_id\": msg_id,\n        \"source\": \"circleci\"\n    }\n\n    return formatted_event\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    try:\n        data = request.get_json()\n        if not data or \"message\" not in data:\n            return jsonify({\"error\": \"Invalid request format\"}), 400\n\n        message = data[\"message\"]\n        attributes = message.get(\"attributes\", {})\n        headers_str = attributes.get(\"headers\", \"{}\")\n        headers = json.loads(headers_str)\n\n        if not isinstance(headers, dict) or not isinstance(message, dict):\n            return jsonify({\"error\": \"Invalid message structure\"}), 400\n\n        event_data = process_circleci_event(headers, message)\n        if not event_data:\n            logging.warning(\"Failed to process CircleCI event due to invalid headers or data\")\n            return \"\", 204\n\n        table_id = \"your-project-id.your_dataset.circleci_events\"\n        errors = bq_client.insert_rows_json(table_id, [event_data])\n        if errors:\n            logging.warning(f\"BigQuery insertion errors: {errors}\")\n\n        return \"\", 204\n    except Exception as e:\n        logging.warning(f\"Unexpected error processing request: {e}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Flask-based REST API for user management with configurable behaviors for testing various API scenarios.\n\nClass Description: FlaskAPI is a class that implements a RESTful API server using Flask. It provides endpoints for user CRUD operations and order deletion, with configurable behaviors to simulate different API response scenarios for testing purposes.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nconfig: [AppConfig] - Configuration object controlling API behavior\nnext_user_id: [int] - Counter for generating new user IDs\nlast_modified: [str] - Timestamp for last modification\nusers: [dict] - Dictionary storing user data\ndeleted_orders: [set] - Set tracking deleted order IDs\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application and sets up routes\n_setup_routes: [None]() -> [None] - Private method that defines all API endpoints\nget_spec: [None]() -> [Response] - Returns OpenAPI specification\nget_user: [None](user_id: int) -> [Response] - Retrieves a user by ID\nlist_users: [None]() -> [Response] - Lists all users\ncreate_user: [None]() -> [Response] - Creates a new user\nupdate_user: [None](user_id: int) -> [Response] - Updates a user by ID\ndelete_user: [None](user_id: int) -> [Response] - Deletes a user by ID\ndelete_order: [None](order_id: str) -> [Response] - Handles order deletion\ncheck_auth: [None]() -> [None] - Middleware for authorization checking",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom typing import Literal, Union\nfrom dataclasses import dataclass\n\n@dataclass\nclass AppConfig:\n    use_after_free: bool = False\n    ensure_resource_availability: bool = False\n    merge_body: bool = True\n    independent_500: bool = False\n    failure_behind_failure: bool = False\n    multiple_conformance_issues: bool = False\n    unsatisfiable: bool = False\n    custom_headers: dict | None = None\n    multiple_source_links: bool = False\n    auth_token: str | None = None\n    ignored_auth: bool = False\n    slowdown: float | int | None = None\n    multiple_incoming_links_with_same_status: bool = False\n    duplicate_operation_links: bool = False\n    circular_links: bool = False\n    invalid_parameter: bool = False\n    list_users_as_root: bool = False\n    no_reliable_transitions: bool = False\n    return_plain_text: Literal[False] | str | bytes = False\n    omit_required_field: bool = False\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = \"2021-01-01T00:00:00Z\"\n        self.users = {0: {\"id\": 0, \"name\": \"John Doe\", \"last_modified\": self.last_modified}}\n        self.deleted_orders = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/openapi.json\", methods=[\"GET\"])\n        def get_spec():\n            return jsonify(self.app.config[\"schema\"])\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"GET\"])\n        def get_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.return_plain_text is not False:\n                    return self.config.return_plain_text, 200, {\"Content-Type\": \"text/plain\"}\n                if self.config.omit_required_field:\n                    return jsonify({\"name\": user[\"name\"], \"last_modified\": user[\"last_modified\"]})\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users\", methods=[\"GET\"])\n        def list_users():\n            return jsonify(self.users)\n\n        @self.app.route(\"/users\", methods=[\"POST\"])\n        def create_user():\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            data = request.get_json()\n            if not isinstance(data, dict):\n                return jsonify({\"error\": \"Invalid input\"}), 400\n            name = data.get(\"name\")\n            if name is None:\n                return jsonify({\"error\": \"Name is required\"}), 400\n\n            new_user = {\"id\": self.next_user_id, \"name\": name, \"last_modified\": self.last_modified}\n            if not self.config.ensure_resource_availability:\n                self.users[self.next_user_id] = new_user\n            self.next_user_id += 1\n\n            if self.config.omit_required_field:\n                return jsonify({\"name\": new_user[\"name\"], \"last_modified\": new_user[\"last_modified\"]}), 201\n            return jsonify(new_user), 201\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"PATCH\"])\n        def update_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                data = request.get_json()\n                if not self.config.merge_body:\n                    assert len(data) == 1\n                else:\n                    assert \"name\" in data\n                    user[\"name\"] = data[\"name\"]\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"DELETE\"])\n        def delete_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.use_after_free:\n                    if len(user[\"name\"]) < 10:\n                        del self.users[user_id]\n                else:\n                    del self.users[user_id]\n                return jsonify({\"message\": \"User deleted successfully\"}), 204\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/orders/<order_id>\", methods=[\"DELETE\"])\n        def delete_order(order_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            if order_id in self.deleted_orders:\n                return jsonify({\"error\": \"Order not found\"}), 404\n            self.deleted_orders.add(order_id)\n            return jsonify({\"message\": \"Nothing happened\"}), 200\n\n        @self.app.before_request\n        def check_auth():\n            if not (self.config.ignored_auth or self.config.auth_token is None or request.endpoint == get_spec.__name__):\n                auth_header = request.headers.get(\"Authorization\")\n                if not auth_header:\n                    abort(401, description=\"Authorization header is missing\")\n                try:\n                    token_type, token = auth_header.split()\n                    if token_type.lower() != \"bearer\" or token != self.config.auth_token:\n                        abort(401, description=\"Invalid token\")\n                except ValueError:\n                    abort(401, description=\"Invalid Authorization header format\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request, abort\nfrom datetime import datetime\nimport uuid\n\nclass AppConfig:\n    def __init__(self):\n        self.strict_mode = False\n        self.max_users = 100\n        self.auth_required = True\n        self.simulate_errors = False\n        self.error_rate = 0.1\n\nclass FlaskAPI:\n    def __init__(self, config=None):\n        self.config = config or AppConfig()\n        self.app = Flask(__name__)\n        self.next_user_id = 1\n        self.last_modified = datetime.now().isoformat()\n        self.users = {}\n        self.deleted_orders = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/api/spec', methods=['GET'])(self.get_spec)\n        self.app.route('/api/users/<int:user_id>', methods=['GET'])(self.get_user)\n        self.app.route('/api/users', methods=['GET'])(self.list_users)\n        self.app.route('/api/users', methods=['POST'])(self.create_user)\n        self.app.route('/api/users/<int:user_id>', methods=['PUT'])(self.update_user)\n        self.app.route('/api/users/<int:user_id>', methods=['DELETE'])(self.delete_user)\n        self.app.route('/api/orders/<order_id>', methods=['DELETE'])(self.delete_order)\n\n    def get_spec(self):\n        return jsonify({\n            \"openapi\": \"3.0.0\",\n            \"info\": {\n                \"title\": \"User Management API\",\n                \"version\": \"1.0.0\"\n            },\n            \"paths\": {\n                \"/api/users\": {\n                    \"get\": {\n                        \"summary\": \"List all users\",\n                        \"responses\": {\n                            \"200\": {\"description\": \"OK\"}\n                        }\n                    },\n                    \"post\": {\n                        \"summary\": \"Create a new user\",\n                        \"requestBody\": {\n                            \"required\": True,\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"name\": {\"type\": \"string\"},\n                                            \"email\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"name\", \"email\"]\n                                    }\n                                }\n                            }\n                        },\n                        \"responses\": {\n                            \"201\": {\"description\": \"Created\"}\n                        }\n                    }\n                },\n                \"/api/users/{user_id}\": {\n                    \"get\": {\n                        \"summary\": \"Get user by ID\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"user_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\"}\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\"description\": \"OK\"},\n                            \"404\": {\"description\": \"User not found\"}\n                        }\n                    },\n                    \"put\": {\n                        \"summary\": \"Update user by ID\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"user_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\"}\n                            }\n                        ],\n                        \"requestBody\": {\n                            \"required\": True,\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"name\": {\"type\": \"string\"},\n                                            \"email\": {\"type\": \"string\"}\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"responses\": {\n                            \"200\": {\"description\": \"OK\"}\n                        }\n                    },\n                    \"delete\": {\n                        \"summary\": \"Delete user by ID\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"user_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"integer\"}\n                            }\n                        ],\n                        \"responses\": {\n                            \"204\": {\"description\": \"No Content\"}\n                        }\n                    }\n                },\n                \"/api/orders/{order_id}\": {\n                    \"delete\": {\n                        \"summary\": \"Delete an order\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"order_id\",\n                                \"in\": \"path\",\n                                \"required\": True,\n                                \"schema\": {\"type\": \"string\"}\n                            }\n                        ],\n                        \"responses\": {\n                            \"204\": {\"description\": \"No Content\"}\n                        }\n                    }\n                }\n            }\n        })\n\n    def check_auth(self):\n        if self.config.auth_required:\n            auth_header = request.headers.get('Authorization')\n            if not auth_header or not auth_header.startswith('Bearer '):\n                abort(401)\n\n    def get_user(self, user_id):\n        self.check_auth()\n        if self.config.simulate_errors and (self.next_user_id % 10 == 0):\n            abort(500)\n        if user_id not in self.users:\n            abort(404)\n        return jsonify({\n            \"id\": user_id,\n            \"name\": self.users[user_id]['name'],\n            \"email\": self.users[user_id]['email'],\n            \"last_modified\": self.last_modified\n        })\n\n    def list_users(self):\n        self.check_auth()\n        if self.config.simulate_errors and (self.next_user_id % 10 == 0):\n            abort(500)\n        return jsonify({\n            \"users\": [\n                {\n                    \"id\": user_id,\n                    \"name\": user['name'],\n                    \"email\": user['email'],\n                    \"last_modified\": self.last_modified\n                } for user_id, user in self.users.items()\n            ]\n        })\n\n    def create_user(self):\n        self.check_auth()\n        if self.config.simulate_errors and (self.next_user_id % 10 == 0):\n            abort(500)\n        if len(self.users) >= self.config.max_users:\n            abort(403)\n        data = request.get_json()\n        if not data or 'name' not in data or 'email' not in data:\n            abort(400)\n        user_id = self.next_user_id\n        self.users[user_id] = {\n            'name': data['name'],\n            'email': data['email']\n        }\n        self.next_user_id += 1\n        self.last_modified = datetime.now().isoformat()\n        return jsonify({\n            \"id\": user_id,\n            \"name\": data['name'],\n            \"email\": data['email'],\n            \"last_modified\": self.last_modified\n        }), 201\n\n    def update_user(self, user_id):\n        self.check_auth()\n        if self.config.simulate_errors and (self.next_user_id % 10 == 0):\n            abort(500)\n        if user_id not in self.users:\n            abort(404)\n        data = request.get_json()\n        if not data:\n            abort(400)\n        if 'name' in data:\n            self.users[user_id]['name'] = data['name']\n        if 'email' in data:\n            self.users[user_id]['email'] = data['email']\n        self.last_modified = datetime.now().isoformat()\n        return jsonify({\n            \"id\": user_id,\n            \"name\": self.users[user_id]['name'],\n            \"email\": self.users[user_id]['email'],\n            \"last_modified\": self.last_modified\n        })\n\n    def delete_user(self, user_id):\n        self.check_auth()\n        if self.config.simulate_errors and (self.next_user_id % 10 == 0):\n            abort(500)\n        if user_id not in self.users:\n            abort(404)\n        del self.users[user_id]\n        self.last_modified = datetime.now().isoformat()\n        return '', 204\n\n    def delete_order(self, order_id):\n        self.check_auth()\n        if self.config.simulate_errors and (self.next_user_id % 10 == 0):\n            abort(500)\n        if order_id in self.deleted_orders:\n            abort(409)\n        self.deleted_orders.add(order_id)\n        return '', 204"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles user authentication, request rate limiting, and database interactions, with the ability to run in both development and production environments.\n\nClass Description: FlaskServer is a class that encapsulates a Flask web application with user authentication, rate limiting, and database connectivity features. It provides routes for main page display and user login functionality, along with supporting methods for database operations and request handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- limiter: Limiter - Rate limiting controller for the application\n- SECRET_KEY: str - Secret key for session management\n\nMethods:\n- __init__() -> None - Initializes the Flask application, sets up rate limiting, and configures routes and secret key\n- _setup_routes() -> None - Defines all application routes and request handlers (internal method)\n- connect_db() -> sqlite3.Connection - Establishes connection to SQLite database\n- query_db(query: str, args: tuple = (), one: bool = False) -> Union[list, dict, None] - Executes database query and returns results\n- get_user_id(username: str) -> Union[int, None] - Retrieves user ID from database by username\n- papers_filter_version(papers: list, v: str) -> list - Filters papers by version number\n- default_context(papers: list, **kws) -> dict - Creates default template context with papers data\n- run(port: int = 5000, debug: bool = False, prod: bool = False) -> None - Starts the server in either development or production mode\n\nRoute Handlers (defined in _setup_routes):\n- before_request() -> None - Sets up database connection and user session before each request\n- teardown_request(exception: Exception) -> None - Closes database connection after each request\n- intmain() -> str - Handles root route, displays main page with papers\n- login() -> Response - Handles user login POST requests, manages authentication",
    "Canonical_solution": "from flask import Flask, request, session, url_for, redirect, render_template, abort, g, flash, _app_ctx_stack\nfrom flask_limiter import Limiter\nfrom werkzeug import check_password_hash, generate_password_hash\nimport pymongo\nimport time\nfrom sqlite3 import dbapi2 as sqlite3\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.limiter = Limiter(self.app, global_limits=[\"100 per hour\", \"20 per minute\"])\n        self._setup_routes()\n        \n        # Database configuration\n        if os.path.isfile('secret_key.txt'):\n            SECRET_KEY = open('secret_key.txt', 'r').read()\n        else:\n            SECRET_KEY = 'devkey, should be in a file'\n        self.app.config['SECRET_KEY'] = SECRET_KEY\n\n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            g.db = self.connect_db()\n            g.user = None\n            if 'user_id' in session:\n                g.user = self.query_db('select * from user where user_id = ?',\n                                    [session['user_id']], one=True)\n\n        @self.app.teardown_request\n        def teardown_request(exception):\n            db = getattr(g, 'db', None)\n            if db is not None:\n                db.close()\n\n        @self.app.route(\"/\")\n        def intmain():\n            vstr = request.args.get('vfilter', 'all')\n            papers = [db[pid] for pid in DATE_SORTED_PIDS]\n            papers = self.papers_filter_version(papers, vstr)\n            ctx = self.default_context(papers, render_format='recent',\n                                    msg='Showing most recent Arxiv papers:')\n            return render_template('main.html', **ctx)\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            if not request.form['username']:\n                flash('You have to enter a username')\n            elif not request.form['password']:\n                flash('You have to enter a password')\n            elif self.get_user_id(request.form['username']) is not None:\n                user = self.query_db('''select * from user where\n                    username = ?''', [request.form['username']], one=True)\n                if check_password_hash(user['pw_hash'], request.form['password']):\n                    session['user_id'] = self.get_user_id(request.form['username'])\n                    flash('User ' + request.form['username'] + ' logged in.')\n                else:\n                    flash('User ' + request.form['username'] + ' already exists, wrong password.')\n            else:\n                creation_time = int(time.time())\n                g.db.execute('''insert into user (username, pw_hash, creation_time) values (?, ?, ?)''',\n                    [request.form['username'], \n                    generate_password_hash(request.form['password']), \n                    creation_time])\n                user_id = g.db.execute('select last_insert_rowid()').fetchall()[0][0]\n                g.db.commit()\n                session['user_id'] = user_id\n                flash('New account %s created' % (request.form['username'], ))\n            return redirect(url_for('intmain'))\n\n    def connect_db(self):\n        sqlite_db = sqlite3.connect(Config.database_path)\n        sqlite_db.row_factory = sqlite3.Row\n        return sqlite_db\n\n    def query_db(self, query, args=(), one=False):\n        cur = g.db.execute(query, args)\n        rv = cur.fetchall()\n        return (rv[0] if rv else None) if one else rv\n\n    def get_user_id(self, username):\n        rv = self.query_db('select user_id from user where username = ?',\n                        [username], one=True)\n        return rv[0] if rv else None\n\n    def papers_filter_version(self, papers, v):\n        if v != '1': \n            return papers\n        intv = int(v)\n        filtered = [p for p in papers if p['_version'] == intv]\n        return filtered\n\n    def default_context(self, papers, **kws):\n        top_papers = self.encode_json(papers, args.num_results)\n        ans = dict(papers=top_papers, numresults=len(papers), totpapers=len(db), tweets=[], msg='', show_prompt='no', pid_to_users={})\n        ans.update(kws)\n        return ans\n\n    def run(self, port=5000, debug=False, prod=False):\n        if prod:\n            from tornado.wsgi import WSGIContainer\n            from tornado.httpserver import HTTPServer\n            from tornado.ioloop import IOLoop\n            from tornado.log import enable_pretty_logging\n            enable_pretty_logging()\n            http_server = HTTPServer(WSGIContainer(self.app))\n            http_server.listen(port)\n            IOLoop.instance().start()\n        else:\n            self.app.debug = debug\n            self.app.run(port=port, host='0.0.0.0')",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport sqlite3\nfrom functools import wraps\nfrom flask import Flask, request, session, redirect, url_for, render_template, g\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom typing import Union, List, Dict, Tuple, Any\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.SECRET_KEY = os.urandom(24)\n        self.app.secret_key = self.SECRET_KEY\n        self.limiter = Limiter(\n            app=self.app,\n            key_func=get_remote_address,\n            default_limits=[\"200 per day\", \"50 per hour\"]\n        )\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            g.db = self.connect_db()\n            g.user = None\n            if 'user_id' in session:\n                g.user = self.get_user_id(session['user_id'])\n\n        @self.app.teardown_request\n        def teardown_request(exception):\n            db = getattr(g, 'db', None)\n            if db is not None:\n                db.close()\n\n        @self.app.route('/')\n        def intmain():\n            papers = self.query_db('SELECT * FROM papers')\n            return self.default_context(papers)\n\n        @self.app.route('/login', methods=['POST'])\n        @self.limiter.limit(\"5 per minute\")\n        def login():\n            username = request.form['username']\n            password = request.form['password']\n            user_id = self.get_user_id(username)\n            if user_id and self.query_db('SELECT password FROM users WHERE id = ?', (user_id,), one=True)['password'] == password:\n                session['user_id'] = user_id\n                return redirect(url_for('intmain'))\n            return 'Invalid credentials', 401\n\n    def connect_db(self) -> sqlite3.Connection:\n        return sqlite3.connect('papers.db')\n\n    def query_db(self, query: str, args: tuple = (), one: bool = False) -> Union[List[Dict[str, Any]], Dict[str, Any], None]:\n        cur = g.db.execute(query, args)\n        rv = cur.fetchall()\n        cur.close()\n        return (rv[0] if rv else None) if one else rv\n\n    def get_user_id(self, username: str) -> Union[int, None]:\n        user = self.query_db('SELECT id FROM users WHERE username = ?', (username,), one=True)\n        return user['id'] if user else None\n\n    def papers_filter_version(self, papers: List[Dict[str, Any]], v: str) -> List[Dict[str, Any]]:\n        return [p for p in papers if p['version'] == v]\n\n    def default_context(self, papers: List[Dict[str, Any]], **kws) -> Dict[str, Any]:\n        return {'papers': papers, **kws}\n\n    def run(self, port: int = 5000, debug: bool = False, prod: bool = False):\n        if prod:\n            self.app.run(host='0.0.0.0', port=port)\n        else:\n            self.app.run(debug=debug, port=port)"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code consists of three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Time in milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' where [METHOD] is the HTTP method used\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    import time\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    response = 'Response from Flask'\n    return response, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    response = f'Request Type: {method}'\n    return response, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages from ArgoCD, transforms them into a standardized event format, and stores them in BigQuery.\n\nFunction Description: The function processes incoming HTTP POST requests containing Pub/Sub messages from ArgoCD. It validates the message structure, decodes and processes the event data, converts it to a standardized format, and stores it in BigQuery. Error handling is included for invalid payloads or processing failures.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message in the following format:\n  {\n    \"message\": {\n      \"data\": [base64-encoded string],\n      \"message_id\": [string],\n      \"attributes\": [object]\n    }\n  }\n\nOutput: \n- HTTP 204 No Content response on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Side effect: Processed event data is inserted into BigQuery\n\nMethods:\n\nprocess_argocd_event:\n- Input: msg [dict] - The Pub/Sub message dictionary containing the event data\n- Returns: dict - Processed event data in standardized format\n- Description: Decodes base64 message data, extracts metadata, and creates a standardized event object with unique signature\n\nindex:\n- Input: None (handles Flask request object internally)\n- Returns: str - Empty string with HTTP 204 status code\n- Description: Main endpoint that receives Pub/Sub messages, validates them, processes through process_argocd_event, and stores in BigQuery. Handles errors and logs failures.",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\ndef process_argocd_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    # Unique hash for the event\n    signature = shared.create_unique_id(msg)\n\n    argocd_event = {\n        \"event_type\": \"deployment\",  # Event type, eg \"push\", \"pull_reqest\", etc\n        \"id\": metadata[\"id\"],  # Object ID, eg pull request ID\n        \"metadata\": json.dumps(metadata),  # The body of the msg\n        \"time_created\": metadata[\"time\"],  # The timestamp of with the event\n        \"signature\": signature,  # The unique event signature\n        \"msg_id\": msg[\"message_id\"],  # The pubsub message id\n        \"source\": \"argocd\",  # The name of the source, eg \"github\"\n    }\n\n    print(argocd_event)\n    return argocd_event\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n    print(f\"envelope recieved: {envelope}\")\n\n    # Check that data has been posted\n    if not envelope:\n        raise Exception(\"Expecting JSON payload\")\n    # Check that message is a valid pub/sub message\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_argocd_event(msg)\n\n        # [Do not edit below]\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom google.cloud import bigquery\nimport base64\nimport json\nimport logging\n\napp = Flask(__name__)\nclient = bigquery.Client()\nlogging.basicConfig(level=logging.INFO)\n\ndef process_argocd_event(msg):\n    try:\n        data = base64.b64decode(msg['data']).decode('utf-8')\n        event = json.loads(data)\n        \n        standardized_event = {\n            'event_id': msg.get('message_id'),\n            'timestamp': event.get('time'),\n            'event_type': event.get('type'),\n            'resource': event.get('metadata', {}).get('name'),\n            'namespace': event.get('metadata', {}).get('namespace'),\n            'status': event.get('status'),\n            'source': event.get('source'),\n            'details': event.get('details'),\n            'attributes': msg.get('attributes', {}),\n            'raw_data': data\n        }\n        \n        return standardized_event\n    except Exception as e:\n        logging.error(f\"Error processing ArgoCD event: {str(e)}\")\n        raise\n\n@app.route('/', methods=['POST'])\ndef index():\n    try:\n        if not request.is_json:\n            logging.error(\"Invalid content type, expected JSON\")\n            return \"\", 415\n        \n        payload = request.get_json()\n        \n        if not payload or 'message' not in payload:\n            logging.error(\"Missing 'message' field in payload\")\n            return \"\", 400\n        \n        msg = payload['message']\n        \n        if not msg or 'data' not in msg:\n            logging.error(\"Missing 'data' field in message\")\n            return \"\", 400\n        \n        processed_event = process_argocd_event(msg)\n        \n        table_id = \"your-project-id.your_dataset.argocd_events\"\n        errors = client.insert_rows_json(table_id, [processed_event])\n        \n        if errors:\n            logging.error(f\"BigQuery insert error: {errors}\")\n            return \"\", 500\n        \n        return \"\", 204\n    except Exception as e:\n        logging.error(f\"Unexpected error: {str(e)}\")\n        return \"\", 500"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Flask-based web application class that handles user authentication, registration, and session management with role-based access control.\n\nClass Description: The WebApp class encapsulates a complete Flask web application with user authentication features. It includes database integration for user management, login/logout functionality, role-based access control, and session management.\n\nAttributes:\n\napp: [Flask] - The main Flask application instance\ndb: [SQLAlchemy] - Database instance for user management\nlogin_manager: [LoginManager] - Flask-Login manager for authentication\nUser: [SQLAlchemy Model] - Database model for user accounts\nSettingForm: [FlaskForm] - Form for password changes\nLoginForm: [FlaskForm] - Form for user login\nRegistrationForm: [FlaskForm] - Form for new user registration\nCaseForm: [FlaskForm] - Form for case management\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application, database, forms, and routes\nrun: [None](host='0.0.0.0', port=8080) -> [None] - Starts the Flask development server\nlogin_required: [function](role=\"ANY\") -> [function] - Decorator for role-based route protection\nload_user: [function](user_id) -> [User] - Callback for loading users from session\nunauthorized: [None]() -> [redirect] - Handler for unauthorized access attempts\nlogin: [function]() -> [response] - Handles user login requests\nsignup: [function]() -> [response] - Handles new user registration\nsetting: [function]() -> [response] - Handles user settings changes\nlogout: [function]() -> [redirect] - Handles user logout\nindex: [function]() -> [response] - Main application route",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, session\nfrom flask_login import UserMixin, LoginManager, login_user, logout_user, current_user\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import ValidationError, DataRequired, EqualTo, Length\nimport os\nimport datetime\n\nclass WebApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.config[\"SESSION_COOKIE_SECURE\"] = False\n        self.app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n        self.app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///logontracer.db\"\n        self.app.config[\"SECRET_KEY\"] = os.urandom(24)\n        self.app.permanent_session_lifetime = datetime.timedelta(minutes=60)\n        \n        self.db = SQLAlchemy(self.app)\n        self.login_manager = LoginManager()\n        self.login_manager.init_app(self.app)\n\n        class User(UserMixin, self.db.Model):\n            id = self.db.Column(self.db.Integer, primary_key=True)\n            username = self.db.Column(self.db.String(50), nullable=False, unique=True)\n            urole = self.db.Column(self.db.String(20))\n\n        class SettingForm(FlaskForm):\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class LoginForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password = PasswordField('Password', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class RegistrationForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class CaseForm(FlaskForm):\n            case = StringField('Case', validators=[DataRequired()])\n\n        with self.app.app_context():\n            self.db.create_all()\n\n        @self.login_manager.user_loader\n        def load_user(user_id):\n            return self.db.session.get(User, int(user_id))\n\n        @self.login_manager.unauthorized_handler\n        def unauthorized():\n            return redirect('/login')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if current_user.is_authenticated:\n                return redirect('/')\n\n            session.permanent = True\n            form = LoginForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password.data\n                remember = True if request.form.get(\"remember\") else False\n\n                session[\"username\"] = username\n                session[\"password\"] = password\n\n                user = User.query.filter_by(username=username).first()\n                login_user(user, remember=remember)\n                return redirect('/')\n\n            return render_template('login.html', form=form)\n\n        @self.app.route('/signup', methods=['GET', 'POST'])\n        @login_required(role=\"ADMIN\")\n        def signup():\n            form = RegistrationForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password1.data\n                admin = True if request.form.get(\"admin\") else False\n\n                with self.app.app_context():\n                    user = User(username=username, urole=\"ADMIN\" if admin else \"USER\")\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                return redirect('/')\n            return render_template('signup.html', form=form)\n\n        @self.app.route('/setting', methods=['GET', 'POST'])\n        @login_required(role=\"ANY\")\n        def setting():\n            form = SettingForm(request.form)\n            if form.validate_on_submit():\n                username = current_user.username\n                password = form.password1.data\n\n                with self.app.app_context():\n                    user_query = User.query.filter_by(username=username).first()\n                    self.db.session.delete(user_query)\n                    self.db.session.commit()\n\n                    user = User(username=username, urole=user_query.urole)\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                session[\"password\"] = password\n                return redirect('/')\n            return render_template('setting.html', form=form)\n\n        @self.app.route('/logout')\n        @login_required(role=\"ANY\")\n        def logout():\n            logout_user()\n            return redirect('/login')\n\n        @self.app.route('/')\n        @login_required(role=\"ANY\")\n        def index():\n            return render_template(\"index.html\")\n\n    def run(self, host='0.0.0.0', port=8080):\n        self.app.run(host=host, port=port)\n\n    def login_required(self, role=\"ANY\"):\n        def wrapper(fn):\n            @wraps(fn)\n            def decorated_view(*args, **kwargs):\n                if not current_user.is_authenticated:\n                    return self.login_manager.unauthorized()\n                urole = current_user.get_urole()\n                if ((urole != role) and (role != \"ANY\")):\n                    return self.login_manager.unauthorized()\n                return fn(*args, **kwargs)\n            return decorated_view\n        return wrapper",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, redirect, url_for, render_template, request, flash\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField, TextAreaField\nfrom wtforms.validators import DataRequired, Length, EqualTo, Email, ValidationError\n\nclass WebApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'your-secret-key'\n        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\n        self.db = SQLAlchemy(self.app)\n        self.login_manager = LoginManager(self.app)\n        self.login_manager.login_view = 'login'\n        self.login_manager.login_message_category = 'info'\n\n        class User(UserMixin, self.db.Model):\n            id = self.db.Column(self.db.Integer, primary_key=True)\n            username = self.db.Column(self.db.String(20), unique=True, nullable=False)\n            email = self.db.Column(self.db.String(120), unique=True, nullable=False)\n            password = self.db.Column(self.db.String(60), nullable=False)\n            role = self.db.Column(self.db.String(20), default='user')\n\n            def check_password(self, password):\n                return self.password == password\n\n        class SettingForm(FlaskForm):\n            new_password = PasswordField('New Password', validators=[DataRequired()])\n            confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('new_password')])\n            submit = SubmitField('Update Password')\n\n        class LoginForm(FlaskForm):\n            email = StringField('Email', validators=[DataRequired(), Email()])\n            password = PasswordField('Password', validators=[DataRequired()])\n            submit = SubmitField('Login')\n\n        class RegistrationForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])\n            email = StringField('Email', validators=[DataRequired(), Email()])\n            password = PasswordField('Password', validators=[DataRequired()])\n            confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n            submit = SubmitField('Sign Up')\n\n        class CaseForm(FlaskForm):\n            case_details = TextAreaField('Case Details', validators=[DataRequired()])\n            submit = SubmitField('Submit Case')\n\n        self.User = User\n        self.SettingForm = SettingForm\n        self.LoginForm = LoginForm\n        self.RegistrationForm = RegistrationForm\n        self.CaseForm = CaseForm\n\n        @self.login_manager.user_loader\n        def load_user(user_id):\n            return self.User.query.get(int(user_id))\n\n        @self.app.route('/')\n        def index():\n            return render_template('index.html')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if current_user.is_authenticated:\n                return redirect(url_for('index'))\n            form = self.LoginForm()\n            if form.validate_on_submit():\n                user = self.User.query.filter_by(email=form.email.data).first()\n                if user and user.check_password(form.password.data):\n                    login_user(user)\n                    return redirect(url_for('index'))\n                else:\n                    flash('Login Unsuccessful. Please check email and password', 'danger')\n            return render_template('login.html', form=form)\n\n        @self.app.route('/signup', methods=['GET', 'POST'])\n        def signup():\n            if current_user.is_authenticated:\n                return redirect(url_for('index'))\n            form = self.RegistrationForm()\n            if form.validate_on_submit():\n                user = self.User(username=form.username.data, email=form.email.data, password=form.password.data)\n                self.db.session.add(user)\n                self.db.session.commit()\n                flash('Your account has been created! You are now able to log in', 'success')\n                return redirect(url_for('login'))\n            return render_template('signup.html', form=form)\n\n        @self.app.route('/setting', methods=['GET', 'POST'])\n        @login_required\n        def setting():\n            form = self.SettingForm()\n            if form.validate_on_submit():\n                current_user.password = form.new_password.data\n                self.db.session.commit()\n                flash('Your password has been updated!', 'success')\n                return redirect(url_for('setting'))\n            return render_template('setting.html', form=form)\n\n        @self.app.route('/logout')\n        def logout():\n            logout_user()\n            return redirect(url_for('index'))\n\n        @self.app.route('/unauthorized')\n        def unauthorized():\n            return redirect(url_for('login'))\n\n        def login_required(role=\"ANY\"):\n            def wrapper(func):\n                def decorated_view(*args, **kwargs):\n                    if not current_user.is_authenticated:\n                        return redirect(url_for('unauthorized'))\n                    elif role != \"ANY\" and not current_user.role == role:\n                        return redirect(url_for('unauthorized'))\n                    return func(*args, **kwargs)\n                return decorated_view\n            return wrapper\n\n    def run(self, host='0.0.0.0', port=8080):\n        with self.app.app_context():\n            self.db.create_all()\n        self.app.run(host=host, port=port)"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that receives JSON data, processes it using a pre-trained machine learning model, and returns predictions in JSON format.\n\nFunction Description: The function handles POST requests to the '/predict' endpoint. It receives JSON data, validates it, loads a pre-trained model, makes predictions, and returns the results. It also includes error handling for bad requests.\n\nInput: \n- HTTP POST request with JSON payload containing data for prediction\n- The function accesses this through Flask's request.get_json()\n\nOutput:\n- Successful case: JSON response containing prediction results with HTTP status code 200\n- Error case: JSON error message with HTTP status code 400 for bad requests",
    "Canonical_solution": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef apicall():\n    try:\n        test_json = request.get_json()\n        test = pd.read_json(test_json)\n        print(\"The test data received are as follows...\")\n        print(test)\n        print()\n\n    except Exception as e:\n        raise e\n\n    clf = 'lm_model_v1.pk'\n    \n    if test.empty:\n        return(bad_request())\n    else:\n        print(\"Loading the model...\")\n        loaded_model = None\n        with open('./models/'+clf,'rb') as f:\n            loaded_model = pickle.load(f)\n\n        print(\"The model has been loaded...doing predictions now...\")\n        print()\n        predictions = loaded_model.predict(test)\n            \n        prediction_series = pd.Series(predictions)\n        response = jsonify(prediction_series.to_json())\n        response.status_code = 200\n        return (response)\n\n@app.errorhandler(400)\ndef bad_request(error=None):\n    message = {\n            'status': 400,\n            'message': 'Bad Request: ' + request.url + '--> Please check your data payload...',\n    }\n    resp = jsonify(message)\n    resp.status_code = 400\n\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport pickle\n\napp = Flask(__name__)\n\n# Load pre-trained model (example path)\nmodel_path = 'model.pkl'\nwith open(model_path, 'rb') as f:\n    model = pickle.load(f)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': 'No JSON payload received'}), 400\n        \n        # Example validation (modify based on actual input requirements)\n        if 'features' not in data:\n            return jsonify({'error': 'Missing required key: features'}), 400\n        \n        features = data['features']\n        prediction = model.predict([features])\n        \n        return jsonify({'prediction': prediction.tolist()}), 200\n    \n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Flask-based web application for movie recommendations that handles user requests, processes movie data, and returns recommendations along with detailed movie information.\n\nFunction Description: The application consists of three main routes that handle different aspects of movie recommendations: displaying the home page with suggestions, finding similar movies based on user input, and providing detailed recommendations for a selected movie.\n\nInput:\n- For \"/\" and \"/home\" routes: None (GET requests)\n- For \"/similarity\" route: A POST request with form data containing 'name' (movie title)\n- For \"/recommend\" route: A POST request with form data containing multiple movie attributes (title, cast info, IMDB ID, etc.)\n\nOutput:\n- For \"/\" and \"/home\" routes: Rendered HTML template 'home.html' with movie suggestions\n- For \"/similarity\" route: Either an error string or a string of recommended movies joined by \"---\"\n- For \"/recommend\" route: Rendered HTML template 'recommend.html' with comprehensive movie details, recommendations, and reviews\n\nMethods:\n1. home() -> HTML - Displays the home page with movie suggestions\n2. similarity() -> str - Returns similar movies based on user input\n3. recommend() -> HTML - Provides detailed recommendations for a selected movie",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    suggestions = get_suggestions()\n    return render_template('home.html',suggestions=suggestions)\n\n@app.route(\"/similarity\",methods=[\"POST\"])\ndef similarity():\n    movie = request.form['name']\n    rc = rcmd(movie)\n    if type(rc)==type('string'):\n        return rc\n    else:\n        m_str=\"---\".join(rc)\n        return m_str\n\n@app.route(\"/recommend\",methods=[\"POST\"])\ndef recommend():\n    title = request.form['title']\n    cast_ids = request.form['cast_ids']\n    cast_names = request.form['cast_names']\n    cast_chars = request.form['cast_chars']\n    cast_bdays = request.form['cast_bdays']\n    cast_bios = request.form['cast_bios']\n    cast_places = request.form['cast_places']\n    cast_profiles = request.form['cast_profiles']\n    imdb_id = request.form['imdb_id']\n    poster = request.form['poster']\n    genres = request.form['genres']\n    overview = request.form['overview']\n    vote_average = request.form['rating']\n    vote_count = request.form['vote_count']\n    release_date = request.form['release_date']\n    runtime = request.form['runtime']\n    status = request.form['status']\n    rec_movies = request.form['rec_movies']\n    rec_posters = request.form['rec_posters']\n\n    suggestions = get_suggestions()\n\n    rec_movies = convert_to_list(rec_movies)\n    rec_posters = convert_to_list(rec_posters)\n    cast_names = convert_to_list(cast_names)\n    cast_chars = convert_to_list(cast_chars)\n    cast_profiles = convert_to_list(cast_profiles)\n    cast_bdays = convert_to_list(cast_bdays)\n    cast_bios = convert_to_list(cast_bios)\n    cast_places = convert_to_list(cast_places)\n    \n    cast_ids = cast_ids.split(',')\n    cast_ids[0] = cast_ids[0].replace(\"[\",\"\")\n    cast_ids[-1] = cast_ids[-1].replace(\"]\",\"\")\n    \n    for i in range(len(cast_bios)):\n        cast_bios[i] = cast_bios[i].replace(r'\\n', '\\n').replace(r'\\\"','\\\"')\n    \n    movie_cards = {rec_posters[i]: rec_movies[i] for i in range(len(rec_posters))}\n    \n    casts = {cast_names[i]:[cast_ids[i], cast_chars[i], cast_profiles[i]] for i in range(len(cast_profiles))}\n\n    cast_details = {cast_names[i]:[cast_ids[i], cast_profiles[i], cast_bdays[i], cast_places[i], cast_bios[i]] for i in range(len(cast_places))}\n\n    sauce = urllib.request.urlopen('https://www.imdb.com/title/{}/reviews?ref_=tt_ov_rt'.format(imdb_id)).read()\n    soup = bs.BeautifulSoup(sauce,'lxml')\n    soup_result = soup.find_all(\"div\",{\"class\":\"text show-more__control\"})\n\n    reviews_list = []\n    reviews_status = []\n    for reviews in soup_result:\n        if reviews.string:\n            reviews_list.append(reviews.string)\n            movie_review_list = np.array([reviews.string])\n            movie_vector = vectorizer.transform(movie_review_list)\n            pred = clf.predict(movie_vector)\n            reviews_status.append('Good' if pred else 'Bad')\n\n    movie_reviews = {reviews_list[i]: reviews_status[i] for i in range(len(reviews_list))}     \n\n    return render_template('recommend.html',title=title,poster=poster,overview=overview,vote_average=vote_average,\n        vote_count=vote_count,release_date=release_date,runtime=runtime,status=status,genres=genres,\n        movie_cards=movie_cards,reviews=movie_reviews,casts=casts,cast_details=cast_details)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, url_for\nimport requests\n\napp = Flask(__name__)\n\n# Mock API endpoints for movie data (replace with actual API calls)\nMOVIE_API_URL = 'https://api.example.com/movies'\nSIMILAR_MOVIES_URL = 'https://api.example.com/similar'\nREVIEW_API_URL = 'https://api.example.com/reviews'\n\n@app.route('/', methods=['GET'])\n@app.route('/home', methods=['GET'])\ndef home():\n    # Fetch suggested movies from the API\n    response = requests.get(MOVIE_API_URL)\n    suggestions = response.json() if response.status_code == 200 else []\n    return render_template('home.html', suggestions=suggestions)\n\n@app.route('/similarity', methods=['POST'])\ndef similarity():\n    movie_name = request.form.get('name')\n    if not movie_name:\n        return \"Please provide a movie name\"\n    \n    # Fetch similar movies based on input\n    params = {'title': movie_name}\n    response = requests.get(SIMILAR_MOVIES_URL, params=params)\n    if response.status_code == 200:\n        similar_movies = response.json()\n        return \"---\".join(similar_movies)\n    else:\n        return \"No similar movies found\"\n\n@app.route('/recommend', methods=['POST'])\ndef recommend():\n    # Extract form data\n    title = request.form.get('title')\n    cast_info = request.form.get('cast_info')\n    imdb_id = request.form.get('imdb_id')\n    \n    # Fetch detailed movie information and recommendations\n    params = {\n        'title': title,\n        'cast_info': cast_info,\n        'imdb_id': imdb_id\n    }\n    response = requests.get(RECOMMEND_API_URL, params=params)\n    if response.status_code == 200:\n        movie_data = response.json()\n        return render_template('recommend.html', movie=movie_data['movie'], recommendations=movie_data['recommendations'], reviews=movie_data['reviews'])\n    else:\n        return redirect(url_for('home'))\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles image processing and video generation requests, including live preview streaming and final video download capabilities.\n\nFunction Description: The code implements a Flask web server with four main endpoints:\n1. Serves a static HTML interface\n2. Accepts image uploads for processing\n3. Provides a live MJPEG stream of processed frames\n4. Generates and returns a final processed video file\n\nInput:\n- HTTP GET/POST requests to defined endpoints\n- Image data as base64-encoded strings via POST\n- Configuration parameters for image processing\n\nOutput:\n- Static HTML page for the interface\n- Live MJPEG stream of processed frames\n- Processed MP4 video file for download\n- Empty responses for successful operations\n\nMethods:\n\nindex() -> flask.Response - Serves the static HTML interface file\n- Input: None\n- Output: Static HTML file response\n\nload_image() -> str - Processes uploaded image data\n- Input: \n  - strFile: Filename string\n  - strData: Base64-encoded image data\n- Output: Empty string response\n\nget_live() -> flask.Response - Generates MJPEG live stream\n- Input: None\n- Output: Multipart MJPEG stream response\n\nget_result() -> flask.Response - Generates and returns processed video\n- Input: None\n- Output: MP4 video file attachment\n\nNote: The implementation uses gevent for asynchronous handling and includes image processing utilities (process_load, process_inpaint, process_kenburns) which are assumed to be defined elsewhere. The server runs on port 8080 and serves static files from the current directory.",
    "Canonical_solution": "import flask\nimport gevent\nimport gevent.pywsgi\nimport os\nimport time\nimport tempfile\nimport random\nimport numpy\nimport cv2\nimport base64\nimport io\nimport shutil\nimport moviepy\n\nobjFlask = flask.Flask(import_name=__name__, static_url_path='', static_folder=os.path.abspath('./'))\nobjFlask.json.sort_keys = False\n\n@objFlask.route(rule='/', methods=[ 'GET' ])\ndef index():\n\treturn objFlask.send_static_file('interface.html')\n\n@objFlask.route(rule='/load_image', methods=[ 'POST' ])\ndef load_image():\n\tobjPlayback['strImage'] = flask.request.form['strFile']\n\tobjPlayback['npyImage'] = numpy.ascontiguousarray(cv2.imdecode(buf=numpy.frombuffer(base64.b64decode(flask.request.form['strData'].split(';base64,')[1]), numpy.uint8), flags=-1)[:, :, 0:3])\n\tobjPlayback['strCache'] = {}\n\n\tprocess_load(objPlayback['npyImage'], {})\n\n\tfor fltX, fltY in [ (100.0, 0.0), (-100.0, 0.0), (0.0, 100.0), (0.0, -100.0) ]:\n\t\tprocess_inpaint(torch.tensor(data=[[[fltX], [fltY], [0.0]]], dtype=torch.float32, device=torch.device('cuda')))\n\t# end\n\n\treturn ''\n\n@objFlask.route(rule='/get_live', methods=[ 'GET' ])\ndef get_live():\n\tdef generator():\n\t\tfltFramelimiter = 0.0\n\n\t\twhile True:\n\t\t\tfor intYield in range(100): gevent.sleep(0.0)\n\n\t\t\tgevent.sleep(max(0.0, (1.0 / 25.0) - (time.time() - fltFramelimiter))); fltFramelimiter = time.time()\n\n\t\t\tif objPlayback['strImage'] is None:\n\t\t\t\tyield b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=numpy.ones([ 768, 1024, 3 ], numpy.uint8) * 29, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'; continue\n\t\t\t# end\n\n\t\t\tif objPlayback['intTime'] > len(objPlayback['fltTime']) - 1:\n\t\t\t\tobjPlayback['intTime'] = 0\n\t\t\t# end\n\n\t\t\tintTime = objPlayback['intTime']\n\t\t\tfltTime = objPlayback['fltTime'][intTime]\n\n\t\t\tif objPlayback['strMode'] == 'automatic':\n\t\t\t\tobjPlayback['intTime'] += 1\n\t\t\t# end\n\n\t\t\tif str(fltTime) not in objPlayback['strCache']:\n\t\t\t\tnpyKenburns = process_kenburns({\n\t\t\t\t\t'fltSteps': [ fltTime ],\n\t\t\t\t\t'objFrom': objPlayback['objFrom'],\n\t\t\t\t\t'objTo': objPlayback['objTo'],\n\t\t\t\t\t'boolInpaint': False\n\t\t\t\t})[0]\n\n\t\t\t\tobjPlayback['strCache'][str(fltTime)] = b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=npyKenburns, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'\n\t\t\t# end\n\n\t\t\tyield objPlayback['strCache'][str(fltTime)]\n\t\t# end\n\t# end\n\n\treturn flask.Response(response=generator(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@objFlask.route(rule='/get_result', methods=[ 'GET' ])\ndef get_result():\n\tstrTempdir = tempfile.gettempdir() + '/kenburns-' + format(time.time(), '.6f') + '-' + str(os.getpid()) + '-' + str().join([random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for intCount in range(8)])\n\n\tos.makedirs(name=strTempdir + '/', exist_ok=False)\n\n\tnpyKenburns = process_kenburns({\n\t\t'fltSteps': numpy.linspace(0.0, 1.0, 75).tolist(),\n\t\t'objFrom': objPlayback['objFrom'],\n\t\t'objTo': objPlayback['objTo'],\n\t\t'boolInpaint': True\n\t})\n\n\tmoviepy.ImageSequenceClip(sequence=[ npyFrame[:, :, ::-1] for npyFrame in npyKenburns + list(reversed(npyKenburns))[1:-1] ], fps=25).write_videofile(strTempdir + '/kenburns.mp4')\n\n\tobjKenburns = io.BytesIO(open(strTempdir + '/kenburns.mp4', 'rb').read())\n\n\tshutil.rmtree(strTempdir + '/')\n\n\treturn flask.send_file(filename_or_fp=objKenburns, mimetype='video/mp4', as_attachment=True, attachment_filename='kenburns.mp4', cache_timeout=-1)\n\nif __name__ == '__main__':\n\tgevent.pywsgi.WSGIServer(listener=('0.0.0.0', 8080), application=objFlask).serve_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response, send_from_directory\nimport base64\nimport numpy as np\nimport cv2\nimport os\nimport threading\nimport gevent\nfrom gevent.pywsgi import WSGIServer\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'uploads'\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# Global variables for streaming and processing\nframe_queue = []\nprocessing_complete = False\nfinal_video_path = ''\n\ndef process_load(img_data):\n    # Placeholder for image loading logic\n    pass\n\ndef process_inpaint(img_data):\n    # Placeholder for inpainting logic\n    pass\n\ndef process_kenburns(img_data):\n    # Placeholder for Ken Burns effect logic\n    pass\n\n@app.route('/')\ndef index():\n    return send_from_directory('.', 'index.html')\n\n@app.route('/upload', methods=['POST'])\ndef load_image():\n    data = request.json\n    filename = data.get('filename')\n    img_data = data.get('data')\n\n    if not filename or not img_data:\n        return '', 400\n\n    # Save the uploaded image\n    with open(os.path.join(app.config['UPLOAD_FOLDER'], filename), 'wb') as f:\n        f.write(base64.b64decode(img_data.split(',')[1]))\n\n    # Process the image\n    img = process_load(np.frombuffer(base64.b64decode(img_data.split(',')[1]), dtype=np.uint8))\n    img = process_inpaint(img)\n    img = process_kenburns(img)\n\n    # Add processed frame to queue for streaming\n    frame_queue.append(cv2.cvtColor(img, cv2.COLOR_BGR2JPEG))\n\n    return ''\n\n@app.route('/live')\ndef get_live():\n    def generate():\n        while True:\n            if frame_queue:\n                frame = frame_queue.pop(0)\n                yield b'--frame\\r\\n'\n                yield b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n'\n            else:\n                gevent.sleep(0.1)\n\n    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@app.route('/result')\ndef get_result():\n    global processing_complete, final_video_path\n\n    if not processing_complete:\n        return '', 503\n\n    return send_from_directory('.', final_video_path, as_attachment=True)\n\ndef generate_video():\n    global processing_complete, final_video_path\n    # Simulate video generation\n    gevent.sleep(5)\n    final_video_path = 'output.mp4'\n    processing_complete = True\n\nif __name__ == '__main__':\n    # Start video generation in a separate thread\n    threading.Thread(target=generate_video).start()\n\n    # Run the server using gevent\n    http_server = WSGIServer(('0.0.0.0', 8080), app)\n    http_server.serve_forever()"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a custom Flask application class that extends the base Flask class to provide enhanced request handling and response generation capabilities, particularly for API responses.\n\nClass Description: FlaskApp is a subclass of Flask that customizes request handling and response generation. It provides automatic JSON serialization of responses and convenience methods for defining routes.\n\nAttributes:\n- request_class: [Request] - Custom request class to use for incoming requests\n- json_data_class: [tuple] - Tuple of classes that should be automatically converted to JSON responses\n\nMethods:\n- make_response(rv) -> Response - Overrides the base make_response method to automatically convert supported data types to JSON responses\n  Input: \n    rv: [Any] - The response value to process\n  Output:\n    Response object with appropriate content type and serialized data\n\n- get(rule, **options) -> decorator - Convenience method for creating GET routes\n  Input:\n    rule: [str] - URL rule as string\n    **options: [dict] - Additional options to pass to route()\n  Output:\n    Route decorator for GET method\n\n- post(rule, **options) -> decorator - Convenience method for creating POST routes\n  Input:\n    rule: [str] - URL rule as string\n    **options: [dict] - Additional options to pass to route()\n  Output:\n    Route decorator for POST method",
    "Canonical_solution": "from flask import Flask, Response\nfrom peewee import ModelSelect, Model\nfrom domain_admin.compat import Iterator\nfrom domain_admin.utils.flask_ext.api_result import ApiResult\nfrom domain_admin.utils.flask_ext.request import Request\nimport six\n\nclass FlaskApp(Flask):\n    request_class = Request\n\n    json_data_class = (\n        ModelSelect,\n        Model,\n        Iterator,\n        list,\n        dict,\n        six.integer_types,\n        six.text_type\n    )\n\n    def make_response(self, rv):\n        if isinstance(rv, self.json_data_class) or rv is None:\n            rv = ApiResult.success(rv)\n\n        if isinstance(rv, ApiResult):\n            return Response(rv.to_json(), content_type='application/json;charset=utf-8')\n\n        return super(FlaskApp, self).make_response(rv)\n\n    def get(self, rule, **options):\n        options.setdefault('methods', ['GET'])\n        return super(FlaskApp, self).route(rule, **options)\n\n    def post(self, rule, **options):\n        options.setdefault('methods', ['POST'])\n        return super(FlaskApp, self).route(rule, **options)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response, request, make_response\nfrom werkzeug.wrappers import Request as BaseRequest\nimport json\n\nclass Request(BaseRequest):\n    pass\n\nclass FlaskApp(Flask):\n    request_class = Request\n    json_data_class = (dict, list, tuple, set, bool, int, float, str, type(None))\n\n    def make_response(self, rv):\n        if isinstance(rv, self.json_data_class):\n            response = make_response(json.dumps(rv), 200)\n            response.headers['Content-Type'] = 'application/json'\n            return response\n        return super().make_response(rv)\n\n    def get(self, rule, **options):\n        return super().route(rule, methods=['GET'], **options)\n\n    def post(self, rule, **options):\n        return super().route(rule, methods=['POST'], **options)"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a Flask-based API server that can handle multiple routes for status checking, input processing, and server management, with the ability to run in a separate thread or using a production server.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web server with custom routes for handling API requests. It provides methods to start and stop the server either in a development thread or using a production-ready server (Waitress).\n\nAttributes:\n- app: Flask - The Flask application instance\n- server_thread: ServerThread - Thread object for running the development server\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up routes\n- _setup_routes() -> None - Defines the API endpoints and their handlers\n- _the_input(text: str, screen: str, talk: str) -> dict - Processes input text and optional screenshot, returns response\n- start_api(api: bool = False) -> None - Starts the server either in a thread (api=False) or using Waitress (api=True)\n- stop_api() -> None - Stops the running server thread\n\nNested Class: ServerThread\nClass Description: A thread class for running the Flask development server in a separate thread.\n\nAttributes:\n- srv: WSGIServer - The Werkzeug development server instance\n- ctx: AppContext - Flask application context\n\nMethods:\n- __init__(app: Flask, host: str, port: int) -> None - Initializes the server thread with Flask app and connection details\n- run() -> None - Starts the server and runs it indefinitely\n- shutdown() -> None - Stops the running server",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport threading\nfrom werkzeug.serving import make_server\nfrom waitress import serve\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/status\", methods=[\"POST\"])\n        def status():\n            return jsonify({\"response\": True})\n\n        @self.app.route(\"/input\", methods=[\"POST\"])\n        def input():\n            data = request.json\n            text = data[\"text\"]\n            screen = data[\"screen\"]\n            talk = data[\"talk\"]\n            return self._the_input(text, screen, talk)\n\n        @self.app.route(\"/stop_server\", methods=[\"POST\"])\n        def stop_server():\n            self.stop_api()\n            exit(0)\n\n    def _the_input(self, text, screen, talk):\n        print(\"Input:\", text)\n        from .agent.process import process_text_api\n        from .utils.db import screenshot_path\n\n        if screen != \"true\":\n            result = process_text_api(text, None)\n        else:\n            import pyautogui\n            screenshot = pyautogui.screenshot()\n            screenshot.save(screenshot_path)\n            result = process_text_api(text, screenshot_path)\n\n        return jsonify({\"response\": result})\n\n    def start_api(self, api=False):\n        if api == False:\n            if self.server_thread is None:\n                self.server_thread = ServerThread(self.app, \"0.0.0.0\", 7541)\n                self.server_thread.start()\n                print(\"API started\")\n            else:\n                print(\"API is already running\")\n        else:\n            serve(self.app, host=\"0.0.0.0\", port=7541)\n\n    def stop_api(self):\n        if self.server_thread is not None:\n            self.server_thread.shutdown()\n            self.server_thread.join()\n            self.server_thread = None\n            print(\"API stopped\")\n        else:\n            print(\"API is not running\")\n\nclass ServerThread(threading.Thread):\n    def __init__(self, app, host, port):\n        threading.Thread.__init__(self)\n        self.srv = make_server(host, port, app)\n        self.ctx = app.app_context()\n        self.ctx.push()\n\n    def run(self):\n        print(\"Starting server\")\n        self.srv.serve_forever()\n\n    def shutdown(self):\n        print(\"Stopping server\")\n        self.srv.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom werkzeug.serving import WSGIServer, make_server\nfrom threading import Thread\nimport signal\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/status', methods=['GET'])\n        def status():\n            return jsonify({\"status\": \"Server is running\"}), 200\n\n        @self.app.route('/input', methods=['POST'])\n        def input_handler():\n            data = request.json\n            text = data.get('text')\n            screen = data.get('screen')\n            talk = data.get('talk')\n            result = self._the_input(text, screen, talk)\n            return jsonify(result), 200\n\n        @self.app.route('/shutdown', methods=['POST'])\n        def shutdown():\n            func = request.environ.get('werkzeug.server.shutdown')\n            if func is None:\n                raise RuntimeError('Not running with the Werkzeug server')\n            func()\n            return jsonify({\"status\": \"Server is shutting down\"}), 200\n\n    def _the_input(self, text: str, screen: str, talk: str) -> dict:\n        # Placeholder for input processing logic\n        return {\n            \"text_received\": text,\n            \"screen_received\": screen,\n            \"talk_received\": talk\n        }\n\n    def start_api(self, api: bool = False):\n        if api:\n            from waitress import serve\n            serve(self.app, host='0.0.0.0', port=5000)\n        else:\n            self.server_thread = ServerThread(self.app, '0.0.0.0', 5000)\n            self.server_thread.start()\n\n    def stop_api(self):\n        if self.server_thread and self.server_thread.is_alive():\n            self.server_thread.shutdown()\n\nclass ServerThread(Thread):\n    def __init__(self, app: Flask, host: str, port: int):\n        super().__init__()\n        self.srv = make_server(host, port, app)\n        self.ctx = app.app_context()\n        self.ctx.push()\n\n    def run(self):\n        try:\n            self.srv.run()\n        except KeyboardInterrupt:\n            pass\n        finally:\n            self.srv.shutdown()\n            self.ctx.pop()\n\n    def shutdown(self):\n        self.srv.shutdown()"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Flask-based web service that accepts POST requests with form data, processes the data using a pre-trained machine learning model, and returns a prediction result rendered in an HTML template.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming POST requests containing form data. It extracts the input values, converts them to a format suitable for the machine learning model, makes a prediction, and returns the result embedded in an HTML template.\n\nInput: \n- The function receives form data via Flask's request object (implicit input through `request.form.values()`)\n- The form data should contain numerical values that can be converted to floats\n\nOutput:\n- Returns a rendered HTML template ('index.html') with the prediction result embedded in the template variable `prediction_text`\n- The output is a string containing the prediction percentage formatted as \"Percent with heart disease is X.XX\" where X.XX is the rounded prediction value",
    "Canonical_solution": "import numpy as np\nfrom flask import Flask, request, render_template\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('models/model.pkl', 'rb'))\n\n@app.route('/predict',methods=['POST'])\ndef predict():\n    int_features = [float(x) for x in request.form.values()]\n    features = [np.array(int_features)]\n    prediction = model.predict(features)\n    output = round(prediction[0], 2)\n    return render_template('index.html', prediction_text='Percent with heart disease is {}'.format(output))\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('model.pkl', 'rb'))\n\n@app.route('/', methods=['GET', 'POST'])\ndef predict():\n    if request.method == 'POST':\n        form_data = request.form.values()\n        features = [float(x) for x in form_data]\n        final_features = [np.array(features)]\n        prediction = model.predict(final_features)\n        prediction_percent = round(prediction[0] * 100, 2)\n        return render_template('index.html', prediction_text=f\"Percent with heart disease is {prediction_percent}\")\n    return render_template('index.html')"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a Flask-based HTTP server class for handling ONNX model modification requests, including opening models, applying modifications, and providing download functionality.\n\nClass Description: ONNXModifierServer is a Flask application wrapper that provides endpoints for uploading ONNX models, modifying them, and downloading the modified versions. It maintains the model state between requests and handles file operations.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- onnx_modifier: [onnxModifier|None] - The current ONNX model being processed (None when no model loaded)\n\nMethods:\n- __init__: [constructor]() -> [None] - Initializes the Flask app and sets up routes\n- _setup_routes: [method]() -> [None] - Configures URL routes and their handler methods\n- index: [method]() -> [str] - Returns the main HTML interface (renders index.html template)\n- open_model: [method]() -> [tuple[str, int]] - Handles file upload, creates onnxModifier instance from uploaded file (expects 'file' in request.files)\n- modify_and_download_model: [method]() -> [str] - Applies modifications from JSON request (request.get_json()), saves model, returns save path\n- run: [method](host: str='127.0.0.1', port: int=5000, debug: bool=False) -> [None] - Starts the Flask development server with specified parameters",
    "Canonical_solution": "from flask import Flask, request, render_template\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'index', self.index)\n        self.app.add_url_rule('/open_model', 'open_model', self.open_model, methods=['POST'])\n        self.app.add_url_rule('/download', 'modify_and_download_model', self.modify_and_download_model, methods=['POST'])\n\n    def index(self):\n        return render_template('index.html')\n\n    def open_model(self):\n        onnx_file = request.files['file']\n        self.onnx_modifier = onnxModifier.from_name_protobuf_stream(\n            onnx_file.filename, onnx_file.stream)\n        return 'OK', 200\n\n    def modify_and_download_model(self):\n        modify_info = request.get_json()\n        self.onnx_modifier.reload()\n        self.onnx_modifier.modify(modify_info)\n        save_path = self.onnx_modifier.check_and_save_model()\n        return save_path\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, send_from_directory, render_template\nimport os\nimport uuid\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template('index.html')\n\n        @self.app.route('/open_model', methods=['POST'])\n        def open_model():\n            if 'file' not in request.files:\n                return 'No file part', 400\n            file = request.files['file']\n            if file.filename == '':\n                return 'No selected file', 400\n            if file:\n                filename = str(uuid.uuid4()) + '.onnx'\n                filepath = os.path.join('uploads', filename)\n                file.save(filepath)\n                self.onnx_modifier = ONNXModifier(filepath)\n                return 'Model opened successfully', 200\n\n        @self.app.route('/modify_and_download', methods=['POST'])\n        def modify_and_download_model():\n            if not self.onnx_modifier:\n                return 'No model loaded', 400\n            modifications = request.get_json()\n            self.onnx_modifier.apply_modifications(modifications)\n            save_path = self.onnx_modifier.save_modified_model()\n            return save_path, 200\n\n        @self.app.route('/download/<filename>', methods=['GET'])\n        def download_file(filename):\n            return send_from_directory('modified_models', filename, as_attachment=True)\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)\n\nclass ONNXModifier:\n    def __init__(self, model_path):\n        self.model_path = model_path\n        # Load the ONNX model here\n        pass\n\n    def apply_modifications(self, modifications):\n        # Apply modifications to the model\n        pass\n\n    def save_modified_model(self):\n        # Save the modified model and return the path\n        filename = str(uuid.uuid4()) + '_modified.onnx'\n        save_path = os.path.join('modified_models', filename)\n        # Save logic here\n        return save_path"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Flask-based HTTP server that implements a GraphQL endpoint with both GET and POST methods, including a GraphiQL playground interface for testing queries.\n\nFunction Description: The code implements two Flask route handlers for a GraphQL server. The first handles GET requests to serve a GraphiQL playground interface, while the second handles POST requests to process GraphQL queries and mutations.\n\nInput:\n- For GET /graphql: No input parameters (uses Flask's request object internally)\n- For POST /graphql: Expects JSON payload containing GraphQL query/mutation\n\nOutput:\n- For GET /graphql: Returns HTML content for GraphiQL playground (status 200)\n- For POST /graphql: Returns JSON response containing either:\n  - Successful query result (status 200)\n  - Error response (status 400) if query fails",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom ariadne import graphql_sync\nfrom ariadne.explorer import ExplorerGraphiQL\n\napp = Flask(__name__)\napp.config.update(\n    {\n        \"TESTING\": True,\n    }\n)\n\nexplorer = ExplorerGraphiQL(title=\"My Flask GraphQL\")\n\n@app.route(\"/graphql\", methods=[\"GET\"])\ndef graphql_playground():\n    html = explorer.html(request)\n    return html, 200\n\n@app.route(\"/graphql\", methods=[\"POST\"])\ndef graphql_server():\n    data = request.get_json()\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value={\"request\": request},\n        root_value={\"hello\": \"Hello Flask!\"},\n        debug=app.debug,\n    )\n    status_code = 200 if success else 400\n    return jsonify(result), status_code",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_graphql import GraphQLView\nfrom graphene import ObjectType, String, Field\n\napp = Flask(__name__)\n\nclass Query(ObjectType):\n    hello = String(name=String())\n\n    def resolve_hello(self, info, name):\n        return f\"Hello, {name}!\"\n\nschema = GraphQLView(schema=Query, graphiql=True)\n\napp.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema, graphiql=True))\n\n@app.route('/graphql', methods=['POST'])\ndef graphql_post():\n    data = request.get_json()\n    result = schema._execute(query=data.get('query'), variables=data.get('variables'))\n    return jsonify(result)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 167,
    "Instruction": "The provided reference code is at the function level, specifically focusing on a Flask web application's route handling. Here's the structured instruction:\n\nTask Description: Create a Flask web application route handler that processes both GET and POST requests, implements various command-based functionalities, and returns appropriate HTML templates based on the input commands.\n\nFunction Description: The `index()` function serves as the main route handler for the root URL (\"/\"). It processes incoming HTTP requests, executes different actions based on the received commands (for POST requests), and returns corresponding HTML templates. The function handles feature activation, information display, and system operations through a command interface.\n\nInput:\n- HTTP request object (implicit through Flask)\n- For POST requests:\n  - Form data containing a command string (key: \"in\")\n- For GET requests:\n  - No explicit input parameters\n- Global variables (used in the function but not passed as parameters):\n  - redirectionMicrosoft (bool)\n  - redirectionMicrosoftFailed (bool)\n  - phone_number (str)\n  - email (str)\n  - password (str)\n  - Various feature flags (social_media, get_links, etc.)\n\nOutput:\n- HTTP responses containing:\n  - Rendered HTML templates (for successful operations)\n  - Redirects to other routes (for certain conditions)\n  - Error pages (for failed operations)\n\nThe function returns different responses based on:\n1. Request method (GET/POST)\n2. Specific command received (for POST requests)\n3. System state (global variables)\n4. Success/failure of operations",
    "Canonical_solution": "import os\nfrom flask import Flask, render_template, request, redirect, url_for\nimport threading\nimport subprocess\n\napp = Flask(__name__)\n\ndef run_flask_server():\n    app.run(str(subprocess.check_output(\"hostname -I | awk '{print $1}'\", shell=True).decode().strip()), 8080, debug=True)\n\n@app.route(\"/\", methods=[\"POST\", \"GET\"])\ndef index():\n    if request.method == \"GET\":\n        if redirectionMicrosoft == True:\n            return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n        if redirectionMicrosoftFailed == True:\n            return render_template(\"failed.html\")\n        return render_template(\"index.html\")\n    if request.method == \"POST\":\n        command = request.form[\"in\"]\n        if command == \"help\":\n            return render_template(\"help.html\")\n        elif command[0:15] == \"add PhoneNumber\":\n            phone_number = str(\"+\" + re.search(\"\\d+\", command).group(0))\n            return render_template(\"phoneNumberSuccess.html\", phone_number=phone_number)\n        elif command[0:21] == \"add feature FindOwner\":\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature SocialMedia\":\n            social_media = \"Added\"\n            try:\n                return render_template(\"socialMediaSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature GetLinks\":\n            get_links = \"Added\"\n            try:\n                return render_template(\"GetLinksSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature SpamRisk\":\n            spam_risk = \"Added\"\n            try:\n                return render_template(\"SpamRiskSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature GetComments\":\n            get_comments = \"Added\"\n            try:\n                return render_template(\"GetCommentsSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:12] == \"show options\":\n            try:\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n            except:\n                phone_number = \"Not Provided\"\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n        elif command[0:20] == \"add feature *\":\n            runall = \"Added\"\n            social_media = \"Added\"\n            spam_risk = \"Added\"\n            get_comments = \"Added\"\n            get_links = \"Added\"\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"featureAll.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:3] == \"run\":\n            Investigation.general.location(phone_number)\n            country = Investigation.general.returnCountry()\n            operator = Investigation.general.returnOperator()\n            timeZone = Investigation.general.returnTimeZone()\n            errNumber = Investigation.general.return_errNumber_()\n            currentTime = Investigation.general.returnCurrentTime()\n            if errNumber != \"False\":\n                threading.Thread(target=runScripts).start()\n                time.sleep(2)\n                return redirect(url_for(\"investigation\"))\n            else:\n                return redirect(url_for(\"investigationErr\"))\n        else:\n            return render_template(\"unkownCommand.html\")\n\nif __name__ == \"__main__\":\n    run_flask_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\n\napp = Flask(__name__)\n\nredirectionMicrosoft = False\nredirectionMicrosoftFailed = False\nphone_number = \"\"\nemail = \"\"\npassword = \"\"\nsocial_media = True\nget_links = True\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    global redirectionMicrosoft, redirectionMicrosoftFailed, phone_number, email, password, social_media, get_links\n\n    if request.method == 'POST':\n        command = request.form.get('in', '').strip()\n\n        if command == 'activate_feature':\n            social_media = not social_media\n            return render_template('status.html', message='Feature status updated.')\n\n        elif command == 'display_info':\n            info = {\n                'phone': phone_number,\n                'email': email,\n                'password': password,\n                'social_media_enabled': social_media,\n                'get_links_enabled': get_links\n            }\n            return render_template('info.html', info=info)\n\n        elif command == 'system_operation':\n            if redirectionMicrosoft:\n                return redirect(url_for('microsoft_redirect'))\n            else:\n                redirectionMicrosoftFailed = True\n                return render_template('error.html', message='Redirection failed.')\n\n        elif command == 'reset_state':\n            redirectionMicrosoft = False\n            redirectionMicrosoftFailed = False\n            phone_number = \"\"\n            email = \"\"\n            password = \"\"\n            social_media = True\n            get_links = True\n            return render_template('status.html', message='State reset successfully.')\n\n        else:\n            return render_template('error.html', message='Unknown command.')\n\n    else:\n        return render_template('index.html')"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Flask-based HTTP server application that serves files from a specified directory, handles file uploads, and implements basic authentication. The server should support both directory browsing and file downloads, with optional SSL encryption.\n\nFunction Description: The function `create_flask_app` initializes and runs a Flask web server with the following capabilities:\n1. Serves files from a specified directory with directory browsing\n2. Handles file uploads to valid subdirectories\n3. Implements HTTP Basic Authentication\n4. Supports optional SSL encryption\n5. Handles permission errors gracefully\n\nInput:\n- directory: [str] - The root directory to serve files from\n- port: [int] - The port number to run the server on\n- password: [str] - The password for HTTP Basic Authentication\n- ssl: [bool] - Whether to enable SSL encryption\n\nOutput: None (The function runs the server indefinitely until interrupted)\n\nMethods:\n- home(path): Handles requests for files and directories\n  Input: path [str] - The requested file/directory path\n  Output: Flask response (file download, directory listing, or redirect)\n  \n- upload(): Handles file uploads via POST requests\n  Input: None (uses Flask's request object)\n  Output: Flask redirect response\n  \n- verify_password(username, password): Verifies HTTP Basic Authentication credentials\n  Input: \n    username [str] - The username (ignored in this implementation)\n    password [str] - The password to verify\n  Output: [bool] - True if authentication succeeds, False otherwise",
    "Canonical_solution": "from flask import Flask, render_template, send_file, redirect, request, send_from_directory, url_for, abort\nfrom flask_httpauth import HTTPBasicAuth\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.serving import run_simple\n\ndef create_flask_app(directory, port, password, ssl):\n    app = Flask(__name__)\n    auth = HTTPBasicAuth()\n\n    @app.route('/', defaults={'path': None})\n    @app.route('/<path:path>')\n    @auth.login_required\n    def home(path):\n        if path and is_valid_subpath(path, directory):\n            path = os.path.normpath(path)\n            requested_path = os.path.join(directory, path)\n\n            if os.path.isdir(requested_path):\n                back = get_parent_directory(requested_path, directory)\n                is_subdirectory = True\n            elif os.path.isfile(requested_path):\n                if request.args.get('view') is None:\n                    send_as_attachment = True\n                else:\n                    send_as_attachment = False\n\n                (filename, extension) = os.path.splitext(requested_path)\n                if extension == '':\n                    mimetype = 'text/plain'\n                else:\n                    mimetype = None\n\n                try:\n                    return send_file(requested_path, mimetype=mimetype, as_attachment=send_as_attachment)\n                except PermissionError:\n                    abort(403, 'Read Permission Denied: ' + requested_path)\n        else:\n            is_subdirectory = False\n            requested_path = directory\n            back = ''\n\n        if os.path.exists(requested_path):\n            try:\n                directory_files = process_files(os.scandir(requested_path), directory)\n            except PermissionError:\n                abort(403, 'Read Permission Denied: ' + requested_path)\n\n            return render_template('home.html', files=directory_files, back=back,\n                                 directory=requested_path, is_subdirectory=is_subdirectory, version=VERSION)\n        else:\n            return redirect('/')\n\n    @app.route('/upload', methods=['POST'])\n    @auth.login_required\n    def upload():\n        if request.method == 'POST':\n            if 'file' not in request.files:\n                return redirect(request.referrer)\n\n            path = request.form['path']\n            if not is_valid_upload_path(path, directory):\n                return redirect(request.referrer)\n\n            for file in request.files.getlist('file'):\n                if file.filename == '':\n                    return redirect(request.referrer)\n\n                if file:\n                    filename = secure_filename(file.filename)\n                    full_path = os.path.join(path, filename)\n                    try:\n                        file.save(full_path)\n                    except PermissionError:\n                        abort(403, 'Write Permission Denied: ' + full_path)\n\n            return redirect(request.referrer)\n\n    users = {\n        '': generate_password_hash(password)\n    }\n\n    @auth.verify_password\n    def verify_password(username, password):\n        if password:\n            if username in users:\n                return check_password_hash(users.get(username), password)\n            return False\n        else:\n            return True\n\n    ssl_context = 'adhoc' if ssl else None\n    run_simple(\"0.0.0.0\", int(port), app, ssl_context=ssl_context)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, send_from_directory, redirect, url_for, abort\nimport os\nimport ssl\n\ndef create_flask_app(directory, port, password, ssl):\n    app = Flask(__name__)\n    app.config['UPLOAD_FOLDER'] = directory\n\n    def verify_password(username, password):\n        return password == password\n\n    @app.before_request\n    def require_auth():\n        if not request.path.startswith('/upload'):\n            auth = request.authorization\n            if not auth or not verify_password(auth.username, auth.password):\n                return authenticate()\n\n    def authenticate():\n        return Response('Could not verify your access level.', 401,\n                        {'WWW-Authenticate': 'Basic realm=\"Login Required\"'})\n\n    @app.route('/', defaults={'path': ''})\n    @app.route('/<path:path>')\n    def home(path):\n        full_path = os.path.join(app.config['UPLOAD_FOLDER'], path)\n        if not os.path.exists(full_path):\n            return \"File not found\", 404\n        if os.path.isdir(full_path):\n            files = os.listdir(full_path)\n            return '\\n'.join([f\"<a href='{f}'>{f}</a>\" for f in files])\n        else:\n            return send_from_directory(app.config['UPLOAD_FOLDER'], path)\n\n    @app.route('/upload', methods=['POST'])\n    def upload():\n        file = request.files.get('file')\n        if not file:\n            return \"No file uploaded\", 400\n        try:\n            upload_dir = os.path.join(app.config['UPLOAD_FOLDER'], 'uploads')\n            os.makedirs(upload_dir, exist_ok=True)\n            file.save(os.path.join(upload_dir, file.filename))\n            return redirect(url_for('home', path='uploads'))\n        except PermissionError:\n            return \"Permission denied\", 403\n\n    if ssl:\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile='server.crt', keyfile='server.key')\n        app.run(host='0.0.0.0', port=port, ssl_context=context)\n    else:\n        app.run(host='0.0.0.0', port=port)"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles QR code generation, status checking, and token retrieval for an authentication system.\n\nFunction Description: The server provides three main endpoints: one to display a main page with QR code, one to generate QR code URLs, one to check QR code status, and one to retrieve authentication tokens.\n\nInput:\n- For '/get_qrcode' endpoint: GET request with no parameters\n- For '/check_qrcode/<sid>' endpoint: GET request with sid (session ID) as URL parameter\n- For '/get_tokens' endpoint: POST request with JSON body containing auth_code\n\nOutput:\n- '/get_qrcode': Returns JSON with QR code URL data\n- '/check_qrcode/<sid>': Returns JSON with QR code status\n- '/get_tokens': Returns JSON with status confirmation after processing auth_code",
    "Canonical_solution": "import time\nimport logging\nimport json\nimport uuid\nimport hashlib\nimport base64\nimport random\nimport sys\nimport requests\nfrom flask import Flask, jsonify, render_template, request\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\n\napp = Flask(__name__)\ntimestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\nunique_id = uuid.uuid4().hex\nwifimac = str(random.randint(10**11, 10**12 - 1))\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/')\ndef main_page():\n    return render_template('qrcode.html')\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    return jsonify(get_qrcode_url())\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    return jsonify(check_qrcode_status(sid))\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    _auth_code = request.json.get('auth_code')\n    get_token(_auth_code)\n    return jsonify({'status': 'completed'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request\nimport qrcode\nimport uuid\nimport time\nimport os\n\napp = Flask(__name__)\n\n# In-memory storage for QR code status and tokens\nqr_status = {}\ntokens = {}\n\n@app.route('/')\ndef index():\n    return \"Welcome to the QR Code Authentication Server!\"\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    sid = str(uuid.uuid4())\n    qr_data = f\"https://example.com/auth?sid={sid}\"\n    img = qrcode.make(qr_data)\n    img.save(f\"static/qrcode_{sid}.png\")\n    qr_status[sid] = {\"status\": \"generated\", \"timestamp\": time.time()}\n    return jsonify({\"sid\": sid, \"qr_url\": f\"/static/qrcode_{sid}.png\"})\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    if sid in qr_status:\n        status = qr_status[sid]\n        return jsonify({\"sid\": sid, \"status\": status[\"status\"], \"timestamp\": status[\"timestamp\"]})\n    else:\n        return jsonify({\"error\": \"SID not found\"}), 404\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    data = request.get_json()\n    auth_code = data.get('auth_code')\n    if not auth_code:\n        return jsonify({\"error\": \"Missing auth_code\"}), 400\n\n    # Simulate token generation based on auth_code\n    token = f\"token_{uuid.uuid4()}\"\n    tokens[token] = {\"auth_code\": auth_code, \"timestamp\": time.time()}\n    return jsonify({\"status\": \"success\", \"token\": token})\n\nif __name__ == '__main__':\n    if not os.path.exists('static'):\n        os.makedirs('static')\n    app.run(debug=True)"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a Flask-based HTTP server for Text-to-Speech (TTS) processing that handles multiple API endpoints for TTS generation, batch processing, and progress tracking.\n\nClass Description: FlaskTTSAPI is a Flask application wrapper that provides TTS functionality through HTTP endpoints. It manages TTS requests, batch processing of text files, and progress tracking for long-running tasks.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- chuliing: [dict] - Tracks progress of batch processing tasks with keys 'name' (current file), 'line' (current line), and 'end' (completion status)\n\nMethods:\n- __init__() -> [None] - Initializes the Flask app, sets up routes and logging\n- _setup_logging() -> [None] - Configures logging with file rotation\n- _setup_routes() -> [None] - Defines all API endpoints and their handler methods\n- apitts() -> [flask.Response] - Handles single TTS requests. Returns JSON with either the generated audio file or an error message\n- ttslistjindu() -> [flask.Response] - Returns current progress of batch processing as JSON\n- ttslist() -> [flask.Response] - Initiates batch processing of text files. Returns immediate acknowledgment\n- detail_task(voice: str, src: str, dst: str, speed: float, language: str) -> [None] - Background task for processing text files into TTS audio\n- run() -> [None] - Starts the WSGI server to handle HTTP requests\n\nInput:\n- For apitts(): HTTP POST with form data containing 'text', 'language', and either 'voice' or 'audio' file\n- For ttslist(): HTTP POST with form data containing 'voice', 'src' (source dir), 'dst' (destination dir), 'speed', and 'language'\n- For ttslistjindu(): HTTP GET request to check progress\n\nOutput:\n- JSON responses containing either:\n  - Success: {'code': 0, 'url': [generated_audio_url]} or {'code': 0, 'msg': 'ok'}\n  - Error: {'code': 1 or 2, 'msg': [error_description]}\n  - Progress: {'name': [current_file], 'line': [current_line], 'end': [True/False]}",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport os\nimport threading\nimport time\nimport hashlib\nimport re\nfrom gevent.pywsgi import WSGIServer, WSGIHandler\n\nclass FlaskTTSAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self._setup_logging()\n        self.chuliing = {\"name\": \"\", \"line\": 0, \"end\": False}\n\n    def _setup_logging(self):\n        self.app.logger.setLevel(logging.INFO)\n        file_handler = RotatingFileHandler(os.path.join(ROOT_DIR, 'app.log'), maxBytes=1024*1024, backupCount=5)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        file_handler.setFormatter(formatter)\n        self.app.logger.addHandler(file_handler)\n\n    def _setup_routes(self):\n        self.app.route('/apitts', methods=['GET', 'POST'])(self.apitts)\n        self.app.route('/ttslist', methods=['GET', 'POST'])(self.ttslist)\n        self.app.route('/ttslistjindu', methods=['GET', 'POST'])(self.ttslistjindu)\n        self.app.route('/tts', methods=['GET', 'POST'])(self.tts)\n\n    def apitts(self):\n        try:\n            langcodelist = [\"zh-cn\", \"en\", \"ja\", \"ko\", \"es\", \"de\", \"fr\", \"it\", \"tr\", \"ru\", \"pt\", \"pl\", \"nl\", \"ar\", \"hu\", \"cs\"]\n            text = request.form.get(\"text\").strip()\n            text = text.replace(\"\\n\", ' . ')\n            language = request.form.get(\"language\",\"\").lower()\n            if language.startswith(\"zh\"):\n                language=\"zh-cn\"\n            if language not in langcodelist:\n                return jsonify({\"code\":1,\"msg\":f\"dont support language {language}\"})\n\n            md5_hash = hashlib.md5()\n            audio_name = request.form.get('voice')\n            if audio_name:\n                voicename = os.path.join(VOICE_DIR, audio_name)\n            else:\n                audio_file = request.files['audio']\n                audio_name = f'video_{audio_file.filename}.wav'\n                voicename = os.path.join(TMP_DIR, audio_name)\n                audio_file.save(voicename)\n            md5_hash.update(f\"{text}-{language}-{audio_name}\".encode('utf-8'))\n\n            self.app.logger.info(f\"[apitts]{voicename=}\")\n            if re.match(r'^[~`!@#$%^&*()_+=,./;\\':\\[\\]{}<>?\\\\|\"\uff0c\u3002\uff1f\uff1b\u2018\uff1a\u201c\u201d\u2019\uff5b\u3010\u3011\uff5d\uff01\u00b7\uffe5\u3001\\s\\n\\r -]*$', text):\n                return jsonify({\"code\": 1, \"msg\": \"lost text for translate\"})\n            if not text or not language:\n                return jsonify({\"code\": 1, \"msg\": \"text & language params lost\"})\n\n            filename = md5_hash.hexdigest() + \".wav\"\n            rs = create_tts(text=text, speed=1.0, voice=voicename, language=language, filename=filename)\n            if rs is not None:\n                result = rs\n            else:\n                time_tmp = 0\n                while filename not in cfg.global_tts_result:\n                    time.sleep(3)\n                    time_tmp += 3\n                    if time_tmp % 30 == 0:\n                        self.app.logger.info(f\"[apitts][tts]{time_tmp=},{filename=}\")\n\n                if cfg.global_tts_result[filename] != 1:\n                    msg = {\"code\": 1, \"msg\": cfg.global_tts_result[filename]}\n                else:\n                    target_wav = os.path.normpath(os.path.join(TTS_DIR, filename))\n                    msg = {\"code\": 0, \"filename\": target_wav, 'name': filename}\n                cfg.global_tts_result.pop(filename)\n                result = msg\n            if result['code'] == 0:\n                result['url'] = f'http://{web_address}/static/ttslist/{filename}'\n            return jsonify(result)\n        except Exception as e:\n            msg=f'{str(e)} {str(e.args)}'\n            self.app.logger.error(f\"[apitts]{msg}\")\n            return jsonify({'code': 2, 'msg': msg})\n\n    def ttslistjindu(self):\n        return jsonify(self.chuliing)\n\n    def ttslist(self):\n        voice = request.form.get(\"voice\")\n        src = request.form.get(\"src\")\n        dst = request.form.get(\"dst\")\n        speed = 1.0\n        try:\n            speed = float(request.form.get(\"speed\"))\n        except:\n            pass\n        language = request.form.get(\"language\")\n\n        src=os.path.normpath(src)\n        if not src or not dst or not os.path.exists(src) or not os.path.exists(dst):\n            return jsonify({\"code\":1,\"msg\":\"\u5fc5\u987b\u6b63\u786e\u586b\u5199txt\u6240\u5728\u76ee\u5f55\u4ee5\u53ca\u76ee\u6807\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\"})\n\n        threading.Thread(target=self.detail_task, args=(voice, src, dst, speed, language)).start()    \n        return jsonify({\"code\":0,\"msg\":\"ok\"})\n\n    def detail_task(self, voice, src, dst, speed, language):\n        self.chuliing={\"name\":\"\",\"line\":0,\"end\":False}\n        for t in os.listdir(src):\n            if not t.lower().endswith('.txt'):\n                continue\n            concat_txt=os.path.join(cfg.TTS_DIR, re.sub(r'[ \\s\\[\\]\\{\\}\\(\\)<>\\?\\, :]+','', t, re.I) + '.txt')\n            \n            self.app.logger.info(f'####\u5f00\u59cb\u5904\u7406\u6587\u4ef6\uff1a{t}, \u6bcf\u884c\u7ed3\u679c\u4fdd\u5b58\u5728:{concat_txt}')\n            with open(concat_txt,'w',encoding='utf-8') as f:\n                f.write(\"\")\n            waitlist=[]\n            result={}\n            with open(os.path.join(src,t),'r',encoding='utf-8') as f:\n                num=0\n                for line in f.readlines():\n                    num+=1\n                    line=line.strip()\n                    if re.match(r'^[~`!@#$%^&*()_+=,./;\\':\\[\\]{}<>?\\\\|\"\uff0c\u3002\uff1f\uff1b\u2018\uff1a\u201c\u201d\u2019\uff5b\u3010\u3011\uff5d\uff01\u00b7\uffe5\u3001\\s\\n\\r -]*$', line):\n                        continue                \n                    md5_hash = hashlib.md5()\n                    md5_hash.update(f\"{line}-{voice}-{language}-{speed}\".encode('utf-8'))\n                    filename = md5_hash.hexdigest() + \".wav\"\n                    rs = create_tts(text=line, speed=speed, voice=voice, language=language, filename=filename)\n                    if rs is not None and rs['code']==1:\n                        continue\n                    if rs is not None and rs['code']==0:\n                        result[f'{num}']={\"filename\":filename, \"num\":num}\n                        self.chuliing['name']=t\n                        self.chuliing['line']=num\n                        continue\n                    waitlist.append({\"filename\":filename, \"num\":num, \"t\":t})\n        \n            time_tmp = 0\n            self.chuliing['name']=t\n            if len(waitlist)>0:\n                self.chuliing['line']=waitlist[0]['num']\n                while len(waitlist)>0:\n                    it=waitlist.pop(0)\n                    filename, num, t=it.values()\n                    \n                    if time_tmp>7200:\n                        continue\n                        \n                    if filename in cfg.global_tts_result and cfg.global_tts_result[filename] != 1:\n                        continue\n                    if os.path.exists(os.path.join(cfg.TTS_DIR, filename)):\n                        self.chuliing['name']=t\n                        self.chuliing['line']=num\n                        result[f'{num}']={\"filename\":filename, \"num\":num}\n                        continue\n                    waitlist.append(it)\n                    time_tmp+=1\n                    time.sleep(1)\n            if len(result.keys())<1:\n                continue    \n            sorted_result = {k: result[k] for k in sorted(result, key=lambda x: int(x))}\n            for i, it in sorted_result.items():\n                theaudio = os.path.normpath(os.path.join(cfg.TTS_DIR, it['filename']))\n                with open(concat_txt, 'a', encoding='utf-8') as f:\n                    f.write(f\"file '{theaudio}'\\n\")\n            \n            target_mp3=os.path.normpath((os.path.join(dst,f'{t}.mp3')))\n            p=subprocess.run(['ffmpeg',\"-hide_banner\", \"-ignore_unknown\", '-y', '-f', 'concat', '-safe', '0', '-i', concat_txt, target_mp3])\n            \n            if p.returncode!=0:\n                continue\n            if speed != 1.0 and speed > 0 and speed <= 2.0:\n                p= subprocess.run(['ffmpeg', '-hide_banner', '-ignore_unknown', '-y', '-i', target_mp3, '-af', f\"atempo={speed}\",f'{target_mp3}-speed{speed}.mp3'], encoding=\"utf-8\", capture_output=True)\n                if p.returncode != 0:\n                    continue\n                os.unlink(target_mp3)\n                target_mp3=f'{target_mp3}-speed{speed}.mp3'\n        self.chuliing['end']=True\n\n    def run(self):\n        host = web_address.split(':')\n        http_server = WSGIServer((host[0], int(host[1])), self.app, handler_class=CustomRequestHandler)\n        http_server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_from_directory\nimport os\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfrom threading import Thread\nimport uuid\n\nclass FlaskTTSAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.chuliing = {'name': '', 'line': 0, 'end': False}\n        self._setup_logging()\n        self._setup_routes()\n\n    def _setup_logging(self):\n        log_handler = RotatingFileHandler('tts_server.log', maxBytes=10000, backupCount=1)\n        log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        log_handler.setFormatter(log_formatter)\n        self.app.logger.addHandler(log_handler)\n        self.app.logger.setLevel(logging.INFO)\n\n    def _setup_routes(self):\n        @self.app.route('/apitts', methods=['POST'])\n        def apitts():\n            try:\n                text = request.form.get('text')\n                language = request.form.get('language')\n                voice_file = request.files.get('voice')\n                audio_file = request.files.get('audio')\n\n                if not text or not language:\n                    return jsonify({'code': 1, 'msg': 'Missing text or language parameter'})\n\n                if not voice_file and not audio_file:\n                    return jsonify({'code': 1, 'msg': 'Missing voice or audio file'})\n\n                # Simulate TTS generation\n                audio_filename = f\"{uuid.uuid4()}.wav\"\n                audio_path = os.path.join('output', audio_filename)\n                os.makedirs('output', exist_ok=True)\n\n                # For demonstration, we just save the uploaded file as the output\n                if voice_file:\n                    voice_file.save(audio_path)\n                elif audio_file:\n                    audio_file.save(audio_path)\n\n                return jsonify({'code': 0, 'url': f'/download/{audio_filename}'})\n            except Exception as e:\n                self.app.logger.error(f\"Error in apitts: {e}\")\n                return jsonify({'code': 2, 'msg': str(e)})\n\n        @self.app.route('/ttslist', methods=['POST'])\n        def ttslist():\n            try:\n                voice = request.form.get('voice')\n                src = request.form.get('src')\n                dst = request.form.get('dst')\n                speed = request.form.get('speed')\n                language = request.form.get('language')\n\n                if not all([voice, src, dst, speed, language]):\n                    return jsonify({'code': 1, 'msg': 'Missing required parameters'})\n\n                self.chuliing['name'] = src\n                self.chuliing['line'] = 0\n                self.chuliing['end'] = False\n\n                thread = Thread(target=self.detail_task, args=(voice, src, dst, float(speed), language))\n                thread.start()\n\n                return jsonify({'code': 0, 'msg': 'ok'})\n            except Exception as e:\n                self.app.logger.error(f\"Error in ttslist: {e}\")\n                return jsonify({'code': 2, 'msg': str(e)})\n\n        @self.app.route('/ttslistjindu', methods=['GET'])\n        def ttslistjindu():\n            try:\n                return jsonify(self.chuliing)\n            except Exception as e:\n                self.app.logger.error(f\"Error in ttslistjindu: {e}\")\n                return jsonify({'code': 2, 'msg': str(e)})\n\n        @self.app.route('/download/<filename>', methods=['GET'])\n        def download(filename):\n            try:\n                return send_from_directory('output', filename, as_attachment=True)\n            except Exception as e:\n                self.app.logger.error(f\"Error in download: {e}\")\n                return jsonify({'code': 2, 'msg': str(e)})\n\n    def detail_task(self, voice, src, dst, speed, language):\n        try:\n            files = os.listdir(src)\n            total_files = len(files)\n            self.chuliing['line'] = 0\n            for i, file in enumerate(files):\n                self.chuliing['name'] = file\n                self.chuliing['line'] = i + 1\n                self.app.logger.info(f\"Processing file: {file}, Progress: {i + 1}/{total_files}\")\n\n                # Simulate TTS processing\n                input_path = os.path.join(src, file)\n                output_path = os.path.join(dst, f\"{os.path.splitext(file)[0]}.wav\")\n                os.makedirs(dst, exist_ok=True)\n\n                # For demonstration, copy the input file to the output directory\n                with open(input_path, 'r') as infile:\n                    content = infile.read()\n                with open(output_path, 'w') as outfile:\n                    outfile.write(content)\n\n            self.chuliing['end'] = True\n        except Exception as e:\n            self.app.logger.error(f\"Error in detail_task: {e}\")\n            self.chuliing['end'] = True\n\n    def run(self, host='0.0.0.0', port=5000):\n        self.app.run(host=host, port=port)"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a Python class that implements an API server using Flask and gevent WSGI server, capable of serving web UI and handling REST API requests with proper error handling.\n\nClass Description: APIServer is a class that encapsulates a Flask web server with gevent WSGI capabilities. It handles server lifecycle management, web UI serving, and error handling for REST API endpoints.\n\nAttributes:\n- stop_event: [Event] - A gevent event used to signal server shutdown\n- config: [RestApiConfig] - Configuration object containing server settings (host, port, etc.)\n- rest_api: [RestAPI] - Reference to the main REST API implementation\n- wsgiserver: [Optional[WSGIServer]] - The gevent WSGI server instance\n- flask_app: [Flask] - The Flask application instance\n\nMethods:\n- __init__(rest_api: \"RestAPI\", config: RestApiConfig, eth_rpc_endpoint: str = None) -> None - Initializes the API server with configuration and dependencies\n- _serve_webui(file_name: str = \"index.html\") -> Response - Serves web UI files from configured directory (handles fallback to index.html)\n- _run() -> None - Internal method to run the WSGI server indefinitely\n- start() -> None - Starts the API server and initializes the WSGI server\n- stop() -> None - Stops the API server gracefully\n- unhandled_exception(exception: Exception) -> Response - Global exception handler that returns error responses and logs critical errors",
    "Canonical_solution": "import errno\nimport logging\nimport socket\nfrom typing import Optional\n\nimport gevent\nimport gevent.pool\nfrom flask import Flask\nfrom gevent.event import Event\nfrom gevent.pywsgi import WSGIServer\nfrom werkzeug.exceptions import NotFound\n\nclass APIServer:\n    def __init__(\n        self,\n        rest_api: \"RestAPI\",\n        config: RestApiConfig,\n        eth_rpc_endpoint: str = None,\n    ) -> None:\n        self.stop_event = Event()\n        self.config = config\n        self.rest_api = rest_api\n        self.wsgiserver: Optional[WSGIServer] = None\n\n        flask_app = Flask(__name__)\n        self.flask_app = flask_app\n\n        self.flask_app.register_error_handler(HTTPStatus.NOT_FOUND, endpoint_not_found)\n        self.flask_app.register_error_handler(Exception, self.unhandled_exception)\n\n        if config.web_ui_enabled:\n            for route in (\"/ui/<path:file_name>\", \"/ui\", \"/ui/\", \"/index.html\", \"/\"):\n                self.flask_app.add_url_rule(\n                    route, route, view_func=self._serve_webui, methods=(\"GET\",)\n                )\n\n    def _serve_webui(self, file_name: str = \"index.html\") -> Response:\n        try:\n            if not file_name:\n                raise NotFound\n\n            response = send_from_directory(self.flask_app.config[\"WEBUI_PATH\"], file_name)\n        except (NotFound, AssertionError):\n            if file_name.endswith(\".json\"):\n                response = api_error(\n                    \"Service unavailable, try again later\", HTTPStatus.SERVICE_UNAVAILABLE\n                )\n            else:\n                response = send_from_directory(self.flask_app.config[\"WEBUI_PATH\"], \"index.html\")\n        return response\n\n    def _run(self) -> None:\n        try:\n            if self.wsgiserver is not None:\n                self.wsgiserver.serve_forever()\n        except gevent.GreenletExit:\n            raise\n        except Exception:\n            self.stop()\n            raise\n\n    def start(self) -> None:\n        self.stop_event.clear()\n\n        wsgi_log = logging.getLogger(__name__ + \".pywsgi\")\n        pool = gevent.pool.Pool()\n        wsgiserver = WSGIServer(\n            (self.config.host, self.config.port),\n            self.flask_app,\n            log=wsgi_log,\n            error_log=wsgi_log,\n            spawn=pool,\n        )\n\n        try:\n            wsgiserver.init_socket()\n        except socket.error as e:\n            if e.errno == errno.EADDRINUSE:\n                raise APIServerPortInUseError(f\"{self.config.host}:{self.config.port}\")\n            raise\n\n        self.wsgiserver = wsgiserver\n        super().start()\n\n    def stop(self) -> None:\n        self.stop_event.set()\n\n        if self.wsgiserver is not None:\n            self.wsgiserver.stop(timeout=5)\n            self.wsgiserver = None\n\n    def unhandled_exception(self, exception: Exception) -> Response:\n        log.critical(\n            \"Unhandled exception when processing endpoint request\",\n            exc_info=True,\n            node=self.rest_api.checksum_address,\n        )\n        self.greenlet.kill(exception)\n        return api_error([str(exception)], HTTPStatus.INTERNAL_SERVER_ERROR)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport logging\nfrom flask import Flask, Response, request, jsonify\nfrom gevent.pywsgi import WSGIServer\nfrom gevent import event\nfrom typing import Optional, TypeVar, Generic\n\nRestAPI = TypeVar('RestAPI')\nRestApiConfig = TypeVar('RestApiConfig')\n\nclass APIServer(Generic[RestAPI, RestApiConfig]):\n    def __init__(self, rest_api: RestAPI, config: RestApiConfig, eth_rpc_endpoint: str = None) -> None:\n        self.stop_event = event.Event()\n        self.config = config\n        self.rest_api = rest_api\n        self.eth_rpc_endpoint = eth_rpc_endpoint\n        self.wsgiserver: Optional[WSGIServer] = None\n        self.flask_app = Flask(__name__)\n        self._setup_routes()\n        self._setup_error_handlers()\n\n    def _serve_webui(self, file_name: str = \"index.html\") -> Response:\n        webui_dir = self.config.webui_dir or os.path.join(os.path.dirname(__file__), 'webui')\n        if not os.path.exists(webui_dir):\n            return Response(\"Web UI directory not found\", status=404)\n        file_path = os.path.join(webui_dir, file_name)\n        if not os.path.exists(file_path):\n            return Response(\"File not found\", status=404)\n        with open(file_path, 'r') as f:\n            content = f.read()\n        return Response(content, mimetype='text/html')\n\n    def _run(self) -> None:\n        try:\n            self.wsgiserver = WSGIServer((self.config.host, self.config.port), self.flask_app, spawn=self.config.spawn)\n            self.wsgiserver.start()\n            self.stop_event.wait()\n        except Exception as e:\n            logging.error(f\"Server run error: {e}\")\n        finally:\n            if self.wsgiserver:\n                self.wsgiserver.stop()\n\n    def start(self) -> None:\n        self.stop_event.clear()\n        self._run()\n\n    def stop(self) -> None:\n        self.stop_event.set()\n        if self.wsgiserver:\n            self.wsgiserver.stop()\n\n    def unhandled_exception(self, exception: Exception) -> Response:\n        logging.critical(f\"Unhandled exception: {exception}\", exc_info=True)\n        return jsonify({\"error\": \"Internal server error\", \"message\": str(exception)}), 500\n\n    def _setup_routes(self):\n        @self.flask_app.route('/')\n        def index():\n            return self._serve_webui()\n\n        @self.flask_app.route('/<path:filename>')\n        def serve_static(filename):\n            return self._serve_webui(filename)\n\n        @self.flask_app.route('/api/<path:endpoint>', methods=['GET', 'POST', 'PUT', 'DELETE'])\n        def api_route(endpoint):\n            try:\n                return self.rest_api.handle_request(request, endpoint)\n            except Exception as e:\n                return self.unhandled_exception(e)\n\n    def _setup_error_handlers(self):\n        @self.flask_app.errorhandler(500)\n        def handle_500(error):\n            return self.unhandled_exception(error)"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Create a Flask-based API server for the OWASP Nettacker security tool that handles scan requests, retrieves results, and manages logs through HTTP endpoints.\n\nClass Description: The NettackerAPI class implements a RESTful API service using Flask framework to control and interact with the OWASP Nettacker security scanning tool. It provides endpoints for initiating scans, retrieving results in JSON format, and accessing scan logs.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- options: [SimpleNamespace] - Configuration options for the API server\n- app.config[\"OWASP_NETTACKER_CONFIG\"]: [dict] - Configuration dictionary containing API security settings and options\n\nMethods:\n- __init__(options) -> [None] - Initializes the Flask app with configuration options\n- _setup_routes() -> [None] - Defines all API endpoints and their handlers\n- _sanitize_report_path_filename(report_path_filename) -> [Path|bool] - Sanitizes and validates report filenames\n- run() -> [None] - Starts the Flask server with SSL/TLS configuration\n- start_api_server() -> [None] - Runs the API server in a separate process\n\nEndpoint Methods:\n- new_scan() -> [Response] - Handles POST requests to start new scans (returns scan arguments or error)\n- get_results_json() -> [Response] - Retrieves scan results in JSON format (returns file download)\n- get_logs() -> [Response] - Retrieves scan logs in JSON format (returns file download)",
    "Canonical_solution": "from flask import Flask, jsonify, request as flask_request, Response, make_response\nfrom werkzeug.utils import secure_filename\nimport os\nimport json\nimport csv\nimport random\nimport string\nimport multiprocessing\nimport time\nfrom threading import Thread\nfrom types import SimpleNamespace\n\nclass NettackerAPI:\n    def __init__(self, options):\n        self.app = Flask(__name__, template_folder=str(options.web_static_dir))\n        self.app.config[\"OWASP_NETTACKER_CONFIG\"] = {\n            \"api_access_key\": options.api_access_key,\n            \"api_client_whitelisted_ips\": options.api_client_whitelisted_ips,\n            \"api_access_log\": options.api_access_log,\n            \"api_cert\": options.api_cert,\n            \"api_cert_key\": options.api_cert_key,\n            \"language\": options.language,\n            \"options\": options,\n        }\n        \n        self._setup_routes()\n        self.options = options\n\n    def _setup_routes(self):\n        @self.app.route(\"/new/scan\", methods=[\"GET\", \"POST\"])\n        def new_scan():\n            api_key_is_valid(self.app, flask_request)\n            form_values = dict(flask_request.form)\n            raw_report_path_filename = form_values.get(\"report_path_filename\")\n            report_path_filename = self._sanitize_report_path_filename(raw_report_path_filename)\n            if not report_path_filename:\n                return jsonify(structure(status=\"error\", msg=\"Invalid report filename\")), 400\n            form_values[\"report_path_filename\"] = str(report_path_filename)\n            for key in nettacker_application_config:\n                if key not in form_values:\n                    form_values[key] = nettacker_application_config[key]\n\n            nettacker_app = Nettacker(api_arguments=SimpleNamespace(**form_values))\n            self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"options\"] = nettacker_app.arguments\n            thread = Thread(target=nettacker_app.run)\n            thread.start()\n\n            return jsonify(vars(nettacker_app.arguments)), 200\n\n        @self.app.route(\"/results/get_json\", methods=[\"GET\"])\n        def get_results_json():\n            api_key_is_valid(self.app, flask_request)\n            session = create_connection()\n            result_id = get_value(flask_request, \"id\")\n            if not result_id:\n                return jsonify(structure(status=\"error\", msg=_(\"invalid_scan_id\"))), 400\n            scan_details = session.query(Report).filter(Report.id == result_id).first()\n            json_object = json.dumps(get_logs_by_scan_id(scan_details.scan_unique_id))\n            filename = \".\".join(scan_details.report_path_filename.split(\".\")[:-1])[1:] + \".json\"\n            return Response(\n                json_object,\n                mimetype=\"application/json\",\n                headers={\"Content-Disposition\": \"attachment;filename=\" + filename},\n            )\n\n        @self.app.route(\"/logs/get_json\", methods=[\"GET\"])\n        def get_logs():\n            api_key_is_valid(self.app, flask_request)\n            target = get_value(flask_request, \"target\")\n            data = logs_to_report_json(target)\n            json_object = json.dumps(data)\n            filename = (\n                \"report-\"\n                + now(format=\"%Y_%m_%d_%H_%M_%S\")\n                + \"\".join(random.choice(string.ascii_lowercase) for _ in range(10))\n            )\n            return Response(\n                json_object,\n                mimetype=\"application/json\",\n                headers={\"Content-Disposition\": \"attachment;filename=\" + filename + \".json\"},\n            )\n\n    def _sanitize_report_path_filename(self, report_path_filename):\n        filename = secure_filename(os.path.basename(report_path_filename))\n        if not filename:\n            return False\n        VALID_EXTENSIONS = (\".html\", \".htm\", \".txt\", \".json\", \".csv\")\n        if \".\" in filename:\n            if filename.endswith(VALID_EXTENSIONS):\n                safe_report_path = nettacker_path_config.results_dir / filename\n            else:\n                return False\n        else:\n            safe_report_path = nettacker_path_config.results_dir / filename\n        if not safe_report_path.is_relative_to(nettacker_path_config.results_dir):\n            return False\n        return safe_report_path\n\n    def run(self):\n        if self.options.api_cert and self.options.api_cert_key:\n            self.app.run(\n                host=self.options.api_hostname,\n                port=self.options.api_port,\n                debug=self.options.api_debug_mode,\n                ssl_context=(self.options.api_cert, self.options.api_cert_key),\n                threaded=True,\n            )\n        else:\n            self.app.run(\n                host=self.options.api_hostname,\n                port=self.options.api_port,\n                debug=self.options.api_debug_mode,\n                ssl_context=\"adhoc\",\n                threaded=True,\n            )\n\n    def start_api_server(self):\n        p = multiprocessing.Process(target=self.run)\n        p.start()\n        while len(multiprocessing.active_children()) != 0:\n            try:\n                time.sleep(0.3)\n            except KeyboardInterrupt:\n                for process in multiprocessing.active_children():\n                    process.terminate()\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_file\nfrom werkzeug.utils import secure_filename\nfrom pathlib import Path\nimport os\nimport json\nimport threading\nimport subprocess\n\nclass NettackerAPI:\n    def __init__(self, options):\n        self.app = Flask(__name__)\n        self.options = options\n        self.app.config[\"OWASP_NETTACKER_CONFIG\"] = {\n            \"API_SECURITY\": True,\n            \"API_PORT\": 5001,\n            \"API_HOST\": \"0.0.0.0\",\n            \"REPORT_STORAGE_PATH\": \"/var/www/reports\"\n        }\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/api/v1/new_scan\", methods=[\"POST\"])\n        def new_scan():\n            data = request.json\n            if not data or \"target\" not in data:\n                return jsonify({\"error\": \"Missing target parameter\"}), 400\n            target = data[\"target\"]\n            scan_args = {\"target\": target}\n            # Simulate scan initiation\n            return jsonify({\"scan_id\": \"12345\", \"arguments\": scan_args})\n\n        @self.app.route(\"/api/v1/results/<scan_id>/json\", methods=[\"GET\"])\n        def get_results_json(scan_id):\n            report_path = Path(self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"REPORT_STORAGE_PATH\"]) / f\"{scan_id}.json\"\n            if not report_path.exists():\n                return jsonify({\"error\": \"Report not found\"}), 404\n            return send_file(report_path, as_attachment=True)\n\n        @self.app.route(\"/api/v1/logs/<scan_id>/json\", methods=[\"GET\"])\n        def get_logs(scan_id):\n            log_path = Path(self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"REPORT_STORAGE_PATH\"]) / f\"{scan_id}_logs.json\"\n            if not log_path.exists():\n                return jsonify({\"error\": \"Log file not found\"}), 404\n            return send_file(log_path, as_attachment=True)\n\n    def run(self):\n        self.app.run(\n            host=self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"API_HOST\"],\n            port=self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"API_PORT\"],\n            ssl_context=(\"cert.pem\", \"key.pem\")\n        )\n\n    def start_api_server(self):\n        api_thread = threading.Thread(target=self.run)\n        api_thread.start()"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles GET requests for semantic similarity search, processes the query parameters, performs the search operation, and returns JSON-formatted results with timing information.\n\nFunction Description: The function `run_simcse_demo` initializes and runs a Flask web server that provides an API endpoint for semantic similarity search. It configures CORS, sets up request handling, and launches the server using Tornado for production-ready serving. The API endpoint processes query parameters, performs a search operation using an embedder, and returns results with execution time.\n\nInput:\n- port: [int] - The port number on which the server will listen\n- args: [argparse.Namespace] - Command line arguments containing:\n  - ip: [str] - IP address to bind the server\n  - port: [str] - Port number (as string) to bind the server\n\nOutput: None (The function runs indefinitely as a web server)",
    "Canonical_solution": "import json\nimport argparse\nimport os\nimport logging\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\n\nlogging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s', datefmt='%m/%d/%Y %H:%M:%S',\n                    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef run_simcse_demo(port, args):\n    app = Flask(__name__, static_folder='./static')\n    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False\n    CORS(app)\n\n    @app.route('/api', methods=['GET'])\n    def api():\n        query = request.args['query']\n        top_k = int(request.args['topk'])\n        threshold = float(request.args['threshold'])\n        start = time()\n        results = embedder.search(query, top_k=top_k, threshold=threshold)\n        ret = []\n        out = {}\n        for sentence, score in results:\n            ret.append({\"sentence\": sentence, \"score\": score})\n        span = time() - start\n        out['ret'] = ret\n        out['time'] = \"{:.4f}\".format(span)\n        return jsonify(out)\n\n    addr = args.ip + \":\" + args.port\n    logger.info(f'Starting Index server at {addr}')\n    http_server = HTTPServer(WSGIContainer(app))\n    http_server.listen(port)\n    IOLoop.instance().start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport time\nimport torch\nfrom sentence_transformers import SentenceTransformer\n\ndef run_simcse_demo(port, args):\n    app = Flask(__name__)\n    CORS(app)\n\n    embedder = SentenceTransformer('bert-base-nli-mean-tokens')\n\n    @app.route('/search', methods=['GET'])\n    def search():\n        query = request.args.get('query')\n        if not query:\n            return jsonify({'error': 'Missing query parameter'}), 400\n\n        start_time = time.time()\n        query_embedding = embedder.encode(query, convert_to_tensor=True)\n        # Simulating a search operation (replace with actual search logic)\n        results = [{'text': f\"Result {i}\", 'similarity': float(torch.rand(1).item())} for i in range(5)]\n        end_time = time.time()\n\n        response = {\n            'query': query,\n            'results': results,\n            'execution_time_seconds': end_time - start_time\n        }\n        return jsonify(response)\n\n    app.run(host=args.ip, port=int(port), debug=False)"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a Flask-based API class that serves as an interface for a machine learning model, providing endpoints to calculate potential, gradient, and perform minimization operations.\n\nClass Description: FlaskAPI is a class that wraps a machine learning model and exposes its functionality through a RESTful API using Flask. It handles HTTP POST requests to perform model operations and returns JSON responses.\n\nAttributes:\n- webapp: Flask - The Flask application instance that handles HTTP requests\n- model: Any - The machine learning model that provides the core functionality (prediction, gradient calculation, and minimization)\n\nMethods:\n- __init__(model) -> None - Initializes the FlaskAPI with the provided model and sets up routes\n- _setup_routes() -> None - Private method that configures the URL routes and their corresponding handlers\n- run(**kwargs) -> None - Starts the Flask web server with the provided configuration options\n- potential() -> (Response, int) - Handles POST requests to '/potential', calculates model prediction for input data, returns JSON response with result\n- gradient() -> (Response, int) - Handles POST requests to '/gradient', calculates model gradient for input data, returns JSON response with gradient values\n- minimize() -> (Response, int) - Handles POST requests to '/minimize', performs structure minimization using the model, returns JSON response with optimized structure and energy",
    "Canonical_solution": "from flask import request, Flask, jsonify\nimport numpy as np\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.webapp.add_url_rule('/potential', 'potential', self.potential, methods=[\"POST\"])\n        self.webapp.add_url_rule('/gradient', 'gradient', self.gradient, methods=[\"POST\"])\n        self.webapp.add_url_rule('/minimize', 'minimize', self.minimize, methods=[\"POST\"])\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)\n\n    def potential(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        result = self.model.pred_one(x0, a0)\n        return jsonify({'y': result.tolist()[0]}), 200\n\n    def gradient(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.grad_one(x0, a0)\n        res = res.reshape((num_atoms, 3))\n        return jsonify({'grad': res.tolist()}), 200\n\n    def minimize(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        constraints = None\n        if 'constraints' in content:\n            constraints = content['constraints']\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.minimize_structure(x0, a0, constraints)\n        res = res.reshape((num_atoms, 3))\n        y = self.model.pred_one(res, a0).tolist()[0]\n        return jsonify({'X': res.tolist(), 'y': y}), 200",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.webapp.add_url_rule('/potential', 'potential', self.potential, methods=['POST'])\n        self.webapp.add_url_rule('/gradient', 'gradient', self.gradient, methods=['POST'])\n        self.webapp.add_url_rule('/minimize', 'minimize', self.minimize, methods=['POST'])\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)\n\n    def potential(self):\n        try:\n            data = request.get_json()\n            input_data = data.get('input')\n            result = self.model.predict(input_data)\n            return jsonify({'result': result}), 200\n        except Exception as e:\n            return jsonify({'error': str(e)}), 500\n\n    def gradient(self):\n        try:\n            data = request.get_json()\n            input_data = data.get('input')\n            grad = self.model.compute_gradient(input_data)\n            return jsonify({'gradient': grad.tolist()}), 200\n        except Exception as e:\n            return jsonify({'error': str(e)}), 500\n\n    def minimize(self):\n        try:\n            data = request.get_json()\n            input_data = data.get('input')\n            optimized_structure, energy = self.model.minimize_structure(input_data)\n            return jsonify({'structure': optimized_structure.tolist(), 'energy': energy}), 200\n        except Exception as e:\n            return jsonify({'error': str(e)}), 500"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a Flask-based HTTP server for managing blueprints, including operations for retrieving, storing, and validating blueprint data and associated tarballs. The server should handle various HTTP methods (GET, PUT) and include metrics tracking for bandwidth and request counts.\n\nClass Description: BlueprintServer is a Flask application wrapper that provides endpoints for blueprint management, including CRUD operations for blueprints and their associated tarballs. It includes validation, metrics tracking, and response handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- browser_pattern: re.Pattern - Regular expression pattern for detecting browser user agents\n\nMethods:\n- __init__() -> None - Initializes the Flask app and sets up routes\n- _setup_routes() -> None - Defines all URL routes and their associated handlers\n- _blueprint(secret: str, name: str) -> Union[Blueprint, None, bool] - Retrieves and validates a blueprint from the backend\n- _server() -> str - Returns the server's base URL\n- _validate_secret(secret: str) -> None - Validates the secret format (400 if invalid)\n- _validate_name(name: str) -> None - Validates the name format (400 if invalid)\n- _validate_sha(sha: str) -> None - Validates the SHA format (400 if invalid)\n- secret() -> MeteredResponse - Generates and returns a new secret (201 response)\n- get_blueprint(secret: str, name: str) -> Union[MeteredResponse, abort] - Retrieves a blueprint (200/301/404 response)\n- put_blueprint(secret: str, name: str) -> MeteredResponse - Stores a new blueprint (202/400/502 response)\n- get_tarball(secret: str, name: str, sha: str) -> Union[redirect, abort] - Retrieves a tarball (301/404 response)\n- put_tarball(secret: str, name: str, sha: str) -> MeteredResponse - Stores a new tarball (202/400/502 response)\n- sh(secret: str, name: str, name2: str) -> Union[MeteredResponse, abort] - Generates shell script (200/400/404/502 response)\n- user_data(secret: str, name: str) -> MeteredResponse - Generates user-data script (200/404/502 response)\n- run() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, Response, request\nimport re\nimport os\nimport base64\nimport json\nimport librato\nimport statsd\nfrom blueprint import Blueprint\nimport backend\n\nclass MeteredResponse(Response):\n    def __init__(self, *args, **kwargs):\n        super(MeteredResponse, self).__init__(*args, **kwargs)\n        content_length = len(kwargs.get('response', ''))\n        if 0 < content_length:\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self.browser_pattern = re.compile(r'Chrome|Gecko|Microsoft|Mozilla|Safari|WebKit')\n\n    def _setup_routes(self):\n        self.app.route('/secret', methods=['GET'])(self.secret)\n        self.app.route('/<secret>/<name>', methods=['GET'])(self.get_blueprint)\n        self.app.route('/<secret>/<name>', methods=['PUT'])(self.put_blueprint)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['GET'])(self.get_tarball)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['PUT'])(self.put_tarball)\n        self.app.route('/<secret>/<name>/<name2>.sh', methods=['GET'])(self.sh)\n        self.app.route('/<secret>/<name>/user-data.sh', methods=['GET'])(self.user_data)\n\n    def _blueprint(self, secret, name):\n        data = backend.get_blueprint(secret, name)\n        if data is None:\n            return None\n        elif data is False:\n            return False\n        b = Blueprint()\n        b.name = name\n        b.update(json.loads(data))\n        return b\n\n    def _server(self):\n        return request.url_root\n\n    def _validate_secret(self, secret):\n        if re.match(r'^[0-9A-Za-z_-]{64}$', secret) is None:\n            abort(400)\n\n    def _validate_name(self, name):\n        if re.search(r'[/ \\t\\r\\n]', name) is not None:\n            abort(400)\n\n    def _validate_sha(self, sha):\n        if re.match(r'^[0-9a-f]{40}$', sha) is None:\n            abort(400)\n\n    def secret(self):\n        while True:\n            s = base64.urlsafe_b64encode(os.urandom(48))\n            try:\n                iter(backend.list(s)).next()\n            except StopIteration:\n                break\n        return MeteredResponse(response='{0}\\n'.format(s),\n                             status=201,\n                             content_type='text/plain')\n\n    def get_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        content_length = backend.head_blueprint(secret, name)\n        if content_length is None:\n            abort(404)\n\n        if self.browser_pattern.search(request.environ.get('HTTP_USER_AGENT', '')) or 'html' == request.args.get('format'):\n            librato.count('blueprint-io-server.renders')\n            statsd.increment('blueprint-io-server.renders')\n            return render_template('blueprint.html', b=self._blueprint(secret, name))\n        else:\n            librato.count('blueprint-io-server.requests.get')\n            statsd.increment('blueprint-io-server.requests.get')\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n            return redirect(backend.url_for_blueprint(secret, name), code=301)\n\n    def put_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        try:\n            for k in request.json.iterkeys():\n                if k not in ('arch', 'files', 'packages', 'services', 'sources'):\n                    abort(400)\n        except ValueError:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is not None and b is not False:\n            for filename in set(b.sources.itervalues()) - set(request.json.get('sources', {}).itervalues()):\n                backend.delete_tarball(secret, name, filename[0:-4])\n\n        if not backend.put_blueprint(secret, name, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def get_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        content_length = backend.head_tarball(secret, name, sha)\n        if content_length is None:\n            abort(404)\n\n        librato.count('blueprint-io-server.requests.get')\n        statsd.increment('blueprint-io-server.requests.get')\n        librato.count('blueprint-io-server.bandwidth.out', content_length)\n        statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\n        return redirect(backend.url_for_tarball(secret, name, sha), code=301)\n\n    def put_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        if hashlib.sha1(request.data).hexdigest() != sha:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        if '{0}.tar'.format(sha) not in b.sources.itervalues():\n            abort(400)\n\n        if not backend.put_tarball(secret, name, sha, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def sh(self, secret, name, name2):\n        if 'user-data' == name2:\n            return self.user_data(secret, name)\n        if name != name2:\n            abort(400)\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        s = b.sh(server=self._server(), secret=secret)\n        s.out.insert(0, '#!/bin/sh\\n\\n')\n        return MeteredResponse(response=s.dumps(),\n                             status=200,\n                             content_type='text/plain')\n\n    def user_data(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        return MeteredResponse(response=f\"\"\"#!/bin/sh\n\nset -e\n\nTMPDIR=\"$(mktemp -d)\"\ncd \"$TMPDIR\"\ntrap \"rm -rf \\\\\"$TMPDIR\\\\\"\" EXIT\n\nwget \"{self._server()}/{secret}/{name}/{name}.sh\"\n\nsh \"$(ls)\"\n\"\"\",\n                           status=200,\n                           content_type='text/plain')\n\n    def run(self):\n        self.app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect, abort\nfrom flask.blueprints import Blueprint\nimport re\nimport os\nimport hashlib\nimport tarfile\nimport shutil\nfrom werkzeug.datastructures import FileStorage\nfrom prometheus_client import Counter, Histogram\n\nclass MeteredResponse:\n    def __init__(self, response, content_length):\n        self.response = response\n        self.content_length = content_length\n\n    def get(self):\n        return self.response, self.content_length\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self.browser_pattern = re.compile(r'Mozilla|Chrome|Safari|Firefox')\n        self.request_count = Counter('blueprint_requests_total', 'Total number of requests')\n        self.bandwidth = Histogram('blueprint_bandwidth_bytes', 'Bandwidth usage in bytes')\n\n    def _setup_routes(self):\n        self.app.route('/secret', methods=['GET'])(self.secret)\n        self.app.route('/<secret>/<name>', methods=['GET'])(self.get_blueprint)\n        self.app.route('/<secret>/<name>', methods=['PUT'])(self.put_blueprint)\n        self.app.route('/<secret>/<name>/<sha>', methods=['GET'])(self.get_tarball)\n        self.app.route('/<secret>/<name>/<sha>', methods=['PUT'])(self.put_tarball)\n        self.app.route('/<secret>/<name>/<name2>', methods=['GET'])(self.sh)\n        self.app.route('/<secret>/<name>/user-data', methods=['GET'])(self.user_data)\n\n    def _blueprint(self, secret, name):\n        # Placeholder for blueprint retrieval logic\n        return None\n\n    def _server(self):\n        return \"http://localhost:5000\"\n\n    def _validate_secret(self, secret):\n        if not secret or len(secret) < 16:\n            abort(400)\n\n    def _validate_name(self, name):\n        if not name or not name.isalnum():\n            abort(400)\n\n    def _validate_sha(self, sha):\n        if not sha or len(sha) != 40:\n            abort(400)\n\n    def secret(self):\n        self.request_count.inc()\n        new_secret = os.urandom(16).hex()\n        return MeteredResponse(f\"Secret: {new_secret}\", len(new_secret))\n\n    def get_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self.request_count.inc()\n        blueprint = self._blueprint(secret, name)\n        if not blueprint:\n            abort(404)\n        return MeteredResponse(blueprint, len(blueprint))\n\n    def put_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self.request_count.inc()\n        data = request.get_json()\n        if not data:\n            abort(400)\n        # Placeholder for storing blueprint logic\n        return MeteredResponse(\"Blueprint stored\", 0)\n\n    def get_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self._validate_sha(sha)\n        self.request_count.inc()\n        # Placeholder for retrieving tarball logic\n        abort(404)\n\n    def put_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self._validate_sha(sha)\n        self.request_count.inc()\n        file = request.files.get('file')\n        if not file or not isinstance(file, FileStorage):\n            abort(400)\n        # Placeholder for storing tarball logic\n        return MeteredResponse(\"Tarball stored\", 0)\n\n    def sh(self, secret, name, name2):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self._validate_name(name2)\n        self.request_count.inc()\n        # Placeholder for generating shell script logic\n        abort(404)\n\n    def user_data(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self.request_count.inc()\n        # Placeholder for generating user-data script logic\n        abort(404)\n\n    def run(self):\n        self.app.run(debug=True)"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Flask-based HTTP server to manage color resources with CRUD (Create, Read, Update, Delete) operations. The server should handle JSON data and respond with appropriate JSON responses.\n\nFunction Description: The code implements a RESTful API for managing color resources stored in a JSON file. It provides endpoints to retrieve all colors, get a specific color by name, create a new color, update an existing color, and delete a color.\n\nInput:\n- For GET /colors: No input parameters\n- For GET /colors/<name>: 'name' parameter in URL path\n- For POST /colors: JSON payload with 'name' and 'value' fields\n- For PUT /colors/<name>: 'name' parameter in URL path and JSON payload with optional 'value' field\n- For DELETE /colors/<name>: 'name' parameter in URL path\n\nOutput:\n- For GET /colors: JSON response containing all colors\n- For GET /colors/<name>: JSON response with the specific color or error\n- For POST /colors: JSON response with the created color and HTTP status 201\n- For PUT /colors/<name>: JSON response with the updated color or error\n- For DELETE /colors/<name>: JSON response with the deleted color or error",
    "Canonical_solution": "from flask import Flask, jsonify, request\nimport json\n\ncolors = json.load(file('colors.json', 'r'))\napp = Flask(__name__)\n\n@app.route('/colors', methods = ['GET'])\ndef get_colors():\n    return jsonify( { \"data\" :  colors })\n\n@app.route('/colors/<name>', methods = ['GET'])\ndef get_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors', methods= ['POST'])\ndef create_color():\n    color = {\n        'name': request.json['name'],\n        'value': request.json['value']\n    }\n    colors.append(color)\n    return jsonify( color ), 201\n\n@app.route('/colors/<name>', methods= ['PUT'])\ndef update_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            color['value'] = request.json.get('value', color['value'])\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            colors.remove(color)\n            return jsonify(color)\n    return jsonify( { 'error' : True } )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\nCOLORS_FILE = 'colors.json'\n\ndef load_colors():\n    if not os.path.exists(COLORS_FILE):\n        with open(COLORS_FILE, 'w') as f:\n            json.dump({}, f)\n    with open(COLORS_FILE, 'r') as f:\n        return json.load(f)\n\ndef save_colors(colors):\n    with open(COLORS_FILE, 'w') as f:\n        json.dump(colors, f)\n\n@app.route('/colors', methods=['GET'])\ndef get_colors():\n    colors = load_colors()\n    return jsonify(colors)\n\n@app.route('/colors/<name>', methods=['GET'])\ndef get_color(name):\n    colors = load_colors()\n    color = colors.get(name)\n    if color is None:\n        return jsonify({'error': 'Color not found'}), 404\n    return jsonify(color)\n\n@app.route('/colors', methods=['POST'])\ndef create_color():\n    data = request.get_json()\n    name = data.get('name')\n    value = data.get('value')\n    if not name or not value:\n        return jsonify({'error': 'Name and value are required'}), 400\n    colors = load_colors()\n    if name in colors:\n        return jsonify({'error': 'Color already exists'}), 400\n    colors[name] = {'name': name, 'value': value}\n    save_colors(colors)\n    return jsonify({'name': name, 'value': value}), 201\n\n@app.route('/colors/<name>', methods=['PUT'])\ndef update_color(name):\n    data = request.get_json()\n    value = data.get('value')\n    colors = load_colors()\n    if name not in colors:\n        return jsonify({'error': 'Color not found'}), 404\n    if value is not None:\n        colors[name]['value'] = value\n    save_colors(colors)\n    return jsonify(colors[name])\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    colors = load_colors()\n    if name not in colors:\n        return jsonify({'error': 'Color not found'}), 404\n    deleted_color = colors.pop(name)\n    save_colors(colors)\n    return jsonify(deleted_color)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles computation requests, supports CORS, and provides flexible serialization formats with proper error handling and logging capabilities.\n\nClass Description: The Server class encapsulates a Flask application with enhanced exception formatting and provides methods to run the server and handle computation requests through a dedicated API blueprint.\n\nAttributes:\n- app: [FlaskWithExceptionFormatting] - The Flask application instance with custom exception formatting\n- data: [dict] - Data store for the server (optional)\n- port: [int] - The port number the server is running on\n\nMethods:\n- __init__: [Name](data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None) -> [None] - Initializes the server with configuration options including data storage, serialization formats, authorization, profiling, and logging settings\n- run: [Name](port=6363, retry=False, **kwargs) -> [None] - Starts the Flask server on the specified port with optional retry logic if the port is busy\n\nAdditional Blueprint (api) Methods:\n- compserver: [Name]() -> [Response] - Handles POST, HEAD, and OPTIONS requests for computation, processes incoming data with supported serialization formats, and returns computation results (decorated with CORS support)",
    "Canonical_solution": "from flask import Flask, Blueprint, Response\nfrom flask_cors import cross_origin\nfrom werkzeug.http import parse_options_header\nimport collections\nimport sys\nimport logging\nfrom logging import Formatter\nfrom functools import wraps\nimport traceback\nfrom datetime import datetime\nimport os\nimport socket\nfrom time import time\nfrom warnings import warn\nimport importlib\nfrom blaze import compute, resource\nfrom blaze.compatibility import ExitStack\nfrom .serialization import json, all_formats\nfrom ..expr import Symbol, symbol\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        self.log_exception_formatter = kwargs.pop('log_exception_formatter', \n                                                 lambda tb: ''.join(traceback.format_tb(tb)))\n        super(FlaskWithExceptionFormatting, self).__init__(*args, **kwargs)\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False,\n                 profiler_output=None, profile_by_default=False, allow_add=False,\n                 logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        app = self.app = FlaskWithExceptionFormatting('blaze.server.server',\n                                                     log_exception_formatter=log_exception_formatter)\n        app.register_blueprint(api,\n                              data=data if data is not None else {},\n                              formats=formats if formats is not None else (json,),\n                              authorization=authorization,\n                              allow_profiler=allow_profiler,\n                              profiler_output=profiler_output,\n                              profile_by_default=profile_by_default,\n                              allow_add=allow_add)\n        self.data = data\n        if logfile:\n            handler = logging.FileHandler(logfile) if isinstance(logfile, (str, bytes)) else logging.StreamHandler(logfile)\n            handler.setFormatter(Formatter('[%(asctime)s %(levelname)s] %(message)s [in %(pathname)s:%(lineno)d]'))\n            handler.setLevel(getattr(logging, loglevel))\n            app.logger.addHandler(handler)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        self.port = port\n        try:\n            self.app.run(port=port, **kwargs)\n        except socket.error:\n            if not retry:\n                raise\n            warn(\"Oops, couldn't connect on port %d.  Is it busy?\" % port)\n            self.run(port=port + 1, retry=retry, **kwargs)\n\napi = Blueprint('api', __name__)\n\n@api.route('/compute', methods=['POST', 'HEAD', 'OPTIONS'])\n@cross_origin(origins='*', methods=['POST', 'HEAD', 'OPTIONS'])\ndef compserver():\n    raw_content_type = flask.request.headers['content-type']\n    content_type, options = parse_options_header(raw_content_type)\n    \n    if content_type not in accepted_mimetypes:\n        return ('Unsupported serialization format %s' % content_type, 415)\n\n    try:\n        serial = _get_format(accepted_mimetypes[content_type])\n    except KeyError:\n        return (\"Unsupported serialization format '%s'\" % content_type, 415)\n\n    try:\n        payload = serial.loads(flask.request.data)\n    except ValueError:\n        return (\"Bad data.  Got %s \" % flask.request.data, 400)\n\n    # Main computation logic here\n    # ... (rest of computation handling code)\n\n    return serial.dumps(response)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, Response\nfrom flask_cors import CORS\nimport logging\nimport sys\nimport json\nimport yaml\nimport xml.etree.ElementTree as ET\nfrom functools import wraps\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._exception_formatter = None\n\n    def set_exception_formatter(self, formatter):\n        self._exception_formatter = formatter\n\n    def handle_exception(self, e):\n        if self._exception_formatter:\n            return self._exception_formatter(e), 500\n        return super().handle_exception(e)\n\ndef format_exception(e):\n    return {\n        \"error\": str(e),\n        \"type\": type(e).__name__,\n        \"details\": str(e.__traceback__)\n    }\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        self.app = FlaskWithExceptionFormatting(__name__)\n        self.app.set_exception_formatter(log_exception_formatter or format_exception)\n        self.data = data or {}\n        self.port = 6363\n        self.formats = formats or ['json']\n        self.authorization = authorization\n        self.allow_profiler = allow_profiler\n        self.profiler_output = profiler_output\n        self.profile_by_default = profile_by_default\n        self.allow_add = allow_add\n        self.logfile = logfile\n        self.loglevel = loglevel\n        self._setup_logging()\n        self._setup_cors()\n        self.api = self._create_api_blueprint()\n        self.app.register_blueprint(self.api, url_prefix='/api')\n\n    def _setup_logging(self):\n        logging.basicConfig(\n            level=self.loglevel,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            handlers=[logging.StreamHandler(self.logfile)]\n        )\n\n    def _setup_cors(self):\n        CORS(self.app)\n\n    def _create_api_blueprint(self):\n        api = Flask(__name__)\n\n        @api.route('/compserver', methods=['POST', 'HEAD', 'OPTIONS'])\n        def compserver():\n            if request.method == 'OPTIONS':\n                return '', 204\n\n            if self.authorization and not self._check_authorization():\n                return jsonify({\"error\": \"Unauthorized\"}), 401\n\n            try:\n                content_type = request.headers.get('Content-Type')\n                if not content_type:\n                    return jsonify({\"error\": \"Content-Type header is missing\"}), 400\n\n                if content_type not in self.formats:\n                    return jsonify({\"error\": f\"Unsupported format: {content_type}\"}), 415\n\n                data = self._deserialize(request.data, content_type)\n                result = self._process_computation(data)\n                return self._serialize(result, content_type), 200\n            except Exception as e:\n                self.app.logger.error(f\"Error processing computation: {e}\")\n                return jsonify({\"error\": str(e)}), 500\n\n        return api\n\n    def _check_authorization(self):\n        auth_header = request.headers.get('Authorization')\n        return auth_header == self.authorization\n\n    def _deserialize(self, data, content_type):\n        if content_type == 'application/json':\n            return json.loads(data)\n        elif content_type == 'application/yaml':\n            return yaml.safe_load(data)\n        elif content_type == 'application/xml':\n            root = ET.fromstring(data)\n            return {child.tag: child.text for child in root}\n        else:\n            raise ValueError(f\"Unsupported format: {content_type}\")\n\n    def _serialize(self, data, content_type):\n        if content_type == 'application/json':\n            return jsonify(data)\n        elif content_type == 'application/yaml':\n            return Response(yaml.dump(data), mimetype='application/yaml')\n        elif content_type == 'application/xml':\n            root = ET.Element(\"result\")\n            for key, value in data.items():\n                child = ET.SubElement(root, key)\n                child.text = str(value)\n            return Response(ET.tostring(root, encoding='utf-8'), mimetype='application/xml')\n        else:\n            raise ValueError(f\"Unsupported format: {content_type}\")\n\n    def _process_computation(self, data):\n        # Placeholder for actual computation logic\n        return {\"status\": \"success\", \"data\": data}\n\n    def run(self, port=6363, retry=False, **kwargs):\n        self.port = port\n        try:\n            self.app.run(host='0.0.0.0', port=port, **kwargs)\n        except OSError as e:\n            if retry:\n                self._retry_run(port)\n            else:\n                self.app.logger.error(f\"Failed to start server on port {port}: {e}\")\n\n    def _retry_run(self, port):\n        self.app.logger.info(f\"Port {port} is busy. Retrying...\")\n        self.app.run(host='0.0.0.0', port=port)"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles OAuth token requests for Aliyun Drive by processing refresh tokens, making external API calls, and returning decrypted token data.\n\nFunction Description: The function `oauth_token()` is a Flask route handler that processes POST requests to '/oauth/alipan/token'. It validates the input, makes authenticated requests to an external API, handles the response, and returns either the decrypted token data or an error response.\n\nInput:\n- HTTP POST request with JSON body containing:\n  - refresh_token: [String] - Required refresh token for OAuth authentication\n\nOutput:\n- HTTP Response with:\n  - Status Code: 200 (success) or error code (4xx/5xx)\n  - Body: JSON containing either:\n    - Success: Decrypted token data\n    - Error: Error message describing the failure",
    "Canonical_solution": "import json\nimport requests\nfrom flask import Flask, request, Response\n\napp = Flask(__name__)\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token', None)\n    if not refresh_token:\n        return Response(json.dumps({\"error\": \"No refresh_token provided\"}), status=400, mimetype='application/json')\n\n    req_body = {\n        \"refresh_token\": refresh_token\n    }\n\n    timestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\n    unique_id = uuid.uuid4().hex\n    wifimac = str(random.randint(10**11, 10**12 - 1))\n\n    resp = requests.post(\"http://api.extscreen.com/aliyundrive/v3/token\", data=req_body, headers={**get_params(timestamp, unique_id, wifimac), **headers}, timeout=10)\n    if resp.status_code == 200:\n        resp_data = resp.json()\n        ciphertext = resp_data[\"data\"][\"ciphertext\"]\n        iv = resp_data[\"data\"][\"iv\"]\n\n        token_data = decrypt(ciphertext, iv, timestamp, unique_id, wifimac)\n        token = json.loads(token_data)\n        return Response(json.dumps(token), status=200, mimetype='application/json')\n    else:\n        return Response(resp.content, status=resp.status_code, mimetype='application/json')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n\n    if not refresh_token:\n        return jsonify({'error': 'Missing refresh_token parameter'}), 400\n\n    headers = {\n        'Authorization': f'Bearer {refresh_token}',\n        'Content-Type': 'application/json'\n    }\n\n    try:\n        response = requests.post('https://api.example.com/oauth/token', headers=headers)\n        response.raise_for_status()\n        token_data = response.json()\n        decrypted_data = decrypt_token(token_data)\n        return jsonify(decrypted_data), 200\n    except requests.exceptions.RequestException as e:\n        return jsonify({'error': str(e)}), 500\n\ndef decrypt_token(token_data):\n    # Placeholder for actual decryption logic\n    return token_data\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Create a Flask-based web server that handles image processing requests through two endpoints: one for adjusting brightness/contrast and another for image enhancement.\n\nFunction Description: The server provides two main routes:\n1. '/adjust' - Handles image brightness and contrast adjustments\n2. '/enhance' - Handles image enhancement operations\nEach route supports both GET (returning HTML forms) and POST (processing the submitted data) methods.\n\nInput:\nFor POST requests:\n- '/adjust' endpoint:\n  - the_file: [File] - Image file to process\n  - brightness: [str] - Brightness adjustment value\n  - contrast: [str] - Contrast adjustment value\n- '/enhance' endpoint:\n  - the_file: [File] - Image file to process\n  - amount: [str] - Enhancement amount value\n\nOutput:\nFor GET requests:\n- Returns HTML templates ('adjust.html' or 'enhance.html')\nFor POST requests:\n- Returns processed image data from respective modules (adjust.do_adjust or enhance.do_enhance)",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/adjust\", methods=[\"GET\", \"POST\"])\ndef do_adjust():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        brightness = request.form[\"brightness\"]\n        contrast = request.form[\"contrast\"]\n        import adjust\n\n        return adjust.do_adjust(the_file, brightness, contrast)\n    else:\n        return render_template(\"adjust.html\")\n\n@app.route(\"/enhance\", methods=[\"GET\", \"POST\"])\ndef do_enhance():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        amount = request.form[\"amount\"]\n        import enhance\n\n        return enhance.do_enhance(the_file, amount)\n    else:\n        return render_template(\"enhance.html\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, send_file\nimport adjust\nimport enhance\nimport os\n\napp = Flask(__name__)\nUPLOAD_FOLDER = 'uploads'\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\n@app.route('/adjust', methods=['GET', 'POST'])\ndef adjust_image():\n    if request.method == 'POST':\n        file = request.files['the_file']\n        brightness = request.form['brightness']\n        contrast = request.form['contrast']\n        filename = file.filename\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        file.save(filepath)\n        adjusted_image = adjust.do_adjust(filepath, brightness, contrast)\n        return send_file(adjusted_image, as_attachment=True)\n    return render_template('adjust.html')\n\n@app.route('/enhance', methods=['GET', 'POST'])\ndef enhance_image():\n    if request.method == 'POST':\n        file = request.files['the_file']\n        amount = request.form['amount']\n        filename = file.filename\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        file.save(filepath)\n        enhanced_image = enhance.do_enhance(filepath, amount)\n        return send_file(enhanced_image, as_attachment=True)\n    return render_template('enhance.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that predicts home prices based on input parameters.\n\nFunction Description: The function `predict_home_price` is a Flask route handler that processes incoming HTTP requests (GET or POST) containing home features, uses these features to predict a home price, and returns the estimated price as a JSON response with CORS headers enabled.\n\nInput:\n- `total_sqft`: [float] - Total square footage of the home\n- `location`: [str] - Location of the home\n- `bhk`: [int] - Number of bedrooms/hall/kitchen\n- `bath`: [int] - Number of bathrooms\n\nOutput:\n- [JSON] - A JSON response containing the key 'estimated_price' with the predicted value, and CORS headers allowing access from any origin.",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport util\n\napp = Flask(__name__)\n\n@app.route('/predict_home_price', methods=['GET', 'POST'])\ndef predict_home_price():\n    total_sqft = float(request.form['total_sqft'])\n    location = request.form['location']\n    bhk = int(request.form['bhk'])\n    bath = int(request.form['bath'])\n\n    response = jsonify({\n        'estimated_price': util.get_estimated_price(location,total_sqft,bhk,bath)\n    })\n    response.headers.add('Access-Control-Allow-Origin', '*')\n\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport json\nimport os\n\napp = Flask(__name__)\n\n# Load the model and data\ndef load_model():\n    # Example: Replace with your actual model loading logic\n    df = pd.DataFrame({\n        'total_sqft': [1500, 2000, 2500],\n        'location': ['A', 'B', 'C'],\n        'bhk': [3, 4, 5],\n        'bath': [2, 3, 4],\n        'price': [300000, 450000, 600000]\n    })\n    df = pd.get_dummies(df, columns=['location'])\n    X = df.drop('price', axis=1)\n    y = df['price']\n    model = LinearRegression()\n    model.fit(X, y)\n    return model\n\nmodel = load_model()\n\n@app.route('/predict_home_price', methods=['GET', 'POST'])\ndef predict_home_price():\n    if request.method == 'POST':\n        data = request.get_json()\n        total_sqft = data.get('total_sqft')\n        location = data.get('location')\n        bhk = data.get('bhk')\n        bath = data.get('bath')\n\n        # Convert location to dummy variables\n        df = pd.DataFrame([{\n            'total_sqft': total_sqft,\n            'location': location,\n            'bhk': bhk,\n            'bath': bath\n        }])\n        df = pd.get_dummies(df, columns=['location'])\n\n        # Ensure all dummy variables are present\n        for col in model.coef_.index:\n            if col not in df.columns:\n                df[col] = 0\n\n        # Reorder columns to match the model's training order\n        df = df[model.coef_.index]\n\n        prediction = model.predict(df)[0]\n        response = jsonify({'estimated_price': float(prediction)})\n        response.headers.add('Access-Control-Allow-Origin', '*')\n        return response\n    else:\n        return jsonify({'error': 'Only POST requests are allowed'}), 405\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a Flask-based HTTP server to process PagerDuty webhook events, decode and validate the incoming data, and insert relevant event information into BigQuery.\n\nFunction Description: The code consists of two main functions: \n1. `index()` - The Flask route handler that receives and validates incoming POST requests containing PagerDuty events\n2. `process_pagerduty_event()` - Processes and transforms the raw PagerDuty event data into a structured format for BigQuery insertion\n\nInput:\n- For `index()`: HTTP POST request with JSON payload containing PagerDuty event data\n- For `process_pagerduty_event()`: A message dictionary containing base64-encoded PagerDuty event data\n\nOutput:\n- For `index()`: Returns HTTP 204 (No Content) response after processing\n- For `process_pagerduty_event()`: Returns a structured dictionary containing processed PagerDuty event data ready for BigQuery insertion",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_pagerduty_event(msg)\n        print(f\" Event which is to be inserted into Big query {event}\")\n        if event:\n            shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(f\"EXCEPTION raised  {json.dumps(entry)}\")\n    return \"\", 204\n\ndef process_pagerduty_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    print(f\"Metadata after decoding {metadata}\")\n\n    signature = shared.create_unique_id(msg)\n    event = metadata['event']\n    event_type = event[\"event_type\"]\n    types = {\"incident.triggered\", \"incident.resolved\"}\n    if event_type not in types:\n        raise Warning(\"Unsupported PagerDuty event: '%s'\" % event_type)\n\n    pagerduty_event = {\n        \"event_type\": event_type,\n        \"id\": event['id'],\n        \"metadata\": json.dumps(metadata),\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"time_created\" : event['occurred_at'],\n        \"source\": \"pagerduty\",\n        }\n\n    print(f\"Pager Duty event to metrics--------> {pagerduty_event}\")\n    return pagerduty_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\n\ndef process_pagerduty_event(message):\n    encoded_data = message.get('data')\n    if not encoded_data:\n        return {}\n\n    try:\n        decoded_data = base64.b64decode(encoded_data).decode('utf-8')\n        event_data = json.loads(decoded_data)\n    except Exception as e:\n        return {'error': str(e)}\n\n    incident_key = event_data.get('incident_key')\n    event_type = event_data.get('event_type')\n    description = event_data.get('description')\n    routing_key = event_data.get('routing_key')\n    client = event_data.get('client')\n    client_url = event_data.get('client_url')\n    details = event_data.get('details')\n    payload = event_data.get('payload', {})\n\n    incident = payload.get('incident', {})\n    trigger = payload.get('trigger', {})\n    service = payload.get('service', {})\n    user = payload.get('user', {})\n\n    processed_event = {\n        'incident_key': incident_key,\n        'event_type': event_type,\n        'description': description,\n        'routing_key': routing_key,\n        'client': client,\n        'client_url': client_url,\n        'details': details,\n        'incident_id': incident.get('id'),\n        'incident_number': incident.get('number'),\n        'incident_title': incident.get('title'),\n        'incident_status': incident.get('status'),\n        'trigger_id': trigger.get('id'),\n        'trigger_name': trigger.get('name'),\n        'service_id': service.get('id'),\n        'service_name': service.get('name'),\n        'user_id': user.get('id'),\n        'user_name': user.get('name'),\n        'user_email': user.get('email')\n    }\n\n    return processed_event\n\n@app.route('/', methods=['POST'])\ndef index():\n    if request.is_json:\n        data = request.get_json()\n        processed_data = process_pagerduty_event(data)\n        if processed_data:\n            client = bigquery.Client()\n            table_id = \"your-project-id.your_dataset.pagerduty_events\"\n            errors = client.insert_rows_json(table_id, [processed_data])\n            if errors:\n                print(f\"Encountered errors while inserting rows: {errors}\")\n        return '', 204\n    else:\n        return jsonify({'error': 'Invalid JSON payload'}), 400\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Create a Flask web application that serves different data views through specific routes, rendering them using a template.\n\nFunction Description: The application defines multiple route handlers that fetch different types of data and render them using a common template ('index.html'). Each route corresponds to a different data view (main, corporate, and job data).\n\nInput:\n- Route paths ('/', '/corp', '/job') as HTTP endpoints\n- HTTP GET requests to these endpoints\n\nOutput:\n- Rendered HTML responses using the 'index.html' template with respective data and title\n- HTTP responses with status code 200 for successful renders\n\nMethods:\n- index() -> HTML - Handles root route ('/') and renders main data view\n- corp() -> HTML - Handles '/corp' route and renders corporate data view\n- job() -> HTML - Handles '/job' route and renders job data view\n\nNote: The actual data fetching is delegated to external functions (SourceData(), CorpData(), JobData()) which return objects containing the required data and title. The template 'index.html' should be prepared to handle the 'form' and 'title' variables passed from these route handlers.",
    "Canonical_solution": "from flask import Flask, render_template\nfrom data import *\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data, title=data.title)\n\nif __name__ == \"__main__\":\n    app.run(host='127.0.0.1', debug=False)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data, title=data.title)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Create a Flask-based web service that predicts customer churn probability using a pre-trained machine learning model and feature transformation pipeline.\n\nFunction Description: The function implements a prediction endpoint for a Flask web service that takes customer data as input, applies feature transformation, makes a churn probability prediction using a pre-trained model, and returns the prediction results in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing customer features/attributes\n- The function internally uses two pre-loaded artifacts:\n  - 'dv.bin': A feature transformation pipeline (DictVectorizer)\n  - 'model1.bin': A pre-trained machine learning model\n\nOutput: \n- JSON response containing:\n  - 'churn_probability': float value representing the predicted probability of churn (between 0 and 1)\n  - 'churn': boolean indicating whether the customer is predicted to churn (probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\nimport pickle\n\ndef load(filename):\n    with open(filename, 'rb') as f_in:\n        return pickle.load(f_in)\n\ndv = load('dv.bin')\nmodel = load('model1.bin')\n\napp = Flask('churn')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    customer = request.get_json()\n    X = dv.transform([customer])\n    y_pred = model.predict_proba(X)[0, 1]\n    churn = y_pred >= 0.5\n    result = {\n        'churn_probability': float(y_pred),\n        'churn': bool(churn)\n    }\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport pickle\nimport numpy as np\n\napp = Flask(__name__)\n\n# Load pre-trained model and feature transformer\nwith open('dv.bin', 'rb') as f:\n    dv = pickle.load(f)\n\nwith open('model1.bin', 'rb') as f:\n    model = pickle.load(f)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n    X = dv.transform([data])\n    y_proba = model.predict_proba(X)[:, 1]\n    churn = y_proba >= 0.5\n    return jsonify({\n        'churn_probability': float(y_proba[0]),\n        'churn': bool(churn[0])\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=9696)"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints to interact with an agent's trading system, including checking inventory, queue, balance, executing trades, and resetting capital.\n\nFunction Description: The code establishes a RESTful API using Flask that allows clients to query and modify the state of a trading agent. Each endpoint handles specific functionality and returns JSON responses.\n\nInput:\n- For '/trade' endpoint: GET request with 'data' parameter in query string containing trade details as JSON\n- For '/reset' endpoint: GET request with 'money' parameter in query string containing new capital amount as JSON\n- Other endpoints: GET requests without parameters\n\nOutput:\n- All endpoints return JSON responses:\n  - '/': {'status': 'OK'}\n  - '/inventory': Agent's inventory data\n  - '/queue': Agent's queue data\n  - '/balance': Agent's capital amount\n  - '/trade': Result of trade operation\n  - '/reset': Boolean confirmation of capital reset",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/', methods = ['GET'])\ndef hello():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory', methods = ['GET'])\ndef inventory():\n    return jsonify(agent._inventory)\n\n@app.route('/queue', methods = ['GET'])\ndef queue():\n    return jsonify(agent._queue)\n\n@app.route('/balance', methods = ['GET'])\ndef balance():\n    return jsonify(agent._capital)\n\n@app.route('/trade', methods = ['GET'])\ndef trade():\n    data = json.loads(request.args.get('data'))\n    return jsonify(agent.trade(data))\n\n@app.route('/reset', methods = ['GET'])\ndef reset():\n    money = json.loads(request.args.get('money'))\n    agent.reset_capital(money)\n    return jsonify(True)\n\nif __name__ == '__main__':\n    app.run(host = '0.0.0.0', port = 8005)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Mock agent data\nagent_data = {\n    'inventory': {},\n    'queue': [],\n    'capital': 10000.0\n}\n\n@app.route('/')\ndef index():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory')\ndef inventory():\n    return jsonify(agent_data['inventory'])\n\n@app.route('/queue')\ndef queue():\n    return jsonify(agent_data['queue'])\n\n@app.route('/balance')\ndef balance():\n    return jsonify({'capital': agent_data['capital']})\n\n@app.route('/trade')\ndef trade():\n    data = request.args.get('data')\n    if not data:\n        return jsonify({'error': 'Missing trade data'}), 400\n    try:\n        trade_details = jsonify(data)\n        # Process trade logic here\n        result = {'status': 'Trade processed', 'details': trade_details}\n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\n@app.route('/reset')\ndef reset():\n    money = request.args.get('money')\n    if not money:\n        return jsonify({'error': 'Missing money parameter'}), 400\n    try:\n        agent_data['capital'] = float(money)\n        return jsonify({'success': True})\n    except ValueError:\n        return jsonify({'error': 'Invalid money value'}), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints for retrieving Zhihu (a Chinese Q&A platform) topic data, including topic lists and specific topic details.\n\nFunction Description: The server exposes two main endpoints:\n1. `/zhihu_get_topics_list/` - Searches for topics matching a given keyword\n2. `/zhihu_get_topics_data/` - Retrieves detailed data for a specific topic\n\nInput: \n- For `/zhihu_get_topics_list/`: \n  - POST request with form parameter \"key\" (string) - the search keyword\n- For `/zhihu_get_topics_data/`:\n  - POST request with form parameters:\n    - \"id\" (string) - topic ID\n    - \"name\" (string) - topic name\n\nOutput:\n- For `/zhihu_get_topics_list/`:\n  - JSON response with structure:\n    {\n      \"success\": integer (1 for success, 0 for failure),\n      \"data\": list of objects with \"id\" and \"name\" for matching topics\n    }\n- For `/zhihu_get_topics_data/`:\n  - JSON response containing detailed topic data (structure depends on GetData_zhihu implementation)\n\nThe server maintains caches for:\n1. All available topics (zhihu_all_topics)\n2. Search results (zhihu_all_topics_key)\n3. Initial topic data (zhihu_init_topics)",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport GetData_zhihu\n\napp = Flask(__name__)\napp.config[\"SECRET_KEY\"] = \"hard to guess string\"\n\nzhihu_all_topics = GetData_zhihu.get_all_topics()\nzhihu_all_topics_key = {}\nzhihu_init_topics = GetData_zhihu.get_topic_data(topic_id=\"19559424\", topic_name=\"\u6570\u636e\u5206\u6790\")\n\n@app.route(\"/zhihu_get_topics_list/\", methods=[\"post\"])\ndef zhihu_get_topics_list():\n    key = request.form.get(\"key\")\n    result = {\"success\": 1, \"data\": []}\n    if key:\n        if key in zhihu_all_topics_key:\n            result = zhihu_all_topics_key[key]\n        else:\n            for item in zhihu_all_topics:\n                if item[1].find(key) >= 0:\n                    result[\"data\"].append({\"id\": item[0], \"name\": item[1]})\n            if len(result[\"data\"]) > 0:\n                result[\"success\"] = 1\n                zhihu_all_topics_key[key] = result\n                logging.debug(\"all_topics_key increase: %s\", len(zhihu_all_topics_key))\n    return jsonify(result)\n\n@app.route(\"/zhihu_get_topics_data/\", methods=[\"post\"])\ndef zhihu_get_topics_data():\n    if request.form[\"id\"] == \"19554449\":\n        result = zhihu_init_topics\n    else:\n        result = GetData_zhihu.get_topic_data(request.form[\"id\"], request.form[\"name\"])\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s\\t%(levelname)s\\t%(message)s\")\n    logging.debug(\"app url_map: %s\", app.url_map)\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n# Simulated cached data structures\nzhihu_all_topics = []\nzhihu_all_topics_key = {}\nzhihu_init_topics = {}\n\ndef search_topics_by_keyword(keyword):\n    # Simulated function to search topics by keyword\n    results = [topic for topic in zhihu_all_topics if keyword.lower() in topic['name'].lower()]\n    return results\n\ndef get_topic_data(topic_id, topic_name):\n    # Simulated function to retrieve detailed topic data\n    # In a real implementation, this would fetch data from Zhihu API\n    return {\n        \"id\": topic_id,\n        \"name\": topic_name,\n        \"details\": \"Detailed information about the topic\"\n    }\n\n@app.route('/zhihu_get_topics_list/', methods=['POST'])\ndef zhihu_get_topics_list():\n    key = request.form.get('key')\n    if not key:\n        return jsonify({\"success\": 0, \"data\": []})\n    \n    results = search_topics_by_keyword(key)\n    return jsonify({\"success\": 1, \"data\": results})\n\n@app.route('/zhihu_get_topics_data/', methods=['POST'])\ndef zhihu_get_topics_data():\n    topic_id = request.form.get('id')\n    topic_name = request.form.get('name')\n    \n    if not topic_id or not topic_name:\n        return jsonify({\"success\": 0, \"data\": {}})\n    \n    data = get_topic_data(topic_id, topic_name)\n    return jsonify({\"success\": 1, \"data\": data})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a Flask-based web application that handles form submissions and displays responses, using a class structure to encapsulate the application logic.\n\nClass Description: The `FlaskApp` class encapsulates a Flask web application that provides two routes: a main page with a form and a submission handler that processes the form data. It uses WTForms for form validation and template rendering for responses.\n\nAttributes:\n\napp: [Flask] - The Flask application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask application and sets up the routes by calling _setup_routes.\n\n_setup_routes: [Name]() -> [None] - Configures the application routes by binding URL paths to their respective handler methods.\n\nindex: [Name]() -> [str] - Handles requests to the root URL ('/'), renders and returns the main form page using the 'first_app.html' template with an instance of HelloForm.\n\nhello: [Name]() -> [str] - Handles POST requests to the '/hello' URL, validates the submitted form data, and either renders a greeting page ('hello.html') with the submitted name or returns the form page with validation errors.\n\nrun: [Name](debug: [bool] = True) -> [None] - Starts the Flask development server with optional debug mode enabled.",
    "Canonical_solution": "from flask import Flask, request\nfrom wtforms import Form, TextAreaField, validators\n\nclass HelloForm(Form):\n    sayhello = TextAreaField('', [validators.DataRequired()])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/hello', methods=['POST'])(self.hello)\n\n    def index(self):\n        form = HelloForm(request.form)\n        return render_template('first_app.html', form=form)\n\n    def hello(self):\n        form = HelloForm(request.form)\n        if request.method == 'POST' and form.validate():\n            name = request.form['sayhello']\n            return render_template('hello.html', name=name)\n        return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request\nfrom wtforms import Form, StringField, validators\n\nclass HelloForm(Form):\n    name = StringField('Name', [validators.DataRequired()])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'index', self.index, methods=['GET'])\n        self.app.add_url_rule('/hello', 'hello', self.hello, methods=['POST'])\n\n    def index(self):\n        form = HelloForm()\n        return render_template('first_app.html', form=form)\n\n    def hello(self):\n        form = HelloForm(request.form)\n        if form.validate():\n            return render_template('hello.html', name=form.name.data)\n        return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Flask-based web server that handles both GET and POST requests for a messaging webhook, verifying tokens and processing incoming messages or postbacks from a chat platform.\n\nFunction Description: The code implements a Flask application with two main route handlers:\n1. handle_verification: Handles GET requests for webhook verification by checking a token\n2. handle_messages: Processes POST requests containing message or postback events from users\n\nInput:\n- For handle_verification:\n  - GET request with query parameters:\n    - hub.verify_token: Token to verify webhook authenticity\n    - hub.challenge: Challenge string to return if verification succeeds\n- For handle_messages:\n  - POST request with JSON payload containing:\n    - Either message events (text, attachments, quick replies) or postback events\n    - Sender information and message content\n\nOutput:\n- For handle_verification:\n  - Returns the hub.challenge string if verification succeeds\n  - Returns a rendered HTML template if verification fails\n- For handle_messages:\n  - Returns \"ok\" status after processing messages\n  - May send responses back to users through the messaging platform\n  - Handles various message types (text, location, audio) and postbacks\n\nAdditional Helper Functions:\n- get_type_from_payload: Identifies whether payload contains message or postback\n- postback_events: Generator that yields sender_id and postback payload\n- messaging_events: Generator that processes different message types and yields structured data",
    "Canonical_solution": "import sys, json\nfrom flask import Flask, request, g, session, render_template, redirect, url_for, flash\nfrom flask_oauth import OAuth\n\napplication = Flask(__name__, instance_relative_config=True, static_url_path='')\napplication.config.from_object('config')\napplication.config.from_pyfile('config.py', silent=True)\napp = application\n\n@app.route('/', methods=['GET'])\ndef handle_verification():\n    if request.args.get('hub.verify_token', '') == app.config['OWN_WEBHOOK_TOKEN']:\n        return request.args.get('hub.challenge', '')\n    else:\n        return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef handle_messages():\n    payload = request.get_data()\n    token = app.config['PAT']\n    webhook_type = get_type_from_payload(payload)\n\n    if webhook_type == 'postback':\n        for sender_id, postback_payload in postback_events(payload):\n            if postback_payload == 'OPTIMIST_HELP':\n                handle_help(sender_id)\n            elif postback_payload == 'OPTIMIST_GET_STARTED':\n                if not Mongo.user_exists(users, sender_id):\n                    g.user = Mongo.get_user_mongo(users, sender_id)\n                    return handle_first_time_user(users, g.user)\n\n    elif webhook_type == 'message':\n        for sender_id, message in messaging_events(payload):\n            if not message:\n                return \"ok\"\n            global temp_message_id \n            mid = message['message_id']\n            if mid == temp_message_id:\n                return 'ok'\n            temp_message_id = mid\n\n            try:\n                FB.show_typing(token, sender_id)\n                response = processIncoming(sender_id, message)\n                FB.show_typing(token, sender_id, 'typing_off')\n\n                if response is not None and response != 'pseudo':\n                    FB.send_message(token, sender_id, response)\n                elif response != 'pseudo':\n                    if NLP.randOneIn(7):\n                        FB.send_message(token, sender_id, NLP.oneOf(NLP.no_response))\n            except Exception, e:\n                FB.send_message(app.config['PAT'], sender_id, NLP.oneOf(NLP.error))\n                Mongo.pop_context(users, g.user)\n    return \"ok\"\n\ndef get_type_from_payload(payload):\n    data = json.loads(payload)\n    if \"postback\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"postback\"\n    elif \"message\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"message\"\n\ndef postback_events(payload):\n    data = json.loads(payload)\n    postbacks = data[\"entry\"][0][\"messaging\"]\n    for event in postbacks:\n        sender_id = event[\"sender\"][\"id\"]\n        postback_payload = event[\"postback\"][\"payload\"]\n        yield sender_id, postback_payload\n\ndef messaging_events(payload):\n    data = json.loads(payload)\n    messaging_events = data[\"entry\"][0][\"messaging\"]\n    for event in messaging_events:\n        sender_id = event[\"sender\"][\"id\"]\n        if \"message\" not in event:\n            yield sender_id, None\n        if \"message\" in event and \"text\" in event[\"message\"] and \"quick_reply\" not in event[\"message\"]:\n            data = event[\"message\"][\"text\"].encode('unicode_escape')\n            yield sender_id, {'type':'text', 'data': data, 'message_id': event['message']['mid']}\n        elif \"attachments\" in event[\"message\"]:\n            if \"location\" == event['message']['attachments'][0][\"type\"]:\n                coordinates = event['message']['attachments'][0]['payload']['coordinates']\n                yield sender_id, {'type':'location','data':[coordinates['lat'], coordinates['long']],'message_id': event['message']['mid']}\n            elif \"audio\" == event['message']['attachments'][0][\"type\"]:\n                audio_url = event['message']['attachments'][0]['payload']['url']\n                yield sender_id, {'type':'audio','data': audio_url, 'message_id': event['message']['mid']}\n            else:\n                yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}\n        elif \"quick_reply\" in event[\"message\"]:\n            data = event[\"message\"][\"quick_reply\"][\"payload\"]\n            yield sender_id, {'type':'quick_reply','data': data, 'message_id': event['message']['mid']}\n        else:\n            yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport json\n\napp = Flask(__name__)\n\ndef get_type_from_payload(payload):\n    if 'postback' in payload:\n        return 'postback'\n    elif 'message' in payload:\n        return 'message'\n    return None\n\ndef postback_events(data):\n    for entry in data['entry']:\n        for messaging_event in entry['messaging']:\n            if 'postback' in messaging_event:\n                yield messaging_event['sender']['id'], messaging_event['postback']['payload']\n\ndef messaging_events(data):\n    for entry in data['entry']:\n        for messaging_event in entry['messaging']:\n            if 'message' in messaging_event:\n                message = messaging_event['message']\n                sender_id = messaging_event['sender']['id']\n                if 'text' in message:\n                    yield sender_id, message['text']\n                elif 'attachments' in message:\n                    for attachment in message['attachments']:\n                        yield sender_id, f\"Attachment: {attachment['type']}\"\n                elif 'quick_replies' in message:\n                    for quick_reply in message['quick_replies']:\n                        yield sender_id, f\"Quick Reply: {quick_reply['title']}\"\n\n@app.route('/webhook', methods=['GET'])\ndef handle_verification():\n    verify_token = request.args.get('hub.verify_token')\n    challenge = request.args.get('hub.challenge')\n    if verify_token == 'your_verify_token':\n        return challenge\n    else:\n        return render_template('error.html')\n\n@app.route('/webhook', methods=['POST'])\ndef handle_messages():\n    data = request.get_json()\n    if not data:\n        return 'ok'\n    type_of_payload = get_type_from_payload(data)\n    if type_of_payload == 'postback':\n        for sender_id, payload in postback_events(data):\n            print(f\"Postback from {sender_id} with payload: {payload}\")\n    elif type_of_payload == 'message':\n        for sender_id, message in messaging_events(data):\n            print(f\"Message from {sender_id}: {message}\")\n    return 'ok'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Flask-based HTTP server that simulates a RocketMap API endpoint server, capable of generating and returning mock data for gyms and pok\u00e9stops based on geographic coordinates and radius.\n\nFunction Description: The server provides three main endpoints:\n1. Root endpoint ('/') - Returns a simple welcome message\n2. Login endpoint ('/login/<lat>/<lng>/<r>') - Generates and returns gym and pok\u00e9stop data within a specified radius of given coordinates\n3. Scan endpoint ('/scan/<lat>/<lng>') - Returns mock scan data including nearby forts and wild pok\u00e9mons for given coordinates\n\nInput:\n- For root endpoint: None\n- For login endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n  - r: [string] - Radius in meters as string\n- For scan endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n\nOutput:\n- For root endpoint: [string] - Welcome message\n- For login endpoint: [JSON] - List of generated gyms and pok\u00e9stops with their properties\n- For scan endpoint: [JSON] - Mock scan data including cells with forts and wild pok\u00e9mons",
    "Canonical_solution": "from flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/')\ndef api_root():\n    return 'This here be a Fake RocketMap API Endpoint Server'\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef api_login(lat, lng, r):\n    global forts\n\n    if len(forts):\n        # already generated\n        return jsonify(forts)\n\n    # coerce types\n    r = int(r)  # radius in meters\n    lat = float(lat)\n    lng = float(lng)\n\n    forts = []\n    area = 3.14 * (r * r)\n\n    # One gym every N sq.m\n    gymCount = int(math.ceil(area / 25000))\n\n    # One pks every N sq.m\n    pksCount = int(math.ceil(area / 15000))\n\n    # Gyms\n    for i in range(gymCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'guard_pokemon_id': randint(1, 140),\n            'gym_points': randint(1, 30000),\n            'id': 'gym-{}'.format(i),\n            'is_in_battle': not getrandbits(1),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'owned_by_team': randint(0, 3)\n        })\n\n    # Pokestops\n    for i in range(pksCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'id': 'pks-{}'.format(i),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'type': 1\n        })\n\n    log.info('Login for location %f,%f generated %d gyms, %d pokestop', lat,\n             lng, gymCount, pksCount)\n    return jsonify(forts)\n\n@app.route('/scan/<lat>/<lng>')\ndef api_scan(lat, lng):\n    location = (float(lat), float(lng))\n    cells = []\n    # for i in range(randint(60,70)):\n    for i in range(3):\n        cells.append({\n            'current_timestamp_ms': int(time() * 1000),\n            'forts': getForts(location),\n            's2_cell_id': uuid4(),  # wrong, but also unused so it\n                                    # doesn't matter\n            'wild_pokemons': makeWildPokemon(location),\n            'catchable_pokemons': [],  # unused\n            'nearby_pokemons': []  # unused\n        })\n    return jsonify({'responses': {'GET_MAP_OBJECTS': {'map_cells': cells}}})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify\nimport random\nimport string\n\napp = Flask(__name__)\n\n@app.route('/')\ndef welcome():\n    return \"Welcome to the RocketMap API Simulation Server!\"\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef login(lat, lng, r):\n    radius = int(r)\n    gyms = []\n    for _ in range(random.randint(3, 7)):\n        gym_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\n        name = 'Gym ' + ''.join(random.choices(string.ascii_uppercase, k=3))\n        lat_offset = random.uniform(-radius/100000, radius/100000)\n        lng_offset = random.uniform(-radius/100000, radius/100000)\n        gyms.append({\n            'gym_id': gym_id,\n            'name': name,\n            'latitude': float(lat) + lat_offset,\n            'longitude': float(lng) + lng_offset,\n            'type': random.choice(['mystic', 'valor', 'instinct']),\n            'team': random.choice([1, 2, 3]),\n            'level': random.randint(1, 5),\n            'timestamp': random.randint(1600000000, 1700000000)\n        })\n    \n    pokestops = []\n    for _ in range(random.randint(5, 10)):\n        stop_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))\n        name = 'Pokestop ' + ''.join(random.choices(string.ascii_uppercase, k=2))\n        lat_offset = random.uniform(-radius/100000, radius/100000)\n        lng_offset = random.uniform(-radius/100000, radius/100000)\n        pokestops.append({\n            'pokestop_id': stop_id,\n            'name': name,\n            'latitude': float(lat) + lat_offset,\n            'longitude': float(lng) + lng_offset,\n            'last_modified': random.randint(1600000000, 1700000000),\n            'enabled': random.choice([True, False])\n        })\n    \n    return jsonify({'gyms': gyms, 'pokestops': pokestops})\n\n@app.route('/scan/<lat>/<lng>')\ndef scan(lat, lng):\n    cells = []\n    for _ in range(random.randint(1, 3)):\n        cell_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))\n        forts = []\n        for _ in range(random.randint(2, 5)):\n            fort_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\n            name = 'Fort ' + ''.join(random.choices(string.ascii_uppercase, k=3))\n            lat_offset = random.uniform(-0.0001, 0.0001)\n            lng_offset = random.uniform(-0.0001, 0.0001)\n            forts.append({\n                'fort_id': fort_id,\n                'name': name,\n                'latitude': float(lat) + lat_offset,\n                'longitude': float(lng) + lng_offset,\n                'type': random.choice(['gym', 'pokestop']),\n                'team': random.choice([1, 2, 3]) if random.random() > 0.5 else None,\n                'level': random.randint(1, 5) if random.random() > 0.5 else None,\n                'last_modified': random.randint(1600000000, 1700000000)\n            })\n        \n        wild_pokemon = []\n        for _ in range(random.randint(1, 4)):\n            pokemon_id = random.randint(1, 151)\n            lat_offset = random.uniform(-0.0001, 0.0001)\n            lng_offset = random.uniform(-0.0001, 0.0001)\n            wild_pokemon.append({\n                'pokemon_id': pokemon_id,\n                'latitude': float(lat) + lat_offset,\n                'longitude': float(lng) + lng_offset,\n                'cp': random.randint(100, 1000),\n                'iv': random.randint(0, 100),\n                'move_1': random.randint(1, 100),\n                'move_2': random.randint(1, 100),\n                'gender': random.choice(['M', 'F', 'N']),\n                'form': random.choice([None, 'shiny', 'mega'])\n            })\n        \n        cells.append({\n            'cell_id': cell_id,\n            'forts': forts,\n            'wild_pokemon': wild_pokemon\n        })\n    \n    return jsonify({'cells': cells})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Create a Flask-based API for domain name permutation and scanning using dnstwist library, with session management and various output formats.\n\nClass Description: DNSTwistAPI is a Flask application that provides RESTful endpoints for generating domain permutations, scanning for registered domains, and returning results in multiple formats. It manages concurrent scan sessions with cleanup functionality.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nsessions: [list] - List of active scan sessions\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask app, sets up routes, and starts the session janitor thread\n_setup_routes: [Name]() -> [None] - Configures all API endpoints and their handlers\n_start_janitor: [Name]() -> [None] - Starts the background thread for cleaning up expired sessions\njanitor: [Name](sessions) -> [None] - Background thread that cleans up completed or expired sessions\nroot: [Name]() -> [Response] - Serves the web application's main page\napi_scan: [Name]() -> [tuple(Response, int)] - Creates a new scan session and starts domain permutation\napi_status: [Name](sid) -> [Response] - Returns the status of a specific scan session\napi_domains: [Name](sid) -> [Response] - Returns registered domains from a scan session\napi_csv: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in CSV format\napi_json: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in JSON format\napi_list: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results as plain text list\napi_stop: [Name](sid) -> [Response] - Stops a running scan session\nrun: [Name](host, port) -> [None] - Starts the Flask application server",
    "Canonical_solution": "from flask import Flask, request, jsonify, send_from_directory\nimport dnstwist\nimport os\nimport threading\nimport time\nfrom queue import Queue\nfrom uuid import uuid4\n\nclass Session:\n    def __init__(self, url, nameservers=None, thread_count=dnstwist.THREAD_COUNT_DEFAULT):\n        self.id = str(uuid4())\n        self.timestamp = int(time.time())\n        self.url = dnstwist.UrlParser(url)\n        self.nameservers = nameservers\n        self.thread_count = thread_count\n        self.jobs = Queue()\n        self.threads = []\n        self.fuzzer = dnstwist.Fuzzer(self.url.domain, dictionary=DICTIONARY, tld_dictionary=TLD_DICTIONARY)\n        self.fuzzer.generate()\n        self.permutations = self.fuzzer.permutations\n\n    def scan(self):\n        for domain in self.fuzzer.domains:\n            self.jobs.put(domain)\n        for _ in range(self.thread_count):\n            worker = dnstwist.Scanner(self.jobs)\n            worker.option_extdns = dnstwist.MODULE_DNSPYTHON\n            worker.option_geoip = dnstwist.MODULE_GEOIP\n            if self.nameservers:\n                worker.nameservers = self.nameservers.split(',')\n            worker.start()\n            self.threads.append(worker)\n\n    def stop(self):\n        self.jobs.queue.clear()\n        for worker in self.threads:\n            worker.stop()\n        for worker in self.threads:\n            worker.join()\n        self.threads.clear()\n\n    def domains(self):\n        return self.permutations(registered=True, unicode=True)\n\n    def status(self):\n        total = len(self.permutations())\n        remaining = max(self.jobs.qsize(), len(self.threads))\n        complete = total - remaining\n        registered = len(self.permutations(registered=True))\n        return {\n            'id': self.id,\n            'timestamp': self.timestamp,\n            'url': self.url.full_uri(),\n            'domain': self.url.domain,\n            'total': total,\n            'complete': complete,\n            'remaining': remaining,\n            'registered': registered\n        }\n\n    def csv(self):\n        return dnstwist.Format(self.permutations(registered=True)).csv()\n\n    def json(self):\n        return dnstwist.Format(self.permutations(registered=True)).json()\n\n    def list(self):\n        return dnstwist.Format(self.permutations()).list()\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.root)\n        self.app.route('/api/scans', methods=['POST'])(self.api_scan)\n        self.app.route('/api/scans/<sid>')(self.api_status)\n        self.app.route('/api/scans/<sid>/domains')(self.api_domains)\n        self.app.route('/api/scans/<sid>/csv')(self.api_csv)\n        self.app.route('/api/scans/<sid>/json')(self.api_json)\n        self.app.route('/api/scans/<sid>/list')(self.api_list)\n        self.app.route('/api/scans/<sid>/stop', methods=['POST'])(self.api_stop)\n\n    def _start_janitor(self):\n        cleaner = threading.Thread(target=self.janitor, args=(self.sessions,))\n        cleaner.daemon = True\n        cleaner.start()\n\n    def janitor(self, sessions):\n        while True:\n            time.sleep(1)\n            for s in sorted(sessions, key=lambda x: x.timestamp):\n                if s.jobs.empty() and s.threads:\n                    s.stop()\n                    continue\n                if (s.timestamp + SESSION_TTL) < time.time():\n                    sessions.remove(s)\n                    continue\n\n    def root(self):\n        return send_from_directory(WEBAPP_DIR, WEBAPP_HTML)\n\n    def api_scan(self):\n        if sum([1 for s in self.sessions if not s.jobs.empty()]) >= SESSION_MAX:\n            return jsonify({'message': 'Too many scan sessions - please retry in a minute'}), 500\n        j = request.get_json(force=True)\n        if 'url' not in j:\n            return jsonify({'message': 'Bad request'}), 400\n        try:\n            _, domain, _ = dnstwist.domain_tld(j.get('url'))\n        except Exception:\n            return jsonify({'message': 'Bad request'}), 400\n        if len(domain) > DOMAIN_MAXLEN:\n            return jsonify({'message': 'Domain name is too long'}), 400\n        for block in DOMAIN_BLOCKLIST:\n            if str(block) in domain:\n                return jsonify({'message': 'Not allowed'}), 400\n        try:\n            session = Session(j.get('url'), nameservers=NAMESERVERS)\n        except Exception as err:\n            return jsonify({'message': 'Invalid domain name'}), 400\n        else:\n            session.scan()\n            self.sessions.append(session)\n        return jsonify(session.status()), 201\n\n    def api_status(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.status())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_domains(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.domains())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_csv(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.csv(), 200, {'Content-Type': 'text/csv', 'Content-Disposition': 'attachment; filename=dnstwist.csv'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_json(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.json(), 200, {'Content-Type': 'application/json', 'Content-Disposition': 'attachment; filename=dnstwist.json'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_list(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.list(), 200, {'Content-Type': 'text/plain', 'Content-Disposition': 'attachment; filename=dnstwist.txt'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_stop(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                s.stop()\n                return jsonify({})\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def run(self, host=HOST, port=PORT):\n        self.app.run(host=host, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, Response, send_file\nfrom threading import Thread\nfrom dnstwist import DNSTwist\nimport csv\nimport json\nimport time\nimport os\nimport uuid\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'root', self.root)\n        self.app.add_url_rule('/scan', 'api_scan', self.api_scan, methods=['POST'])\n        self.app.add_url_rule('/status/<sid>', 'api_status', self.api_status)\n        self.app.add_url_rule('/domains/<sid>', 'api_domains', self.api_domains)\n        self.app.add_url_rule('/csv/<sid>', 'api_csv', self.api_csv)\n        self.app.add_url_rule('/json/<sid>', 'api_json', self.api_json)\n        self.app.add_url_rule('/list/<sid>', 'api_list', self.api_list)\n        self.app.add_url_rule('/stop/<sid>', 'api_stop', self.api_stop)\n\n    def _start_janitor(self):\n        Thread(target=self.janitor, daemon=True).start()\n\n    def janitor(self):\n        while True:\n            now = time.time()\n            for session in self.sessions[:]:\n                if session['end_time'] < now:\n                    self.sessions.remove(session)\n            time.sleep(60)\n\n    def root(self):\n        return \"DNSTwist API is running\"\n\n    def api_scan(self):\n        data = request.get_json()\n        domain = data.get('domain')\n        tlds = data.get('tlds', [])\n        scan_count = data.get('scan_count', 100)\n        output_format = data.get('output_format', 'txt')\n\n        sid = str(uuid.uuid4())\n        end_time = time.time() + 3600  # Session expires in 1 hour\n        twist = DNSTwist(domain, tlds=tlds, scan_count=scan_count, output_format=output_format)\n        twist.run()\n        results = twist.get_results()\n\n        session = {\n            'id': sid,\n            'results': results,\n            'end_time': end_time\n        }\n        self.sessions.append(session)\n\n        return jsonify({'session_id': sid}), 201\n\n    def api_status(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({'error': 'Session not found'}), 404\n        return jsonify({'status': 'completed'})\n\n    def api_domains(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({'error': 'Session not found'}), 404\n        return jsonify(session['results'])\n\n    def api_csv(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({'error': 'Session not found'}), 404\n\n        csv_data = []\n        for result in session['results']:\n            csv_data.append([result['domain'], result['registrar'], result['creation_date'], result['expiry_date']])\n\n        output = StringIO()\n        writer = csv.writer(output)\n        writer.writerow(['Domain', 'Registrar', 'Creation Date', 'Expiry Date'])\n        writer.writerows(csv_data)\n        output.seek(0)\n\n        return send_file(\n            output,\n            mimetype='text/csv',\n            as_attachment=True,\n            download_name=f'dnstwist_{sid}.csv'\n        )\n\n    def api_json(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({'error': 'Session not found'}), 404\n\n        return jsonify(session['results'])\n\n    def api_list(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({'error': 'Session not found'}), 404\n\n        output = '\\n'.join([result['domain'] for result in session['results']])\n        return Response(output, mimetype='text/plain')\n\n    def api_stop(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({'error': 'Session not found'}), 404\n        session['end_time'] = time.time()\n        return jsonify({'message': 'Scan stopped successfully'})\n\n    def run(self, host='0.0.0.0', port=5000):\n        self.app.run(host=host, port=port)"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Create a Flask-based web application that handles file uploads, processes the uploaded file to generate predictions, and displays the results.\n\nFunction Description: The application consists of two main routes: one for displaying the upload form and another for handling file uploads and processing. The first route renders the homepage with an upload form, while the second route handles POST requests, saves uploaded files securely, processes them to get predictions, and flashes the results to the user.\n\nInput:\n- For index() function: None (handles GET requests to root URL)\n- For submit_file() function: \n  - request.files: A dictionary-like object containing uploaded files (expects a 'file' key)\n  - request.url: The URL from which the request originated (used for redirects)\n\nOutput:\n- For index() function: Rendered HTML template ('index.html')\n- For submit_file() function: \n  - Redirects to root URL after processing\n  - Flashes messages containing:\n    - The prediction result (label)\n    - The full path of the saved file\n  - Error messages if no file is provided or selected\n\nNote: The functions interact with the following external components:\n- A prediction function (getPrediction) that takes a filename and returns a label\n- Flask's flash system for displaying messages\n- File system operations for saving uploaded files\n- Security utilities for sanitizing filenames",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, flash\nfrom werkzeug.utils import secure_filename\nfrom main import getPrediction\nimport os\n\nUPLOAD_FOLDER = 'static/images/'\napp = Flask(__name__, static_folder=\"static\")\napp.secret_key = \"secret key\"\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef submit_file():\n    if request.method == 'POST':\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            flash('No file selected for uploading')\n            return redirect(request.url)\n        if file:\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'],filename))\n            label = getPrediction(filename)\n            flash(label)\n            full_filename = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            flash(full_filename)\n            return redirect('/')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, url_for, flash\nimport os\nimport secrets\n\napp = Flask(__name__)\napp.secret_key = secrets.token_hex(16)\n\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef getPrediction(filename):\n    # Placeholder for actual prediction logic\n    return \"Sample Prediction Label\"\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit_file():\n    if 'file' not in request.files:\n        flash('No file part')\n        return redirect(request.url)\n    \n    file = request.files['file']\n    \n    if file.filename == '':\n        flash('No selected file')\n        return redirect(request.url)\n    \n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        full_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        label = getPrediction(full_path)\n        flash(f'Prediction: {label}')\n        flash(f'Saved file path: {full_path}')\n        return redirect(url_for('index'))\n    \n    flash('File type not allowed')\n    return redirect(request.url)"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Flask web application that serves as a code beautifier service. The application should take a directory path as input, and for each request with a specific slug, it should locate the corresponding text file in the directory, apply syntax highlighting, and return the formatted HTML.\n\nFunction Description: The `beautify` function is a Flask route handler that processes HTTP GET requests with a slug parameter. It checks if the slug is valid, locates the corresponding text file in the specified directory, reads the file content, applies syntax highlighting using Pygments, and returns the formatted HTML. If the slug is invalid or the file is not found, it returns a 404 error.\n\nInput: \n- `slug` (str): A URL path segment representing the name of the directory containing the text file to be beautified.\n\nOutput: \n- If successful: Returns HTML with syntax-highlighted code.\n- If unsuccessful: Returns a 404 error response.",
    "Canonical_solution": "from flask import Flask, abort, redirect\napp = Flask(__name__)\n\nimport argparse, os, pygments\nfrom pygments import highlight\nfrom pygments.lexers import guess_lexer\nfrom pygments.formatters import HtmlFormatter\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"root_dir\", help=\"Path to directory with pastes\")\nargs = parser.parse_args()\n\n@app.route('/<slug>')\ndef beautify(slug):\n    if len(slug) > 64:\n        abort(404)\n\n    target_dir = os.path.join(args.root_dir, slug)\n\n    if not target_dir.startswith(args.root_dir):\n        abort(404)\n\n    if os.path.isdir(target_dir):\n        target_file = os.path.join(target_dir, \"index.txt\")\n        \n        with open(target_file) as f:\n            code = f.read()\n            lexer = guess_lexer(code)\n            formatter = HtmlFormatter(linenos=True, full=True)\n            return highlight(code, lexer, formatter)\n\n    abort(404)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, abort\nimport os\nfrom pygments import highlight\nfrom pygments.lexers import guess_lexer_from_filename\nfrom pygments.formatters import HtmlFormatter\n\napp = Flask(__name__)\nCODE_DIR = \"/path/to/code/directory\"\n\n@app.route('/beautify/<slug>', methods=['GET'])\ndef beautify(slug):\n    file_path = os.path.join(CODE_DIR, slug)\n    if not os.path.isfile(file_path):\n        abort(404)\n    \n    try:\n        with open(file_path, 'r') as file:\n            code = file.read()\n        lexer = guess_lexer_from_filename(file_path)\n        formatter = HtmlFormatter()\n        highlighted_code = highlight(code, lexer, formatter)\n        return f\"<html><body>{highlighted_code}</body></html>\"\n    except Exception:\n        abort(404)"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes incoming POST requests containing a URL, executes a curl command to fetch the URL's content, and returns the fetched content as the response.\n\nFunction Description: The function handles Server-Side Request Forgery (SSRF) vulnerability demonstration by accepting a URL via POST request, executing it through system curl command, and returning the response. This is for educational purposes only to demonstrate SSRF risks.\n\nInput: \n- HTTP POST request with form data containing a 'url' parameter (string) representing the target URL to fetch\n\nOutput:\n- Raw content (bytes) obtained from the curl command execution against the provided URL, returned as the HTTP response\n\nNote: The reference code shows a security anti-pattern (unsafe SSRF) and should only be used in controlled environments for educational purposes. In production, such functionality would require strict input validation and security controls.",
    "Canonical_solution": "from flask import Flask, request \nimport subprocess\n\napp = Flask(__name__)\n\ndef command(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)\n    (out, err) = proc.communicate()\n    return out\n\n@app.route(\"/ssrf\", methods=['POST'])\ndef ssrf():\n    data = request.values\n    content = command(f\"curl {data.get('url')}\")\n    return content",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route('/fetch', methods=['POST'])\ndef fetch_url():\n    url = request.form.get('url')\n    if not url:\n        return 'URL parameter is required', 400\n    try:\n        result = subprocess.check_output(['curl', '--silent', url], stderr=subprocess.STDOUT)\n        return result, 200\n    except subprocess.CalledProcessError as e:\n        return e.output, 500\n\nif __name__ == '__main__':\n    app.run(debug=False)"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a Flask webhook callback handler that processes incoming POST requests, verifies signatures, and logs request data.\n\nFunction Description: The callback function handles incoming POST requests to the '/callback' endpoint. It extracts the signature from headers, logs the request body, attempts to process the webhook data, and returns a response. It handles API exceptions and invalid signatures appropriately.\n\nInput: \n- HTTP POST request containing:\n  - Headers: 'X-Line-Signature' (string) - The signature for request verification\n  - Body: (string) - The payload data sent with the request\n\nOutput: \n- Returns 'OK' (string) if successful\n- Returns HTTP 400 error if signature is invalid\n- Logs request information and any exceptions that occur",
    "Canonical_solution": "import os\nimport logging\nfrom flask import Flask, request, abort\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_host=1, x_proto=1)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\napp.logger.setLevel(logging.INFO)\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    # get X-Line-Signature header value\n    signature = request.headers['X-Line-Signature']\n\n    # get request body as text\n    body = request.get_data(as_text=True)\n    app.logger.info(\"Request body: \" + body)\n\n    # handle webhook body\n    try:\n        handler.handle(body, signature)\n    except ApiException as e:\n        app.logger.warn(\"Got exception from LINE Messaging API: %s\\n\" % e.body)\n    except InvalidSignatureError:\n        abort(400)\n\n    return 'OK'",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport logging\nimport hmac\nimport hashlib\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Replace with your actual channel secret\nCHANNEL_SECRET = 'your_channel_secret'\n\n@app.route('/callback', methods=['POST'])\ndef callback():\n    signature = request.headers.get('X-Line-Signature')\n    body = request.data.decode('utf-8')\n\n    logging.info(f\"Received request: {body}\")\n\n    try:\n        # Verify the signature\n        mac = hmac.new(CHANNEL_SECRET.encode('utf-8'), msg=body.encode('utf-8'), digestmod=hashlib.sha256)\n        calculated_signature = mac.hexdigest()\n\n        if not hmac.compare_digest(calculated_signature, signature):\n            logging.error(\"Invalid signature\")\n            return jsonify({\"error\": \"Invalid signature\"}), 400\n\n        # Process webhook data here\n        logging.info(\"Webhook data processed successfully\")\n\n        return 'OK', 200\n\n    except Exception as e:\n        logging.exception(\"Error processing webhook\")\n        return jsonify({\"error\": \"Internal server error\"}), 500"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions in the appropriate format.\n\nFunction Description: The function serves as an endpoint ('/invocations') that processes incoming data, makes predictions using a scoring service, and returns the results formatted according to the input content type. It handles three content types: JSON (for single predictions), CSV and plain text (for batch predictions).\n\nInput:\n- HTTP POST request with one of the following content types:\n  1. application/json: Contains JSON data with a \"text\" field and optional \"bing_key\"\n  2. text/csv: Contains CSV data with a \"text\" column\n  3. text/plain: Contains plain text with one text entry per line\n\nOutput:\n- For JSON input: Returns JSON response with top 10 predictions (HTTP 200)\n- For CSV/plain text input: Returns CSV response with predictions (HTTP 200)\n- For unsupported content types: Returns error message (HTTP 415)\n- All responses include appropriate mimetype headers",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport csv\nimport io\n\napp = Flask(__name__)\n\ndef scoring_service(text):\n    # Mock scoring service that returns dummy predictions\n    return [f\"Prediction_{i}\" for i in range(10)]\n\n@app.route('/invocations', methods=['POST'])\ndef invocations():\n    content_type = request.content_type\n\n    if content_type == 'application/json':\n        data = request.get_json()\n        text = data.get('text')\n        bing_key = data.get('bing_key')\n        predictions = scoring_service(text)\n        return Response(\n            response='{\"predictions\": [' + ','.join(f'\"{p}\"' for p in predictions) + ']}',\n            status=200,\n            mimetype='application/json'\n        )\n    elif content_type in ['text/csv', 'text/plain']:\n        input_data = request.data.decode('utf-8')\n        lines = input_data.splitlines()\n        predictions = [scoring_service(line) for line in lines]\n        output = io.StringIO()\n        writer = csv.writer(output)\n        for pred in predictions:\n            writer.writerow(pred)\n        return Response(\n            response=output.getvalue(),\n            status=200,\n            mimetype='text/csv'\n        )\n    else:\n        return Response(\n            response='Unsupported content type: ' + content_type,\n            status=415,\n            mimetype='text/plain'\n        )\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Create a Flask-based HTTP server function that acts as a Natural Language Generation (NLG) endpoint, validating incoming requests against a JSON schema and returning appropriate responses.\n\nFunction Description: The function `nlg_app` creates and configures a Flask application that serves as an NLG endpoint. It validates incoming POST requests against a predefined JSON schema (nlg_request_format_spec) and returns different text responses based on the template specified in the request. The server responds with \"Hey there!\" for the \"utter_greet\" template and a default message for all other templates.\n\nInput: \n- base_url: str (optional, default=\"/\") - The base URL path where the NLG endpoint will be mounted\n\nOutput:\n- Flask application object configured with:\n  - A single POST endpoint at the specified base_url\n  - Request validation using jsonschema\n  - Conditional response generation based on the request content",
    "Canonical_solution": "import uuid\nimport jsonschema\nfrom flask import Flask, request, jsonify\nfrom rasa.core.nlg.callback import nlg_request_format_spec\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    @app.route(base_url, methods=['POST'])\n    def generate():\n        \"\"\"Simple HTTP NLG generator, checks that the incoming request\n        is format according to the spec.\"\"\"\n\n        nlg_call = request.json\n\n        jsonschema.validate(nlg_call, nlg_request_format_spec())\n\n        if nlg_call.get(\"template\") == \"utter_greet\":\n            response = {\"text\": \"Hey there!\"}\n        else:\n            response = {\"text\": \"Sorry, didn't get that.\"}\n        return jsonify(response)\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport jsonschema\n\nnlg_request_format_spec = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"template\": {\"type\": \"string\", \"enum\": [\"utter_greet\", \"utter_default\"]},\n        \"content\": {\"type\": \"object\"}\n    },\n    \"required\": [\"template\"]\n}\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    @app.route(base_url, methods=[\"POST\"])\n    def handle_nlg():\n        try:\n            data = request.get_json()\n            jsonschema.validate(instance=data, schema=nlg_request_format_spec)\n            if data[\"template\"] == \"utter_greet\":\n                return jsonify({\"response\": \"Hey there!\"})\n            else:\n                return jsonify({\"response\": \"Default message\"})\n        except jsonschema.exceptions.ValidationError as e:\n            return jsonify({\"error\": \"Invalid request format\", \"details\": str(e)}), 400\n        except Exception as e:\n            return jsonify({\"error\": \"Internal server error\", \"details\": str(e)}), 500\n\n    return app"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a Flask-based HTTP server to visualize and navigate through a robot dataset, allowing users to view different episodes and associated metadata.\n\nFunction Description: The `run_server` function initializes and runs a Flask web server that provides a user interface for exploring robot datasets. It handles dataset navigation, episode selection, and displays relevant information including videos and task descriptions. The server supports both local datasets and remote datasets hosted on Hugging Face.\n\nInput:\n- dataset: Union[LeRobotDataset, IterableNamespace, None] - The dataset to visualize (can be None if loading from URL)\n- episodes: Optional[List[int]] - List of episode IDs to make available (None for all episodes)\n- host: str - Host address to run the server on\n- port: str - Port number to run the server on\n- static_folder: Path - Path to static files directory\n- template_folder: Path - Path to HTML templates directory\n\nOutput: None (runs a Flask server indefinitely until interrupted)\n\nMethods (route handlers):\n1. homepage() -> Union[Redirect, Response] - Handles root URL, redirects to first episode or shows dataset selection page\n2. show_first_episode(dataset_namespace: str, dataset_name: str) -> Redirect - Redirects to the first episode of a specified dataset\n3. show_episode(dataset_namespace: str, dataset_name: str, episode_id: int) -> Union[Response, Tuple[str, int]] - Displays detailed information for a specific episode including videos and task data\n\nThe server provides the following features:\n- Dataset version validation\n- Episode navigation\n- Video playback\n- Task description display\n- Data visualization\n- Support for both local and remote datasets\n- Featured datasets showcase",
    "Canonical_solution": "import argparse\nimport json\nimport logging\nimport re\nimport shutil\nimport tempfile\nfrom pathlib import Path\n\nimport requests\nfrom flask import Flask, redirect, render_template, request, url_for\n\ndef run_server(\n    dataset: LeRobotDataset | IterableNamespace | None,\n    episodes: list[int] | None,\n    host: str,\n    port: str,\n    static_folder: Path,\n    template_folder: Path,\n):\n    app = Flask(__name__, static_folder=static_folder.resolve(), template_folder=template_folder.resolve())\n    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 0  # specifying not to cache\n\n    @app.route(\"/\")\n    def hommepage(dataset=dataset):\n        if dataset:\n            dataset_namespace, dataset_name = dataset.repo_id.split(\"/\")\n            return redirect(\n                url_for(\n                    \"show_episode\",\n                    dataset_namespace=dataset_namespace,\n                    dataset_name=dataset_name,\n                    episode_id=0,\n                )\n            )\n\n        dataset_param, episode_param = None, None\n        all_params = request.args\n        if \"dataset\" in all_params:\n            dataset_param = all_params[\"dataset\"]\n        if \"episode\" in all_params:\n            episode_param = int(all_params[\"episode\"])\n\n        if dataset_param:\n            dataset_namespace, dataset_name = dataset_param.split(\"/\")\n            return redirect(\n                url_for(\n                    \"show_episode\",\n                    dataset_namespace=dataset_namespace,\n                    dataset_name=dataset_name,\n                    episode_id=episode_param if episode_param is not None else 0,\n                )\n            )\n\n        featured_datasets = [\n            \"lerobot/aloha_static_cups_open\",\n            \"lerobot/columbia_cairlab_pusht_real\",\n            \"lerobot/taco_play\",\n        ]\n        return render_template(\n            \"visualize_dataset_homepage.html\",\n            featured_datasets=featured_datasets,\n            lerobot_datasets=available_datasets,\n        )\n\n    @app.route(\"/<string:dataset_namespace>/<string:dataset_name>\")\n    def show_first_episode(dataset_namespace, dataset_name):\n        first_episode_id = 0\n        return redirect(\n            url_for(\n                \"show_episode\",\n                dataset_namespace=dataset_namespace,\n                dataset_name=dataset_name,\n                episode_id=first_episode_id,\n            )\n        )\n\n    @app.route(\"/<string:dataset_namespace>/<string:dataset_name>/episode_<int:episode_id>\")\n    def show_episode(dataset_namespace, dataset_name, episode_id, dataset=dataset, episodes=episodes):\n        repo_id = f\"{dataset_namespace}/{dataset_name}\"\n        try:\n            if dataset is None:\n                dataset = get_dataset_info(repo_id)\n        except FileNotFoundError:\n            return (\n                \"Make sure to convert your LeRobotDataset to v2 & above. See how to convert your dataset at https://github.com/huggingface/lerobot/pull/461\",\n                400,\n            )\n        dataset_version = (\n            dataset.meta._version if isinstance(dataset, LeRobotDataset) else dataset.codebase_version\n        )\n        match = re.search(r\"v(\\d+)\\.\", dataset_version)\n        if match:\n            major_version = int(match.group(1))\n            if major_version < 2:\n                return \"Make sure to convert your LeRobotDataset to v2 & above.\"\n\n        episode_data_csv_str, columns = get_episode_data(dataset, episode_id)\n        dataset_info = {\n            \"repo_id\": f\"{dataset_namespace}/{dataset_name}\",\n            \"num_samples\": dataset.num_frames\n            if isinstance(dataset, LeRobotDataset)\n            else dataset.total_frames,\n            \"num_episodes\": dataset.num_episodes\n            if isinstance(dataset, LeRobotDataset)\n            else dataset.total_episodes,\n            \"fps\": dataset.fps,\n        }\n        if isinstance(dataset, LeRobotDataset):\n            video_paths = [\n                dataset.meta.get_video_file_path(episode_id, key) for key in dataset.meta.video_keys\n            ]\n            videos_info = [\n                {\"url\": url_for(\"static\", filename=video_path), \"filename\": video_path.parent.name}\n                for video_path in video_paths\n            ]\n            tasks = dataset.meta.episodes[0][\"tasks\"]\n        else:\n            video_keys = [key for key, ft in dataset.features.items() if ft[\"dtype\"] == \"video\"]\n            videos_info = [\n                {\n                    \"url\": f\"https://huggingface.co/datasets/{repo_id}/resolve/main/\"\n                    + dataset.video_path.format(\n                        episode_chunk=int(episode_id) // dataset.chunks_size,\n                        video_key=video_key,\n                        episode_index=episode_id,\n                    ),\n                    \"filename\": video_key,\n                }\n                for video_key in video_keys\n            ]\n\n            response = requests.get(\n                f\"https://huggingface.co/datasets/{repo_id}/resolve/main/meta/episodes.jsonl\"\n            )\n            response.raise_for_status()\n            # Split into lines and parse each line as JSON\n            tasks_jsonl = [json.loads(line) for line in response.text.splitlines() if line.strip()]\n\n            filtered_tasks_jsonl = [row for row in tasks_jsonl if row[\"episode_index\"] == episode_id]\n            tasks = filtered_tasks_jsonl[0][\"tasks\"]\n\n        videos_info[0][\"language_instruction\"] = tasks\n\n        if episodes is None:\n            episodes = list(\n                range(dataset.num_episodes if isinstance(dataset, LeRobotDataset) else dataset.total_episodes)\n            )\n\n        return render_template(\n            \"visualize_dataset_template.html\",\n            episode_id=episode_id,\n            episodes=episodes,\n            dataset_info=dataset_info,\n            videos_info=videos_info,\n            episode_data_csv_str=episode_data_csv_str,\n            columns=columns,\n        )\n\n    app.run(host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, redirect, url_for, request, send_from_directory\nimport os\nimport re\nfrom typing import Union, Optional, List, Tuple, Any, Dict\nfrom pathlib import Path\nfrom le_robot.datasets.dataset import LeRobotDataset\nfrom le_robot.datasets.utils import get_dataset_info\nfrom le_robot.datasets.remote_dataset import RemoteDataset\nfrom le_robot.datasets.iterable_namespace import IterableNamespace\n\napp = Flask(__name__, static_folder='static', template_folder='templates')\n\ndef run_server(\n    dataset: Union[LeRobotDataset, IterableNamespace, None] = None,\n    episodes: Optional[List[int]] = None,\n    host: str = '127.0.0.1',\n    port: str = '5000',\n    static_folder: Path = Path('static'),\n    template_folder: Path = Path('templates')\n):\n    app.static_folder = str(static_folder)\n    app.template_folder = str(template_folder)\n    \n    # Store dataset and episodes in the app context\n    app.dataset = dataset\n    app.episodes = episodes\n    \n    @app.route('/')\n    def homepage():\n        if not hasattr(app, 'dataset') or app.dataset is None:\n            return render_template('dataset_selection.html')\n        else:\n            if app.episodes and len(app.episodes) > 0:\n                return redirect(url_for('show_episode', dataset_namespace=app.dataset.namespace, dataset_name=app.dataset.name, episode_id=app.episodes[0]))\n            else:\n                return render_template('dataset_selection.html')\n    \n    @app.route('/dataset/<dataset_namespace>/<dataset_name>/first')\n    def show_first_episode(dataset_namespace: str, dataset_name: str):\n        dataset = get_dataset(dataset_namespace, dataset_name)\n        if dataset is None:\n            return \"Dataset not found\", 404\n        \n        if app.episodes and len(app.episodes) > 0:\n            return redirect(url_for('show_episode', dataset_namespace=dataset_namespace, dataset_name=dataset_name, episode_id=app.episodes[0]))\n        else:\n            return redirect(url_for('show_episode', dataset_namespace=dataset_namespace, dataset_name=dataset_name, episode_id=0))\n    \n    @app.route('/dataset/<dataset_namespace>/<dataset_name>/episode/<int:episode_id>')\n    def show_episode(dataset_namespace: str, dataset_name: str, episode_id: int):\n        dataset = get_dataset(dataset_namespace, dataset_name)\n        if dataset is None:\n            return \"Dataset not found\", 404\n        \n        if episodes is not None and episode_id not in episodes:\n            return \"Episode not available\", 404\n        \n        try:\n            episode_data = dataset.get_episode(episode_id)\n        except Exception as e:\n            return f\"Error loading episode {episode_id}: {str(e)}\", 500\n        \n        task_description = episode_data.get('task_description', 'No task description available')\n        video_paths = episode_data.get('video_paths', [])\n        images = episode_data.get('images', [])\n        metadata = episode_data.get('metadata', {})\n        \n        return render_template(\n            'episode.html',\n            dataset_namespace=dataset_namespace,\n            dataset_name=dataset_name,\n            episode_id=episode_id,\n            task_description=task_description,\n            video_paths=video_paths,\n            images=images,\n            metadata=metadata\n        )\n    \n    @app.route('/static/<path:filename>')\n    def serve_static(filename):\n        return send_from_directory(app.static_folder, filename)\n    \n    def get_dataset(namespace: str, name: str) -> Union[LeRobotDataset, RemoteDataset, None]:\n        if namespace == 'local':\n            if app.dataset is not None:\n                return app.dataset\n            else:\n                return None\n        elif namespace == 'hf':\n            return RemoteDataset(name)\n        else:\n            return None\n    \n    app.run(host=host, port=port, debug=True)"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create an asynchronous function that consumes messages from a Kafka topic, processes them in batches, and handles the results using a provided callback function. The function should handle connection retries and gracefully manage the consumer lifecycle.\n\nFunction Description: The function `async_process_streaming_output` asynchronously consumes messages from a specified Kafka topic, processes them in configurable batch sizes, and passes the processed data to a result handler function. It includes retry logic for topic availability and proper consumer startup/shutdown management.\n\nInput:\n- `input_done`: asyncio.Event - Event flag to signal when message consumption should stop\n- `output_topic_name`: str - Name of the Kafka topic to consume messages from\n- `result_handler`: Callable - Function to handle processed message batches\n- `batch_size`: int - Maximum number of records to fetch in each batch\n- `kafka_bootstrap_servers`: str - Comma-separated list of Kafka bootstrap servers\n- `kafka_output_consumer_timeout_ms`: int - Timeout in milliseconds for consumer operations\n\nOutput: None (The function runs continuously until the input_done event is set, processing messages through the result_handler callback)",
    "Canonical_solution": "import asyncio\nimport json\nimport time\nimport traceback\nfrom aiokafka import AIOKafkaConsumer\nfrom aiokafka.errors import UnknownTopicOrPartitionError\n\nasync def async_process_streaming_output(\n    input_done: asyncio.Event,\n    output_topic_name,\n    result_handler,\n    batch_size: int,\n    kafka_bootstrap_servers: str,\n    kafka_output_consumer_timeout_ms: int\n):\n    timeout_ms = kafka_output_consumer_timeout_ms\n\n    # Retry to workaround race condition of topic creation\n    retries = 5\n    while retries > 0:\n        try:\n            consumer = AIOKafkaConsumer(\n                output_topic_name,\n                bootstrap_servers=kafka_bootstrap_servers,\n                value_deserializer=lambda v: json.loads(v.decode(\"utf-8\")),\n                auto_offset_reset=\"earliest\",\n                max_partition_fetch_bytes=3000000,\n            )\n            await consumer.start()\n            break\n        except UnknownTopicOrPartitionError as e:\n            await consumer.stop()\n            retries -= 1\n            time.sleep(1)\n\n    try:\n        while not input_done.is_set():\n            data = await consumer.getmany(timeout_ms=timeout_ms, max_records=batch_size)\n            for topic_partition, messages in data.items():\n                topic = topic_partition.topic\n                if messages:\n                    batches = [msg.value for msg in messages]\n                    for records in batches:\n                        result_handler(records)\n    finally:\n        await consumer.stop()",
    "Code_level": "Function-level",
    "FSMID_for_test": 80,
    "right_result": "import asyncio\nimport aiokafka\nfrom typing import Callable\n\nasync def async_process_streaming_output(\n    input_done: asyncio.Event,\n    output_topic_name: str,\n    result_handler: Callable,\n    batch_size: int,\n    kafka_bootstrap_servers: str,\n    kafka_output_consumer_timeout_ms: int\n):\n    retry_delay = 5\n    max_retries = 5\n    retries = 0\n\n    while not input_done.is_set():\n        try:\n            consumer = aiokafka.AIOKafkaConsumer(\n                output_topic_name,\n                bootstrap_servers=kafka_bootstrap_servers,\n                enable_auto_commit=False,\n                consumer_timeout_ms=kafka_output_consumer_timeout_ms\n            )\n            await consumer.start()\n            batch = []\n            async for msg in consumer:\n                batch.append(msg.value)\n                if len(batch) >= batch_size:\n                    await result_handler(batch)\n                    batch = []\n            if batch:\n                await result_handler(batch)\n            await consumer.stop()\n            break\n        except (aiokafka.errors.KafkaConnectionError, aiokafka.errors.TopicAuthorizationFailedError) as e:\n            retries += 1\n            if retries > max_retries:\n                raise\n            await asyncio.sleep(retry_delay)\n        except Exception as e:\n            await asyncio.sleep(retry_delay)"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the http.client library, supporting both HTTP and HTTPS protocols, with optional proxy configuration and proper error handling.\n\nFunction Description: The function performs HTTP requests (GET/POST) to a specified endpoint with given parameters. It handles connection setup (with or without proxy), request sending, response processing, and connection cleanup. It supports both Python 2 and 3 compatibility and includes logging for debugging purposes.\n\nInput:\n- method: [str] - HTTP method to use ('GET' or 'POST')\n- action: [str] - URL path/endpoint to request\n- param: [dict] - Optional dictionary of parameters (default: None)\n- **params: [dict] - Additional parameters as keyword arguments\n\nOutput:\n- Returns: [str] - Response body as string if successful (status code 2xx)\n- Raises: [Exception] - If HTTP status code indicates failure (non-2xx)",
    "Canonical_solution": "from json import loads as jsondecode\nfrom logging import debug, info, warning\ntry:\n    # python 2\n    from httplib import HTTPSConnection, HTTPConnection\n    from urlparse import urlparse, parse_qsl\n    from urllib import urlencode\nexcept ImportError:\n    # python 3\n    from http.client import HTTPSConnection, HTTPConnection\n    from urllib.parse import urlencode, urlparse, parse_qsl\n\nclass Config:\n    ID = None\n    TOKEN = None\n    PROXY = None\n    TTL = None\n\ndef request(method, action, param=None, **params):\n    if param:\n        params.update(param)\n\n    URLObj = urlparse(Config.ID)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    info(\"%s/%s : %s\", URLObj.netloc, action, params)\n\n    if Config.PROXY:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(Config.PROXY)\n        else:\n            conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(URLObj.netloc, URLObj.port)\n    else:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(URLObj.netloc, URLObj.port)\n        else:\n            conn = HTTPSConnection(URLObj.netloc, URLObj.port)\n\n    headers = {}\n\n    if method == \"GET\":\n        if params:\n            action += '?' + urlencode(params)\n        params = \"\"\n    else:\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\n    params = urlencode(params)\n\n    conn.request(method, action, params, headers)\n    response = conn.getresponse()\n    res = response.read().decode('utf8')\n    conn.close()\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]:%s', action, response.status, res)\n        raise Exception(res)\n    else:\n        debug('%s : result:%s', action, res)\n        return res",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport urllib.parse\nimport logging\nimport sys\n\ndef http_request(method, action, param=None, **params):\n    if param is None:\n        param = {}\n    param.update(params)\n    headers = {'User-Agent': 'Python-HTTP-Client/1.0'}\n\n    if 'https' in action:\n        conn = http.client.HTTPSConnection(action.split('/')[2])\n    else:\n        conn = http.client.HTTPConnection(action.split('/')[2])\n\n    try:\n        if method == 'GET':\n            query_string = urllib.parse.urlencode(param)\n            full_url = f\"{action}?{query_string}\" if query_string else action\n            conn.request(method, full_url, headers=headers)\n        elif method == 'POST':\n            data = urllib.parse.urlencode(param).encode('utf-8')\n            conn.request(method, action, data, headers=headers)\n        else:\n            raise ValueError(\"Unsupported HTTP method: {}\".format(method))\n\n        response = conn.getresponse()\n        status = response.status\n        content = response.read().decode('utf-8')\n\n        if 200 <= status < 300:\n            return content\n        else:\n            logging.error(f\"HTTP error {status}: {content}\")\n            raise Exception(f\"HTTP error {status}: {content}\")\n\n    except Exception as e:\n        logging.error(f\"Request failed: {e}\")\n        raise e\n\n    finally:\n        conn.close()"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that introduces a configurable delay before responding, with CORS headers enabled for cross-origin requests.\n\nFunction Description: The function creates a Flask route '/respond' that accepts a 'time' query parameter (in milliseconds), sleeps for the specified duration, then returns a simple text response with CORS headers.\n\nInput:\n- time (query parameter): int - The delay time in milliseconds before responding\n\nOutput:\n- Flask Response object containing:\n  - Body: \"Response from Flask\" (string)\n  - Headers: Access-Control-Allow-Origin set to '*' for CORS\n  - Status code: 200 (implicit)",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef hello_world():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, make_response\nimport time\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_ms = int(request.args.get('time', 0))\n    time.sleep(time_ms / 1000)\n    response = make_response(\"Response from Flask\")\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities:\n1. `/respond` - Simulates a delayed response based on an input parameter\n2. `/request_type` - Returns the HTTP method used in the request\n3. `/json` - Returns a simple JSON response\n\nInput:\n- For `/respond` endpoint: \n  - `time` (query parameter): Integer - Time in milliseconds to delay the response\n- For `/request_type` endpoint: None\n- For `/json` endpoint: None\n\nOutput:\n- For `/respond` endpoint: \n  - Returns: HTTP response with text \"Response from Flask\" after specified delay\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/request_type` endpoint:\n  - Returns: HTTP response with text indicating the request method\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/json` endpoint:\n  - Returns: JSON response with {\"resp\": \"Hello JSON!\"}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    import time\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    response = \"Response from Flask\"\n    return response, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f\"Request method: {method}\", 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({\"resp\": \"Hello JSON!\"}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that includes classification, user feedback handling, and data persistence.\n\nClass Description: ReviewClassifier is a Flask web application class that performs sentiment analysis on movie reviews using a pre-trained classifier. It handles user submissions, provides classification results, processes feedback, and stores data in an SQLite database.\n\nAttributes:\n- app: Flask - The Flask application instance\n- clf: sklearn classifier - Pre-trained sentiment classifier loaded from pickle file\n- db: str - Path to the SQLite database file for storing reviews\n\nMethods:\n- __init__() -> None - Initializes the Flask app, loads classifier, and sets up routes\n- _setup_routes() -> None - Configures Flask routes for the web application\n- classify(document: str) -> tuple[str, float] - Classifies a review document and returns (label, probability)\n- train(document: str, y: int) -> None - Updates classifier with new training data\n- sqlite_entry(document: str, y: int) -> None - Stores review and sentiment in database\n- index() -> str - Renders the main review submission form (HTML)\n- results() -> str - Processes form submission and renders classification results (HTML)\n- feedback() -> str - Handles user feedback and updates model/database (HTML)\n- run(debug: bool = True) -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                  content=review,\n                                  prediction=y,\n                                  probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                              [validators.DataRequired(),\n                               validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\nimport sqlite3\nimport pickle\nimport os\n\nclass ReviewClassifier:\n    def __init__(self, db='reviews.db', clf_path='sentiment_classifier.pkl'):\n        self.app = Flask(__name__)\n        self.db = db\n        self.clf = self._load_classifier(clf_path)\n        self._setup_routes()\n    \n    def _load_classifier(self, path):\n        with open(path, 'rb') as f:\n            return pickle.load(f)\n    \n    def _setup_routes(self):\n        @self.app.route('/', methods=['GET', 'POST'])\n        def index():\n            if request.method == 'POST':\n                review = request.form['review']\n                return redirect(url_for('results', review=review))\n            return render_template('index.html')\n        \n        @self.app.route('/results/<review>')\n        def results(review):\n            label, prob = self.classify(review)\n            return render_template('results.html', review=review, label=label, probability=prob)\n        \n        @self.app.route('/feedback', methods=['POST'])\n        def feedback():\n            review = request.form['review']\n            sentiment = int(request.form['sentiment'])\n            self.train(review, sentiment)\n            self.sqlite_entry(review, sentiment)\n            return redirect(url_for('index'))\n    \n    def classify(self, document):\n        label = self.clf.predict([document])[0]\n        prob = self.clf.predict_proba([document])[0][label]\n        return label, prob\n    \n    def train(self, document, y):\n        self.clf.partial_fit([document], [y])\n    \n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO reviews (text, sentiment) VALUES (?, ?)\", (document, y))\n        conn.commit()\n        conn.close()\n    \n    def run(self, debug=True):\n        self.app.run(debug=debug)"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a simple HTTP server using Flask that handles GET requests on a specific endpoint and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes incoming GET requests to the \"/server_request\" endpoint. It retrieves a query parameter named \"param\" from the request, prints it to the console, and returns a simple response string \"served\".\n\nInput: \n- The function receives an implicit Flask `request` object containing the HTTP request data.\n- The input parameter is passed as a query string parameter named \"param\" (e.g., \"/server_request?param=value\").\n\nOutput: \n- The function prints the value of the \"param\" query parameter to the console.\n- The function returns a string response \"served\" with HTTP status code 200.",
    "Canonical_solution": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/server_request\")\ndef server_request():\n    print(request.args.get(\"param\"))\n    return \"served\"\n\nif __name__ == \"__main__\":\n    app.run(port=8082)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/server_request', methods=['GET'])\ndef server_request():\n    param = request.args.get('param')\n    print(param)\n    return 'served', 200\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub push subscription messages, extracts relevant data, and inserts it into BigQuery. Handle errors gracefully and return appropriate HTTP responses.\n\nFunction Description: The function serves as a Flask route handler for POST requests at the root path (\"/\"). It processes incoming Pub/Sub messages, extracts attributes and message data, processes Cloud Build events if present, and inserts the processed data into BigQuery. Errors are logged and a 204 No Content response is returned upon successful processing.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"key1\": \"value1\",\n        \"buildId\": \"123\" (optional)\n      },\n      \"data\": \"base64-encoded-string\" (optional)\n    }\n  }\n\nOutput: \n- Returns HTTP 204 No Content response on successful processing\n- Raises exceptions for invalid payload formats or missing required fields\n- Logs errors to console when data cannot be saved to BigQuery",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n        if \"buildId\" in attr:\n            event = process_cloud_build_event(attr, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\nclient = bigquery.Client()\n\n@app.route('/', methods=['POST'])\ndef process_pubsub_message():\n    try:\n        payload = request.get_json()\n        if not payload or 'message' not in payload:\n            raise ValueError(\"Invalid payload format: missing 'message' field\")\n\n        message = payload['message']\n        attributes = message.get('attributes', {})\n        data = message.get('data')\n\n        if data:\n            decoded_data = base64.b64decode(data).decode('utf-8')\n            try:\n                decoded_data = json.loads(decoded_data)\n            except json.JSONDecodeError:\n                pass  # Handle non-JSON data if needed\n\n        build_id = attributes.get('buildId')\n        event_type = attributes.get('eventType')\n\n        # Example processing logic\n        processed_data = {\n            'build_id': build_id,\n            'event_type': event_type,\n            'raw_data': decoded_data if data else None,\n            'attributes': attributes\n        }\n\n        # Insert into BigQuery\n        table_id = \"your-project-id.your_dataset.your_table\"\n        errors = client.insert_rows_json(table_id, [processed_data])\n        if errors:\n            for error in errors:\n                print(f\"BigQuery insertion error: {error}\")\n            return jsonify({\"error\": \"Failed to insert data into BigQuery\"}), 500\n\n        return '', 204\n\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles image pasting functionality, including image processing, screen projection detection, and integration with Photoshop.\n\nFunction Description: The paste() function handles POST requests to the '/paste' endpoint. It receives an image file, processes it to find matching screen coordinates, and sends it to Photoshop at the detected location. The function includes error handling, logging, and returns appropriate JSON responses.\n\nInput:\n- HTTP POST request containing:\n  - 'data' file: [binary] - Image file to be processed and pasted\n- Optional command line argument:\n  - '--photoshop_password': [str] - Password for Photoshop integration (default: '123456')\n\nOutput:\n- JSON response containing:\n  - 'status': [str] - Operation result ('ok', 'error', or 'screen not found')\n  - Optional 'error': [str] - Error description if status is 'error'\n- Possible HTTP status codes:\n  - 200: Successful operation\n  - 400: Bad request (missing file or empty image)",
    "Canonical_solution": "import io\nimport os\nfrom flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport logging\nimport argparse\nimport ps\n\nlogging.basicConfig(level=logging.INFO)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--photoshop_password', default='123456')\nargs = parser.parse_args()\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    start = time.time()\n    logging.info(' PASTE')\n\n    if 'data' not in request.files:\n        return jsonify({\n            'status': 'error',\n            'error': 'missing file param `data`'\n        }), 400\n    data = request.files['data'].read()\n    if len(data) == 0:\n        return jsonify({'status:': 'error', 'error': 'empty image'}), 400\n\n    with open('paste_received.jpg', 'wb') as f:\n        f.write(data)\n\n    view = Image.open(io.BytesIO(data))\n\n    if view.size[0] > max_view_size or view.size[1] > max_view_size:\n        view.thumbnail((max_view_size, max_view_size))\n\n    logging.info(' > grabbing screenshot...')\n    screen = pyscreenshot.grab()\n    screen_width, screen_height = screen.size\n\n    if screen.size[0] > max_screenshot_size or screen.size[1] > max_screenshot_size:\n        screen.thumbnail((max_screenshot_size, max_screenshot_size))\n\n    logging.info(' > finding projected point...')\n    view_arr = np.array(view.convert('L'))\n    screen_arr = np.array(screen.convert('L'))\n    x, y = screenpoint.project(view_arr, screen_arr, False)\n\n    found = x != -1 and y != -1\n\n    if found:\n        x = int(x / screen.size[0] * screen_width)\n        y = int(y / screen.size[1] * screen_height)\n        logging.info(f'{x}, {y}')\n\n        logging.info(' > sending to photoshop...')\n        name = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n        img_path = os.path.join(os.getcwd(), 'cut_current.png')\n        err = ps.paste(img_path, name, x, y, password=args.photoshop_password)\n        if err is not None:\n            logging.error('error sending to photoshop')\n            logging.error(err)\n            jsonify({'status': 'error sending to photoshop'})\n    else:\n        logging.info('screen not found')\n\n    logging.info(f'Completed in {time.time() - start:.2f}s')\n\n    if found:\n        return jsonify({'status': 'ok'})\n    else:\n        return jsonify({'status': 'screen not found'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport logging\nimport numpy as np\nimport cv2\nimport subprocess\nimport sys\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ndef detect_screen_projection(image):\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    edges = cv2.Canny(gray, 50, 150)\n    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    for cnt in contours:\n        x, y, w, h = cv2.boundingRect(cnt)\n        if w > 100 and h > 100:\n            return (x, y, w, h)\n    return None\n\ndef send_to_photoshop(image_path, coords, password):\n    x, y, w, h = coords\n    try:\n        subprocess.run([\n            'photoshop', \n            '-batchPlay', \n            f'{{\"script\":\"pasteImageAtLocation\",\"args\":{{\"imagePath\":\"{image_path}\",\"x\":{x},\"y\":{y}}}}}',\n            '--password', password\n        ], check=True)\n        return True\n    except subprocess.CalledProcessError as e:\n        logging.error(f\"Photoshop integration error: {e}\")\n        return False\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    if 'data' not in request.files:\n        return jsonify({'status': 'error', 'error': 'Missing file'}), 400\n\n    file = request.files['data']\n    if file.filename == '':\n        return jsonify({'status': 'error', 'error': 'Empty filename'}), 400\n\n    try:\n        image = np.frombuffer(file.read(), np.uint8)\n        image = cv2.imdecode(image, cv2.IMREAD_COLOR)\n        if image is None:\n            return jsonify({'status': 'error', 'error': 'Invalid image data'}), 400\n\n        coords = detect_screen_projection(image)\n        if coords is None:\n            return jsonify({'status': 'screen not found'}), 200\n\n        temp_image_path = '/tmp/paste_image.jpg'\n        cv2.imwrite(temp_image_path, image)\n\n        password = sys.argv[1] if len(sys.argv) > 1 and sys.argv[1].startswith('--photoshop_password') else '123456'\n        password_value = password.split('=')[1] if '=' in password else '123456'\n\n        if send_to_photoshop(temp_image_path, coords, password_value):\n            return jsonify({'status': 'ok'}), 200\n        else:\n            return jsonify({'status': 'error', 'error': 'Failed to send to Photoshop'}), 500\n\n    except Exception as e:\n        logging.exception(\"An error occurred during processing\")\n        return jsonify({'status': 'error', 'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (implicitly receives HTTP request method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - HTTP response with text body after specified delay\n  - Sets CORS header to allow all origins\n- For '/request_type' endpoint: \n  - HTTP response indicating the request method type\n  - Sets CORS header to allow all origins\n- For '/json' endpoint: \n  - Automatic JSON response with greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    import time\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    response = app.response_class(\n        response='Response after delay',\n        status=200,\n        mimetype='text/plain'\n    )\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    response = app.response_class(\n        response=f'Request method: {method}',\n        status=200,\n        mimetype='text/plain'\n    )\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response\n\n@app.route('/json')\ndef json():\n    return jsonify(message='Hello, world!')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a connection pooling system for HTTP and HTTPS connections to efficiently manage and reuse connections to a target server.\n\nClass Description: HTTPConnectionPool is a connection pool implementation that manages HTTP connections to a specific host and port. It provides methods to get, put, and make requests using connections from the pool.\n\nAttributes:\n- scheme: str - The URL scheme (http or https)\n- host: str - The target host for connections\n- port: int - The target port for connections\n- timeout: Timeout - Connection and read timeout settings\n- retries: Retry - Retry configuration for failed requests\n- pool: LifoQueue - The connection pool storage (LIFO queue)\n- block: bool - Whether to block when pool is empty\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Gets a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the specified connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw) -> HTTPResponse - Main method to make HTTP requests with connection pooling and retry logic\n- close() -> None - Closes all connections in the pool\n\nClass Description: HTTPSConnectionPool extends HTTPConnectionPool to handle HTTPS connections with SSL/TLS configuration.\n\nAttributes:\n- key_file: str - Path to client private key file\n- cert_file: str - Path to client certificate file\n- cert_reqs: str - Certificate requirements\n- ca_certs: str - Path to CA certificates file\n- ssl_version: str - SSL version to use\n- assert_hostname: str - Hostname to verify against certificate\n- assert_fingerprint: str - Expected certificate fingerprint\n\nMethods:\n- _prepare_conn(conn) -> HTTPSConnection - Configures SSL/TLS settings on a connection\n- _new_conn() -> HTTPSConnection - Creates a new HTTPS connection with SSL/TLS configuration",
    "Canonical_solution": "import socket\nimport errno\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.url import parse_url\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    SSLError,\n    TimeoutError,\n    ClosedPoolError,\n    NewConnectionError\n)\nfrom .packages import six\nfrom .packages.six.moves import queue\nfrom .util.queue import LifoQueue\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n        conn.request(method, url, **httplib_request_kw)\n        return conn.getresponse()\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        **response_kw\n    ):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n            return response\n        except (SocketError, ProtocolError) as e:\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout,\n                pool_timeout,\n                release_conn,\n                **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                conn.close()\n            except queue.Empty:\n                break\n\nclass HTTPSConnectionPool(HTTPConnectionPool):\n    scheme = \"https\"\n    ConnectionCls = HTTPSConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        key_file=None,\n        cert_file=None,\n        cert_reqs=None,\n        ca_certs=None,\n        ssl_version=None,\n        assert_hostname=None,\n        assert_fingerprint=None,\n        **conn_kw\n    ):\n        super(HTTPSConnectionPool, self).__init__(\n            host,\n            port,\n            strict,\n            timeout,\n            maxsize,\n            block,\n            headers,\n            retries,\n            _proxy,\n            _proxy_headers,\n            **conn_kw\n        )\n        self.key_file = key_file\n        self.cert_file = cert_file\n        self.cert_reqs = cert_reqs\n        self.ca_certs = ca_certs\n        self.ssl_version = ssl_version\n        self.assert_hostname = assert_hostname\n        self.assert_fingerprint = assert_fingerprint\n\n    def _prepare_conn(self, conn):\n        conn.set_cert(\n            key_file=self.key_file,\n            cert_file=self.cert_file,\n            cert_reqs=self.cert_reqs,\n            ca_certs=self.ca_certs,\n            assert_hostname=self.assert_hostname,\n            assert_fingerprint=self.assert_fingerprint\n        )\n        conn.ssl_version = self.ssl_version\n        return conn\n\n    def _new_conn(self):\n        conn = super(HTTPSConnectionPool, self)._new_conn()\n        return self._prepare_conn(conn)",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import socket\nfrom urllib.parse import urlparse\nfrom queue import LifoQueue\nfrom http.client import HTTPConnection, HTTPSConnection, HTTPResponse, HTTPException\nfrom urllib3.util import Timeout, Retry, connectionpool\nfrom urllib3.util.ssl_ import create_urllib3_context\nfrom urllib3.packages.six.moves import http_client\n\nclass Timeout:\n    DEFAULT_TIMEOUT = 30.0\n\nclass Retry:\n    def __init__(self, total=3, backoff_factor=0.5):\n        self.total = total\n        self.backoff_factor = backoff_factor\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries or Retry()\n        self.pool = LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        if self.proxy:\n            proxy_url = urlparse(self.proxy)\n            proxy_host = proxy_url.hostname\n            proxy_port = proxy_url.port or 8080\n            conn = HTTPConnection(proxy_host, proxy_port)\n            conn.set_tunnel(self.host, self.port, self.proxy_headers)\n        else:\n            conn = HTTPConnection(self.host, self.port, **self.conn_kw)\n        return conn\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(timeout=timeout)\n        except:\n            if not self.block:\n                raise\n            conn = self._new_conn()\n        return conn\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except:\n            pass\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            response = conn.getresponse()\n            return response\n        except HTTPException as e:\n            self._put_conn(conn)\n            raise e\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw):\n        retries = retries or self.retries\n        for i in range(retries.total + 1):\n            try:\n                conn = self._get_conn(timeout=pool_timeout)\n                httplib_request_kw = {\n                    'body': body,\n                    'headers': headers or {},\n                }\n                response = self._make_request(conn, method, url, timeout=timeout, **httplib_request_kw)\n                if release_conn:\n                    self._put_conn(conn)\n                return response\n            except Exception as e:\n                if i == retries.total:\n                    raise\n                sleep_time = retries.backoff_factor * (2 ** i)\n                time.sleep(sleep_time)\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get()\n            conn.close()\n\nclass HTTPSConnectionPool(HTTPConnectionPool):\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, key_file=None, cert_file=None, cert_reqs='CERT_REQUIRED', ca_certs=None, ssl_version=None, assert_hostname=None, assert_fingerprint=None, **conn_kw):\n        super().__init__(host, port, strict, timeout, maxsize, block, headers, retries, _proxy, _proxy_headers, **conn_kw)\n        self.scheme = 'https'\n        self.key_file = key_file\n        self.cert_file = cert_file\n        self.cert_reqs = cert_reqs\n        self.ca_certs = ca_certs\n        self.ssl_version = ssl_version\n        self.assert_hostname = assert_hostname\n        self.assert_fingerprint = assert_fingerprint\n\n    def _prepare_conn(self, conn):\n        context = create_urllib3_context(\n            cert_reqs=self.cert_reqs,\n            cafile=self.ca_certs,\n            keyfile=self.key_file,\n            certfile=self.cert_file,\n            ssl_version=self.ssl_version,\n        )\n        conn._ssl_context = context\n        if self.assert_hostname:\n            conn._assert_hostname = self.assert_hostname\n        if self.assert_fingerprint:\n            conn._assert_fingerprint = self.assert_fingerprint\n        return conn\n\n    def _new_conn(self):\n        conn = HTTPSConnection(self.host, self.port, **self.conn_kw)\n        self._prepare_conn(conn)\n        return conn"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Create a Python application using Sanic framework that serves a basic web page and integrates a ReactPy component. The application should have a root route serving an HTML file and a separate route prefix for ReactPy components.\n\nFunction Description: The code sets up a Sanic web server with two main functionalities: serving static content (index.html) and hosting ReactPy components. It demonstrates basic route handling and ReactPy integration with Sanic.\n\nInput: None (The functions don't take explicit parameters but rely on framework-specific objects)\n\nOutput: A running Sanic web server that responds to HTTP requests\n\nMethods:\n\nconfigure_reactpy: None -> None - Configures the ReactPy integration with Sanic, setting up the necessary routes and options for ReactPy components under the \"/_reactpy\" prefix.\n\nrun_server: None -> None - Starts the Sanic web server on localhost (127.0.0.1) port 5000.\n\nRoute Handlers:\n\nindex: (request: sanic.Request) -> sanic.response.HTTPResponse - Asynchronous route handler for the root path (\"/\") that serves the index.html file.\n\nReactPyView: None -> reactpy.types.Component - ReactPy component function that returns basic HTML content to be rendered by the ReactPy backend.",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import file\nfrom reactpy import component, html\nfrom reactpy.backend.sanic import Options, configure\n\napp = Sanic(\"MyApp\")\n\n@app.route(\"/\")\nasync def index(request):\n    return await file(\"index.html\")\n\n@component\ndef ReactPyView():\n    return html.code(\"This text came from an ReactPy App\")\n\ndef configure_reactpy():\n    configure(app, ReactPyView, Options(url_prefix=\"/_reactpy\"))\n\ndef run_server():\n    app.run(host=\"127.0.0.1\", port=5000)\n\nif __name__ == \"__main__\":\n    configure_reactpy()\n    run_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic, response\nimport reactpy\nfrom reactpy import component, html\n\napp = Sanic(\"SanicReactPyApp\")\n\n@component\ndef ReactPyView():\n    return html.div({\"style\": {\"padding\": \"20px\", \"border\": \"1px solid #ccc\"}}, \"Hello from ReactPy!\")\n\ndef configure_reactpy():\n    reactpy.config.set_route_prefix(\"/_reactpy\")\n    reactpy.hooks.use_server(app)\n\n@app.route(\"/\")\nasync def index(request):\n    return response.file(\"./index.html\")\n\nif __name__ == \"__main__\":\n    configure_reactpy()\n    app.run(host=\"127.0.0.1\", port=5000)"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling text embedding requests using an ONNX backend, with configurable GPU usage and worker processes.\n\nFunction Description: The function `setup_embedding_server` initializes and runs a Sanic web server that provides an embedding service. It sets up a single POST endpoint `/embedding` that processes text inputs and returns their embeddings using an ONNX-based backend. The server can be configured to use GPU acceleration and multiple worker processes.\n\nInput:\n- `use_gpu`: [Boolean] - Optional flag indicating whether to use GPU acceleration (default: False)\n- `workers`: [Integer] - Optional number of worker processes to spawn (default: 1)\n\nOutput:\n- None (The function runs indefinitely as a web server)\n- The server responds to POST requests at `/embedding` with JSON-formatted embedding results",
    "Canonical_solution": "import sys\nimport os\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom qanything_kernel.dependent_server.embedding_server.embedding_onnx_backend import EmbeddingOnnxBackend\nimport argparse\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    app = Sanic(\"embedding_server\")\n\n    @app.route(\"/embedding\", methods=[\"POST\"])\n    async def embedding(request):\n        data = request.json\n        texts = data.get('texts')\n        onnx_backend: EmbeddingOnnxBackend = request.app.ctx.onnx_backend\n        result_data = onnx_backend.predict(texts)\n        return json(result_data)\n\n    @app.listener('before_server_start')\n    async def setup_onnx_backend(app, loop):\n        app.ctx.onnx_backend = EmbeddingOnnxBackend(use_cpu=not use_gpu)\n\n    app.run(host=\"0.0.0.0\", port=9001, workers=workers)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    setup_embedding_server(use_gpu=args.use_gpu, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "import sanic\nfrom sanic import Sanic, request\nimport onnxruntime as ort\nimport numpy as np\nimport json\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    app = Sanic(\"EmbeddingServer\")\n\n    # Load ONNX model\n    session_options = ort.SessionOptions()\n    providers = ['CUDAExecutionProvider', 'CPUExecutionProvider'] if use_gpu else ['CPUExecutionProvider']\n    session = ort.InferenceSession(\"model.onnx\", session_options, providers=providers)\n\n    @app.route(\"/embedding\", methods=[\"POST\"])\n    async def embedding(request):\n        data = request.json\n        text = data.get(\"text\", \"\")\n        inputs = {\"input_text\": np.array([text], dtype=np.object_)}\n        outputs = session.run(None, inputs)\n        embedding_vector = outputs[0].tolist()\n        return json.dumps({\"embedding\": embedding_vector})\n\n    app.run(host=\"0.0.0.0\", port=5000, workers=workers)"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling exchange rate API requests, supporting date-based queries, base currency conversion, and symbol filtering.\n\nClass Description: ExchangeRateAPI is a Sanic application that provides exchange rate data from a PostgreSQL database. It handles various API endpoints for retrieving latest rates or rates for specific dates, with support for currency conversion and symbol filtering.\n\nAttributes:\n- app: Sanic - The Sanic application instance\n- db: Gino - Database connection handler using Gino ORM\n- config: dict - Application configuration parsed from DATABASE_URL environment variable\n\nMethods:\n- __init__() -> None - Initializes the Sanic app, database connection, and sets up routes\n- _setup_routes() -> None - Defines all API routes and their handlers\n- run(host: str = \"0.0.0.0\", port: int = 8000) -> None - Starts the Sanic server with specified host and port\n\nRoute Handlers:\n- exchange_rates(request: Request, date: str = None) -> HTTPResponse - Handles all exchange rate API requests:\n  * Input: \n    - request: Sanic Request object containing query parameters\n    - date: Optional date string in YYYY-MM-DD format\n  * Output: JSON response containing:\n    - base currency\n    - date of rates\n    - exchange rates\n    OR error message with appropriate HTTP status code\n\nSupporting Class:\nExchangeRates: Gino model representing exchange rate data\nAttributes:\n- date: date - The date of the exchange rates\n- rates: dict - Dictionary of currency rates",
    "Canonical_solution": "import fcntl\nimport itertools\nimport requests\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom os import getenv\nfrom xml.etree import ElementTree\nfrom sanic import Sanic\nfrom sanic.response import json, redirect\nfrom exchangerates.utils import Gino, cors, parse_database_url\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = Sanic()\n        self.app.config.update(\n            parse_database_url(\n                url=getenv(\"DATABASE_URL\", \"postgresql://localhost/exchangerates\")\n            )\n        )\n        self.db = Gino(self.app)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/<date>\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/<date>\", methods=[\"GET\", \"HEAD\"])\n        @cors()\n        async def exchange_rates(request, date=None):\n            if request.method == \"HEAD\":\n                return json(\"\")\n\n            dt = datetime.now()\n            if date:\n                try:\n                    dt = datetime.strptime(date, \"%Y-%m-%d\")\n                except ValueError as e:\n                    return json({\"error\": \"{}\".format(e)}, status=400)\n\n                if dt < datetime(1999, 1, 4):\n                    return json(\n                        {\"error\": \"There is no data for dates older then 1999-01-04.\"},\n                        status=400,\n                    )\n\n            exchange_rates = (\n                await ExchangeRates.query.where(ExchangeRates.date <= dt.date())\n                .order_by(ExchangeRates.date.desc())\n                .gino.first()\n            )\n            rates = exchange_rates.rates\n\n            base = \"EUR\"\n            if \"base\" in request.raw_args and request.raw_args[\"base\"] != \"EUR\":\n                base = request.raw_args[\"base\"]\n                if base in rates:\n                    base_rate = Decimal(rates[base])\n                    rates = {\n                        currency: Decimal(rate) / base_rate for currency, rate in rates.items()\n                    }\n                    rates[\"EUR\"] = Decimal(1) / base_rate\n                else:\n                    return json(\n                        {\"error\": \"Base '{}' is not supported.\".format(base)}, status=400\n                    )\n\n            if \"symbols\" in request.args:\n                symbols = list(\n                    itertools.chain.from_iterable(\n                        [symbol.split(\",\") for symbol in request.args[\"symbols\"]]\n                    )\n                )\n                if all(symbol in rates for symbol in symbols):\n                    rates = {symbol: rates[symbol] for symbol in symbols}\n                else:\n                    return json(\n                        {\n                            \"error\": \"Symbols '{}' are invalid for date {}.\".format(\n                                \",\".join(symbols), dt.date()\n                            )\n                        },\n                        status=400,\n                    )\n\n            return json(\n                {\"base\": base, \"date\": exchange_rates.date.strftime(\"%Y-%m-%d\"), \"rates\": rates}\n            )\n\n    def run(self, host=\"0.0.0.0\", port=8000):\n        self.app.run(host=host, port=port, access_log=False, debug=True)\n\nclass ExchangeRates:\n    __tablename__ = \"exchange_rates\"\n    date = None\n    rates = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "import os\nimport json\nfrom datetime import date\nfrom sanic import Sanic, Request, HTTPResponse\nfrom sanic_ext import validate\nfrom gino import Gino\nfrom gino.schema import GinoSchemaGenerator\nfrom sqlalchemy import Column, Date, JSON\nfrom typing import Optional\n\napp = Sanic(\"ExchangeRateAPI\")\ndb = Gino()\n\nclass ExchangeRates(db.Model):\n    __tablename__ = \"exchange_rates\"\n    date = Column(Date, primary_key=True)\n    rates = Column(JSON, nullable=False)\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = app\n        self.db = db\n        self.config = {\n            \"DATABASE_URL\": os.getenv(\"DATABASE_URL\", \"postgresql://user:password@localhost/exchange_rates\")\n        }\n        self._setup_routes()\n        self.db.init(self.config[\"DATABASE_URL\"])\n\n    def _setup_routes(self):\n        @self.app.route(\"/exchange-rates\", methods=[\"GET\"])\n        @validate(query={\"date\": str, \"base\": str, \"symbols\": str})\n        async def exchange_rates(request: Request, date: Optional[str] = None) -> HTTPResponse:\n            base = request.args.get(\"base\")\n            symbols = request.args.get(\"symbols\")\n\n            if not base:\n                return HTTPResponse(json.dumps({\"error\": \"Base currency is required\"}), status=400)\n\n            query_date = date or str(date.today())\n\n            try:\n                query_date = date.fromisoformat(query_date)\n            except ValueError:\n                return HTTPResponse(json.dumps({\"error\": \"Invalid date format. Use YYYY-MM-DD.\"}), status=400)\n\n            record = await ExchangeRates.query.filter(ExchangeRates.date == query_date).gino.first()\n\n            if not record:\n                return HTTPResponse(json.dumps({\"error\": f\"No exchange rates found for {query_date}\"}), status=404)\n\n            rates = record.rates\n            if base not in rates:\n                return HTTPResponse(json.dumps({\"error\": f\"Base currency {base} not available for {query_date}\"}), status=400)\n\n            base_rate = rates[base]\n            result = {\"base\": base, \"date\": query_date.isoformat(), \"rates\": {}}\n\n            if symbols:\n                symbols_list = symbols.split(\",\")\n                for symbol in symbols_list:\n                    if symbol in rates:\n                        rate = rates[symbol] / base_rate\n                        result[\"rates\"][symbol] = round(rate, 4)\n                    else:\n                        return HTTPResponse(json.dumps({\"error\": f\"Currency {symbol} not available for {query_date}\"}), status=400)\n            else:\n                for symbol, rate in rates.items():\n                    converted_rate = rate / base_rate\n                    result[\"rates\"][symbol] = round(converted_rate, 4)\n\n            return HTTPResponse(json.dumps(result), status=200)\n\n    def run(self, host: str = \"0.0.0.0\", port: int = 8000) -> None:\n        self.app.run(host=host, port=port, debug=True)"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client using the Sanic framework, capable of handling GraphQL requests and standard HTTP methods (GET, POST, PATCH, PUT, DELETE). The class should support both query parameters and file uploads, and provide appropriate response handling.\n\nClass Description: The `SanicHttpClient` class is a wrapper around Sanic's ASGI client that simplifies making HTTP requests, particularly for GraphQL endpoints. It handles request construction, header management, and response formatting.\n\nAttributes:\n- app: Sanic - The Sanic application instance used for handling requests\n- graphiql: Optional[bool] - Flag to enable GraphiQL interface\n- graphql_ide: Optional[str] - The GraphQL IDE to use (default: \"graphiql\")\n- allow_queries_via_get: bool - Whether to allow GraphQL queries via GET method\n- result_override: Optional[Any] - Optional result override for testing\n- multipart_uploads_enabled: bool - Flag to enable multipart file uploads\n\nMethods:\n- __init__(graphiql: Optional[bool], graphql_ide: Optional[str], allow_queries_via_get: bool, result_override: Optional[Any], multipart_uploads_enabled: bool) -> None - Initializes the Sanic application and sets up the GraphQL route\n- _graphql_request(method: Literal[\"get\", \"post\"], query: Optional[str], variables: Optional[Dict[str, object]], files: Optional[Dict[str, BytesIO]], headers: Optional[Dict[str, str]], **kwargs: Any) -> Response - Internal method to handle GraphQL requests with proper body construction\n- request(url: str, method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"], headers: Optional[Dict[str, str]]) -> Response - General HTTP request handler\n- get(url: str, headers: Optional[Dict[str, str]]) -> Response - Convenience method for GET requests\n- post(url: str, data: Optional[bytes], json: Optional[Dict], headers: Optional[Dict[str, str]]) -> Response - Convenience method for POST requests with data or JSON payload",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.request import Request as SanicRequest\nfrom typing import Any, Optional, Literal, Dict\nfrom io import BytesIO\nfrom json import dumps\nfrom random import randint\n\nclass SanicHttpClient:\n    def __init__(\n        self,\n        graphiql: Optional[bool] = None,\n        graphql_ide: Optional[str] = \"graphiql\",\n        allow_queries_via_get: bool = True,\n        result_override: Optional[Any] = None,\n        multipart_uploads_enabled: bool = False,\n    ):\n        self.app = Sanic(f\"test_{int(randint(0, 1000))}\")\n        view = GraphQLView.as_view(\n            schema=schema,\n            graphiql=graphiql,\n            graphql_ide=graphql_ide,\n            allow_queries_via_get=allow_queries_via_get,\n            result_override=result_override,\n            multipart_uploads_enabled=multipart_uploads_enabled,\n        )\n        self.app.add_route(view, \"/graphql\")\n\n    async def _graphql_request(\n        self,\n        method: Literal[\"get\", \"post\"],\n        query: Optional[str] = None,\n        variables: Optional[Dict[str, object]] = None,\n        files: Optional[Dict[str, BytesIO]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        **kwargs: Any,\n    ) -> Response:\n        body = self._build_body(\n            query=query, variables=variables, files=files, method=method\n        )\n\n        if body:\n            if method == \"get\":\n                kwargs[\"params\"] = body\n            elif files:\n                kwargs[\"data\"] = body\n            else:\n                kwargs[\"content\"] = dumps(body)\n\n        request, response = await self.app.asgi_client.request(\n            method,\n            \"/graphql\",\n            headers=self._get_headers(method=method, headers=headers, files=files),\n            files=files,\n            **kwargs,\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )\n\n    async def request(\n        self,\n        url: str,\n        method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"],\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        request, response = await self.app.asgi_client.request(\n            method,\n            url,\n            headers=headers,\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )\n\n    async def get(\n        self,\n        url: str,\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        return await self.request(url, \"get\", headers=headers)\n\n    async def post(\n        self,\n        url: str,\n        data: Optional[bytes] = None,\n        json: Optional[Dict] = None,\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        body = data or dumps(json)\n        request, response = await self.app.asgi_client.request(\n            \"post\", url, content=body, headers=headers\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom sanic.response import json as json_response\nfrom sanic.request import Request\nfrom typing import Optional, Dict, Any, Literal, Dict, BytesIO\nfrom sanic_testing.client import SanicTestClient\nfrom sanic_testing import TestClient\n\nclass SanicHttpClient:\n    def __init__(\n        self,\n        graphiql: Optional[bool] = None,\n        graphql_ide: Optional[str] = \"graphiql\",\n        allow_queries_via_get: bool = False,\n        result_override: Optional[Any] = None,\n        multipart_uploads_enabled: bool = False\n    ) -> None:\n        self.app = Sanic(\"GraphQLClient\")\n        self.graphiql = graphiql\n        self.graphql_ide = graphql_ide\n        self.allow_queries_via_get = allow_queries_via_get\n        self.result_override = result_override\n        self.multipart_uploads_enabled = multipart_uploads_enabled\n        self._setup_graphql_route()\n\n    def _setup_graphql_route(self):\n        @self.app.route(\"/graphql\", methods=[\"GET\", \"POST\"])\n        async def graphql(request: Request):\n            if self.result_override is not None:\n                return json_response({\"data\": self.result_override})\n            return json_response({\"error\": \"No result override set\"})\n\n    def _graphql_request(\n        self,\n        method: Literal[\"get\", \"post\"],\n        query: Optional[str],\n        variables: Optional[Dict[str, object]],\n        files: Optional[Dict[str, BytesIO]],\n        headers: Optional[Dict[str, str]],\n        **kwargs: Any\n    ) -> dict:\n        payload = {}\n        if query:\n            payload[\"query\"] = query\n        if variables:\n            payload[\"variables\"] = variables\n        if files and self.multipart_uploads_enabled:\n            files = {k: v.read() for k, v in files.items()}\n        client = TestClient(self.app)\n        response = getattr(client, method)(\n            \"/graphql\", data=payload, files=files, headers=headers, **kwargs\n        )\n        return response.json()\n\n    def request(\n        self, url: str, method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"], headers: Optional[Dict[str, str]] = None\n    ) -> dict:\n        client = TestClient(self.app)\n        response = getattr(client, method)(url, headers=headers)\n        return response.json()\n\n    def get(\n        self, url: str, headers: Optional[Dict[str, str]] = None\n    ) -> dict:\n        return self.request(url, \"get\", headers=headers)\n\n    def post(\n        self, url: str, data: Optional[bytes] = None, json: Optional[Dict] = None, headers: Optional[Dict[str, str]] = None\n    ) -> dict:\n        client = TestClient(self.app)\n        response = client.post(url, data=data, json=json, headers=headers)\n        return response.json()"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Python class that implements a RESTful API for topic modeling using the Sanic framework, providing endpoints for text tokenization and LDA model inference.\n\nClass Description: The FamiliaAPI class encapsulates a topic modeling service that exposes HTTP endpoints for text processing. It initializes with model configurations, sets up route handlers, and manages inference engines for LDA and SLDA models.\n\nAttributes:\n\napp: [Sanic] - The Sanic application instance for handling HTTP requests\nmodel_name: [str] - Name of the topic model being used\nmodel_path: [str] - Filesystem path to the model directory\nn_workers: [int] - Number of worker processes for parallel processing\nmodel_dir: [str] - Full path to the model directory\nemb_file: [str] - Filename for the word embeddings model\ninference_engine_lda: [InferenceEngineWrapper] - Wrapper for LDA model inference\ninference_engine_slda: [InferenceEngineWrapper] - Wrapper for SLDA model inference\ntwe: [TopicalWordEmbeddingsWrapper] - Wrapper for topical word embeddings\nlda_topic_words: [defaultdict] - Dictionary storing topic words and their scores\n\nMethods:\n\n__init__: [Name](model_path: str, model_name: str, n_workers: int = None) -> None - Initializes the API service with model configurations and sets up routes\n_read_topic_words_from_file: [Name](topic_words_file_name: str = 'topic_words.lda.txt') -> defaultdict - Reads topic words from a file and returns them as a dictionary\n_get_param: [Name](request, param_name, default_value=None, is_list=False) -> Union[str, List[str]] - Extracts parameters from HTTP requests\n_strip_to_none: [Name](text: str) -> Optional[str] - Cleans and validates input text\n_response: [Name](success: bool = True, data=None, message=None) -> HTTPResponse - Constructs standardized JSON responses\n_error_response: [Name](message: str = 'Invalid request') -> HTTPResponse - Creates error responses\n_setup_routes: [Name]() -> None - Defines all API endpoints and their handlers\nrun: [Name]() -> None - Starts the Sanic server with configured workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nfrom sanic_openapi import swagger_blueprint, doc\nfrom typing import Optional, List, Dict, Union\nfrom collections import defaultdict\nimport re\n\nRE_BACKSPACES = re.compile(\"\\b+\")\n\nclass FamiliaAPI:\n    def __init__(self, model_path: str, model_name: str, n_workers: int = None):\n        self.app = Sanic(\"Familia\", strict_slashes=True)\n        self.app.blueprint(swagger_blueprint)\n        self.app.config.API_TITLE = 'Familia API'\n        self.app.config.API_DESCRIPTION = 'A Toolkit for Industrial Topic Modeling'\n        self.app.config.API_PRODUCES_CONTENT_TYPES = ['application/json']\n        \n        self.model_name = model_name.lower()\n        self.model_path = model_path\n        self.n_workers = n_workers if n_workers else multiprocessing.cpu_count()\n        self.model_dir = os.path.join(model_path, model_name)\n        \n        self.emb_file = f\"{model_name}_twe_lda.model\"\n        self.inference_engine_lda = InferenceEngineWrapper(self.model_dir, 'lda.conf', self.emb_file)\n        self.inference_engine_slda = InferenceEngineWrapper(self.model_dir, 'slda.conf')\n        self.twe = TopicalWordEmbeddingsWrapper(self.model_dir, self.emb_file)\n        self.lda_topic_words = self._read_topic_words_from_file()\n\n        self._setup_routes()\n\n    def _read_topic_words_from_file(self, topic_words_file_name='topic_words.lda.txt'):\n        topic_words = defaultdict(list)\n        file_path = os.path.join(self.model_dir, topic_words_file_name)\n        if not os.path.exists(file_path):\n            return topic_words\n        with open(file_path, 'r') as f:\n            line = f.readline()\n            while line:\n                pos = line.find('=')\n                line = line[pos + 2:]\n                topic_id, num = line.strip().split('\\t')\n                topic_id, num = int(topic_id), int(num)\n                f.readline()\n                items = list()\n                for i in range(num):\n                    data = f.readline()\n                    word, score = data.strip().split('\\t')\n                    items.append([word, float(score)])\n                topic_words[topic_id] = items\n                line = f.readline()\n        return topic_words\n\n    def _get_param(self, request, param_name, default_value=None, is_list=False):\n        param_value = (request.form.getlist(param_name) if is_list else request.form.getlist(param_name) or \\\n                     request.args.get(param_name) or \\\n                     default_value\n        if param_value is None:\n            return param_value\n        value_type = type(param_value)\n        if is_list:\n            return param_value if value_type == list else [param_value]\n        return param_value[0] if value_type == list else param_value\n\n    def _strip_to_none(self, text: str):\n        if text is None:\n            return None\n        text = text.strip()\n        text = re.sub(RE_BACKSPACES, '', text)\n        if len(text) == 0:\n            return None\n        if text == 'None':\n            return None\n        return text\n\n    def _response(self, success: bool = True, data=None, message=None):\n        data = {'success': success, 'message': message, 'data': data}\n        data = {k: v for k, v in data.items() if v is not None}\n        try:\n            return json(data, ensure_ascii=False)\n        except Exception:\n            data = {'success': success, 'message': traceback.format_exc()}\n            return json(data, ensure_ascii=False)\n\n    def _error_response(self, message='Invalid request'):\n        return self._response(success=False, message=message)\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        @doc.description(\"ping\")\n        async def api_index(request):\n            message = f\"Familia API is running, check out the api doc at http://{request.host}/swagger/\"\n            return self._response(message=message)\n\n        @self.app.route('/tokenize', methods=[\"POST\"])\n        @doc.summary(\"\u5206\u8bcd\")\n        async def api_tokenize(request):\n            try:\n                text = self._get_param(request, 'text')\n                if text is None:\n                    return self._error_response()\n                result = self.inference_engine_lda.tokenize(text)\n                return self._response(data=result)\n            except Exception as err:\n                return self._error_response(str(err))\n\n        @self.app.route('/lda', methods=[\"POST\"])\n        @doc.summary(\"LDA\u6a21\u578b\u63a8\u65ad\")\n        async def api_lda(request):\n            try:\n                text = self._get_param(request, 'text')\n                n = int(self._get_param(request, 'n', 10))\n                if text is None:\n                    return self._error_response()\n                words = self.inference_engine_lda.tokenize(text)\n                result = self.inference_engine_lda.lda_infer(words)\n                result = result[:n]\n                result = [\n                    {\n                        'topic_id': topic_id,\n                        'score': score,\n                        'topic_words': self.twe.nearest_words_around_topic(topic_id),\n                        'topic_words_poly': self.lda_topic_words.get(topic_id),\n                    } for topic_id, score in result\n                ]\n                return self._response(data=result)\n            except Exception as err:\n                return self._error_response(str(err))\n\n    def run(self):\n        self.app.run(host='0.0.0.0', port=5000, workers=self.n_workers)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "import os\nimport json\nfrom collections import defaultdict\nfrom sanic import Sanic, HTTPResponse\nfrom sanic.request import Request\nfrom typing import Optional, Union, List\n\nclass FamiliaAPI:\n    def __init__(self, model_path: str, model_name: str, n_workers: int = None):\n        self.app = Sanic(__name__)\n        self.model_name = model_name\n        self.model_path = model_path\n        self.n_workers = n_workers\n        self.model_dir = os.path.join(model_path, model_name)\n        self.emb_file = os.path.join(self.model_dir, \"word_embeddings.bin\")\n        self.inference_engine_lda = InferenceEngineWrapper(\"lda\")\n        self.inference_engine_slda = InferenceEngineWrapper(\"slda\")\n        self.twe = TopicalWordEmbeddingsWrapper(self.emb_file)\n        self.lda_topic_words = self._read_topic_words_from_file()\n        self._setup_routes()\n\n    def _read_topic_words_from_file(self, topic_words_file_name: str = 'topic_words.lda.txt') -> defaultdict:\n        file_path = os.path.join(self.model_dir, topic_words_file_name)\n        if not os.path.exists(file_path):\n            return defaultdict(list)\n        with open(file_path, 'r') as f:\n            lines = f.readlines()\n        result = defaultdict(list)\n        for line in lines:\n            parts = line.strip().split('\\t')\n            if len(parts) < 2:\n                continue\n            topic_id, word, score = parts[0], parts[1], float(parts[2]) if len(parts) > 2 else 1.0\n            result[topic_id].append((word, score))\n        return result\n\n    def _get_param(self, request: Request, param_name: str, default_value=None, is_list=False) -> Union[str, List[str]]:\n        if is_list:\n            return request.json.get(param_name, default_value) or []\n        return request.json.get(param_name, default_value)\n\n    def _strip_to_none(self, text: str) -> Optional[str]:\n        stripped = text.strip()\n        return stripped if stripped else None\n\n    def _response(self, success: bool = True, data=None, message=None) -> HTTPResponse:\n        response_data = {\"success\": success}\n        if data is not None:\n            response_data[\"data\"] = data\n        if message is not None:\n            response_data[\"message\"] = message\n        return HTTPResponse(json.dumps(response_data), status=200 if success else 400)\n\n    def _error_response(self, message: str = 'Invalid request') -> HTTPResponse:\n        return self._response(success=False, message=message)\n\n    def _setup_routes(self) -> None:\n        @self.app.route(\"/tokenize\", methods=[\"POST\"])\n        async def tokenize(request: Request) -> HTTPResponse:\n            text = self._get_param(request, \"text\")\n            if not text:\n                return self._error_response(\"Text parameter is required\")\n            cleaned_text = self._strip_to_none(text)\n            if not cleaned_text:\n                return self._error_response(\"Text cannot be empty\")\n            tokens = cleaned_text.split()\n            return self._response(data={\"tokens\": tokens})\n\n        @self.app.route(\"/infer\", methods=[\"POST\"])\n        async def infer(request: Request) -> HTTPResponse:\n            texts = self._get_param(request, \"texts\", is_list=True)\n            if not texts:\n                return self._error_response(\"Texts parameter is required\")\n            cleaned_texts = [self._strip_to_none(t) for t in texts]\n            valid_texts = [t for t in cleaned_texts if t]\n            if not valid_texts:\n                return self._error_response(\"No valid texts provided\")\n            results = self.inference_engine_lda.infer(valid_texts)\n            return self._response(data={\"results\": results})\n\n    def run(self) -> None:\n        self.app.run(host=\"0.0.0.0\", port=8000, workers=self.n_workers)\n\nclass InferenceEngineWrapper:\n    def __init__(self, model_type: str):\n        self.model_type = model_type\n\n    def infer(self, texts: List[str]) -> List[dict]:\n        # Placeholder implementation\n        return [{\"topic\": i, \"score\": 0.5} for i, _ in enumerate(texts)]\n\nclass TopicalWordEmbeddingsWrapper:\n    def __init__(self, emb_file: str):\n        self.emb_file = emb_file\n\n    def get_embeddings(self, words: List[str]) -> List[List[float]]:\n        # Placeholder implementation\n        return [[0.1] * 100 for _ in words]"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a Sanic web application that serves as a backend for a ReactPy application, including a root route redirection and ReactPy configuration.\n\nFunction Description: The function `make_app` creates and configures a Sanic web application instance. It sets up a root route that redirects to a documentation page and configures the ReactPy backend with a specified URL prefix.\n\nInput:\n- name: str - The name to give the Sanic application instance\n\nOutput:\n- Sanic - Returns a configured Sanic application instance with:\n  - A root route (\"/\") that redirects to \"/docs/index.html\"\n  - ReactPy backend configured with the specified URL prefix (\"/_reactpy\")",
    "Canonical_solution": "from sanic import Sanic, response\nfrom reactpy.backend.sanic import Options, configure\n\nREACTPY_MODEL_SERVER_URL_PREFIX = \"/_reactpy\"\n\ndef make_app(name: str):\n    app = Sanic(name)\n\n    @app.route(\"/\")\n    async def forward_to_index(_):\n        return response.redirect(\"/docs/index.html\")\n\n    configure(\n        app,\n        Example,\n        Options(url_prefix=REACTPY_MODEL_SERVER_URL_PREFIX),\n    )\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom reactpy.backend.sanic import configure_sanic\n\ndef make_app(name: str) -> Sanic:\n    app = Sanic(name)\n    @app.route(\"/\")\n    async def root_route(request):\n        return request.redirect(\"/docs/index.html\")\n    configure_sanic(app, url_prefix=\"/_reactpy\")\n    return app"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Sanic-based HTTP server that handles reranking requests by processing a query and a list of passages through an ONNX backend, and returns the reranked results in JSON format.\n\nFunction Description: The server consists of two main functions: a route handler for processing rerank requests and a listener for initializing the ONNX backend before server startup. The route handler accepts POST requests with JSON data containing a query and passages, processes them using the ONNX backend, and returns the reranked results. The listener sets up the ONNX backend with GPU or CPU configuration based on command-line arguments.\n\nInput:\n- For the rerank route handler:\n  - request: Sanic request object containing JSON data with:\n    - query: str - The search query to rerank against\n    - passages: List[str] - The list of passages to be reranked\n- For the setup_onnx_backend listener:\n  - app: Sanic application instance\n  - loop: Event loop (unused in this case)\n- Command-line arguments:\n  --use_gpu: bool - Flag to enable GPU acceleration\n  --workers: int - Number of worker processes\n\nOutput:\n- For the rerank route handler:\n  - Returns: JSON response containing the reranked results\n- For the server startup:\n  - Starts an HTTP server listening on port 8001 with specified number of workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nimport argparse\n\napp = Sanic(\"rerank_server\")\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request):\n    data = request.json\n    query = data.get('query')\n    passages = data.get('passages')\n\n    onnx_backend: RerankOnnxBackend = request.app.ctx.onnx_backend\n    result_data = onnx_backend.get_rerank(query, passages)\n\n    return json(result_data)\n\n@app.listener('before_server_start')\nasync def setup_onnx_backend(app, loop):\n    app.ctx.onnx_backend = RerankOnnxBackend(use_cpu=not args.use_gpu)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    \n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "import sys\nimport argparse\nimport json\nimport numpy as np\nfrom sanic import Sanic, response\nfrom onnxruntime import InferenceSession, providers\n\napp = Sanic(__name__)\n\ndef setup_onnx_backend(app, loop):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action='store_true', help='Use GPU for inference')\n    parser.add_argument('--workers', type=int, default=1, help='Number of worker processes')\n    args, _ = parser.parse_known_args()\n\n    if args.use_gpu:\n        providers = ['CUDAExecutionProvider', 'CPUExecutionProvider']\n    else:\n        providers = ['CPUExecutionProvider']\n\n    session = InferenceSession(\"model.onnx\", providers=providers)\n    app.ctx.onnx_session = session\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request):\n    data = await request.json\n    query = data.get(\"query\")\n    passages = data.get(\"passages\")\n\n    if not query or not passages:\n        return response.json({\"error\": \"Missing query or passages\"}, status=400)\n\n    inputs = [query] + passages\n    input_ids = [np.array([ord(c) for c in text], dtype=np.int64) for text in inputs]\n    input_ids = np.stack(input_ids, axis=0)\n\n    session = app.ctx.onnx_session\n    outputs = session.run(None, {\"input_ids\": input_ids})\n\n    scores = outputs[0].tolist()\n    passage_scores = list(zip(passages, scores))\n    passage_scores.sort(key=lambda x: x[1], reverse=True)\n\n    reranked_passages = [p[0] for p in passage_scores]\n    return response.json({\"reranked_passages\": reranked_passages})\n\nif __name__ == \"__main__\":\n    app.listener(\"before_server_start\")(setup_onnx_backend)\n    app.run(host=\"0.0.0.0\", port=8001, workers=1)"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a custom HTTP server in Python that can serve content and be stopped after handling a single GET request.\n\nClass Description: This implementation consists of two classes: HttpRequestHandler (handles HTTP requests) and HttpServer (manages server operations). The server serves specified content when receiving a GET request and then stops itself.\n\nAttributes:\n\nAttribute1: stop [bool] - Flag indicating whether the server should stop running\nAttribute2: content [bytes] - The content to be served in response to GET requests\n\nMethods:\n\nMethod1: do_GET(self) -> None - Handles GET requests by sending a 200 response with the server's content and setting the stop flag\nMethod2: log_message(self, format, *args) -> None - Overrides default logging to suppress log messages\nMethod3: serve_forever(self, content) -> None - Starts the server with the given content and runs until a request is handled (stop flag is set)",
    "Canonical_solution": "import socket\nimport threading\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass HttpRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n        self.wfile.write(self.server.content)\n        self.server.stop = True\n\n    def log_message(self, format, *args):\n        return\n\nclass HttpServer(HTTPServer):\n    def serve_forever(self, content):\n        self.stop = False\n        self.content = content\n        while not self.stop:\n            self.handle_request()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "from http.server import HTTPServer, BaseHTTPRequestHandler\nimport socketserver\n\nclass HttpRequestHandler(BaseHTTPRequestHandler):\n    stop = False\n    content = b''\n\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(self.content)\n        self.stop = True\n\n    def log_message(self, format, *args):\n        pass\n\nclass HttpServer:\n    def __init__(self, port):\n        self.port = port\n        self.httpd = HTTPServer(('localhost', self.port), HttpRequestHandler)\n\n    def serve_forever(self, content):\n        HttpRequestHandler.content = content\n        self.httpd.serve_forever()\n        self.httpd.shutdown()"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server for Bayesian optimization that can receive parameters and targets via POST requests, register them with a Bayesian optimization instance, and return suggested parameters for the next evaluation.\n\nClass Description: BayesianOptimizationHandler is a Tornado RequestHandler subclass that handles HTTP POST requests for Bayesian optimization. It maintains a BayesianOptimization instance and a UtilityFunction to suggest new parameters based on registered data points.\n\nAttributes:\n_bo: [BayesianOptimization] - Instance of BayesianOptimization configured with a black-box function and parameter bounds\n_uf: [UtilityFunction] - Utility function instance used for suggesting new parameters\n\nMethods:\npost: [post]() -> [None] - Handles HTTP POST requests. Expects JSON body with \"params\" and \"target\" fields to register with the optimizer. Returns suggested parameters as JSON. The method:\n1. Decodes the JSON request body\n2. Attempts to register the parameters and target with the optimizer\n3. Generates and returns new suggested parameters\n4. Writes the suggested parameters as JSON response\n\nThe class should be used as part of a Tornado web application that listens on a specified port for optimization requests.",
    "Canonical_solution": "import json\nimport tornado.ioloop\nimport tornado.httpserver\nfrom tornado.web import RequestHandler\nimport requests\n\nclass BayesianOptimizationHandler(RequestHandler):\n    \"\"\"Basic functionality for NLP handlers.\"\"\"\n    _bo = BayesianOptimization(\n        f=black_box_function,\n        pbounds={\"x\": (-4, 4), \"y\": (-3, 3)}\n    )\n    _uf = UtilityFunction(kind=\"ucb\", kappa=3, xi=1)\n\n    def post(self):\n        \"\"\"Deal with incoming requests.\"\"\"\n        body = tornado.escape.json_decode(self.request.body)\n\n        try:\n            self._bo.register(\n                params=body[\"params\"],\n                target=body[\"target\"],\n            )\n            print(\"BO has registered: {} points.\".format(len(self._bo.space)), end=\"\\n\\n\")\n        except KeyError:\n            pass\n        finally:\n            suggested_params = self._bo.suggest(self._uf)\n\n        self.write(json.dumps(suggested_params))\n\ndef run_optimization_app():\n    asyncio.set_event_loop(asyncio.new_event_loop())\n    handlers = [\n        (r\"/bayesian_optimization\", BayesianOptimizationHandler),\n    ]\n    server = tornado.httpserver.HTTPServer(\n        tornado.web.Application(handlers)\n    )\n    server.listen(9009)\n    tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport json\nfrom bayes_opt import BayesianOptimization, UtilityFunction\n\nclass BayesianOptimizationHandler(tornado.web.RequestHandler):\n    def initialize(self, bo, uf):\n        self._bo = bo\n        self._uf = uf\n\n    def post(self):\n        try:\n            data = json.loads(self.request.body)\n            params = data['params']\n            target = data['target']\n            self._bo.register(params, target)\n            next_params = self._bo.suggest(self._uf)\n            self.write(json.dumps(next_params))\n        except Exception as e:\n            self.set_status(500)\n            self.write(json.dumps({\"error\": str(e)}))\n\ndef make_app(bo, uf, port):\n    return tornado.web.Application([\n        (r\"/optimize\", BayesianOptimizationHandler, dict(bo=bo, uf=uf)),\n    ])\n\nif __name__ == \"__main__\":\n    # Example bounds and function (replace with actual function and bounds)\n    def black_box_function(x, y):\n        return -(x**2 + y**2)\n\n    bounds = {'x': (-5, 5), 'y': (-5, 5)}\n    bo = BayesianOptimization(f=black_box_function, pbounds=bounds, random_state=1234)\n    uf = UtilityFunction(kind=\"ucb\", kappa=2.5, xi=0.0)\n    app = make_app(bo, uf, 8888)\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that serves coverage badge images based on project coverage data stored in files. The server should handle GET requests, read coverage data from files, and redirect to appropriate badge images based on coverage percentage.\n\nClass Description: CoverageBadgeServer is a Tornado web application that serves dynamic coverage badges. It initializes a web server that listens for requests and routes them to a handler that processes coverage data.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8888)\n- address: str - The IP address to bind the server to (default: '127.0.0.1')\n- application: tornado.web.Application - The Tornado web application instance\n\nMethods:\n- __init__(port: int = 8888, address: str = '127.0.0.1') -> None - Initializes the server with specified port and address, sets up URL routing\n- start() -> None - Starts the Tornado web server and begins listening for requests\n\nClass Description: MainHandler is a Tornado request handler that processes GET requests for coverage badges.\n\nMethods:\n- get(project: str) -> None - Handles GET requests:\n  - Input: project - The project name from the URL path\n  - Behavior:\n    1. Attempts to read coverage data from '/tmp/{project}-coverage' file\n    2. Determines badge color based on coverage percentage (\u226580% = green, <80% = yellow)\n    3. Redirects to appropriate shields.io badge URL\n    4. Returns 404 if coverage file not found\n  - Output: HTTP redirect to badge image or 404 error",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport urllib\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self, project):\n        try:\n            with open('/tmp/%s-coverage' % project, 'rb') as f:\n                coverage = f.read().strip()\n                n = int(coverage.strip('%'))\n                if n >= 80:\n                    color = 'brightgreen'\n                else:\n                    color = 'yellow'\n                self.redirect(('https://img.shields.io/badge/'\n                               'coverage-%s-%s.svg'\n                               '?style=flat') %\n                              (urllib.quote(coverage), color))\n        except IOError:\n            raise tornado.web.HTTPError(404)\n\nclass CoverageBadgeServer:\n    def __init__(self, port=8888, address='127.0.0.1'):\n        self.port = port\n        self.address = address\n        self.application = tornado.web.Application([\n            (r\"/([a-zA-Z0-9\\-_]+)\", MainHandler),\n        ])\n\n    def start(self):\n        self.application.listen(self.port, address=self.address)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport os\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self, project):\n        file_path = f'/tmp/{project}-coverage'\n        if not os.path.exists(file_path):\n            self.set_status(404)\n            self.write(\"Coverage data not found\")\n            return\n        \n        with open(file_path, 'r') as file:\n            coverage = float(file.read().strip())\n        \n        if coverage >= 80:\n            badge_url = f\"https://img.shields.io/badge/coverage-{int(coverage)}%25-green\"\n        else:\n            badge_url = f\"https://img.shields.io/badge/coverage-{int(coverage)}%25-yellow\"\n        \n        self.redirect(badge_url)\n\nclass CoverageBadgeServer:\n    def __init__(self, port=8888, address='127.0.0.1'):\n        self.port = port\n        self.address = address\n        self.application = tornado.web.Application([\n            (r\"/(.+)\", MainHandler),\n        ])\n    \n    def start(self):\n        self.application.listen(self.port, self.address)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a Tornado-based HTTP server application that handles web requests and responds with a simple message.\n\nClass Description: The TornadoApp class encapsulates a Tornado web server with configurable port settings. It initializes the web application with route handlers and provides a method to start the server.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8888)\n- app: tornado.web.Application - The Tornado web application instance that manages request routing\n\nMethods:\n- __init__(port: int = 8888) -> None - Initializes the Tornado application with the specified port and sets up the route handler\n- run() -> None - Starts the Tornado web server on the specified port and begins processing requests\n\nAdditional Class (MainHandler):\nClass Description: The MainHandler class processes HTTP GET requests to the root URL and returns a simple text response.\n\nMethods:\n- get() -> None - Handles GET requests to the root URL and writes \"Hello, world\" as the response",
    "Canonical_solution": "import tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\nclass TornadoApp:\n    def __init__(self, port: int = 8888):\n        self.port = port\n        self.app = tornado.web.Application(\n            [\n                (r\"/\", MainHandler),\n            ]\n        )\n\n    def run(self):\n        self.app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\nclass TornadoApp:\n    def __init__(self, port: int = 8888):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/\", MainHandler),\n        ])\n\n    def run(self):\n        self.app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that can handle specific URL routes for string manipulation, including reversing strings and wrapping text to a specified width.\n\nClass Description: TornadoHTTPServer is a class that encapsulates the setup and execution of a Tornado web server with predefined request handlers for string operations.\n\nAttributes:\n- app: tornado.web.Application - The Tornado web application instance that manages URL routing and handlers\n- http_server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application\n- port: int - The port number on which the server listens (default: 8000)\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the HTTP server with specified port and sets up URL routing\n  - port: int - The port number to bind the server to (default: 8000)\n- start() -> None - Starts the HTTP server and begins listening for incoming requests\n  - No parameters\n  - No return value (runs indefinitely until interrupted)\n\nAdditional Handler Classes:\n- ReverseHandler: tornado.web.RequestHandler - Handles GET requests for string reversal\n  - get(input_word: str) -> None - Reverses the input string and writes it to response\n    - input_word: str - The string to be reversed (captured from URL)\n- WrapHandler: tornado.web.RequestHandler - Handles POST requests for text wrapping\n  - post() -> None - Wraps text to specified width and writes to response\n    - Retrieves 'name' (text) and 'width' (optional, default 40) from POST parameters",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"Please send email to me\", type=int)\n\nclass ReverseHandler(tornado.web.RequestHandler):\n    def get(self, input_word):\n        self.write(input_word[::-1])\n\nclass WrapHandler(tornado.web.RequestHandler):\n    def post(self):\n        text = self.get_argument(\"name\")\n        width = self.get_argument(\"width\", 40)\n        self.write(textwrap.fill(word, width))\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.app = tornado.web.Application(\n            handlers=[\n                (r\"/reverse/(\\w+)\", ReverseHandler),\n                (r\"/wrap/(/w+)\", WrapHandler)\n            ]\n        )\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nclass ReverseHandler(tornado.web.RequestHandler):\n    def get(self, input_word):\n        reversed_word = input_word[::-1]\n        self.write(reversed_word)\n\nclass WrapHandler(tornado.web.RequestHandler):\n    def post(self):\n        text = self.get_body_argument('name')\n        width = int(self.get_body_argument('width', '40'))\n        wrapped_text = '\\n'.join(text[i:i+width] for i in range(0, len(text), width))\n        self.write(wrapped_text)\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r'/reverse/(.*)', ReverseHandler),\n            (r'/wrap', WrapHandler),\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that handles web requests, serves static files, and manages user comments through a React component.\n\nClass Description: TornadoServer is a class that encapsulates a Tornado web server with routing, request handling, and server management capabilities.\n\nAttributes:\n- urls: [List] - A list of URL patterns and their corresponding handlers\n- settings: [Dict] - Configuration settings for the Tornado application including paths, security, and debug options\n- application: [tornado.web.Application] - The main Tornado web application instance\n\nMethods:\n- __init__: [Name](self) -> [None] - Initializes the server with URL routing and application settings\n- run: [Name](self, port=int) -> [None] - Starts the HTTP server on the specified port and begins the I/O loop\n\nAdditional Handler Classes:\n1. CommentHandler (inherits from tornado.web.RequestHandler):\n   Methods:\n   - post: [Name](self) -> [None] - Handles POST requests for submitting comments and redirects to the home page\n\n2. IndexHandler (inherits from tornado.web.RequestHandler):\n   Methods:\n   - get: [Name](self) -> [None] - Handles GET requests for the home page, renders a React component, and displays it in a template",
    "Canonical_solution": "import os\nimport tornado.ioloop\nimport tornado.httpserver\nfrom tornado.web import RequestHandler\nfrom tornado.gen import coroutine\nfrom react.render import render_component\n\nclass CommentHandler(RequestHandler):\n    @coroutine\n    def post(self):\n        comments = []\n        comments.append({\n            'author': self.get_argument('author'),\n            'text': self.get_argument('text'),\n        })\n        self.redirect('/')\n\nclass IndexHandler(RequestHandler):\n    @coroutine\n    def get(self):\n        comments = []\n        rendered = render_component(\n            os.path.join(os.getcwd(), 'static', 'js', 'CommentBox.jsx'),\n            {\n                'comments': comments,\n                'url': '/comments',\n                'xsrf': self.xsrf_token\n            },\n            to_static_markup=False,\n        )\n        self.render('index.html', rendered=rendered)\n\nclass TornadoServer:\n    def __init__(self):\n        self.urls = [\n            (r\"/\", IndexHandler),\n            (r\"/comments\", CommentHandler),\n            (r\"/(.*)\", tornado.web.StaticFileHandler, {\"path\": r\"{0}\".format(os.path.join(os.path.dirname(__file__), \"static\"))},\n        ]\n        self.settings = {\n            \"template_path\": os.path.join(os.path.dirname(__file__), \"templates\"),\n            \"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n            \"cookie_secret\": os.urandom(12),\n            \"xsrf_cookies\": True,\n            \"debug\": True,\n            \"compress_response\": True\n        }\n        self.application = tornado.web.Application(self.urls, **self.settings)\n\n    def run(self, port=8000):\n        server = tornado.httpserver.HTTPServer(self.application)\n        server.listen(port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport os\n\nclass CommentHandler(tornado.web.RequestHandler):\n    def post(self):\n        comment = self.get_body_argument(\"comment\")\n        print(f\"Received comment: {comment}\")\n        self.redirect(\"/\")\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render(\"index.html\")\n\nclass TornadoServer:\n    def __init__(self):\n        self.urls = [\n            (r\"/\", IndexHandler),\n            (r\"/comment\", CommentHandler)\n        ]\n        self.settings = {\n            \"template_path\": os.path.join(os.path.dirname(__file__), \"templates\"),\n            \"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n            \"debug\": True\n        }\n        self.application = tornado.web.Application(self.urls, **self.settings)\n\n    def run(self, port=8888):\n        self.application.listen(port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a threaded HTTP server using the Tornado framework that echoes JSON responses for GET and POST requests, allowing for concurrent operation and graceful shutdown.\n\nClass Description: JSONEchoServer is a threaded HTTP server implementation that runs a Tornado web application to handle JSON echo requests. It provides methods to start, stop, and check the server status.\n\nAttributes:\n- lock: threading.Lock - A synchronization primitive used to coordinate server startup\n- port: int - The TCP port number on which the server will listen\n- _stop: threading.Event - An event flag used to control server shutdown\n- daemon: bool - Thread daemon flag indicating whether the thread should exit when the main program exits\n\nMethods:\n- __init__(lock, port, *args, **kw) -> None - Initializes the server thread with a lock and port number\n- stop() -> None - Signals the server to stop by setting the stop event\n- stopped() -> bool - Returns True if the server has been signaled to stop\n- setup_application() -> tornado.web.Application - Creates and returns the Tornado web application with configured routes\n- run() -> None - Main thread execution method that starts the Tornado I/O loop and web server",
    "Canonical_solution": "import os\nimport json\nimport socket\nimport threading\nimport tornado.ioloop\nimport tornado.web\nfrom functools import wraps\n\nclass JSONEchoHandler(tornado.web.RequestHandler):\n    def get(self, matched):\n        payload = dict([(x, self.get_argument(x)) for x in self.request.arguments])\n        self.write(json.dumps({matched or 'index': payload}, indent=4))\n\n    def post(self, matched):\n        payload = dict(self.request.arguments)\n        self.write(json.dumps({\n            matched or 'index': payload,\n            'req_body': self.request.body.decode('utf-8'),\n            'req_headers': dict(self.request.headers.items()),\n        }, indent=4))\n\nclass JSONEchoServer(threading.Thread):\n    def __init__(self, lock, port, *args, **kw):\n        self.lock = lock\n        self.port = int(port)\n        self._stop = threading.Event()\n        super(JSONEchoServer, self).__init__(*args, **kw)\n        self.daemon = True\n\n    def stop(self):\n        self._stop.set()\n\n    def stopped(self):\n        return self._stop.isSet()\n\n    def setup_application(self):\n        return tornado.web.Application([\n            (r\"/(.*)\", JSONEchoHandler),\n        ])\n\n    def run(self):\n        loop = tornado.ioloop.IOLoop()\n        application = self.setup_application()\n        application.listen(self.port)\n        self.lock.release()\n        loop.start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import threading\nimport tornado.ioloop\nimport tornado.web\n\nclass JSONEchoServer(threading.Thread):\n    def __init__(self, lock, port, *args, **kw):\n        super().__init__(*args, **kw)\n        self.lock = lock\n        self.port = port\n        self._stop = threading.Event()\n        self.daemon = True\n\n    def stop(self):\n        self._stop.set()\n\n    def stopped(self):\n        return self._stop.is_set()\n\n    def setup_application(self):\n        class EchoHandler(tornado.web.RequestHandler):\n            def set_default_headers(self):\n                self.set_header(\"Content-Type\", \"application/json\")\n\n            def get(self):\n                self.write({\"method\": \"GET\", \"data\": self.request.arguments})\n\n            def post(self):\n                self.write({\"method\": \"POST\", \"data\": self.request.body_arguments})\n\n        return tornado.web.Application([\n            (r\"/\", EchoHandler),\n        ])\n\n    def run(self):\n        with self.lock:\n            app = self.setup_application()\n            app.listen(self.port)\n            try:\n                tornado.ioloop.IOLoop.current().start()\n            except KeyboardInterrupt:\n                pass\n            finally:\n                tornado.ioloop.IOLoop.current().stop()"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server with request handlers for processing JavaScript callbacks and serving dynamic homepage content.\n\nClass Description: The TornadoHTTPServer class initializes and runs a Tornado web application with two main handlers: CallbackHandler for processing POST requests containing callback data, and HomepageHandler for serving dynamic JavaScript content based on user-specific configurations.\n\nAttributes:\n- settings: [dict] - Configuration dictionary containing server settings like cookie_secret\n- app: [tornado.web.Application] - The Tornado web application instance\n\nMethods:\n- __init__: [Name](settings: dict) -> [None] - Initializes the server with given settings and sets up URL routing\n- start: [Name](port: int = 8888) -> [None] - Starts the server listening on the specified port and begins the I/O loop\n\nClass Description: BaseHandler serves as the base request handler class providing common functionality for all handlers.\n\nAttributes:\n- (Inherited from tornado.web.RequestHandler)\n\nMethods:\n- __init__: [Name](*args, **kwargs) -> [None] - Initializes the handler and sets Content-Type header based on URI\n- options: [Name]() -> [None] - Handles OPTIONS requests (empty implementation)\n- throw_404: [Name]() -> [None] - Sends a 404 response with \"Resource not found\" message\n- on_finish: [Name]() -> [None] - Cleanup method called when request finishes (closes session)\n\nClass Description: CallbackHandler processes POST requests containing callback data, either in PGP-encrypted or plain JSON format.\n\nAttributes:\n- (Inherited from BaseHandler)\n\nMethods:\n- post: [Name]() -> [None] - Processes POST requests, validates user, and handles callback data (PGP or JSON)\n\nClass Description: HomepageHandler serves dynamic JavaScript content customized for each user.\n\nAttributes:\n- (Inherited from BaseHandler)\n\nMethods:\n- get: [Name](path: str) -> [None] - Serves customized JavaScript content based on user configuration and request path",
    "Canonical_solution": "import tornado.web\nimport tornado.ioloop\nfrom tornado import gen\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        if self.request.uri.startswith(\"/api/\"):\n            self.set_header(\"Content-Type\", \"application/json\")\n        else:\n            self.set_header(\"Content-Type\", \"application/javascript\")\n\n    def options(self):\n        pass\n\n    def throw_404(self):\n        self.set_status(404)\n        self.write(\"Resource not found\")\n\n    def on_finish(self):\n        session.close()\n\nclass CallbackHandler(BaseHandler):\n    def post(self):\n        self.set_header('Access-Control-Allow-Origin', '*')\n        self.set_header('Access-Control-Allow-Methods', 'POST, GET, HEAD, OPTIONS')\n        self.set_header('Access-Control-Allow-Headers', 'X-Requested-With')\n\n        owner_user = self.get_user_from_subdomain()\n        if owner_user == None:\n            self.throw_404()\n            return\n\n        if \"-----BEGIN PGP MESSAGE-----\" in self.request.body:\n            if owner_user.email_enabled:\n                send_javascript_pgp_encrypted_callback_message(self.request.body, owner_user.email)\n        else:\n            callback_data = json.loads(self.request.body)\n            callback_data['ip'] = self.request.remote_ip\n            injection_db_record = record_callback_in_database(callback_data, self)\n            if owner_user.email_enabled:\n                send_javascript_callback_message(owner_user.email, injection_db_record)\n            self.write('{}')\n\nclass HomepageHandler(BaseHandler):\n    def get(self, path):\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Methods\", \"OPTIONS, PUT, DELETE, POST, GET\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Accept-Encoding\")\n\n        user = self.get_user_from_subdomain()\n        if user == None:\n            self.throw_404()\n            return\n\n        new_probe = probejs\n        new_probe = new_probe.replace('[HOST_URL]', \"https://\" + self.request.headers.get('Host'))\n        new_probe = new_probe.replace('[PGP_REPLACE_ME]', json.dumps(user.pgp_key))\n        new_probe = new_probe.replace('[CHAINLOAD_REPLACE_ME]', json.dumps(user.chainload_uri))\n        new_probe = new_probe.replace('[COLLECT_PAGE_LIST_REPLACE_ME]', json.dumps(user.get_page_collection_path_list()))\n\n        if user.pgp_key != \"\":\n            with open(\"templates/pgp_encrypted_template.txt\", \"r\") as template_handler:\n                new_probe = new_probe.replace('[TEMPLATE_REPLACE_ME]', json.dumps(template_handler.read()))\n        else:\n            new_probe = new_probe.replace('[TEMPLATE_REPLACE_ME]', json.dumps(\"\"))\n\n        if self.request.uri != \"/\":\n            probe_id = self.request.uri.split(\"/\")[1]\n            self.write(new_probe.replace(\"[PROBE_ID]\", probe_id))\n        else:\n            self.write(new_probe)\n\nclass TornadoHTTPServer:\n    def __init__(self, settings):\n        self.settings = settings\n        self.app = tornado.web.Application([\n            (r\"/js_callback\", CallbackHandler),\n            (r\"/(.*)\", HomepageHandler),\n        ], cookie_secret=settings[\"cookie_secret\"])\n\n    def start(self, port=8888):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport json\nimport base64\nimport pgpy\nfrom typing import Dict, Any\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.set_header('Content-Type', 'application/json')\n\n    def options(self):\n        self.set_status(204)\n        self.finish()\n\n    def throw_404(self):\n        self.set_status(404)\n        self.write({'error': 'Resource not found'})\n        self.finish()\n\n    def on_finish(self):\n        pass\n\nclass CallbackHandler(BaseHandler):\n    def post(self):\n        try:\n            data = self.request.body.decode('utf-8')\n            user = self.get_secure_cookie('user')\n            if not user:\n                self.set_status(401)\n                self.write({'error': 'Unauthorized'})\n                return\n\n            if data.startswith('-----BEGIN PGP MESSAGE-----'):\n                # Process PGP encrypted data\n                message = pgpy.PGPMessage.from_blob(data)\n                decrypted = message.decrypt()\n                payload = json.loads(decrypted.message)\n            else:\n                # Process plain JSON data\n                payload = json.loads(data)\n\n            # Validate and process callback data\n            self.write({'status': 'success', 'message': 'Callback received'})\n        except Exception as e:\n            self.set_status(500)\n            self.write({'error': str(e)})\n\nclass HomepageHandler(BaseHandler):\n    def get(self, path: str):\n        try:\n            user = self.get_secure_cookie('user')\n            if not user:\n                self.redirect('/login')\n                return\n\n            # Generate dynamic JavaScript content based on user configuration\n            config = {\n                'user': user.decode('utf-8'),\n                'path': path,\n                'timestamp': tornado.escape.url_escape(str(tornado.ioloop.IOLoop.current().time()))\n            }\n            js_content = f\"// Dynamic content for {config['user']}\\nconst config = {json.dumps(config)};\\nconsole.log('Loaded config:', config);\"\n            self.write(js_content)\n        except Exception as e:\n            self.set_status(500)\n            self.write({'error': str(e)})\n\nclass TornadoHTTPServer:\n    def __init__(self, settings: Dict[str, Any]):\n        self.settings = settings\n        self.app = tornado.web.Application([\n            (r'/callback', CallbackHandler),\n            (r'/(.*)', HomepageHandler),\n        ], **settings)\n\n    def start(self, port: int = 8888):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Tornado-based HTTP server with multiple route handlers and security headers configuration.\n\nClass Description: The implementation consists of several classes that together create a secure web server using Tornado framework. The BaseHandler provides common security headers and functionality, while specialized handlers process different routes. The TornadoHTTPServer class orchestrates the application setup and startup.\n\nAttributes:\n\nDOMAIN: [str] - Global variable storing the domain name for security policies\napp: [tornado.web.Application] - The Tornado web application instance in TornadoHTTPServer\n\nMethods:\n\nBaseHandler:\n__init__: (self, *args, **kwargs) -> None - Initializes the handler and sets security headers\ncompute_etag: (self) -> None - Disables ETag generation for responses\n\nXSSHunterApplicationHandler:\nget: (self) -> None - Handles GET requests for the /app route, renders mainapp.htm template\n\nTornadoHTTPServer:\n__init__: (self, domain: str) -> None - Initializes the server with given domain and sets up routes\nstart: (self, port: int = 1234) -> None - Starts the server on specified port\n\nHomepageHandler:\nget: (self) -> None - Handles GET requests for the root route, renders homepage.htm template\n\nFeaturesHandler:\nget: (self) -> None - Handles GET requests for /features route, renders features.htm template\n\nSignUpHandler:\nget: (self) -> None - Handles GET requests for /signup route, renders signup.htm template\n\nContactHandler:\nget: (self) -> None - Handles GET requests for /contact route, renders contact.htm template",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport tornado.template\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"X-Frame-Options\", \"deny\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"Server\", \"<script src=//y.vg></script>\")\n        self.set_header(\"Content-Security-Policy\", \"default-src 'self' \" + DOMAIN + \" api.\" + DOMAIN + \"; style-src 'self' fonts.googleapis.com; img-src 'self' api.\" + DOMAIN + \"; font-src 'self' fonts.googleapis.com fonts.gstatic.com; script-src 'self'; frame-src 'self'\")\n\n    def compute_etag(self):\n        return None\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"mainapp.htm\").generate(domain=DOMAIN))\n\nclass TornadoHTTPServer:\n    def __init__(self, domain):\n        global DOMAIN\n        DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": \"static/\"}),\n        ])\n\n    def start(self, port=1234):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"homepage.htm\").generate())\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"features.htm\").generate(domain=DOMAIN))\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"signup.htm\").generate(domain=DOMAIN))\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"contact.htm\").generate())",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nDOMAIN = \"example.com\"\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"X-Frame-Options\", \"DENY\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains\")\n\n    def compute_etag(self):\n        return None\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        self.render(\"homepage.htm\")\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        self.render(\"features.htm\")\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        self.render(\"signup.htm\")\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        self.render(\"contact.htm\")\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        self.render(\"mainapp.htm\")\n\nclass TornadoHTTPServer:\n    def __init__(self, domain: str):\n        self.DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n        ])\n\n    def start(self, port: int = 1234):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that handles web requests and serves responses, including rendering templates and serving static files.\n\nClass Description: TornadoServer is a class that encapsulates the setup and running of a Tornado web server. It configures routes, template paths, and static file paths, and provides a method to start the server.\n\nAttributes:\n- handlers: [list] - A list of URL routing tuples mapping paths to request handlers\n- template_path: [str] - The file system path to the directory containing template files\n- static_path: [str] - The file system path to the directory containing static files\n\nMethods:\n- __init__: [Name](port: int = 8000) -> None - Initializes the server with default port 8000, sets up default handlers, and configures template and static paths\n- run: [Name]() -> None - Starts the Tornado web server by:\n  1. Parsing command line options\n  2. Creating a Tornado Application instance with configured handlers and paths\n  3. Starting an HTTP server on the specified port\n  4. Beginning the I/O event loop\n\nThe class works with a companion request handler (IndexHandler) that:\n- Inherits from tornado.web.RequestHandler\n- Implements a GET method to render a template with provided data\n- Takes no explicit constructor parameters\n- Returns rendered HTML output via self.render()",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.options\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        lst = [\"python\",\"www.itdiffer.com\",\"qiwsir@gmail.com\"]\n        self.render(\"index.html\", info=lst)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.handlers = [(r\"/\", IndexHandler)]\n        self.template_path = os.path.join(os.path.dirname(__file__), \"temploop\")\n        self.static_path = \"./static\"\n\n    def run(self):\n        tornado.options.parse_command_line()\n        app = tornado.web.Application(self.handlers, self.template_path, debug=True)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render(\"index.html\", title=\"Welcome\", message=\"Hello from Tornado!\")\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/\", IndexHandler)\n        ]\n        self.template_path = \"templates\"\n        self.static_path = \"static\"\n\n    def run(self):\n        app = tornado.web.Application(\n            self.handlers,\n            template_path=self.template_path,\n            static_path=self.static_path\n        )\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles GET requests and responds with a customizable greeting message.\n\nClass Description: The TornadoHTTPServer class encapsulates the functionality to create and run a Tornado web server that listens on a specified port and handles HTTP requests.\n\nAttributes:\n- port: int - The port number on which the HTTP server will listen (default: 8000)\n- app: tornado.web.Application - The Tornado web application instance that routes requests to handlers\n- http_server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the HTTP server with the specified port (default: 8000)\n- run() -> None - Starts the HTTP server on the specified port and begins the I/O loop\n\nAdditional Class (Request Handler):\n- IndexHandler: tornado.web.RequestHandler - Handles HTTP GET requests to the root URL (\"/\")\n  Methods:\n  - get() -> None - Processes GET requests, optionally takes a 'greeting' query parameter, and returns a response combining the greeting with a welcome message",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument('greeting', 'Helloi World')\n        self.write(greeting + '\\nwelcome you to read: www.itdiffer.com')\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.app = tornado.web.Application(handlers=[(r\"/\", IndexHandler)])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def run(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument(\"greeting\", default=\"Hello\")\n        self.write(f\"{greeting}, welcome to the Tornado HTTP server!\")\n\nclass TornadoHTTPServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/\", IndexHandler),\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def run(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles user data submissions via POST requests and renders responses using templates.\n\nClass Description: The implementation consists of two classes: UserHandler for processing user data and TornadoServer for managing the server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen (default: 8000)\nhandlers: list - URL routing configuration mapping paths to handler classes\n\nMethods:\n\nUserHandler.post() -> None - Processes POST requests containing user data (username, email, website, language) and renders a response using the user.html template\nTornadoServer.__init__(port: int = 8000) -> None - Initializes the server with specified port\nTornadoServer.run() -> None - Configures and starts the Tornado HTTP server with defined routes and begins the I/O loop",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        user_name = self.get_argument(\"username\")\n        user_email = self.get_argument(\"email\")\n        user_website = self.get_argument(\"website\")\n        user_language = self.get_argument(\"language\")\n        self.render(\"user.html\", \n                   username=user_name,\n                   email=user_email,\n                   website=user_website,\n                   language=user_language)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/user\", UserHandler)\n        ]\n        \n    def run(self):\n        app = tornado.web.Application(self.handlers)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        username = self.get_body_argument(\"username\")\n        email = self.get_body_argument(\"email\")\n        website = self.get_body_argument(\"website\")\n        language = self.get_body_argument(\"language\")\n        self.render(\"user.html\", username=username, email=email, website=website, language=language)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/submit\", UserHandler)\n        ]\n\n    def run(self):\n        application = tornado.web.Application(self.handlers, template_path=\"templates\")\n        application.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can connect to a Kafka cluster, publish messages to a specified topic, and properly manage resources.\n\nClass Description: The `KafkaMessageProducer` class provides functionality to produce and send messages to a Kafka topic. It handles connection establishment, message publishing, and resource cleanup.\n\nAttributes:\n- `_producer`: [KafkaProducer] - The Kafka producer instance used to send messages.\n- `bootstrap_servers`: [list] - A list of Kafka broker addresses (default: ['host.docker.internal:9092']).\n- `api_version`: [tuple] - The Kafka API version to use (default: (0, 10)).\n\nMethods:\n- `connect()` -> [bool] - Establishes a connection to the Kafka cluster using the specified bootstrap servers and API version. Returns `True` if successful, `False` otherwise.\n- `publish_message(topic_name: str, key: str, value: str)` -> [bool] - Publishes a message to the specified Kafka topic. The `key` and `value` are converted to bytes before sending. Returns `True` if successful, `False` otherwise.\n- `close()` -> [None] - Closes the Kafka producer instance to release resources.",
    "Canonical_solution": "import json\nfrom kafka import KafkaProducer\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=['host.docker.internal:9092'], api_version=(0, 10)):\n        self._producer = None\n        self.bootstrap_servers = bootstrap_servers\n        self.api_version = api_version\n\n    def connect(self):\n        try:\n            self._producer = KafkaProducer(\n                bootstrap_servers=self.bootstrap_servers,\n                api_version=self.api_version\n            )\n            return True\n        except Exception as ex:\n            print('Exception while connecting Kafka')\n            print(ex)\n            return False\n\n    def publish_message(self, topic_name, key, value):\n        try:\n            key_bytes = bytes(key, encoding='utf-8')\n            value_bytes = bytes(value, encoding='utf-8')\n            self._producer.send(topic_name, key=key_bytes, value=value_bytes)\n            self._producer.flush()\n            print('Message published successfully.')\n            return True\n        except Exception as ex:\n            print('Exception in publishing message')\n            print(ex)\n            return False\n\n    def close(self):\n        if self._producer is not None:\n            self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nimport logging\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=None, api_version=None):\n        self._producer = None\n        self.bootstrap_servers = bootstrap_servers or ['host.docker.internal:9092']\n        self.api_version = api_version or (0, 10)\n\n    def connect(self):\n        try:\n            self._producer = KafkaProducer(\n                bootstrap_servers=self.bootstrap_servers,\n                api_version=self.api_version,\n                key_serializer=lambda v: v.encode('utf-8'),\n                value_serializer=lambda v: v.encode('utf-8')\n            )\n            return True\n        except Exception as e:\n            logging.error(f\"Failed to connect to Kafka: {e}\")\n            return False\n\n    def publish_message(self, topic_name: str, key: str, value: str):\n        if not self._producer:\n            return False\n        try:\n            self._producer.send(topic_name, key=key, value=value)\n            self._producer.flush()\n            return True\n        except Exception as e:\n            logging.error(f\"Failed to publish message to {topic_name}: {e}\")\n            return False\n\n    def close(self):\n        if self._producer:\n            self._producer.close()"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Create a Kafka producer wrapper class that simplifies message sending to Kafka topics, handles message formatting, and manages producer lifecycle.\n\nClass Description: KafkaProducerWrapper is a utility class that encapsulates Kafka producer functionality, providing methods to send messages (with optional keys), batch send messages, and properly manage producer resources. It automatically generates a unique topic name for message sending.\n\nAttributes:\n_producer: KafkaProducer - The underlying Kafka producer instance\n_topic: str - The Kafka topic name (automatically generated with UUID)\n\nMethods:\n__init__: () -> None - Initializes the Kafka producer with bootstrap servers and generates a unique topic name\nsend: (message: str | tuple[str, str]) -> None - Sends a single message to the Kafka topic (message can be either a plain string or a key-value tuple)\nfill: (messages: Iterable[str | tuple[str, str]]) -> None - Sends multiple messages to the Kafka topic and flushes the producer\nclose: () -> None - Properly closes the Kafka producer to release resources\ntopic: () -> str - Property that returns the generated topic name",
    "Canonical_solution": "from kafka import KafkaProducer\nfrom uuid import uuid4\n\nkafka_settings = {\"bootstrap_servers\": \"kafka:9092\"}\n\nclass KafkaProducerWrapper:\n    def __init__(self) -> None:\n        self._producer = KafkaProducer(\n            bootstrap_servers=kafka_settings[\"bootstrap_servers\"]\n        )\n        self._topic = f\"integration-tests-{uuid4()}\"\n\n    def send(self, message: str | tuple[str, str]) -> None:\n        if isinstance(message, tuple):\n            (key, value) = message\n        else:\n            (key, value) = str(uuid4()), message\n        self._producer.send(self._topic, key=key.encode(), value=value.encode())\n\n    def fill(self, messages: Iterable[str | tuple[str, str]]) -> None:\n        for msg in messages:\n            self.send(msg)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import uuid\nfrom kafka import KafkaProducer\nfrom typing import Iterable, Union, Tuple\n\nclass KafkaProducerWrapper:\n    def __init__(self):\n        self._producer = KafkaProducer(bootstrap_servers='localhost:9092')\n        self._topic = f\"topic_{uuid.uuid4().hex}\"\n\n    def send(self, message: Union[str, Tuple[str, str]]) -> None:\n        if isinstance(message, tuple):\n            key, value = message\n            self._producer.send(self._topic, key=key.encode('utf-8'), value=value.encode('utf-8'))\n        else:\n            self._producer.send(self._topic, value=message.encode('utf-8'))\n\n    def fill(self, messages: Iterable[Union[str, Tuple[str, str]]]) -> None:\n        for message in messages:\n            self.send(message)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a Python class that implements JSON-RPC 2.0 client functionality over HTTP/HTTPS, capable of sending requests, validating responses, and handling connection management.\n\nClass Description: JSONRPCExecutor is a class that facilitates JSON-RPC 2.0 communication with a remote server through HTTP/HTTPS protocols. It handles connection establishment, request sending, response validation, and connection cleanup.\n\nAttributes:\n- command: Union[str, List[str]] - Command or list of commands to be executed\n- url: str - Target URL for the JSON-RPC endpoint\n- jsonrpc_method: str - JSON-RPC method name to be invoked\n- jsonrpc_params: Optional[List[Any]] - Parameters for the JSON-RPC method (default: empty list)\n- status: str - Expected HTTP status code pattern (default: \"^2\\d\\d$\")\n- result_validator: Callable[[Any], Tuple[bool, Optional[str]]] - Optional function to validate the result\n- verify_tls: bool - Flag to enable/disable TLS certificate verification (default: True)\n- method: str - HTTP method to use (default: \"POST\")\n\nMethods:\n- _send_request(conn: Union[HTTPConnection, HTTPSConnection]) -> None - Internal method to send the JSON-RPC request\n- _validate_response(response) -> bool - Internal method to validate the JSON-RPC response\n- execute() -> bool - Main method to execute the JSON-RPC call and return success status",
    "Canonical_solution": "import json\nimport ssl\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom json import JSONDecodeError\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\nclass JSONRPCExecutor:\n    def __init__(\n        self,\n        command: Union[str, List[str]],\n        url: str,\n        jsonrpc_method: str,\n        jsonrpc_params: Optional[List[Any]] = None,\n        status: str = r\"^2\\d\\d$\",\n        result_validator: Callable[[Any], Tuple[bool, Optional[str]]] = None,\n        verify_tls: bool = True,\n        **kwargs,\n    ):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params if jsonrpc_method else []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = \"POST\"\n\n    def _send_request(self, conn: Union[HTTPConnection, HTTPSConnection]):\n        req_body = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": repr(self),\n        }\n        conn.request(\n            method=self.method,\n            url=self.url.path,\n            body=json.dumps(req_body),\n            headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\n        )\n\n    def _validate_response(self, response):\n        try:\n            response = json.loads(response.read())\n            error = response.get(\"error\")\n            if error:\n                return False\n            assert response[\"jsonrpc\"] == \"2.0\", \"invalid jsonrpc version\"\n            assert \"id\" in response, \"no id in jsonrpc response\"\n            result = response[\"result\"]\n            if self.result_validator:\n                result_valid, reason = self.result_validator(result)\n                if not result_valid:\n                    return False\n        except (AssertionError, KeyError, UnicodeDecodeError, JSONDecodeError):\n            return False\n        return True\n\n    def execute(self):\n        try:\n            if self.url.scheme == \"http\":\n                conn = HTTPConnection(self.host, self.port)\n            elif self.url.scheme == \"https\":\n                ssl_context = None\n                if not self.verify_tls:\n                    ssl_context = ssl._create_unverified_context()\n                conn = HTTPSConnection(self.host, self.port, context=ssl_context)\n            else:\n                raise ValueError(f'Unsupported URL scheme: \"{self.url.scheme}\"')\n\n            self._send_request(conn)\n            response = conn.getresponse()\n            \n            if not self._validate_response(response):\n                return False\n\n            status = str(response.status)\n            if status == self.status or self.status_re.match(status):\n                conn.close()\n                return True\n\n        except Exception:\n            return False\n\n        return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import json\nimport re\nfrom typing import Any, Callable, List, Optional, Union\nfrom http.client import HTTPConnection, HTTPSConnection, HTTPResponse\nfrom urllib.parse import urlparse\n\nclass JSONRPCExecutor:\n    def __init__(\n        self,\n        command: Union[str, List[str]],\n        url: str,\n        jsonrpc_method: str,\n        jsonrpc_params: Optional[List[Any]] = None,\n        status: str = \"^2\\\\d\\\\d$\",\n        result_validator: Optional[Callable[[Any], Tuple[bool, Optional[str]]]] = None,\n        verify_tls: bool = True,\n        method: str = \"POST\"\n    ):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params or []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = method\n\n    def _send_request(self, conn: Union[HTTPConnection, HTTPSConnection]) -> None:\n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": 1\n        }\n        data = json.dumps(payload).encode(\"utf-8\")\n        conn.request(self.method, \"/\", data, {\n            \"Content-Type\": \"application/json\",\n            \"Content-Length\": len(data)\n        })\n        self.response = conn.getresponse()\n\n    def _validate_response(self, response: HTTPResponse) -> bool:\n        if not re.match(self.status, str(response.status)):\n            return False\n        try:\n            response_data = json.load(response)\n        except json.JSONDecodeError:\n            return False\n        if \"error\" in response_data:\n            return False\n        if self.result_validator:\n            is_valid, error_msg = self.result_validator(response_data.get(\"result\"))\n            if not is_valid:\n                return False\n        return True\n\n    def execute(self) -> bool:\n        parsed_url = urlparse(self.url)\n        if parsed_url.scheme == \"https\":\n            conn = HTTPSConnection(parsed_url.netloc, timeout=10, context=None if self.verify_tls else None)\n        else:\n            conn = HTTPConnection(parsed_url.netloc, timeout=10)\n        try:\n            self._send_request(conn)\n            return self._validate_response(self.response)\n        finally:\n            conn.close()"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can continuously send messages to a specified Kafka topic until stopped, with configurable server settings and message size.\n\nClass Description: The KafkaMessageProducer class provides functionality to send messages to a Kafka topic using a background thread. It maintains message statistics and allows graceful shutdown.\n\nAttributes:\n- producer: KafkaProducer - The Kafka producer instance for sending messages\n- topic: str - The Kafka topic to which messages will be sent\n- message: bytes - The message content to be sent (filled with '1's by default)\n- sent_count: int - Counter for tracking the number of messages sent\n- stop_event: threading.Event - Event flag to control the producer thread\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288) -> None - Initializes the producer with server configuration, topic name, and message size\n- send_message() -> None - Sends a single message to the configured topic and increments the counter\n- run_producer() -> None - Continuously sends messages until stop_event is set, then flushes the producer\n- close() -> None - Signals the producer to stop and closes the Kafka producer connection",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic', message_size=524288):\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self.topic = topic\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self):\n        self.producer.send(self.topic, self.message)\n        self.sent_count += 1\n\n    def run_producer(self):\n        while not self.stop_event.is_set():\n            self.send_message()\n        self.producer.flush()\n\n    def close(self):\n        self.stop_event.set()\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import threading\nfrom kafka import KafkaProducer\nimport time\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288):\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.message_size = message_size\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n        self.producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers)\n        self.producer_thread = threading.Thread(target=self.run_producer)\n\n    def send_message(self):\n        try:\n            self.producer.send(self.topic, self.message)\n            self.sent_count += 1\n        except Exception as e:\n            print(f\"Failed to send message: {e}\")\n\n    def run_producer(self):\n        while not self.stop_event.is_set():\n            self.send_message()\n            time.sleep(0.1)\n        self.producer.flush()\n\n    def close(self):\n        self.stop_event.set()\n        self.producer_thread.join()\n        self.producer.close()"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a Python class that extends the KafkaProducer class to provide enhanced message sending capabilities with future-based callbacks and context manager support.\n\nClass Description: DefaultProducer is a specialized Kafka producer that wraps the standard KafkaProducer functionality. It provides a more convenient interface for sending messages with built-in future callbacks and supports context management for proper resource cleanup.\n\nAttributes:\n(Inherits all attributes from KafkaProducer class)\n\nMethods:\nMethod1: send(topic: str, *, key: Optional[bytes] = None, value: Optional[bytes] = None) -> concurrent.futures.Future - Sends a message to the specified Kafka topic. Returns a Future object that will be completed when the message is successfully delivered or fails. The key and value parameters are optional message components.\n\nMethod2: __enter__() -> DefaultProducer - Enables the class to be used as a context manager. Returns the producer instance itself when entering the context.\n\nMethod3: __exit__(*args) -> None - Handles context manager exit by closing the producer and releasing resources. Accepts variable arguments for exception handling if needed.",
    "Canonical_solution": "from kafka import KafkaProducer\nimport concurrent.futures\nfrom typing import Optional\n\nclass DefaultProducer(KafkaProducer):\n    def send(\n        self,\n        topic: str,\n        *,\n        key: Optional[bytes] = None,\n        value: Optional[bytes] = None,\n    ) -> concurrent.futures.Future:\n        fut = concurrent.futures.Future()\n        kfut = super().send(topic, key=key, value=value)\n        kfut.add_callback(fut.set_result)\n        kfut.add_errback(fut.set_exception)\n        return fut\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from typing import Optional, Any\nimport concurrent.futures\nfrom kafka import KafkaProducer\n\n\nclass DefaultProducer(KafkaProducer):\n    def send(self, topic: str, *, key: Optional[bytes] = None, value: Optional[bytes] = None) -> concurrent.futures.Future:\n        future = super().send(topic, key=key, value=value)\n        return future\n\n    def __enter__(self) -> 'DefaultProducer':\n        return self\n\n    def __exit__(self, *args: Any) -> None:\n        self.close()"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a Python function to interact with a Kafka producer for sending messages to a specified topic.\n\nFunction Description: The function creates a Kafka producer instance, sends messages to a specified topic, and properly closes the producer to release resources. The producer is configured with a bootstrap server and a value serializer to encode messages in UTF-8 format.\n\nInput:\n- `bootstrap_servers` (str): The address and port of the Kafka bootstrap server (e.g., \"127.0.0.1:9092\").\n- `topic` (str): The name of the Kafka topic to which the message will be sent.\n- `message_body` (dict): The message content to be sent, provided as a dictionary.\n\nOutput:\n- `producer` (KafkaProducer): An instance of the KafkaProducer configured with the specified bootstrap server and serializer. This is returned by the `create_kafka_producer` function.\n- The `send_kafka_message` function sends the message to the specified topic but does not return any value.\n- The `close_kafka_producer` function closes the producer and does not return any value.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef create_kafka_producer():\n    producer = KafkaProducer(\n        bootstrap_servers=\"127.0.0.1:9092\",\n        value_serializer=lambda v: str(v).encode(\"utf-8\"),\n    )\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, key=None, value=dict(message_body))\n\ndef close_kafka_producer(producer):\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nimport json\n\ndef create_kafka_producer(bootstrap_servers):\n    producer = KafkaProducer(\n        bootstrap_servers=bootstrap_servers,\n        value_serializer=lambda v: json.dumps(v).encode('utf-8')\n    )\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, value=message_body)\n\ndef close_kafka_producer(producer):\n    producer.close()"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Implement a Kafka producer class that writes JSON data to a Kafka topic with batch processing capabilities, including size-based and time-based batch commits, and a total message limit.\n\nClass Description: KafkaWriter is a class that handles writing messages to a Kafka topic with configurable batch processing. It manages batch commits based on either reaching a maximum batch size or a maximum batch lifetime, and can automatically close after sending a specified total number of messages.\n\nAttributes:\n_max_batch_size: [int] - Maximum number of messages in a batch before committing\n_max_batch_lifetime: [datetime.timedelta] - Maximum duration a batch can exist before committing\n_limit: [int] - Total number of messages to write before finishing\n_total_written: [int] - Counter for total messages written\n_total_written_after_commit: [int] - Counter for messages written since last commit\n_last_commit_at: [datetime.datetime] - Timestamp of last commit\n_current_seq_id: [int] - Sequence ID for tracking batches\n_producer: [KafkaProducer] - Kafka producer instance for message sending\n\nMethods:\n__init__(max_batch_size: int, max_batch_lifetime_sec: int, limit: int) -> None - Initializes the KafkaWriter with batch size, batch lifetime in seconds, and total message limit\nwrite(json_data: dict) -> None - Writes JSON data to Kafka topic, handles batch committing based on size or time thresholds\nclose() -> None - Properly closes the Kafka producer to release resources",
    "Canonical_solution": "from kafka import KafkaProducer\nimport json\nimport datetime\nimport os\n\nclass KafkaWriter:\n    def __init__(self, max_batch_size, max_batch_lifetime_sec, limit):\n        self._max_batch_size = max_batch_size\n        self._max_batch_lifetime = datetime.timedelta(seconds=max_batch_lifetime_sec)\n        self._limit = limit\n\n        self._total_written = 0\n        self._total_written_after_commit = 0\n        self._last_commit_at = None\n        self._current_seq_id = 0\n\n        self._producer = KafkaProducer(bootstrap_servers=[\"kafka:9092\"])\n\n    def write(self, json_data):\n        self._producer.send(\n            \"test_0\",\n            json.dumps(json_data).encode(\"utf-8\"),\n            partition=0,\n        )\n\n        if not self._last_commit_at:\n            self._last_commit_at = datetime.datetime.now()\n\n        self._total_written += 1\n        self._total_written_after_commit += 1\n        batch_exists_for = datetime.datetime.now() - self._last_commit_at\n\n        size_limit_reached = self._total_written_after_commit == self._max_batch_size\n        duration_limit_reached = batch_exists_for >= self._max_batch_lifetime\n\n        if size_limit_reached or duration_limit_reached:\n            self._last_commit_at = datetime.datetime.now()\n            self._producer.send(\n                \"test_0\",\n                \"*COMMIT*\".encode(\"utf-8\"),\n                partition=0,\n            )\n            self._total_written_after_commit = 0\n            self._current_seq_id += 1\n\n        if self._total_written == self._limit:\n            self._producer.send(\n                \"test_0\",\n                \"*FINISH*\".encode(\"utf-8\"),\n                partition=0,\n            )\n            self._producer.close()\n            exit(0)\n\n    def close(self):\n        self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import json\nimport time\nfrom datetime import datetime, timedelta\nfrom kafka import KafkaProducer\n\nclass KafkaWriter:\n    def __init__(self, max_batch_size: int, max_batch_lifetime_sec: int, limit: int):\n        self._max_batch_size = max_batch_size\n        self._max_batch_lifetime = timedelta(seconds=max_batch_lifetime_sec)\n        self._limit = limit\n        self._total_written = 0\n        self._total_written_after_commit = 0\n        self._last_commit_at = datetime.now()\n        self._current_seq_id = 0\n        self._producer = KafkaProducer(bootstrap_servers='localhost:9092', value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n\n    def write(self, json_data: dict) -> None:\n        self._total_written += 1\n        self._total_written_after_commit += 1\n        self._producer.send('test-topic', json_data)\n        \n        if self._total_written >= self._limit:\n            self.close()\n            return\n        \n        if self._total_written_after_commit >= self._max_batch_size or (datetime.now() - self._last_commit_at) >= self._max_batch_lifetime:\n            self._producer.flush()\n            self._total_written_after_commit = 0\n            self._last_commit_at = datetime.now()\n            self._current_seq_id += 1\n\n    def close(self) -> None:\n        self._producer.close()"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a function that produces a message to a specified Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to the specified topic, waits for the message to be delivered, and then closes the producer to release resources.\n\nInput:  \n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').  \n- topic: str - The name of the Kafka topic to which the message will be sent.  \n- message: bytes - The message content in bytes format.  \n\nOutput: None - The function does not return any value but ensures the message is sent to the Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_message(bootstrap_server: str, topic: str, message: bytes) -> None:\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message content in bytes\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    future = producer.send(topic, message)\n    future.get(timeout=10)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef send_message_to_kafka(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    future = producer.send(topic, message)\n    future.add_callback(lambda _: producer.flush())\n    producer.close()"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a function that produces messages to a Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to a specified Kafka topic, ensures the message is delivered by flushing the producer buffer, and properly closes the producer to release resources.\n\nInput:\n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').\n- topic: str - The name of the Kafka topic to which the message will be sent.\n- message: bytes - The message to be sent, encoded as bytes.\n\nOutput: None - The function does not return any value but ensures the message is sent to the specified Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_kafka_message(bootstrap_server, topic, message):\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message to be sent (bytes)\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef send_kafka_message(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a Kafka producer wrapper class that can continuously send messages to a specified Kafka topic until stopped, with proper resource management.\n\nClass Description: A thread-safe Kafka producer wrapper that manages message production to a specified topic, with graceful shutdown capabilities.\n\nAttributes:\n- bootstrap_servers: [str] - Comma-separated list of Kafka broker addresses (default: 'localhost:9092')\n- topic: [str] - Target Kafka topic for message production (default: 'my-topic')\n- stop_event: [threading.Event] - Threading event flag to control producer execution\n- producer: [KafkaProducer] - Underlying Kafka producer instance\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic') -> None - Initializes the producer with given configuration\n- stop() -> None - Signals the producer to stop sending messages\n- run() -> None - Continuously sends test messages to the topic until stopped, then closes the producer",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\nimport time\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic'):\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.stop_event = threading.Event()\n        self.producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers)\n\n    def stop(self):\n        self.stop_event.set()\n\n    def run(self):\n        while not self.stop_event.is_set():\n            self.producer.send(self.topic, b\"test\")\n            self.producer.send(self.topic, b\"\\xc2Hola, mundo!\")\n            time.sleep(1)\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import threading\nfrom kafka import KafkaProducer\nimport json\nimport time\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic'):\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.stop_event = threading.Event()\n        self.producer = KafkaProducer(\n            bootstrap_servers=self.bootstrap_servers,\n            value_serializer=lambda v: json.dumps(v).encode('utf-8')\n        )\n        self.thread = threading.Thread(target=self.run)\n        self.thread.start()\n\n    def stop(self):\n        self.stop_event.set()\n        self.producer.close()\n\n    def run(self):\n        message_count = 0\n        try:\n            while not self.stop_event.is_set():\n                message = {'message': f'Test message {message_count}'}\n                self.producer.send(self.topic, value=message)\n                message_count += 1\n                time.sleep(1)\n        except Exception as e:\n            print(f\"Error sending message: {e}\")\n        finally:\n            self.producer.close()"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a Python class that implements an MQTT subscriber client using the Paho MQTT library, capable of connecting to an MQTT broker, subscribing to topics, and handling incoming messages with configurable authentication and TLS options.\n\nClass Description: The MQTTSubscriber class provides a configurable MQTT client implementation for subscribing to topics and processing messages from an MQTT broker. It supports various connection options including TLS encryption and authentication.\n\nAttributes:\n- host: str - The MQTT broker host address (default: \"mqtt.eclipseprojects.io\")\n- topic: str - The topic to subscribe to (default: \"$SYS/#\")\n- qos: int - Quality of Service level for the subscription (default: 0)\n- clientid: str - Client identifier for the MQTT connection (default: None)\n- username: str - Username for broker authentication (default: None)\n- password: str - Password for broker authentication (default: None)\n- port: int - Broker connection port (default: None, auto-detected)\n- keepalive: int - Connection keepalive period in seconds (default: 60)\n- use_tls: bool - Flag to enable TLS encryption (default: False)\n- insecure: bool - Flag to disable certificate verification (default: False)\n- cacerts: str - Path to CA certificate file (default: None)\n- tls_version: str - TLS protocol version (default: None)\n- debug: bool - Flag to enable debug logging (default: False)\n- disable_clean_session: bool - Flag to disable clean session (default: False)\n- mqttc: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host, topic, qos, clientid, username, password, port, keepalive, use_tls, insecure, cacerts, tls_version, debug, disable_clean_session) -> None - Initializes the MQTT subscriber with configuration parameters\n- _setup_callbacks() -> None - Sets up the MQTT client callback functions\n- _configure_tls() -> None - Configures TLS settings for secure connections\n- _configure_authentication() -> None - Configures username/password authentication\n- on_connect(mqttc, obj, flags, reason_code, properties) -> None - Callback for connection events\n- on_message(mqttc, obj, msg) -> None - Callback for incoming messages\n- on_publish(mqttc, obj, mid) -> None - Callback for publish events\n- on_subscribe(mqttc, obj, mid, reason_code_list, properties) -> None - Callback for subscription events\n- on_log(mqttc, obj, level, string) -> None - Callback for debug logging\n- connect_and_subscribe() -> None - Connects to the broker and starts the message loop",
    "Canonical_solution": "import argparse\nimport ssl\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None,\n                 username=None, password=None, port=None, keepalive=60, use_tls=False,\n                 insecure=False, cacerts=None, tls_version=None, debug=False,\n                 disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n\n        self.mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, self.clientid,\n                                clean_session=not self.disable_clean_session)\n\n        self._setup_callbacks()\n        self._configure_tls()\n        self._configure_authentication()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls or self.cacerts:\n            if self.tls_version == \"tlsv1.2\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_2\n            elif self.tls_version == \"tlsv1.1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_1\n            elif self.tls_version == \"tlsv1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1\n            else:\n                tlsVersion = None\n\n            cert_required = ssl.CERT_NONE if self.insecure else ssl.CERT_REQUIRED\n            self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None,\n                              cert_reqs=cert_required, tls_version=tlsVersion)\n            if self.insecure:\n                self.mqttc.tls_insecure_set(True)\n\n    def _configure_authentication(self):\n        if self.username or self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"reason_code: \" + str(reason_code))\n\n    def on_message(self, mqttc, obj, msg):\n        print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\n    def on_publish(self, mqttc, obj, mid):\n        print(\"mid: \" + str(mid))\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\n    def on_log(self, mqttc, obj, level, string):\n        print(string)\n\n    def connect_and_subscribe(self):\n        if self.port is None:\n            self.port = 8883 if (self.use_tls or self.cacerts) else 1883\n\n        print(f\"Connecting to {self.host} port: {self.port}\")\n        self.mqttc.connect(self.host, self.port, self.keepalive)\n        self.mqttc.subscribe(self.topic, self.qos)\n        self.mqttc.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None, username=None, password=None, port=None, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=None, debug=False, disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n        self.mqttc = mqtt.Client(client_id=self.clientid, clean_session=not self.disable_clean_session)\n        self._setup_callbacks()\n        self._configure_authentication()\n        self._configure_tls()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls:\n            self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None, tls_version=self.tls_version, ciphers=None, cert_reqs=mqtt.CERT_REQUIRED if not self.insecure else mqtt.CERT_NONE)\n            self.mqttc.tls_insecure_set(self.insecure)\n\n    def _configure_authentication(self):\n        if self.username and self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(f\"Connected with result code {reason_code}\")\n        mqttc.subscribe(self.topic, qos=self.qos)\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message on topic {msg.topic}: {msg.payload.decode()}\")\n\n    def on_publish(self, mqttc, obj, mid):\n        print(f\"Message published: {mid}\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(f\"Subscribed: {mid} {reason_code_list}\")\n\n    def on_log(self, mqttc, obj, level, string):\n        print(f\"Log: {string}\")\n\n    def connect_and_subscribe(self):\n        if self.port is None:\n            self.port = 8883 if self.use_tls else 1883\n        self.mqttc.connect(self.host, port=self.port, keepalive=self.keepalive)\n        self.mqttc.loop_forever()"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client using the Paho MQTT library to subscribe to topics, handle incoming messages, and trigger appropriate actions based on the received messages.\n\nClass Description: The `MqttClient` class is a threaded MQTT client that connects to a broker, subscribes to specified topics, and processes incoming messages. It supports secure connections with TLS and authentication. Messages can be in JSON format and are routed to designated synapses (processing units) based on the topic.\n\nAttributes:\n\n- broker: [object] - Contains broker configuration details (client_id, protocol, username, password, ca_cert, certfile, keyfile, tls_insecure, broker_ip, port, keepalive, topics)\n- brain: [object] - Reference to the main processing unit that manages synapses\n- client: [paho.mqtt.client.Client] - The MQTT client instance\n\nMethods:\n\n- __init__(broker=None, brain=None) -> [None] - Initializes the MQTT client with broker configuration and brain reference. Sets up connection callbacks and security parameters.\n- run() -> [None] - Connects to the broker and starts the MQTT loop in a separate thread. Handles socket errors gracefully.\n- on_connect(client, userdata, flags, rc) -> [None] - Callback for connection events. Subscribes to all configured topics on successful connection (rc=0).\n- on_message(client, userdata, msg) -> [None] - Callback for incoming messages. Routes messages to concerned synapses based on topic.\n- on_subscribe(mqttc, obj, mid, granted_qos) -> [None] - Callback for subscription confirmation (currently no operation).\n- call_concerned_synapses(topic_name, message) -> [None] - Processes incoming messages, converts JSON if needed, and triggers appropriate synapses.\n- _get_protocol(protocol) -> [int] - Static method that converts protocol string to Paho MQTT protocol constant.",
    "Canonical_solution": "import json\nimport logging\nimport socket\nfrom threading import Thread\nimport paho.mqtt.client as mqtt\n\nclass MqttClient(Thread):\n    def __init__(self, broker=None, brain=None):\n        super(MqttClient, self).__init__()\n        self.broker = broker\n        self.brain = brain\n\n        self.client = mqtt.Client(client_id=self.broker.client_id, protocol=self._get_protocol(self.broker.protocol))\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n        if self.broker.username is not None and self.broker.password is not None:\n            self.client.username_pw_set(self.broker.username, self.broker.password)\n\n        if self.broker.ca_cert is not None and self.broker.certfile is not None and self.broker.keyfile is not None:\n            self.client.tls_set(ca_certs=self.broker.ca_cert,\n                               certfile=self.broker.certfile,\n                               keyfile=self.broker.keyfile)\n            self.client.tls_insecure_set(self.broker.tls_insecure)\n        elif self.broker.ca_cert is not None:\n            self.client.tls_set(ca_certs=self.broker.ca_cert)\n            self.client.tls_insecure_set(self.broker.tls_insecure)\n\n    def run(self):\n        try:\n            self.client.connect(self.broker.broker_ip, self.broker.port, self.broker.keepalive)\n            self.client.loop_forever()\n        except socket.error:\n            pass\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            for topic in self.broker.topics:\n                client.subscribe(topic.name)\n        else:\n            self.client.disconnect()\n\n    def on_message(self, client, userdata, msg):\n        self.call_concerned_synapses(msg.topic, msg.payload)\n\n    def on_subscribe(self, mqttc, obj, mid, granted_qos):\n        pass\n\n    def call_concerned_synapses(self, topic_name, message):\n        target_topic = next(topic for topic in self.broker.topics if topic.name == topic_name)\n        if target_topic.is_json:\n            message = json.loads(message)\n        \n        for synapse in target_topic.synapses:\n            overriding_parameter_dict = dict()\n            overriding_parameter_dict[\"mqtt_subscriber_message\"] = message\n            SynapseLauncher.start_synapse_by_list_name([synapse.name],\n                                                     brain=self.brain,\n                                                     overriding_parameter_dict=overriding_parameter_dict)\n\n    @staticmethod\n    def _get_protocol(protocol):\n        if protocol == \"MQTTv31\":\n            return paho.mqtt.client.MQTTv31\n        return paho.mqtt.client.MQTTv311",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport json\nimport threading\n\nclass MqttClient:\n    def __init__(self, broker=None, brain=None):\n        self.broker = broker\n        self.brain = brain\n        self.client = mqtt.Client(client_id=self.broker.client_id, protocol=self._get_protocol(self.broker.protocol))\n        self.client.username_pw_set(self.broker.username, self.broker.password)\n        self.client.tls_set(ca_certs=self.broker.ca_cert, certfile=self.broker.certfile, keyfile=self.broker.keyfile, tls_version=mqtt.ssl.PROTOCOL_TLSv1_2, cert_reqs=mqtt.ssl.CERT_REQUIRED)\n        self.client.tls_insecure_set(self.broker.tls_insecure)\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def run(self):\n        try:\n            self.client.connect(self.broker.broker_ip, self.broker.port, self.broker.keepalive)\n            thread = threading.Thread(target=self.client.loop_forever)\n            thread.daemon = True\n            thread.start()\n        except Exception as e:\n            print(f\"Failed to connect to MQTT broker: {e}\")\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            for topic in self.broker.topics:\n                self.client.subscribe(topic)\n        else:\n            print(f\"Connection failed with code {rc}\")\n\n    def on_message(self, client, userdata, msg):\n        topic_name = msg.topic\n        message = msg.payload.decode()\n        self.call_concerned_synapses(topic_name, message)\n\n    def on_subscribe(self, mqttc, obj, mid, granted_qos):\n        pass\n\n    def call_concerned_synapses(self, topic_name, message):\n        try:\n            data = json.loads(message)\n        except json.JSONDecodeError:\n            data = message\n        for synapse in self.brain.synapses:\n            if topic_name in synapse.topics:\n                synapse.process(data)\n\n    @staticmethod\n    def _get_protocol(protocol):\n        if protocol == \"MQTTv311\":\n            return mqtt.MQTTv311\n        elif protocol == \"MQTTv5\":\n            return mqtt.MQTTv5\n        else:\n            return mqtt.MQTTv31"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement an MQTT subscriber function in Python that connects to a broker, subscribes to a topic, and processes incoming messages using the Paho MQTT client library.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker over WebSockets, subscribes to a specified topic, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, incoming messages, and subscription acknowledgments.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Implement an MQTT subscriber class in Python that encapsulates the functionality of connecting to a broker, subscribing to topics, and processing incoming messages using the Paho MQTT client library.\n\nClass Description: The `MQTTSubscriber` class provides a reusable and configurable way to subscribe to MQTT topics. It initializes with broker details and topic configurations, and it uses callback methods to handle MQTT events such as connection, message reception, and subscription.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The Paho MQTT client instance used for communication.\n- `broker_address`: [str] - The address of the MQTT broker.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The MQTT topic to subscribe to.\n- `qos`: [int] - The Quality of Service level for the subscription.\n\nMethods:\n\n- `__init__(broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None` - Initializes the MQTT subscriber with broker details and topic configuration.\n- `on_connect(client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None` - Callback for when the client connects to the broker.\n- `on_message(client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None` - Callback for when a message is received on the subscribed topic.\n- `on_subscribe(client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None` - Callback for when the client subscribes to a topic.\n- `start() -> None` - Connects to the broker, subscribes to the topic, and starts the MQTT loop to process messages.\n- `stop() -> None` - Stops the MQTT loop and disconnects from the broker.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \"+str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic+\" \"+str(msg.qos)+\" \"+str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \"+str(mid)+\" \"+str(reason_code_list))\n\ndef on_log(mqttc, obj, level, string):\n    print(string)\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, transport=\"websockets\")\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 80, 60)\n    mqttc.subscribe(\"$SYS/broker/version\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport json\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str, qos: int = 0):\n        self.client = mqtt.Client(protocol=mqtt.MQTTv5)\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.qos = qos\n\n    def on_connect(self, client: mqtt.Client, obj: any, flags: dict, reason_code: int, properties: any) -> None:\n        if reason_code == 0:\n            print(\"Connected to broker\")\n            self.client.subscribe(self.topic, qos=self.qos)\n        else:\n            print(f\"Connection failed with code {reason_code}\")\n\n    def on_message(self, client: mqtt.Client, obj: any, msg: mqtt.MQTTMessage) -> None:\n        payload = msg.payload.decode()\n        print(f\"Received message on topic {msg.topic}: {payload}\")\n\n    def on_subscribe(self, client: mqtt.Client, obj: any, mid: int, reason_code_list: list, properties: any) -> None:\n        print(f\"Subscribed to topic with mid {mid} and reason codes {reason_code_list}\")\n\n    def start(self) -> None:\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n        self.client.connect(self.broker_address, self.broker_port, keepalive=60)\n        self.client.loop_forever()\n\n    def stop(self) -> None:\n        self.client.loop_stop()\n        self.client.disconnect()"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client for subscribing to topics and handling incoming messages, with support for custom command processing and authentication.\n\nClass Description: The MQTTClient class provides functionality to connect to an MQTT broker, subscribe to specified topics, and process incoming messages. It includes handlers for custom commands and button press events, with optional username/password authentication.\n\nAttributes:\n- host: str - The hostname or IP address of the MQTT broker\n- port: int - The port number of the MQTT broker\n- topic: str - The topic to subscribe to\n- username: str (optional) - Username for broker authentication\n- password: str (optional) - Password for broker authentication\n- client: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host: str, port: int, topic: str, username: str=None, password: str=None) -> None - Initializes the MQTT client with connection parameters\n- on_connect(client: mqtt.Client, userdata: Any, flags: dict, rc: int) -> None - Callback for when the client connects to the broker\n- on_message(client: mqtt.Client, userdata: Any, msg: mqtt.MQTTMessage) -> None - Callback for handling incoming messages\n- start() -> None - Starts the MQTT client connection and message loop\n- custom_command(command: str) -> None - Placeholder for handling custom commands\n- buttonsinglepress() -> None - Placeholder for handling button press events",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTClient:\n    def __init__(self, host, port, topic, username=None, password=None):\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client, userdata, flags, rc):\n        print(\"Connected with result code \"+str(rc))\n        client.subscribe(self.topic)\n\n    def on_message(self, client, userdata, msg):\n        print(\"Message from MQTT: \"+str(msg.payload.decode('utf-8')))\n        mqtt_query = str(msg.payload.decode('utf-8'))\n        if 'custom' in mqtt_query.lower():\n            mqtt_query = mqtt_query.lower()\n            mqtt_queryidx = mqtt_query.find('custom')\n            mqtt_query = mqtt_query[mqtt_queryidx:]\n            mqtt_query = mqtt_query.replace('custom',\"\",1)\n            mqtt_query = mqtt_query.strip()\n            self.custom_command(mqtt_query)\n        elif mqtt_query.lower() == 'mute':\n            self.buttonsinglepress()\n        else:\n            self.assistant.send_text_query(mqtt_query)\n\n    def start(self):\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n        self.client.connect(self.host, self.port, 60)\n        self.client.loop_forever()\n\n    def custom_command(self, command):\n        # Placeholder for custom command handling\n        pass\n\n    def buttonsinglepress(self):\n        # Placeholder for button press handling\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\nclass MQTTClient:\n    def __init__(self, host: str, port: int, topic: str, username: str = None, password: str = None):\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client: mqtt.Client, userdata: any, flags: dict, rc: int) -> None:\n        print(f\"Connected with result code {rc}\")\n        self.client.subscribe(self.topic)\n\n    def on_message(self, client: mqtt.Client, userdata: any, msg: mqtt.MQTTMessage) -> None:\n        print(f\"Received message on topic {msg.topic}: {msg.payload.decode()}\")\n        command = msg.payload.decode()\n        self.custom_command(command)\n\n    def start(self) -> None:\n        self.client.connect(self.host, self.port, 60)\n        self.client.loop_forever()\n\n    def custom_command(self, command: str) -> None:\n        pass\n\n    def buttonsinglepress(self) -> None:\n        pass"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection, subscribes to specified topics, and continuously processes incoming messages using callback functions.\n\nFunction Description: The function `wait_for_messages` initializes an MQTT client, sets up a message callback handler, subscribes to predefined topics, and enters an infinite loop to process incoming MQTT messages. It handles different message types through topic-specific callback functions.\n\nInput: None (The function uses predefined configuration and topics internally)\n\nOutput: None (The function runs indefinitely, processing messages through callbacks)\n\n---\n\nTask Description: Create a helper function to initialize and configure an MQTT client with WebSocket transport.\n\nFunction Description: The function `get_client` creates and configures an MQTT client instance with WebSocket transport, sets authentication credentials, and establishes an asynchronous connection to the broker.\n\nInput: None (Uses hardcoded connection parameters)\n\nOutput: paho.mqtt.client.Client - Returns a configured MQTT client instance\n\n---\n\nTask Description: Create a callback function to handle incoming MQTT messages and route them to appropriate handlers based on topic.\n\nFunction Description: The function `on_message_callback` processes incoming MQTT messages, logs receipt, and routes them to specific handler functions based on topic patterns. It includes error handling for message processing.\n\nInput:\n- client: paho.mqtt.client.Client - The MQTT client instance\n- userdata: Any - User-defined data passed to the callback\n- message: paho.mqtt.client.MQTTMessage - The received message object\n\nOutput: None (Messages are processed through side effects in handler functions)",
    "Canonical_solution": "import json\nimport logging\nimport paho.mqtt.client as paho\n\ndef get_client():\n    mqtt_client = paho.Client(transport=\"websockets\", client_id=\"listener\")\n    mqtt_client.enable_logger()\n    mqtt_client.username_pw_set(username=\"tavern\", password=\"tavern\")\n    mqtt_client.connect_async(host=\"broker\", port=9001)\n    return mqtt_client\n\ndef on_message_callback(client, userdata, message):\n    try:\n        logging.info(\"Received message on %s\", message.topic)\n\n        if \"devices/status\" in message.topic:\n            handle_full_status_topic(client, message)\n        elif \"lights\" in message.topic:\n            handle_lights_topic(message)\n        elif \"echo\" in message.topic:\n            handle_echo_topic(client, message)\n        elif \"ping\" in message.topic:\n            handle_ping_topic(client, message)\n        elif \"status\" in message.topic:\n            handle_status_topic(client, message)\n        else:\n            logging.warning(\"Got unexpected MQTT topic '%s'\", message.topic)\n    except Exception as e:\n        logging.exception(\"error handling message: {}\".format(e))\n\ndef wait_for_messages():\n    mqtt_client = get_client()\n    mqtt_client.on_message = on_message_callback\n    mqtt_client.reconnect()\n\n    topics = [\"lights\", \"ping\", \"echo\", \"status\"]\n\n    for t in topics:\n        device_topic = \"/device/+/{}\".format(t)\n        logging.debug(\"Subscribing to '%s'\", device_topic)\n        mqtt_client.subscribe(device_topic)\n\n    mqtt_client.subscribe(\"/devices/status\")\n\n    mqtt_client.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport logging\n\ndef get_client():\n    client = mqtt.Client(protocol=mqtt.MQTTv311, transport=\"websockets\")\n    client.username_pw_set(\"username\", \"password\")\n    client.connect_async(\"broker.example.com\", 8080)\n    return client\n\ndef on_message_callback(client, userdata, message):\n    try:\n        logging.info(f\"Received message on topic {message.topic}: {str(message.payload)}\")\n        if message.topic == \"topic1\":\n            handle_topic1(message.payload)\n        elif message.topic == \"topic2\":\n            handle_topic2(message.payload)\n        else:\n            logging.warning(f\"No handler found for topic: {message.topic}\")\n    except Exception as e:\n        logging.error(f\"Error processing message: {e}\")\n\ndef handle_topic1(payload):\n    logging.info(\"Handling topic1 message: \" + str(payload))\n\ndef handle_topic2(payload):\n    logging.info(\"Handling topic2 message: \" + str(payload))\n\ndef wait_for_messages():\n    client = get_client()\n    client.on_message = on_message_callback\n    client.subscribe(\"topic1\")\n    client.subscribe(\"topic2\")\n    client.loop_forever()"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a Python function that implements an MQTT subscriber using the Paho MQTT client library to connect to a broker, subscribe to topics, and continuously process incoming messages.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, subscribes to specified topics, and enters a loop to continuously handle incoming messages. It includes logging for debugging purposes.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized if needed.)\n\nOutput: None (The function runs indefinitely, processing incoming messages and logging events.)",
    "Canonical_solution": "import logging\nimport paho.mqtt.client as mqtt\n\ndef mqtt_subscriber():\n    logging.basicConfig(level=logging.DEBUG)\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    logger = logging.getLogger(__name__)\n    mqttc.enable_logger(logger)\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n        logging.info(\"Connected to MQTT Broker!\")\n        client.subscribe(\"test/topic\")\n    else:\n        logging.error(\"Failed to connect, return code %d\", rc)\n\ndef on_message(client, userdata, msg):\n    logging.info(\"Received message: `%s` on topic `%s`\", msg.payload.decode(), msg.topic)\n\ndef mqtt_subscriber():\n    client = mqtt.Client()\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    client.connect(\"broker.hivemq.com\", 1883)\n    client.loop_forever()"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement an MQTT subscriber in Python that connects to a broker, subscribes to topics, and processes incoming messages with different callback functions for specific topic patterns.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, sets up message callbacks for specific topic patterns, subscribes to a wildcard topic, and continuously processes incoming messages. It uses the Paho MQTT client library to handle MQTT communication.\n\nInput: None (The broker address and port are hardcoded in the function)\n\nOutput: None (The function prints incoming messages to the console but does not return any value)\n\nMethods:\n\nMethod1: on_message_msgs(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/messages/#\". Prints message details to the console.\nMethod2: on_message_bytes(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/bytes/#\". Prints message details to the console.\nMethod3: on_message(mosq, obj, msg) -> None - Default callback function that handles all other messages not caught by specific callbacks. Prints message details to the console.\nMethod4: mqtt_subscriber() -> None - Main function that creates an MQTT client, sets up callbacks, connects to the broker, subscribes to topics, and starts the message processing loop.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(\"MESSAGES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message_bytes(mosq, obj, msg):\n    print(\"BYTES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message(mosq, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.message_callback_add(\"$SYS/broker/messages/#\", on_message_msgs)\n    mqttc.message_callback_add(\"$SYS/broker/bytes/#\", on_message_bytes)\n    mqttc.on_message = on_message\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(f\"Received message on topic {msg.topic} with payload: {msg.payload}\")\n\ndef on_message_bytes(mosq, obj, msg):\n    print(f\"Received message on topic {msg.topic} with payload: {msg.payload}\")\n\ndef on_message(mosq, obj, msg):\n    print(f\"Received message on topic {msg.topic} with payload: {msg.payload}\")\n\ndef mqtt_subscriber():\n    client = mqtt.Client()\n    client.on_message = on_message\n    client.connect(\"broker.hivemq.com\", 1883)\n    client.subscribe(\"$SYS/broker/messages/#\", callback=on_message_msgs)\n    client.subscribe(\"$SYS/broker/bytes/#\", callback=on_message_bytes)\n    client.loop_forever()"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Implement an MQTT consumer class in Python that connects to an MQTT broker, subscribes to topics, and handles incoming messages, with optional authentication support.\n\nClass Description: The MQTTConsumer class provides functionality to connect to an MQTT broker, subscribe to topics, and process incoming messages. It includes callbacks for connection events, message reception, and message publishing. The class supports optional username/password authentication.\n\nAttributes:\n- final_mid: [int] - Stores the message ID of the final message to be published\n- client: [paho.mqtt.client.Client] - The MQTT client instance used for communication\n\nMethods:\n- __init__(client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None) -> None - Initializes the MQTT client with connection parameters and optional authentication\n- on_connect(mqttc, userdata, flags, reason_code, properties) -> None - Callback for when the client connects to the broker\n- on_message(mqttc, userdata, msg) -> None - Callback for when a message is received on a subscribed topic\n- on_publish(mqttc, userdata, mid, reason_code, properties) -> None - Callback for when a message is published\n- subscribe(topic) -> None - Subscribes to the specified topic\n- start_consuming() -> None - Starts the MQTT loop to process network traffic and messages continuously",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.final_mid = 0\n        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id)\n        self.client._userdata = False\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        \n        if username:\n            self.client.username_pw_set(username, password)\n        self.client.connect(host, port, keepalive)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        if userdata:\n            print(f\"reason_code: {reason_code}\")\n\n    def on_message(self, mqttc, userdata, msg):\n        if msg.retain == 0:\n            pass\n        else:\n            if userdata:\n                print(\"Clearing topic \" + msg.topic)\n            (rc, self.final_mid) = mqttc.publish(msg.topic, None, 1, True)\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        if mid == self.final_mid:\n            sys.exit()\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.client = mqtt.Client(client_id)\n        self.final_mid = None\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        if username and password:\n            self.client.username_pw_set(username, password)\n        self.client.connect(host, port, keepalive)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        print(f\"Connected with result code {reason_code}\")\n\n    def on_message(self, mqttc, userdata, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        print(f\"Message published with mid {mid}, reason code {reason_code}\")\n        if mid == self.final_mid:\n            self.client.disconnect()\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Implement an MQTT subscriber client in Python using the Paho MQTT library to connect to a broker, subscribe to topics, and handle incoming messages.\n\nFunction Description: The function `mqtt_subscribe` establishes a connection to an MQTT broker, subscribes to specified topics, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, subscription acknowledgments, and incoming messages.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized for flexibility.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Create a Python class that encapsulates MQTT subscriber functionality using the Paho MQTT library, allowing for connection to a broker, topic subscription, and message handling.\n\nClass Description: The `MQTTSubscriber` class provides methods to connect to an MQTT broker, subscribe to topics, and process incoming messages. It uses callback methods to handle connection events, subscription acknowledgments, and message reception.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The MQTT client instance used for communication with the broker.\n- `broker_address`: [str] - The address of the MQTT broker to connect to.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The topic to subscribe to for receiving messages.\n\nMethods:\n\n- `__init__(self, broker_address: str, broker_port: int, topic: str) -> None` - Initializes the MQTT subscriber with broker details and subscription topic.\n- `on_connect(self, mqttc, obj, flags, reason_code, properties) -> None` - Callback for when the client connects to the broker.\n- `on_message(self, mqttc, obj, msg) -> None` - Callback for when a message is received on a subscribed topic.\n- `on_subscribe(self, mqttc, obj, mid, reason_code_list, properties) -> None` - Callback for when the client subscribes to a topic.\n- `connect_and_subscribe(self) -> None` - Connects to the broker and subscribes to the specified topic.\n- `start(self) -> None` - Starts the MQTT loop to process network traffic and messages.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\ndef mqtt_subscribe():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\")\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str) -> None:\n        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1)\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties) -> None:\n        if reason_code == 0:\n            print(\"Connected to broker\")\n            self.client.subscribe(self.topic)\n        else:\n            print(f\"Connection failed with code {reason_code}\")\n\n    def on_message(self, mqttc, obj, msg) -> None:\n        print(f\"Received message on topic {msg.topic}: {str(msg.payload)}\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties) -> None:\n        print(f\"Subscribed to topic with mid {mid}\")\n\n    def connect_and_subscribe(self) -> None:\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n        self.client.connect(self.broker_address, self.broker_port)\n\n    def start(self) -> None:\n        self.connect_and_subscribe()\n        self.client.loop_forever()"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Implement a Python function that publishes messages to an MQTT broker using the Paho MQTT client library, with support for TLS/SSL encryption and authentication.\n\nFunction Description: The function `mqtt_publisher` establishes a connection to an MQTT broker, publishes a specified number of messages to a given topic at a defined interval, and handles connection events and message publishing callbacks. It supports optional TLS/SSL encryption, username/password authentication, and various MQTT QoS levels.\n\nInput:\n- `host` (str): The hostname or IP address of the MQTT broker.\n- `topic` (str): The MQTT topic to publish messages to.\n- `qos` (int): The Quality of Service level (0, 1, or 2) for message delivery.\n- `clientid` (str): The client ID to use when connecting to the broker.\n- `username` (str, optional): The username for broker authentication.\n- `disable_clean_session` (bool, optional): If True, the broker will maintain session state for the client.\n- `password` (str, optional): The password for broker authentication.\n- `port` (int, optional): The port number to connect to (defaults to 1883 for non-TLS, 8883 for TLS).\n- `nummsgs` (int): The number of messages to publish.\n- `delay` (float): The delay in seconds between publishing messages.\n- `keepalive` (int): The keepalive interval in seconds for the connection.\n- `use_tls` (bool, optional): If True, enable TLS/SSL encryption.\n- `insecure` (bool, optional): If True, disable certificate verification.\n- `cacerts` (str, optional): Path to CA certificate file for TLS/SSL.\n- `tls_version` (str, optional): The TLS version to use (\"tlsv1\", \"tlsv1.1\", or \"tlsv1.2\").\n- `debug` (bool, optional): If True, enable debug logging.\n\nOutput: None. The function publishes messages to the MQTT broker and prints status information to the console.",
    "Canonical_solution": "import argparse\nimport os\nimport ssl\nimport time\nimport paho.mqtt.client as mqtt\n\ndef mqtt_publisher(host, topic, qos, clientid, username, disable_clean_session, password, port, nummsgs, delay, keepalive, use_tls, insecure, cacerts, tls_version, debug):\n    usetls = use_tls\n    if cacerts:\n        usetls = True\n\n    if port is None:\n        if usetls:\n            port = 8883\n        else:\n            port = 1883\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, clientid, clean_session = not disable_clean_session)\n\n    if usetls:\n        if tls_version == \"tlsv1.2\":\n            tlsVersion = ssl.PROTOCOL_TLSv1_2\n        elif tls_version == \"tlsv1.1\":\n            tlsVersion = ssl.PROTOCOL_TLSv1_1\n        elif tls_version == \"tlsv1\":\n            tlsVersion = ssl.PROTOCOL_TLSv1\n        elif tls_version is None:\n            tlsVersion = None\n        else:\n            print(\"Unknown TLS version - ignoring\")\n            tlsVersion = None\n\n        if not insecure:\n            cert_required = ssl.CERT_REQUIRED\n        else:\n            cert_required = ssl.CERT_NONE\n\n        mqttc.tls_set(ca_certs=cacerts, certfile=None, keyfile=None, cert_reqs=cert_required, tls_version=tlsVersion)\n\n        if insecure:\n            mqttc.tls_insecure_set(True)\n\n    if username or password:\n        mqttc.username_pw_set(username, password)\n\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_publish = on_publish\n\n    if debug:\n        mqttc.on_log = on_log\n\n    print(\"Connecting to \"+host+\" port: \"+str(port))\n    mqttc.connect(host, port, keepalive)\n\n    mqttc.loop_start()\n\n    for x in range (0, nummsgs):\n        msg_txt = '{\"msgnum\": \"'+str(x)+'\"}'\n        print(\"Publishing: \"+msg_txt)\n        infot = mqttc.publish(topic, msg_txt, qos=qos)\n        infot.wait_for_publish()\n\n        time.sleep(delay)\n\n    mqttc.disconnect()",
    "Code_level": "Function-level",
    "FSMID_for_test": 83,
    "right_result": "import paho.mqtt.client as mqtt\nimport time\nimport logging\n\ndef mqtt_publisher(host, topic, qos, clientid, username=None, disable_clean_session=False, password=None, port=None, nummsgs=10, delay=1.0, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=None, debug=False):\n    if use_tls:\n        if port is None:\n            port = 8883\n        if tls_version is not None:\n            tls_version_map = {\n                \"tlsv1\": mqtt.ssl.PROTOCOL_TLSv1,\n                \"tlsv1.1\": mqtt.ssl.PROTOCOL_TLSv1_1,\n                \"tlsv1.2\": mqtt.ssl.PROTOCOL_TLSv1_2\n            }\n            tls_version = tls_version_map.get(tls_version, mqtt.ssl.PROTOCOL_TLSv1_2)\n    else:\n        if port is None:\n            port = 1883\n\n    client = mqtt.Client(client_id=clientid, clean_session=not disable_clean_session)\n\n    if username and password:\n        client.username_pw_set(username, password)\n\n    if use_tls:\n        client.tls_set(ca_certs=cacerts, certfile=None, keyfile=None, tls_version=tls_version, ciphers=None)\n        if insecure:\n            client.tls_insecure_set(True)\n\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            print(\"Connected to MQTT Broker!\")\n        else:\n            print(f\"Connection failed with code {rc}\")\n\n    def on_publish(client, userdata, mid):\n        print(f\"Message {mid} published.\")\n\n    client.on_connect = on_connect\n    client.on_publish = on_publish\n\n    if debug:\n        logging.basicConfig(level=logging.DEBUG)\n        client.enable_logger(logging.getLogger())\n\n    client.connect(host, port, keepalive)\n    client.loop_start()\n\n    for i in range(nummsgs):\n        payload = f\"Message {i+1}\"\n        result = client.publish(topic, payload, qos=qos)\n        result.wait_for_completion()\n        print(f\"Published message: {payload}\")\n        time.sleep(delay)\n\n    client.loop_stop()\n    client.disconnect()"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection to a broker, publishes messages to specified topics with a given QoS level, and handles connection and message events asynchronously.\n\nFunction Description: The function `mqtt_publish` initializes an MQTT client, sets up callback functions for connection, message reception, and message publishing events, connects to a specified MQTT broker, starts an asynchronous network loop, and publishes messages to designated topics with a QoS level of 2. The function demonstrates basic MQTT publishing capabilities with event handling.\n\nInput: None (The function uses hardcoded values for broker address, port, topics, and messages)\n\nOutput: None (The function's effects are side-effects: publishing messages and printing status information through callback functions)\n\nNote: The function includes three callback functions:\n1. `on_connect`: Prints the connection reason code when connected to the broker\n2. `on_message`: Prints received messages (though none are expected in this publish-only example)\n3. `on_publish`: Prints the message ID when a message is published",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_publish(mqttc, obj, mid, reason_code, properties):\n    print(\"mid: \" + str(mid))\n\ndef mqtt_publish():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_publish = on_publish\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.loop_start()\n    (rc, mid) = mqttc.publish(\"tuple\", \"bar\", qos=2)\n    infot = mqttc.publish(\"class\", \"bar\", qos=2)\n    infot.wait_for_publish()",
    "Code_level": "Function-level",
    "FSMID_for_test": 83,
    "right_result": "import paho.mqtt.client as mqtt\n\ndef mqtt_publish():\n    client = mqtt.Client(client_id=\"publisher_client\")\n    client.on_connect = lambda client, userdata, flags, rc: print(f\"Connected with result code {rc}\")\n    client.on_message = lambda client, userdata, msg: print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n    client.on_publish = lambda client, userdata, mid: print(f\"Message published with ID {mid}\")\n\n    client.connect(\"broker.hivemq.com\", 1883)\n    client.loop_start()\n\n    topics = [\"test/topic1\", \"test/topic2\"]\n    messages = [\"Hello from MQTT publisher!\", \"This is another message\"]\n\n    for topic, message in zip(topics, messages):\n        client.publish(topic, message, qos=2)\n\n    client.loop_stop()"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a function to execute system commands using subprocess with pipe-based inter-process communication in Python.\n\nFunction Description: The function should run a system command in a new process, capture its output and error streams, and optionally return a boolean indicating success/failure instead of the output. It should use subprocess.PIPE for communication between processes.\n\nInput:\n- cmd: [str] - The system command to be executed\n- is_ok: [bool] (optional, default=False) - Flag to determine return type (True/False for success/failure if True, output/error if False)\n\nOutput:\n- If is_ok=True: [bool] - Returns True if command executed successfully (returncode=0), False otherwise\n- If is_ok=False: [tuple] - Returns a tuple containing (output, error) as bytes objects from stdout and stderr respectively",
    "Canonical_solution": "import subprocess\n\ndef run_cmd(cmd, is_ok=False):\n    \"\"\"\n    Run cmd\n    \"\"\"\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE,\n                         shell=True, executable='/bin/bash')\n\n    output, err = p.communicate()\n    if is_ok:\n        if p.returncode == 0:\n            return True\n        else:\n            return False\n\n    return output, err",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef execute_command(cmd, is_ok=False):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, error = process.communicate()\n    if is_ok:\n        return process.returncode == 0\n    return output, error"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: The task involves creating Python functions that utilize subprocess and pipes to execute shell commands and handle their input/output streams. The functions should be able to run commands directly or filter text through commands in a shell environment.\n\nFunction Description: \n\n1. `run_and_read`: Executes a shell command and captures its standard output and error streams, then returns the decoded output (prioritizing stdout over stderr if available).\n\n2. `filter_region`: Takes a text input, pipes it through a shell command (using the system's default shell or a specified shell), and returns the processed output from the command.\n\nInput:\n\n- For `run_and_read`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `cmd`: (str) - The shell command to execute\n\n- For `filter_region`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `text`: (str) - The text to be processed by the command\n  - `command`: (str) - The shell command to process the text\n\nOutput:\n\n- For `run_and_read`: (str) - The decoded output from the command (stdout if available, otherwise stderr)\n- For `filter_region`: (str) - The decoded output from the command after processing the input text",
    "Canonical_solution": "import os\nimport subprocess\nfrom subprocess import PIPE\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen([cmd],\n            stdout=PIPE,\n            stderr=PIPE,\n            shell=True).communicate()\n    try:\n        return (out or err).decode('utf-8')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, text, command):\n    shell = view.settings().get('VintageousEx_linux_shell')\n    shell = shell or os.path.expandvars(\"$SHELL\")\n    p = subprocess.Popen([shell, '-c', 'echo \"%s\" | %s' % (text, command)],\n             stderr=subprocess.PIPE,\n             stdout=subprocess.PIPE)\n    return p.communicate()[0][:-1].decode('utf-8')",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef run_and_read(view, cmd):\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    if result.stdout:\n        return result.stdout\n    else:\n        return result.stderr\n\ndef filter_region(view, text, command):\n    process = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    output, error = process.communicate(input=text)\n    if output:\n        return output\n    else:\n        return error"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a function that executes a command in a subprocess using Python's subprocess module, capturing and returning the output and error streams along with the return code.\n\nFunction Description: The function `runvol` executes a given command (constructed from Python interpreter path, volatility script path, and additional arguments) as a subprocess. It captures the standard output, standard error, and return code of the subprocess, then returns these values after printing them for debugging purposes.\n\nInput:\n- `args`: [List[str]] - Additional command-line arguments to pass to the volatility script\n- `volatility`: [str] - Path to the volatility script to be executed\n- `python`: [str] - Path to the Python interpreter to use for execution\n\nOutput:\n- Returns a tuple containing:\n  - `returncode`: [int] - The exit code of the subprocess\n  - `stdout`: [bytes] - The standard output of the subprocess\n  - `stderr`: [bytes] - The standard error of the subprocess",
    "Canonical_solution": "import os\nimport subprocess\nimport sys\n\ndef runvol(args, volatility, python):\n    volpy = volatility\n    python_cmd = python\n\n    cmd = [python_cmd, volpy] + args\n    print(\" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = p.communicate()\n    print(\"stdout:\")\n    sys.stdout.write(str(stdout))\n    print(\"\")\n    print(\"stderr:\")\n    sys.stdout.write(str(stderr))\n    print(\"\")\n\n    return p.returncode, stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef runvol(args, volatility, python):\n    command = [python, volatility] + args\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    returncode = process.returncode\n    print(f\"STDOUT: {stdout}\")\n    print(f\"STDERR: {stderr}\")\n    print(f\"RETURN CODE: {returncode}\")\n    return (returncode, stdout, stderr)"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Write a Python function that executes a Perl script (conlleval) via subprocess to evaluate model scores from a given file and returns the accuracy, precision, recall, and F1 score.\n\nFunction Description: The function uses subprocess.PIPE to create a pipe for inter-process communication with a Perl script. It starts the Perl process, feeds it input from a specified file, captures the output, and parses the results to extract evaluation metrics.\n\nInput:\n- path: str - The file path containing the input data to be evaluated by the Perl script\n\nOutput:\n- tuple[float, float, float, float] - A tuple containing four float values representing accuracy, precision, recall, and F1 score in that order",
    "Canonical_solution": "import subprocess\n\ndef scores(path):\n    bashCommand = 'perl conlleval'\n    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE,\n                               stdin=open(path))\n    output, error = process.communicate()\n    output = output.decode().split('\\n')[1].split('%; ')\n    output = [out.split(' ')[-1] for out in output]\n    acc, prec, recall, fb1 = tuple(output)\n    return float(acc), float(prec), float(recall), float(fb1)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef evaluate_model_scores(path):\n    perl_script = \"conlleval\"\n    with open(path, 'r') as f:\n        input_data = f.read()\n    process = subprocess.Popen([perl_script], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate(input=input_data)\n    if stderr:\n        raise RuntimeError(f\"Error executing Perl script: {stderr}\")\n    lines = stdout.splitlines()\n    for line in lines:\n        if line.startswith(\"accuracy\"):\n            accuracy = float(line.split()[-1])\n        elif line.startswith(\"precision\"):\n            precision = float(line.split()[-1])\n        elif line.startswith(\"recall\"):\n            recall = float(line.split()[-1])\n        elif line.startswith(\"F1_score\"):\n            f1 = float(line.split()[-1])\n    return (accuracy, precision, recall, f1)"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Implement a set of steganography cracking classes that utilize subprocess communication to interact with different steganography tools (steghide, outguess, outguess-0.13, and openstego) for extracting hidden data from files.\n\nClass Description: Each class implements a specific steganography tool cracker using subprocess communication to interact with the respective command-line tool. The classes follow a similar pattern of spawning a subprocess, communicating with it via pipes, and analyzing the output to determine if the correct passphrase was found.\n\nAttributes:\nNone (These are stateless classes that don't maintain instance attributes)\n\nMethods:\n\nMethod1: crack_function(stego_file: str, passphrase: str) -> None - Attempts to extract hidden data from the given stego_file using the provided passphrase. Prints success message and exits if found, otherwise continues silently.\n\nClasses:\n\n1. ThreadedSteghideCracker:\n   - Uses 'steghide' command-line tool\n   - Checks for embedded file information in output\n   - Prints extraction command on success\n\n2. ThreadedOutguessCracker:\n   - Uses 'outguess' command-line tool\n   - Creates temporary file for output\n   - Validates extracted data for ASCII content\n   - Prints secret message and cleanup command on success\n\n3. ThreadedOutguess013Cracker:\n   - Uses 'outguess-0.13' command-line tool\n   - Similar functionality to ThreadedOutguessCracker\n   - Handles older version of outguess\n\n4. ThreadedOpenstegoCracker:\n   - Uses 'openstego' command-line tool\n   - Checks stderr for extraction success\n   - Prints extracted file path on success\n\nAll methods:\n- Use subprocess.Popen with stdout/stderr pipes\n- Process communication via communicate()\n- Include proper error handling\n- Exit program on successful extraction\n- Include cleanup for temporary files where applicable",
    "Canonical_solution": "import subprocess\nimport re\nimport sys\nimport os\nimport md5\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['steghide',\n                                  'info',\n                                  stego_file,\n                                  '-p', passphrase],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"embedded file \\\"(.*)\\\"\", out)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `steghide extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess-0.13',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['openstego', 'extract',\n                                  '-p', passphrase,\n                                  '-sf', stego_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"Extracted file: (.*)\", err)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `openstego extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport os\nimport tempfile\nimport sys\n\nclass ThreadedSteghideCracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            process = subprocess.Popen(\n                ['steghide', 'extract', '-sf', stego_file, '-p', passphrase],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                text=True\n            )\n            stdout, stderr = process.communicate()\n            if \"successfully extracted\" in stdout or \"successfully extracted\" in stderr:\n                print(f\"[+] Steghide extraction successful with passphrase: {passphrase}\")\n                print(f\"Command used: steghide extract -sf {stego_file} -p {passphrase}\")\n                sys.exit(0)\n        except Exception as e:\n            pass\n\nclass ThreadedOutguessCracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_path = temp_file.name\n                process = subprocess.Popen(\n                    ['outguess', '-r', stego_file, '-k', passphrase, temp_path],\n                    stdout=subprocess.PIPE,\n                    stderr=subprocess.PIPE,\n                    text=True\n                )\n                stdout, stderr = process.communicate()\n                if process.returncode == 0 and os.path.exists(temp_path):\n                    with open(temp_path, 'r') as f:\n                        content = f.read()\n                    if content.isascii():\n                        print(f\"[+] Outguess extraction successful with passphrase: {passphrase}\")\n                        print(f\"Secret message: {content}\")\n                        print(f\"Cleanup command: rm {temp_path}\")\n                        sys.exit(0)\n        except Exception as e:\n            pass\n        finally:\n            if 'temp_path' in locals() and os.path.exists(temp_path):\n                os.remove(temp_path)\n\nclass ThreadedOutguess013Cracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_path = temp_file.name\n                process = subprocess.Popen(\n                    ['outguess-0.13', '-r', stego_file, '-k', passphrase, temp_path],\n                    stdout=subprocess.PIPE,\n                    stderr=subprocess.PIPE,\n                    text=True\n                )\n                stdout, stderr = process.communicate()\n                if process.returncode == 0 and os.path.exists(temp_path):\n                    with open(temp_path, 'r') as f:\n                        content = f.read()\n                    if content.isascii():\n                        print(f\"[+] Outguess-0.13 extraction successful with passphrase: {passphrase}\")\n                        print(f\"Secret message: {content}\")\n                        print(f\"Cleanup command: rm {temp_path}\")\n                        sys.exit(0)\n        except Exception as e:\n            pass\n        finally:\n            if 'temp_path' in locals() and os.path.exists(temp_path):\n                os.remove(temp_path)\n\nclass ThreadedOpenstegoCracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_path = temp_file.name\n                process = subprocess.Popen(\n                    ['openstego', 'extract', '-f', stego_file, '-p', passphrase, '-o', temp_path],\n                    stdout=subprocess.PIPE,\n                    stderr=subprocess.PIPE,\n                    text=True\n                )\n                stdout, stderr = process.communicate()\n                if \"Extracted successfully\" in stderr:\n                    print(f\"[+] Openstego extraction successful with passphrase: {passphrase}\")\n                    print(f\"Extracted file path: {temp_path}\")\n                    sys.exit(0)\n        except Exception as e:\n            pass\n        finally:\n            if 'temp_path' in locals() and os.path.exists(temp_path):\n                os.remove(temp_path)"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a class to collect and analyze OSSEC (Open Source Host-based Intrusion Detection System) agent states using subprocess communication.\n\nClass Description: The OssecCollector class interacts with the OSSEC agent control utility to retrieve agent status information and parse the results into a structured format. It handles command execution with optional sudo privileges and processes the output to count agent states.\n\nAttributes:\n- bin_path: [str] - Path to the OSSEC agent_control binary (default: '/var/ossec/bin/agent_control')\n- use_sudo: [bool] - Flag indicating whether to use sudo for command execution (default: True)\n- sudo_cmd: [str] - Path to the sudo binary (default: '/usr/bin/sudo')\n\nMethods:\n- __init__(bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None - Initializes the collector with configuration paths\n- collect() -> dict - Executes the agent control command, processes the output, and returns a dictionary counting agent states by status\n\nThe implementation should use subprocess.PIPE for inter-process communication and handle potential execution errors appropriately.",
    "Canonical_solution": "import subprocess\nimport re\nfrom diamond.collector import str_to_bool\n\nclass OssecCollector:\n    def __init__(self, bin_path='/var/ossec/bin/agent_control', use_sudo=True, sudo_cmd='/usr/bin/sudo'):\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self):\n        command = [self.bin_path, '-l']\n\n        if str_to_bool(self.use_sudo):\n            command.insert(0, self.sudo_cmd)\n\n        try:\n            p = subprocess.Popen(command, stdout=subprocess.PIPE)\n            res = p.communicate()[0]\n        except Exception as e:\n            raise Exception('Unable to exec cmd: %s, because %s' % (' '.join(command), str(e)))\n\n        if res == '':\n            raise Exception('Empty result from exec cmd: %s' % (' '.join(command)))\n\n        states = {}\n        for line in res.split(\"\\n\"):\n            if not line.startswith('   ID: '):\n                continue\n            fragments = line.split(',')\n            state = fragments[-1].lstrip()\n            if state not in states:\n                states[state] = 1\n            else:\n                states[state] += 1\n\n        return states",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\nclass OssecCollector:\n    def __init__(self, bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None:\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self) -> dict:\n        command = [self.bin_path, 'list']\n        if self.use_sudo:\n            command = [self.sudo_cmd, '-n', '--'] + command\n\n        try:\n            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                raise RuntimeError(f\"Command failed with error: {stderr.decode()}\")\n            \n            output = stdout.decode().strip()\n            lines = output.splitlines()\n            status_counts = {'active': 0, 'pending': 0, 'disconnected': 0, 'unknown': 0}\n\n            for line in lines[1:]:  # Skip header line\n                parts = line.split()\n                if len(parts) < 4:\n                    continue\n                status = parts[3].lower()\n                if status in status_counts:\n                    status_counts[status] += 1\n                else:\n                    status_counts['unknown'] += 1\n\n            return status_counts\n        except Exception as e:\n            print(f\"Error collecting OSSEC agent states: {e}\")\n            return {'error': str(e)}"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Python class that checks the installed version of npm (Node Package Manager) on the system using subprocess communication.\n\nClass Description: The Segment class is designed to retrieve and store the version of npm installed on the system. It uses subprocess.PIPE to communicate with the system process that runs the npm version command.\n\nAttributes:\nversion: [str] - Stores the version of npm retrieved from the system process. Initialized as None and updated after running the version check.\n\nMethods:\nrun: [run]() -> [None] - Executes the npm --version command using subprocess.Popen, captures the output, decodes it, and stores the result in the version attribute. Handles OSError exceptions if the command fails.\nget_version: [get_version]() -> [str] - Returns the stored npm version. Returns None if the version check was not successful or not run.",
    "Canonical_solution": "import subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            p1 = subprocess.Popen([\"npm\", \"--version\"], stdout=subprocess.PIPE)\n            self.version = p1.communicate()[0].decode(\"utf-8\").rstrip()\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            process = subprocess.Popen(['npm', '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            output, error = process.communicate()\n            if process.returncode == 0:\n                self.version = output.decode().strip()\n            else:\n                self.version = None\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement an asynchronous Kafka consumer in Python using the aiokafka library to subscribe to topics, consume messages, and handle batch processing with configurable timeouts and maximum records.\n\nClass Description: The LogicSubscriber class is an abstract base class that provides core functionality for consuming messages from Kafka topics asynchronously. It handles connection management, message consumption, and error handling. The DefaultSubscriber and BatchSubscriber classes extend this functionality for single-message and batch-message consumption respectively.\n\nAttributes:\n\ntopics: Sequence[str] - List of Kafka topics to subscribe to\ngroup_id: Optional[str] - Consumer group ID for Kafka\nconsumer: Optional[AIOKafkaConsumer] - The aiokafka consumer instance\npartitions: Iterable[TopicPartition] - Specific partitions to consume from\n__connection_args: Dict[str, Any] - Connection arguments for Kafka consumer\n\nMethods:\n\n__init__(*topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None - Initializes the subscriber with topics, group ID, connection args, partitions, and message processing callables.\n\nstart() -> None - Creates and starts the Kafka consumer, subscribing to topics or assigning partitions.\n\nclose() -> None - Stops and cleans up the Kafka consumer.\n\nget_msg() -> MsgType - Abstract method to be implemented by subclasses for retrieving messages.\n\n_consume() -> None - Main consumption loop that processes messages and handles errors.\n\nDefaultSubscriber Methods:\n\nget_msg() -> ConsumerRecord - Retrieves a single message from Kafka.\n\nBatchSubscriber Methods:\n\n__init__(*topics: str, batch_timeout_ms: int, max_records: Optional[int], **kwargs: Any) -> None - Extends initialization with batch-specific parameters.\n\nget_msg() -> Tuple[ConsumerRecord, ...] - Retrieves a batch of messages from Kafka with configurable timeout and maximum records.",
    "Canonical_solution": "from typing import Optional, Iterable, Sequence, Dict, Any, Tuple\nfrom abc import ABC, abstractmethod\nfrom itertools import chain\nimport anyio\nfrom aiokafka import ConsumerRecord, TopicPartition\nfrom aiokafka.errors import ConsumerStoppedError, KafkaError\nfrom faststream.broker.subscriber.usecase import SubscriberUsecase\nfrom faststream.broker.types import AsyncCallable, BrokerMiddleware, MsgType\nfrom faststream.broker.utils import process_msg\nfrom faststream.kafka.message import KafkaAckableMessage, KafkaMessage\nfrom faststream.kafka.parser import AioKafkaBatchParser, AioKafkaParser\n\nclass LogicSubscriber(ABC, SubscriberUsecase[MsgType]):\n    topics: Sequence[str]\n    group_id: Optional[str]\n    consumer: Optional[\"AIOKafkaConsumer\"]\n\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        super().__init__(\n            default_parser=default_parser,\n            default_decoder=default_decoder,\n        )\n        self.topics = topics\n        self.partitions = partitions\n        self.group_id = group_id\n        self.__connection_args = connection_args\n        self.consumer = None\n\n    async def start(self) -> None:\n        self.consumer = consumer = self.builder(\n            group_id=self.group_id,\n            client_id=self.client_id,\n            **self.__connection_args,\n        )\n\n        if self.topics:\n            consumer.subscribe(topics=self.topics)\n        elif self.partitions:\n            consumer.assign(partitions=self.partitions)\n\n        await consumer.start()\n\n    async def close(self) -> None:\n        if self.consumer is not None:\n            await self.consumer.stop()\n            self.consumer = None\n\n    @abstractmethod\n    async def get_msg(self) -> MsgType:\n        raise NotImplementedError()\n\n    async def _consume(self) -> None:\n        while self.running:\n            try:\n                msg = await self.get_msg()\n                if msg:\n                    await self.consume_one(msg)\n            except KafkaError:\n                await anyio.sleep(5)\n            except ConsumerStoppedError:\n                return\n\nclass DefaultSubscriber(LogicSubscriber[ConsumerRecord]):\n    async def get_msg(self) -> ConsumerRecord:\n        assert self.consumer, \"Consumer not initialized\"\n        return await self.consumer.getone()\n\nclass BatchSubscriber(LogicSubscriber[Tuple[ConsumerRecord, ...]]):\n    def __init__(\n        self,\n        *topics: str,\n        batch_timeout_ms: int,\n        max_records: Optional[int],\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(*topics, **kwargs)\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def get_msg(self) -> Tuple[ConsumerRecord, ...]:\n        assert self.consumer, \"Consumer not initialized\"\n        messages = await self.consumer.getmany(\n            timeout_ms=self.batch_timeout_ms,\n            max_records=self.max_records,\n        )\n        return tuple(chain(*messages.values())) if messages else ()",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "import asyncio\nfrom typing import (\n    Any,\n    AsyncCallable,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    TypeVar,\n    Union,\n)\nfrom aiokafka import AIOKafkaConsumer, ConsumerRecord\nfrom aiokafka.structs import TopicPartition\n\nMsgType = TypeVar(\"MsgType\")\n\nclass LogicSubscriber:\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        self.topics = topics\n        self.group_id = group_id\n        self.consumer: Optional[AIOKafkaConsumer] = None\n        self.partitions = partitions\n        self.__connection_args = connection_args\n        self.default_parser = default_parser\n        self.default_decoder = default_decoder\n\n    async def start(self) -> None:\n        self.consumer = AIOKafkaConsumer(\n            *self.topics,\n            group_id=self.group_id,\n            **self.__connection_args,\n        )\n        await self.consumer.start()\n        if self.partitions:\n            await self.consumer.assign(self.partitions)\n\n    async def close(self) -> None:\n        if self.consumer:\n            await self.consumer.stop()\n\n    async def _consume(self) -> None:\n        try:\n            async for msg in self.consumer:\n                try:\n                    parsed_msg = await self.default_parser(msg)\n                    decoded_msg = await self.default_decoder(parsed_msg)\n                    await self._process(decoded_msg)\n                except Exception as e:\n                    print(f\"Error processing message: {e}\")\n        except Exception as e:\n            print(f\"Consumer error: {e}\")\n\n    async def _process(self, msg: MsgType) -> None:\n        raise NotImplementedError\n\n    def get_msg(self) -> MsgType:\n        raise NotImplementedError\n\nclass DefaultSubscriber(LogicSubscriber):\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        super().__init__(\n            *topics,\n            group_id=group_id,\n            connection_args=connection_args,\n            partitions=partitions,\n            default_parser=default_parser,\n            default_decoder=default_decoder,\n        )\n\n    async def _process(self, msg: ConsumerRecord) -> None:\n        print(f\"Received single message: {msg}\")\n\n    def get_msg(self) -> ConsumerRecord:\n        return self.consumer.get_message()\n\nclass BatchSubscriber(LogicSubscriber):\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        batch_timeout_ms: int,\n        max_records: Optional[int],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        super().__init__(\n            *topics,\n            group_id=group_id,\n            connection_args=connection_args,\n            partitions=partitions,\n            default_parser=default_parser,\n            default_decoder=default_decoder,\n        )\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def _process(self, msgs: Tuple[ConsumerRecord, ...]) -> None:\n        print(f\"Received batch of messages: {msgs}\")\n\n    def get_msg(self) -> Tuple[ConsumerRecord, ...]:\n        return self.consumer.get_messages(timeout_ms=self.batch_timeout_ms, max_records=self.max_records)"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Create a function that executes a shell command using Python's subprocess module and returns the output, error, and process object.\n\nFunction Description: The function SC (Shell Command) takes a shell command as input, executes it using subprocess.Popen, and captures both the standard output and standard error streams. It returns a tuple containing these outputs along with the process object for further interaction if needed.\n\nInput: \n- cmd: [str] - The shell command to be executed as a string.\n\nOutput: \n- Returns a tuple containing:\n  - out: [bytes] - The standard output of the executed command.\n  - err: [bytes] - The standard error of the executed command.\n  - proc: [subprocess.Popen] - The process object representing the executed command.",
    "Canonical_solution": "import os\nimport subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    [out, err] = proc.communicate()\n    return (out, err, proc)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = proc.communicate()\n    return out, err, proc"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Create a Python class that collects and parses statistics from the amavisd-agent program using subprocess communication.\n\nClass Description: The AmavisCollector class is designed to interface with the amavisd-agent program to collect mail processing statistics. It uses subprocess.PIPE to communicate with the agent process and regular expressions to parse the output. The class supports optional sudo execution for privilege escalation.\n\nAttributes:\n\nmatchers: [List[re.Pattern]] - A list of compiled regular expressions used to parse different formats of statistics from amavisd-agent output.\nconfig: [Dict[str, Any]] - Configuration dictionary containing paths to executables and sudo settings.\n\nMethods:\n\n__init__: [Name](amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None - Initializes the collector with configuration parameters for the amavisd-agent executable and optional sudo settings.\ncollect: [Name]() -> Generator[Tuple[str, str, str], None, None] - Executes the amavisd-agent process, captures its output, and yields parsed statistics as tuples of (metric_name, metric_type, value). Raises an exception if the process cannot be executed.",
    "Canonical_solution": "import os\nimport subprocess\nimport re\n\nclass AmavisCollector:\n    matchers = [\n        re.compile(r'^\\s*(?P<name>[\\w]+)\\s+(?P<time>[\\d]+) s\\s+'\n                   r'(?P<frequency>[\\d.]+) s/msg\\s+\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<count>[\\d]+)\\s+'\n                   r'(?P<frequency>[\\d.]+)/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<size>[\\d]+)MB\\s+'\n                   r'(?P<frequency>[\\d.]+)MB/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n    ]\n\n    def __init__(self, amavisd_exe='/usr/sbin/amavisd-agent', use_sudo=False, sudo_exe='/usr/bin/sudo', sudo_user='amavis'):\n        self.config = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n\n    def collect(self):\n        try:\n            if self.config['use_sudo']:\n                cmdline = [\n                    self.config['sudo_exe'], '-u', self.config['sudo_user'],\n                    '--', self.config['amavisd_exe'], '-c', '1'\n                ]\n            else:\n                cmdline = [self.config['amavisd_exe'], '-c', '1']\n                \n            agent = subprocess.Popen(cmdline, stdout=subprocess.PIPE)\n            agent_out = agent.communicate()[0]\n            lines = agent_out.strip().split(os.linesep)\n            \n            for line in lines:\n                for rex in self.matchers:\n                    res = rex.match(line)\n                    if res:\n                        groups = res.groupdict()\n                        name = groups['name']\n                        for metric, value in groups.items():\n                            if metric == 'name':\n                                continue\n                            yield (name, metric, value)\n\n        except OSError as err:\n            raise Exception(f\"Could not run {self.config['amavisd_exe']}: {err}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import re\nimport subprocess\nfrom typing import List, Dict, Any, Generator, Tuple\n\nclass AmavisCollector:\n    def __init__(self, amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis'):\n        self.config = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n        self.matchers = [\n            re.compile(r'(\\w+)\\s+(\\w+)\\s+(\\d+)'),\n            re.compile(r'(\\w+)\\s+(\\w+)\\s+([+-]?\\d+\\.?\\d*)')\n        ]\n\n    def collect(self) -> Generator[Tuple[str, str, str], None, None]:\n        try:\n            cmd = []\n            if self.config['use_sudo']:\n                cmd = [self.config['sudo_exe'], '-u', self.config['sudo_user'], self.config['amavisd_exe']]\n            else:\n                cmd = [self.config['amavisd_exe']]\n\n            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            output, _ = process.communicate()\n            if process.returncode != 0:\n                raise RuntimeError(f\"Failed to execute {cmd}: return code {process.returncode}\")\n\n            for line in output.splitlines():\n                for matcher in self.matchers:\n                    match = matcher.match(line)\n                    if match:\n                        metric_name, metric_type, value = match.groups()\n                        yield (metric_name, metric_type, value)\n        except Exception as e:\n            raise RuntimeError(f\"Error collecting statistics: {e}\") from e"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: The task involves creating Python functions for executing system commands and processing their output through inter-process communication (IPC) using pipes. The functions should handle command execution, output decoding, and temporary file management for command processing.\n\nFunction Description: The provided functions enable executing system commands through subprocesses, capturing and decoding their output, and processing text data through temporary files when needed. The functions handle Windows-specific configurations and character encoding.\n\nInput:\n- For run_and_read(view, cmd):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - cmd: [str] - The command string to execute via cmd.exe\n\n- For filter_region(view, txt, command):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - txt: [str] - The text content to process\n  - command: [str] - The command to process the text with\n\n- For get_startup_info() and get_oem_cp(): No input parameters\n\nOutput:\n- For run_and_read(): [str] - The decoded output from the command execution\n- For filter_region(): [str] - The processed text output from the command\n- For get_startup_info(): [subprocess.STARTUPINFO] - Windows process startup configuration\n- For get_oem_cp(): [str] - The OEM code page identifier as a string",
    "Canonical_solution": "import subprocess\nfrom subprocess import PIPE\nimport os\nimport tempfile\nimport ctypes\n\ndef get_startup_info():\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    return startupinfo\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen(['cmd.exe', '/c', cmd],\n                                stdout=PIPE,\n                                stderr=PIPE,\n                                shell=True,\n                                startupinfo=get_startup_info()).communicate()\n    try:\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, txt, command):\n    try:\n        contents = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)\n        contents.write(txt.encode('utf-8'))\n        contents.close()\n\n        script = tempfile.NamedTemporaryFile(suffix='.bat', delete=False)\n        script.write(('@echo off\\ntype %s | %s' % (contents.name, command)).encode('utf-8'))\n        script.close()\n\n        p = subprocess.Popen([script.name],\n                             stdout=PIPE,\n                             stderr=PIPE,\n                             startupinfo=get_startup_info())\n\n        out, err = p.communicate()\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')[:-1].strip()\n    finally:\n        os.remove(script.name)\n        os.remove(contents.name)\n\ndef get_oem_cp():\n    codepage = ctypes.windll.kernel32.GetOEMCP()\n    return str(codepage)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport os\nimport tempfile\n\ndef run_and_read(view, cmd):\n    startup_info = get_startup_info()\n    process = subprocess.Popen(\n        ['cmd.exe', '/c', cmd],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        startupinfo=startup_info,\n        encoding=get_oem_cp(),\n        errors='replace'\n    )\n    stdout, stderr = process.communicate()\n    if process.returncode != 0:\n        return stderr or \"Error executing command\"\n    return stdout or \"\"\n\ndef filter_region(view, txt, command):\n    with tempfile.NamedTemporaryFile(mode='w+', delete=False, encoding='utf-8') as temp:\n        temp.write(txt)\n        temp.flush()\n        temp_path = temp.name\n    try:\n        startup_info = get_startup_info()\n        process = subprocess.Popen(\n            ['cmd.exe', '/c', command, temp_path],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            startupinfo=startup_info,\n            encoding=get_oem_cp(),\n            errors='replace'\n        )\n        stdout, stderr = process.communicate()\n        if process.returncode != 0:\n            return stderr or \"Error processing text\"\n        return stdout or \"\"\n    finally:\n        os.remove(temp_path)\n\ndef get_startup_info():\n    import sys\n    if sys.platform == 'win32':\n        import subprocess\n        si = subprocess.STARTUPINFO()\n        si.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        return si\n    return None\n\ndef get_oem_cp():\n    import sys\n    if sys.platform == 'win32':\n        return str(sys.stdout.encoding or 'cp850')\n    return 'utf-8'"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a class that interacts with partclone utility to retrieve and parse partition information from disk image files, handling potential compression and chaining multiple subprocesses together.\n\nClass Description: The Partclone class provides static methods for working with partclone disk images, particularly focused on extracting partition information through a chain of subprocess operations.\n\nMethods:\n\nMethod1: get_partclone_info_dict(abs_partclone_image_list: list, image_key: str, compression: str) -> dict - Retrieves partition information from partclone image files by executing a chain of subprocess commands (cat, decompression, and partclone.info). Returns a dictionary containing parsed partition information.\n\nInput:\n- abs_partclone_image_list: List of absolute paths to partclone image files\n- image_key: String identifier for the image\n- compression: String specifying compression type (used for decompression)\n\nOutput:\n- Dictionary containing parsed partition information, with 'filesystem' as a minimum key (set to \"<unknown>\" if parsing fails)\n\nMethod2: parse_partclone_info_output(output: str) -> dict - [Implied but not shown in code] Parses the output string from partclone.info command into a structured dictionary. This would be a helper method called by get_partclone_info_dict.\n\nInput:\n- output: String containing the raw output from partclone.info command\n\nOutput:\n- Dictionary containing structured partition information extracted from the output",
    "Canonical_solution": "import collections\nimport subprocess\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        env = utility.Utility.get_env_C_locale()\n        proc = collections.OrderedDict()\n        cat_cmd_list = [\"cat\"] + abs_partclone_image_list\n        decompression_cmd_list = utility.Utility.get_decompression_command_list(compression)\n        partclone_info_cmd_list = [\"partclone.info\", \"--source\", \"-\"]\n        utility.Utility.print_cli_friendly(\"partclone \", [cat_cmd_list, decompression_cmd_list, partclone_info_cmd_list])\n        proc['cat_partclone' + image_key] = subprocess.Popen(cat_cmd_list, stdout=subprocess.PIPE, env=env,\n                                                                          encoding='utf-8')\n        proc['decompression' + image_key] = subprocess.Popen(decompression_cmd_list,\n                                                                          stdin=proc[\n                                                                              'cat_partclone' + image_key].stdout,\n                                                                          stdout=subprocess.PIPE, env=env, encoding='utf-8')\n        proc['partclone_info' + image_key] = subprocess.Popen(partclone_info_cmd_list,\n                                                                           stdin=proc[\n                                                                               'decompression' + image_key].stdout,\n                                                                           stdout=subprocess.PIPE,\n                                                                           stderr=subprocess.PIPE, env=env,\n                                                                           encoding='utf-8')\n        proc['cat_partclone' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        proc['decompression' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        output, err = proc['partclone_info' + image_key].communicate()\n        print(\"partclone_info: Exit output \" + str(output) + \"stderr \" + str(err))\n        partclone_info_dict = Partclone.parse_partclone_info_output(err)\n        if len(partclone_info_dict) == 0:\n            print(abs_partclone_image_list[0] + \": Could not read partclone info dict for \" + image_key + \". Treating it as a dd image.\")\n            partclone_info_dict['filesystem'] = \"<unknown>\"\n        return partclone_info_dict",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport shlex\nimport re\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        info_dict = {'filesystem': '<unknown>', 'image_key': image_key}\n        for image_path in abs_partclone_image_list:\n            try:\n                if compression == 'gzip':\n                    decompress_cmd = ['gzip', '-cd', image_path]\n                elif compression == 'bzip2':\n                    decompress_cmd = ['bzip2', '-cd', image_path]\n                elif compression == 'xz':\n                    decompress_cmd = ['xz', '-cd', image_path]\n                else:\n                    decompress_cmd = ['cat', image_path]\n\n                partclone_info_cmd = ['partclone.info', '-i', '-', '-d']\n                process = subprocess.Popen(decompress_cmd, stdout=subprocess.PIPE)\n                partclone_process = subprocess.Popen(partclone_info_cmd, stdin=process.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n                process.stdout.close()\n                output, error = partclone_process.communicate()\n\n                if partclone_process.returncode == 0:\n                    parsed_info = Partclone.parse_partclone_info_output(output)\n                    info_dict.update(parsed_info)\n                else:\n                    print(f\"Error retrieving partition info from {image_path}: {error}\")\n            except Exception as e:\n                print(f\"Exception processing {image_path}: {str(e)}\")\n        return info_dict\n\n    @staticmethod\n    def parse_partclone_info_output(output):\n        info = {'filesystem': '<unknown>'}\n        lines = output.strip().split('\\n')\n        for line in lines:\n            if line.startswith('Filesystem:'):\n                fs_type = line.split(':', 1)[1].strip()\n                info['filesystem'] = fs_type\n            elif line.startswith('Partition size:'):\n                size = line.split(':', 1)[1].strip()\n                info['partition_size'] = size\n            elif line.startswith('Block size:'):\n                block_size = line.split(':', 1)[1].strip()\n                info['block_size'] = block_size\n            elif line.startswith('Number of blocks:'):\n                num_blocks = line.split(':', 1)[1].strip()\n                info['num_blocks'] = num_blocks\n        return info"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for making JSON-RPC requests to a server, handling authentication, connection management, and response processing.\n\nClass Description: The BaseProxy class provides functionality to establish HTTP/HTTPS connections to a JSON-RPC server, send requests with proper authentication, and process responses. It handles connection lifecycle, request formatting, error handling, and response parsing.\n\nAttributes:\n\n__conn: [httplib.HTTPConnection or httplib.HTTPSConnection] - The underlying HTTP connection object\n__service_url: [str] - The complete service URL including protocol, host, port, and path\n__url: [urllib.parse.ParseResult] - Parsed URL components of the service URL\n__id_count: [int] - Counter for JSON-RPC request IDs\n__auth_header: [bytes or None] - Basic authentication header if credentials are provided\n\nMethods:\n\n__init__: [constructor](service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None) -> [None] - Initializes the proxy with connection parameters, parses the URL, and sets up authentication\n_call: [_call](service_name, *args) -> [Any] - Makes a JSON-RPC call to the specified service method with given arguments\n_get_response: [_get_response]() -> [dict] - Retrieves and parses the HTTP response from the server\nclose: [close]() -> [None] - Closes the active connection\n__del__: [destructor]() -> [None] - Ensures connection is closed when the object is destroyed",
    "Canonical_solution": "import http.client as httplib\nimport base64\nimport json\nimport urllib.parse as urlparse\n\nDEFAULT_USER_AGENT = \"AuthServiceProxy/0.1\"\nDEFAULT_HTTP_TIMEOUT = 30\n\nclass BaseProxy:\n    def __init__(self, service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None):\n        self.__conn = None\n        authpair = None\n\n        if service_url is None:\n            # Configuration and URL setup logic omitted for brevity\n            pass\n        else:\n            url = urlparse.urlparse(service_url)\n            authpair = \"%s:%s\" % (url.username, url.password)\n\n        self.__service_url = service_url\n        self.__url = urlparse.urlparse(service_url)\n\n        if self.__url.scheme not in ('http', 'https'):\n            raise ValueError('Unsupported URL scheme %r' % self.__url.scheme)\n\n        if self.__url.port is None:\n            port = httplib.HTTPS_PORT if self.__url.scheme == 'https' else httplib.HTTP_PORT\n        else:\n            port = self.__url.port\n        self.__id_count = 0\n\n        if authpair is None:\n            self.__auth_header = None\n        else:\n            authpair = authpair.encode('utf8')\n            self.__auth_header = b\"Basic \" + base64.b64encode(authpair)\n\n        if connection:\n            self.__conn = connection\n        else:\n            if self.__url.scheme == 'https':\n                self.__conn = httplib.HTTPSConnection(self.__url.hostname, port=port, timeout=timeout)\n            else:\n                self.__conn = httplib.HTTPConnection(self.__url.hostname, port=port, timeout=timeout)\n\n    def _call(self, service_name, *args):\n        self.__id_count += 1\n\n        postdata = json.dumps({\n            'version': '1.1',\n            'method': service_name,\n            'params': args,\n            'id': self.__id_count\n        })\n\n        headers = {\n            'Host': self.__url.hostname,\n            'User-Agent': DEFAULT_USER_AGENT,\n            'Content-type': 'application/json',\n        }\n\n        if self.__auth_header is not None:\n            headers['Authorization'] = self.__auth_header\n\n        self.__conn.request('POST', self.__url.path, postdata, headers)\n        response = self._get_response()\n        \n        err = response.get('error')\n        if err is not None:\n            if isinstance(err, dict):\n                raise JSONRPCError({\n                    'code': err.get('code', -345),\n                    'message': err.get('message', 'error message not specified')\n                })\n            raise JSONRPCError({'code': -344, 'message': str(err)})\n        elif 'result' not in response:\n            raise JSONRPCError({\n                'code': -343, 'message': 'missing JSON-RPC result'\n            })\n        else:\n            return response['result']\n\n    def _get_response(self):\n        http_response = self.__conn.getresponse()\n        if http_response is None:\n            raise JSONRPCError({\n                'code': -342, 'message': 'missing HTTP response from server'\n            })\n\n        rdata = http_response.read().decode('utf8')\n        try:\n            return json.loads(rdata)\n        except Exception:\n            raise JSONRPCError({\n                'code': -342,\n                'message': ('non-JSON HTTP response with \\'%i %s\\' from server: \\'%.20s%s\\''\n                            % (http_response.status, http_response.reason,\n                               rdata, '...' if len(rdata) > 20 else ''))\n            })\n\n    def close(self):\n        if self.__conn is not None:\n            self.__conn.close()\n\n    def __del__(self):\n        if self.__conn is not None:\n            self.__conn.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import httplib\nimport urllib.parse\nimport json\nimport os\n\nclass BaseProxy:\n    def __init__(self, service_url=None, service_port=None, btc_conf_file=None, timeout=30, connection=None):\n        self.__conn = connection\n        self.__service_url = service_url\n        self.__url = urllib.parse.urlparse(service_url)\n        self.__id_count = 0\n        self.__auth_header = None\n        if btc_conf_file:\n            with open(btc_conf_file, 'r') as f:\n                for line in f:\n                    if line.startswith('rpcuser='):\n                        rpc_user = line.strip().split('=')[1]\n                    elif line.startswith('rpcpassword='):\n                        rpc_password = line.strip().split('=')[1]\n                if rpc_user and rpc_password:\n                    self.__auth_header = ('Basic ' + urllib.parse.quote(rpc_user + ':' + rpc_password)).encode('utf-8')\n\n    def _call(self, service_name, *args):\n        self.__id_count += 1\n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": service_name,\n            \"params\": args,\n            \"id\": self.__id_count\n        }\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": self.__auth_header\n        }\n        body = json.dumps(payload).encode('utf-8')\n        if not self.__conn:\n            if self.__url.scheme == 'https':\n                self.__conn = httplib.HTTPSConnection(self.__url.hostname, self.__url.port or service_port, timeout=timeout)\n            else:\n                self.__conn = httplib.HTTPConnection(self.__url.hostname, self.__url.port or service_port, timeout=timeout)\n        self.__conn.request(\"POST\", self.__url.path, body, headers)\n        return self._get_response()\n\n    def _get_response(self):\n        response = self.__conn.getresponse()\n        data = response.read().decode('utf-8')\n        result = json.loads(data)\n        if 'error' in result:\n            raise Exception(result['error']['message'])\n        return result['result']\n\n    def close(self):\n        if self.__conn:\n            self.__conn.close()\n            self.__conn = None\n\n    def __del__(self):\n        self.close()"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Create a function that uses subprocess.Popen with pipes to execute ffprobe (a multimedia stream analyzer) on a specified file and return the output in JSON format.\n\nFunction Description: The function _probe executes ffprobe command-line tool to analyze a multimedia file, capturing its format and stream information. It uses subprocess.Popen with pipes to handle inter-process communication, converts the output to JSON, and handles errors if the process fails.\n\nInput:\n- filename: [str] - Path to the multimedia file to analyze\n- cmd: [str] (optional, default=\"ffprobe\") - Name/path of the ffprobe executable\n- timeout: [int/float] (optional) - Timeout in seconds for the subprocess\n- **kwargs: [dict] (optional) - Additional ffprobe command-line arguments\n\nOutput:\n- [dict] - Parsed JSON output containing multimedia file information\n- Raises ffmpeg.Error if the process returns a non-zero exit code (includes stderr in exception)",
    "Canonical_solution": "import json\nimport subprocess\nimport ffmpeg\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    \"\"\"Run ffprobe on the specified file and return a JSON representation of the output.\n\n    Raises:\n        :class:`ffmpeg.Error`: if ffprobe returns a non-zero exit code,\n            an :class:`Error` is returned with a generic error message.\n            The stderr output can be retrieved by accessing the\n            ``stderr`` property of the exception.\n    \"\"\"\n    args = [cmd, \"-show_format\", \"-show_streams\", \"-of\", \"json\"]\n    args += ffmpeg._utils.convert_kwargs_to_cmd_line_args(kwargs)\n    args += [filename]\n\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    communicate_kwargs = {}\n    if timeout is not None:\n        communicate_kwargs[\"timeout\"] = timeout\n    out, err = p.communicate(**communicate_kwargs)\n    if p.returncode != 0:\n        raise ffmpeg.Error(\"ffprobe\", out, err)\n    return json.loads(out.decode(\"utf-8\"))",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport json\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    args = [cmd, \"-v\", \"quiet\", \"-print_format\", \"json\", \"-show_streams\", \"-show_format\", filename]\n    if kwargs:\n        args.extend(kwargs.get(\"args\", []))\n    process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    try:\n        stdout, stderr = process.communicate(timeout=timeout)\n        if process.returncode != 0:\n            raise subprocess.CalledProcessError(process.returncode, cmd, output=stdout, stderr=stderr)\n        return json.loads(stdout)\n    except subprocess.TimeoutExpired:\n        process.kill()\n        stdout, stderr = process.communicate()\n        raise subprocess.CalledProcessError(process.returncode, cmd, output=stdout, stderr=stderr)"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Create a Python function that consumes messages from a RabbitMQ queue using the pika library, processing each message with a callback function.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, and starts consuming messages from the specified queue. Each received message is processed by a callback function that prints the message body. The function runs in a blocking mode, continuously waiting for messages until interrupted.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely until interrupted, printing received messages to the console)",
    "Canonical_solution": "from multiprocessing import Process\nimport pika\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.queue_declare(queue='cryptofeed', durable=True)\n    channel.basic_consume(queue='cryptofeed',\n                          on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    p = Process(target=receiver, args=(5672,))\n    p.start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\n\ndef consume_messages(queue_name, port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.queue_declare(queue=queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        print(f\"Received: {body}\")\n\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that connects to a RabbitMQ server, declares a queue, and processes incoming messages using a callback function. The function should handle message acknowledgment and print the received messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server using blocking connection, declares a specified queue, and sets up a callback function to process incoming messages. The callback function parses the message body using Pydantic's BaseModel and acknowledges the message upon successful processing.\n\nInput: \n- None (The function uses hardcoded connection parameters and queue name)\n\nOutput: \n- None (The function prints received messages to the console and runs indefinitely in a blocking consumption loop)\n\nNote: The function does not explicitly return any value but continuously processes messages from the specified RabbitMQ queue until interrupted. The callback function prints both the parsed message (as a Pydantic model) and the raw message body.",
    "Canonical_solution": "import pika\nfrom pydantic import BaseModel\n\ndef rabbitmq_consumer():\n    credentials = pika.PlainCredentials(\"admin\", \"admin\")\n    connection = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=credentials))\n    channel = connection.channel()\n    channel.queue_declare(queue=\"\u6c34\u8bb8\u4f20\")\n\n    def callbak(ch, method, properties, body):\n        class Test(BaseModel):\n            name: str\n            age: int\n        print(Test.parse_raw(body))\n        print(\"\u6d88\u8d39\u8005\u63a5\u6536\u5230\u4e86\u4efb\u52a1\uff1a%r\" % body.decode(\"utf8\"))\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    channel.basic_consume(on_message_callback=callbak, queue=\"\u6c34\u8bb8\u4f20\", auto_ack=False)\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\nfrom pydantic import BaseModel\n\nclass MessageModel(BaseModel):\n    content: str\n\ndef callback(ch, method, properties, body):\n    try:\n        message = MessageModel.parse_raw(body)\n        print(f\"Parsed Message: {message}\")\n        print(f\"Raw Message Body: {body.decode()}\")\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n        ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)\n\ndef consume_messages():\n    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\n    channel = connection.channel()\n    channel.queue_declare(queue='test_queue', durable=True)\n    channel.basic_consume(queue='test_queue', on_message_callback=callback, auto_ack=False)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a RabbitMQ message consumer function in Python using the pika library to receive and process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a topic exchange and a queue, binds them together, and starts consuming messages. Each received message is processed by a callback function that prints the message body.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely, consuming messages until interrupted)",
    "Canonical_solution": "import pika\nfrom multiprocessing import Process\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    exchange_name = 'amq.topic'\n    exchange_type = 'topic'\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    queue_name = 'cryptofeed'\n    channel.queue_declare(queue=queue_name)\n    channel.queue_bind(exchange=exchange_name, queue=queue_name)\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\n\ndef consume_messages(port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.exchange_declare(exchange='topic_exchange', exchange_type='topic')\n    queue_name = 'my_queue'\n    channel.queue_declare(queue=queue_name)\n    channel.queue_bind(exchange='topic_exchange', queue=queue_name, routing_key='my_routing_key')\n\n    def callback(ch, method, properties, body):\n        print(f\"Received message: {body}\")\n\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that listens to a specified queue, processes incoming messages by syncing them to either a MongoDB or Redis database based on configuration, and acknowledges successful processing.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, sets up a callback function to handle incoming messages, and starts consuming messages in a blocking loop. The callback function processes each message by syncing it to the configured database (MongoDB or Redis) and sends an acknowledgment back to RabbitMQ upon successful processing.\n\nInput: None (All configuration parameters are expected to be available in a config module:\n- config.rabbitmq_user: RabbitMQ username\n- config.rabbitmq_pass: RabbitMQ password\n- config.rabbitmq_host: RabbitMQ host address\n- config.rabbitmq_port: RabbitMQ port\n- config.rabbitmq_queue_name: Name of the queue to consume from\n- config.sync_db: Database type ('mongo' or 'redis') to sync data to)\n\nOutput: None (The function runs indefinitely, consuming messages from RabbitMQ and syncing them to the configured database)",
    "Canonical_solution": "import os\nimport pika\nimport config\nif config.sync_db=='mongo':\n    import sync_mongo as sync_data\nelse:\n    import sync_redis as sync_data\n\ndef consumer_data():\n    credentials = pika.PlainCredentials(config.rabbitmq_user, config.rabbitmq_pass)\n    parameters = pika.ConnectionParameters(config.rabbitmq_host, config.rabbitmq_port,'/',credentials)\n    connection = pika.BlockingConnection(parameters)\n    channel = connection.channel()\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        ack = sync_data.set_data(body)\n        ch.basic_ack(delivery_tag = method.delivery_tag)\n\n    channel.basic_qos(prefetch_count=1)\n    channel.basic_consume(callback, \n                        queue=config.rabbitmq_queue_name,\n                        )\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\nimport json\nfrom config import rabbitmq_user, rabbitmq_pass, rabbitmq_host, rabbitmq_port, rabbitmq_queue_name, sync_db\nfrom pymongo import MongoClient\nimport redis\n\ndef callback(ch, method, properties, body):\n    try:\n        message = json.loads(body.decode('utf-8'))\n        if sync_db == 'mongo':\n            client = MongoClient('mongodb://localhost:27017/')\n            db = client['message_db']\n            collection = db['messages']\n            collection.insert_one(message)\n        elif sync_db == 'redis':\n            r = redis.Redis(host='localhost', port=6379, db=0)\n            r.set(f\"message:{message['_id']}\", json.dumps(message))\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n        ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)\n\ndef consume_messages():\n    credentials = pika.PlainCredentials(rabbitmq_user, rabbitmq_pass)\n    connection = pika.BlockingConnection(pika.ConnectionParameters(\n        host=rabbitmq_host,\n        port=rabbitmq_port,\n        credentials=credentials\n    ))\n    channel = connection.channel()\n    channel.queue_declare(queue=rabbitmq_queue_name, durable=True)\n    channel.basic_consume(queue=rabbitmq_queue_name, on_message_callback=callback, auto_ack=False)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a function to translate text using the DeepL API with HTTP client functionality, supporting multiple language translations and alternative translations.\n\nFunction Description: The function uses the httpx library to send HTTP POST requests to the DeepL API endpoint. It handles text translation between specified source and target languages, with options for requesting alternative translations and proxy support. The function includes error handling for HTTP status codes and processes the JSON response to extract translated text.\n\nInput:\n- text: (str) - The text to be translated\n- sourceLang: (str, optional) - Source language code (auto-detected if None)\n- targetLang: (str, optional) - Target language code (defaults to \"EN\")\n- numberAlternative: (int, optional) - Number of alternative translations to request (0-3)\n- printResult: (bool, optional) - Whether to print the translation result\n- proxies: (dict, optional) - Proxy configuration for the HTTP client\n\nOutput:\n- If numberAlternative <= 1: returns (str) - The translated text\n- If numberAlternative > 1: returns (list[str]) - List of alternative translations\n- Returns None if HTTP request fails (non-200 status)\n- Raises TooManyRequestsException on HTTP 429 status",
    "Canonical_solution": "import random\nimport time\nimport json\nimport httpx\nfrom langdetect import detect\n\ndeeplAPI = \"https://www2.deepl.com/jsonrpc\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"*/*\",\n    \"x-app-os-name\": \"iOS\",\n    \"x-app-os-version\": \"16.3.0\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"x-app-device\": \"iPhone13,2\",\n    \"User-Agent\": \"DeepL-iOS/2.9.1 iOS 16.3.0 (iPhone13,2)\",\n    \"x-app-build\": \"510265\",\n    \"x-app-version\": \"2.9.1\",\n    \"Connection\": \"keep-alive\",\n}\n\ndef translate(\n    text,\n    sourceLang=None,\n    targetLang=None,\n    numberAlternative=0,\n    printResult=False,\n    proxies=None,\n):\n    iCount = getICount(text)\n    id = getRandomNumber()\n\n    if sourceLang is None:\n        sourceLang = detectLang(text)\n    if targetLang is None:\n        targetLang = \"EN\"\n\n    numberAlternative = max(min(3, numberAlternative), 0)\n\n    postData = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"LMT_handle_texts\",\n        \"id\": id,\n        \"params\": {\n            \"texts\": [{\"text\": text, \"requestAlternatives\": numberAlternative}],\n            \"splitting\": \"newlines\",\n            \"lang\": {\n                \"source_lang_user_selected\": sourceLang,\n                \"target_lang\": targetLang,\n            },\n            \"timestamp\": getTimestamp(iCount),\n            \"commonJobParams\": {\n                \"wasSpoken\": False,\n                \"transcribe_as\": \"\",\n            },\n        },\n    }\n    postDataStr = json.dumps(postData, ensure_ascii=False)\n\n    if (id + 5) % 29 == 0 or (id + 3) % 13 == 0:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\" : \"', -1)\n    else:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\": \"', -1)\n\n    with httpx.Client(proxies=proxies) as client:\n        resp = client.post(url=deeplAPI, data=postDataStr, headers=headers)\n        respStatusCode = resp.status_code\n\n        if respStatusCode == 429:\n            raise TooManyRequestsException\n            return \n\n        if respStatusCode != 200:\n            print(\"Error\", respStatusCode)\n            return\n\n        respText = resp.text\n        respJson = json.loads(respText)\n\n        if numberAlternative <= 1:\n            targetText = respJson[\"result\"][\"texts\"][0][\"text\"]\n            if printResult:\n                print(targetText)\n            return targetText\n\n        targetTextArray = []\n        for item in respJson[\"result\"][\"texts\"][0][\"alternatives\"]:\n            targetTextArray.append(item[\"text\"])\n            if printResult:\n                print(item[\"text\"])\n\n        return targetTextArray",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nfrom httpx import HTTPStatusError, TooManyRequests\n\ndef translate_text(text, sourceLang=None, targetLang=\"EN\", numberAlternative=0, printResult=False, proxies=None):\n    url = \"https://api.deepl.com/v2/translate\"\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    data = {\n        \"text\": text,\n        \"target_lang\": targetLang,\n        \"alt-translations\": numberAlternative\n    }\n    if sourceLang:\n        data[\"source_lang\"] = sourceLang\n\n    try:\n        with httpx.Client(proxies=proxies) as client:\n            response = client.post(url, headers=headers, data=data)\n            response.raise_for_status()\n    except HTTPStatusError as e:\n        if e.response.status_code == 429:\n            raise TooManyRequestsException(\"Too many requests. Please try again later.\")\n        return None\n    except Exception:\n        return None\n\n    result = response.json().get(\"translations\", [])\n    if not result:\n        return None\n\n    translations = [item[\"text\"] for item in result]\n    if numberAlternative <= 1:\n        if printResult:\n            print(translations[0])\n        return translations[0]\n    else:\n        if printResult:\n            for t in translations:\n                print(t)\n        return translations"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Create a SOCKS-enabled socket class that extends Python's built-in socket functionality to support proxy connections through SOCKS4, SOCKS5, and HTTP proxies.\n\nClass Description: The `socksocket` class extends Python's `socket.socket` class to provide proxy support. It handles connection establishment through various proxy types while maintaining standard socket functionality. The class manages proxy configuration, connection negotiation, and error handling for proxy-related operations.\n\nAttributes:\n- default_proxy: [Class Variable] - Default proxy configuration used when no specific proxy is set\n- _proxyconn: [socket.socket] - TCP connection used to maintain UDP relay (for SOCKS5 UDP)\n- proxy: [tuple] - Current proxy configuration (type, addr, port, rdns, username, password)\n- proxy_sockname: [tuple] - The bound address (IP, port) of the proxy connection\n- proxy_peername: [tuple] - The destination address (IP, port) through the proxy\n- _timeout: [float] - Socket timeout value\n\nMethods:\n- __init__(family, type, proto, *args, **kwargs) -> None - Initializes the socket with optional proxy support. Validates socket type and sets up proxy attributes.\n- set_proxy(proxy_type, addr, port, rdns, username, password) -> None - Configures proxy settings for the socket.\n- connect(dest_pair) -> None - Establishes connection to destination through configured proxy. Handles both direct and proxied connections.\n- _readall(file, count) -> bytes - Internal method to read exact number of bytes from a file object.\n- _proxy_addr() -> tuple - Internal method to resolve proxy address and port.\n- _negotiate_SOCKS4(dest_addr, dest_port) -> None - Internal method to handle SOCKS4 proxy negotiation.\n- _negotiate_SOCKS5(dest_addr, dest_port) -> None - Internal method to handle SOCKS5 proxy negotiation.\n- _negotiate_HTTP(dest_addr, dest_port) -> None - Internal method to handle HTTP proxy negotiation.",
    "Canonical_solution": "import socket\nfrom errno import EOPNOTSUPP, EINVAL, EAGAIN\nimport struct\nfrom io import BytesIO\nfrom base64 import b64encode\n\nclass socksocket(socket.socket):\n    \"\"\"socksocket([family[, type[, proto]]]) -> socket object\n\n    Open a SOCKS enabled socket. The parameters are the same as\n    those of the standard socket init. In order for SOCKS to work,\n    you must specify family=AF_INET and proto=0.\n    The \"type\" argument must be either SOCK_STREAM or SOCK_DGRAM.\n    \"\"\"\n\n    default_proxy = None\n\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM,\n                 proto=0, *args, **kwargs):\n        if type not in (socket.SOCK_STREAM, socket.SOCK_DGRAM):\n            msg = \"Socket type must be stream or datagram, not {!r}\"\n            raise ValueError(msg.format(type))\n\n        super(socksocket, self).__init__(family, type, proto, *args, **kwargs)\n        self._proxyconn = None  # TCP connection to keep UDP relay alive\n\n        if self.default_proxy:\n            self.proxy = self.default_proxy\n        else:\n            self.proxy = (None, None, None, None, None, None)\n        self.proxy_sockname = None\n        self.proxy_peername = None\n\n        self._timeout = None\n\n    def _readall(self, file, count):\n        \"\"\"Receive EXACTLY the number of bytes requested from the file object.\"\"\"\n        data = b\"\"\n        while len(data) < count:\n            d = file.read(count - len(data))\n            if not d:\n                raise GeneralProxyError(\"Connection closed unexpectedly\")\n            data += d\n        return data\n\n    def set_proxy(self, proxy_type=None, addr=None, port=None, rdns=True,\n                  username=None, password=None):\n        \"\"\"Sets the proxy to be used.\"\"\"\n        self.proxy = (proxy_type, addr, port, rdns,\n                      username.encode() if username else None,\n                      password.encode() if password else None)\n\n    def connect(self, dest_pair):\n        \"\"\"\n        Connects to the specified destination through a proxy.\n        Uses the same API as socket's connect().\n\n        dest_pair - 2-tuple of (IP/hostname, port).\n        \"\"\"\n        if len(dest_pair) != 2 or dest_pair[0].startswith(\"[\"):\n            raise socket.error(\"PySocks doesn't support IPv6: %s\" % str(dest_pair))\n\n        dest_addr, dest_port = dest_pair\n\n        if self.type == socket.SOCK_DGRAM:\n            if not self._proxyconn:\n                self.bind((\"\", 0))\n            dest_addr = socket.gethostbyname(dest_addr)\n\n            if dest_addr == \"0.0.0.0\" and not dest_port:\n                self.proxy_peername = None\n            else:\n                self.proxy_peername = (dest_addr, dest_port)\n            return\n\n        (proxy_type, proxy_addr, proxy_port, rdns, username,\n         password) = self.proxy\n\n        if (not isinstance(dest_pair, (list, tuple))\n                or len(dest_pair) != 2\n                or not dest_addr\n                or not isinstance(dest_port, int)):\n            raise GeneralProxyError(\n                \"Invalid destination-connection (host, port) pair\")\n\n        super(socksocket, self).settimeout(self._timeout)\n\n        if proxy_type is None:\n            self.proxy_peername = dest_pair\n            super(socksocket, self).settimeout(self._timeout)\n            super(socksocket, self).connect((dest_addr, dest_port))\n            return\n\n        proxy_addr = self._proxy_addr()\n\n        try:\n            super(socksocket, self).connect(proxy_addr)\n        except socket.error as error:\n            self.close()\n            proxy_addr, proxy_port = proxy_addr\n            proxy_server = \"{0}:{1}\".format(proxy_addr, proxy_port)\n            printable_type = PRINTABLE_PROXY_TYPES[proxy_type]\n\n            msg = \"Error connecting to {0} proxy {1}\".format(printable_type,\n                                                             proxy_server)\n            raise ProxyConnectionError(msg, error)\n        else:\n            try:\n                negotiate = self._proxy_negotiators[proxy_type]\n                negotiate(self, dest_addr, dest_port)\n            except socket.error as error:\n                self.close()\n                raise GeneralProxyError(\"Socket error\", error)\n            except ProxyError:\n                self.close()\n                raise\n\n    def _proxy_addr(self):\n        \"\"\"Return proxy address to connect to as tuple object\"\"\"\n        (proxy_type, proxy_addr, proxy_port, rdns, username,\n         password) = self.proxy\n        proxy_port = proxy_port or DEFAULT_PORTS.get(proxy_type)\n        if not proxy_port:\n            raise GeneralProxyError(\"Invalid proxy type\")\n        return proxy_addr, proxy_port\n\n    def _negotiate_SOCKS5(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through a SOCKS5 server.\"\"\"\n        self.proxy_peername, self.proxy_sockname = self._SOCKS5_request(\n            self, b\"\\x01\", (dest_addr, dest_port))\n\n    def _negotiate_SOCKS4(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through a SOCKS4 server.\"\"\"\n        proxy_type, addr, port, rdns, username, password = self.proxy\n\n        writer = self.makefile(\"wb\")\n        reader = self.makefile(\"rb\", 0)\n        try:\n            remote_resolve = False\n            try:\n                addr_bytes = socket.inet_aton(dest_addr)\n            except socket.error:\n                if rdns:\n                    addr_bytes = b\"\\x00\\x00\\x00\\x01\"\n                    remote_resolve = True\n                else:\n                    addr_bytes = socket.inet_aton(\n                        socket.gethostbyname(dest_addr))\n\n            writer.write(struct.pack(\">BBH\", 0x04, 0x01, dest_port))\n            writer.write(addr_bytes)\n\n            if username:\n                writer.write(username)\n            writer.write(b\"\\x00\")\n\n            if remote_resolve:\n                writer.write(dest_addr.encode(\"idna\") + b\"\\x00\")\n            writer.flush()\n\n            resp = self._readall(reader, 8)\n            if resp[0:1] != b\"\\x00\":\n                raise GeneralProxyError(\n                    \"SOCKS4 proxy server sent invalid data\")\n\n            status = ord(resp[1:2])\n            if status != 0x5A:\n                error = SOCKS4_ERRORS.get(status, \"Unknown error\")\n                raise SOCKS4Error(\"{0:#04x}: {1}\".format(status, error))\n\n            self.proxy_sockname = (socket.inet_ntoa(resp[4:]),\n                                   struct.unpack(\">H\", resp[2:4])[0])\n            if remote_resolve:\n                self.proxy_peername = socket.inet_ntoa(addr_bytes), dest_port\n            else:\n                self.proxy_peername = dest_addr, dest_port\n        finally:\n            reader.close()\n            writer.close()\n\n    def _negotiate_HTTP(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through an HTTP server.\"\"\"\n        proxy_type, addr, port, rdns, username, password = self.proxy\n\n        addr = dest_addr if rdns else socket.gethostbyname(dest_addr)\n\n        http_headers = [\n            (b\"CONNECT \" + addr.encode(\"idna\") + b\":\" +\n             str(dest_port).encode() + b\" HTTP/1.1\"),\n            b\"Host: \" + dest_addr.encode(\"idna\")\n        ]\n\n        if username and password:\n            http_headers.append(b\"Proxy-Authorization: basic \" +\n                                b64encode(username + b\":\" + password))\n\n        http_headers.append(b\"\\r\\n\")\n\n        self.sendall(b\"\\r\\n\".join(http_headers))\n\n        fobj = self.makefile()\n        status_line = fobj.readline()\n        fobj.close()\n\n        if not status_line:\n            raise GeneralProxyError(\"Connection closed unexpectedly\")\n\n        try:\n            proto, status_code, status_msg = status_line.split(\" \", 2)\n        except ValueError:\n            raise GeneralProxyError(\"HTTP proxy server sent invalid response\")\n\n        if not proto.startswith(\"HTTP/\"):\n            raise GeneralProxyError(\n                \"Proxy server does not appear to be an HTTP proxy\")\n\n        try:\n            status_code = int(status_code)\n        except ValueError:\n            raise HTTPError(\n                \"HTTP proxy server did not return a valid HTTP status\")\n\n        if status_code != 200:\n            error = \"{0}: {1}\".format(status_code, status_msg)\n            raise HTTPError(error)\n\n        self.proxy_sockname = (b\"0.0.0.0\", 0)\n        self.proxy_peername = addr, dest_port\n\n    _proxy_negotiators = {\n        SOCKS4: _negotiate_SOCKS4,\n        SOCKS5: _negotiate_SOCKS5,\n        HTTP: _negotiate_HTTP\n    }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport select\nimport struct\nimport threading\nfrom urllib.parse import urlparse\n\nclass socksocket(socket.socket):\n    default_proxy = None\n\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM, proto=0, *args, **kwargs):\n        super().__init__(family, type, proto, *args, **kwargs)\n        self._proxyconn = None\n        self.proxy = None\n        self.proxy_sockname = None\n        self.proxy_peername = None\n        self._timeout = None\n\n    def set_proxy(self, proxy_type, addr, port, rdns=True, username=None, password=None):\n        if proxy_type not in ['socks4', 'socks5', 'http']:\n            raise ValueError(\"Unsupported proxy type\")\n        self.proxy = (proxy_type, addr, port, rdns, username, password)\n\n    def connect(self, dest_pair):\n        if not self.proxy:\n            return super().connect(dest_pair)\n        proxy_type, proxy_addr, proxy_port, rdns, user, pwd = self.proxy\n        dest_addr, dest_port = dest_pair\n        if proxy_type == 'socks4':\n            self._negotiate_SOCKS4(dest_addr, dest_port)\n        elif proxy_type == 'socks5':\n            self._negotiate_SOCKS5(dest_addr, dest_port)\n        elif proxy_type == 'http':\n            self._negotiate_HTTP(dest_addr, dest_port)\n        else:\n            raise ValueError(\"Unsupported proxy type\")\n\n    def _readall(self, file, count):\n        data = b''\n        while len(data) < count:\n            chunk = file.recv(count - len(data))\n            if not chunk:\n                break\n            data += chunk\n        return data\n\n    def _proxy_addr(self):\n        proxy_type, proxy_addr, proxy_port, rdns, _, _ = self.proxy\n        if rdns:\n            return (proxy_addr, proxy_port)\n        else:\n            try:\n                proxy_ip = socket.gethostbyname(proxy_addr)\n            except socket.error:\n                proxy_ip = proxy_addr\n            return (proxy_ip, proxy_port)\n\n    def _negotiate_SOCKS4(self, dest_addr, dest_port):\n        proxy_addr, proxy_port = self._proxy_addr()\n        self._proxyconn = socket.create_connection((proxy_addr, proxy_port), timeout=self._timeout)\n        dest_ip = socket.inet_aton(dest_addr)\n        msg = b'\\x04\\x01' + struct.pack('>H', dest_port) + dest_ip + b'\\x00'\n        self._proxyconn.sendall(msg)\n        resp = self._readall(self._proxyconn, 8)\n        if resp[0] != 0x5a:\n            raise socket.error(\"SOCKS4 negotiation failed\")\n        self.proxy_sockname = self._proxyconn.getsockname()\n        self.proxy_peername = self._proxyconn.getpeername()\n\n    def _negotiate_SOCKS5(self, dest_addr, dest_port):\n        proxy_addr, proxy_port = self._proxy_addr()\n        self._proxyconn = socket.create_connection((proxy_addr, proxy_port), timeout=self._timeout)\n        ver_auth = b'\\x05\\x01\\x00'\n        self._proxyconn.sendall(ver_auth)\n        resp = self._readall(self._proxyconn, 2)\n        if resp[0] != 0x05:\n            raise socket.error(\"SOCKS5 version mismatch\")\n        if resp[1] == 0x00:\n            pass\n        elif resp[1] == 0x02:\n            if not (user and pwd):\n                raise socket.error(\"Username/password required for SOCKS5 authentication\")\n            auth_msg = b'\\x01' + bytes(user, 'utf-8') + b'\\x00' + bytes(pwd, 'utf-8')\n            self._proxyconn.sendall(auth_msg)\n            auth_resp = self._readall(self._proxyconn, 2)\n            if auth_resp[1] != 0x00:\n                raise socket.error(\"SOCKS5 authentication failed\")\n        else:\n            raise socket.error(\"Unsupported SOCKS5 authentication method\")\n        dest_host = dest_addr.encode('utf-8') if isinstance(dest_addr, str) else dest_addr\n        if isinstance(dest_addr, str):\n            atyp = b'\\x01'\n            dest_host = socket.inet_aton(dest_addr)\n        else:\n            atyp = b'\\x04'\n            dest_host = dest_addr\n        msg = b'\\x05\\x01\\x00' + atyp + dest_host + struct.pack('>H', dest_port)\n        self._proxyconn.sendall(msg)\n        resp = self._readall(self._proxyconn, 4)\n        if resp[1] != 0x00:\n            raise socket.error(\"SOCKS5 connection failed\")\n        self.proxy_sockname = self._proxyconn.getsockname()\n        self.proxy_peername = self._proxyconn.getpeername()\n\n    def _negotiate_HTTP(self, dest_addr, dest_port):\n        proxy_addr, proxy_port = self._proxy_addr()\n        self._proxyconn = socket.create_connection((proxy_addr, proxy_port), timeout=self._timeout)\n        host = f\"{dest_addr}:{dest_port}\"\n        if self.proxy[4] or self.proxy[5]:\n            auth = f\"{self.proxy[4]}:{self.proxy[5]}\" if self.proxy[4] and self.proxy[5] else \"\"\n            auth_header = f\"Proxy-Authorization: Basic {auth}\\r\\n\"\n        else:\n            auth_header = \"\"\n        req = f\"GET http://{host} HTTP/1.1\\r\\nHost: {host}\\r\\n{auth_header}Connection: close\\r\\n\\r\\n\"\n        self._proxyconn.sendall(req.encode())\n        resp = self._readall(self._proxyconn, 4096)\n        if not resp.startswith(b'HTTP/1.1 200'):\n            raise socket.error(\"HTTP proxy connection failed\")\n        self.proxy_sockname = self._proxyconn.getsockname()\n        self.proxy_peername = self._proxyconn.getpeername()"
  },
  {
    "Task_id": 323,
    "Instruction": "Task Description: Implement a TCP client class for managing connections to a server, sending and receiving commands, and handling various server messages.\n\nClass Description: The Client class provides functionality to connect to a server, send and receive commands, and maintain client state including client ID, room information, and attributes. It handles connection management, message processing, and error handling.\n\nAttributes:\n- host: str - The server host address to connect to\n- port: int - The server port to connect to\n- pending_commands: List[common.Command] - Commands waiting to be sent to the server\n- socket: Socket - The socket connection to the server\n- client_id: Optional[str] - The unique ID assigned by the server\n- current_custom_attributes: Dict[str, Any] - Attributes of the current client\n- clients_attributes: Dict[str, Dict[str, Any]] - Attributes of all connected clients\n- rooms_attributes: Dict[str, Dict[str, Any]] - Attributes of all available rooms\n- current_room: Optional[str] - The current room the client is in\n\nMethods:\n- __init__(host: str = common.DEFAULT_HOST, port: int = common.DEFAULT_PORT) -> None - Initializes the client with server connection details\n- __del__() -> None - Destructor that ensures proper disconnection\n- connect() -> None - Establishes connection to the server and requests initial data\n- disconnect() -> None - Closes the connection to the server\n- is_connected() -> bool - Returns True if connected to the server\n- send_command(command: common.Command) -> bool - Sends a command to the server\n- handle_connection_lost() -> None - Handles cleanup when connection is lost\n- fetch_incoming_commands() -> List[common.Command] - Receives and processes incoming commands from server\n- fetch_outgoing_commands(commands_send_interval: int = 0) -> None - Sends pending commands to server\n- fetch_commands(commands_send_interval: int = 0) -> List[common.Command] - Handles both incoming and outgoing commands",
    "Canonical_solution": "import socket\nimport logging\nimport time\nfrom typing import Dict, Any, Mapping, Optional, List, Callable\n\nimport mixer.broadcaster.common as common\nfrom mixer.broadcaster.socket import Socket\nfrom mixer.broadcaster.common import MessageType\nfrom mixer.broadcaster.common import update_attributes_and_get_diff, update_named_attributes\n\nclass Client:\n    def __init__(self, host: str = common.DEFAULT_HOST, port: int = common.DEFAULT_PORT):\n        self.host = host\n        self.port = port\n        self.pending_commands: List[common.Command] = []\n        self.socket: Socket = None\n        self.client_id: Optional[str] = None\n        self.current_custom_attributes: Dict[str, Any] = {}\n        self.clients_attributes: Dict[str, Dict[str, Any]] = {}\n        self.rooms_attributes: Dict[str, Dict[str, Any]] = {}\n        self.current_room: Optional[str] = None\n\n    def __del__(self):\n        if self.socket is not None:\n            self.disconnect()\n\n    def connect(self):\n        if self.is_connected():\n            raise RuntimeError(\"Client.connect : already connected\")\n\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket = Socket(sock)\n            self.socket.connect((self.host, self.port))\n            self.send_command(common.Command(common.MessageType.CLIENT_ID))\n            self.send_command(common.Command(common.MessageType.LIST_CLIENTS))\n            self.send_command(common.Command(common.MessageType.LIST_ROOMS))\n        except ConnectionRefusedError:\n            self.socket = None\n        except common.ClientDisconnectedException:\n            self.handle_connection_lost()\n        except Exception as e:\n            self.socket = None\n            raise\n\n    def disconnect(self):\n        if self.socket:\n            self.socket.shutdown(socket.SHUT_RDWR)\n            self.socket.close()\n            self.socket = None\n\n    def is_connected(self):\n        return self.socket is not None\n\n    def send_command(self, command: common.Command):\n        try:\n            common.write_message(self.socket, command)\n            return True\n        except common.ClientDisconnectedException:\n            self.handle_connection_lost()\n            return False\n\n    def handle_connection_lost(self):\n        self.socket = None\n\n    def fetch_incoming_commands(self) -> List[common.Command]:\n        try:\n            received_commands = common.read_all_messages(self.socket)\n        except common.ClientDisconnectedException:\n            self.handle_connection_lost()\n            raise\n\n        for command in received_commands:\n            if command.type in self._default_command_handlers:\n                self._default_command_handlers[command.type](self, command)\n\n        return received_commands\n\n    def fetch_outgoing_commands(self, commands_send_interval=0):\n        for command in self.pending_commands:\n            if not self.send_command(command):\n                break\n            if commands_send_interval > 0:\n                time.sleep(commands_send_interval)\n        self.pending_commands = []\n\n    def fetch_commands(self, commands_send_interval=0) -> List[common.Command]:\n        self.fetch_outgoing_commands(commands_send_interval)\n        return self.fetch_incoming_commands()\n\n    _default_command_handlers: Mapping[MessageType, Callable[[common.Command], None]] = {\n        MessageType.LIST_CLIENTS: lambda self, cmd: update_named_attributes(\n            self.clients_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.LIST_ROOMS: lambda self, cmd: update_named_attributes(\n            self.rooms_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.CLIENT_ID: lambda self, cmd: setattr(self, \"client_id\", cmd.data.decode()),\n        MessageType.ROOM_UPDATE: lambda self, cmd: update_named_attributes(\n            self.rooms_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.ROOM_DELETED: lambda self, cmd: self.rooms_attributes.pop(common.decode_string(cmd.data, 0)[0], None),\n        MessageType.CLIENT_UPDATE: lambda self, cmd: update_named_attributes(\n            self.clients_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.CLIENT_DISCONNECTED: lambda self, cmd: self.clients_attributes.pop(common.decode_string(cmd.data, 0)[0], None),\n        MessageType.JOIN_ROOM: lambda self, cmd: setattr(self, \"current_room\", common.decode_string(cmd.data, 0)[0]),\n        MessageType.SEND_ERROR: lambda self, cmd: logging.error(\"Received error message : %s\", common.decode_string(cmd.data, 0)[0]),\n    }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport threading\nfrom typing import List, Optional, Dict, Any\nimport common\n\nclass Client:\n    def __init__(self, host: str = common.DEFAULT_HOST, port: int = common.DEFAULT_PORT) -> None:\n        self.host = host\n        self.port = port\n        self.pending_commands: List[common.Command] = []\n        self.socket: Optional[socket.socket] = None\n        self.client_id: Optional[str] = None\n        self.current_custom_attributes: Dict[str, Any] = {}\n        self.clients_attributes: Dict[str, Dict[str, Any]] = {}\n        self.rooms_attributes: Dict[str, Dict[str, Any]] = {}\n        self.current_room: Optional[str] = None\n        self._stop_event = threading.Event()\n        self._recv_thread = None\n\n    def __del__(self) -> None:\n        self.disconnect()\n\n    def connect(self) -> None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect((self.host, self.port))\n        self._recv_thread = threading.Thread(target=self._receive_loop)\n        self._recv_thread.start()\n        self._send_initial_data()\n\n    def disconnect(self) -> None:\n        if self.socket:\n            self.socket.close()\n            self.socket = None\n        if self._recv_thread and self._recv_thread.is_alive():\n            self._stop_event.set()\n            self._recv_thread.join()\n\n    def is_connected(self) -> bool:\n        return self.socket is not None and self.socket.fileno() != -1\n\n    def send_command(self, command: common.Command) -> bool:\n        if not self.is_connected():\n            return False\n        self.pending_commands.append(command)\n        return True\n\n    def handle_connection_lost(self) -> None:\n        self.disconnect()\n        self.client_id = None\n        self.current_room = None\n        self.current_custom_attributes = {}\n        self.clients_attributes = {}\n        self.rooms_attributes = {}\n\n    def fetch_incoming_commands(self) -> List[common.Command]:\n        commands = []\n        if self.socket:\n            try:\n                data = self.socket.recv(4096)\n                if data:\n                    commands.extend(common.parse_commands(data))\n            except Exception:\n                self.handle_connection_lost()\n        return commands\n\n    def fetch_outgoing_commands(self, commands_send_interval: int = 0) -> None:\n        if not self.is_connected() or not self.pending_commands:\n            return\n        if commands_send_interval > 0:\n            threading.Timer(commands_send_interval, self.fetch_outgoing_commands).start()\n        else:\n            try:\n                for command in self.pending_commands:\n                    self.socket.sendall(command.serialize())\n                self.pending_commands.clear()\n            except Exception:\n                self.handle_connection_lost()\n\n    def fetch_commands(self, commands_send_interval: int = 0) -> List[common.Command]:\n        incoming_commands = self.fetch_incoming_commands()\n        self.fetch_outgoing_commands(commands_send_interval)\n        return incoming_commands\n\n    def _receive_loop(self) -> None:\n        while not self._stop_event.is_set():\n            try:\n                data = self.socket.recv(4096)\n                if not data:\n                    break\n                commands = common.parse_commands(data)\n                for cmd in commands:\n                    self._process_command(cmd)\n            except Exception:\n                self.handle_connection_lost()\n                break\n\n    def _send_initial_data(self) -> None:\n        if self.is_connected():\n            self.send_command(common.Command(common.COMMAND_TYPE_CONNECT))\n\n    def _process_command(self, command: common.Command) -> None:\n        if command.type == common.COMMAND_TYPE_ASSIGN_ID:\n            self.client_id = command.data.get('client_id')\n        elif command.type == common.COMMAND_TYPE_SET_ATTRIBUTES:\n            self.current_custom_attributes = command.data.get('attributes', {})\n        elif command.type == common.COMMAND_TYPE_UPDATE_CLIENTS_ATTRIBUTES:\n            self.clients_attributes = command.data.get('clients', {})\n        elif command.type == common.COMMAND_TYPE_UPDATE_ROOMS_ATTRIBUTES:\n            self.rooms_attributes = command.data.get('rooms', {})\n        elif command.type == common.COMMAND_TYPE_SET_ROOM:\n            self.current_room = command.data.get('room')"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Implement a TCP relay handler class that manages communication between a local socket and a remote socket, handling encryption, obfuscation, and protocol-specific operations.\n\nClass Description: The TCPRelayHandler class is responsible for managing the bidirectional communication between a local client and a remote server. It handles socket creation, connection establishment, data encryption/decryption, obfuscation, and protocol-specific operations. The class uses event-driven programming to manage socket events efficiently.\n\nAttributes:\n\n- _server: [object] - Reference to the parent server instance\n- _fd_to_handlers: [dict] - Mapping of file descriptors to their handler instances\n- _loop: [object] - Event loop instance for managing socket events\n- _local_sock: [socket.socket] - Local client socket\n- _remote_sock: [socket.socket] - Remote server socket\n- _config: [dict] - Configuration parameters\n- _dns_resolver: [object] - DNS resolver instance\n- _is_local: [bool] - Flag indicating if this is a local handler\n- _stage: [int] - Current connection stage\n- _encryptor: [object] - Encryption/decryption handler\n- _client_address: [tuple] - Client address (IP, port)\n- _obfs: [object] - Obfuscation handler\n- _protocol: [object] - Protocol handler\n- _local_sock_fd: [int] - Local socket file descriptor\n- _remote_sock_fd: [int] - Remote socket file descriptor\n- _remote_address: [tuple] - Remote server address (IP, port)\n- _data_to_write_to_remote: [list] - Buffer for data to be sent to remote\n\nMethods:\n\n- __init__(server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local) -> [None] - Initializes the handler with server references, sockets, and configuration\n- _create_remote_socket(ip, port) -> [socket.socket] - Creates and configures a remote socket\n- _handle_dns_resolved(result, error) -> [None] - Handles DNS resolution result\n- _write_to_sock(data, sock) -> [bytes/None] - Writes data to specified socket\n- _on_local_read() -> [None] - Handles incoming data from local socket\n- _on_remote_read() -> [None] - Handles incoming data from remote socket\n- _on_remote_write() -> [None] - Handles write events for remote socket\n- handle_event(sock, fd, event) -> [bool] - Processes socket events\n- destroy() -> [None] - Cleans up resources and closes sockets",
    "Canonical_solution": "import socket\nimport errno\nimport struct\nimport logging\nimport binascii\nimport common\nimport obfs\nimport encrypt\nimport eventloop\nimport lru_cache\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = STAGE_INIT\n        self._create_encryptor(config)\n        self._client_address = local_sock.getpeername()[:2]\n        self._update_tcp_mss(local_sock)\n        self._obfs = obfs.obfs(config['obfs'])\n        self._protocol = obfs.obfs(config['protocol'])\n        self._setup_server_info()\n        local_sock.setblocking(False)\n        self._local_sock_fd = local_sock.fileno()\n        fd_to_handlers[self._local_sock_fd] = self\n        loop.add(local_sock, eventloop.POLL_IN | eventloop.POLL_ERR, self._server)\n\n    def _create_remote_socket(self, ip, port):\n        addrs = socket.getaddrinfo(ip, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        remote_sock = socket.socket(af, socktype, proto)\n        remote_sock.setblocking(False)\n        remote_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        self._remote_sock = remote_sock\n        self._remote_sock_fd = remote_sock.fileno()\n        self._fd_to_handlers[self._remote_sock_fd] = self\n        return remote_sock\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            self.destroy()\n            return\n        if result:\n            ip = result[1]\n            if ip:\n                try:\n                    remote_sock = self._create_remote_socket(ip, self._remote_address[1])\n                    remote_sock.connect((ip, self._remote_address[1]))\n                    self._loop.add(remote_sock, eventloop.POLL_ERR | eventloop.POLL_OUT, self._server)\n                    self._stage = STAGE_CONNECTING\n                except Exception as e:\n                    self.destroy()\n\n    def _write_to_sock(self, data, sock):\n        try:\n            if sock == self._remote_sock:\n                self._update_activity(len(data))\n                sent = sock.send(data)\n                if sent < len(data):\n                    return data[sent:]\n            return None\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                self.destroy()\n            return data\n\n    def _on_local_read(self):\n        try:\n            data = self._local_sock.recv(BUF_SIZE)\n            if not data:\n                self.destroy()\n                return\n            if self._is_local:\n                if self._encryptor is not None:\n                    data = self._protocol.client_pre_encrypt(data)\n                    data = self._encryptor.encrypt(data)\n                    data = self._obfs.client_encode(data)\n            self._write_to_sock(data, self._remote_sock)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EAGAIN, errno.EWOULDBLOCK):\n                self.destroy()\n\n    def _on_remote_read(self):\n        try:\n            data = self._remote_sock.recv(BUF_SIZE)\n            if not data:\n                self.destroy()\n                return\n            if self._is_local:\n                obfs_decode = self._obfs.client_decode(data)\n                data = self._encryptor.decrypt(obfs_decode[0])\n                data = self._protocol.client_post_decrypt(data)\n            self._write_to_sock(data, self._local_sock)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EAGAIN, errno.EWOULDBLOCK):\n                self.destroy()\n\n    def _on_remote_write(self):\n        self._stage = STAGE_STREAM\n        if self._data_to_write_to_remote:\n            data = b''.join(self._data_to_write_to_remote)\n            self._data_to_write_to_remote = []\n            remaining = self._write_to_sock(data, self._remote_sock)\n            if remaining is not None:\n                self._data_to_write_to_remote.append(remaining)\n\n    def handle_event(self, sock, fd, event):\n        if fd == self._remote_sock_fd:\n            if event & eventloop.POLL_ERR:\n                self.destroy()\n            elif event & eventloop.POLL_IN:\n                self._on_remote_read()\n            elif event & eventloop.POLL_OUT:\n                self._on_remote_write()\n        elif fd == self._local_sock_fd:\n            if event & eventloop.POLL_ERR:\n                self.destroy()\n            elif event & eventloop.POLL_IN:\n                self._on_local_read()\n        return True\n\n    def destroy(self):\n        if self._remote_sock:\n            self._loop.removefd(self._remote_sock_fd)\n            del self._fd_to_handlers[self._remote_sock_fd]\n            self._remote_sock.close()\n        if self._local_sock:\n            self._loop.removefd(self._local_sock_fd)\n            del self._fd_to_handlers[self._local_sock_fd]\n            self._local_sock.close()\n        self._server.remove_handler(self)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport select\nimport threading\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = 0\n        self._encryptor = None\n        self._client_address = local_sock.getpeername()\n        self._obfs = None\n        self._protocol = None\n        self._local_sock_fd = local_sock.fileno()\n        self._remote_sock_fd = -1\n        self._remote_address = None\n        self._data_to_write_to_remote = []\n\n    def _create_remote_socket(self, ip, port):\n        remote_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        remote_sock.setblocking(0)\n        remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        return remote_sock\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            self.destroy()\n            return\n        self._remote_address = (result, self._config['remote_port'])\n        self._remote_sock = self._create_remote_socket(result, self._config['remote_port'])\n        try:\n            self._remote_sock.connect(self._remote_address)\n        except Exception as e:\n            self.destroy()\n            return\n        self._remote_sock_fd = self._remote_sock.fileno()\n        self._fd_to_handlers[self._remote_sock_fd] = self\n        self._loop.add_reader(self._remote_sock_fd, self._on_remote_read)\n        self._loop.add_writer(self._remote_sock_fd, self._on_remote_write)\n        self._stage = 1\n\n    def _write_to_sock(self, data, sock):\n        try:\n            sent = sock.send(data)\n            return data[sent:]\n        except Exception as e:\n            self.destroy()\n            return None\n\n    def _on_local_read(self):\n        try:\n            data = self._local_sock.recv(4096)\n            if not data:\n                self.destroy()\n                return\n            decrypted_data = self._encryptor.decrypt(data)\n            obfuscated_data = self._obfs.obfuscate(decrypted_data)\n            self._protocol.process(obfuscated_data)\n            self._data_to_write_to_remote.append(obfuscated_data)\n            self._loop.add_writer(self._remote_sock_fd, self._on_remote_write)\n        except Exception as e:\n            self.destroy()\n\n    def _on_remote_read(self):\n        try:\n            data = self._remote_sock.recv(4096)\n            if not data:\n                self.destroy()\n                return\n            deobfuscated_data = self._obfs.deobfuscate(data)\n            encrypted_data = self._encryptor.encrypt(deobfuscated_data)\n            self._protocol.process(encrypted_data)\n            self._loop.add_writer(self._local_sock_fd, self._on_local_write)\n        except Exception as e:\n            self.destroy()\n\n    def _on_remote_write(self):\n        if not self._data_to_write_to_remote:\n            self._loop.remove_writer(self._remote_sock_fd)\n            return\n        data = self._data_to_write_to_remote[0]\n        remaining = self._write_to_sock(data, self._remote_sock)\n        if remaining:\n            self._data_to_write_to_remote[0] = remaining\n        else:\n            self._data_to_write_to_remote.pop(0)\n\n    def handle_event(self, sock, fd, event):\n        if event == select.POLLIN:\n            if fd == self._local_sock_fd:\n                self._on_local_read()\n            elif fd == self._remote_sock_fd:\n                self._on_remote_read()\n        elif event == select.POLLOUT:\n            if fd == self._remote_sock_fd:\n                self._on_remote_write()\n\n    def destroy(self):\n        if self._local_sock:\n            self._loop.remove_reader(self._local_sock_fd)\n            self._local_sock.close()\n        if self._remote_sock:\n            self._loop.remove_reader(self._remote_sock_fd)\n            self._loop.remove_writer(self._remote_sock_fd)\n            self._remote_sock.close()\n        self._fd_to_handlers.pop(self._local_sock_fd, None)\n        self._fd_to_handlers.pop(self._remote_sock_fd, None)"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Python class that acts as a TCP client to interact with a Zookeeper server, retrieve statistics, and parse them into a structured format.\n\nClass Description: The ZookeeperTCPClient class provides functionality to connect to a Zookeeper server via TCP (either IPv4 or Unix socket), send commands, receive statistics, and parse them into a dictionary format while handling connection errors gracefully.\n\nAttributes: \n[No explicit attributes are defined in the class, as it's primarily method-based]\n\nMethods:\n\nMethod1: get_raw_stats(host, port) -> str - \nEstablishes a TCP connection to the specified Zookeeper server (either via IPv4 or Unix socket), sends the 'mntr' command, and returns the raw statistics data as a string.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- str - Raw statistics data received from the server\n\nMethod2: get_stats(host, port) -> dict - \nRetrieves raw statistics using get_raw_stats(), parses them into a structured dictionary format while ignoring certain predefined fields, and attempts to find maximum connection limit from process information.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- dict - Parsed statistics with metric names as keys and their values as values",
    "Canonical_solution": "import socket\nimport re\n\nclass ZookeeperTCPClient:\n    def __init__(self):\n        pass\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n            sock.send('mntr\\n')\n            data = sock.recv(4096)\n        except socket.error:\n            raise Exception('Failed to get stats from %s:%s' % (host, port))\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('zk_version', 'zk_server_state')\n        pid = None\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split()\n            if pieces[0] in ignored:\n                continue\n            stats[pieces[0]] = pieces[1]\n\n        try:\n            cmdline = \"/proc/%s/cmdline\" % pid\n            f = open(cmdline, 'r')\n            m = re.search(\"-c\\x00(\\d+)\", f.readline())\n            if m is not None:\n                stats['limit_maxconn'] = m.group(1)\n            f.close()\n        except:\n            pass\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport re\n\nclass ZookeeperTCPClient:\n    def get_raw_stats(self, host, port):\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n            \n            sock.sendall(b\"mntr\\n\")\n            data = sock.recv(4096)\n            sock.close()\n            return data.decode('utf-8')\n        except Exception as e:\n            raise ConnectionError(f\"Failed to connect to Zookeeper server: {e}\")\n\n    def get_stats(self, host, port):\n        raw_data = self.get_raw_stats(host, port)\n        stats = {}\n        lines = raw_data.strip().split('\\n')\n        \n        for line in lines:\n            if ':' in line:\n                key, value = line.split(':', 1)\n                key = key.strip()\n                value = value.strip()\n                if key not in ['zk_version', 'zk_avg_latency', 'zk_max_latency', 'zk_min_latency']:\n                    stats[key] = value\n        \n        try:\n            process_info = next(line for line in lines if line.startswith('Process'))\n            match = re.search(r'(\\d+)', process_info)\n            if match:\n                stats['max_connections'] = int(match.group(1))\n        except StopIteration:\n            pass\n        \n        return stats"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Create a Python class that collects and processes statistics from a Memcached server using TCP socket communication.\n\nClass Description: The MemcachedCollector class is designed to connect to a Memcached server, retrieve its statistics, and parse them into a structured dictionary format. It handles both IPv4 and Unix domain socket connections.\n\nAttributes:\n\nGAUGES: [list] - A list of metric names that should be treated as gauge values (values that can increase or decrease)\n\nMethods:\n\nget_raw_stats: [Name](host, port) -> [str] - Establishes a TCP connection to the specified Memcached server (either via IP:port or Unix socket), sends the 'stats' command, and returns the raw response data as a string. Handles connection errors gracefully.\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [str] - Raw statistics data in Memcached protocol format\n\nget_stats: [Name](host, port) -> [dict] - Retrieves and processes statistics from the Memcached server, returning them as a dictionary with metric names as keys and numeric values (either int or float).\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [dict] - Processed statistics with metric names as keys and numeric values",
    "Canonical_solution": "import socket\nimport re\n\nclass MemcachedCollector:\n    GAUGES = [\n        'bytes',\n        'connection_structures',\n        'curr_connections',\n        'curr_items',\n        'threads',\n        'reserved_fds',\n        'limit_maxbytes',\n        'hash_power_level',\n        'hash_bytes',\n        'hash_is_expanding',\n        'uptime'\n    ]\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n\n            sock.settimeout(3)\n            sock.send('stats\\n')\n\n            while True:\n                received = sock.recv(4096)\n                if not received:\n                    break\n                data += received\n                if data.endswith('END\\r\\n'):\n                    break\n        except socket.error:\n            pass\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('libevent', 'pointer_size', 'time', 'version',\n                   'repcached_version', 'replication', 'accepting_conns',\n                   'pid')\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split(' ')\n            if pieces[0] != 'STAT' or pieces[1] in ignored:\n                continue\n            if '.' in pieces[2]:\n                stats[pieces[1]] = float(pieces[2])\n            else:\n                stats[pieces[1]] = int(pieces[2])\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport re\n\nclass MemcachedCollector:\n    GAUGES = ['bytes', 'curr_connections', 'total_connections', 'cmd_get', 'cmd_set', 'get_hits', 'get_misses', 'evictions']\n\n    def get_raw_stats(self, host, port):\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n            \n            sock.sendall(b'stats\\r\\n')\n            response = b''\n            while True:\n                data = sock.recv(4096)\n                if not data:\n                    break\n                response += data\n            sock.close()\n            return response.decode('utf-8')\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        stats = {}\n        lines = raw_stats.splitlines()\n        for line in lines:\n            if line.startswith('STAT'):\n                parts = line.split()\n                if len(parts) >= 4:\n                    key = parts[1]\n                    value = parts[2]\n                    try:\n                        value = float(value)\n                        if key in self.GAUGES:\n                            stats[key] = value\n                        else:\n                            stats[key] = int(value)\n                    except ValueError:\n                        stats[key] = value\n        return stats"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a TCP client socket class with additional Unix Domain Socket (UDS) functionality for inter-process communication, including message packing/unpacking and connection management.\n\nClass Description: HSFZSocket is a base TCP client class that handles socket creation, connection, and basic send/receive operations. UDS_HSFZSocket extends this base class to add UDS-specific message formatting with source/target identifiers.\n\nAttributes:\n- ip: str - The IP address of the target server (default: '127.0.0.1')\n- port: int - The port number of the target server (default: 6801)\n- s: socket.socket - The TCP socket object\n- buffer: bytes - Internal buffer for storing received data\n- source: int - (UDS only) Source identifier for messages\n- target: int - (UDS only) Target identifier for messages\n- outputcls: Type - (UDS only) Optional class for parsing received messages\n\nMethods:\n- __init__(ip: str = '127.0.0.1', port: int = 6801) -> None - Initializes the socket with TCP_NODELAY and SO_REUSEADDR options, then connects to the server\n- send(data: bytes) -> int - Sends raw data through the socket and returns number of bytes sent\n- recv(x: int = 65535) -> Optional[bytes] - Receives data with length-prefixed protocol (4-byte header), returns None if incomplete\n- close() -> None - Closes the socket connection\n- (UDS) send(x: Any) -> int - Formats message with UDS header (length, flags, source, target) before sending\n- (UDS) recv(x: int = 65535) -> Optional[Any] - Receives UDS message and optionally parses it using outputcls",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import Optional, Type, Any\n\nclass HSFZSocket:\n    def __init__(self, ip='127.0.0.1', port=6801):\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.s.connect((self.ip, self.port))\n        self.buffer = b\"\"\n\n    def send(self, data):\n        try:\n            return self.s.send(data)\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        if self.buffer:\n            len_data = self.buffer[:4]\n        else:\n            len_data = self.s.recv(4, socket.MSG_PEEK)\n            if len(len_data) != 4:\n                return None\n\n        len_int = struct.unpack(\">I\", len_data)[0]\n        len_int += 6\n        self.buffer += self.s.recv(len_int - len(self.buffer))\n\n        if len(self.buffer) != len_int:\n            return None\n\n        pkt = self.buffer\n        self.buffer = b\"\"\n        return pkt\n\n    def close(self):\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, source, target, ip='127.0.0.1', port=6801, basecls=None):\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = basecls\n\n    def send(self, x):\n        try:\n            x.sent_time = time.time()\n        except AttributeError:\n            pass\n\n        try:\n            return super().send(\n                struct.pack(\"!IBB\", len(x) + 2, 1, self.source, self.target) + bytes(x))\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        pkt = super().recv(x)\n        if pkt and self.outputcls:\n            return self.outputcls(pkt[6:])\n        return pkt",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\nfrom typing import Optional, Type, Any\n\nclass HSFZSocket:\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801) -> None:\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.buffer = b''\n        self.connect((self.ip, self.port))\n\n    def connect(self, address):\n        self.s.connect(address)\n\n    def send(self, data: bytes) -> int:\n        return self.s.send(data)\n\n    def recv(self, x: int = 65535) -> Optional[bytes]:\n        self.buffer += self.s.recv(x)\n        if len(self.buffer) < 4:\n            return None\n        length, = struct.unpack('!I', self.buffer[:4])\n        if len(self.buffer) < 4 + length:\n            return None\n        payload = self.buffer[4:4+length]\n        self.buffer = self.buffer[4+length:]\n        return payload\n\n    def close(self) -> None:\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801, source: int = 0, target: int = 0, outputcls: Optional[Type] = None) -> None:\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = outputcls\n\n    def send(self, x: Any) -> int:\n        header = struct.pack('!IIII', len(x), 0, self.source, self.target)\n        return super().send(header + x)\n\n    def recv(self, x: int = 65535) -> Optional[Any]:\n        payload = super().recv(x)\n        if payload is None:\n            return None\n        if self.outputcls:\n            return self.outputcls(payload)\n        return payload"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified host, sends an SMB2 negotiation packet, and processes the server's response to determine SMBv2 support and potential vulnerabilities.\n\nFunction Description: The function connects to a target host using TCP, constructs and sends an SMB2 negotiation packet, then analyzes the response to check for SMBv2 support and potential vulnerabilities. The function handles socket operations including connection, timeout setting, data sending/receiving, and proper connection closure.\n\nInput:\n- host: tuple - A tuple containing (IP_address: str, port: int) representing the target server's address and port\n\nOutput:\n- None (prints messages to console about SMBv2 support and potential vulnerabilities)\n- Raises exceptions for connection or communication errors\n\nThe function performs the following key operations:\n1. Creates a TCP/IPv4 socket\n2. Connects to the specified host with a 5-second timeout\n3. Constructs SMB2 negotiation packet with appropriate headers\n4. Sends the packet prefixed with its length\n5. Receives and analyzes the server response\n6. Determines SMBv2 support from the response\n7. Checks for potential vulnerabilities if SMBv2 is supported\n8. Closes the connection properly in all cases",
    "Canonical_solution": "import sys\nimport os\nimport datetime\nimport struct\nimport socket\n\nsys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), '..')))\nfrom packets import SMB2Header, SMB2Nego, SMB2NegoData\n\ndef run(host):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(host)  \n    s.settimeout(5) \n\n    Header = SMB2Header(Cmd=\"\\x72\",Flag1=\"\\x18\",Flag2=\"\\x53\\xc8\")\n    Nego = SMB2Nego(Data = SMB2NegoData())\n    Nego.calculate()\n\n    Packet = str(Header)+str(Nego)\n    Buffer = struct.pack(\">i\", len(Packet)) + Packet\n    s.send(Buffer)\n\n    try:\n        data = s.recv(1024)\n        if data[4:5] == \"\\xff\":\n           print \"This host doesn't support SMBv2\" \n        if data[4:5] == \"\\xfe\":\n           IsDCVuln(GetBootTime(data[116:124]))\n    except Exception:\n        s.close()\n        raise",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\n\ndef check_smbv2_support(host):\n    ip, port = host\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)\n        sock.connect((ip, port))\n        print(f\"Connected to {ip}:{port}\")\n        \n        # SMB2 Negotiate Request\n        dialects = b'\\x02\\x02\\x41\\x4d\\x42\\x53\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        negotiate_request = b'\\x00\\x00\\x00\\x87\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' + \\\n                            b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' + \\\n                            b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' + \\\n                            dialects\n        \n        packet_length = len(negotiate_request)\n        packet = struct.pack('<I', packet_length) + negotiate_request\n        sock.sendall(packet)\n        print(\"Sent SMB2 negotiation request\")\n        \n        # Receive response\n        response = sock.recv(4096)\n        if not response:\n            print(\"No response received from server\")\n            return\n        \n        print(\"Received response from server\")\n        if len(response) < 64:\n            print(\"Invalid response length\")\n            return\n        \n        # Check SMB2 header\n        if response[0:2] != b'\\xfe\\x53':\n            print(\"Not an SMB2 protocol response\")\n            return\n        \n        # Check SMBv2 support\n        dialect_index = struct.unpack('<H', response[28:30])[0]\n        dialect_count = struct.unpack('<H', response[30:32])[0]\n        dialects_response = response[32:32 + dialect_count * 2]\n        \n        supported_dialects = []\n        for i in range(0, len(dialects_response), 2):\n            dialect = struct.unpack('<H', dialects_response[i:i+2])[0]\n            supported_dialects.append(dialect)\n        \n        if 0x0202 in supported_dialects:\n            print(\"SMBv2 is supported by the server.\")\n            # Check for potential vulnerabilities\n            if len(response) >= 128:\n                security_mode = struct.unpack('<H', response[126:128])[0]\n                if security_mode & 0x01:\n                    print(\"Security mode: User-level authentication required.\")\n                if security_mode & 0x02:\n                    print(\"Security mode: Signing required.\")\n                if security_mode & 0x04:\n                    print(\"Security mode: Guest access allowed.\")\n            else:\n                print(\"Unable to determine security mode.\")\n        else:\n            print(\"SMBv2 is not supported by the server.\")\n        \n        sock.close()\n    \n    except socket.error as e:\n        print(f\"Socket error: {e}\")\n        raise\n    except Exception as e:\n        print(f\"Error: {e}\")\n        raise"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Create a TCP client class for interacting with the IQFeed server to send commands and receive market data.\n\nClass Description: The IQFeedClient class establishes and manages a TCP connection to an IQFeed server, allowing users to send commands/queries and receive responses. It handles connection setup, data transmission, error handling, and connection teardown.\n\nAttributes:\n_host: str - The hostname or IP address of the IQFeed server (default: 'localhost')\n_port: int - The port number for the IQFeed server connection (default: 9100)\n_timeout: float - The connection timeout in seconds (default: 10.0)\n_recv_buf: str - Buffer for storing received data\n_sock: socket.socket - The TCP socket object for server communication\n\nMethods:\n__init__(host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None - Initializes the client with connection parameters and establishes the TCP connection\n_send_cmd(cmd: str) -> None - Sends a command string to the IQFeed server (private method)\nquery(message: str) -> Optional[List[str]] - Sends a query message to the server and returns the parsed response data\nclose() -> None - Closes the socket connection to the server",
    "Canonical_solution": "import socket\nimport logging\nimport numpy as np\nimport pandas as pd\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0):\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = \"\"\n        \n        # Create and configure socket\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.connect((self._host, self._port))\n        self._sock.settimeout(self._timeout)\n\n    def _send_cmd(self, cmd: str):\n        \"\"\"Send command to IQFeed server\"\"\"\n        self._sock.sendall(cmd.encode(encoding='latin-1', errors='strict'))\n\n    def query(self, message: str):\n        \"\"\"Send query to IQFeed server and receive response\"\"\"\n        end_msg = '!ENDMSG!'\n        recv_buffer = 4096\n\n        self._send_cmd(message)\n\n        chunk = \"\"\n        data = \"\"\n        while True:\n            chunk = self._sock.recv(recv_buffer).decode('latin-1')\n            data += chunk\n            if chunk.startswith('E,'):  # error condition\n                if chunk.startswith('E,!NO_DATA!'):\n                    logging.warn('No data available for the given symbol or dates')\n                    return None\n                else:\n                    raise Exception(chunk)\n            elif end_msg in chunk:\n                break\n\n        # Clean up the data\n        data = data[:-1 * (len(end_msg) + 3)]\n        data = \"\".join(data.split(\"\\r\"))\n        data = data.replace(\",\\n\", \",\")[:-1]\n        return data.split(\",\")\n\n    def close(self):\n        \"\"\"Close the socket connection\"\"\"\n        self._sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport select\nfrom typing import Optional, List\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None:\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = ''\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.settimeout(timeout)\n        self._connect()\n\n    def _connect(self) -> None:\n        try:\n            self._sock.connect((self._host, self._port))\n        except socket.error as e:\n            raise ConnectionError(f\"Failed to connect to IQFeed server: {e}\")\n\n    def _send_cmd(self, cmd: str) -> None:\n        try:\n            self._sock.sendall(cmd.encode('ascii') + b'\\x00')\n        except socket.error as e:\n            raise ConnectionError(f\"Failed to send command to IQFeed server: {e}\")\n\n    def query(self, message: str) -> Optional[List[str]]:\n        self._send_cmd(message)\n        response = []\n        while True:\n            ready = select.select([self._sock], [], [], self._timeout)\n            if ready[0]:\n                data = self._sock.recv(4096)\n                if not data:\n                    break\n                self._recv_buf += data.decode('ascii')\n                lines = self._recv_buf.split('\\x00')\n                self._recv_buf = lines[-1]\n                for line in lines[:-1]:\n                    if line:\n                        response.append(line)\n                if len(response) > 0 and response[-1].endswith('End of Data'):\n                    break\n            else:\n                break\n        return response if response else None\n\n    def close(self) -> None:\n        self._sock.close()"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a Python class that implements TCP client functionality for testing server connections and sending data to a server.\n\nClass Description: The TargetSocket class provides TCP client capabilities to check server availability and send data to a specified port on localhost. It handles connection establishment, data transmission, and proper resource cleanup.\n\nAttributes:\n- sock: [socket.socket] - The socket object used for TCP communication (initially None)\n- targetPort: [int] - The target port number for server communication (default: 5001)\n\nMethods:\n- testServerConnectionTcp() -> [bool] - Tests if a connection can be established with the target server. Returns True if successful, False otherwise.\n- sendToSocket(data: str) -> [bool] - Attempts to send the provided string data to the target server. Makes up to 10 connection attempts with 100ms delays between attempts. Returns True if data was sent successfully, False otherwise.",
    "Canonical_solution": "import socket\n\nclass TargetSocket:\n    def __init__(self, target_port=5001):\n        self.sock = None\n        self.targetPort = target_port\n\n    def testServerConnectionTcp(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = ('localhost', self.targetPort)\n\n        try:\n            sock.connect(server_address)\n        except socket.error as exc:\n            return False\n\n        sock.close()\n        return True\n\n    def sendToSocket(self, data):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(1)\n\n        host = 'localhost'\n        port = self.targetPort\n\n        isOpen = False\n        n = 0\n        while isOpen is False:\n            try:\n                s.connect((host, port))\n                isOpen = True\n            except Exception as e:\n                time.sleep(0.1)\n                n += 1\n                isOpen = False\n\n            if n == 10:\n                return False\n\n        try:\n            s.send(str.encode(data))\n        except Exception as e:\n            print(\"B: \" + str(e))\n\n        s.close()\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport time\n\nclass TargetSocket:\n    def __init__(self, targetPort=5001):\n        self.sock = None\n        self.targetPort = targetPort\n\n    def testServerConnectionTcp(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect(('localhost', self.targetPort))\n            self.sock.close()\n            return True\n        except Exception:\n            return False\n\n    def sendToSocket(self, data):\n        for _ in range(10):\n            try:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.sock.connect(('localhost', self.targetPort))\n                self.sock.sendall(data.encode())\n                self.sock.close()\n                return True\n            except Exception:\n                time.sleep(0.1)\n        return False"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Python class for handling Unix domain socket communication with a server, including sending and receiving serialized data, timeout management, and proper connection cleanup.\n\nClass Description: CSocket is a class that manages communication over a Unix domain socket. It handles socket creation, connection, data serialization/deserialization, timeout settings, and proper connection termination. The class uses pickle for object serialization and implements custom protocol handling with CSPROTO constants.\n\nAttributes:\n- __csock: [socket.socket] - The underlying Unix domain socket object\n- __deftout: [float] - The default timeout value for socket operations\n\nMethods:\n- __init__(sock: str, timeout: int = -1) -> None - Initializes the socket connection to the specified Unix domain socket path with optional timeout\n- __del__() -> None - Destructor that ensures proper socket cleanup\n- send(msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Serializes and sends data to the server, then waits for and returns the response\n- settimeout(timeout: float) -> None - Sets the socket timeout (use -1 for default)\n- close() -> None - Properly closes the socket connection with protocol-compliant shutdown\n- convert(m: Any) -> Union[str, bool, int, float, list, dict, set] - Static method to convert objects to serializable types\n- receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Static method to receive and deserialize data from the socket",
    "Canonical_solution": "import socket\nfrom pickle import dumps, loads, HIGHEST_PROTOCOL\nfrom ..protocol import CSPROTO\n\nclass CSocket:\n    def __init__(self, sock=\"/var/run/fail2ban/fail2ban.sock\", timeout=-1):\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__deftout = self.__csock.gettimeout()\n        if timeout != -1:\n            self.settimeout(timeout)\n        self.__csock.connect(sock)\n\n    def __del__(self):\n        self.close()\n    \n    def send(self, msg, nonblocking=False, timeout=None):\n        obj = dumps(list(map(CSocket.convert, msg)), HIGHEST_PROTOCOL)\n        self.__csock.send(obj)\n        self.__csock.send(CSPROTO.END)\n        return self.receive(self.__csock, nonblocking, timeout)\n\n    def settimeout(self, timeout):\n        self.__csock.settimeout(timeout if timeout != -1 else self.__deftout)\n\n    def close(self):\n        if not self.__csock:\n            return\n        try:\n            self.__csock.sendall(CSPROTO.CLOSE + CSPROTO.END)\n            self.__csock.shutdown(socket.SHUT_RDWR)\n        except socket.error:\n            pass\n        try:\n            self.__csock.close()\n        except socket.error:\n            pass\n        self.__csock = None\n    \n    @staticmethod\n    def convert(m):\n        if isinstance(m, (str, bool, int, float, list, dict, set)):\n            return m\n        else:\n            return str(m)\n\n    @staticmethod\n    def receive(sock, nonblocking=False, timeout=None):\n        msg = CSPROTO.EMPTY\n        if nonblocking: sock.setblocking(0)\n        if timeout: sock.settimeout(timeout)\n        bufsize = 1024\n        while msg.rfind(CSPROTO.END, -32) == -1:\n            chunk = sock.recv(bufsize)\n            if not len(chunk):\n                raise socket.error(104, 'Connection reset by peer')\n            if chunk == CSPROTO.END: break\n            msg = msg + chunk\n            if bufsize < 32768: bufsize <<= 1\n        return loads(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport pickle\nimport selectors\nimport threading\nfrom typing import Any, Optional, Union\n\nclass CSocket:\n    CSPROTO = {\n        'SEND': b'\\x01',\n        'RECV': b'\\x02',\n        'CLOSE': b'\\x03'\n    }\n\n    def __init__(self, sock: str, timeout: int = -1):\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__deftout = timeout\n        self.settimeout(timeout)\n        try:\n            self.__csock.connect(sock)\n        except Exception as e:\n            self.__csock.close()\n            raise e\n\n    def __del__(self):\n        self.close()\n\n    def send(self, msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if timeout is None:\n            timeout = self.__deftout\n        try:\n            if timeout != -1:\n                self.__csock.settimeout(timeout)\n            self.__csock.sendall(CSocket.CPROTO['SEND'] + pickle.dumps(msg))\n            return self.receive(self.__csock, nonblocking, timeout)\n        except Exception as e:\n            self.close()\n            raise e\n\n    def settimeout(self, timeout: float) -> None:\n        self.__deftout = timeout\n        if timeout != -1:\n            self.__csock.settimeout(timeout)\n        else:\n            self.__csock.setblocking(0)\n\n    def close(self) -> None:\n        try:\n            self.__csock.sendall(CSocket.CPROTO['CLOSE'])\n            self.__csock.shutdown(socket.SHUT_RDWR)\n        except:\n            pass\n        finally:\n            self.__csock.close()\n\n    @staticmethod\n    def convert(m: Any) -> Union[str, bool, int, float, list, dict, set]:\n        if isinstance(m, (str, bool, int, float, list, dict, set)):\n            return m\n        elif isinstance(m, bytes):\n            return m.decode('utf-8')\n        else:\n            raise TypeError(f\"Unsupported type for serialization: {type(m)}\")\n\n    @staticmethod\n    def receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if timeout is None:\n            timeout = -1\n        if timeout != -1:\n            sock.settimeout(timeout)\n        try:\n            header = sock.recv(1)\n            if not header:\n                return None\n            if header == CSocket.CPROTO['RECV']:\n                data = b''\n                while True:\n                    chunk = sock.recv(4096)\n                    if not chunk:\n                        break\n                    data += chunk\n                return pickle.loads(data)\n            elif header == CSocket.CPROTO['CLOSE']:\n                sock.close()\n                return None\n            else:\n                return None\n        except Exception as e:\n            sock.close()\n            raise e"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a CMPP (China Mobile Peer-to-Peer) client class in Python that handles communication with a CMPP gateway server for sending SMS messages. The class should manage TCP socket connections, authentication, message sending, and response handling.\n\nClass Description: The CMPPClient class encapsulates the functionality to connect to a CMPP gateway server, authenticate using SP credentials, send SMS messages, and handle server responses. It maintains socket connections and sequence numbering for message tracking.\n\nAttributes:\n- ip: str - The IP address of the CMPP gateway server\n- port: int - The port number of the CMPP gateway server\n- sp_id: str - The service provider ID for authentication\n- sp_secret: str - The service provider secret for authentication\n- src_id: str - The source ID for SMS messages\n- service_id: str - The service ID for SMS messages\n- _sequence_id: int - Internal counter for message sequence numbers\n- _is_connect: bool - Connection status flag\n- _times: int - Number of connection retry attempts\n- __socket: socket.socket - The TCP socket object for server communication\n\nMethods:\n- __init__(host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None - Initializes the client with server details and credentials\n- sequence_id() -> int - Property that returns and increments the sequence ID\n- _connect() -> None - Establishes TCP connection to the server with retry logic\n- send(instance: Union[CMPPBaseRequestInstance, bytes]) -> None - Sends a CMPP request or raw message to the server\n- recv() -> tuple - Receives and parses a response from the server\n- close() -> None - Closes the connection and sends termination request\n- _cmpp_connect() -> None - Handles CMPP authentication protocol\n- _cmpp_send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Internal method for sending SMS messages\n- send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Public method for sending SMS with error handling",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import List, Dict\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str):\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 3\n        self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._connect()\n\n    @property\n    def sequence_id(self) -> int:\n        s = self._sequence_id\n        self._sequence_id += 1\n        return s\n\n    def _connect(self) -> None:\n        self.__socket.settimeout(5)\n        for i in range(self._times):\n            try:\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                break\n            except Exception as err:\n                time.sleep(1)\n        else:\n            raise Exception('Failed to connect to the CMPP gateway server')\n\n    def send(self, instance) -> None:\n        if isinstance(instance, CMPPBaseRequestInstance):\n            message = instance.get_message(sequence_id=self.sequence_id)\n        else:\n            message = instance\n        self.__socket.send(message)\n\n    def recv(self) -> tuple:\n        raw_length = self.__socket.recv(4)\n        length, = struct.unpack('!L', raw_length)\n        header, body = CMPPResponseInstance().parse(\n            raw_length + self.__socket.recv(length - 4)\n        )\n        return header, body\n\n    def close(self) -> None:\n        if self._is_connect:\n            terminate_request = CMPPTerminateRequestInstance()\n            self.send(terminate_request)\n            self.__socket.close()\n\n    def _cmpp_connect(self) -> None:\n        connect_request = CMPPConnectRequestInstance(self.sp_id, self.sp_secret)\n        self.send(connect_request)\n        header, body = self.recv()\n        if body['Status'] != 0:\n            raise Exception('CMPPv2.0 authentication failed')\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        message = template_param.get('message')\n        if message is None:\n            code = template_param.get('code')\n            message = template_code.replace('{code}', code)\n        msg = '\u3010%s\u3011 %s' % (sign_name, message)\n        submit_request = CMPPSubmitRequestInstance(\n            msg_src=self.sp_id, src_id=self.src_id, msg_content=msg,\n            dest_usr_tl=len(dest), dest_terminal_id=dest,\n            service_id=self.service_id\n        )\n        self.send(submit_request)\n        header, body = self.recv()\n        command_id = header.get('command_id')\n        if command_id == CMPP_DELIVER:\n            deliver_request = CMPPDeliverRespRequestInstance(\n                msg_id=body['Msg_Id'], result=body['Result']\n            )\n            self.send(deliver_request)\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_connect()\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            self.close()\n            raise Exception(e)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\nimport time\nfrom typing import List, Dict, Union, Tuple\n\nclass CMPPBaseRequestInstance:\n    def __init__(self, command_id: int, sequence_id: int, data: bytes = b''):\n        self.command_id = command_id\n        self.sequence_id = sequence_id\n        self.data = data\n\n    def to_bytes(self) -> bytes:\n        length = len(self.data) + 12\n        return struct.pack('!IIII', self.command_id, self.sequence_id, length, 0) + self.data\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str):\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 1\n        self._is_connect = False\n        self._times = 3\n        self.__socket = None\n\n    @property\n    def sequence_id(self) -> int:\n        self._sequence_id += 1\n        return self._sequence_id - 1\n\n    def _connect(self) -> None:\n        for _ in range(self._times):\n            try:\n                self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                return\n            except Exception as e:\n                print(f\"Connection failed: {e}, retrying...\")\n                time.sleep(1)\n        raise ConnectionError(\"Failed to connect to CMPP server after multiple attempts\")\n\n    def send(self, instance: Union[CMPPBaseRequestInstance, bytes]) -> None:\n        if not self._is_connect:\n            self._connect()\n        if isinstance(instance, CMPPBaseRequestInstance):\n            data = instance.to_bytes()\n        else:\n            data = instance\n        self.__socket.sendall(data)\n\n    def recv(self) -> Tuple[int, int, int, bytes]:\n        header = self.__socket.recv(12)\n        if len(header) < 12:\n            raise ConnectionError(\"Incomplete header received\")\n        command_id, sequence_id, total_length, command_status = struct.unpack('!IIII', header)\n        body = self.__socket.recv(total_length - 12)\n        while len(body) < total_length - 12:\n            body += self.__socket.recv(total_length - 12 - len(body))\n        return command_id, sequence_id, command_status, body\n\n    def close(self) -> None:\n        if self._is_connect:\n            self._is_connect = False\n            self.__socket.close()\n\n    def _cmpp_connect(self) -> None:\n        login_request = CMPPBaseRequestInstance(\n            command_id=0x00000001,\n            sequence_id=self.sequence_id,\n            data=struct.pack(\n                '!16s16s16s16s16sI',\n                self.sp_id.encode('utf-8'),\n                self.sp_secret.encode('utf-8'),\n                b'\\x00' * 16,\n                b'\\x00' * 16,\n                b'\\x00' * 16,\n                0\n            )\n        )\n        self.send(login_request)\n        command_id, sequence_id, status, body = self.recv()\n        if command_id != 0x00000002 or status != 0:\n            raise Exception(\"CMPP authentication failed\")\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        phone_numbers = b''.join([bytes([len(n)]) + n.encode('utf-8') for n in dest])\n        msg_id = b'\\x00' * 16\n        fee_user_type = 0\n        fee_terminal_id = b'\\x00' * 16\n        valid_time = b'\\x00' * 14\n        at_time = b'\\x00' * 14\n        priority = 0\n        registered_delivery = 0\n        msg_len = 0\n        msg_content = b''\n        link_id = b'\\x00' * 16\n        msg_source = b'\\x00' * 16\n        reserved = b'\\x00' * 16\n        data = struct.pack(\n            '!16sH16s16s16s16sB16s16s16s16s16sH16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s16s1"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified server, sends a payload consisting of a command and optional padding, and then closes the connection.\n\nFunction Description: The function `send_tcp_payload` creates a TCP socket, connects to a target server using the provided IP address and port, sends a payload formed by combining a command string with optional padding, and finally closes the socket connection. This is useful for simple TCP-based client-server communication scenarios.\n\nInput:\n- `ipaddr`: [str] - The IP address of the target server to connect to\n- `port`: [int] - The port number on the target server to connect to\n- `cmd`: [str] - The command string to be sent as part of the payload\n- `padding`: [str] - Optional additional data to be appended to the command\n\nOutput: None (The function performs an action but doesn't return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(ipaddr, port, cmd, padding):\n    payload = cmd + padding\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((ipaddr, port))\n    s.send(payload.encode())\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(ipaddr, port, cmd, padding=\"\"):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((ipaddr, port))\n    payload = cmd + padding\n    sock.sendall(payload.encode())\n    sock.close()"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Implement a TCP client class for handling XDCC file downloads with progress tracking, speed calculation, and resumable download capabilities.\n\nClass Description: XDCCRequest is a class that manages file downloads over DCC (Direct Client-to-Client) protocol using TCP sockets. It provides functionality for establishing connections, downloading files with progress tracking, handling resumable downloads, and managing download speed calculations.\n\nAttributes:\n- proxies: dict - Proxy configuration for the connection\n- bucket: object - Rate limiting bucket for download speed control\n- fh: file object - File handle for writing downloaded data\n- dccsock: socket - TCP socket for DCC connection\n- filesize: int - Total size of the file being downloaded\n- received: int - Number of bytes received so far\n- speeds: list - List of recent download speeds (last three measurements)\n- sleep: float - Dynamic sleep interval for rate control\n- last_recv_size: int - Size of last received data chunk\n- send_64bits_ack: bool - Flag for using 64-bit ACK packets\n- abort: bool - Flag to indicate download abortion\n- status_notify: function - Callback for progress updates\n\nMethods:\n- create_socket() -> socket - Creates and returns a new TCP socket\n- _write_func(buf: bytes) -> None - Writes buffer to file with rate control\n- _send_ack() -> None - Sends acknowledgement of received bytes to server\n- download(ip: str, port: int, filename: str, status_notify: function=None, resume: function=None) -> str - Main download method\n- abort_downloads() -> None - Sets abort flag to stop current download\n- update_progress() -> None - Triggers progress notification callback\n- close() -> None - Cleanup method (currently empty)\n\nProperties:\n- size: int - Returns total file size\n- arrived: int - Returns bytes received so far\n- speed: int - Returns average download speed\n- percent: int - Returns download progress percentage",
    "Canonical_solution": "import errno\nimport os\nimport select\nimport socket\nimport struct\nimport time\n\nclass XDCCRequest:\n    def __init__(self, bucket=None, options={}):\n        self.proxies = options.get(\"proxies\", {})\n        self.bucket = bucket\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = [0, 0, 0]\n        self.sleep = 0.000\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        return sock\n\n    def _write_func(self, buf):\n        size = len(buf)\n        self.received += size\n        self.fh.write(buf)\n\n        if self.bucket:\n            time.sleep(self.bucket.consumed(size))\n        else:\n            if size < self.last_recv_size:\n                self.sleep += 0.002\n            else:\n                self.sleep *= 0.7\n            self.last_recv_size = size\n            time.sleep(self.sleep)\n\n    def _send_ack(self):\n        try:\n            self.dccsock.send(\n                struct.pack(\"!Q\" if self.send_64bits_ack else \"!I\", self.received)\n            )\n        except socket.error:\n            pass\n\n    def download(self, ip, port, filename, status_notify=None, resume=None):\n        self.status_notify = status_notify\n        self.send_64bits_ack = not self.filesize < 1 << 32\n        chunk_name = filename + \".chunk0\"\n\n        if resume and os.path.exists(chunk_name):\n            self.fh = open(chunk_name, mode=\"ab\")\n            resume_position = self.fh.tell()\n            if not resume_position:\n                resume_position = os.stat(chunk_name).st_size\n            resume_position = resume(resume_position)\n            self.fh.truncate(resume_position)\n            self.received = resume_position\n        else:\n            self.fh = open(chunk_name, mode=\"wb\")\n\n        last_update = time.time()\n        num_recv_len = 0\n        self.dccsock = self.create_socket()\n        recv_list = [self.dccsock]\n        self.dccsock.connect((ip, port))\n        self.dccsock.setblocking(False)\n\n        while True:\n            if self.abort:\n                self.dccsock.close()\n                self.fh.close()\n                raise Abort\n\n            fdset = select.select(recv_list, [], [], 0.1)\n            if self.dccsock in fdset[0]:\n                try:\n                    data = self.dccsock.recv(16384)\n                except socket.error as exc:\n                    if exc.errno in (errno.EAGAIN, errno.EWOULDBLOCK):\n                        continue\n                    else:\n                        raise\n\n                data_len = len(data)\n                if data_len == 0 or self.received + data_len > self.filesize > 0:\n                    break\n\n                num_recv_len += data_len\n                self._write_func(data)\n                self._send_ack()\n\n            now = time.time()\n            timespan = now - last_update\n            if timespan > 1:\n                self.speeds[2] = self.speeds[1]\n                self.speeds[1] = self.speeds[0]\n                self.speeds[0] = num_recv_len // timespan\n                num_recv_len = 0\n                last_update = now\n                self.update_progress()\n\n        self.dccsock.close()\n        self.fh.close()\n        os.rename(chunk_name, filename)\n        return filename\n\n    def abort_downloads(self):\n        self.abort = True\n\n    def update_progress(self):\n        if self.status_notify:\n            self.status_notify({\"progress\": self.percent})\n\n    @property\n    def size(self):\n        return self.filesize\n\n    @property\n    def arrived(self):\n        return self.received\n\n    @property\n    def speed(self):\n        speeds = [x for x in self.speeds if x]\n        return sum(speeds) // len(speeds)\n\n    @property\n    def percent(self):\n        if not self.filesize:\n            return 0\n        return (self.received * 100) // self.filesize\n\n    def close(self):\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport time\nimport struct\nfrom typing import Optional, Callable, Dict, Any\n\nclass XDCCRequest:\n    def __init__(self, proxies: Dict = None):\n        self.proxies = proxies or {}\n        self.bucket = None\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = []\n        self.sleep = 0.1\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self) -> socket.socket:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        if self.proxies:\n            proxy_ip, proxy_port = self.proxies.get('http', ('127.0.0.1', 8080))\n            sock.connect((proxy_ip, proxy_port))\n        return sock\n\n    def _write_func(self, buf: bytes) -> None:\n        if self.abort:\n            return\n        if self.bucket:\n            self.bucket.consume(len(buf))\n            self.sleep = max(0.01, self.sleep * 0.9 + (len(buf) / self.bucket.capacity) * 0.1)\n            time.sleep(self.sleep)\n        self.fh.write(buf)\n        self.received += len(buf)\n        self.last_recv_size = len(buf)\n        self.update_progress()\n\n    def _send_ack(self) -> None:\n        if self.send_64bits_ack:\n            ack = struct.pack('>Q', self.received)\n        else:\n            ack = struct.pack('>I', self.received)\n        try:\n            self.dccsock.sendall(ack)\n        except Exception:\n            pass\n\n    def download(self, ip: str, port: int, filename: str, status_notify: Optional[Callable] = None, resume: Optional[Callable] = None) -> str:\n        self.status_notify = status_notify\n        self.fh = open(filename, 'ab')\n        self.dccsock = self.create_socket()\n        try:\n            self.dccsock.connect((ip, port))\n            if resume:\n                self.received = resume()\n            self.filesize = self._get_file_size()\n            self._send_ack()\n            while not self.abort and self.received < self.filesize:\n                data = self.dccsock.recv(65536)\n                if not data:\n                    break\n                self._write_func(data)\n            self.close()\n            return filename\n        except Exception as e:\n            self.abort_downloads()\n            return str(e)\n\n    def abort_downloads(self) -> None:\n        self.abort = True\n        if self.dccsock:\n            self.dccsock.close()\n        if self.fh:\n            self.fh.close()\n\n    def update_progress(self) -> None:\n        if self.status_notify:\n            self.status_notify(self.received, self.filesize, self.speed, self.percent)\n\n    def close(self) -> None:\n        if self.dccsock:\n            self.dccsock.close()\n        if self.fh:\n            self.fh.close()\n\n    @property\n    def size(self) -> int:\n        return self.filesize\n\n    @property\n    def arrived(self) -> int:\n        return self.received\n\n    @property\n    def speed(self) -> int:\n        if len(self.speeds) < 3:\n            return sum(self.speeds) // len(self.speeds) if self.speeds else 0\n        return sum(self.speeds[-3:]) // 3\n\n    @property\n    def percent(self) -> int:\n        return int((self.received / self.filesize) * 100) if self.filesize > 0 else 0\n\n    def _get_file_size(self) -> int:\n        try:\n            self.dccsock.setblocking(False)\n            while True:\n                try:\n                    data = self.dccsock.recv(1024)\n                    if not data:\n                        break\n                    self._write_func(data)\n                except socket.error:\n                    break\n            self.dccsock.setblocking(True)\n            return self.received\n        except Exception:\n            return 0"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified host and port, sends a message multiple times, and handles potential connection errors.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, sends a specified message multiple times (including one sendto operation), and properly closes the connection. It includes error handling for connection failures and provides status messages about the operation.\n\nInput:\n- host: str - The target server's IP address or hostname\n- port: int - The target port number to connect to\n- message: bytes - The message to be sent to the server (should be in bytes format)\n\nOutput:\n- None (prints status messages to console)\n- Returns None implicitly\n- Side effect: Sends network packets to the specified host and port",
    "Canonical_solution": "import socket\n\ndef dos(host, port, message):\n    ddos = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        ddos.connect((host, port))\n        ddos.send(message)\n        ddos.sendto(message, (host, port))\n        ddos.send(message)\n    except socket.error as msg:\n        print(\"|[Connection Failed]         |\")\n    print(\"|[DDoS Attack Engaged]       |\")\n    ddos.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_messages(host, port, message):\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((host, port))\n            print(f\"Successfully connected to {host}:{port}\")\n            for i in range(5):\n                s.sendall(message)\n                print(f\"Message sent: {i + 1}\")\n            print(\"All messages sent successfully.\")\n    except socket.error as e:\n        print(f\"Connection failed: {e}\")\n    finally:\n        print(\"Connection closed.\")"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a TCP client class in Python that establishes a connection to a server, sends data with length prefixing, and properly closes the connection.\n\nClass Description: BaseSocketClient is a TCP client implementation that handles socket creation, connection management, and data transmission with length-prefixed messages. It supports both simple and detected encoding modes for data transmission.\n\nAttributes:\n- s: [socket.socket] - The underlying TCP socket object used for communication\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the client and establishes a connection to the specified host and port. If host is 'auto', uses the local hostname.\n- send(data: Any) -> None - Sends data to the server after encoding detection, prefixing the message with its length in bytes.\n- send_smpl(data: Any) -> None - Sends data to the server using simple encoding, prefixing the message with its length in bytes.\n- close() -> None - Closes the connection with the server.",
    "Canonical_solution": "import socket\n\nclass BaseSocketClient:\n    def __init__(self, host, port) -> None:\n        if host == 'auto':\n            host = socket.gethostname()\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((host, port))\n        self.s = s\n    \n    def send(self, data):\n        val = encode_detect(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def send_smpl(self, data):\n        val = encode_smpl(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def close(self):\n        self.s.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\n\nclass BaseSocketClient:\n    def __init__(self, host: str, port: int) -> None:\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        if host == 'auto':\n            host = socket.gethostname()\n        self.s.connect((host, port))\n    \n    def send(self, data: any) -> None:\n        encoded_data = str(data).encode('utf-8')\n        length = struct.pack('>I', len(encoded_data))\n        self.s.sendall(length + encoded_data)\n    \n    def send_smpl(self, data: any) -> None:\n        encoded_data = str(data).encode('utf-8')\n        length = struct.pack('>I', len(encoded_data))\n        self.s.sendall(length + encoded_data)\n    \n    def close(self) -> None:\n        self.s.close()"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Implement a TCP client class in Python that handles secure connections, message synchronization, and various types of message exchanges with a server.\n\nClass Description: The Client class represents a TCP client that connects to a server, authenticates, sends and receives messages, and handles message synchronization. It supports both plain and SSL-encrypted connections.\n\nAttributes:\n- seq: [int] - Sequence number for message tracking\n- sock: [socket.socket] - Socket object for server communication\n- sync_key: [int] - Current synchronization key\n- syncing: [bool] - Flag indicating if synchronization is in progress\n- sync_timestamp: [int] - Timestamp of last synchronization attempt\n- next_sync_key: [int] - Next synchronization key to use\n\nMethods:\n- __init__() -> [None] - Initializes the client with default values\n- connect_server(device_id: str, token: str, host: str=None, port: int=24430, use_ssl: bool=True) -> [bool] - Connects to the server, authenticates using device ID and token, and returns connection status\n- close() -> [None] - Closes the connection with the server\n- recv_message() -> [tuple] - Receives messages from server and handles timeouts with ping messages\n- handle_message(cmd: int, s: int, m: any) -> [None] - Handles different types of incoming messages and triggers appropriate actions\n- ack_message(s: int) -> [None] - Sends acknowledgment for received messages\n- send_peer_message(msg: any) -> [None] - Sends a peer-to-peer message to the server\n- send_group_message(msg: any) -> [None] - Sends a group message to the server\n- send_sync() -> [None] - Initiates synchronization with the server\n- send_sync_key() -> [None] - Sends current synchronization key to the server",
    "Canonical_solution": "import struct\nimport socket\nimport select\nimport ssl\n\nclass Client:\n    def __init__(self):\n        self.seq = 0\n        self.sock = None\n        self.sync_key = 0\n        self.syncing = False\n        self.sync_timestamp = 0\n        self.next_sync_key = 0\n\n    def connect_server(self, device_id, token, host=None, port=24430, use_ssl=True):\n        address = (host if host else \"imnode2.gobelieve.io\", port)\n        if use_ssl:\n            sock_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            context = ssl.create_default_context()\n            sock = context.wrap_socket(sock_fd, server_hostname=address[0])\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            \n        sock.connect(address)\n        auth = AuthenticationToken()\n        auth.token = token\n        auth.device_id = device_id\n        self.seq = self.seq + 1\n        send_message(MSG_AUTH_TOKEN, self.seq, auth, sock)\n        cmd, _, _, msg = recv_message(sock)\n        if cmd != MSG_AUTH_STATUS or msg != 0:\n            return False\n\n        self.sock = sock\n        return True\n\n    def close(self):\n        if self.sock:\n            self.sock.close()\n\n    def recv_message(self):\n        while True:\n            rlist, _, xlist = select.select([self.sock], [], [self.sock], 60)\n            if not rlist and not xlist:\n                self.seq += 1\n                send_message(MSG_PING, self.seq, None, self.sock)\n                continue\n            if xlist:\n                return 0, 0, None\n            if rlist:\n                cmd, s, _, m = recv_message(self.sock)\n                self.handle_message(cmd, s, m)\n                return cmd, s, m\n\n    def handle_message(self, cmd, s, m):\n        if cmd == MSG_IM:\n            self.ack_message(s)\n        elif cmd == MSG_GROUP_IM:\n            self.ack_message(s)\n        elif cmd == MSG_SYSTEM:\n            self.ack_message(s)\n        elif cmd == MSG_SYNC_NOTIFY:\n            new_sync_key = m\n            now = int(time.time())\n            if new_sync_key > self.sync_key and (not self.syncing or now - self.sync_timestamp > 3):\n                self.send_sync()\n                self.syncing = True\n                self.sync_timestamp = int(time.time())\n            elif new_sync_key > self.next_sync_key:\n                self.next_sync_key = new_sync_key\n        elif cmd == MSG_SYNC_END:\n            new_sync_key = m\n            if new_sync_key > self.sync_key:\n                self.sync_key = new_sync_key\n                self.send_sync_key()\n            self.syncing = False\n            if self.next_sync_key > self.sync_key:\n                self.send_sync()\n                self.syncing = True\n                self.sync_timestamp = int(time.time())\n                self.next_sync_key = 0\n\n    def ack_message(self, s):\n        self.seq += 1\n        send_message(MSG_ACK, self.seq, s, self.sock)\n\n    def send_peer_message(self, msg):\n        self.seq += 1\n        send_message(MSG_IM, self.seq, msg, self.sock)\n\n    def send_group_message(self, msg):\n        self.seq += 1\n        send_message(MSG_GROUP_IM, self.seq, msg, self.sock)\n\n    def send_sync(self):\n        self.seq += 1\n        send_message(MSG_SYNC, self.seq, self.sync_key, self.sock)\n\n    def send_sync_key(self):\n        self.seq += 1\n        send_message(MSG_SYNC_KEY, self.seq, self.sync_key, self.sock)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport ssl\nimport threading\nimport time\nimport json\n\nclass Client:\n    def __init__(self):\n        self.seq = 0\n        self.sock = None\n        self.sync_key = 0\n        self.syncing = False\n        self.sync_timestamp = 0\n        self.next_sync_key = 0\n\n    def connect_server(self, device_id: str, token: str, host: str = None, port: int = 24430, use_ssl: bool = True) -> bool:\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            if use_ssl:\n                context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n                self.sock = context.wrap_socket(self.sock, server_hostname=host)\n            self.sock.connect((host, port))\n            auth_data = {\"device_id\": device_id, \"token\": token}\n            self.sock.sendall(json.dumps(auth_data).encode())\n            response = self.sock.recv(1024).decode()\n            if response == \"AUTH_SUCCESS\":\n                return True\n            else:\n                self.close()\n                return False\n        except Exception as e:\n            print(f\"Connection error: {e}\")\n            self.close()\n            return False\n\n    def close(self):\n        if self.sock:\n            self.sock.close()\n            self.sock = None\n\n    def recv_message(self):\n        try:\n            data = self.sock.recv(1024)\n            if not data:\n                return None\n            message = json.loads(data.decode())\n            cmd = message.get(\"cmd\")\n            seq = message.get(\"seq\")\n            payload = message.get(\"payload\")\n            self.handle_message(cmd, seq, payload)\n            self.ack_message(seq)\n            return (cmd, seq, payload)\n        except json.JSONDecodeError:\n            print(\"Received invalid JSON data\")\n            return None\n        except Exception as e:\n            print(f\"Message receive error: {e}\")\n            return None\n\n    def handle_message(self, cmd: int, s: int, m: any):\n        if cmd == 1:\n            print(f\"Received peer message: {m}\")\n        elif cmd == 2:\n            print(f\"Received group message: {m}\")\n        elif cmd == 3:\n            print(f\"Sync key updated to: {m}\")\n            self.sync_key = m\n            self.syncing = False\n        elif cmd == 4:\n            print(\"Received ping request\")\n            self.send_message(5, None)\n\n    def ack_message(self, s: int):\n        ack = {\"cmd\": 6, \"seq\": s}\n        self.sock.sendall(json.dumps(ack).encode())\n\n    def send_peer_message(self, msg: any):\n        self.seq += 1\n        message = {\"cmd\": 1, \"seq\": self.seq, \"payload\": msg}\n        self.sock.sendall(json.dumps(message).encode())\n\n    def send_group_message(self, msg: any):\n        self.seq += 1\n        message = {\"cmd\": 2, \"seq\": self.seq, \"payload\": msg}\n        self.sock.sendall(json.dumps(message).encode())\n\n    def send_sync(self):\n        if not self.syncing:\n            self.syncing = True\n            self.sync_timestamp = int(time.time())\n            message = {\"cmd\": 3, \"seq\": self.seq, \"payload\": self.sync_key}\n            self.sock.sendall(json.dumps(message).encode())\n\n    def send_sync_key(self):\n        message = {\"cmd\": 4, \"seq\": self.seq, \"payload\": self.next_sync_key}\n        self.sock.sendall(json.dumps(message).encode())\n\n    def send_message(self, cmd: int, payload: any):\n        self.seq += 1\n        message = {\"cmd\": cmd, \"seq\": self.seq, \"payload\": payload}\n        self.sock.sendall(json.dumps(message).encode())"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a TCP client for Remote Console (RCon) protocol communication, which allows sending commands to a game server and receiving responses. The implementation should handle connection establishment, command sending, response receiving, and error handling.\n\nClass Description: RConConnection is a class that manages the connection to an RCon server, handles authentication, and provides methods to send commands and receive responses. It includes error handling for various RCon protocol scenarios.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object used for communication with the RCon server\n- rid: [int] - The current request ID used for tracking requests and responses\n\nMethods:\n- __init__(target: str, port: int) -> None - Initializes the RCon connection by creating a TCP socket and connecting to the specified target and port\n- send(t: int, payload: str) -> bytes - Sends an RCon packet with the specified type and payload, waits for and returns the response data\n- login(password: str) -> None - Authenticates with the RCon server using the provided password (uses send with type 3)\n- command(com: str, args: str) -> None - Sends a command to the RCon server (uses send with type 2)\n- close() -> None - Closes the connection to the RCon server",
    "Canonical_solution": "import socket\nimport struct\nimport select\n\nclass RConException(Exception):\n    def __init__(self, request_id, reason):\n        self.request_id = request_id\n        self.reason = reason\n\n    def __str__(self):\n        return (\"Failed RCon request with request ID %d, reason %s\" %\n                (self.request_id, self.reason))\n\nclass RConConnection:\n    def __init__(self, target, port):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 0\n\n    def send(self, t, payload):\n        self.rid = self.rid + 1\n        pld_enc = payload.encode(\"utf-8\")\n        header = struct.pack(\"<iii\",\n                             len(pld_enc) + 4 + 4 + 2,  # rid, type and padding\n                             self.rid, t)\n        data = header + pld_enc + b'\\x00\\x00'\n        self.sock.send(data)\n\n        toread = select.select([self.sock], [], [], 30)\n\n        if not toread:\n            raise RConException(self.rid, \"Request timed out.\")\n\n        try:\n            res_len, res_id, res_type = \\\n                struct.unpack(\"<iii\", self.sock.recv(12, socket.MSG_WAITALL))\n            if res_len < 0:\n                raise Exception(\"Response length is {}.\".format(res_len))\n\n        except Exception as e:\n            raise RConException(self.rid,\n                                \"RCon protocol error. Are you sure you're \"\n                                \"talking to the RCon port? Error: %s\" % e)\n        res_data = self.sock.recv(res_len - 4 - 4)\n        res_data = res_data[:-2]\n\n        if res_id == -1:\n            if t == 3:\n                raise RConException(self.rid, \"Login failed.\")\n            else:\n                raise RConException(self.rid,\n                                    \"Request failed due to invalid login.\")\n        elif res_id != self.rid:\n            raise RConException(self.rid, \"Received unexpected response \"\n                                \"number: %d\" % res_id)\n        return res_data\n\n    def login(self, password):\n        self.send(3, password)\n\n    def command(self, com, args):\n        self.send(2, com + \" \" + args)\n\n    def close(self):\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\n\nclass RConConnection:\n    def __init__(self, target: str, port: int) -> None:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 1\n\n    def send(self, t: int, payload: str) -> bytes:\n        data = payload.encode('utf-8')\n        length = len(data)\n        packet = struct.pack('<II', t, length) + data\n        self.sock.sendall(packet)\n        self.rid += 1\n        response = self.sock.recv(4096)\n        return response\n\n    def login(self, password: str) -> None:\n        self.send(3, password)\n\n    def command(self, com: str, args: str) -> None:\n        self.send(2, f\"{com} {args}\")\n\n    def close(self) -> None:\n        self.sock.close()"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Create a Python function that establishes a TCP client connection to a server, sends a JSON-formatted command with arguments, receives the server's response, and then closes the connection.\n\nFunction Description: The function `connect_client` creates a TCP socket, connects to a specified server, sends a command with arguments in JSON format, waits for and prints the server's response, and finally closes the socket connection.\n\nInput:\n- `machine` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `blendpath` (str): A file path or identifier to be included in the command arguments.\n- `obj_num` (int): A numerical argument to be included in the command arguments.\n\nOutput:\n- The function does not return any value but prints the server's response to the console.",
    "Canonical_solution": "import socket, json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((machine, port))\n    args = [blendpath, obj_num]\n    command = json.dumps({'call':1, 'command':1, 'args':args})\n    sock.send((command).encode())\n    response_data = sock.recv(1024)\n    print(response_data.decode())\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((machine, port))\n    command = {\n        \"blendpath\": blendpath,\n        \"obj_num\": obj_num\n    }\n    client_socket.send(json.dumps(command).encode('utf-8'))\n    response = client_socket.recv(4096).decode('utf-8')\n    print(response)\n    client_socket.close()"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a threaded TCP client socket class that handles bidirectional communication with a remote server, managing both sending and receiving data through queues while running in a separate thread.\n\nClass Description: ThreadedTCPClientSocket is a threading-based TCP client that establishes a connection to a specified server, sends data from a queue to the server, and puts received data into another queue. It uses non-blocking operations with select() for efficient I/O handling.\n\nAttributes:\n- ip: str - The IP address of the target server\n- port: int - The port number of the target server\n- listener_q: queue.Queue - Queue for storing received data from the server\n- remote_q: queue.Queue - Queue for storing data to be sent to the server\n- config: dict - Configuration parameters for the client\n- logger: logging.Logger - Logger object for debugging and error messages\n- sock: socket.socket - The TCP socket object for communication\n\nMethods:\n- __init__(ip, port, listener_q, remote_q, config, log) -> None - Initializes the client with connection parameters and queues\n- connect() -> int - Establishes connection to the server and returns the local port number (None if failed)\n- run() -> None - Main thread loop handling send/receive operations using select()",
    "Canonical_solution": "import socket\nimport threading\nimport select\nimport queue\nimport logging\n\nBUF_SZ = 1024\n\nclass ThreadedTCPClientSocket(threading.Thread):\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        super(ThreadedTCPClientSocket, self).__init__()\n        self.ip = ip\n        self.port = int(port)\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def connect(self):\n        try:\n            self.sock.connect((self.ip, self.port))\n            new_sport = self.sock.getsockname()[1]\n            return new_sport\n        except Exception as e:\n            self.logger.debug('Listener socket exception while attempting connection %s' % str(e))\n        return None\n\n    def run(self):\n        try:\n            while True:\n                readable, writable, exceptional = select.select([self.sock], [], [], .001)\n                if not self.remote_q.empty():\n                    data = self.remote_q.get()\n                    self.sock.send(data)\n                if readable:\n                    data = self.sock.recv(BUF_SZ)\n                    if data:\n                        self.listener_q.put(data)\n                    else:\n                        self.sock.close()\n                        sys.exit(1)\n        except Exception as e:\n            self.logger.debug('Listener socket exception %s' % str(e))",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport select\nimport threading\nimport queue\n\nclass ThreadedTCPClientSocket:\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        self.ip = ip\n        self.port = port\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = None\n\n    def connect(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setblocking(0)\n            self.sock.connect((self.ip, self.port))\n            local_port = self.sock.getsockname()[1]\n            return local_port\n        except Exception as e:\n            self.logger.error(f\"Connection failed: {e}\")\n            return None\n\n    def run(self):\n        while True:\n            try:\n                readable, writable, exceptional = select.select([self.sock], [self.sock], [self.sock], 0.1)\n                if self.sock in readable:\n                    data = self.sock.recv(4096)\n                    if data:\n                        self.listener_q.put(data)\n                    else:\n                        self.logger.warning(\"Server closed connection\")\n                        break\n                if self.sock in writable:\n                    try:\n                        data = self.remote_q.get_nowait()\n                        self.sock.sendall(data)\n                    except queue.Empty:\n                        pass\n                if self.sock in exceptional:\n                    self.logger.error(\"Exceptional condition on socket\")\n                    break\n            except Exception as e:\n                self.logger.error(f\"Error in run loop: {e}\")\n                break\n        self.sock.close()"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified target server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, constructs an HTTP GET request with the provided payload, sends the request to the server, and then closes the connection. This is useful for testing TCP-based services or sending crafted HTTP requests.\n\nInput:\n- target_ip: [str] - The IP address of the target server to connect to\n- target_port: [int] - The port number on the target server to connect to\n- payload: [str] - The data to be included in the HTTP GET request path\n\nOutput: None (The function performs an action but doesn't return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    \n    buf = (\n        \"GET /\" + payload + \" HTTP/1.1\\r\\n\" + \n        \"Host: \" + target_ip + \n        \"\\r\\n\\r\\n\"\n    )\n    \n    s.send(buf)\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    request = f\"GET /{payload} HTTP/1.1\\r\\nHost: {target_ip}\\r\\n\\r\\n\"\n    s.sendall(request.encode())\n    s.close()"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Create a TCP client class for establishing and managing connections to a server, sending requests, and receiving responses using HDLC framing protocol.\n\nClass Description: TcpConnector is a class that handles TCP communication with a server using IPv4. It manages socket connection, sends requests with HDLC encapsulation, and continuously reads incoming data with HDLC decapsulation.\n\nAttributes:\n- socket: [socket.socket] - TCP socket object for communication\n- received_first_packet: [bool] - Flag indicating if first packet was received\n- packet_buffer: [bytes] - Buffer for storing incoming data\n- TRAILER_CHAR: [bytes] - Class constant for HDLC frame delimiter (assumed to be defined elsewhere in class)\n\nMethods:\n- __init__(address: str, port: int) -> None - Initializes TCP connection to specified address and port\n- send_request(packet_type: int, packet_payload: bytes) -> None - Sends HDLC-encapsulated request to server\n- read_loop() -> None - Continuously reads and processes incoming data using HDLC framing\n- __del__() -> None - Cleans up by closing socket connection\n- hdlc_encapsulate(data: bytes) -> bytes - (Assumed method) HDLC encapsulation implementation\n- hdlc_decapsulate(payload: bytes) -> bytes - (Assumed method) HDLC decapsulation implementation\n- dispatch_received_diag_packet(unframed_message: bytes) -> None - (Assumed method) Handles processed packets",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\nclass TcpConnector:\n    def __init__(self, address: str, port: int):\n        self.socket = socket(AF_INET, SOCK_STREAM)\n        try:\n            self.socket.connect((address, port))\n        except Exception:\n            raise ConnectionError('Could not communicate with the DIAG device through TCP')\n        \n        self.received_first_packet = False\n        self.packet_buffer = b''\n\n    def send_request(self, packet_type: int, packet_payload: bytes):\n        raw_payload = self.hdlc_encapsulate(bytes([packet_type]) + packet_payload)\n        self.socket.send(raw_payload)\n\n    def read_loop(self):\n        while True:\n            while self.TRAILER_CHAR not in self.packet_buffer:\n                socket_read = self.socket.recv(1024 * 1024 * 10)\n                self.packet_buffer += socket_read\n\n            while self.TRAILER_CHAR in self.packet_buffer:\n                raw_payload, self.packet_buffer = self.packet_buffer.split(self.TRAILER_CHAR, 1)\n\n                try:\n                    unframed_message = self.hdlc_decapsulate(\n                        payload=raw_payload + self.TRAILER_CHAR\n                    )\n                except self.InvalidFrameError:\n                    continue\n                finally:\n                    self.received_first_packet = True\n\n                self.dispatch_received_diag_packet(unframed_message)\n\n    def __del__(self):\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport threading\n\nclass TcpConnector:\n    TRAILER_CHAR = b'\\x7E'\n\n    def __init__(self, address: str, port: int) -> None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect((address, port))\n        self.received_first_packet = False\n        self.packet_buffer = b''\n        self.running = True\n        self.read_thread = threading.Thread(target=self.read_loop)\n        self.read_thread.start()\n\n    def send_request(self, packet_type: int, packet_payload: bytes) -> None:\n        encapsulated = self.hdlc_encapsulate(packet_payload)\n        self.socket.sendall(encapsulated)\n\n    def read_loop(self) -> None:\n        while self.running:\n            try:\n                data = self.socket.recv(4096)\n                if not data:\n                    break\n                self.packet_buffer += data\n                self._process_buffer()\n            except Exception as e:\n                print(f\"Read error: {e}\")\n                break\n        self.socket.close()\n\n    def _process_buffer(self) -> None:\n        while self.packet_buffer:\n            if self.TRAILER_CHAR in self.packet_buffer:\n                frame, self.packet_buffer = self.packet_buffer.split(self.TRAILER_CHAR, 1)\n                if self.received_first_packet:\n                    unframed = self.hdlc_decapsulate(frame)\n                    self.dispatch_received_diag_packet(unframed)\n                else:\n                    self.received_first_packet = True\n                    unframed = self.hdlc_decapsulate(frame)\n                    self.dispatch_received_diag_packet(unframed)\n            else:\n                break\n\n    def __del__(self) -> None:\n        self.running = False\n        self.read_thread.join()\n        self.socket.close()\n\n    def hdlc_encapsulate(self, data: bytes) -> bytes:\n        return data\n\n    def hdlc_decapsulate(self, payload: bytes) -> bytes:\n        return payload\n\n    def dispatch_received_diag_packet(self, unframed_message: bytes) -> None:\n        pass"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Implement a TCP client handler class that manages socket communication with a server, including sending and receiving data, handling connection states, and processing messages.\n\nClass Description: EventHandler is a TCP client handler that manages non-blocking socket communication with a server. It provides methods for sending and receiving data, handling connection states, and processing messages. The class uses threading locks to ensure thread-safe operations on the socket.\n\nAttributes:\n- _write_lock: threading.RLock - Lock for thread-safe write operations\n- _read_lock: threading.RLock - Lock for thread-safe read operations\n- address: tuple - Server address (IP, port) to connect to\n- outbuffer: bytes - Buffer for outgoing data\n- inbuffer: bytes - Buffer for incoming data\n- sock: socket.socket - TCP socket object\n- connected: bool - Connection state flag\n\nMethods:\n- __init__(address: tuple, sock: socket.socket=None) -> None - Initializes the handler with server address and optional existing socket\n- fileno() -> int - Returns socket file descriptor for select()\n- send() -> int - Sends data from outbuffer to server (returns bytes sent)\n- recv() -> None - Receives data from server and processes messages\n- push(data: bytes) -> None - Adds data to outbuffer for sending\n- handle_read(data: bytes) -> None - Abstract method to handle received data (must be implemented)\n- process_message() -> None - Abstract method to process complete messages (must be implemented)\n- ready_to_read() -> bool - Returns if ready for reading (default True)\n- ready_to_write() -> bool - Returns if ready for writing (default True)\n- close() -> None - Closes the socket connection",
    "Canonical_solution": "import os\nimport sys\nimport time\nimport errno\nimport socket\nimport select\nimport logging\nimport threading\n\nclass EventHandler:\n    def __init__(self, address: tuple, sock: socket.socket=None) -> None:\n        self._write_lock = threading.RLock()\n        self._read_lock = threading.RLock()\n        self.address = address\n        self.outbuffer = b''\n        self.inbuffer = b''\n        self.sock = sock if sock is not None else socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(address)\n        self.connected = True\n        self.sock.setblocking(False)\n\n    def fileno(self) -> int:\n        return self.sock.fileno()\n\n    def send(self) -> int:\n        with self._write_lock:\n            while len(self.outbuffer) > 0:\n                try:\n                    sent = self.sock.send(self.outbuffer)\n                    self.outbuffer = self.outbuffer[sent:]\n                except socket.error as error:\n                    if error.args[0] == errno.EAGAIN:\n                        time.sleep(0.1)\n                    elif error.args[0] in (errno.ECONNRESET, errno.ENOTCONN, errno.ESHUTDOWN, errno.ECONNABORTED, errno.EPIPE):\n                        self.close()\n                        return 0\n                    elif os.name == 'posix':\n                        if sys.platform == 'darwin' and error.args[0] == errno.EBADF:\n                            self.close()\n                            return 0\n                        elif error.args[0] == errno.EBADFD:\n                            self.close()\n                            return 0\n                        raise\n                    else:\n                        raise\n\n    def recv(self) -> None:\n        try:\n            data = self.sock.recv(4096)\n        except socket.error as error:\n            if error.args[0] in (errno.EWOULDBLOCK, errno.EAGAIN):\n                return None\n            elif error.args[0] == errno.ECONNRESET:\n                self.close()\n                return None\n            else:\n                raise\n\n        if not data:\n            self.close()\n            return None\n\n        self.inbuffer += data\n\n        while self.inbuffer:\n            match = b'\\r\\n'\n            index = self.inbuffer.find(match)\n            if index != -1:\n                if index > 0:\n                    self.handle_read(self.inbuffer[:index])\n                self.inbuffer = self.inbuffer[index+len(match):]\n                self.process_message()\n            else:\n                index = len(match) - 1\n                while index and not self.inbuffer.endswith(match[:index]):\n                    index -= 1\n                if index:\n                    if index != len(self.inbuffer):\n                        self.handle_read(self.inbuffer[:-index])\n                        self.inbuffer = self.inbuffer[-index:]\n                    break\n                else:\n                    self.handle_read(self.inbuffer)\n                    self.inbuffer = b''\n\n    def push(self, data: bytes) -> None:\n        self.outbuffer += data\n\n    def handle_read(self, data: bytes) -> None:\n        raise NotImplementedError('You have to implement this method')\n\n    def process_message(self) -> None:\n        raise NotImplementedError('You have to implement this method')\n\n    def ready_to_read(self) -> bool:\n        return True\n\n    def ready_to_write(self) -> bool:\n        return True\n\n    def close(self) -> None:\n        self.sock.close()\n        self.connected = False",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport threading\n\nclass EventHandler:\n    def __init__(self, address: tuple, sock: socket.socket=None):\n        self._write_lock = threading.RLock()\n        self._read_lock = threading.RLock()\n        self.address = address\n        self.outbuffer = b''\n        self.inbuffer = b''\n        self.sock = sock or socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.connected = False\n\n    def fileno(self) -> int:\n        return self.sock.fileno()\n\n    def send(self) -> int:\n        with self._write_lock:\n            if not self.connected:\n                return 0\n            if not self.outbuffer:\n                return 0\n            try:\n                sent = self.sock.send(self.outbuffer)\n                self.outbuffer = self.outbuffer[sent:]\n                return sent\n            except Exception as e:\n                self.close()\n                return 0\n\n    def recv(self) -> None:\n        with self._read_lock:\n            if not self.connected:\n                return\n            try:\n                data = self.sock.recv(4096)\n                if not data:\n                    self.close()\n                    return\n                self.inbuffer += data\n                self.process_message()\n            except Exception as e:\n                self.close()\n\n    def push(self, data: bytes) -> None:\n        with self._write_lock:\n            self.outbuffer += data\n\n    def handle_read(self, data: bytes) -> None:\n        pass\n\n    def process_message(self) -> None:\n        pass\n\n    def ready_to_read(self) -> bool:\n        return True\n\n    def ready_to_write(self) -> bool:\n        return True\n\n    def close(self) -> None:\n        self.connected = False\n        try:\n            self.sock.shutdown(socket.SHUT_RDWR)\n        except:\n            pass\n        self.sock.close()"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Create a Python class that implements a threaded TCP client for sending HTTP requests to a target server, with configurable request methods and target sites.\n\nClass Description: MyThread is a Thread subclass designed to repeatedly send HTTP requests to a specified web server. It supports different HTTP methods and includes functionality to terminate the thread. The class handles socket creation, connection establishment, request sending, and connection cleanup.\n\nAttributes:\n- method: str - The HTTP method to use for requests (e.g., GET, POST)\n- site: str - The target website domain to connect to\n- kill_received: bool - Flag to control thread termination\n\nMethods:\n- __init__(site: str, dos_type: str) -> None - Initializes the thread with target site and HTTP method\n- run() -> None - Main thread execution method that handles the TCP connection and request sending loop\n- (Inherited from Thread) start() -> None - Begins thread execution\n- (Inherited from Thread) join() -> None - Waits for thread to complete",
    "Canonical_solution": "import sys\nimport socket\nimport time\nfrom threading import Thread\n\nclass MyThread(Thread):\n    def __init__(self, site, dos_type):\n        Thread.__init__(self)\n        self.method = dos_type\n        self.site = site\n        self.kill_received = False\n\n    def run(self):\n        while not self.kill_received:\n            server = socket.gethostbyname(self.site)\n            post = 'x' * 9999\n            file = '/'\n\n            request = '%s /%s HTTP/1.1\\r\\n' % (self.method.upper(), file)\n            request += 'Host: %s\\r\\n' % (self.site)\n            request += 'User-Agent: Mozilla/5.0 (Windows; U;Windows NT 6.1; en-US; rv:1.9.2.12) Gecko/20101026Firefox/3.6.12\\r\\n'\n            request += 'Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n'\n            request += 'Accept-Language: en-us,en;q=0.5\\r\\n'\n            request += 'Accept-Encoding: gzip,deflate\\r\\n'\n            request += 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\\r\\n'\n            request += 'Keep-Alive: 9000\\r\\n'\n            request += 'Connection: close\\r\\n'\n            request += 'Content-Type: application/x-www-form-urlencoded\\r\\n'\n            request += 'Content-length: %s\\r\\n\\r\\n' % (len(post))\n\n            newrequest = '%s\\r\\n' % (post)\n            newrequest += '\\r\\n'\n\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n            try:\n                s.connect((server, 80))\n                s.send(request)\n\n                for c in newrequest:\n                    sys.stdout.write(s.send(c).__str__())\n                    time.sleep(60)\n                s.close()\n            except:\n                print \"Target Down?\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import threading\nimport socket\n\nclass MyThread(threading.Thread):\n    def __init__(self, site: str, dos_type: str):\n        super().__init__()\n        self.method = dos_type\n        self.site = site\n        self.kill_received = False\n\n    def run(self):\n        while not self.kill_received:\n            try:\n                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                s.settimeout(5)\n                s.connect((self.site, 80))\n                request = f\"{self.method} / HTTP/1.1\\r\\nHost: {self.site}\\r\\n\\r\\n\"\n                s.sendall(request.encode())\n                s.close()\n            except Exception as e:\n                pass\n            if self.kill_received:\n                break\n\n    def kill(self):\n        self.kill_received = True"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: Create a TCP client class in Python that can connect to a server, send and receive data, and manage the connection lifecycle.\n\nClass Description: TCPClient is a class that implements TCP client functionality using Python's socket module. It handles connection establishment, data transmission, and connection termination with a TCP server.\n\nAttributes:\n- s: Optional[socket.socket] - The socket object used for communication, initialized as None when not connected\n\nMethods:\n- connect(host: str, port: int) -> None - Establishes a connection to the specified host and port after validating the input parameters\n- send_data(data: str) -> None - Sends UTF-8 encoded string data to the connected server\n- receive_data() -> bytes - Receives all available data from the server until the connection is closed\n- close() -> None - Closes the socket connection and resets the socket attribute\n- _dotted_quad_to_num(ip: str) -> int - (Private method) Converts a dotted quad IP address string to its integer representation",
    "Canonical_solution": "import socket\nimport re\nimport ipaddress\nfrom typing import Optional\n\nclass TCPClient:\n    def __init__(self):\n        self.s: Optional[socket.socket] = None\n\n    def connect(self, host: str, port: int) -> None:\n        \"\"\"\n        Connect to a TCP server\n        Args:\n            host: Target host IP or domain\n            port: Target port number\n        \"\"\"\n        if not re.match(r\"^\\d+$\", str(port)):\n            raise ValueError(f\"Invalid port number: {port}\")\n\n        if re.match(r\"^\\d+$\", host):\n            address = int(host)\n        elif re.match(r\"^[\\d\\.]+$\", host):\n            address = self._dotted_quad_to_num(host)\n        else:\n            raise ValueError(\"DNS resolution not implemented\")\n\n        if ipaddress.ip_address(address).is_private:\n            raise ValueError(\"Private IP addresses not allowed\")\n\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.connect((host, port))\n\n    def send_data(self, data: str) -> None:\n        \"\"\"\n        Send data to the connected server\n        Args:\n            data: String data to send\n        \"\"\"\n        if self.s:\n            self.s.send(data.encode('utf8'))\n\n    def receive_data(self) -> bytes:\n        \"\"\"\n        Receive data from the connected server\n        Returns:\n            Received bytes data\n        \"\"\"\n        if not self.s:\n            return b\"\"\n\n        data = b\"\"\n        while True:\n            packet = self.s.recv(1024)\n            if not packet:\n                break\n            data += packet\n        return data\n\n    def close(self) -> None:\n        \"\"\"\n        Close the socket connection\n        \"\"\"\n        if self.s:\n            self.s.close()\n            self.s = None\n\n    def _dotted_quad_to_num(self, ip: str) -> int:\n        \"\"\"\n        Convert decimal dotted quad string to integer\n        Args:\n            ip: IP address string\n        Returns:\n            Integer representation of IP\n        \"\"\"\n        ip32bit = socket.inet_aton(ip)\n        return struct.unpack(\"I\", ip32bit)[0]",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass TCPClient:\n    def __init__(self):\n        self.s = None\n\n    def connect(self, host: str, port: int) -> None:\n        if not isinstance(host, str) or not host:\n            raise ValueError(\"Host must be a non-empty string\")\n        if not isinstance(port, int) or not (1 <= port <= 65535):\n            raise ValueError(\"Port must be an integer between 1 and 65535\")\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.connect((host, port))\n\n    def send_data(self, data: str) -> None:\n        if self.s is None:\n            raise ConnectionError(\"Not connected to a server\")\n        if not isinstance(data, str):\n            raise TypeError(\"Data must be a string\")\n        self.s.sendall(data.encode('utf-8'))\n\n    def receive_data(self) -> bytes:\n        if self.s is None:\n            raise ConnectionError(\"Not connected to a server\")\n        try:\n            return self.s.recv(4096)\n        except socket.error as e:\n            self.close()\n            raise ConnectionError(f\"Receive error: {e}\")\n\n    def close(self) -> None:\n        if self.s is not None:\n            self.s.close()\n            self.s = None\n\n    def _dotted_quad_to_num(self, ip: str) -> int:\n        if not isinstance(ip, str) or not ip:\n            raise ValueError(\"IP must be a non-empty string\")\n        parts = list(map(int, ip.split('.')))\n        if len(parts) != 4 or any(not (0 <= x <= 255) for x in parts):\n            raise ValueError(\"Invalid IP address format\")\n        return (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8) | parts[3]"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a Python function that scans a target host and port for open TCP connections and attempts to retrieve service information from the connected port.\n\nFunction Description: The function should attempt to establish a TCP connection to the specified host and port, with a timeout of 1 second. If successful, it should try to receive initial data from the service (up to 1024 bytes). The function should process the received data by filtering non-printable characters and truncating long responses. The results should be stored in a global dictionary with information about the port's protocol, service, and state.\n\nInput:\n- target: tuple - A tuple containing (host, port) where host is the target IP address or hostname (string) and port is the target port number (integer or string)\n\nOutput:\n- None - The function doesn't return any value directly but updates the global 'results' dictionary with scan results in the format:\n  {\n      host: {\n          port: {\n              'protocol': string,\n              'service': string,\n              'state': string\n          }\n      }\n  }",
    "Canonical_solution": "import socket\nimport json\n\ndef _scan(target):\n    \"\"\"\n    Scan a target host and port for open connections and service information\n    \n    Args:\n        target (tuple): A tuple containing (host, port) to scan\n    \n    Returns:\n        None: Updates global results dictionary with scan results\n    \"\"\"\n    global ports\n    global results\n\n    try:\n        data = None\n        host, port = target\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1.0)\n        sock.connect((str(host), int(port)))\n\n        try:\n            data = sock.recv(1024)\n        except (socket.error, socket.timeout):\n            pass\n\n        sock.close()\n\n        if data:\n            data = ''.join([i for i in data if i in ([chr(n) for n in range(32, 123)])])\n            data = data.splitlines()[0] if '\\n' in data else str(data if len(str(data)) <= 80 else data[:77] + '...')\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': data, 'state': 'open'}}\n        else:\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': ports[str(port)]['service'], 'state': 'open'}}\n\n        results.get(host).update(item)\n\n    except (socket.error, socket.timeout):\n        pass\n    except Exception as e:\n        util.log(\"{} error: {}\".format(_scan.__name__, str(e)))",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport re\n\nresults = {}\n\ndef scan_port(target):\n    global results\n    host, port = target\n    try:\n        port = int(port)\n    except ValueError:\n        return\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.settimeout(1)\n    try:\n        sock.connect((host, port))\n        state = 'open'\n        data = sock.recv(1024)\n        service = ''\n        if data:\n            filtered_data = re.sub(r'[\\x00-\\x1F\\x7F]', '', data.decode('utf-8', errors='ignore'))\n            service = filtered_data[:256]\n        protocol = 'tcp'\n        if host not in results:\n            results[host] = {}\n        results[host][port] = {\n            'protocol': protocol,\n            'service': service,\n            'state': state\n        }\n    except (socket.timeout, socket.error):\n        state = 'closed'\n        if host not in results:\n            results[host] = {}\n        results[host][port] = {\n            'protocol': 'tcp',\n            'service': '',\n            'state': state\n        }\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a TokenManager class that handles the generation and management of various TikTok authentication tokens (msToken, ttwid, odin_tt) through HTTP requests using the httpx library.\n\nClass Description: The TokenManager class is responsible for managing TikTok authentication tokens by interacting with TikTok's API endpoints. It reads configuration from a YAML file, handles token generation (both real and fallback tokens), and manages HTTP requests with retries and proxy support.\n\nAttributes:\n- token_conf: [dict] - Configuration for msToken generation including URL, headers, and payload data\n- ttwid_conf: [dict] - Configuration for ttwid generation including URL and request data\n- odin_tt_conf: [dict] - Configuration for odin_tt generation including URL\n- proxies: [dict] - Proxy configuration for HTTP and HTTPS connections\n\nMethods:\n- __init__() -> [None] - Initializes the TokenManager by loading configuration from config.yaml\n- gen_real_msToken() -> [str] - Generates a real msToken by making a POST request to TikTok's API endpoint\n- gen_false_msToken() -> [str] - Generates a fallback msToken with random characters when real token generation fails\n- gen_ttwid(cookie: str) -> [str] - Generates a ttwid by making a POST request with the provided cookie\n- gen_odin_tt() -> [str] - Generates an odin_tt by making a GET request to TikTok's endpoint",
    "Canonical_solution": "import os\nimport json\nimport yaml\nimport httpx\nimport asyncio\nfrom typing import Union\n\nclass TokenManager:\n    def __init__(self):\n        path = os.path.abspath(os.path.dirname(__file__))\n        with open(f\"{path}/config.yaml\", \"r\", encoding=\"utf-8\") as f:\n            config = yaml.safe_load(f)\n        \n        tiktok_manager = config.get(\"TokenManager\").get(\"tiktok\")\n        self.token_conf = tiktok_manager.get(\"msToken\", None)\n        self.ttwid_conf = tiktok_manager.get(\"ttwid\", None)\n        self.odin_tt_conf = tiktok_manager.get(\"odin_tt\", None)\n        proxies_conf = tiktok_manager.get(\"proxies\", None)\n        self.proxies = {\n            \"http://\": proxies_conf.get(\"http\", None),\n            \"https://\": proxies_conf.get(\"https\", None),\n        }\n\n    def gen_real_msToken(self) -> str:\n        payload = json.dumps({\n            \"magic\": self.token_conf[\"magic\"],\n            \"version\": self.token_conf[\"version\"],\n            \"dataType\": self.token_conf[\"dataType\"],\n            \"strData\": self.token_conf[\"strData\"],\n            \"tspFromClient\": get_timestamp(),\n        })\n\n        headers = {\n            \"User-Agent\": self.token_conf[\"User-Agent\"],\n            \"Content-Type\": \"application/json\",\n        }\n\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.token_conf[\"url\"], headers=headers, content=payload\n                )\n                response.raise_for_status()\n                msToken = str(httpx.Cookies(response.cookies).get(\"msToken\"))\n                return msToken\n            except Exception as e:\n                logger.error(f\"\u751f\u6210TikTok msToken API\u9519\u8bef\uff1a{e}\")\n                return self.gen_false_msToken()\n\n    def gen_false_msToken(self) -> str:\n        return gen_random_str(146) + \"==\"\n\n    def gen_ttwid(self, cookie: str) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.ttwid_conf[\"url\"],\n                    content=self.ttwid_conf[\"data\"],\n                    headers={\n                        \"Cookie\": cookie,\n                        \"Content-Type\": \"text/plain\",\n                    },\n                )\n                response.raise_for_status()\n                ttwid = httpx.Cookies(response.cookies).get(\"ttwid\")\n                if ttwid is None:\n                    raise APIResponseError(\"ttwid: \u68c0\u67e5\u6ca1\u6709\u901a\u8fc7, \u8bf7\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684ttwid\")\n                return ttwid\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.ttwid_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")\n\n    def gen_odin_tt(self) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.get(self.odin_tt_conf[\"url\"])\n                response.raise_for_status()\n                odin_tt = httpx.Cookies(response.cookies).get(\"odin_tt\")\n                if odin_tt is None:\n                    raise APIResponseError(f\"{'odin_tt'} \u5185\u5bb9\u4e0d\u7b26\u5408\u8981\u6c42\")\n                return odin_tt\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.odin_tt_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nimport yaml\nimport random\nimport string\nimport os\n\nclass TokenManager:\n    def __init__(self):\n        config_path = os.path.join(os.path.dirname(__file__), 'config.yaml')\n        with open(config_path, 'r') as file:\n            config = yaml.safe_load(file)\n        self.token_conf = config['token']\n        self.ttwid_conf = config['ttwid']\n        self.odin_tt_conf = config['odin_tt']\n        self.proxies = config.get('proxies', {})\n\n    def gen_real_msToken(self):\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.post(\n                    self.token_conf['url'],\n                    headers=self.token_conf['headers'],\n                    data=self.token_conf['data'],\n                    timeout=10\n                )\n                response.raise_for_status()\n                return response.text.strip()\n        except Exception as e:\n            print(f\"Failed to generate real msToken: {e}\")\n            return self.gen_false_msToken()\n\n    def gen_false_msToken(self):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=32))\n\n    def gen_ttwid(self, cookie: str):\n        try:\n            headers = self.ttwid_conf['headers'].copy()\n            headers['Cookie'] = cookie\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.post(\n                    self.ttwid_conf['url'],\n                    headers=headers,\n                    data=self.ttwid_conf['data'],\n                    timeout=10\n                )\n                response.raise_for_status()\n                return response.text.strip()\n        except Exception as e:\n            print(f\"Failed to generate ttwid: {e}\")\n            return ''\n\n    def gen_odin_tt(self):\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.get(\n                    self.odin_tt_conf['url'],\n                    headers=self.odin_tt_conf['headers'],\n                    timeout=10\n                )\n                response.raise_for_status()\n                return response.text.strip()\n        except Exception as e:\n            print(f\"Failed to generate odin_tt: {e}\")\n            return ''"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a thread-safe TCP socket wrapper class that handles connection management, data transmission, and SSL/TLS encryption with proper resource cleanup.\n\nClass Description: SafeStreamSocket is a robust socket wrapper that provides safe connection handling, unique socket identification, and SSL/TLS capabilities. It manages socket lifecycle including proper cleanup and supports both IPv4 and Unix domain sockets.\n\nAttributes:\n_id: [int] - Unique identifier for the socket instance\n_dup_sock: [socket.socket] - Duplicate socket used during SSL/TLS handshake\n_name: [str] - Optional name identifier for the socket\n_sock: [socket.socket] - Main socket connection object\n_finalizer: [weakref.finalize] - Weak reference finalizer for cleanup\n_id_numbers: [class attribute, list[int]] - Tracks all active socket IDs\n_n: [class attribute, list[int]] - Counter for generating unique IDs\n\nMethods:\n__init__: [constructor](addr: Union[str, Tuple[str, int], socket.socket, Any]) -> None - Initializes socket connection with the given address\n_acquire_uid: [_acquire_uid]() -> int - Generates a unique ID for the socket instance\n_connect: [_connect](addr: Union[str, Tuple[str, int], socket.socket, Any]) -> socket.socket - Establishes connection to the specified address\n_cleanup: [_cleanup]() -> None - Performs cleanup operations when socket is closed\n_release_uid: [_release_uid](id: int) -> None - Releases the socket ID when closed\nclose: [close]() -> None - Closes the socket connection\nclosed: [property]() -> bool - Returns whether socket is closed\nid: [property]() -> int - Returns socket ID\nname: [property]() -> str - Gets socket name\nname: [setter](new_name: str) -> None - Sets socket name\nget_socket: [get_socket]() -> socket.socket - Returns underlying socket object\nrecv: [recv](bufsize: int = 4096) -> bytes - Receives data from socket\nrecvall: [recvall](size: int) -> bytearray - Receives exact amount of data\nsendall: [sendall](data: Union[bytes, bytearray]) -> int - Sends all data through socket\nswitch_to_ssl: [switch_to_ssl](pemfile: str) -> None - Upgrades connection to SSL/TLS\n__enter__: [__enter__]() -> SafeStreamSocket - Context manager entry\n__exit__: [__exit__](*args) -> None - Context manager exit",
    "Canonical_solution": "import logging\nimport os\nimport socket\nimport ssl\nimport threading\nimport typing\nimport weakref\nfrom typing import Any, Union\n\nclass SafeStreamSocket:\n    def __init__(self, addr: Union[str, typing.Tuple[str, int], socket.socket, Any]):\n        self._id = self._acquire_uid()\n        self._dup_sock = None\n        self._name = None\n        self._sock = self._connect(addr)\n        self._finalizer = weakref.finalize(self, self._cleanup)\n\n    def _acquire_uid(self) -> int:\n        with threading.Lock():\n            self._id_numbers.append(self._n[0])\n            _id = self._n[0]\n            self._n[0] += 1\n        logging.debug(\"Opening socket: id=%d\", _id)\n        return _id\n\n    def _connect(self, addr: Union[str, typing.Tuple[str, int], socket.socket, Any]) -> socket.socket:\n        if isinstance(addr, socket.socket):\n            return addr\n        if isinstance(addr, str):\n            if ':' in addr:\n                host, port = addr.split(\":\", 1)\n                addr = (host, int(port))\n                family = socket.AF_INET\n            elif os.path.exists(addr):\n                family = socket.AF_UNIX\n            else:\n                raise SocketError(f\"socket unix:{addr} unable to connect\")\n        else:\n            family = socket.AF_INET\n        sock = socket.socket(family, socket.SOCK_STREAM)\n        sock.connect(addr)\n        return sock\n\n    def _cleanup(self):\n        self._release_uid(self.id)\n        sock = self._dup_sock or self._sock\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def _release_uid(self, id: int):\n        try:\n            self._id_numbers.remove(id)\n        except ValueError:\n            pass\n        logging.debug(\"Closing socket, id=%d\", id)\n\n    def close(self):\n        self._finalizer()\n\n    @property\n    def closed(self) -> bool:\n        return not self._finalizer.alive\n\n    @property\n    def id(self) -> int:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, new_name: str):\n        self._name = new_name\n\n    def get_socket(self) -> socket.socket:\n        return self._sock\n\n    def recv(self, bufsize: int = 4096) -> bytes:\n        try:\n            return self._sock.recv(bufsize)\n        except socket.timeout as e:\n            raise SocketError(\"socket timeout\") from e\n        except ssl.SSLError as e:\n            raise SocketError(\"ssl error\") from e\n        except Exception as e:\n            raise SocketError(\"socket error\") from e\n\n    def recvall(self, size: int) -> bytearray:\n        buf = bytearray()\n        while len(buf) < size:\n            chunk = self.recv(size-len(buf))\n            if not chunk:\n                raise SocketError(\"recvall: socket connection broken\")\n            buf.extend(chunk)\n        return buf\n\n    def sendall(self, data: Union[bytes, bytearray]) -> int:\n        try:\n            return self._sock.sendall(data)\n        except Exception as e:\n            raise SocketError(\"sendall error\") from e\n\n    def switch_to_ssl(self, pemfile):\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS)\n        try:\n            context.verify_mode = ssl.CERT_NONE\n            context.set_ciphers(\"ALL:@SECLEVEL=0\")\n        except ssl.SSLError:\n            pass\n        self._dup_sock = self._sock.dup()\n        context.load_cert_chain(pemfile, keyfile=pemfile)\n        context.check_hostname = False\n        self._sock = context.wrap_socket(self._sock, server_hostname=\"iphone.localhost\")\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport ssl\nimport weakref\nfrom typing import Union, Any, Tuple, List, Optional\n\nclass SafeStreamSocket:\n    _id_numbers: List[int] = []\n    _n: List[int] = [1]\n\n    def __init__(self, addr: Union[str, Tuple[str, int], socket.socket, Any]) -> None:\n        self._id = self._acquire_uid()\n        self._dup_sock = None\n        self._name = \"\"\n        self._sock = self._connect(addr)\n        self._finalizer = weakref.finalize(self, self._cleanup)\n        SafeStreamSocket._id_numbers.append(self._id)\n\n    def _acquire_uid(self) -> int:\n        id_num = SafeStreamSocket._n[0]\n        SafeStreamSocket._n[0] += 1\n        return id_num\n\n    def _connect(self, addr: Union[str, Tuple[str, int], socket.socket, Any]) -> socket.socket:\n        if isinstance(addr, socket.socket):\n            sock = addr\n        else:\n            family = socket.AF_UNIX if isinstance(addr, str) and addr.startswith(\"/\") else socket.AF_INET\n            sock = socket.socket(family, socket.SOCK_STREAM)\n            sock.connect(addr)\n        return sock\n\n    def _cleanup(self) -> None:\n        if self._sock:\n            try:\n                self._sock.shutdown(socket.SHUT_RDWR)\n            except:\n                pass\n            try:\n                self._sock.close()\n            except:\n                pass\n        if self._dup_sock:\n            try:\n                self._dup_sock.close()\n            except:\n                pass\n        SafeStreamSocket._release_uid(self._id)\n\n    @classmethod\n    def _release_uid(cls, id: int) -> None:\n        if id in cls._id_numbers:\n            cls._id_numbers.remove(id)\n\n    def close(self) -> None:\n        self._sock.close()\n        if self._dup_sock:\n            self._dup_sock.close()\n\n    @property\n    def closed(self) -> bool:\n        return self._sock.fileno() == -1\n\n    @property\n    def id(self) -> int:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, new_name: str) -> None:\n        self._name = new_name\n\n    def get_socket(self) -> socket.socket:\n        return self._sock\n\n    def recv(self, bufsize: int = 4096) -> bytes:\n        return self._sock.recv(bufsize)\n\n    def recvall(self, size: int) -> bytearray:\n        data = bytearray()\n        while len(data) < size:\n            packet = self._sock.recv(size - len(data))\n            if not packet:\n                break\n            data.extend(packet)\n        return data\n\n    def sendall(self, data: Union[bytes, bytearray]) -> int:\n        return self._sock.sendall(data)\n\n    def switch_to_ssl(self, pemfile: str) -> None:\n        self._dup_sock = self._sock.dup()\n        self._sock.close()\n        self._sock = ssl.wrap_socket(self._dup_sock, cert_reqs=ssl.CERT_REQUIRED, ca_certs=pemfile)\n\n    def __enter__(self) -> \"SafeStreamSocket\":\n        return self\n\n    def __exit__(self, *args) -> None:\n        self.close()"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a TCP/UDP/RAW socket server class that can handle incoming connections, receive data, and optionally send responses. The server should support different protocols (TCP, UDP, RAW) and provide methods for single interaction or receiving until a specific pattern is matched.\n\nClass Description: MiniTestServer is a versatile socket server implementation that supports TCP, UDP, and RAW packet protocols. It can operate in silent mode (only receiving) or respond to clients, and includes timeout handling for operations.\n\nAttributes:\n- server_socket: [socket.socket] - The underlying socket object\n- received: [bytes] - The last received data from a client\n- data_to_send: [bytes] - Default data to send in response (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is bound to\n- stay_silent: [bool] - If True, server won't send responses (default: False)\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw') (default: 'tcp')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Operation timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters\n- bind() -> None - Creates and binds the socket according to the specified protocol\n- serve_once() -> None - Handles a single client interaction (receive and optionally send)\n- receive_until(expected) -> None - (RAW only) Receives data until matching expected pattern or timeout",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            self.received = client_socket.recv(10000)\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None\n\n    def receive_until(self, expected):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"raw\":\n            elapsed_time = 0\n            start_time = time.time()\n            while elapsed_time < self.timeout:\n                self.server_socket.settimeout(self.timeout - elapsed_time)\n                try:\n                    data, addr = self.server_socket.recvfrom(10000)\n                    if data == expected:\n                        self.received = data\n                        if not self.stay_silent:\n                            self.server_socket.sendto(self.data_to_send, addr)\n                        break\n                except socket.timeout:\n                    break\n                elapsed_time = time.time() - start_time\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.stay_silent = stay_silent\n        self.proto = proto.lower()\n        self.host = host\n        self.timeout = 5\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.received = b\"\"\n        self.server_socket = None\n        self.active_port = None\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))\n        else:\n            raise ValueError(\"Unsupported protocol\")\n        self.server_socket.settimeout(self.timeout)\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n            client_socket, addr = self.server_socket.accept()\n            self.received = client_socket.recv(4096)\n            if not self.stay_silent:\n                client_socket.sendall(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            self.received, addr = self.server_socket.recvfrom(4096)\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            self.received = self.server_socket.recv(65535)\n\n    def receive_until(self, expected):\n        if self.proto != \"raw\":\n            raise ValueError(\"receive_until is only supported for RAW protocol\")\n        buffer = b\"\"\n        while True:\n            ready = select.select([self.server_socket], [], [], self.timeout)[0]\n            if ready:\n                buffer += self.server_socket.recv(65535)\n                if expected in buffer:\n                    self.received = buffer\n                    return\n            else:\n                raise TimeoutError(\"Timeout waiting for expected pattern\")"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: Implement a mock SSH agent that simulates the behavior of a real SSH agent, handling client requests for key management and authentication. The agent should support Unix domain sockets for IPC and provide functionality to start, stop, and manage client connections.\n\nClass Description: The `MockSSHAgent` class simulates an SSH agent that can load an ED25519 private key, handle client connections, and respond to SSH agent protocol requests. It uses threading to handle multiple clients and supports graceful shutdown.\n\nAttributes:\n\n- `sock_path`: [str] - The path to the Unix domain socket used for communication.\n- `server_sock`: [socket.socket] - The server socket object for accepting client connections.\n- `running`: [threading.Event] - A threading event to control the agent's running state.\n- `keys`: [list] - A list of tuples containing key information (key_type, key_blob, comment).\n- `agent_thread`: [threading.Thread] - The thread handling client connections.\n\nMethods:\n\n- `_load_ed25519_private_key(private_key_path: str) -> tuple`: Loads an ED25519 private key from a file and returns a tuple containing key information (key_type, key_blob, comment).\n- `start_agent(sock_path: str) -> None`: Starts the SSH agent by creating a Unix domain socket, binding it, and listening for client connections. Sets the `SSH_AUTH_SOCK` environment variable.\n- `_accept_connections() -> None`: Continuously accepts client connections and delegates handling to `_handle_client`.\n- `_handle_client(client_sock: socket.socket) -> None`: Handles a client connection by processing incoming messages and sending appropriate responses.\n- `_mock_list_keys_response() -> bytes`: Constructs a mock response to the `SSH_AGENTC_REQUEST_IDENTITIES` request.\n- `stop_agent() -> None`: Stops the SSH agent by sending a stop command, cleaning up resources, and removing the socket file.",
    "Canonical_solution": "import os\nimport socket\nimport struct\nimport threading\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey\n\nSSH_AGENTC_REQUEST_IDENTITIES = 11\nSSH_AGENT_IDENTITIES_ANSWER = 12\nSSH_AGENT_FAILURE = 5\nSTOP_REQUEST = 0xFF\n\nclass MockSSHAgent:\n    def __init__(self, private_key_path):\n        self.sock_path = None\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = [self._load_ed25519_private_key(private_key_path)]\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path):\n        with open(private_key_path, 'rb') as key_file:\n            private_key = serialization.load_ssh_private_key(key_file.read(), password=None)\n\n        if not isinstance(private_key, Ed25519PrivateKey):\n            raise ValueError(\"Invalid key type, expected ED25519 private key.\")\n\n        public_key = private_key.public_key()\n        public_key_blob = public_key.public_bytes(\n            encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw\n        )\n\n        key_type = b\"ssh-ed25519\"\n        key_blob_full = (\n            struct.pack(\">I\", len(key_type))\n            + key_type\n            + struct.pack(\">I\", len(public_key_blob))\n            + public_key_blob\n        )\n\n        comment = \"\"\n        return (\"ssh-ed25519\", key_blob_full, comment)\n\n    def start_agent(self, sock_path):\n        self.sock_path = sock_path\n        if os.path.exists(self.sock_path):\n            os.remove(self.sock_path)\n\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(5)\n\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n        self.running.set()\n\n        self.agent_thread = threading.Thread(target=self._accept_connections, daemon=True)\n        self.agent_thread.start()\n\n    def _accept_connections(self):\n        while self.running.is_set():\n            try:\n                client_sock, _ = self.server_sock.accept()\n                self._handle_client(client_sock)\n            except Exception as e:\n                print(f\"Error accepting connection: {e}\")\n\n    def _handle_client(self, client_sock):\n        try:\n            length_message = client_sock.recv(4)\n            if not length_message:\n                raise \"no length message received\"\n\n            msg_len = struct.unpack(\">I\", length_message)[0]\n            request_message = client_sock.recv(msg_len)\n\n            if request_message[0] == STOP_REQUEST:\n                client_sock.close()\n                self.running.clear()\n                return\n\n            if request_message[0] == SSH_AGENTC_REQUEST_IDENTITIES:\n                response = self._mock_list_keys_response()\n                client_sock.sendall(response)\n            else:\n                response = struct.pack(\">I\", 1) + struct.pack(\">B\", SSH_AGENT_FAILURE)\n                client_sock.sendall(response)\n\n        except socket.error:\n            pass\n        finally:\n            client_sock.close()\n\n    def _mock_list_keys_response(self):\n        response = struct.pack(\">B\", SSH_AGENT_IDENTITIES_ANSWER)\n        response += struct.pack(\">I\", len(self.keys))\n\n        for key_type, key_blob, comment in self.keys:\n            response += struct.pack(\">I\", len(key_blob)) + key_blob\n            comment_encoded = comment.encode()\n            response += struct.pack(\">I\", len(comment_encoded)) + comment_encoded\n\n        response = struct.pack(\">I\", len(response)) + response\n        return response\n\n    def stop_agent(self):\n        if self.running.is_set():\n            with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client_sock:\n                client_sock.connect(self.sock_path)\n                stop_command = struct.pack(\">B\", STOP_REQUEST)\n                message_length = struct.pack(\">I\", len(stop_command))\n                client_sock.sendall(message_length)\n                client_sock.sendall(stop_command)\n\n            self.running.clear()\n\n            if self.agent_thread:\n                self.agent_thread.join()\n                self.agent_thread = None\n\n            if self.server_sock:\n                self.server_sock.close()\n                os.remove(self.sock_path)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nimport os\nimport struct\nimport select\n\nclass MockSSHAgent:\n    def __init__(self):\n        self.sock_path = None\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = []\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path: str) -> tuple:\n        with open(private_key_path, 'rb') as f:\n            key_data = f.read()\n        key_type = b'ssh-ed25519'\n        comment = b''\n        return (key_type, key_data, comment)\n\n    def start_agent(self, sock_path: str) -> None:\n        self.sock_path = sock_path\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        try:\n            os.unlink(self.sock_path)\n        except OSError:\n            pass\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(5)\n        self.running.set()\n        self.agent_thread = threading.Thread(target=self._accept_connections)\n        self.agent_thread.start()\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n\n    def _accept_connections(self) -> None:\n        while self.running.is_set():\n            try:\n                client_sock, _ = self.server_sock.accept()\n                client_handler = threading.Thread(target=self._handle_client, args=(client_sock,))\n                client_handler.start()\n            except Exception as e:\n                if not self.running.is_set():\n                    break\n                print(f\"Error accepting connection: {e}\")\n\n    def _handle_client(self, client_sock: socket.socket) -> None:\n        try:\n            while self.running.is_set():\n                ready = select.select([client_sock], [], [], 1)\n                if not ready[0]:\n                    continue\n                data = client_sock.recv(4096)\n                if not data:\n                    break\n                if data.startswith(b'\\x05'):\n                    response = self._mock_list_keys_response()\n                    client_sock.sendall(response)\n                else:\n                    client_sock.sendall(b'\\x05\\x00\\x00\\x00')\n        finally:\n            client_sock.close()\n\n    def _mock_list_keys_response(self) -> bytes:\n        num_keys = len(self.keys)\n        payload = struct.pack('>I', num_keys)\n        for key_type, key_blob, comment in self.keys:\n            payload += struct.pack('>I', len(key_type)) + key_type\n            payload += struct.pack('>I', len(key_blob)) + key_blob\n            payload += struct.pack('>I', len(comment)) + comment\n        return b'\\x05\\x00\\x00\\x00' + payload\n\n    def stop_agent(self) -> None:\n        self.running.clear()\n        if self.server_sock:\n            self.server_sock.close()\n        if self.agent_thread:\n            self.agent_thread.join()\n        try:\n            os.unlink(self.sock_path)\n        except OSError:\n            pass\n        del os.environ['SSH_AUTH_SOCK']"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a TCP communication class to facilitate data exchange between a Python server and a Godot client using JSON format for message serialization.\n\nClass Description: GodotTCPCommunicator is a TCP server implementation that handles communication with a Godot client. It establishes a connection, sends/receives JSON-formatted messages, and manages the connection lifecycle.\n\nAttributes:\n- port: int - The port number on which the server listens for connections (default: 11008)\n- connection: socket.socket - The active TCP connection with the client\n- DEFAULT_PORT: int - Class constant for default port (11008)\n- DEFAULT_TIMEOUT: int - Class constant for default timeout in seconds (60)\n\nMethods:\n- __init__(port: int = DEFAULT_PORT) -> None - Initializes the communicator with specified port and starts the server\n- _start_server() -> socket.socket - Creates and configures TCP socket, binds to localhost, listens for and accepts connection\n- _send_as_json(dictionary: Dict[str, Any]) -> None - Serializes dictionary to JSON and sends it to client\n- _get_json_dict() -> Dict[str, Any] - Receives data from client and deserializes JSON to dictionary\n- _get_data() -> Optional[str] - Receives raw string data from client with length-prefix protocol\n- _send_string(string: str) -> None - Sends string to client with length-prefix protocol\n- close() -> None - Closes the active connection",
    "Canonical_solution": "import socket\nimport json\nfrom typing import Optional, Dict, Any\nimport numpy as np\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT):\n        self.port = port\n        self.connection = self._start_server()\n\n    def _start_server(self):\n        print(f\"waiting for remote GODOT connection on port {self.port}\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_address = (\"127.0.0.1\", self.port)\n        sock.bind(server_address)\n        sock.listen(1)\n        sock.settimeout(self.DEFAULT_TIMEOUT)\n        connection, client_address = sock.accept()\n        print(\"connection established\")\n        return connection\n\n    def _send_as_json(self, dictionary: Dict[str, Any]):\n        message_json = json.dumps(dictionary)\n        self._send_string(message_json)\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        try:\n            string_size_bytes = bytearray()\n            received_length = 0\n            length = 4\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_size_bytes.extend(data)\n\n            length = int.from_bytes(string_size_bytes, \"little\")\n\n            string_bytes = bytearray()\n            received_length = 0\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_bytes.extend(data)\n\n            return string_bytes.decode()\n        except socket.timeout as e:\n            print(\"env timed out\", e)\n            return None\n\n    def _send_string(self, string: str):\n        message = len(string).to_bytes(4, \"little\") + bytes(string.encode())\n        self.connection.sendall(message)\n\n    def close(self):\n        self.connection.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport json\nfrom typing import Dict, Any, Optional\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT) -> None:\n        self.port = port\n        self.connection = None\n        self._start_server()\n\n    def _start_server(self) -> socket.socket:\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.settimeout(self.DEFAULT_TIMEOUT)\n        server_socket.bind(('localhost', self.port))\n        server_socket.listen(1)\n        print(f\"Server started on port {self.port}, waiting for connection...\")\n        self.connection, addr = server_socket.accept()\n        print(f\"Connection established with {addr}\")\n        return server_socket\n\n    def _send_as_json(self, dictionary: Dict[str, Any]) -> None:\n        json_data = json.dumps(dictionary).encode('utf-8')\n        self._send_string(json_data.decode('utf-8'))\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        if data:\n            return json.loads(data)\n        return {}\n\n    def _get_data(self) -> Optional[str]:\n        length_bytes = self.connection.recv(4)\n        if not length_bytes:\n            return None\n        length = int.from_bytes(length_bytes, 'little')\n        data = self.connection.recv(length)\n        return data.decode('utf-8')\n\n    def _send_string(self, string: str) -> None:\n        encoded = string.encode('utf-8')\n        length = len(encoded)\n        self.connection.sendall(length.to_bytes(4, 'little'))\n        self.connection.sendall(encoded)\n\n    def close(self) -> None:\n        if self.connection:\n            self.connection.close()\n            print(\"Connection closed\")"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Implement a TCP server that can handle multiple client connections, process incoming packets, and send replies asynchronously using Python's socket module and Scapy's networking capabilities.\n\nClass Description: AnsweringMachineTCP is a TCP server implementation that listens on a specified port, accepts client connections, and processes incoming packets using Scapy's packet handling capabilities. It supports asynchronous packet sniffing and reply generation for each connected client.\n\nAttributes:\nport: [int] - The port number on which the server listens for incoming connections\ncls: [Type[Packet]] - The Scapy packet class used for parsing incoming data\noptsniff: [dict] - Dictionary of additional options for the sniffer configuration\nsniffer: [threading.Thread] - Background thread running the sniffing process\n\nMethods:\n__init__(port=80, cls=conf.raw_layer, **kargs) -> [None] - Initializes the answering machine with specified port, packet class, and additional options\nclose() -> [None] - Closes all resources (placeholder implementation)\nreply(pkt, send_function=None, address=None) -> [None] - Processes incoming packets and sends replies if appropriate\nsniff() -> [None] - Main server loop that accepts connections and starts sniffers for each client\nsniff_bg() -> [None] - Starts the sniffing process in a background thread\nis_request(req) -> [bool] - Determines if a packet should be processed (default always True)\nmake_reply(req, address=None) -> [Packet] - Generates a reply packet (default returns input packet)\nsend_reply(reply, send_function=None) -> [None] - Sends the generated reply to the client",
    "Canonical_solution": "import socket\nfrom typing import Optional, Type, Any\nfrom scapy.arch import get_if_addr\nfrom scapy.config import conf\nfrom scapy.packet import Packet\nfrom scapy.supersocket import StreamSocket\nimport functools\nfrom scapy.sendrecv import AsyncSniffer\n\nclass AnsweringMachineTCP:\n    \"\"\"\n    An answering machine that use the classic socket.socket to\n    answer multiple TCP clients\n    \"\"\"\n    TYPE = socket.SOCK_STREAM\n\n    def __init__(self, port=80, cls=conf.raw_layer, **kargs):\n        self.port = port\n        self.cls = cls\n        self.optsniff = kargs\n\n    def close(self):\n        pass\n\n    def reply(self, pkt, send_function=None, address=None):\n        if not self.is_request(pkt):\n            return\n        if address:\n            reply = self.make_reply(pkt, address=address)\n        else:\n            reply = self.make_reply(pkt)\n        if not reply:\n            return\n        if send_function:\n            self.send_reply(reply, send_function=send_function)\n        else:\n            self.send_reply(reply)\n\n    def sniff(self):\n        ssock = socket.socket(socket.AF_INET, self.TYPE)\n        try:\n            ssock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        except OSError:\n            pass\n        ssock.bind(\n            (get_if_addr(self.optsniff.get(\"iface\", conf.iface)), self.port))\n        ssock.listen()\n        sniffers = []\n        try:\n            while True:\n                clientsocket, address = ssock.accept()\n                sock = StreamSocket(clientsocket, self.cls)\n                optsniff = self.optsniff.copy()\n                optsniff[\"prn\"] = functools.partial(self.reply,\n                                                    send_function=sock.send,\n                                                    address=address)\n                del optsniff[\"iface\"]\n                sniffer = AsyncSniffer(opened_socket=sock, **optsniff)\n                sniffer.start()\n                sniffers.append((sniffer, sock))\n        finally:\n            for (sniffer, sock) in sniffers:\n                try:\n                    sniffer.stop()\n                except Exception:\n                    pass\n                sock.close()\n            self.close()\n            ssock.close()\n\n    def sniff_bg(self):\n        self.sniffer = threading.Thread(target=self.sniff)\n        self.sniffer.start()\n\n    def is_request(self, req):\n        return 1\n\n    def make_reply(self, req, address=None):\n        return req\n\n    def send_reply(self, reply, send_function=None):\n        if send_function:\n            send_function(reply)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nfrom scapy.all import sniff, conf, send, Packet\n\nclass AnsweringMachineTCP:\n    def __init__(self, port=80, cls=conf.raw_layer, **kargs):\n        self.port = port\n        self.cls = cls\n        self.optsniff = kargs\n        self.sniffer = None\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('0.0.0.0', self.port))\n        self.server_socket.listen(5)\n\n    def close(self):\n        pass\n\n    def reply(self, pkt, send_function=None, address=None):\n        if self.is_request(pkt):\n            reply_pkt = self.make_reply(pkt, address)\n            self.send_reply(reply_pkt, send_function)\n\n    def sniff(self):\n        while True:\n            client_socket, addr = self.server_socket.accept()\n            print(f\"Connection from {addr}\")\n            threading.Thread(target=self.handle_client, args=(client_socket, addr)).start()\n\n    def sniff_bg(self):\n        self.sniffer = threading.Thread(target=self.sniff)\n        self.sniffer.daemon = True\n        self.sniffer.start()\n\n    def is_request(self, req):\n        return True\n\n    def make_reply(self, req, address=None):\n        return req\n\n    def send_reply(self, reply, send_function=None):\n        if send_function:\n            send_function(reply)\n        else:\n            send(reply)\n\n    def handle_client(self, client_socket, address):\n        try:\n            while True:\n                data = client_socket.recv(65535)\n                if not data:\n                    break\n                pkt = self.cls(data)\n                self.reply(pkt, send_function=lambda x: client_socket.send(x.original))\n        finally:\n            client_socket.close()"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: Create a TCP server class that can handle incoming client connections, receive data from clients in a line-based and length-prefixed format, and process the received data in a separate thread.\n\nClass Description: BaseSocket is a TCP server implementation that listens for incoming connections, receives data from clients, and queues the received data for processing. It uses threading to handle connections asynchronously and provides methods for data reception and processing.\n\nAttributes:\nserversocket: [socket.socket] - TCP socket object for server operations\nqueue: [Queue] - Thread-safe queue for storing received data\nt: [Thread] - Thread object for running the server's main loop\ndebug: [bool] - Flag for enabling debug mode\ndisconnect: [bool] - Flag indicating client disconnection status\n\nMethods:\n__init__: [host: str, port: int, debug: bool = False] -> None - Initializes the TCP server, binds to the specified host and port, and starts the server thread\nrecvLine: [sock: socket.socket] -> Tuple[bool, str] - Static method that receives a line of data ending with newline character from a socket\nrecvAll: [sock: socket.socket, l: str] -> str - Static method that receives exact number of bytes specified by length parameter l from a socket\nrun: [] -> None - Main server loop that accepts connections and receives data from clients\nupdate: [] -> None - Processes queued data by calling the main method\nmain: [datas: str] -> None - Placeholder method for processing received data (should be overridden by subclasses)\n__del__: [] -> None - Cleanup method that closes the server socket and joins the thread",
    "Canonical_solution": "import socket\nimport time\nfrom threading import Thread\nfrom queue import Queue\n\nclass BaseSocket:\n    def __init__(self, host, port, debug=False) -> None:\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(1)\n        self.queue = Queue()\n        self.t = Thread(target=self.run)\n        self.t.start()\n        self.debug = debug\n        self.disconnect = False\n    \n    @staticmethod\n    def recvLine(sock):\n        flag = True\n        result = b''\n        while not result.endswith(b'\\n'):\n            res = sock.recv(1)\n            if not res:\n                flag = False\n                break\n            result += res\n        return flag, result.strip().decode('ascii')\n\n    @staticmethod\n    def recvAll(sock, l):\n        l = int(l)\n        result = b''\n        while (len(result) < l):\n            t = sock.recv(l - len(result))\n            result += t\n        return result.decode('ascii')\n\n    def run(self):\n        while True:\n            clientsocket, addr = self.serversocket.accept()\n            self.disconnect = False\n            while True:\n                flag, l = self.recvLine(clientsocket)\n                if not flag:\n                    self.disconnect = True\n                    break\n                data = self.recvAll(clientsocket, l)\n                self.queue.put(data)\n            clientsocket.close()\n    \n    def update(self):\n        time.sleep(1)\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n    \n    def main(self, datas):\n        pass\n\n    def __del__(self):\n        self.serversocket.close()\n        self.t.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nimport queue\n\nclass BaseSocket:\n    def __init__(self, host, port, debug=False):\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(5)\n        self.queue = queue.Queue()\n        self.t = threading.Thread(target=self.run)\n        self.debug = debug\n        self.disconnect = False\n        self.t.start()\n\n    @staticmethod\n    def recvLine(sock):\n        data = b''\n        while True:\n            chunk = sock.recv(1)\n            if not chunk:\n                return (False, '')\n            data += chunk\n            if chunk == b'\\n':\n                return (True, data.decode('utf-8').rstrip('\\n'))\n\n    @staticmethod\n    def recvAll(sock, l):\n        data = b''\n        while len(data) < l:\n            chunk = sock.recv(l - len(data))\n            if not chunk:\n                return ''\n            data += chunk\n        return data.decode('utf-8')\n\n    def run(self):\n        while not self.disconnect:\n            try:\n                clientsocket, addr = self.serversocket.accept()\n                if self.debug:\n                    print(f\"Connection from {addr}\")\n                threading.Thread(target=self.handle_client, args=(clientsocket,)).start()\n            except Exception as e:\n                if self.debug:\n                    print(f\"Error in run: {e}\")\n                break\n\n    def handle_client(self, sock):\n        while True:\n            try:\n                line_result, line_data = self.recvLine(sock)\n                if not line_result:\n                    break\n                length = int(line_data)\n                data = self.recvAll(sock, str(length))\n                self.queue.put(data)\n            except Exception as e:\n                if self.debug:\n                    print(f\"Error handling client: {e}\")\n                break\n        sock.close()\n\n    def update(self):\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n\n    def main(self, datas):\n        pass\n\n    def __del__(self):\n        self.disconnect = True\n        self.serversocket.close()\n        self.t.join()"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a TCP server in Python that listens for incoming client connections, accepts a connection, and provides functionality to send messages to the connected client.\n\nFunction Description: The code consists of two functions: `receive_connection` and `send_message`. The `receive_connection` function creates a TCP socket, binds it to a specified port, listens for incoming connections, and returns the connected client socket. The `send_message` function sends a message to the connected client and closes the connection.\n\nInput: \n- `receive_connection`: None\n- `send_message`: \n  - `client`: socket.socket - The connected client socket\n  - `message`: str (optional) - The message to send to the client (default is an empty string)\n\nOutput: \n- `receive_connection`: socket.socket - The connected client socket\n- `send_message`: None",
    "Canonical_solution": "import socket\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef receive_connection() -> socket.socket:\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server.bind((\"0.0.0.0\", 7634))\n    logger.log(9, \"Server listening on 0.0.0.0:7634\")\n\n    server.listen(1)\n    client = server.accept()[0]\n    server.close()\n    logger.log(9, \"Server closed\")\n\n    return client\n\ndef send_message(client: socket.socket, message: str = \"\"):\n    client.send(f\"HTTP/1.1 200 OK\\r\\n\\r\\n{message}\".encode(\"utf-8\"))\n    client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\n\ndef receive_connection():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 0))\n    server_socket.listen(1)\n    client_socket, addr = server_socket.accept()\n    server_socket.close()\n    return client_socket\n\ndef send_message(client, message=\"\"):\n    if message:\n        client.sendall(message.encode())\n    client.close()"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a TCP server class that receives OAuth tokens through a local socket connection, handling the incoming HTTP request and extracting the authorization code or error message.\n\nClass Description: OAuthTokenReceiver is a class that creates a TCP server to listen for OAuth token responses on a specified local port. It handles the HTTP response, extracts the authorization code, and manages error cases.\n\nAttributes:\nport: int - The local port number on which the server will listen for incoming OAuth token responses (default: 31337)\n\nMethods:\nreceive_oauth_token: receive_oauth_token() -> str - Listens for an incoming connection, receives the OAuth token response, sends an HTTP success response, and returns the extracted authorization code. Raises an exception if the response contains an error description.",
    "Canonical_solution": "import socket\nimport re\nimport urllib.parse\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n\n    def receive_oauth_token(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind(('127.0.0.1', self.port))\n        sock.listen(1)\n        conn, addr = sock.accept()\n        data = conn.recv(1024)\n        conn.sendall('HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><head><title>Recon-ng</title></head><body>Response received. Return to Recon-ng.</body></html>')\n        conn.close()\n        \n        if 'error_description' in data:\n            error = urllib.parse.unquote_plus(re.search(r'error_description=([^\\s&]*)', data).group(1))\n            raise Exception(error)\n        \n        authorization_code = re.search(r'code=([^\\s&]*)', data).group(1)\n        return authorization_code",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n        self.authorization_code = None\n        self.error_message = None\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('localhost', self.port))\n        self.server_socket.listen(1)\n        self.connection = None\n        self.address = None\n        self.running = True\n        threading.Thread(target=self._listen_for_connection).start()\n\n    def _listen_for_connection(self):\n        while self.running:\n            try:\n                self.connection, self.address = self.server_socket.accept()\n                self._handle_connection()\n                self.connection.close()\n                break\n            except Exception as e:\n                if not self.running:\n                    break\n\n    def _handle_connection(self):\n        request = self.connection.recv(4096).decode('utf-8')\n        if 'error' in request:\n            self.error_message = self._extract_error_message(request)\n            raise Exception(self.error_message)\n        else:\n            self.authorization_code = self._extract_authorization_code(request)\n\n    def _extract_authorization_code(self, request):\n        lines = request.split('\\r\\n')\n        for line in lines:\n            if line.startswith('Authorization:'):\n                return line.split(' ')[1]\n        return ''\n\n    def _extract_error_message(self, request):\n        lines = request.split('\\r\\n')\n        for line in lines:\n            if line.startswith('Error:'):\n                return line.split(' ')[1]\n        return 'Unknown error'\n\n    def receive_oauth_token(self):\n        if self.authorization_code is not None:\n            return self.authorization_code\n        if self.error_message is not None:\n            raise Exception(self.error_message)\n        return self.authorization_code\n\n    def stop(self):\n        self.running = False\n        self.server_socket.close()"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Implement a TCP server and client system in Python using socket programming for handling multiple client connections and echoing received data back to clients.\n\nClass Description: \n\nTCPServer:\nA TCP server class that listens for incoming connections and manages client handlers. It uses socket programming to establish connections and delegates client communication to handler objects.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object for server operations\n- client_handler: [class] - The handler class to instantiate for each new client\n- handler_list: [list] - List of active client handlers\n\nMethods:\n- __init__(address, client_handler, handler_list) -> [None] - Initializes the server socket, binds to address, and starts listening\n- fileno() -> [int] - Returns the socket's file descriptor for polling\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to accept connections\n- handle_receive() -> [None] - Accepts new connections and adds client handlers to the list\n\nTCPClient:\nBase class for client handlers providing common socket operations and management.\n\nAttributes:\n- sock: [socket.socket] - The client socket object\n- handler_list: [list] - Reference to the server's handler list\n- outgoing: [bytearray] - Buffer for data to be sent\n\nMethods:\n- __init__(sock, handler_list) -> [None] - Initializes client handler with socket and handler list\n- fileno() -> [int] - Returns the socket's file descriptor\n- close() -> [None] - Closes the socket and removes handler from list\n- wants_to_send() -> [bool] - Returns True if there's data to send\n- handle_send() -> [None] - Sends data from outgoing buffer\n\nTCPEchoClient:\nA TCP client handler that echoes received data back to the client.\n\nMethods:\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to receive\n- handle_receive() -> [None] - Receives data and queues it for echoing back, closes connection on empty data",
    "Canonical_solution": "import socket\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n        self.sock.bind(address)\n        self.sock.listen(1)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        client, addr = self.sock.accept()\n        self.handler_list.append(self.client_handler(client, self.handler_list))\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n        \n    def wants_to_send(self):\n        return True if self.outgoing else False\n\n    def handle_send(self):\n        nsent = self.sock.send(self.outgoing)\n        self.outgoing = self.outgoing[nsent:]\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n    \n    def handle_receive(self):\n        data = self.sock.recv(8192)\n        if not data:\n            self.close()\n        else:\n            self.outgoing.extend(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\nimport threading\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind(address)\n        self.sock.listen(5)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        client_sock, addr = self.sock.accept()\n        handler = self.client_handler(client_sock, self.handler_list)\n        self.handler_list.append(handler)\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n\n    def wants_to_send(self):\n        return len(self.outgoing) > 0\n\n    def handle_send(self):\n        if self.outgoing:\n            sent = self.sock.send(self.outgoing)\n            self.outgoing = self.outgoing[sent:]\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        data = self.sock.recv(4096)\n        if data:\n            self.outgoing.extend(data)\n        else:\n            self.close()"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Implement a TCP server that handles client connections, processes incoming data, and interacts with a teamserver through HTTP requests. The server should be able to read and write data based on client requests.\n\nFunction Description: The function `cc2_tcp_server` creates a TCP server that listens for client connections on a specified port. It processes incoming messages to either read data from or write data to a teamserver via HTTP requests. The server handles each client connection in a loop, processing the data and closing the connection afterward.\n\nInput: None (The function binds to a hardcoded IP address and port, and processes incoming client connections.)\n\nOutput: None (The function sends responses to clients but does not return any value.)\n\n---\n\nTask Description: Implement helper functions to support the TCP server's operations, including reading from and writing to a teamserver, parsing raw data, and extracting beacon data.\n\nFunction Description: The function `read_cs_teamserver` sends an HTTP GET request to a teamserver with metadata and extracts beacon data from the response. The function `write_cs_teamserver` sends an HTTP POST request to a teamserver with metadata. The function `parseRawData` splits raw data into a beacon ID and metadata. The function `find_beacon_data` extracts beacon data from a string based on prefix and suffix markers.\n\nInput:\n- `read_cs_teamserver`: `metadata` (str) - The metadata to include in the HTTP GET request.\n- `write_cs_teamserver`: `id` (str) - The beacon ID to include in the HTTP POST request URL; `metadata` (str) - The metadata to include in the HTTP POST request body.\n- `parseRawData`: `rawData` (str) - The raw data string to parse.\n- `find_beacon_data`: `prefix` (str) - The prefix marker for beacon data; `suffix` (str) - The suffix marker for beacon data; `data` (str) - The string to search for beacon data.\n\nOutput:\n- `read_cs_teamserver`: `beacon_data` (str) - The extracted beacon data from the HTTP response.\n- `write_cs_teamserver`: None (The function sends an HTTP POST request but does not return any value.)\n- `parseRawData`: `bid` (str) - The extracted beacon ID; `metadata` (str) - The extracted metadata.\n- `find_beacon_data`: `beacon_data` (str) - The extracted beacon data, or an empty string if not found.",
    "Canonical_solution": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    sockobj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sockobj.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)\n    sockobj.bind(('127.0.0.1', 7777))\n    sockobj.listen(1000)\n\n    while True:\n        connection, address = sockobj.accept()\n        msgHeader = connection.recv(7)\n        if msgHeader == 'read|||':\n            data = connection.recv(10024)\n            metadata = read_cs_teamserver(data)\n            if len(metadata) > 0:\n                connection.send(metadata)\n        elif msgHeader == 'write||':\n            rawData = connection.recv(10024)\n            bid, metadata = parseRawData(rawData)\n            if len(metadata) > 0 and len(bid) > 0:\n                write_cs_teamserver(bid, metadata)\n        connection.close()\n\ndef read_cs_teamserver(metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_get_send\",\n                \"Cookie\": \"SESSION={}\".format(metadata),\n                \"Connection\": \"cc2_rebind_protocol_get_send\"\n    }\n    res = requests.get(\"http://127.0.0.1:443/aaaaaaaaa\", headers=headers)\n    start = \"ffffffff1\"\n    end = \"eeeeeeee2\"\n    beacon_data = find_beacon_data(start, end, res.content)\n    return beacon_data\n\ndef write_cs_teamserver(id, metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_post_send\",\n                \"Connection\": \"keep-alive\",\n                \"Content-Length\": \"{}\".format(len(metadata))\n    }\n    res = requests.post(\"http://127.0.0.1:443/bbbbbbbbb?SESSION={}\".format(id), headers=headers, data=metadata)\n\ndef parseRawData(rawData):\n    split = '->|<-'\n    split_index = rawData.find(split)\n    bid = rawData[:split_index]\n    metadata = rawData[len(split)+split_index:]\n    return bid,metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    s_index = data.find(prefix) + 1\n    s_end = data.find(suffix)\n    beacon_data = ''\n    if (s_index > 0 and s_end > 0 and (s_index + len(prefix) + 1) != s_end:\n        beacon_data = data[s_index + len(prefix):s_end]\n    return beacon_data",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    host = '0.0.0.0'\n    port = 4444\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(5)\n    print(f\"Listening on {host}:{port}\")\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Connection from {addr}\")\n        try:\n            data = client_socket.recv(1024).decode('utf-8')\n            if data.startswith(\"READ\"):\n                metadata = data.split(\" \", 1)[1]\n                beacon_data = read_cs_teamserver(metadata)\n                client_socket.send(beacon_data.encode('utf-8'))\n            elif data.startswith(\"WRITE\"):\n                parts = data.split(\" \", 2)\n                bid = parts[1]\n                metadata = parts[2]\n                write_cs_teamserver(bid, metadata)\n                client_socket.send(\"Data written to teamserver\".encode('utf-8'))\n        finally:\n            client_socket.close()\n\ndef read_cs_teamserver(metadata):\n    url = f\"http://teamserver.com/api/read?metadata={metadata}\"\n    response = requests.get(url)\n    return find_beacon_data(\"BEACON_START\", \"BEACON_END\", response.text)\n\ndef write_cs_teamserver(id, metadata):\n    url = f\"http://teamserver.com/api/write/{id}\"\n    payload = {'metadata': metadata}\n    requests.post(url, data=payload)\n\ndef parseRawData(rawData):\n    if \"BEACON_ID:\" in rawData and \"METADATA:\" in rawData:\n        bid = rawData.split(\"BEACON_ID:\")[1].split(\"\\n\")[0]\n        metadata = rawData.split(\"METADATA:\")[1].split(\"\\n\")[0]\n        return bid, metadata\n    return \"\", \"\"\n\ndef find_beacon_data(prefix, suffix, data):\n    start_index = data.find(prefix)\n    end_index = data.find(suffix)\n    if start_index != -1 and end_index != -1:\n        return data[start_index + len(prefix):end_index]\n    return \"\""
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Python class that implements a simple network server capable of handling TCP, UDP, and raw socket connections. The server should be able to bind to an available port, receive data from clients, and optionally send a predefined response.\n\nClass Description: The MiniTestServer class provides a configurable network server implementation supporting multiple protocols (TCP, UDP, raw). It can operate in silent mode (receive-only) or respond to clients with predefined data. The server automatically binds to an available port and handles one connection at a time.\n\nAttributes:\n- server_socket: [socket.socket] - The active server socket object\n- received: [bytes] - Data received from the client\n- data_to_send: [bytes] - Predefined data to send to clients (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is currently bound to\n- stay_silent: [bool] - If True, server won't send responses to clients\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Socket timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters for silent mode, protocol type, and host address\n- bind() -> None - Creates and binds the server socket according to the specified protocol, assigns a random available port\n- serve_once() -> None - Handles one client interaction: accepts connection (TCP), receives data, optionally sends response, then closes the connection",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(ETH_P_ALL))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            client_socket.settimeout(self.timeout)\n            self.received = client_socket.recv(10000)\n\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport random\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.stay_silent = stay_silent\n        self.proto = proto.lower()\n        self.host = host\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.received = b\"\"\n        self.active_port = 0\n        self.server_socket = None\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)\n        else:\n            raise ValueError(\"Unsupported protocol: {}\".format(self.proto))\n        \n        self.server_socket.settimeout(self.timeout)\n        port = random.randint(1024, 65535)\n        self.server_socket.bind((self.host, port))\n        self.active_port = port\n\n    def serve_once(self):\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n            client_socket, addr = self.server_socket.accept()\n            self.received = client_socket.recv(4096)\n            if not self.stay_silent:\n                client_socket.sendall(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            self.received, addr = self.server_socket.recvfrom(4096)\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            self.received = self.server_socket.recv(4096)\n            if not self.stay_silent:\n                self.server_socket.send(self.data_to_send)"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a TCP server class that handles incoming client connections, receives data, and writes it to a file, with options for debugging and multiprocessing support.\n\nClass Description: EventGeneric is a TCP server implementation that listens for incoming connections, receives byte data from clients, and writes it to a binary file. It supports running in a separate process and provides debugging capabilities through logging.\n\nAttributes:\n- name: str - Identifier for the event instance and log file\n- isDebug: bool - Flag to enable debug logging\n- shared_key: Any - Optional shared key for inter-process communication\n- port: int - TCP port to listen on (auto-assigned if not specified)\n- addr: str - IP address to bind to (defaults to \"0.0.0.0\")\n- file: str - Path to the output binary file\n- logger: logging.Logger - Debug logger instance (only when isDebug=True)\n\nMethods:\n- __init__(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> None - Initializes the TCP server with optional address, port, name, shared key, and debug flag\n- serve() -> None - Main server loop that binds to the socket, accepts connections, and handles data reception\n- spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> Tuple[int, multiprocessing.Process] - Static method to create and start the server in a separate process, returns the port number and process object",
    "Canonical_solution": "import socket\nimport multiprocessing\nimport os\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        if port is None:\n            self.port = get_free_port()\n        else:\n            self.port = port\n        if addr is not None:\n            self.addr, _ = addr\n        else:\n            self.addr = \"0.0.0.0\"\n        self.file = f\"./{self.name}.bin\"\n\n    def serve(self):\n        if self.isDebug:\n            self.logger = get_file_logger(self.name, level=\"DEBUG\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        local_addr_port = (self.addr, self.port)\n        sock.bind(local_addr_port)\n        sock.listen(1)\n\n        try:\n            conn, addr = sock.accept()\n            if self.isDebug:\n                self.logger.debug(f\"Open connection from {addr[0]}:{addr[1]}\")\n                event_file = open(self.file, \"wb\")\n            try:\n                while True:\n                    data = conn.recv(1, socket.MSG_WAITALL)\n                    if data:\n                        event_file.write(data)\n                    else:\n                        break\n                        raise KeyboardInterrupt\n            except KeyboardInterrupt:\n                pass\n            finally:\n                try:\n                    if self.isDebug:\n                        os.remove(self.file)\n                except OSError:\n                    pass\n                conn.close()\n                if self.isDebug:\n                    self.logger.debug(f\"Close connection from {addr[0]}:{addr[1]}\")\n            sock.close()\n        except KeyboardInterrupt:\n            pass\n        except BrokenPipeError:\n            pass\n        finally:\n            sock.close()\n            if self.isDebug:\n                self.logger.debug(f\"Closed listen on {self.addr}:{self.port}\")\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        event = EventGeneric(addr, port, name, shared_key, isDebug)\n        p = multiprocessing.Process(target=event.serve)\n        p.start()\n        return event.port, p",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport logging\nimport multiprocessing\nfrom typing import Tuple, Any\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        self.port = port\n        self.addr = addr if addr else \"0.0.0.0\"\n        self.file = f\"{name}.bin\"\n        self.logger = logging.getLogger(name) if isDebug else None\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    def serve(self):\n        if self.port is None:\n            self.port = 0\n        self.sock.bind((self.addr, self.port))\n        self.sock.listen(5)\n        if self.isDebug:\n            self.logger.info(f\"Server started on {self.addr}:{self.port}\")\n        try:\n            while True:\n                conn, addr = self.sock.accept()\n                if self.isDebug:\n                    self.logger.debug(f\"Connection from {addr}\")\n                with open(self.file, 'ab') as f:\n                    while True:\n                        data = conn.recv(4096)\n                        if not data:\n                            break\n                        f.write(data)\n                        if self.isDebug:\n                            self.logger.debug(f\"Received {len(data)} bytes\")\n                conn.close()\n        except KeyboardInterrupt:\n            if self.isDebug:\n                self.logger.info(\"Server shutting down\")\n        finally:\n            self.sock.close()\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> Tuple[int, multiprocessing.Process]:\n        server_process = multiprocessing.Process(target=EventGeneric(addr, port, name, shared_key, isDebug).serve)\n        server_process.start()\n        return (server_process.pid, server_process)"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Python class that handles downloading files from a given URL and provides methods to retrieve the file name and read the file content.\n\nClass Description: The `UrlFile` class is designed to download files from a specified URL, manage temporary storage of the downloaded file, and provide methods to access the file name and content. It uses the `httpx` library for HTTP requests and handles temporary file storage with `tempfile`.\n\nAttributes:\n\n- url: str - The URL from which the file will be downloaded.\n- name: Optional[str] - An optional custom name for the downloaded file. If not provided, the name is derived from the URL.\n\nMethods:\n\n- get_filename() -> Optional[str] - Returns the filename derived from the URL or the custom name if provided.\n- read() -> Any - Downloads the file from the URL, saves it to a temporary directory, and returns a file-like object for reading the content. Raises an exception if the download fails or if the filename cannot be determined.",
    "Canonical_solution": "import httpx\nfrom pathlib import Path\nfrom typing import Any, Optional\nfrom tempfile import TemporaryDirectory\n\nclass UrlFile:\n    def __init__(self, url: str, name: Optional[str] = None):\n        self.url = url\n        self.name = name\n\n    def get_filename(self) -> Optional[str]:\n        return self.name or self.url.split(\"/\")[-1]\n\n    def read(self) -> Any:\n        logger.debug(f\"Downloading url: {self.url}\")\n        with httpx.Client() as client:\n            response = client.get(self.url)\n            response.raise_for_status()\n\n            with TemporaryDirectory() as temp_dir:\n                file_name = self.get_filename()\n                if file_name is None:\n                    raise ValueError(\"Could not determine a file name, please set `name`\")\n\n                file_path = Path(temp_dir).joinpath(file_name)\n                file_path.write_bytes(response.content)\n                logger.debug(f\"File downloaded and saved to {file_path.name}\")\n                return file_path.open(\"rb\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nimport tempfile\nfrom urllib.parse import urlparse\nfrom typing import Optional, Any\n\nclass UrlFile:\n    def __init__(self, url: str, name: Optional[str] = None):\n        self.url = url\n        self.name = name\n\n    def get_filename(self) -> Optional[str]:\n        if self.name:\n            return self.name\n        parsed_url = urlparse(self.url)\n        path = parsed_url.path\n        if not path:\n            return None\n        return path.split('/')[-1] or None\n\n    def read(self) -> Any:\n        filename = self.get_filename()\n        if not filename:\n            raise ValueError(\"Filename could not be determined from the URL.\")\n        \n        with tempfile.NamedTemporaryFile(mode='w+b', delete=False) as temp_file:\n            try:\n                with httpx.Client() as client:\n                    response = client.get(self.url)\n                    response.raise_for_status()\n                    temp_file.write(response.content)\n                    temp_file.flush()\n                    return open(temp_file.name, 'rb')\n            except Exception as e:\n                raise RuntimeError(f\"Failed to download file from {self.url}: {e}\")"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Implement a TCP server handler class that manages client connections, receives data from clients, and sends commands to connected clients in a threaded environment.\n\nClass Description: TCPHandler is a threaded TCP server that listens on a specified port, accepts client connections, and facilitates bidirectional communication between the server and client. It runs in a separate thread to maintain responsiveness while handling client connections.\n\nAttributes:\n- connected: bool - Indicates whether a client is currently connected\n- port: int - The port number on which the server listens for connections\n- socket: socket.socket - The TCP socket object for server operations\n- client: socket.socket - The client socket object for an active connection\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCP server thread with the specified port\n- run() -> None - Main thread method that binds the socket, listens for connections, and handles incoming data (overrides threading.Thread.run)\n- listen_command() -> None - Listens for user input from the server console and processes commands\n- send_command(cmd: str) -> None - Sends a command string to the connected client\n- kill() -> None - Closes the client connection and server socket cleanly",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port):\n        threading.Thread.__init__(self)\n        logging.info(f\"Handler listening on 0.0.0.0:{port}\")\n        self.connected = False\n        self.port = int(port)\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def run(self):\n        self.socket.bind(('', self.port))\n        self.socket.listen(5)\n        \n        while True:\n            self.client, address = self.socket.accept()\n            print(f\"Handler> New session from {address[0]}\")\n            self.connected = True\n\n            response = self.client.recv(255)\n            while response != b\"\":\n                print(f\"\\n{response.decode('utf_8', 'ignore').strip()}\\nShell > $ \", end='')\n                response = self.client.recv(255)\n\n    def listen_command(self):\n        if self.connected == True:\n            cmd = input(\"Shell> $ \")\n            if cmd == \"exit\":\n                self.kill()\n                print(\"BYE !\")\n                exit()\n            self.send_command(cmd+\"\\n\\n\")\n\n    def send_command(self, cmd):\n        if self.connected:\n            self.client.sendall(cmd.encode())\n\n    def kill(self):\n        if hasattr(self, 'client'):\n            self.client.close()\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port: int):\n        super().__init__()\n        self.connected = False\n        self.port = port\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client = None\n\n    def run(self):\n        self.socket.bind(('0.0.0.0', self.port))\n        self.socket.listen(1)\n        print(f\"Server listening on port {self.port}\")\n        while True:\n            client_socket, addr = self.socket.accept()\n            print(f\"Connection from {addr}\")\n            self.client = client_socket\n            self.connected = True\n            threading.Thread(target=self.handle_client).start()\n\n    def handle_client(self):\n        while self.connected:\n            try:\n                data = self.client.recv(1024)\n                if not data:\n                    self.connected = False\n                    break\n                print(f\"Received: {data.decode()}\")\n            except:\n                self.connected = False\n                break\n\n    def listen_command(self):\n        while self.connected:\n            cmd = input(\"Enter command to send: \")\n            self.send_command(cmd)\n\n    def send_command(self, cmd: str):\n        if self.connected and self.client:\n            try:\n                self.client.sendall(cmd.encode())\n            except:\n                self.connected = False\n\n    def kill(self):\n        if self.client:\n            self.client.close()\n        self.socket.close()\n        self.connected = False"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: Create a Python class that implements a basic HTTP server using TCP sockets to handle client connections, process HTTP requests, and send responses.\n\nClass Description: HTTPOutput is a class that provides functionality to create a TCP server, accept client connections, handle HTTP requests, and send responses. It includes methods for server management and HTTP protocol handling.\n\nAttributes:\n- host: str | None - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to bind the server to (default: 0 for auto-selection)\n- conn: socket.socket | None - The active client connection socket\n- socket: socket.socket - The server socket\n- request: HTTPRequest | None - The parsed HTTP request object\n\nMethods:\n- addresses() -> list[str] - Property that returns available IP addresses for binding\n- urls() -> Generator[str, None, None] - Property that generates accessible URLs for the server\n- start_server() -> None - Creates and configures the server socket, binds it, and starts listening\n- accept_connection(timeout: int = 30) -> None - Accepts an incoming client connection with optional timeout\n- _open() -> None - Internal method to handle HTTP request parsing and initial response\n- _write(data: bytes) -> None - Sends data to the connected client\n- _close() -> None - Closes the current client connection\n- shutdown() -> None - Properly shuts down the server and cleans up resources",
    "Canonical_solution": "import socket\nfrom contextlib import suppress\nfrom http.server import BaseHTTPRequestHandler\nfrom io import BytesIO\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message=None, explain=None):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPOutput:\n    def __init__(self, host: str | None = \"127.0.0.1\", port: int = 0) -> None:\n        self.host = host\n        self.port = port\n        self.conn: socket.socket | None = None\n        self.socket: socket.socket = None\n        self.request = None\n\n    @property\n    def addresses(self):\n        if self.host:\n            return [self.host]\n\n        addrs = {\"127.0.0.1\"}\n        with suppress(socket.gaierror):\n            for info in socket.getaddrinfo(socket.gethostname(), self.port, socket.AF_INET):\n                addrs.add(info[4][0])\n\n        return sorted(addrs)\n\n    @property\n    def urls(self):\n        for addr in self.addresses:\n            yield f\"http://{addr}:{self.port}/\"\n\n    def start_server(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind((self.host or \"\", self.port))\n        self.socket.listen(1)\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def accept_connection(self, timeout=30) -> None:\n        self.socket.settimeout(timeout)\n        try:\n            conn, _addr = self.socket.accept()\n            conn.settimeout(None)\n            self.conn = conn\n        except socket.timeout as err:\n            self.conn = None\n            raise OSError(\"Socket accept timed out\") from err\n\n    def _open(self):\n        conn = self.conn\n        if not conn:\n            raise OSError(\"No client connection\")\n\n        try:\n            req_data = conn.recv(1024)\n        except OSError as err:\n            raise OSError(\"Failed to read data from socket\") from err\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(f\"Invalid request method: {req.command}\")\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Streamlink\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except OSError as err:\n            raise OSError(\"Failed to write data to socket\") from err\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.request = req\n\n    def _write(self, data):\n        self.conn.sendall(data)\n\n    def _close(self):\n        if self.conn:\n            with suppress(OSError):\n                self.conn.close()\n            self.conn = None\n\n    def shutdown(self) -> None:\n        self._close()\n        with suppress(OSError):\n            self.socket.shutdown(socket.SHUT_RDWR)\n        with suppress(OSError):\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport selectors\nimport http.client\nimport urllib.parse\nfrom typing import Generator, List, Optional, Any\n\nclass HTTPRequest:\n    def __init__(self, method: str, path: str, headers: dict, body: bytes = b\"\"):\n        self.method = method\n        self.path = path\n        self.headers = headers\n        self.body = body\n\nclass HTTPOutput:\n    def __init__(self, host: Optional[str] = None, port: int = 0):\n        self.host = host\n        self.port = port\n        self.conn: Optional[socket.socket] = None\n        self.socket: Optional[socket.socket] = None\n        self.request: Optional[HTTPRequest] = None\n\n    @property\n    def addresses(self) -> List[str]:\n        return [addr for addr in socket.gethostbyname_ex(socket.gethostname())[2] if not addr.startswith(\"127.\")]\n\n    @property\n    def urls(self) -> Generator[str, None, None]:\n        for addr in self.addresses:\n            yield f\"http://{addr}:{self.port}\"\n\n    def start_server(self) -> None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if self.host is None:\n            self.host = self.addresses[0] if self.addresses else \"127.0.0.1\"\n        self.socket.bind((self.host, self.port))\n        self.socket.listen(5)\n        print(f\"Server started on {self.host}:{self.port}\")\n\n    def accept_connection(self, timeout: int = 30) -> None:\n        self.socket.settimeout(timeout)\n        try:\n            self.conn, addr = self.socket.accept()\n            self.conn.setblocking(False)\n            print(f\"Connection from {addr}\")\n            self._open()\n        except socket.timeout:\n            print(\"Accept timeout\")\n        except Exception as e:\n            print(f\"Accept error: {e}\")\n\n    def _open(self) -> None:\n        data = self.conn.recv(4096)\n        if not data:\n            self._close()\n            return\n        request_line = data.decode().splitlines()[0]\n        method, path, version = request_line.split()\n        headers = {}\n        for line in data.decode().splitlines()[1:]:\n            if not line:\n                continue\n            key, value = line.split(\":\", 1)\n            headers[key.strip()] = value.strip()\n        self.request = HTTPRequest(method, path, headers)\n        self._write(b\"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello, World!\")\n\n    def _write(self, data: bytes) -> None:\n        if self.conn:\n            self.conn.sendall(data)\n\n    def _close(self) -> None:\n        if self.conn:\n            self.conn.close()\n            self.conn = None\n            self.request = None\n\n    def shutdown(self) -> None:\n        if self.conn:\n            self._close()\n        if self.socket:\n            self.socket.close()\n            self.socket = None\n        print(\"Server shutdown\")"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Implement a TCP server class in Python that handles client connections, data exchange, and supports various TLS/SSL configurations for secure communication.\n\nClass Description: TLSServerAutomaton is a TCP server implementation that provides secure communication capabilities with configurable TLS parameters. It handles socket creation, binding, client acceptance, data transmission, and cleanup operations.\n\nAttributes:\n\nserversocket: [socket.socket] - The main server socket object\nip_family: [int] - Address family (default: AF_INET)\nlocal_ip: [str] - Local IP address to bind to\nlocal_port: [int] - Local port to bind to\nremote_ip: [str] - Connected client's IP address\nremote_port: [int] - Connected client's port\nclient_auth: [bool] - Flag for client authentication requirement\nis_echo_server: [bool] - Flag to enable echo server behavior\nmax_client_idle_time: [int] - Maximum idle time before disconnecting (seconds)\ncurve: [str] - Preferred elliptic curve for ECDHE\npreferred_ciphersuite: [Optional[int]] - Preferred cipher suite\npreferred_signature_algorithm: [Union[str, int, None]] - Preferred signature algorithm\ncookie: [bool] - Enable DTLS cookie protection\npsk_secret: [Optional[str]] - Pre-shared key secret\npsk_mode: [Optional[str]] - Pre-shared key mode\n\nMethods:\n\nbind_socket() -> [bool] - Creates and binds the server socket, returns success status\naccept_client() -> [None] - Accepts an incoming client connection\nclose_client_socket() -> [None] - Closes the current client connection\nclose_server_socket() -> [None] - Closes the server socket\nreceive_data(timeout: Optional[int] = None) -> [Optional[bytes]] - Receives data from client with optional timeout\nsend_data(data: bytes) -> [bool] - Sends data to client, returns success status\nrun_server() -> [None] - Main server loop that handles client connections and data exchange",
    "Canonical_solution": "import socket\nfrom typing import Optional, Union\n\nclass TLSServerAutomaton:\n    def __init__(self, server=\"127.0.0.1\", sport=4433,\n                 mycert=None, mykey=None,\n                 preferred_ciphersuite: Optional[int] = None,\n                 preferred_signature_algorithm: Union[str, int, None] = None,\n                 client_auth=False,\n                 is_echo_server=True,\n                 max_client_idle_time=60,\n                 handle_session_ticket=None,\n                 session_ticket_file=None,\n                 curve=None,\n                 cookie=False,\n                 psk=None,\n                 psk_mode=None):\n\n        self.serversocket = None\n        self.ip_family = socket.AF_INET\n        self.local_ip = server\n        self.local_port = sport\n        self.remote_ip = None\n        self.remote_port = None\n\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk\n        self.psk_mode = psk_mode\n\n    def bind_socket(self):\n        s = socket.socket(self.ip_family, socket.SOCK_STREAM)\n        self.serversocket = s\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n            s.bind((self.local_ip, self.local_port))\n            s.listen(1)\n            return True\n        except Exception as e:\n            print(f\"Unable to bind on {self.local_ip}:{self.local_port}! ({e})\")\n            return False\n\n    def accept_client(self):\n        self.socket, addr = self.serversocket.accept()\n        if not isinstance(addr, tuple):\n            addr = self.socket.getpeername()\n        if len(addr) > 2:\n            addr = (addr[0], addr[1])\n        self.remote_ip, self.remote_port = addr\n        print(f\"Accepted connection from {self.remote_ip}:{self.remote_port}\")\n\n    def close_client_socket(self):\n        self.socket.close()\n\n    def close_server_socket(self):\n        if self.serversocket:\n            self.serversocket.close()\n\n    def receive_data(self, timeout=None):\n        if timeout:\n            self.socket.settimeout(timeout)\n        try:\n            data = self.socket.recv(4096)\n            return data if data else None\n        except socket.timeout:\n            return None\n        except Exception:\n            return None\n\n    def send_data(self, data):\n        try:\n            self.socket.sendall(data)\n            return True\n        except Exception:\n            return False\n\n    def run_server(self):\n        if not self.bind_socket():\n            return\n\n        try:\n            while True:\n                self.accept_client()\n                try:\n                    while True:\n                        data = self.receive_data(self.max_client_idle_time)\n                        if not data:\n                            break\n                        if self.is_echo_server:\n                            self.send_data(data)\n                finally:\n                    self.close_client_socket()\n        finally:\n            self.close_server_socket()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport ssl\nimport threading\nimport time\n\nclass TLSServerAutomaton:\n    def __init__(self, ip_family=socket.AF_INET, local_ip='0.0.0.0', local_port=8888, client_auth=False, is_echo_server=False, max_client_idle_time=60, curve='prime256v1', preferred_ciphersuite=None, preferred_signature_algorithm=None, cookie=False, psk_secret=None, psk_mode=None):\n        self.serversocket = None\n        self.ip_family = ip_family\n        self.local_ip = local_ip\n        self.local_port = local_port\n        self.remote_ip = ''\n        self.remote_port = 0\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk_secret\n        self.psk_mode = psk_mode\n        self.client_socket = None\n        self.ssl_context = None\n        self.last_activity_time = 0\n\n    def bind_socket(self):\n        try:\n            self.serversocket = socket.socket(self.ip_family, socket.SOCK_STREAM)\n            self.serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.serversocket.bind((self.local_ip, self.local_port))\n            self.serversocket.listen(5)\n            self._setup_ssl_context()\n            return True\n        except Exception as e:\n            print(f\"Socket binding failed: {e}\")\n            return False\n\n    def _setup_ssl_context(self):\n        self.ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        self.ssl_context.verify_mode = ssl.CERT_REQUIRED if self.client_auth else ssl.CERT_NONE\n        self.ssl_context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1\n        self.ssl_context.set_ecdh_curve(self.curve)\n        if self.preferred_ciphersuite:\n            self.ssl_context.set_ciphers(self.preferred_ciphersuite)\n        if self.preferred_signature_algorithm:\n            self.ssl_context.set_options(ssl.OP_SIGALG_SIGN_ALGORITHMS)\n            self.ssl_context.set_alpn_protocols([self.preferred_signature_algorithm])\n        if self.psk_secret and self.psk_mode:\n            self.ssl_context.set_psk_callback(self._psk_callback)\n            self.ssl_context.set_psk_server_callback(self._psk_server_callback)\n        self.ssl_context.check_hostname = False\n        self.ssl_context.verify_mode = ssl.CERT_REQUIRED if self.client_auth else ssl.CERT_NONE\n\n    def _psk_callback(self, hint):\n        return self.psk_secret.encode(), self.psk_mode\n\n    def _psk_server_callback(self, identity, hint):\n        return self.psk_secret.encode(), self.psk_mode\n\n    def accept_client(self):\n        try:\n            self.client_socket, (self.remote_ip, self.remote_port) = self.serversocket.accept()\n            self.client_socket = self.ssl_context.wrap_socket(self.client_socket, server_side=True)\n            self.last_activity_time = time.time()\n            print(f\"Accepted connection from {self.remote_ip}:{self.remote_port}\")\n        except Exception as e:\n            print(f\"Client acceptance failed: {e}\")\n\n    def close_client_socket(self):\n        if self.client_socket:\n            try:\n                self.client_socket.shutdown(socket.SHUT_RDWR)\n                self.client_socket.close()\n                self.client_socket = None\n                print(\"Client socket closed\")\n            except Exception as e:\n                print(f\"Failed to close client socket: {e}\")\n\n    def close_server_socket(self):\n        if self.serversocket:\n            try:\n                self.serversocket.close()\n                self.serversocket = None\n                print(\"Server socket closed\")\n            except Exception as e:\n                print(f\"Failed to close server socket: {e}\")\n\n    def receive_data(self, timeout=None):\n        if not self.client_socket:\n            return None\n        try:\n            self.client_socket.settimeout(timeout)\n            data = self.client_socket.recv(4096)\n            if not data:\n                self.close_client_socket()\n                return None\n            self.last_activity_time = time.time()\n            return data\n        except socket.timeout:\n            print(\"Receive timeout occurred\")\n            return None\n        except Exception as e:\n            print(f\"Data reception failed: {e}\")\n            self.close_client_socket()\n            return None\n\n    def send_data(self, data):\n        if not self.client_socket or not data:\n            return False\n        try:\n            sent = self.client_socket.send(data)\n            if sent < len(data):\n                print(f\"Only {sent} bytes sent out of {len(data)}\")\n            self.last_activity_time = time.time()\n            return True\n        except Exception as e:\n            print(f\"Data sending failed: {e}\")\n            self.close_client_socket()\n            return False\n\n    def run_server(self):\n        try:\n            while True:\n                if self.client_socket:\n                    if time.time() - self.last_activity_time > self.max_client_idle_time:\n                        print(\"Client idle timeout, closing connection\")\n                        self.close_client_socket()\n                        continue\n                    data = self.receive_data()\n                    if data:\n                        if self.is_echo_server:\n                            self.send_data(data)\n                        # Process received data here\n                else:\n                    self.accept_client()\n                time.sleep(0.1)\n        except KeyboardInterrupt:\n            print(\"Server shutting down...\")\n        finally:\n            self.close_client_socket()\n            self.close_server_socket()"
  },
  {
    "Task_id": 394,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and delegates the handling of these connections to a worker process using inter-process communication (IPC).\n\nFunction Description: The function `server` establishes a TCP server that listens for incoming client connections. When a client connects, the server sends the client's file descriptor to a pre-connected worker process using `send_handle`, allowing the worker to take over the client communication. The server then closes its end of the connection, leaving the worker to handle further interaction with the client.\n\nInput:\n- `work_address`: [str] - The address (e.g., a named pipe or network address) where the worker process is listening for connections.\n- `port`: [int] - The TCP port number on which the server should listen for incoming client connections.\n\nOutput: None (The function runs indefinitely in a loop, accepting and delegating client connections.)",
    "Canonical_solution": "from multiprocessing.connection import Listener\nfrom multiprocessing.reduction import send_handle\nimport socket\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = Listener(work_address, authkey=b'peekaboo')\n    worker = work_serv.accept()\n    worker_pid = worker.recv()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('', port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_handle(worker, client.fileno(), worker_pid)\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport os\nimport struct\nimport fcntl\nimport select\n\ndef send_handle(sock, fd):\n    try:\n        sock.sendall(struct.pack('I', fd))\n    except Exception as e:\n        pass\n\ndef server(work_address, port):\n    listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    listener.bind(('localhost', port))\n    listener.listen(5)\n    listener.setblocking(0)\n\n    worksock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    worksock.connect(work_address)\n\n    while True:\n        readable, _, _ = select.select([listener], [], [], 0.1)\n        if readable:\n            client_sock, addr = listener.accept()\n            client_fd = client_sock.fileno()\n            send_handle(worksock, client_fd)\n            client_sock.close()"
  },
  {
    "Task_id": 395,
    "Instruction": "Task Description: Create a TCP socket server implementation in Python that can handle multiple client connections asynchronously, with support for basic socket operations like accepting connections, sending/receiving data, and reading lines.\n\nClass Description: The implementation consists of two main classes: Listener (for server sockets) and Connection (for client connections), along with supporting event classes for asynchronous operations.\n\nAttributes:\n\nListener:\n- _closed: bool - Flag indicating if the socket is closed\n- host: str - The host address the server is bound to\n- port: int - The port number the server is listening on\n- sock: socket.socket - The underlying TCP socket object\n\nConnection:\n- sock: socket.socket - The connected socket object\n- addr: tuple - The client address (host, port)\n- _buf: bytes - Internal buffer for storing received data\n- _closed: bool - Flag indicating if the connection is closed\n\nMethods:\n\nListener:\n- __init__(host: str, port: int) -> None - Creates and binds a TCP socket to the specified host and port\n- accept() -> AcceptEvent - Returns an event that waits for and accepts incoming connections\n- close() -> None - Immediately closes the listening socket\n\nConnection:\n- __init__(sock: socket.socket, addr: tuple) -> None - Initializes a new connection with given socket and address\n- close() -> None - Closes the connection\n- recv(size: int) -> ReceiveEvent - Returns an event that receives up to size bytes of data\n- send(data: bytes) -> SendEvent - Returns an event that sends data (returns bytes sent)\n- sendall(data: bytes) -> SendEvent - Returns an event that sends all data\n- readline(terminator: bytes = b\"\\n\", bufsize: int = 1024) -> Generator[ReturnEvent, None, None] - Returns a generator that yields events to read a line\n\nSupporting Event Classes:\n- AcceptEvent(listener: Listener) - Event for accepting connections\n- ReceiveEvent(conn: Connection, bufsize: int) - Event for receiving data\n- SendEvent(conn: Connection, data: bytes, sendall: bool = False) - Event for sending data\n- WaitableEvent - Base class for all waitable events\n- ReturnEvent(value: Any) - Event for returning a value",
    "Canonical_solution": "import socket\nimport select\nimport time\nimport types\nimport collections\nimport errno\nimport sys\nimport traceback\n\nclass Listener:\n    \"\"\"A socket wrapper object for listening sockets.\"\"\"\n\n    def __init__(self, host, port):\n        \"\"\"Create a listening socket on the given hostname and port.\"\"\"\n        self._closed = False\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((host, port))\n        self.sock.listen(5)\n\n    def accept(self):\n        \"\"\"An event that waits for a connection on the listening socket.\n        When a connection is made, the event returns a Connection\n        object.\n        \"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return AcceptEvent(self)\n\n    def close(self):\n        \"\"\"Immediately close the listening socket. (Not an event.)\"\"\"\n        self._closed = True\n        self.sock.close()\n\nclass Connection:\n    \"\"\"A socket wrapper object for connected sockets.\"\"\"\n\n    def __init__(self, sock, addr):\n        self.sock = sock\n        self.addr = addr\n        self._buf = b\"\"\n        self._closed = False\n\n    def close(self):\n        \"\"\"Close the connection.\"\"\"\n        self._closed = True\n        self.sock.close()\n\n    def recv(self, size):\n        \"\"\"Read at most size bytes of data from the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n\n        if self._buf:\n            out = self._buf[:size]\n            self._buf = self._buf[size:]\n            return ValueEvent(out)\n        else:\n            return ReceiveEvent(self, size)\n\n    def send(self, data):\n        \"\"\"Sends data on the socket, returning the number of bytes\n        successfully sent.\n        \"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return SendEvent(self, data)\n\n    def sendall(self, data):\n        \"\"\"Send all of data on the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return SendEvent(self, data, True)\n\n    def readline(self, terminator=b\"\\n\", bufsize=1024):\n        \"\"\"Reads a line (delimited by terminator) from the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n\n        while True:\n            if terminator in self._buf:\n                line, self._buf = self._buf.split(terminator, 1)\n                line += terminator\n                yield ReturnEvent(line)\n                break\n            data = yield ReceiveEvent(self, bufsize)\n            if data:\n                self._buf += data\n            else:\n                line = self._buf\n                self._buf = b\"\"\n                yield ReturnEvent(line)\n                break\n\nclass AcceptEvent(WaitableEvent):\n    \"\"\"An event for Listener objects (listening sockets) that suspends\n    execution until the socket gets a connection.\n    \"\"\"\n\n    def __init__(self, listener):\n        self.listener = listener\n\n    def waitables(self):\n        return (self.listener.sock,), (), ()\n\n    def fire(self):\n        sock, addr = self.listener.sock.accept()\n        return Connection(sock, addr)\n\nclass ReceiveEvent(WaitableEvent):\n    \"\"\"An event for Connection objects (connected sockets) for\n    asynchronously reading data.\n    \"\"\"\n\n    def __init__(self, conn, bufsize):\n        self.conn = conn\n        self.bufsize = bufsize\n\n    def waitables(self):\n        return (self.conn.sock,), (), ()\n\n    def fire(self):\n        return self.conn.sock.recv(self.bufsize)\n\nclass SendEvent(WaitableEvent):\n    \"\"\"An event for Connection objects (connected sockets) for\n    asynchronously writing data.\n    \"\"\"\n\n    def __init__(self, conn, data, sendall=False):\n        self.conn = conn\n        self.data = data\n        self.sendall = sendall\n\n    def waitables(self):\n        return (), (self.conn.sock,), ()\n\n    def fire(self):\n        if self.sendall:\n            return self.conn.sock.sendall(self.data)\n        else:\n            return self.conn.sock.send(self.data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport selectors\nimport asyncio\n\nclass WaitableEvent:\n    def __init__(self):\n        self._future = asyncio.Future()\n\n    def set_result(self, value):\n        if not self._future.done():\n            self._future.set_result(value)\n\n    def get_result(self):\n        return self._future.result()\n\n    async def wait(self):\n        return await self._future\n\n\nclass ReturnEvent(WaitableEvent):\n    def __init__(self, value):\n        super().__init__()\n        self._future.set_result(value)\n\n\nclass AcceptEvent(WaitableEvent):\n    def __init__(self, listener):\n        super().__init__()\n        self.listener = listener\n\n    def _callback(self, sel, key, mask):\n        sock, addr = self.listener.sock.accept()\n        sock.setblocking(False)\n        conn = Connection(sock, addr)\n        self.set_result(conn)\n\n\nclass ReceiveEvent(WaitableEvent):\n    def __init__(self, conn, bufsize):\n        super().__init__()\n        self.conn = conn\n        self.bufsize = bufsize\n\n    def _callback(self, sel, key, mask):\n        data = self.conn.sock.recv(self.bufsize)\n        if data:\n            self.conn._buf += data\n        else:\n            self.conn._closed = True\n        self.set_result(data)\n\n\nclass SendEvent(WaitableEvent):\n    def __init__(self, conn, data, sendall=False):\n        super().__init__()\n        self.conn = conn\n        self.data = data\n        self.sendall = sendall\n        self.bytes_sent = 0\n\n    def _callback(self, sel, key, mask):\n        if self.sendall:\n            self.bytes_sent += self.conn.sock.send(self.data[self.bytes_sent:])\n            if self.bytes_sent >= len(self.data):\n                self.set_result(self.bytes_sent)\n        else:\n            sent = self.conn.sock.send(self.data)\n            self.set_result(sent)\n\n\nclass Listener:\n    def __init__(self, host: str, port: int):\n        self._closed = False\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setblocking(False)\n        self.sock.bind((host, port))\n        self.sock.listen()\n        self.selector = selectors.DefaultSelector()\n        self.selector.register(self.sock, selectors.EVENT_READ, self._accept)\n\n    def _accept(self, sel, key, mask):\n        sock, addr = key.fileobj.accept()\n        sock.setblocking(False)\n        conn = Connection(sock, addr)\n        event = AcceptEvent(self)\n        event._callback(sel, key, mask)\n        event.set_result(conn)\n\n    def accept(self) -> AcceptEvent:\n        event = AcceptEvent(self)\n        self.selector.register(self.sock, selectors.EVENT_READ, self._accept)\n        return event\n\n    def close(self):\n        self._closed = True\n        self.selector.close()\n        self.sock.close()\n\n\nclass Connection:\n    def __init__(self, sock: socket.socket, addr: tuple):\n        self.sock = sock\n        self.addr = addr\n        self._buf = bytes()\n        self._closed = False\n        self.selector = selectors.DefaultSelector()\n        self.selector.register(self.sock, selectors.EVENT_READ, self._recv)\n\n    def close(self):\n        self._closed = True\n        self.selector.unregister(self.sock)\n        self.selector.close()\n        self.sock.close()\n\n    def recv(self, size: int) -> ReceiveEvent:\n        event = ReceiveEvent(self, size)\n        self.selector.register(self.sock, selectors.EVENT_READ, self._recv)\n        return event\n\n    def send(self, data: bytes) -> SendEvent:\n        event = SendEvent(self, data, sendall=False)\n        self.selector.register(self.sock, selectors.EVENT_WRITE, self._send)\n        return event\n\n    def sendall(self, data: bytes) -> SendEvent:\n        event = SendEvent(self, data, sendall=True)\n        self.selector.register(self.sock, selectors.EVENT_WRITE, self._send)\n        return event\n\n    def _recv(self, sel, key, mask):\n        event = ReceiveEvent(self, 1024)\n        event._callback(sel, key, mask)\n\n    def _send(self, sel, key, mask):\n        event = SendEvent(self, self.data, self.sendall)\n        event._callback(sel, key, mask)\n\n    def readline(self, terminator: bytes = b\"\\n\", bufsize: int = 1024):\n        while True:\n            if self._buf:\n                idx = self._buf.find(terminator)\n                if idx != -1:\n                    line = self._buf[:idx + len(terminator)]\n                    self._buf = self._buf[idx + len(terminator):]\n                    yield ReturnEvent(line)\n                    return\n            event = self.recv(bufsize)\n            yield event\n            if event.get_result() == b\"\":\n                break\n        yield ReturnEvent(self._buf)"
  },
  {
    "Task_id": 396,
    "Instruction": "Task Description: Implement a TCP server in Python that handles multiple client connections asynchronously using sockets and selectors for efficient I/O multiplexing.\n\nClass Description: NetworkThread is a threading-based TCP server implementation that manages peer-to-peer connections, handles incoming and outgoing data, and processes network events asynchronously.\n\nAttributes:\n- pending_shutdown: [bool] - Flag indicating if the server is shutting down\n- upload_speed: [int] - Current upload speed limit\n- token: [str] - Authentication token for server connections\n- _pending_network_msgs: [deque] - Queue for pending network messages\n- _user_update_counter: [int] - Counter for user updates\n- _user_update_counters: [dict] - Dictionary of user-specific update counters\n- _upload_queue_timer_id: [int] - Timer ID for upload queue processing\n- _retry_failed_uploads_timer_id: [int] - Timer ID for retrying failed uploads\n- _message_queue: [deque] - Queue for internal messages\n- _pending_peer_conns: [dict] - Dictionary of pending peer connections\n- _pending_init_msgs: [defaultdict] - Dictionary of pending initialization messages\n- _token_init_msgs: [dict] - Dictionary of token-based initialization messages\n- _username_init_msgs: [dict] - Dictionary of username-based initialization messages\n- _user_addresses: [dict] - Dictionary mapping usernames to addresses\n- _should_process_queue: [bool] - Flag for message queue processing\n- _want_abort: [bool] - Flag for thread termination\n- _selector: [selectors.DefaultSelector] - I/O multiplexing selector\n- _listen_socket: [socket.socket] - Main listening socket\n- _listen_port: [int] - Listening port number\n- _interface_name: [str] - Network interface name\n- _interface_address: [str] - Network interface IP address\n- _portmapper: [object] - Port mapping service reference\n- _local_ip_address: [str] - Local IP address\n- _server_conn: [Connection] - Server connection object\n- _server_address: [tuple] - Server address (IP, port)\n- _server_username: [str] - Server username\n- _server_timeout_time: [float] - Server timeout timestamp\n- _server_timeout_value: [int] - Server timeout duration\n- _manual_server_disconnect: [bool] - Manual disconnect flag\n- _manual_server_reconnect: [bool] - Manual reconnect flag\n- _server_relogged: [bool] - Server reconnection flag\n- _num_sockets: [int] - Current number of active sockets\n- _last_cycle_time: [float] - Last processing cycle timestamp\n- _conns: [dict] - Dictionary of active connections\n\nMethods:\n- _create_listen_socket() -> [bool] - Creates and configures the listening socket\n- _bind_listen_port() -> [bool] - Binds the socket to the specified port and interface\n- _accept_incoming_peer_connections() -> [None] - Accepts new client connections\n- _init_peer_connection(addr: tuple, init: object, response_token: str=None) -> [None] - Initializes outgoing peer connection\n- _process_ready_sockets(current_time: float) -> [None] - Processes ready sockets using selector\n- _process_ready_input_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket read events\n- _process_ready_output_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket write events\n- _read_data(conn: Connection, current_time: float) -> [bool] - Reads data from connection\n- _write_data(conn: Connection, current_time: float) -> [bool] - Writes data to connection\n- _modify_connection_events(conn: Connection, io_events: int) -> [None] - Modifies socket event monitoring\n- _close_connection(conn: Connection) -> [None] - Closes and cleans up a connection\n- _close_socket(sock: socket.socket) -> [None] - Safely closes a socket\n- run() -> [None] - Main thread execution loop",
    "Canonical_solution": "import errno\nimport selectors\nimport socket\nimport time\nfrom collections import defaultdict\nfrom collections import deque\nfrom os import strerror\nfrom threading import Thread\n\nclass NetworkThread(Thread):\n    \"\"\"This is the networking thread that does all the communication with the\n    Soulseek server and peers. Communication with the core is done through\n    events.\"\"\"\n\n    __slots__ = (\"pending_shutdown\", \"upload_speed\", \"token\", \"_pending_network_msgs\",\n                 \"_user_update_counter\", \"_user_update_counters\", \"_upload_queue_timer_id\",\n                 \"_retry_failed_uploads_timer_id\")\n\n    CONNECTION_BACKLOG_LENGTH = 65535\n    ERROR_NOT_CONNECTED = OSError(errno.ENOTCONN, strerror(errno.ENOTCONN))\n    ERROR_TIMED_OUT = OSError(errno.ETIMEDOUT, strerror(errno.ETIMEDOUT))\n\n    def __init__(self):\n        super().__init__(name=\"NetworkThread\")\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(list)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = False\n        self._want_abort = False\n        self._selector = None\n        self._listen_socket = None\n        self._listen_port = None\n        self._interface_name = None\n        self._interface_address = None\n        self._portmapper = None\n        self._local_ip_address = \"\"\n        self._server_conn = None\n        self._server_address = None\n        self._server_username = None\n        self._server_timeout_time = None\n        self._server_timeout_value = -1\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = 0\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._listen_socket.setblocking(False)\n        self._num_sockets += 1\n\n        if sys.platform != \"win32\":\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        if not self._bind_listen_port():\n            self._close_listen_socket()\n            return False\n\n        self._selector.register(self._listen_socket, selectors.EVENT_READ)\n        return True\n\n    def _bind_listen_port(self):\n        if not self._bind_socket_interface(self._listen_socket):\n            return False\n\n        try:\n            ip_address = self._interface_address or self._find_local_ip_address()\n            self._listen_socket.bind((ip_address, self._listen_port))\n            self._listen_socket.listen(self.CONNECTION_BACKLOG_LENGTH)\n        except OSError as error:\n            self._listen_port = None\n            return False\n\n        self._local_ip_address = ip_address\n        return True\n\n    def _accept_incoming_peer_connections(self):\n        while True:\n            try:\n                incoming_sock, incoming_addr = self._listen_socket.accept()\n                incoming_sock.setblocking(False)\n                incoming_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n            except OSError as error:\n                if error.errno == errno.EWOULDBLOCK:\n                    break\n                continue\n\n            io_events = selectors.EVENT_READ\n            conn = self._conns[incoming_sock] = PeerConnection(\n                sock=incoming_sock, addr=incoming_addr, io_events=io_events\n            )\n            self._num_sockets += 1\n            self._selector.register(incoming_sock, io_events)\n            conn.is_established = True\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        io_events = selectors.EVENT_READ | selectors.EVENT_WRITE\n        conn = PeerConnection(\n            sock=sock, addr=addr, io_events=io_events,\n            init=init, request_token=None, response_token=response_token\n        )\n\n        sock.setblocking(False)\n        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n        try:\n            self._bind_socket_interface(sock)\n            sock.connect_ex(addr)\n        except OSError as error:\n            self._close_socket(sock)\n            return\n\n        init.sock = sock\n        self._conns[sock] = conn\n        self._selector.register(sock, io_events)\n        self._num_sockets += 1\n\n    def _process_ready_sockets(self, current_time):\n        if self._listen_socket is None:\n            return\n\n        for key, io_events in self._selector.select(timeout=0.05):\n            sock = key.fileobj\n\n            if io_events & selectors.EVENT_READ:\n                if sock is self._listen_socket:\n                    self._accept_incoming_peer_connections()\n                    continue\n                self._process_ready_input_socket(sock, current_time)\n\n            if io_events & selectors.EVENT_WRITE:\n                self._process_ready_output_socket(sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        try:\n            if self._read_data(conn, current_time):\n                self._process_conn_incoming_messages(conn)\n                return\n        except OSError as error:\n            pass\n\n        self._close_connection(conn)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        if not conn.is_established:\n            if conn is self._server_conn:\n                self._establish_outgoing_server_connection(conn)\n            else:\n                self._establish_outgoing_peer_connection(conn)\n            return\n\n        try:\n            if not self._write_data(conn, current_time):\n                self._close_connection(conn)\n        except (OSError, ValueError):\n            self._close_connection(conn)\n\n    def _read_data(self, conn, current_time):\n        data = conn.sock.recv(conn.recv_size)\n        if not data:\n            return False\n\n        conn.in_buffer += data\n        conn.last_active = current_time\n        return True\n\n    def _write_data(self, conn, current_time):\n        num_bytes_sent = conn.sock.send(conn.out_buffer)\n        del conn.out_buffer[:num_bytes_sent]\n\n        if not conn.out_buffer:\n            self._modify_connection_events(conn, selectors.EVENT_READ)\n\n        conn.last_active = current_time\n        return True\n\n    def _modify_connection_events(self, conn, io_events):\n        if conn.io_events != io_events:\n            self._selector.modify(conn.sock, io_events)\n            conn.io_events = io_events\n\n    def _close_connection(self, conn):\n        if not conn:\n            return\n\n        sock = conn.sock\n        del self._conns[sock]\n\n        self._selector.unregister(sock)\n        self._close_socket(sock)\n        self._num_sockets -= 1\n\n    @staticmethod\n    def _close_socket(sock):\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def run(self):\n        self._selector = selectors.DefaultSelector()\n        try:\n            while not self._want_abort:\n                current_time = time.monotonic()\n                self._process_queue_messages()\n                self._process_ready_sockets(current_time)\n                time.sleep(0.004)\n        finally:\n            self._selector.close()\n\nclass Connection:\n    __slots__ = (\"sock\", \"addr\", \"io_events\", \"is_established\", \"in_buffer\", \"out_buffer\",\n                 \"last_active\", \"recv_size\")\n\n    def __init__(self, sock=None, addr=None, io_events=None):\n        self.sock = sock\n        self.addr = addr\n        self.io_events = io_events\n        self.in_buffer = bytearray()\n        self.out_buffer = bytearray()\n        self.last_active = time.monotonic()\n        self.recv_size = 51200\n        self.is_established = False\n\nclass PeerConnection(Connection):\n    __slots__ = (\"init\", \"request_token\", \"response_token\", \"has_post_init_activity\")\n\n    def __init__(self, *args, init=None, request_token=None, response_token=None, **kwargs):\n        Connection.__init__(self, *args, **kwargs)\n        self.init = init\n        self.request_token = request_token\n        self.response_token = response_token\n        self.has_post_init_activity = False",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport selectors\nimport threading\nimport time\nfrom collections import deque, defaultdict\n\nclass Connection:\n    def __init__(self, sock, address):\n        self.sock = sock\n        self.address = address\n        self.buffer = bytearray()\n        self.io_events = 0\n        self.last_activity = time.time()\n\nclass NetworkThread(threading.Thread):\n    def __init__(self, listen_port, interface_name, token, upload_speed):\n        super().__init__()\n        self.pending_shutdown = False\n        self.upload_speed = upload_speed\n        self.token = token\n        self._pending_network_msgs = deque()\n        self._user_update_counter = 0\n        self._user_update_counters = {}\n        self._upload_queue_timer_id = -1\n        self._retry_failed_uploads_timer_id = -1\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(list)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = True\n        self._want_abort = False\n        self._selector = selectors.DefaultSelector()\n        self._listen_socket = None\n        self._listen_port = listen_port\n        self._interface_name = interface_name\n        self._interface_address = ''\n        self._portmapper = None\n        self._local_ip_address = ''\n        self._server_conn = None\n        self._server_address = ('', 0)\n        self._server_username = ''\n        self._server_timeout_time = 0.0\n        self._server_timeout_value = 30\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = time.time()\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        try:\n            self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self._listen_socket.setblocking(False)\n            return True\n        except Exception as e:\n            print(f\"Failed to create listen socket: {e}\")\n            return False\n\n    def _bind_listen_port(self):\n        try:\n            self._interface_address = self._get_interface_ip(self._interface_name)\n            self._listen_socket.bind((self._interface_address, self._listen_port))\n            self._listen_socket.listen(100)\n            return True\n        except Exception as e:\n            print(f\"Failed to bind to port {self._listen_port}: {e}\")\n            return False\n\n    def _get_interface_ip(self, interface_name):\n        # Placeholder for actual IP retrieval logic\n        return '0.0.0.0'\n\n    def _accept_incoming_peer_connections(self):\n        while True:\n            try:\n                conn, addr = self._listen_socket.accept()\n                conn.setblocking(False)\n                connection = Connection(conn, addr)\n                self._conns[addr] = connection\n                self._num_sockets += 1\n                self._selector.register(connection.sock, selectors.EVENT_READ, data=connection)\n            except BlockingIOError:\n                break\n            except Exception as e:\n                print(f\"Accept error: {e}\")\n                break\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        # Placeholder for initialization logic\n        pass\n\n    def _process_ready_sockets(self, current_time):\n        events = self._selector.select(timeout=1)\n        for key, mask in events:\n            conn = key.data\n            if mask & selectors.EVENT_READ:\n                self._process_ready_input_socket(conn.sock, current_time)\n            if mask & selectors.EVENT_WRITE:\n                self._process_ready_output_socket(conn.sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        conn = self._conns.get(sock.getpeername())\n        if not conn:\n            return\n        if self._read_data(conn, current_time):\n            self._modify_connection_events(conn, selectors.EVENT_READ | selectors.EVENT_WRITE)\n        else:\n            self._close_connection(conn)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        conn = self._conns.get(sock.getpeername())\n        if not conn:\n            return\n        if self._write_data(conn, current_time):\n            self._modify_connection_events(conn, selectors.EVENT_READ | selectors.EVENT_WRITE)\n        else:\n            self._close_connection(conn)\n\n    def _read_data(self, conn, current_time):\n        try:\n            data = conn.sock.recv(4096)\n            if data:\n                conn.buffer.extend(data)\n                conn.last_activity = current_time\n                return True\n            else:\n                return False\n        except Exception as e:\n            print(f\"Read error: {e}\")\n            return False\n\n    def _write_data(self, conn, current_time):\n        try:\n            if conn.buffer:\n                sent = conn.sock.send(conn.buffer)\n                conn.buffer = conn.buffer[sent:]\n                conn.last_activity = current_time\n                return True\n            else:\n                return False\n        except Exception as e:\n            print(f\"Write error: {e}\")\n            return False\n\n    def _modify_connection_events(self, conn, io_events):\n        self._selector.modify(conn.sock, io_events, data=conn)\n\n    def _close_connection(self, conn):\n        self._selector.unregister(conn.sock)\n        self._close_socket(conn.sock)\n        del self._conns[conn.address]\n        self._num_sockets -= 1\n\n    def _close_socket(self, sock):\n        try:\n            sock.close()\n        except Exception as e:\n            print(f\"Socket close error: {e}\")\n\n    def run(self):\n        if not self._create_listen_socket() or not self._bind_listen_port():\n            self._want_abort = True\n            return\n\n        self._selector.register(self._listen_socket, selectors.EVENT_READ)\n\n        while not self._want_abort:\n            current_time = time.time()\n            self._accept_incoming_peer_connections()\n            self._process_ready_sockets(current_time)\n            self._last_cycle_time = current_time\n            if self.pending_shutdown:\n                self._want_abort = True\n\n        self._selector.close()\n        self._close_socket(self._listen_socket)"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a TCP server function that handles client connections, performs data exchange, and measures performance statistics during the exchange.\n\nFunction Description: The function `server_once` establishes a TCP server that listens for incoming client connections, exchanges parameters with the client, performs data transfer (either sending or receiving based on parameters), collects performance statistics, exchanges results with the client, and finally closes the connection. The function handles both TCP and UDP protocols based on client parameters and includes debugging capabilities.\n\nInput: \n- None (The function uses global constants and variables for configuration)\n  - DEBUG: bool - Flag to enable debug output\n  - COOKIE_SIZE: int - Size of the cookie for client verification\n  - PARAM_EXCHANGE, CREATE_STREAMS, TEST_START, TEST_RUNNING, TEST_END, EXCHANGE_RESULTS, DISPLAY_RESULTS, IPERF_DONE: int - Command codes for protocol control\n\nOutput: \n- None (The function performs operations and outputs results to console/logs but doesn't return any value)\n  - Prints server status and debug information to console\n  - Outputs performance statistics when complete",
    "Canonical_solution": "import json\nimport select\nimport socket\nimport struct\nimport time\n\ndef server_once():\n    # Listen for a connection\n    ai = socket.getaddrinfo(\"0.0.0.0\", 5201)\n    ai = ai[0]\n    print(\"Server listening on\", ai[-1])\n    s_listen = socket.socket(ai[0], socket.SOCK_STREAM)\n    s_listen.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s_listen.bind(ai[-1])\n    s_listen.listen(1)\n    s_ctrl, addr = s_listen.accept()\n\n    # Read client's cookie\n    cookie = recvn(s_ctrl, COOKIE_SIZE)\n    if DEBUG:\n        print(cookie)\n\n    # Ask for parameters\n    s_ctrl.sendall(bytes([PARAM_EXCHANGE]))\n\n    # Get parameters\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    param = recvn(s_ctrl, n)\n    param = json.loads(str(param, \"ascii\"))\n    if DEBUG:\n        print(param)\n    reverse = param.get(\"reverse\", False)\n\n    # Ask to create streams\n    s_ctrl.sendall(bytes([CREATE_STREAMS]))\n\n    if param.get(\"tcp\", False):\n        # Accept stream\n        s_data, addr = s_listen.accept()\n        print(\"Accepted connection:\", addr)\n        recvn(s_data, COOKIE_SIZE)\n    elif param.get(\"udp\", False):\n        # Close TCP connection and open UDP \"connection\"\n        s_listen.close()\n        s_data = socket.socket(ai[0], socket.SOCK_DGRAM)\n        s_data.bind(ai[-1])\n        data, addr = s_data.recvfrom(4)\n        s_data.sendto(b\"\\x12\\x34\\x56\\x78\", addr)\n    else:\n        assert False\n\n    # Start test\n    s_ctrl.sendall(bytes([TEST_START]))\n\n    # Run test\n    s_ctrl.sendall(bytes([TEST_RUNNING]))\n\n    # Read data, and wait for client to send TEST_END\n    poll = select.poll()\n    poll.register(s_ctrl, select.POLLIN)\n    if reverse:\n        poll.register(s_data, select.POLLOUT)\n    else:\n        poll.register(s_data, select.POLLIN)\n    stats = Stats(param)\n    stats.start()\n    running = True\n    data_buf = bytearray(urandom(param[\"len\"]))\n    while running:\n        for pollable in poll.poll(stats.max_dt_ms()):\n            if pollable_is_sock(pollable, s_ctrl):\n                cmd = recvn(s_ctrl, 1)[0]\n                if DEBUG:\n                    print(cmd_string.get(cmd, \"UNKNOWN_COMMAND\"))\n                if cmd == TEST_END:\n                    running = False\n            elif pollable_is_sock(pollable, s_data):\n                if reverse:\n                    n = s_data.send(data_buf)\n                    stats.add_bytes(n)\n                else:\n                    recvninto(s_data, data_buf)\n                    stats.add_bytes(len(data_buf))\n        stats.update()\n\n    # Need to continue writing so other side doesn't get blocked waiting for data\n    if reverse:\n        while True:\n            for pollable in poll.poll(0):\n                if pollable_is_sock(pollable, s_data):\n                    s_data.send(data_buf)\n                    break\n            else:\n                break\n\n    stats.stop()\n\n    # Ask to exchange results\n    s_ctrl.sendall(bytes([EXCHANGE_RESULTS]))\n\n    # Get client results\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    results = recvn(s_ctrl, n)\n    results = json.loads(str(results, \"ascii\"))\n    if DEBUG:\n        print(results)\n\n    # Send our results\n    results = {\n        \"cpu_util_total\": 1,\n        \"cpu_util_user\": 0.5,\n        \"cpu_util_system\": 0.5,\n        \"sender_has_retransmits\": 1,\n        \"congestion_used\": \"cubic\",\n        \"streams\": [\n            {\n                \"id\": 1,\n                \"bytes\": stats.nb0,\n                \"retransmits\": 0,\n                \"jitter\": 0,\n                \"errors\": 0,\n                \"packets\": stats.np0,\n                \"start_time\": 0,\n                \"end_time\": ticks_diff(stats.t3, stats.t0) * 1e-6,\n            }\n        ],\n    }\n    results = json.dumps(results)\n    s_ctrl.sendall(struct.pack(\">I\", len(results)))\n    s_ctrl.sendall(bytes(results, \"ascii\"))\n\n    # Ask to display results\n    s_ctrl.sendall(bytes([DISPLAY_RESULTS]))\n\n    # Wait for client to send IPERF_DONE\n    cmd = recvn(s_ctrl, 1)[0]\n    assert cmd == IPERF_DONE\n\n    # Close all sockets\n    s_data.close()\n    s_ctrl.close()\n    s_listen.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport struct\nimport time\nimport sys\n\ndef server_once():\n    global DEBUG, COOKIE_SIZE, PARAM_EXCHANGE, CREATE_STREAMS, TEST_START, TEST_RUNNING, TEST_END, EXCHANGE_RESULTS, DISPLAY_RESULTS, IPERF_DONE\n\n    # Server configuration\n    HOST = '0.0.0.0'\n    PORT = 5000\n    BUFFER_SIZE = 4096\n    RECV_TIMEOUT = 5\n    SEND_TIMEOUT = 5\n\n    # Initialize socket\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            s.bind((HOST, PORT))\n            s.listen(1)\n            print(\"Server listening on port\", PORT)\n            conn, addr = s.accept()\n            print(f\"Connection from {addr}\")\n            conn.settimeout(RECV_TIMEOUT)\n            conn.setblocking(True)\n\n            # Parameter exchange\n            if DEBUG:\n                print(\"Starting parameter exchange\")\n            param_data = conn.recv(BUFFER_SIZE)\n            if not param_data:\n                print(\"No data received during parameter exchange\")\n                return\n\n            # Process parameters (example: cookie verification)\n            if len(param_data) < COOKIE_SIZE:\n                print(\"Invalid cookie size\")\n                return\n            cookie = param_data[:COOKIE_SIZE]\n            if DEBUG:\n                print(\"Received cookie:\", cookie.hex())\n\n            # Send command code for parameter exchange acknowledgment\n            conn.sendall(struct.pack('!I', PARAM_EXCHANGE))\n\n            # Create streams (TCP/UDP handling)\n            if DEBUG:\n                print(\"Creating streams\")\n            conn.sendall(struct.pack('!I', CREATE_STREAMS))\n\n            # Start test\n            if DEBUG:\n                print(\"Starting test\")\n            conn.sendall(struct.pack('!I', TEST_START))\n            test_start_time = time.time()\n\n            # Test running phase - simulate data transfer\n            if DEBUG:\n                print(\"Test running\")\n            conn.sendall(struct.pack('!I', TEST_RUNNING))\n            time.sleep(1)  # Simulate data transfer time\n\n            # End test\n            if DEBUG:\n                print(\"Ending test\")\n            conn.sendall(struct.pack('!I', TEST_END))\n            test_end_time = time.time()\n            test_duration = test_end_time - test_start_time\n\n            # Exchange results\n            if DEBUG:\n                print(\"Exchanging results\")\n            conn.sendall(struct.pack('!I', EXCHANGE_RESULTS))\n            result_data = conn.recv(BUFFER_SIZE)\n            if not result_data:\n                print(\"No data received during result exchange\")\n                return\n\n            # Display results\n            if DEBUG:\n                print(\"Displaying results\")\n            conn.sendall(struct.pack('!I', DISPLAY_RESULTS))\n            print(f\"Test duration: {test_duration:.2f} seconds\")\n\n            # Finalize\n            if DEBUG:\n                print(\"Finalizing connection\")\n            conn.sendall(struct.pack('!I', IPERF_DONE))\n            conn.close()\n            print(\"Connection closed\")\n\n    except socket.timeout:\n        print(\"Socket timeout occurred\")\n    except Exception as e:\n        print(f\"Error: {e}\")"
  },
  {
    "Task_id": 399,
    "Instruction": "Task Description: Create a TCP socket server class in Python that can handle incoming client connections, receive and process data, and send responses back to clients. The server should include error handling and callback methods for various events during its lifecycle.\n\nClass Description: MySocketServer is a TCP server implementation that listens on a specified host and port, accepts client connections, and handles data exchange. It provides hooks for custom behavior during different stages of server operation (startup, connection acceptance, data processing, etc.).\n\nAttributes:\n- host: str - The IP address or hostname to bind the server to\n- port: int - The port number to listen on\n- name: str - A descriptive name for the server (default: 'SocketServer')\n- numListen: int - Maximum number of queued connections (default: 1)\n- sock: socket.socket - The server socket object\n\nMethods:\n- __init__(host, port, name='SocketServer', numListen=1) -> None - Initializes the server with connection parameters\n- Run() -> None - Starts the server, binds to the specified address, and begins listening for connections\n- Stop() -> None - Stops the server by sending a special command to itself\n- onAccept(sock, addr) -> None - Handles a new client connection (sock: connection socket, addr: client address)\n- onData(sock, addr, data) -> None - Processes received data and sends a response (sock: connection socket, addr: client address, data: received bytes)\n- response(data) -> bytes - Generates a response for received data (data: input bytes) -> returns response bytes\n- onStartFail(e) -> None - Callback when server fails to start (e: exception object)\n- onStart() -> None - Callback when server starts successfully\n- onAcceptError(e) -> None - Callback when connection acceptance fails (e: exception object)\n- onRecvError(sock, addr, e) -> None - Callback when data receiving fails (sock: connection socket, addr: client address, e: exception object)\n- onSendError(sock, addr, e) -> None - Callback when data sending fails (sock: connection socket, addr: client address, e: exception object)\n- onStop() -> None - Callback when server stops\n\nStatic Methods:\n- Query(host, port, req) -> bytes - Helper function to send a request to a server and get response (host: target host, port: target port, req: request bytes) -> returns response bytes",
    "Canonical_solution": "import socket\nfrom qqbot.utf8logger import INFO, ERROR\nfrom qqbot.common import STR2BYTES\n\nclass MySocketServer:\n    def __init__(self, host, port, name='SocketServer', numListen=1):\n        self.host = host\n        self.port = int(port)\n        self.name = name\n        self.numListen = numListen\n\n    def Run(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.sock.bind((self.host, self.port))\n            self.sock.listen(self.numListen)\n            self.sock.settimeout(None)\n        except socket.error as e:\n            ERROR('\u65e0\u6cd5\u5f00\u542f %s \uff0c %s', self.name, e)\n            self.onStartFail(e)\n        else:\n            INFO('\u5df2\u5728 %s \u7684 %s \u7aef\u53e3\u5f00\u542f %s', self.host, self.port, self.name)\n            self.onStart()\n            while True:\n                try:\n                    sock, addr = self.sock.accept()\n                except socket.error as e:\n                    ERROR('%s \u53d1\u751f accept \u9519\u8bef\uff0c%s', self.name, e)\n                    self.onAcceptError(e)\n                else:\n                    self.onAccept(sock, addr)\n\n    def onAccept(self, sock, addr):\n        sock.settimeout(10.0)\n        try:\n            data = sock.recv(8192)\n        except socket.error as e:\n            ERROR('%s \u5728\u63a5\u6536\u6765\u81ea %s:%s \u7684\u6570\u636e\u65f6\u53d1\u9001\u9519\u8bef\uff0c%s', self.name, addr[0], addr[1], e)\n            self.onRecvError(sock, addr, e)\n            sock.close()\n        else:\n            if data == b'##STOP':\n                INFO('%s \u5df2\u505c\u6b62', self.name)\n                self.onStop()\n                sys.exit(0)\n            else:\n                self.onData(sock, addr, data)\n\n    def Stop(self):\n        Query(self.host, self.port, b'##STOP')\n\n    def onData(self, sock, addr, data):\n        try:\n            resp = self.response(data)\n        except Exception as e:\n            resp = '%s \u5728\u5904\u7406 %s:%s \u7684\u8bf7\u6c42\u65f6\u53d1\u751f\u9519\u8bef\uff0c%s' % (self.name, addr[0], addr[1], e)\n            ERROR(resp, exc_info=True)\n            resp = STR2BYTES(resp)\n\n        try:\n            sock.sendall(resp)\n        except socket.error as e:\n            ERROR('%s \u5728\u5411 %s:%s \u53d1\u9001\u6570\u636e\u65f6\u53d1\u9001\u9519\u8bef\uff0c%s', self.name, addr[0], addr[1], e)\n            self.onSendError(sock, addr, data)\n        finally:\n            sock.close()\n\n    def onStartFail(self, e):\n        pass\n\n    def onStart(self):\n        pass\n\n    def onAcceptError(self, e):\n        pass\n\n    def onRecvError(self, sock, addr, e):\n        pass\n\n    def onSendError(self, sock, addr, e):\n        pass\n\n    def onStop(self):\n        pass\n\n    def response(self, data):\n        return b'Hello, ' + data\n\ndef Query(host, port, req):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    resp = b''\n    try:\n        sock.connect((host, int(port)))\n        sock.sendall(req)\n        while True:\n            data = sock.recv(8096)\n            if not data:\n                return resp\n            else:\n                resp += data\n    except socket.error:\n        return resp\n    finally:\n        sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass MySocketServer:\n    def __init__(self, host, port, name='SocketServer', numListen=1):\n        self.host = host\n        self.port = port\n        self.name = name\n        self.numListen = numListen\n        self.sock = None\n        self.running = False\n        self.stop_event = threading.Event()\n\n    def Run(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.sock.bind((self.host, self.port))\n            self.sock.listen(self.numListen)\n            self.running = True\n            self.onStart()\n            print(f\"{self.name} started on {self.host}:{self.port}\")\n            while self.running:\n                try:\n                    client_sock, addr = self.sock.accept()\n                    self.onAccept(client_sock, addr)\n                    threading.Thread(target=self.handle_client, args=(client_sock, addr)).start()\n                except Exception as e:\n                    self.onAcceptError(e)\n                    if not self.running:\n                        break\n        except Exception as e:\n            self.onStartFail(e)\n        finally:\n            self.Stop()\n\n    def Stop(self):\n        self.running = False\n        self.stop_event.set()\n        if self.sock:\n            try:\n                self.sock.shutdown(socket.SHUT_RDWR)\n            except:\n                pass\n            try:\n                self.sock.close()\n            except:\n                pass\n        self.onStop()\n\n    def handle_client(self, sock, addr):\n        try:\n            while self.running:\n                try:\n                    data = sock.recv(4096)\n                    if not data:\n                        break\n                    self.onData(sock, addr, data)\n                except Exception as e:\n                    self.onRecvError(sock, addr, e)\n                    break\n        except Exception as e:\n            self.onRecvError(sock, addr, e)\n        finally:\n            try:\n                sock.close()\n            except:\n                pass\n\n    def onAccept(self, sock, addr):\n        pass\n\n    def onData(self, sock, addr, data):\n        response = self.response(data)\n        try:\n            sock.sendall(response)\n        except Exception as e:\n            self.onSendError(sock, addr, e)\n\n    def response(self, data):\n        return data\n\n    def onStartFail(self, e):\n        pass\n\n    def onStart(self):\n        pass\n\n    def onAcceptError(self, e):\n        pass\n\n    def onRecvError(self, sock, addr, e):\n        pass\n\n    def onSendError(self, sock, addr, e):\n        pass\n\n    def onStop(self):\n        pass\n\n    @staticmethod\n    def Query(host, port, req):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((host, port))\n            s.sendall(req)\n            response = b''\n            while True:\n                part = s.recv(4096)\n                if not part:\n                    break\n                response += part\n            return response"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create an asynchronous Kafka environment class for inter-process communication that can both consume and produce messages using aiokafka.\n\nClass Description: AsyncKafkaEnvironment is a class that provides asynchronous Kafka message consumption and production capabilities. It handles initialization of Kafka consumers and producers, message sending, batch data retrieval, and proper resource cleanup.\n\nAttributes:\nkafka_bootstrap_servers: Optional[Union[str, List[str]]] - Kafka broker addresses as string or list of strings\nkafka_input_topic: Optional[str] - Topic name for consuming messages\nkafka_output_topic: Optional[str] - Topic name for producing messages\ntimeout_ms: Optional[int] - Timeout in milliseconds for consumer operations\nconsumer: Optional[AIOKafkaConsumer] - Async Kafka consumer instance\nproducer: Optional[AIOKafkaProducer] - Async Kafka producer instance\n\nMethods:\ninitialize() -> None - Initializes the Kafka consumer and producer instances with configured settings. Validates required attributes are set before initialization.\nfinalize() -> None - Gracefully stops both consumer and producer instances to clean up resources.\nmessage_sender(producer: AIOKafkaProducer, data: Iterable, topic: str) -> None - Sends data to specified Kafka topic using the provided producer instance.\nget_data_batch(batch_size: Optional[int]) -> list - Retrieves a batch of messages from the input topic, with optional size limit. Returns list of message values.",
    "Canonical_solution": "import logging\nimport json\nfrom typing import Union, List, Optional, Iterable\nfrom aiokafka import AIOKafkaConsumer, AIOKafkaProducer\n\nlogger = logging.getLogger(__name__)\n\nclass AsyncKafkaEnvironment:\n    \"\"\"\n    Represents an asynchronous Kafka environment for inter-process communication.\n    \"\"\"\n    \n    kafka_bootstrap_servers: Optional[Union[str, List[str]]] = None\n    kafka_input_topic: Optional[str] = None\n    kafka_output_topic: Optional[str] = None\n    timeout_ms: Optional[int] = None\n    consumer: Optional[AIOKafkaConsumer] = None\n    producer: Optional[AIOKafkaProducer] = None\n\n    async def initialize(self):\n        assert self.kafka_bootstrap_servers is not None, \"missing initialization for kafka_bootstrap_servers\"\n        assert self.kafka_input_topic is not None, \"missing initialization for kafka_input_topic\"\n        assert self.kafka_output_topic is not None, \"missing initialization for kafka_output_topic\"\n        assert self.timeout_ms is not None, \"missing initialization for timeout_ms\"\n\n        self.consumer = AIOKafkaConsumer(\n            self.kafka_input_topic,\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            value_deserializer=lambda v: json.loads(v.decode(\"utf-8\")),\n            auto_offset_reset=\"earliest\",\n            max_partition_fetch_bytes=3000000,\n        )\n        await self.consumer.start()\n\n        self.producer = AIOKafkaProducer(\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            value_serializer=lambda v: json.dumps(v).encode(\"utf-8\"),\n            max_request_size=3000000,\n            acks=\"all\",\n        )\n        await self.producer.start()\n\n    async def finalize(self):\n        if self.consumer:\n            await self.consumer.stop()\n        if self.producer:\n            await self.producer.stop()\n\n    async def message_sender(self, producer: AIOKafkaProducer, data: Iterable, topic: str):\n        try:\n            await producer.send_and_wait(topic, value=data)\n            logger.info(f\"The number of records sent to topic:{topic}, record_no:{len(data)}\")\n        finally:\n            pass\n\n    async def get_data_batch(self, batch_size: Optional[int]) -> list:\n        batch = await self.consumer.getmany(\n            timeout_ms=self.timeout_ms, max_records=batch_size\n        )\n\n        if len(batch) == 0:\n            batch_data = []\n        elif len(batch) > 1:\n            logger.error(\n                f\"consumer should be subscribed to only one topic and partition, not {list(batch.keys())}\"\n            )\n            batch_data = []\n        else:\n            for topic_partition, messages in batch.items():\n                batch_data = [msg.value for msg in messages]\n\n            logger.info(\n                f\"Received a batch with number_of_messages:{len(batch_data)} records from Kafka input_topic:{self.kafka_input_topic}\"\n            )\n        return batch_data",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "import asyncio\nfrom typing import Optional, Union, List, Iterable\nfrom aiokafka import AIOKafkaConsumer, AIOKafkaProducer\n\n\nclass AsyncKafkaEnvironment:\n    def __init__(\n        self,\n        kafka_bootstrap_servers: Optional[Union[str, List[str]]] = None,\n        kafka_input_topic: Optional[str] = None,\n        kafka_output_topic: Optional[str] = None,\n        timeout_ms: Optional[int] = 1000\n    ):\n        self.kafka_bootstrap_servers = kafka_bootstrap_servers\n        self.kafka_input_topic = kafka_input_topic\n        self.kafka_output_topic = kafka_output_topic\n        self.timeout_ms = timeout_ms\n        self.consumer: Optional[AIOKafkaConsumer] = None\n        self.producer: Optional[AIOKafkaProducer] = None\n\n    async def initialize(self) -> None:\n        if not all([self.kafka_bootstrap_servers, self.kafka_input_topic]):\n            raise ValueError(\"kafka_bootstrap_servers and kafka_input_topic must be set before initialization\")\n\n        self.consumer = AIOKafkaConsumer(\n            self.kafka_input_topic,\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            enable_auto_commit=False,\n            auto_offset_reset='earliest',\n            consumer_timeout_ms=self.timeout_ms\n        )\n\n        self.producer = AIOKafkaProducer(\n            bootstrap_servers=self.kafka_bootstrap_servers\n        )\n\n        await self.consumer.start()\n        await self.producer.start()\n\n    async def finalize(self) -> None:\n        if self.consumer:\n            await self.consumer.stop()\n        if self.producer:\n            await self.producer.stop()\n\n    @staticmethod\n    async def message_sender(producer: AIOKafkaProducer, data: Iterable, topic: str) -> None:\n        for item in data:\n            await producer.send(topic, item)\n        await producer.flush()\n\n    async def get_data_batch(self, batch_size: Optional[int] = None) -> list:\n        if not self.consumer:\n            raise ValueError(\"Consumer must be initialized before retrieving data\")\n\n        messages = []\n        try:\n            async for msg in self.consumer:\n                messages.append(msg.value)\n                if batch_size and len(messages) >= batch_size:\n                    break\n        except Exception as e:\n            print(f\"Error while consuming messages: {e}\")\n        return messages"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create an asynchronous HTTP client class in Python using httpx and asyncio libraries to perform various HTTP operations including GET, POST, file downloads, and image retrieval with progress tracking and error handling.\n\nClass Description: AsyncHTTPClient is a utility class that provides static methods for performing asynchronous HTTP operations. It handles common HTTP methods, file downloads with progress tracking, and image retrieval/saving functionality.\n\nMethods:\n\nMethod1: get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP GET request to the specified URL with optional headers, query parameters, and timeout. Returns the HTTP response.\n\nMethod2: post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP POST request to the specified URL with optional headers, query parameters, form data, JSON payload, and timeout. Returns the HTTP response.\n\nMethod3: download(url: str, save_path: Path, exclude_json: bool = False) -> None\n- Downloads a file from the specified URL asynchronously with progress tracking. Saves to the specified path while optionally excluding JSON content. Raises exception if content type doesn't match.\n\nMethod4: get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]\n- Retrieves an image from the specified URL asynchronously. Can optionally save to disk and returns a PIL Image object or None if the content isn't an image.",
    "Canonical_solution": "import httpx\nfrom typing import Dict, Optional, Any, Union\nfrom pathlib import Path\nfrom io import BytesIO\nfrom PIL import Image\nimport tqdm.asyncio\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str,\n                 *,\n                 headers: Optional[Dict[str, str]] = None,\n                 params: Optional[Dict[str, Any]] = None,\n                 timeout: Optional[int] = 20,\n                 **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n\n    @staticmethod\n    async def post(url: str,\n                  *,\n                  headers: Optional[Dict[str, str]] = None,\n                  params: Optional[Dict[str, Any]] = None,\n                  data: Optional[Dict[str, Any]] = None,\n                  json: Optional[Dict[str, Union[Any, str]]] = None,\n                  timeout: Optional[int] = 20,\n                  **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.post(url,\n                                   headers=headers,\n                                   params=params,\n                                   data=data,\n                                   json=json,\n                                   timeout=timeout,\n                                   **kwargs)\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False):\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        async with httpx.AsyncClient().stream(method='GET', url=url, follow_redirects=True) as datas:\n            if exclude_json and 'application/json' in str(datas.headers['Content-Type']):\n                raise Exception('file not match type')\n            size = int(datas.headers['Content-Length'])\n            f = save_path.open('wb')\n            async for chunk in tqdm.asyncio.tqdm(iterable=datas.aiter_bytes(1),\n                                               desc=url.split('/')[-1],\n                                               unit='iB',\n                                               unit_scale=True,\n                                               unit_divisor=1024,\n                                               total=size,\n                                               colour='green'):\n                f.write(chunk)\n            f.close()\n\n    @staticmethod\n    async def get_img(url: str,\n                     *,\n                     headers: Optional[Dict[str, str]] = None,\n                     params: Optional[Dict[str, Any]] = None,\n                     timeout: Optional[int] = 20,\n                     save_path: Optional[Union[str, Path]] = None,\n                     **kwargs) -> Union[None, Image.Image]:\n        if save_path and Path(save_path).exists():\n            return Image.open(save_path)\n        \n        async with httpx.AsyncClient() as client:\n            resp = await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n            if resp.headers.get('Content-Type') not in ['image/png', 'image/jpeg']:\n                return None\n            resp = resp.read()\n            img = Image.open(BytesIO(resp))\n            \n            if save_path:\n                save_path = Path(save_path)\n                save_path.parent.mkdir(parents=True, exist_ok=True)\n                img.save(save_path)\n            return img",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\nimport os\nfrom pathlib import Path\nfrom typing import Optional, Dict, Any, Union\nfrom PIL import Image\nfrom io import BytesIO\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.get(url, headers=headers, params=params, **kwargs)\n            response.raise_for_status()\n            return response\n\n    @staticmethod\n    async def post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.post(url, headers=headers, params=params, data=data, json=json, **kwargs)\n            response.raise_for_status()\n            return response\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False) -> None:\n        async with httpx.AsyncClient() as client:\n            response = await client.get(url, follow_redirects=True)\n            response.raise_for_status()\n\n            content_type = response.headers.get('Content-Type', '')\n            if exclude_json and 'application/json' in content_type:\n                raise ValueError(\"Attempted to download JSON content which is excluded.\")\n\n            total_size = int(response.headers.get('Content-Length', 0))\n            downloaded = 0\n            chunk_size = 1024\n            with open(save_path, 'wb') as f:\n                async for chunk in response.aiter_bytes(chunk_size):\n                    f.write(chunk)\n                    downloaded += len(chunk)\n                    if total_size > 0:\n                        progress = (downloaded / total_size) * 100\n                        print(f\"Download progress: {progress:.2f}%\")\n\n    @staticmethod\n    async def get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.get(url, headers=headers, params=params, **kwargs)\n            response.raise_for_status()\n\n            content_type = response.headers.get('Content-Type', '')\n            if not content_type.startswith(('image/', 'application/octet-stream')):\n                return None\n\n            image_data = await response.aread()\n            image = Image.open(BytesIO(image_data))\n            if save_path:\n                image.save(save_path)\n            return image"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and forwards their file descriptors to a worker process over a Unix domain socket.\n\nFunction Description: The code consists of two main functions. `send_fd()` handles sending a file descriptor over a Unix domain socket, while `server()` sets up both the Unix domain socket for worker communication and the TCP server for client connections. The server continuously accepts TCP clients, sends their file descriptors to the worker, and closes the client connection.\n\nInput:\n- `send_fd()`:\n  - `sock`: [socket.socket] - A connected Unix domain socket\n  - `fd`: [int] - File descriptor to send\n- `server()`:\n  - `work_address`: [str] - Path for the Unix domain socket\n  - `port`: [int] - TCP port number to listen on\n\nOutput:\n- `send_fd()`: None (but expects 'OK' acknowledgment from receiver)\n- `server()`: None (runs indefinitely serving clients)",
    "Canonical_solution": "import socket\nimport struct\n\ndef send_fd(sock, fd):\n    '''\n    Send a single file descriptor.\n    '''\n    sock.sendmsg([b'x'],\n                 [(socket.SOL_SOCKET, socket.SCM_RIGHTS, struct.pack('i', fd))])\n    ack = sock.recv(2)\n    assert ack == b'OK'\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    work_serv.bind(work_address)\n    work_serv.listen(1)\n    worker, addr = work_serv.accept()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('',port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_fd(worker, client.fileno())\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport os\nimport struct\n\ndef send_fd(sock, fd):\n    try:\n        msg = struct.pack('I', fd)\n        sock.sendall(msg)\n        ack = sock.recv(2)\n        if ack != b'OK':\n            raise Exception(\"Failed to send FD\")\n    except Exception as e:\n        pass\n\ndef server(work_address, port):\n    work_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    try:\n        work_sock.bind(work_address)\n        work_sock.listen(1)\n    except socket.error as e:\n        if e.errno == 98:\n            os.remove(work_address)\n            work_sock.bind(work_address)\n            work_sock.listen(1)\n        else:\n            raise\n\n    tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_sock.bind(('0.0.0.0', port))\n    tcp_sock.listen(5)\n\n    while True:\n        client_sock, _ = tcp_sock.accept()\n        worker_conn, _ = work_sock.accept()\n        send_fd(worker_conn, client_sock.fileno())\n        client_sock.close()\n        worker_conn.close()"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Implement a multithreaded TCP echo server that receives data from a client, processes it, and sends it back to the client in chunks. The server should handle client connections in a separate thread and support graceful termination when receiving a \"QUIT\" command.\n\nClass Description: EchoServer is a threaded TCP server that echoes received data back to the client. It handles one client connection at a time, processes incoming data, and sends it back in configurable chunk sizes. The server can be configured to delay resending until triggered by an external event.\n\nAttributes:\n- host: str - The host IP address to bind the server to\n- port: int - The port number to listen on\n- sock: socket.socket - The TCP socket object for server operations\n- buffer: str - Accumulates received data before echoing back\n- start_resend_event: threading.Event - Optional event to trigger when to start echoing data back\n- chunk_size: int - Size of data chunks to send back to client (default: 1 byte)\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the server with host and port\n- run() -> None - Main thread method that handles client connection, data reception, and echoing back data. Runs in a separate thread when started. Processes data until \"QUIT\" is received or connection is closed.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass EchoServer(threading.Thread):\n    def __init__(self, host, port):\n        threading.Thread.__init__(self)\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.buffer = \"\"\n        self.start_resend_event = None\n        self.chunk_size = 1\n\n    def run(self):\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(1)\n        conn, client = self.sock.accept()\n        \n        while True:\n            data = conn.recv(1)\n            if not data:\n                break\n            self.buffer += data\n            if \"QUIT\\n\" in self.buffer:\n                break\n\n        self.buffer = self.buffer.replace(\"QUIT\\n\", '')\n\n        if self.start_resend_event:\n            self.start_resend_event.wait()\n\n        try:\n            while self.buffer:\n                n = conn.send(self.buffer[:self.chunk_size])\n                time.sleep(0.001)\n                self.buffer = self.buffer[n:]\n        except:\n            pass\n\n        conn.close()\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass EchoServer:\n    def __init__(self, host: str, port: int):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(1)\n        self.buffer = \"\"\n        self.start_resend_event = threading.Event()\n        self.chunk_size = 1\n\n    def run(self):\n        client_sock, addr = self.sock.accept()\n        print(f\"Connection from {addr}\")\n        try:\n            while True:\n                data = client_sock.recv(1024)\n                if not data:\n                    break\n                self.buffer += data.decode()\n                if \"QUIT\" in self.buffer:\n                    self.buffer = \"\"\n                    break\n                if self.start_resend_event.is_set():\n                    self._send_chunked_data(client_sock)\n        finally:\n            client_sock.close()\n            print(\"Client disconnected\")\n\n    def _send_chunked_data(self, sock):\n        while self.buffer:\n            chunk = self.buffer[:self.chunk_size]\n            self.buffer = self.buffer[self.chunk_size:]\n            sock.sendall(chunk.encode())\n            self.start_resend_event.wait()\n            self.start_resend_event.clear()"
  },
  {
    "Task_id": 402,
    "Instruction": "Task Description: Implement a TCP server-client communication system in Python using socket programming and multiprocessing. The system should allow for asynchronous handling of client connections and bidirectional data exchange.\n\nClass Description: The system consists of two main classes: TCPServer for handling incoming connections and TCPClient for establishing connections to the server. The TCPServer runs in a separate process to handle client connections asynchronously.\n\nAttributes:\n- TCPServer:\n  - port: int - The port number on which the server listens for connections\n  - process: Process - The multiprocessing Process object running the server\n  - is_running: bool - Flag indicating whether the server is currently running\n\n- TCPClient:\n  - port: int - The port number to connect to on the server\n  - sock: socket - The TCP socket object for communication with the server\n\nMethods:\n- TCPServer:\n  - start() -> None - Starts the server in a separate process\n  - stop() -> None - Stops the server process\n  - _subprocess_server_tcp(port: int) -> None - Internal method running in the subprocess to handle client connections (accepts connections and echoes received data)\n\n- TCPClient:\n  - send(data: Union[str, bytes]) -> bytes - Sends data to the server and returns the response\n  - close() -> None - Closes the client connection\n  - __del__() -> None - Destructor that ensures proper connection cleanup",
    "Canonical_solution": "import socket\nfrom multiprocessing import Process\nimport os\nimport time\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = int(port)\n        self.process = None\n        self.is_running = False\n\n    def start(self):\n        args = [self.port]\n        self.process = Process(target=self._subprocess_server_tcp, args=args)\n        self.process.start()\n        time.sleep(1)\n        self.is_running = True\n\n    def stop(self):\n        try:\n            os.kill(self.process.pid, 9)\n        except OSError:\n            self.process.terminate()\n        finally:\n            self.is_running = False\n\n    def _subprocess_server_tcp(self, port):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind(('localhost', port))\n        s.listen(True)\n        conn, addr = s.accept()\n\n        while True:\n            data = conn.recv(1024)\n            conn.send(b\"RECEIVED: \" + bytes(data))\n\n        conn.close()\n\nclass TCPClient:\n    def __init__(self, port):\n        self.port = int(port)\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', self.port))\n\n    def send(self, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n\n        self.sock.sendall(data)\n        return self.sock.recv(len(data) + 11)\n\n    def close(self):\n        try:\n            self.sock.close()\n        except socket.error:\n            pass\n\n    def __del__(self):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport multiprocessing\nfrom typing import Union\n\nclass TCPServer:\n    def __init__(self, port: int):\n        self.port = port\n        self.process = None\n        self.is_running = False\n\n    def start(self):\n        self.process = multiprocessing.Process(target=self._subprocess_server_tcp, args=(self.port,))\n        self.process.start()\n        self.is_running = True\n\n    def stop(self):\n        if self.is_running:\n            self.process.terminate()\n            self.process.join()\n            self.is_running = False\n\n    def _subprocess_server_tcp(self, port: int):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n            server_socket.bind(('localhost', port))\n            server_socket.listen(5)\n            print(f\"Server started on port {port}\")\n            while True:\n                client_socket, addr = server_socket.accept()\n                print(f\"Connection from {addr}\")\n                with client_socket:\n                    while True:\n                        data = client_socket.recv(1024)\n                        if not data:\n                            break\n                        client_socket.sendall(data)\n\nclass TCPClient:\n    def __init__(self, port: int):\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', port))\n\n    def send(self, data: Union[str, bytes]) -> bytes:\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        self.sock.sendall(data)\n        response = self.sock.recv(1024)\n        return response\n\n    def close(self):\n        self.sock.close()\n\n    def __del__(self):\n        self.close()"
  },
  {
    "Task_id": 403,
    "Instruction": "Task Description: Create a TCP server that listens for incoming client connections, receives data from connected clients, and handles the connection in a separate thread to allow for concurrent operations.\n\nFunction Description: The code consists of two main functions: `start_server()` initializes and sets up the TCP server socket, while `start_server_thread()` handles the client connection in a separate thread, receiving data and managing the connection lifecycle.\n\nInput: \n- `start_server()`: No input parameters.\n- `start_server_thread()`: No input parameters.\n\nOutput: \n- `start_server()`: No return value, but it initializes the global `bad_socket` object.\n- `start_server_thread()`: No return value, but it prints connection details and handles data reception until the `stop` flag is set to `True`.\n\n---\n\nClass Description: This task can also be implemented as a class to encapsulate the TCP server functionality, making it more reusable and manageable.\n\nAttributes:\n- `bad_socket`: [socket.socket] - The TCP server socket object.\n- `stop`: [bool] - A flag to control the server thread's execution.\n\nMethods:\n- `start_server()` -> None - Initializes and sets up the TCP server socket.\n- `start_server_thread()` -> None - Handles client connections and data reception in a separate thread.\n- `stop_server()` -> None - Sets the `stop` flag to `True` to terminate the server thread gracefully.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nbad_socket = None\nstop = False\n\ndef start_server():\n    global bad_socket\n    bad_socket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    bad_socket.settimeout(0.5)  # timeout of 500ms\n    bad_socket.bind((\"\", 0))\n    bad_socket.listen(5)\n\ndef start_server_thread():\n    print(\"Before accept\")\n    (conn, addr) = bad_socket.accept()\n    print(\"Connected with {0}:{1}\".format(addr[0], addr[1]))\n    while True:\n        if stop:\n            break\n        try:\n            conn.recv(1024)\n            # sleep for 1 ms. This limits the rate to 1MBytes/sec or less\n            time.sleep(0.001)\n        except Exception as e:\n            print(e)\n    print(\"server thread stopped\")\n    bad_socket.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass TCPServer:\n    def __init__(self):\n        self.bad_socket = None\n        self.stop = False\n\n    def start_server(self):\n        self.bad_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.bad_socket.bind(('localhost', 12345))\n        self.bad_socket.listen(5)\n        print(\"Server is listening on port 12345...\")\n\n    def start_server_thread(self):\n        while not self.stop:\n            try:\n                client_socket, addr = self.bad_socket.accept()\n                print(f\"Connection from {addr}\")\n                threading.Thread(target=self.handle_client, args=(client_socket,)).start()\n            except Exception as e:\n                if not self.stop:\n                    print(f\"Error accepting connection: {e}\")\n                break\n\n    def handle_client(self, client_socket):\n        try:\n            while not self.stop:\n                data = client_socket.recv(1024)\n                if not data:\n                    break\n                print(f\"Received data: {data.decode()}\")\n        except Exception as e:\n            print(f\"Error handling client: {e}\")\n        finally:\n            client_socket.close()\n\n    def stop_server(self):\n        self.stop = True\n        if self.bad_socket:\n            self.bad_socket.close()"
  },
  {
    "Task_id": 404,
    "Instruction": "Task Description: Implement a simple HTTP server using TCP sockets in Python that can handle basic GET and HEAD requests, send appropriate responses, and stream data to connected clients.\n\nClass Description: HTTPServer is a TCP-based HTTP server implementation that handles incoming client connections, processes HTTP requests, and manages data streaming to clients.\n\nAttributes:\n- socket: [socket.socket] - The TCP socket object used for server operations\n- conn: [socket.socket] - The active client connection socket\n- host: [str] - The server's host address (None if bound to all interfaces)\n- port: [int] - The server's listening port\n- bound: [bool] - Flag indicating whether the server is bound to an address\n\nMethods:\n- bind(host=\"127.0.0.1\", port=0) -> None - Binds the server to the specified host and port. If port is 0, uses an available port. Sets up listening socket.\n- open(timeout=30) -> HTTPRequest - Accepts an incoming connection, processes the HTTP request, and returns the parsed request object. Times out after specified seconds.\n- write(data) -> None - Sends data to the connected client. Raises IOError if no active connection.\n- close(client_only=False) -> None - Closes the client connection and optionally the server socket. If client_only is True, keeps server socket open.\n\nHelper Class Description: HTTPRequest is used to parse incoming HTTP requests from raw request text.\n\nAttributes:\n- rfile: [BytesIO] - Buffer containing the request data\n- raw_requestline: [bytes] - The first line of the HTTP request\n- error_code: [int] - Error code if request parsing failed\n- error_message: [str] - Error message if request parsing failed\n- command: [str] - The HTTP method (e.g., \"GET\", \"HEAD\") from parsed request\n\nMethods:\n- parse_request() -> None - Parses the HTTP request (inherited from BaseHTTPRequestHandler)\n- send_error(code, message) -> None - Stores error information when request parsing fails",
    "Canonical_solution": "import socket\nfrom io import BytesIO\ntry:\n    from BaseHTTPServer import BaseHTTPRequestHandler\nexcept ImportError:\n    from http.server import BaseHTTPRequestHandler\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn = self.host = self.port = None\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        try:\n            self.socket.bind((host or \"\", port))\n        except socket.error as err:\n            raise OSError(err)\n\n        self.socket.listen(1)\n        self.bound = True\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def open(self, timeout=30):\n        self.socket.settimeout(timeout)\n\n        try:\n            conn, addr = self.socket.accept()\n            conn.settimeout(None)\n        except socket.timeout:\n            raise OSError(\"Socket accept timed out\")\n\n        try:\n            req_data = conn.recv(1024)\n        except socket.error:\n            raise OSError(\"Failed to read data from socket\")\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(\"Invalid request method: {0}\".format(req.command))\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Livestreamer\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except socket.error:\n            raise OSError(\"Failed to write data to socket\")\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.conn = conn\n        return req\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError(\"No connection\")\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if self.conn:\n            self.conn.close()\n        if not client_only:\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nfrom io import BytesIO\nfrom http.server import BaseHTTPRequestHandler\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = None\n        self.error_message = None\n        self.command = None\n        self.parse_request()\n\n    def parse_request(self):\n        try:\n            super().parse_request()\n            self.command = self.command\n        except Exception as e:\n            self.error_code = 400\n            self.error_message = str(e)\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn = None\n        self.host = None\n        self.port = 0\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        if port == 0:\n            port = self.find_available_port(host)\n        self.socket.bind((host, port))\n        self.socket.listen(5)\n        self.host = host\n        self.port = port\n        self.bound = True\n\n    def find_available_port(self, host):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.bind((host, 0))\n            return s.getsockname()[1]\n\n    def open(self, timeout=30):\n        if not self.bound:\n            raise IOError(\"Server is not bound to an address\")\n        self.socket.settimeout(timeout)\n        try:\n            self.conn, addr = self.socket.accept()\n            self.conn.settimeout(timeout)\n            request_text = self.conn.recv(65535)\n            return HTTPRequest(request_text)\n        except socket.timeout:\n            raise IOError(\"Connection timed out\")\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError(\"No active connection\")\n        try:\n            self.conn.sendall(data)\n        except Exception as e:\n            raise IOError(f\"Error sending data: {e}\")\n\n    def close(self, client_only=False):\n        if self.conn:\n            self.conn.close()\n            self.conn = None\n        if not client_only and self.socket:\n            self.socket.close()\n            self.socket = None\n            self.bound = False"
  },
  {
    "Task_id": 405,
    "Instruction": "Task Description: Create a TCP server implementation in Python that can handle client connections, send/receive data, and manage socket resources properly. The implementation should support both TCP and Unix domain sockets, with proper error handling and cleanup.\n\nClass Description: FakeBroker is a class that simulates a message broker server capable of handling client connections over TCP or Unix domain sockets. It provides methods to start listening, accept connections, send/receive data, and clean up resources.\n\nAttributes:\n- _sock: [socket.socket] - The underlying socket object used for listening\n- _conn: [socket.socket] - The active client connection socket\n- port: [int] - The port number the server is bound to (for TCP)\n- transport: [str] - The transport type ('tcp' or 'unix')\n\nMethods:\n- __init__(transport: str = \"tcp\") -> None - Initializes the server with specified transport type (TCP or Unix domain socket)\n- start() -> None - Starts listening and accepts a client connection\n- finish() -> None - Closes all connections and cleans up resources\n- receive_packet(num_bytes: int) -> bytes - Receives specified number of bytes from client\n- send_packet(packet_out: bytes) -> int - Sends data to the connected client, returns number of bytes sent\n\nTask Description: Create a threaded TCP server implementation in Python that can handle multiple client connections simultaneously using Python's socketserver framework.\n\nClass Description: FakeWebsocketBroker is a threaded TCP server implementation that extends threading.Thread to run a server in a separate thread. It uses ThreadedTCPServer to handle multiple client connections concurrently.\n\nAttributes:\n- host: [str] - The host address to bind to (default 'localhost')\n- port: [int] - The port number the server is bound to\n- _server: [ThreadedTCPServer] - The underlying threaded TCP server instance\n- _running: [bool] - Flag indicating if the server is running\n- handler_cls: [bool/class] - The request handler class for the server\n\nMethods:\n- __init__() -> None - Initializes the threaded server\n- serve(tcphandler: class) -> contextmanager - Context manager that starts the server with given handler class\n- run() -> None - Thread entry point that starts serving requests",
    "Canonical_solution": "import socket\nimport os\nimport threading\nimport socketserver\n\nclass FakeBroker:\n    def __init__(self, transport=\"tcp\"):\n        if transport == \"tcp\":\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            sock.bind((\"localhost\", 0))\n            self.port = sock.getsockname()[1]\n        elif transport == \"unix\":\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            sock.bind(\"localhost\")\n            self.port = 1883\n        else:\n            raise ValueError(f\"unsupported transport {transport}\")\n\n        sock.settimeout(5)\n        sock.listen(1)\n\n        self._sock = sock\n        self._conn = None\n        self.transport = transport\n\n    def start(self):\n        if self._sock is None:\n            raise ValueError('Socket is not open')\n\n        (conn, address) = self._sock.accept()\n        conn.settimeout(5)\n        self._conn = conn\n\n    def finish(self):\n        if self._conn is not None:\n            self._conn.close()\n            self._conn = None\n\n        if self._sock is not None:\n            self._sock.close()\n            self._sock = None\n\n        if self.transport == 'unix':\n            try:\n                os.unlink('localhost')\n            except OSError:\n                pass\n\n    def receive_packet(self, num_bytes):\n        if self._conn is None:\n            raise ValueError('Connection is not open')\n\n        packet_in = self._conn.recv(num_bytes)\n        return packet_in\n\n    def send_packet(self, packet_out):\n        if self._conn is None:\n            raise ValueError('Connection is not open')\n\n        count = self._conn.send(packet_out)\n        return count\n\nclass ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n    pass\n\nclass FakeWebsocketBroker(threading.Thread):\n    def __init__(self):\n        super().__init__()\n        self.host = \"localhost\"\n        self.port = -1\n        self._server = None\n        self._running = True\n        self.handler_cls = False\n\n    @contextlib.contextmanager\n    def serve(self, tcphandler):\n        self._server = ThreadedTCPServer((self.host, 0), tcphandler)\n        try:\n            self.start()\n            self.port = self._server.server_address[1]\n            if not self._running:\n                raise RuntimeError(\"Error starting server\")\n            yield\n        finally:\n            if self._server:\n                self._server.shutdown()\n                self._server.server_close()\n\n    def run(self):\n        self._running = True\n        self._server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nfrom socketserver import BaseRequestHandler, ThreadedTCPServer\nfrom contextlib import contextmanager\n\nclass FakeBroker:\n    def __init__(self, transport: str = \"tcp\"):\n        self._sock = None\n        self._conn = None\n        self.port = 0\n        self.transport = transport\n\n    def start(self):\n        if self.transport == 'tcp':\n            self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.port = 12345\n            self._sock.bind(('localhost', self.port))\n            self._sock.listen(1)\n            print(f\"TCP server started on port {self.port}\")\n        elif self.transport == 'unix':\n            self._sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            socket_path = '/tmp/fakebroker.sock'\n            try:\n                self._sock.bind(socket_path)\n                self._sock.listen(1)\n                print(f\"Unix domain server started on {socket_path}\")\n            except socket.error as e:\n                print(f\"Error binding to Unix socket: {e}\")\n                return\n        else:\n            raise ValueError(\"Unsupported transport type\")\n\n        self._conn, addr = self._sock.accept()\n        print(f\"Connection from {addr}\")\n\n    def finish(self):\n        if self._conn:\n            self._conn.close()\n        if self._sock:\n            self._sock.close()\n        print(\"Server closed\")\n\n    def receive_packet(self, num_bytes: int) -> bytes:\n        try:\n            return self._conn.recv(num_bytes)\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            return b''\n\n    def send_packet(self, packet_out: bytes) -> int:\n        try:\n            return self._conn.send(packet_out)\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n            return 0\n\nclass FakeWebsocketBroker(threading.Thread):\n    def __init__(self, host: str = 'localhost', port: int = 8080):\n        super().__init__()\n        self.host = host\n        self.port = port\n        self._server = None\n        self._running = False\n        self.handler_cls = None\n\n    def run(self):\n        self._running = True\n        self._server.serve_forever()\n\n    @contextmanager\n    def serve(self, tcphandler):\n        self.handler_cls = tcphandler\n        self._server = ThreadedTCPServer((self.host, self.port), self.handler_cls)\n        self.start()\n        try:\n            yield self\n        finally:\n            self._server.shutdown()\n            self._server.server_close()\n            self._running = False"
  },
  {
    "Task_id": 406,
    "Instruction": "Task Description: Implement a TCP forwarding server that acts as an intermediary between client connections and a remote device, facilitating bidirectional communication between them.\n\nClass Description: TCPForwardServer is a class that establishes a TCP server to forward traffic between connected clients and a remote device. It manages multiple client connections simultaneously using select-based I/O multiplexing and maintains channel mappings between client and device sockets.\n\nAttributes:\n- input_list: List[socket.socket] - List of sockets being monitored for incoming data\n- channel: Dict[socket.socket, socket.socket] - Mapping between client and device sockets\n- _server: socket.socket - The main server socket accepting client connections\n- _rdev: Device - The remote device to connect to\n- _rport: int - The port number on the remote device\n- BUFFER_SIZE: int - Size of the data buffer for socket operations\n- DELAY: float - Delay between select operations in seconds\n\nMethods:\n- __init__(lhost: str, lport: int, rdev: Device, rport: int) -> None - Initializes the TCP forwarding server with local host/port and remote device/port information\n- main_loop() -> None - Main server loop that handles incoming connections and data using select\n- on_accept() -> None - Handles new client connections and establishes corresponding device connections\n- on_close() -> None - Cleans up resources when a connection is closed\n- on_recv() -> None - Handles incoming data by forwarding it to the corresponding channel",
    "Canonical_solution": "import socket\nimport select\nimport time\nfrom typing import Dict\n\nclass TCPForwardServer:\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int):\n        self.input_list = []\n        self.channel: Dict[socket.socket, socket.socket] = {}\n        \n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen(200)\n        self._rdev = rdev\n        self._rport = rport\n        self.BUFFER_SIZE = 4096\n        self.DELAY = 0.0001\n    \n    def main_loop(self):\n        self.input_list.append(self._server)\n        while True:\n            time.sleep(self.DELAY)\n            inputready, _, _ = select.select(self.input_list, [], [])\n            for self.s in inputready:\n                if self.s == self._server:\n                    self.on_accept()\n                    break\n                self.data = self.s.recv(self.BUFFER_SIZE)\n                if len(self.data) == 0:\n                    self.on_close()\n                else:\n                    self.on_recv()\n\n    def on_accept(self):\n        try:\n            sock_proxy = self._rdev.create_inner_connection(self._rport)\n            devicesock = sock_proxy.get_socket()\n        except Exception:\n            devicesock = None\n\n        clientsock, clientaddr = self._server.accept()\n        if devicesock:\n            print(clientaddr, \"has connected\")\n            self.input_list.append(clientsock)\n            self.input_list.append(devicesock)\n            self.channel[clientsock] = devicesock\n            self.channel[devicesock] = clientsock\n        else:\n            print(\"Can't establish connection with device inner server.\")\n            print(\"Closing connection with client side\", clientaddr)\n            clientsock.close()\n        \n    def on_close(self):\n        print(self.s.getpeername(), \"has disconnected\")\n        self.input_list.remove(self.s)\n        self.input_list.remove(self.channel[self.s])\n        out = self.channel[self.s]\n        self.channel[out].close()\n        self.channel[self.s].close()\n        del self.channel[out]\n        del self.channel[self.s]\n    \n    def on_recv(self):\n        data = self.data\n        self.channel[self.s].send(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\nfrom typing import List, Dict\n\nclass TCPForwardServer:\n    def __init__(self, lhost: str, lport: int, rdev: object, rport: int):\n        self.input_list = []\n        self.channel = {}\n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen(5)\n        self._rdev = rdev\n        self._rport = rport\n        self.BUFFER_SIZE = 4096\n        self.DELAY = 0.1\n        self.input_list.append(self._server)\n\n    def main_loop(self):\n        while True:\n            readable, _, _ = select.select(self.input_list, [], [], self.DELAY)\n            for sock in readable:\n                if sock == self._server:\n                    self.on_accept()\n                elif sock in self.channel:\n                    self.on_recv(sock)\n                else:\n                    self.on_close(sock)\n\n    def on_accept(self):\n        client, addr = self._server.accept()\n        print(f\"Accepted connection from {addr}\")\n        try:\n            device = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            device.connect((self._rdev.get_ip(), self._rport))\n            print(f\"Connected to remote device at {self._rdev.get_ip()}:{self._rport}\")\n            self.input_list.append(client)\n            self.input_list.append(device)\n            self.channel[client] = device\n            self.channel[device] = client\n        except Exception as e:\n            print(f\"Failed to connect to remote device: {e}\")\n            client.close()\n\n    def on_recv(self, sock):\n        try:\n            data = sock.recv(self.BUFFER_SIZE)\n            if data:\n                other = self.channel[sock]\n                other.send(data)\n            else:\n                self.on_close(sock)\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            self.on_close(sock)\n\n    def on_close(self, sock):\n        try:\n            other = self.channel[sock]\n            other.close()\n            del self.channel[other]\n            self.input_list.remove(other)\n        except:\n            pass\n        try:\n            self.input_list.remove(sock)\n            sock.close()\n        except:\n            pass"
  },
  {
    "Task_id": 407,
    "Instruction": "Task Description: Implement a TCP server using Python's socket module with asynchronous I/O operations managed by a custom scheduler. The server should handle multiple client connections, echo received data back to clients, and properly manage socket resources.\n\nClass Description: The implementation consists of several classes that work together to create an asynchronous TCP server. The main classes include Socket (a wrapper for socket operations), ReadSocket/WriteSocket/AcceptSocket (operation handlers), and EchoServer (the main server logic).\n\nAttributes:\n\n- Socket._sock: socket.socket - The underlying socket object being wrapped\n- ReadSocket.sock: socket.socket - The socket to read from\n- ReadSocket.nbytes: int - Maximum bytes to read\n- WriteSocket.sock: socket.socket - The socket to write to\n- WriteSocket.data: bytes - Data to be sent\n- AcceptSocket.sock: socket.socket - The socket to accept connections from\n- EchoServer.sched: object - The scheduler instance managing tasks\n\nMethods:\n\n- Socket.__init__(sock: socket.socket) -> None - Initialize with a socket object\n- Socket.recv(maxbytes: int) -> ReadSocket - Create a read operation\n- Socket.send(data: bytes) -> WriteSocket - Create a write operation\n- Socket.accept() -> AcceptSocket - Create an accept operation\n- Socket.__getattr__(name: str) -> Any - Proxy attribute access to underlying socket\n- ReadSocket.handle_yield(sched: object, task: object) -> None - Register read operation with scheduler\n- ReadSocket.handle_resume(sched: object, task: object) -> None - Complete read operation\n- WriteSocket.handle_yield(sched: object, task: object) -> None - Register write operation with scheduler\n- WriteSocket.handle_resume(sched: object, task: object) -> None - Complete write operation\n- AcceptSocket.handle_yield(sched: object, task: object) -> None - Register accept operation with scheduler\n- AcceptSocket.handle_resume(sched: object, task: object) -> None - Complete accept operation\n- EchoServer.__init__(addr: tuple, sched: object) -> None - Initialize server with address and scheduler\n- EchoServer.server_loop(addr: tuple) -> generator - Main server loop accepting connections\n- EchoServer.client_handler(client: Socket) -> generator - Handle client communication",
    "Canonical_solution": "from collections import deque\nfrom select import select\nfrom socket import socket, AF_INET, SOCK_STREAM\n\nclass Socket:\n    def __init__(self, sock):\n        self._sock = sock\n    \n    def recv(self, maxbytes):\n        return ReadSocket(self._sock, maxbytes)\n    \n    def send(self, data):\n        return WriteSocket(self._sock, data)\n    \n    def accept(self):\n        return AcceptSocket(self._sock)\n    \n    def __getattr__(self, name):\n        return getattr(self._sock, name)\n\nclass ReadSocket:\n    def __init__(self, sock, nbytes):\n        self.sock = sock\n        self.nbytes = nbytes\n    \n    def handle_yield(self, sched, task):\n        sched._read_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        data = self.sock.recv(self.nbytes)\n        sched.add_ready(task, data)\n\nclass WriteSocket:\n    def __init__(self, sock, data):\n        self.sock = sock\n        self.data = data\n    \n    def handle_yield(self, sched, task):\n        sched._write_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        nsent = self.sock.send(self.data)\n        sched.add_ready(task, nsent)\n\nclass AcceptSocket:\n    def __init__(self, sock):\n        self.sock = sock\n    \n    def handle_yield(self, sched, task):\n        sched._read_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        r = self.sock.accept()\n        sched.add_ready(task, r)\n\nclass EchoServer:\n    def __init__(self, addr, sched):\n        self.sched = sched\n        sched.new(self.server_loop(addr))\n    \n    def server_loop(self, addr):\n        s = Socket(socket(AF_INET, SOCK_STREAM))\n        s.bind(addr)\n        s.listen(5)\n        while True:\n            c, a = yield s.accept()\n            print('Got connection from', a)\n            self.sched.new(self.client_handler(Socket(c)))\n    \n    def client_handler(self, client):\n        while True:\n            line = yield from readline(client)\n            if not line:\n                break\n            line = b'GOT:' + line\n            while line:\n                nsent = yield client.send(line)\n                line = line[nsent:]\n        client.close()\n        print('Client closed')",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\nimport sys\n\nclass Socket:\n    def __init__(self, sock):\n        self._sock = sock\n\n    def recv(self, maxbytes):\n        return ReadSocket(self._sock, maxbytes)\n\n    def send(self, data):\n        return WriteSocket(self._sock, data)\n\n    def accept(self):\n        return AcceptSocket(self._sock)\n\n    def __getattr__(self, name):\n        return getattr(self._sock, name)\n\nclass ReadSocket:\n    def __init__(self, sock, nbytes):\n        self.sock = sock\n        self.nbytes = nbytes\n        self.data = None\n\n    def handle_yield(self, sched, task):\n        sched.waiting.append(task)\n        sched.selectable[self.sock].append(task)\n\n    def handle_resume(self, sched, task):\n        self.data = self.sock.recv(self.nbytes)\n        if not self.data:\n            self.data = b''\n        task.send(self.data)\n\nclass WriteSocket:\n    def __init__(self, sock, data):\n        self.sock = sock\n        self.data = data\n        self.bytes_sent = 0\n\n    def handle_yield(self, sched, task):\n        sched.waiting.append(task)\n        sched.selectable[self.sock].append(task)\n\n    def handle_resume(self, sched, task):\n        self.bytes_sent += self.sock.send(self.data[self.bytes_sent:])\n        if self.bytes_sent == len(self.data):\n            task.send(None)\n        else:\n            task.send(self.bytes_sent)\n\nclass AcceptSocket:\n    def __init__(self, sock):\n        self.sock = sock\n\n    def handle_yield(self, sched, task):\n        sched.waiting.append(task)\n        sched.selectable[self.sock].append(task)\n\n    def handle_resume(self, sched, task):\n        client, addr = self.sock.accept()\n        task.send((Socket(client), addr))\n\nclass Scheduler:\n    def __init__(self):\n        self.waiting = []\n        self.selectable = {}\n\n    def run(self):\n        while self.waiting or self.selectable:\n            for task in self.waiting:\n                try:\n                    next(task)\n                except StopIteration:\n                    pass\n            readable, writable, _ = select.select(self.selectable.keys(), [], [])\n            for s in readable:\n                for task in self.selectable[s]:\n                    task.send(s)\n\nclass EchoServer:\n    def __init__(self, addr, sched):\n        self.sched = sched\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.server_socket.bind(addr)\n        self.server_socket.listen(5)\n        self.server_socket.setblocking(0)\n\n    def server_loop(self, addr):\n        sock = Socket(self.server_socket)\n        while True:\n            yield from sock.accept()\n            client, addr = yield\n            self.sched.new_task(self.client_handler(client))\n\n    def client_handler(self, client):\n        while True:\n            data = yield from client.recv(1024)\n            if not data:\n                break\n            yield from client.send(data)\n        client.close()"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Python class that implements an asynchronous HTTP client for interacting with a REST API, supporting PUT and GET operations for question-answer pairs.\n\nClass Description: The Client class provides asynchronous HTTP communication capabilities using httpx and asyncio. It handles JSON data exchange with a REST API endpoint, allowing storage (PUT) and retrieval (GET) of question-answer pairs.\n\nAttributes:\n_uri: str - The base URI of the REST API endpoint (default: \"http://localhost:8000\")\n_CLIENT_HEADER: dict - Static dictionary containing HTTP headers for JSON content type\n\nMethods:\n_put: async (question: str, answer: str) -> int - Internal async method that sends a question-answer pair to the API via POST request. Returns HTTP status code.\n_get: async (question: str) -> str - Internal async method that retrieves an answer for a given question via POST request. Returns the answer string or None.\nput: (question: str, answer: str) -> int - Synchronous wrapper for _put that runs the async operation. Returns HTTP status code.\nget: (question: str) -> str - Synchronous wrapper for _get that runs the async operation. Returns the answer string or None.",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\n_CLIENT_HEADER = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\nclass Client:\n    def __init__(self, uri: str = \"http://localhost:8000\"):\n        self._uri = uri\n\n    async def _put(self, question: str, answer: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n                \"answer\": answer,\n            }\n            response = await client.post(\n                f\"{self._uri}/put\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.status_code\n\n    async def _get(self, question: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n            }\n            response = await client.post(\n                f\"{self._uri}/get\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.json().get(\"answer\")\n\n    def put(self, question: str, answer: str):\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str):\n        return asyncio.run(self._get(question))",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nclass Client:\n    _uri: str = \"http://localhost:8000\"\n    _CLIENT_HEADER: dict = {\"Content-Type\": \"application/json\"}\n\n    async def _put(self, question: str, answer: str) -> int:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                f\"{self._uri}/store\",\n                json={\"question\": question, \"answer\": answer},\n                headers=self._CLIENT_HEADER\n            )\n            return response.status_code\n\n    async def _get(self, question: str) -> str:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                f\"{self._uri}/retrieve\",\n                json={\"question\": question},\n                headers=self._CLIENT_HEADER\n            )\n            if response.status_code == 200:\n                return response.json().get(\"answer\")\n            return None\n\n    def put(self, question: str, answer: str) -> int:\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str) -> str:\n        return asyncio.run(self._get(question))"
  },
  {
    "Task_id": 412,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and process incoming messages asynchronously.\n\nClass Description: The solution consists of two classes: ReceiveMsgSocketServer (a request handler) and SocketServerManager (a server manager). The handler processes incoming messages and the manager controls server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen\nrequest_handler: class - The handler class for processing client requests\nserver: socketserver.ThreadingTCPServer - The TCP server instance\nserver_thread: threading.Thread - The thread running the server (when not in main thread)\n\nMethods:\n\nReceiveMsgSocketServer.handle() -> None - Processes client requests, receives messages, and sends responses\nReceiveMsgSocketServer.msg_callback(msg: dict) -> None - Static method to handle received messages (default prints messages)\nSocketServerManager.start_server(main_thread: bool = True) -> int or None - Starts the server, returns thread ID if not in main thread\nSocketServerManager.stop_server() -> None - Stops the server and cleans up resources",
    "Canonical_solution": "import ctypes\nimport json\nimport socketserver\nimport threading\n\nclass ReceiveMsgSocketServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgSocketServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n\n    @staticmethod\n    def msg_callback(msg):\n        print(msg)\n\nclass SocketServerManager:\n    def __init__(self, port: int = 10808, request_handler=ReceiveMsgSocketServer):\n        self.port = port\n        self.request_handler = request_handler\n        self.server = None\n        self.server_thread = None\n\n    def start_server(self, main_thread: bool = True) -> int or None:\n        ip_port = (\"127.0.0.1\", self.port)\n        try:\n            self.server = socketserver.ThreadingTCPServer(ip_port, self.request_handler)\n            if main_thread:\n                self.server.serve_forever()\n            else:\n                self.server_thread = threading.Thread(target=self.server.serve_forever)\n                self.server_thread.setDaemon(True)\n                self.server_thread.start()\n                return self.server_thread.ident\n        except KeyboardInterrupt:\n            pass\n        except Exception as e:\n            print(e)\n        return None\n\n    def stop_server(self):\n        if self.server:\n            self.server.shutdown()\n        if self.server_thread:\n            self.server_thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\n\nclass ReceiveMsgSocketServer(socketserver.BaseRequestHandler):\n    @staticmethod\n    def msg_callback(msg: dict) -> None:\n        print(f\"Received message: {msg}\")\n\n    def handle(self) -> None:\n        while True:\n            try:\n                data = self.request.recv(1024)\n                if not data:\n                    break\n                msg = data.decode('utf-8')\n                self.msg_callback({\"data\": msg, \"client_address\": self.client_address})\n                self.request.sendall(b\"Message received\")\n            except Exception as e:\n                print(f\"Error handling client {self.client_address}: {e}\")\n                break\n\nclass SocketServerManager:\n    def __init__(self, port: int, request_handler: type):\n        self.port = port\n        self.request_handler = request_handler\n        self.server = None\n        self.server_thread = None\n\n    def start_server(self, main_thread: bool = True) -> int or None:\n        self.server = socketserver.ThreadingTCPServer((\"localhost\", self.port), self.request_handler)\n        if not main_thread:\n            self.server_thread = threading.Thread(target=self.server.serve_forever)\n            self.server_thread.start()\n            return self.server_thread.ident\n        else:\n            self.server.serve_forever()\n\n    def stop_server(self) -> None:\n        if self.server:\n            self.server.shutdown()\n            self.server.server_close()\n        if self.server_thread:\n            self.server_thread.join()"
  },
  {
    "Task_id": 413,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle incoming client connections, process JSON messages, and interact with a WeChat robot COM object for message processing and user information retrieval.\n\nClass Description: ReceiveMsgBaseServer is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles client connections, processes incoming JSON messages, and interacts with a WeChat robot COM object to enrich message data with user information.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes beyond the inherited ones from BaseRequestHandler)\n\nMethods:\n- __init__(*args, **kwargs) -> None - Initializes the base request handler\n- handle() -> None - Main method that processes client connections, receives and parses JSON messages, and calls the message callback\n- msg_callback(msg: dict) -> None - Static method that processes the received message by interacting with WeChat robot COM objects to enrich message data with user information\n\nFunction Description: start_socket_server creates and starts a threaded TCP server that uses the ReceiveMsgBaseServer handler to process client connections.\n\nInput:\n- port: int (default=10808) - The port number to bind the server to\n- request_handler: class (default=ReceiveMsgBaseServer) - The request handler class to use\n- main_thread: bool (default=True) - Whether to run the server in the main thread or a daemon thread\n\nOutput:\n- int or None - Returns the thread identifier if main_thread=False, otherwise None (runs forever in main thread)",
    "Canonical_solution": "import socketserver\nimport threading\nimport comtypes\nimport json\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        comtypes.CoInitialize()\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgBaseServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n        comtypes.CoUninitialize()\n\n    @staticmethod\n    def msg_callback(msg):\n        robot = comtypes.client.CreateObject(\"WeChatRobot.CWeChatRobot\")\n        event = comtypes.client.CreateObject(\"WeChatRobot.RobotEvent\")\n        wx = WeChatRobot(msg['pid'], robot, event)\n        userinfo = wx.GetWxUserInfo(msg['wxid'])\n        msg['alias'] = userinfo['wxNumber']\n        if msg['isSendMsg'] == 0:\n            if '@chatroom' in msg['sender']:\n                chatroom_info = wx.GetWxUserInfo(msg['sender'])\n                msg['chatroom_name'] = chatroom_info['wxNickName']\n                msg['nickname'] = wx.GetChatRoomMemberNickname(msg['sender'], msg['wxid'])\n            else:\n                msg['nickname'] = userinfo['wxNickName']\n        print(msg)\n        robot.Release()\n        event.Release()\n\ndef start_socket_server(port: int = 10808,\n                       request_handler: 'ReceiveMsgBaseServer' = ReceiveMsgBaseServer,\n                       main_thread=True) -> int or None:\n    ip_port = (\"127.0.0.1\", port)\n    try:\n        s = socketserver.ThreadingTCPServer(ip_port, request_handler)\n        if main_thread:\n            s.serve_forever()\n        else:\n            socket_server = threading.Thread(target=s.serve_forever)\n            socket_server.setDaemon(True)\n            socket_server.start()\n            return socket_server.ident\n    except KeyboardInterrupt:\n        pass\n    except Exception as e:\n        print(e)\n    return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport json\nimport threading\nimport comtypes.client\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            try:\n                data = self.request.recv(1024)\n                if not data:\n                    break\n                msg = json.loads(data.decode('utf-8'))\n                self.msg_callback(msg)\n            except Exception as e:\n                print(f\"Error handling message: {e}\")\n                break\n\n    @staticmethod\n    def msg_callback(msg):\n        try:\n            wx_robot = comtypes.client.CreateObject(\"WeChatRobot.WeChatRobot\")\n            user_info = wx_robot.GetUserProfileInfo(msg['FromUserName'])\n            msg['UserInfo'] = user_info\n            print(f\"Processed message: {msg}\")\n        except Exception as e:\n            print(f\"Error interacting with WeChat robot: {e}\")\n\ndef start_socket_server(port=10808, request_handler=ReceiveMsgBaseServer, main_thread=True):\n    class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n        pass\n\n    server = ThreadedTCPServer(('localhost', port), request_handler)\n    if main_thread:\n        server.serve_forever()\n    else:\n        thread = threading.Thread(target=server.serve_forever)\n        thread.start()\n        return thread.ident"
  },
  {
    "Task_id": 415,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client requests with proper data framing and error handling.\n\nClass Description: TCPRequestHandler is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles TCP client connections by implementing methods to receive and send framed data, and processes client requests in the handle() method.\n\nAttributes:\n- request: [socket.socket] - The client connection socket object inherited from BaseRequestHandler\n- client_address: [tuple] - The client address (host, port) inherited from BaseRequestHandler\n- server: [socketserver.BaseServer] - The server instance inherited from BaseRequestHandler\n\nMethods:\n- get_data() -> bytes - Receives and validates framed data from the client. The data is expected to be prefixed with a 2-byte big-endian size field.\n  Input: None\n  Output: bytes - The received payload data (without size prefix)\n  \n- send_data(data: bytes) -> None - Sends framed data to the client by prefixing the payload with a 2-byte big-endian size field.\n  Input: data [bytes] - The payload data to send\n  Output: None\n  \n- handle() -> None - Main request handling method that coordinates receiving and processing client data.\n  Input: None\n  Output: None\n\nClass Description: DNSServer is a server management class that creates and manages TCP/UDP server instances for handling DNS requests.\n\nAttributes:\n- port: [int] - The port number to listen on (default: 53)\n- use_tcp: [bool] - Flag to enable TCP server (default: True)\n- use_udp: [bool] - Flag to enable UDP server (default: False)\n- servers: [list] - List of active server instances\n\nMethods:\n- __init__(port: int = 53, use_tcp: bool = True, use_udp: bool = False) -> None - Initializes the server configuration.\n  Input: \n    port [int] - Server port number\n    use_tcp [bool] - Enable TCP server\n    use_udp [bool] - Enable UDP server\n  Output: None\n  \n- start() -> None - Starts the configured servers in separate threads.\n  Input: None\n  Output: None\n  \n- shutdown() -> None - Shuts down all running server instances.\n  Input: None\n  Output: None",
    "Canonical_solution": "import socketserver\nimport struct\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self):\n        data = self.request.recv(8192).strip()\n        sz = struct.unpack('>H', data[:2])[0]\n        if sz < len(data) - 2:\n            raise Exception(\"Wrong size of TCP packet\")\n        elif sz > len(data) - 2:\n            raise Exception(\"Too big TCP packet\")\n        return data[2:]\n\n    def send_data(self, data):\n        sz = struct.pack('>H', len(data))\n        return self.request.sendall(sz + data)\n\n    def handle(self):\n        try:\n            data = self.get_data()\n            self.send_data(dns_response(data))\n        except Exception:\n            pass\n\nclass DNSServer:\n    def __init__(self, port=53, use_tcp=True, use_udp=False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            self.servers.append(socketserver.ThreadingTCPServer(('', self.port), TCPRequestHandler))\n        if self.use_udp:\n            self.servers.append(socketserver.ThreadingUDPServer(('', self.port), UDPRequestHandler))\n\n        for s in self.servers:\n            thread = threading.Thread(target=s.serve_forever)\n            thread.daemon = True\n            thread.start()\n\n    def shutdown(self):\n        for s in self.servers:\n            s.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self):\n        try:\n            size = self.request.recv(2)\n            if not size:\n                return None\n            size = int.from_bytes(size, byteorder='big')\n            data = self.request.recv(size)\n            if len(data) != size:\n                raise ValueError(\"Incomplete data received\")\n            return data\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            return None\n\n    def send_data(self, data):\n        try:\n            size = len(data)\n            self.request.sendall(size.to_bytes(2, byteorder='big'))\n            self.request.sendall(data)\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n\n    def handle(self):\n        data = self.get_data()\n        if data is None:\n            print(\"No data received\")\n            return\n        print(f\"Received data from {self.client_address}: {data}\")\n        self.send_data(b\"ACK\")\n\nclass DNSServer:\n    def __init__(self, port=53, use_tcp=True, use_udp=False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            server = socketserver.ThreadingTCPServer(( '', self.port ), TCPRequestHandler)\n            server_thread = threading.Thread(target=server.serve_forever)\n            server_thread.daemon = True\n            server_thread.start()\n            self.servers.append(server)\n        if self.use_udp:\n            pass  # UDP implementation can be added here if needed\n        print(f\"Server started on port {self.port} (TCP: {self.use_tcp}, UDP: {self.use_udp})\")\n\n    def shutdown(self):\n        for server in self.servers:\n            server.shutdown()\n            server.server_close()\n        print(\"Server shutdown complete\")"
  },
  {
    "Task_id": 416,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and echo back received messages.\n\nClass Description: The solution consists of two classes: EchoHandler for processing client requests and TCPServerWrapper for managing the TCP server instance.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Processes client requests by continuously receiving messages and echoing them back until connection is closed\n- TCPServerWrapper.__init__(host: str = '', port: int = 20000) -> None - Initializes the TCP server with given host and port\n- TCPServerWrapper.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing status information",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass TCPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass TCPServerWrapper:\n    def __init__(self, host: str = '', port: int = 20000):\n        self.host = host\n        self.port = port\n        self.server = socketserver.TCPServer((self.host, self.port), EchoHandler)\n        print(f\"Server started on {self.host}:{self.port}\")\n\n    def serve_forever(self):\n        self.server.serve_forever()"
  },
  {
    "Task_id": 417,
    "Instruction": "Task Description: Implement a TCP server in Python using the socketserver module to handle client requests, process data, and send responses back to the client.\n\nClass Description: The TCPServer class initializes and manages a TCP server that listens for client connections, processes incoming data, and sends appropriate responses. The EchoRequestHandler class handles individual client requests by processing received data and generating responses.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections.\n- server: socketserver.TCPServer - The instance of the TCP server that handles client connections.\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCPServer instance with the specified port number.\n- start() -> None - Starts the TCP server, binds it to 'localhost' and the specified port, and begins listening for client connections indefinitely.\n- stop() -> None - Shuts down the TCP server if it is running.\n\nClass Description: The EchoRequestHandler class inherits from socketserver.BaseRequestHandler and defines how to handle incoming client requests.\n\nMethods:\n- handle() -> None - Processes the client's request by receiving data, decoding it, and performing actions based on the received data (either learning or classifying). It then sends a response back to the client. The method uses the following steps:\n  1. Receives data from the client using recv().\n  2. Decodes the data from UTF-8 format.\n  3. Parses the data to extract group and filename.\n  4. Depending on the presence of a filename, either performs a learning operation or a classification operation.\n  5. Encodes the result as JSON and sends it back to the client using send().",
    "Canonical_solution": "import json\nimport socketserver\nimport pickle\nimport numpy\nfrom random import shuffle\n\nclass EchoRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024)\n        data = data.decode('utf-8').strip()\n        print(\"received data:'%s'\" % data)\n        group = data.split('=')[0].strip()\n        filename = data.split('=')[1].strip()\n        payload = \"error\".encode('utf-8')\n        if len(group) == 0:\n            self.request.send(payload)\n            return\n        randomF = RF()\n        if len(filename) == 0:\n            payload = json.dumps(randomF.learn(group, 0.9)).encode('utf-8')\n        else:\n            payload = json.dumps(\n                randomF.classify(\n                    group,\n                    filename +\n                    \".rftemp\")).encode('utf-8')\n        self.request.send(payload)\n        return\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = port\n        self.server = None\n\n    def start(self):\n        socketserver.TCPServer.allow_reuse_address = True\n        address = ('localhost', self.port)\n        self.server = socketserver.TCPServer(address, EchoRequestHandler)\n        self.server.serve_forever()\n\n    def stop(self):\n        if self.server:\n            self.server.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport json\n\nclass EchoRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024)\n        if not data:\n            return\n        message = data.decode('utf-8')\n        group, filename = message.split(' ', 1)\n        result = {\"status\": \"success\", \"group\": group, \"filename\": filename}\n        self.request.send(json.dumps(result).encode('utf-8'))\n\nclass TCPServer:\n    def __init__(self, port: int) -> None:\n        self.port = port\n        self.server = socketserver.TCPServer(('localhost', self.port), EchoRequestHandler)\n\n    def start(self) -> None:\n        self.server.serve_forever()\n\n    def stop(self) -> None:\n        self.server.shutdown()"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Create a TCP server using Python's socketserver module that echoes back any received messages to the client.\n\nClass Description: The implementation consists of two classes: EchoHandler for handling client connections and EchoServer for managing the TCP server. The EchoHandler processes incoming messages and sends them back, while EchoServer initializes and runs the server.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with the specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Handles client connections by continuously receiving messages and echoing them back until the connection is closed\n- EchoServer.__init__(host: str = '', port: int = 20000) -> None - Initializes the server with the given host and port\n- EchoServer.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing a status message",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass EchoServer:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass EchoServer:\n    def __init__(self, host: str = '', port: int = 20000):\n        self.host = host\n        self.port = port\n        self.server = socketserver.TCPServer((self.host, self.port), EchoHandler)\n        print(f\"Server started on {self.host}:{self.port}\")\n\n    def serve_forever(self):\n        self.server.serve_forever()"
  },
  {
    "Task_id": 419,
    "Instruction": "Task Description: Implement a TCP server using Twisted framework in Python that supports WebSocket connections, handles incoming data, and manages connection lifecycle events.\n\nClass Description: The solution consists of two classes: `HelloServerProtocol` (handles protocol-level operations) and `HelloServerFactory` (manages server configuration and startup).\n\nAttributes:\n\n- `HelloServerProtocol`:\n  - transport: [object] - Twisted transport object representing the connection\n- `HelloServerFactory`:\n  - host: [str] - Server host address (default: \"127.0.0.1\")\n  - port: [int] - Server port number (default: 9000)\n  - wrappedFactory: [object] - Twisted Factory instance for protocol handling\n  - factory: [object] - WebSocket-wrapped factory instance\n\nMethods:\n\n- `HelloServerProtocol`:\n  - connectionMade() -> None - Called when a new connection is established\n  - dataReceived(data: bytes) -> None - Called when data is received from client\n- `HelloServerFactory`:\n  - __init__(host: str = \"127.0.0.1\", port: int = 9000, enableCompression: bool = False, autoFragmentSize: int = 1024) -> None - Initializes factory with configuration\n  - start() -> None - Starts the TCP server and enters event loop",
    "Canonical_solution": "from twisted.internet.protocol import Protocol, Factory\nfrom twisted.internet import reactor\nfrom autobahn.twisted.websocket import WrappingWebSocketServerFactory\n\nclass HelloServerProtocol(Protocol):\n    def connectionMade(self):\n        print(\"connectionMade\", self.transport.getHost(), self.transport.getPeer())\n        self.transport.write('how are you?' * 100)\n\n    def dataReceived(self, data):\n        print(\"dataReceived: {}\".format(data))\n\nclass HelloServerFactory:\n    def __init__(self, host=\"127.0.0.1\", port=9000, enableCompression=False, autoFragmentSize=1024):\n        self.host = host\n        self.port = port\n        self.wrappedFactory = Factory.forProtocol(HelloServerProtocol)\n        self.factory = WrappingWebSocketServerFactory(\n            self.wrappedFactory,\n            f\"ws://{self.host}:{self.port}\",\n            enableCompression=enableCompression,\n            autoFragmentSize=autoFragmentSize\n        )\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 68,
    "right_result": "from twisted.internet import reactor, protocol\nfrom twisted.web.server import Site\nfrom twisted.web.wsgi import WSGIResource\nfrom twisted.websocket import server\n\nclass HelloServerProtocol(server.WebSocketServerProtocol):\n    def connectionMade(self):\n        print(\"Connection made\")\n\n    def dataReceived(self, data):\n        print(f\"Received data: {data}\")\n        self.sendMessage(data)\n\nclass HelloServerFactory(protocol.Factory):\n    def __init__(self, host=\"127.0.0.1\", port=9000, enableCompression=False, autoFragmentSize=1024):\n        self.host = host\n        self.port = port\n        self.enableCompression = enableCompression\n        self.autoFragmentSize = autoFragmentSize\n        self.wrappedFactory = server.WebSocketServerFactory()\n        self.factory = server.WebSocketServerFactory()\n        self.factory.protocol = HelloServerProtocol\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create an asynchronous function to send HTTP POST requests using httpx library in Python, handling JSON data and potential errors.\n\nFunction Description: The function sends an asynchronous HTTP POST request to a specified URL with JSON data, optional headers, and timeout settings. It automatically raises exceptions for non-success status codes and returns the parsed JSON response.\n\nInput:\n- url: str - The target URL for the POST request\n- data: dict - The JSON data to be sent in the request body\n- headers: dict (optional) - Additional HTTP headers to include (default: empty dict)\n- timeout: int | None (optional) - Request timeout in seconds (default: None)\n\nOutput:\n- dict - Parsed JSON response from the server if the request is successful\n- Raises httpx.HTTPStatusError if the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import json\nimport httpx\n\nasync def a_send_post_request(\n    url: str, data: dict, headers: dict = {}, timeout: int | None = None\n):\n    async with httpx.AsyncClient() as client:\n        response = await client.post(url, json=data, headers=headers, timeout=timeout)\n        response.raise_for_status()\n        return response.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def send_post_request(url: str, data: dict, headers: dict = None, timeout: int = None) -> dict:\n    async with httpx.AsyncClient(timeout=timeout) as client:\n        response = await client.post(url, json=data, headers=headers)\n        response.raise_for_status()\n        return response.json()"
  },
  {
    "Task_id": 420,
    "Instruction": "Task Description: Implement a UDP server in Python using the socketserver module to handle client requests and send responses.\n\nClass Description: The solution consists of two classes: TimeHandler (request handler) and UDPServerWrapper (server wrapper). TimeHandler processes incoming UDP requests and sends back the current time, while UDPServerWrapper manages the UDP server lifecycle.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' - all interfaces)\n- port: int - The port number to bind the server to (default: 20000)\n- server: UDPServer - The UDP server instance created with the specified host and port\n\nMethods:\n- __init__(host: str = '', port: int = 20000) -> None - Initializes the UDPServerWrapper with host and port, creates a UDPServer instance with TimeHandler\n- serve_forever() -> None - Starts the UDP server and keeps it running indefinitely to handle incoming requests\n\nThe TimeHandler class (inherits from BaseRequestHandler) contains:\n- handle() -> None - Processes each incoming request, prints client info, gets current time, and sends response back to client",
    "Canonical_solution": "from socketserver import BaseRequestHandler, UDPServer\nimport time\n\nclass TimeHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        msg, sock = self.request\n        resp = time.ctime()\n        sock.sendto(resp.encode('ascii'), self.client_address)\n\nclass UDPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = UDPServer((self.host, self.port), TimeHandler)\n\n    def serve_forever(self):\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 72,
    "right_result": "import socketserver\nfrom datetime import datetime\n\nclass TimeHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        client_ip, client_port = self.client_address\n        print(f\"Received request from {client_ip}:{client_port}\")\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        self.request.sendall(current_time.encode('utf-8'))\n\nclass UDPServerWrapper:\n    def __init__(self, host: str = '', port: int = 20000):\n        self.host = host\n        self.port = port\n        self.server = socketserver.UDPServer((self.host, self.port), TimeHandler)\n    \n    def serve_forever(self):\n        self.server.serve_forever()"
  },
  {
    "Task_id": 421,
    "Instruction": "Task Description: Create a UDP server using Twisted framework in Python that integrates with Mayavi for processing and executing received commands to manipulate 3D visualizations.\n\nClass Description: The implementation consists of two classes: M2UDP (a custom UDP protocol handler) and MayaviUDPServer (the main server class). The system receives UDP datagrams containing Python commands, executes them in a Mayavi visualization context, and renders the results.\n\nAttributes:\n\nengine: [object] - The Mayavi engine instance for visualization control\nmlab: [module] - The Mayavi mlab module for 3D visualization\nport: [int] - The UDP port number to listen on\nlogto: [file object] - Where to direct logging output\nscene: [object] - The current Mayavi scene (initialized from engine)\nproto: [M2UDP] - The protocol handler instance\n\nMethods:\n\nM2UDP.__init__: [__init__(engine=None, mlab=None)] -> [None] - Initializes the UDP protocol handler with Mayavi engine and mlab references\nM2UDP.datagramReceived: [datagramReceived(data, host_port)] -> [None] - Handles incoming UDP datagrams, executes contained Python code in Mayavi context, and triggers scene rendering\nMayaviUDPServer.__init__: [__init__(engine=None, port=9007, logto=sys.stdout)] -> [None] - Initializes the server with Mayavi engine, port configuration, and logging setup\nMayaviUDPServer.serve: [serve()] -> [None] - Starts the UDP server, binds the protocol handler, and runs the reactor loop",
    "Canonical_solution": "import sys\nimport wx\nfrom twisted.internet import wxreactor\nwxreactor.install()\nfrom twisted.internet.protocol import DatagramProtocol\nfrom twisted.internet import reactor\nfrom twisted.python import log\n\nclass M2UDP(DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n        if self.engine is not None:\n            self.scene = self.engine.current_scene.scene\n\n    def datagramReceived(self, data, host_port):\n        host, port = host_port\n        log.msg(\"Received: %r from %s:%d\" % (data, host, port))\n        c = data.strip()\n        if len(c) > 0:\n            mlab = self.mlab\n            engine = self.engine\n            scene = self.scene\n            camera = scene.camera\n            try:\n                exec(c, locals(), globals())\n            except:\n                log.err()\n            scene.render()\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        from mayavi import mlab\n        self.engine = engine or mlab.get_engine()\n        self.port = port\n        self.logto = logto\n        self.mlab = mlab\n\n    def serve(self):\n        proto = M2UDP(engine=self.engine, mlab=self.mlab)\n        \n        if self.logto is not None:\n            log.startLogging(self.logto)\n        log.msg('Serving Mayavi2 UDP server on port', self.port)\n        log.msg('Using Engine', self.engine)\n\n        reactor.registerWxApp(wx.GetApp())\n        reactor.listenUDP(self.port, proto)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 73,
    "right_result": "import sys\nfrom twisted.internet import reactor, protocol\nfrom mayavi import mlab\nfrom mayavi.core.engine import Engine\n\nclass M2UDP(protocol.DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n\n    def datagramReceived(self, data, host_port):\n        try:\n            code = data.decode('utf-8')\n            exec(code, {'engine': self.engine, 'mlab': self.mlab})\n            self.engine.render()\n        except Exception as e:\n            print(f\"Error executing command: {e}\", file=self.logto)\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        self.engine = engine or Engine()\n        self.mlab = mlab\n        self.port = port\n        self.logto = logto\n        self.scene = self.engine.scenes[0]\n        self.proto = M2UDP(engine=self.engine, mlab=self.mlab)\n\n    def serve(self):\n        reactor.listenUDP(self.port, self.proto)\n        reactor.run()"
  },
  {
    "Task_id": 423,
    "Instruction": "Task Description: Create a UDP-based relay class for HoloLens communication that handles both receiving data from HoloLens and forwarding it via ZeroMQ, as well as receiving commands from ZeroMQ and sending responses back to HoloLens.\n\nClass Description: Hololens_Relay is a class that establishes a bidirectional communication bridge between a HoloLens device (via UDP) and other processes (via ZeroMQ). It manages socket connections, message routing, and protocol handling for gaze data and calibration results.\n\nAttributes:\n- context: [zmq.Context] - ZeroMQ context for IPC communication\n- thread_pipe: [zmq.Socket] - Pipe for communicating with the worker thread\n- host: [str] - Host address for UDP binding\n- port: [str] - Port number for UDP binding\n- ipc_push_url: [str] - ZeroMQ URL for pushing messages\n- ipc_sub_url: [str] - ZeroMQ URL for subscribing to messages\n- gaze_receiver: [tuple] - Address of the current gaze data receiver\n- calib_result_receiver: [tuple] - Address of the current calibration result receiver\n\nMethods:\n- __init__(zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\") -> [None] - Initializes the relay with ZMQ context and connection URLs\n- start_server(new_address) -> [bool] - Binds the UDP socket to the specified address and starts the server\n- stop_server() -> [None] - Stops the server and cleans up resources\n- thread_loop(context, pipe) -> [None] - Main worker thread that handles message polling and routing (private method)\n- on_recv(socket, ipc_pub) -> [None] - Handles incoming UDP messages and generates appropriate responses (private method)",
    "Canonical_solution": "import socket\nimport zmq\nimport zmq_tools\nfrom pyre import zhelper\n\nclass Hololens_Relay:\n    def __init__(self, zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\"):\n        self.context = zmq_ctx\n        self.thread_pipe = zhelper.zthread_fork(self.context, self.thread_loop)\n        self.host = host\n        self.port = port\n        self.ipc_push_url = ipc_push_url\n        self.ipc_sub_url = ipc_sub_url\n        self.start_server(f\"{host}:{port}\")\n\n    def start_server(self, new_address):\n        self.thread_pipe.send_string(\"Bind\", flags=zmq.SNDMORE)\n        self.thread_pipe.send_string(new_address)\n        response = self.thread_pipe.recv_string()\n        msg = self.thread_pipe.recv_string()\n        if response == \"Bind OK\":\n            host, port = msg.split(\":\")\n            self.host = host\n            self.port = port\n            return True\n        return False\n\n    def stop_server(self):\n        self.thread_pipe.send_string(\"Exit\")\n        while self.thread_pipe:\n            pass\n\n    def thread_loop(self, context, pipe):\n        poller = zmq.Poller()\n        ipc_pub = zmq_tools.Msg_Dispatcher(context, self.ipc_push_url)\n        ipc_sub = zmq_tools.Msg_Receiver(\n            context,\n            self.ipc_sub_url,\n            (\"gaze\", \"notify.calibration.failed\", \"notify.calibration.successful\"),\n        )\n        poller.register(pipe, zmq.POLLIN)\n        poller.register(ipc_sub.socket, zmq.POLLIN)\n        remote_socket = None\n        self.gaze_receiver = None\n        self.calib_result_receiver = None\n\n        while True:\n            items = [sock for sock, _ in poller.poll()]\n            if pipe in items:\n                cmd = pipe.recv_string()\n                if cmd == \"Exit\":\n                    break\n                elif cmd == \"Bind\":\n                    new_url = pipe.recv_string()\n                    if remote_socket:\n                        poller.unregister(remote_socket)\n                        remote_socket.close()\n                    try:\n                        remote_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                        remote_socket.setblocking(False)\n                        addr, port = new_url.split(\":\")\n                        socket_addr = (addr, int(port))\n                        remote_socket.bind(socket_addr)\n                    except OSError:\n                        remote_socket = None\n                        pipe.send_string(\"Error\", flags=zmq.SNDMORE)\n                        pipe.send_string(f\"Could not bind to Socket: {new_url}\")\n                    else:\n                        pipe.send_string(\"Bind OK\", flags=zmq.SNDMORE)\n                        pipe.send_string(new_url)\n                        poller.register(remote_socket, zmq.POLLIN)\n\n            if remote_socket and remote_socket.fileno() in items:\n                self.on_recv(remote_socket, ipc_pub)\n\n            if ipc_sub.socket in items:\n                while ipc_sub.new_data:\n                    topic, payload = ipc_sub.recv()\n                    if self.gaze_receiver and remote_socket and topic.startswith(\"gaze\"):\n                        method, eye = payload[\"topic\"].split(\".\")[1:3]\n                        if method == \"2d\":\n                            data = b\"EG%s%s%s\" % (\n                                method[:1].encode(),\n                                eye.encode(),\n                                struct.pack(\"ff\", *payload[\"norm_pos\"]),\n                            )\n                        elif method == \"3d\":\n                            data = b\"EG%s%s%s\" % (\n                                method[:1].encode(),\n                                eye.encode(),\n                                struct.pack(\"fff\", *payload[\"gaze_point_3d\"]),\n                            )\n                        remote_socket.sendto(data, self.gaze_receiver)\n\n                    elif (self.calib_result_receiver and remote_socket and \n                          topic.startswith(\"notify.calibration.\")):\n                        if payload[\"subject\"] == \"calibration.successful\":\n                            remote_socket.sendto(b\"ECS\", self.calib_result_receiver)\n                            self.calib_result_receiver = None\n                        elif payload[\"subject\"] == \"calibration.failed\":\n                            remote_socket.sendto(b\"ECF\", self.calib_result_receiver)\n                            self.calib_result_receiver = None\n\n        if remote_socket:\n            remote_socket.close()\n\n    def on_recv(self, socket, ipc_pub):\n        try:\n            byte_msg, sender = socket.recvfrom(2048)\n        except OSError:\n            return\n\n        if byte_msg[:1] == b\"R\":\n            try:\n                ipc_pub.socket.send_string(\"notify.calibration.add_ref_data\", flags=zmq.SNDMORE)\n                ipc_pub.socket.send(byte_msg[1:])\n                response = b\"0R\"\n            except Exception as e:\n                response = b\"FRReference point mal-formatted or missing: %s\" % str(e).encode()\n        elif byte_msg[:1] == b\"S\":\n            self.gaze_receiver = sender\n            response = b\"0S\"\n        elif byte_msg[:1] == b\"s\":\n            self.gaze_receiver = None\n            response = b\"0s\"\n        elif byte_msg[:1] == b\"I\":\n            mode = byte_msg[1:2]\n            init_2d = mode == b\"2\"\n            calib_method = \"HMD_Calibration\" if init_2d else \"HMD_Calibration_3D\"\n            ipc_pub.notify({\"subject\": \"start_plugin\", \"name\": calib_method})\n            response = b\"0I\"\n        elif byte_msg[:1] == b\"i\":\n            response = b\"0i\"\n        elif byte_msg[:1] == b\"C\":\n            self.calib_result_receiver = sender\n            response = b\"0C\"\n        elif byte_msg[:1] == b\"c\":\n            response = b\"0c\"\n        elif byte_msg[:1] == b\"T\":\n            try:\n                target = struct.unpack(\"f\", byte_msg[1:])[0]\n                response = b\"0T\"\n            except Exception:\n                response = b\"FT'%s' cannot be converted to float.\" % (byte_msg[1])\n        elif byte_msg[:1] == b\"V\":\n            response = b\"0V%s\" % bytes(__version__)\n        else:\n            response = b'FFUnknown command. \"%s\"' % byte_msg\n\n        socket.sendto(response, sender)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\nimport zmq\n\nclass Hololens_Relay:\n    def __init__(self, zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\"):\n        self.context = zmq_ctx\n        self.thread_pipe = self.context.socket(zmq.PAIR)\n        self.host = host\n        self.port = port\n        self.ipc_push_url = ipc_push_url\n        self.ipc_sub_url = ipc_sub_url\n        self.gaze_receiver = None\n        self.calib_result_receiver = None\n        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.running = True\n\n    def start_server(self, new_address):\n        try:\n            self.host, self.port = new_address.split(\":\")\n            self.udp_socket.bind((self.host, int(self.port)))\n            thread = threading.Thread(target=self.thread_loop, args=(self.context, self.thread_pipe))\n            thread.start()\n            return True\n        except Exception as e:\n            print(f\"Failed to start server: {e}\")\n            return False\n\n    def stop_server(self):\n        self.running = False\n        self.udp_socket.close()\n        self.thread_pipe.close()\n\n    def thread_loop(self, context, pipe):\n        ipc_pub = context.socket(zmq.PUB)\n        ipc_pub.connect(self.ipc_push_url)\n        ipc_sub = context.socket(zmq.SUB)\n        ipc_sub.connect(self.ipc_sub_url)\n        ipc_sub.setsockopt(zmq.SUBSCRIBE, b'')\n\n        while self.running:\n            try:\n                if pipe.poll(100):\n                    msg = pipe.recv()\n                    if msg == b\"STOP\":\n                        break\n                if ipc_sub.poll(100):\n                    cmd = ipc_sub.recv_string()\n                    if cmd.startswith(\"GazeReceiver:\"):\n                        self.gaze_receiver = (cmd.split(\":\")[1],)\n                    elif cmd.startswith(\"CalibResultReceiver:\"):\n                        self.calib_result_receiver = (cmd.split(\":\")[1],)\n                    else:\n                        self.udp_socket.sendto(cmd.encode(), (\"127.0.0.1\", 50020))\n            except Exception as e:\n                print(f\"Thread loop error: {e}\")\n                break\n        ipc_pub.close()\n        ipc_sub.close()\n\n    def on_recv(self, socket, ipc_pub):\n        data, addr = socket.recvfrom(65535)\n        if self.gaze_receiver and addr == self.gaze_receiver:\n            ipc_pub.send_string(f\"GazeData:{data.decode()}\")\n        elif self.calib_result_receiver and addr == self.calib_result_receiver:\n            ipc_pub.send_string(f\"CalibResult:{data.decode()}\")"
  },
  {
    "Task_id": 426,
    "Instruction": "Task Description: Implement a function to receive a multicast token via UDP communication, handling potential timeouts and interruptions gracefully.\n\nFunction Description: The function continuously listens for incoming UDP packets on a specified port, attempting to extract and decode a token from valid JSON messages. It runs in a loop until either a valid token is received or a cancellation flag is set. The function handles socket timeouts and other exceptions silently, only processing valid messages that match the expected format.\n\nInput: None (uses global variables for control flow)\n\nOutput: None (modifies global variable 'multicast_token' when successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport json\nimport threading\nimport time\n\nmulticast_token = None\ncancel_flag = False\n\ndef receive_multicast_token():\n    global multicast_token, cancel_flag\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        sock.settimeout(5)\n        sock.bind(('0.0.0.0', 5000))\n        \n        while not cancel_flag:\n            try:\n                data, addr = sock.recvfrom(1024)\n                message = json.loads(data.decode('utf-8'))\n                if 'token' in message:\n                    multicast_token = message['token']\n                    break\n            except socket.timeout:\n                pass\n            except json.JSONDecodeError:\n                pass\n            except Exception:\n                pass\n            time.sleep(0.1)\n    except Exception:\n        pass\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 427,
    "Instruction": "Task Description: Implement a function that listens for a multicast token over UDP, decodes the received message, and extracts the token value.\n\nFunction Description: The function continuously listens on a specified UDP port for incoming messages containing a token. When a valid message is received, it parses the message, extracts the token, and stores it in a global variable. The function handles socket creation, binding, timeout, and cleanup, and runs in a loop until a token is received or a cancellation flag is set.\n\nInput: None (uses global variables `multicast_token` and `cancel_thread` for state management)\n\nOutput: None (updates the global variable `multicast_token` with the received token if successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\nimport time\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\n\nmulticast_token = None\ncancel_thread = False\n\ndef listen_for_multicast_token():\n    global multicast_token, cancel_thread\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind(('0.0.0.0', 5000))\n    sock.settimeout(1)\n    while not cancel_thread:\n        try:\n            data, addr = sock.recvfrom(1024)\n            message = data.decode('utf-8')\n            if message.startswith('TOKEN:'):\n                token = message.split('TOKEN:')[1].strip()\n                multicast_token = token\n                break\n        except socket.timeout:\n            continue\n    sock.close()"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Python class that acts as an adapter between OpenAI's API format and Claude's API format, handling HTTP requests asynchronously using httpx and asyncio.\n\nClass Description: The ClaudeAdapter class facilitates communication with Claude's API by converting OpenAI-style requests to Claude's format and vice versa. It handles both synchronous and streaming responses, manages API keys, and processes HTTP requests with proper error handling.\n\nAttributes:\n- claude_api_key: str - The API key for Claude's service, either from environment variables or request headers\n- claude_base_url: str - The base URL for Claude's API endpoints (default: \"https://api.anthropic.com\")\n\nMethods:\n- __init__(claude_base_url: str = \"https://api.anthropic.com\") -> None - Initializes the adapter with optional base URL configuration\n- get_api_key(headers: dict) -> str - Extracts the API key from request headers or falls back to environment variable\n- chat(request: Request) -> AsyncGenerator - Main method that handles incoming requests, converts parameters, makes API calls, and yields responses in OpenAI format\n- openai_to_claude_params(openai_params: dict) -> dict - Converts OpenAI-style parameters to Claude's format (implementation not shown)\n- claude_to_chatgpt_response(claude_response: dict) -> dict - Converts Claude's response format to OpenAI's format (implementation not shown)\n- claude_to_chatgpt_response_stream(claude_response: dict) -> dict - Converts streaming response format (implementation not shown)",
    "Canonical_solution": "import httpx\nimport time\nimport json\nimport os\nfrom fastapi import Request\n\nclass ClaudeAdapter:\n    def __init__(self, claude_base_url=\"https://api.anthropic.com\"):\n        self.claude_api_key = os.getenv(\"CLAUDE_API_KEY\", None)\n        self.claude_base_url = claude_base_url\n\n    def get_api_key(self, headers):\n        auth_header = headers.get(\"authorization\", None)\n        if auth_header:\n            return auth_header.split(\" \")[1]\n        else:\n            return self.claude_api_key\n\n    async def chat(self, request: Request):\n        openai_params = await request.json()\n        headers = request.headers\n        claude_params = self.openai_to_claude_params(openai_params)\n        api_key = self.get_api_key(headers)\n\n        async with httpx.AsyncClient(timeout=120.0) as client:\n            if not claude_params.get(\"stream\", False):\n                response = await client.post(\n                    f\"{self.claude_base_url}/v1/complete\",\n                    headers={\n                        \"x-api-key\": api_key,\n                        \"accept\": \"application/json\",\n                        \"content-type\": \"application/json\",\n                        \"anthropic-version\": \"2023-06-01\",\n                    },\n                    json=claude_params,\n                )\n                if response.is_error:\n                    raise Exception(f\"Error: {response.status_code}\")\n                claude_response = response.json()\n                openai_response = self.claude_to_chatgpt_response(claude_response)\n                yield openai_response\n            else:\n                async with client.stream(\n                    \"POST\",\n                    f\"{self.claude_base_url}/v1/complete\",\n                    headers={\n                        \"x-api-key\": api_key,\n                        \"accept\": \"application/json\",\n                        \"content-type\": \"application/json\",\n                        \"anthropic-version\": \"2023-06-01\",\n                    },\n                    json=claude_params,\n                ) as response:\n                    if response.is_error:\n                        raise Exception(f\"Error: {response.status_code}\")\n                    async for line in response.aiter_lines():\n                        if line:\n                            stripped_line = line.lstrip(\"data:\")\n                            if stripped_line:\n                                try:\n                                    decoded_line = json.loads(stripped_line)\n                                    stop_reason = decoded_line.get(\"stop_reason\")\n                                    if stop_reason:\n                                        yield self.claude_to_chatgpt_response_stream(\n                                            {\n                                                \"completion\": \"\",\n                                                \"stop_reason\": stop_reason,\n                                            }\n                                        )\n                                        yield \"[DONE]\"\n                                    else:\n                                        completion = decoded_line.get(\"completion\")\n                                        if completion:\n                                            openai_response = (\n                                                self.claude_to_chatgpt_response_stream(\n                                                    decoded_line\n                                                )\n                                            )\n                                            yield openai_response\n                                except json.JSONDecodeError as e:\n                                    logger.debug(\n                                        f\"Error decoding JSON: {e}\"\n                                    )",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import os\nimport httpx\nimport asyncio\nfrom typing import AsyncGenerator, Dict, Any\n\nclass ClaudeAdapter:\n    def __init__(self, claude_base_url: str = \"https://api.anthropic.com\"):\n        self.claude_base_url = claude_base_url\n        self.claude_api_key = self.get_api_key({})\n\n    def get_api_key(self, headers: dict) -> str:\n        return headers.get(\"Authorization\", os.getenv(\"CLAUDE_API_KEY\"))\n\n    async def chat(self, request: Dict[str, Any]) -> AsyncGenerator[Dict[str, Any], None]:\n        try:\n            claude_params = self.openai_to_claude_params(request)\n            async with httpx.AsyncClient() as client:\n                response = await client.post(\n                    f\"{self.claude_base_url}/v1/messages\",\n                    headers={\"Authorization\": f\"Bearer {self.claude_api_key}\"},\n                    json=claude_params,\n                    stream=request.get(\"stream\", False)\n                )\n                if response.status_code == 200:\n                    if request.get(\"stream\", False):\n                        async for chunk in response.aiter_lines():\n                            yield self.claude_to_chatgpt_response_stream(chunk)\n                    else:\n                        yield self.claude_to_chatgpt_response(response.json())\n                else:\n                    yield {\"error\": f\"API error: {response.status_code}, {response.text}\"}\n        except Exception as e:\n            yield {\"error\": f\"Request failed: {str(e)}\"}"
  },
  {
    "Task_id": 433,
    "Instruction": "Task Description: Implement a UDP relay class that facilitates communication between local and remote servers using UDP sockets, handling DNS resolution and data forwarding.\n\nClass Description: The UDPRelay class manages UDP socket communication, including socket creation, binding, data transmission, and DNS resolution. It acts as a relay between local and remote endpoints, handling both incoming and outgoing UDP packets.\n\nAttributes:\n- _config: [dict] - Configuration parameters including addresses and ports\n- _dns_resolver: [object] - DNS resolver for handling domain name resolution\n- _is_local: [bool] - Flag indicating if the instance is local or remote\n- _sockets: [set] - Set of active client sockets\n- _server_socket: [socket.socket] - Main server socket for listening\n- _closed: [bool] - Flag indicating if the relay is closed\n- _listen_addr: [str] - Address to listen on\n- _listen_port: [int] - Port to listen on\n\nMethods:\n- __init__(config: dict, dns_resolver: object, is_local: bool) -> None - Initializes the UDP relay with configuration, DNS resolver, and local/remote mode\n- _handle_server() -> None - Handles incoming data from the server socket\n- _handle_server_dns_resolved(error: str, remote_addr: tuple, server_addr: str, params: tuple) -> None - Handles DNS resolution results and forwards data\n- _handle_client(sock: socket.socket) -> None - Handles incoming data from client sockets\n- close() -> None - Closes all sockets and cleans up resources",
    "Canonical_solution": "import socket\nimport errno\nimport logging\nfrom typing import Tuple, Optional\n\nclass UDPRelay:\n    def __init__(self, config, dns_resolver, is_local):\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._sockets = set()\n        self._server_socket = None\n        self._closed = False\n\n        if is_local:\n            self._listen_addr = config['local_address']\n            self._listen_port = config['local_port']\n        else:\n            self._listen_addr = config['server']\n            self._listen_port = config['server_port']\n\n        addrs = socket.getaddrinfo(self._listen_addr, self._listen_port, 0,\n                                 socket.SOCK_DGRAM, socket.SOL_UDP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        self._server_socket = socket.socket(af, socktype, proto)\n        self._server_socket.bind((self._listen_addr, self._listen_port))\n        self._server_socket.setblocking(False)\n\n    def _handle_server(self):\n        data, r_addr = self._server_socket.recvfrom(65536)\n        if not data:\n            logging.debug('UDP handle_server: data is empty')\n            return\n\n        try:\n            header_result = parse_header(data)\n            if header_result is None:\n                return\n            connecttype, addrtype, dest_addr, dest_port, header_length = header_result\n\n            if self._is_local:\n                server_addr, server_port = self._get_a_server()\n            else:\n                server_addr, server_port = dest_addr, dest_port\n\n            if (addrtype & 7) == 3:\n                af = common.is_ip(server_addr)\n                if not af:\n                    handler = common.UDPAsyncDNSHandler((data, r_addr, None, header_length))\n                    handler.resolve(self._dns_resolver, (server_addr, server_port), \n                                   self._handle_server_dns_resolved)\n                else:\n                    self._handle_server_dns_resolved(\"\", (server_addr, server_port), \n                                                   server_addr, (data, r_addr, None, header_length))\n            else:\n                self._handle_server_dns_resolved(\"\", (server_addr, server_port), \n                                               server_addr, (data, r_addr, None, header_length))\n        except Exception as e:\n            logging.error(f\"Error handling server data: {e}\")\n\n    def _handle_server_dns_resolved(self, error, remote_addr, server_addr, params):\n        if error:\n            return\n        data, r_addr, uid, header_length = params\n        server_port = remote_addr[1]\n\n        addrs = socket.getaddrinfo(server_addr, server_port, 0,\n                                 socket.SOCK_DGRAM, socket.SOL_UDP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        client = socket.socket(af, socktype, proto)\n        client.setblocking(False)\n\n        try:\n            client.sendto(data[header_length:], (server_addr, server_port))\n            self._sockets.add(client.fileno())\n        except IOError as e:\n            err = eventloop.errno_from_exception(e)\n            if err not in (errno.EINPROGRESS, errno.EAGAIN):\n                logging.error(f\"Error sending UDP data: {e}\")\n\n    def _handle_client(self, sock):\n        data, r_addr = sock.recvfrom(65536)\n        if not data:\n            return\n\n        if not self._is_local:\n            data = pack_addr(r_addr[0]) + struct.pack('>H', r_addr[1]) + data\n\n        try:\n            self._server_socket.sendto(data, r_addr)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EWOULDBLOCK,):\n                logging.error(f\"Error sending UDP response: {e}\")\n\n    def close(self):\n        self._closed = True\n        if self._server_socket:\n            self._server_socket.close()\n        for sock in self._sockets:\n            try:\n                sock.close()\n            except:\n                pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\nfrom typing import Dict, Any, Tuple, Set\n\nclass UDPRelay:\n    def __init__(self, config: Dict[str, Any], dns_resolver: Any, is_local: bool) -> None:\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._sockets = set()\n        self._closed = False\n        self._listen_addr = config.get(\"listen_address\", \"0.0.0.0\")\n        self._listen_port = config.get(\"listen_port\", 53)\n\n        self._server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self._server_socket.setblocking(False)\n        self._server_socket.bind((self._listen_addr, self._listen_port))\n\n        threading.Thread(target=self._handle_server, daemon=True).start()\n\n    def _handle_server(self) -> None:\n        while not self._closed:\n            try:\n                data, addr = self._server_socket.recvfrom(65535)\n                if self._is_local:\n                    remote_host = self._config[\"remote_host\"]\n                    remote_port = self._config[\"remote_port\"]\n                    self._forward_data(data, addr, (remote_host, remote_port))\n                else:\n                    self._handle_client_data(data, addr)\n            except socket.error:\n                pass\n\n    def _forward_data(self, data: bytes, src_addr: Tuple[str, int], dst_addr: Tuple[str, int]) -> None:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        sock.setblocking(False)\n        self._sockets.add(sock)\n        threading.Thread(target=self._send_data, args=(sock, data, dst_addr, src_addr), daemon=True).start()\n\n    def _send_data(self, sock: socket.socket, data: bytes, dst_addr: Tuple[str, int], src_addr: Tuple[str, int]) -> None:\n        try:\n            sock.sendto(data, dst_addr)\n            self._handle_response(sock, src_addr)\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n        finally:\n            sock.close()\n            self._sockets.discard(sock)\n\n    def _handle_client_data(self, data: bytes, src_addr: Tuple[str, int]) -> None:\n        if self._config.get(\"use_dns\"):\n            domain = data.decode(\"utf-8\", errors=\"ignore\")\n            self._dns_resolver.resolve(domain, self._handle_server_dns_resolved, src_addr, data)\n        else:\n            remote_host = self._config[\"remote_host\"]\n            remote_port = self._config[\"remote_port\"]\n            self._forward_data(data, src_addr, (remote_host, remote_port))\n\n    def _handle_server_dns_resolved(self, error: str, remote_addr: Tuple[str, int], server_addr: Tuple[str, int], params: Tuple[Any, ...]) -> None:\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        data, src_addr = params\n        self._forward_data(data, src_addr, remote_addr)\n\n    def _handle_response(self, sock: socket.socket, src_addr: Tuple[str, int]) -> None:\n        while not self._closed:\n            try:\n                response, _ = sock.recvfrom(65535)\n                self._server_socket.sendto(response, src_addr)\n                break\n            except socket.error:\n                break\n\n    def close(self) -> None:\n        self._closed = True\n        self._server_socket.close()\n        for sock in self._sockets:\n            sock.close()"
  },
  {
    "Task_id": 436,
    "Instruction": "Task Description: Create a WebSocket client using Python's asyncio and aiohttp libraries to establish a connection, send messages, receive responses, and gracefully close the connection.\n\nFunction Description: The code demonstrates how to implement a WebSocket client that connects to a server, sends an initial message (\"hello world!\"), echoes received messages, and closes the connection when instructed.\n\nInput:\n- URL (implicit): The WebSocket server URL to connect to\n- sslctx (implicit): Boolean flag indicating whether to use SSL (defaults to False)\n\nOutput:\n- None (direct output): The function prints received messages to stdout\n- Side effect: Maintains WebSocket connection and handles message exchange\n\nMethods:\n1. ws_test_echo(session) -> None\n   - Takes an aiohttp.ClientSession object\n   - Handles WebSocket communication lifecycle\n   - Sends initial message and echoes responses\n   - Closes connection when receiving \"close\" command\n\n2. main() -> None\n   - Creates ClientSession and runs ws_test_echo\n   - Serves as entry point for the async operations\n\nExecution:\n- The script uses asyncio.run() to start the async event loop\n- All WebSocket operations are performed asynchronously",
    "Canonical_solution": "import sys\nimport aiohttp\nimport asyncio\n\nsslctx = False\n\nasync def ws_test_echo(session):\n    async with session.ws_connect(URL, ssl=sslctx) as ws:\n        await ws.send_str(\"hello world!\\r\\n\")\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(msg.data)\n\n            if \"close\" in msg.data:\n                break\n            await ws.send_str(\"close\\r\\n\")\n        await ws.close()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
    "Code_level": "Function-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport aiohttp\n\nasync def ws_test_echo(session):\n    async with session.ws_connect('wss://example.com/socket') as ws:\n        await ws.send_str(\"hello world!\")\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(f\"Received: {msg.data}\")\n                if msg.data == \"close\":\n                    await ws.close()\n                    break\n            elif msg.type == aiohttp.WSMsgType.ERROR:\n                print(\"WebSocket connection closed with error\")\n                break\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
  },
  {
    "Task_id": 437,
    "Instruction": "Task Description: Implement a WebSocket client for text-to-speech (TTS) communication that handles asynchronous streaming of audio and metadata, with support for DRM and error handling.\n\nClass Description: The `Communicate` class manages WebSocket connections to a TTS service, sending text data and receiving audio streams and metadata asynchronously. It handles connection setup, message exchange, DRM challenges, and error scenarios.\n\nAttributes:\n\n- tts_config: [TTSConfig] - Configuration for TTS including voice, rate, volume, and pitch settings.\n- texts: [List[str]] - List of text chunks to be processed, split by byte length constraints.\n- proxy: [Optional[str]] - Proxy URL for the WebSocket connection if needed.\n- session_timeout: [aiohttp.ClientTimeout] - Timeout settings for the WebSocket session.\n- connector: [Optional[aiohttp.BaseConnector]] - Custom connector for the WebSocket session.\n- state: [CommunicateState] - Dictionary tracking streaming state including partial text, offsets, and stream status.\n\nMethods:\n\n- __init__(text: str, voice: str = DEFAULT_VOICE, *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60) -> None - Initializes the TTS communication with text and configuration parameters.\n- __stream() -> AsyncGenerator[TTSChunk, None] - Private async generator that handles the WebSocket communication, yielding audio chunks and metadata.\n- stream() -> AsyncGenerator[TTSChunk, None] - Public async generator that manages the streaming process, handling DRM challenges and text chunk iteration.\n- stream_sync() -> Generator[TTSChunk, None, None] - Synchronous wrapper for the async stream method, using a ThreadPoolExecutor to bridge async/sync contexts.",
    "Canonical_solution": "import asyncio\nimport concurrent.futures\nimport json\nimport ssl\nimport time\nimport uuid\nfrom queue import Queue\nfrom typing import AsyncGenerator, Generator, Optional, Union\n\nimport aiohttp\nimport certifi\n\nfrom .constants import DEFAULT_VOICE, SEC_MS_GEC_VERSION, WSS_HEADERS, WSS_URL\nfrom .data_classes import TTSConfig\nfrom .drm import DRM\nfrom .exceptions import (\n    NoAudioReceived,\n    UnexpectedResponse,\n    UnknownResponse,\n    WebSocketError,\n)\nfrom .typing import CommunicateState, TTSChunk\n\nclass Communicate:\n    def __init__(\n        self,\n        text: str,\n        voice: str = DEFAULT_VOICE,\n        *,\n        rate: str = \"+0%\",\n        volume: str = \"+0%\",\n        pitch: str = \"+0Hz\",\n        connector: Optional[aiohttp.BaseConnector] = None,\n        proxy: Optional[str] = None,\n        connect_timeout: Optional[int] = 10,\n        receive_timeout: Optional[int] = 60,\n    ):\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts = split_text_by_byte_length(\n            escape(remove_incompatible_characters(text)),\n            calc_max_mesg_size(self.tts_config),\n        )\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(\n            total=None,\n            connect=None,\n            sock_connect=connect_timeout,\n            sock_read=receive_timeout,\n        )\n        self.connector = connector\n        self.state: CommunicateState = {\n            \"partial_text\": b\"\",\n            \"offset_compensation\": 0,\n            \"last_duration_offset\": 0,\n            \"stream_was_called\": False,\n        }\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        audio_was_received = False\n        ssl_ctx = ssl.create_default_context(cafile=certifi.where())\n        \n        async with aiohttp.ClientSession(\n            connector=self.connector,\n            trust_env=True,\n            timeout=self.session_timeout,\n        ) as session, session.ws_connect(\n            f\"{WSS_URL}&Sec-MS-GEC={DRM.generate_sec_ms_gec()}\"\n            f\"&Sec-MS-GEC-Version={SEC_MS_GEC_VERSION}\"\n            f\"&ConnectionId={connect_id()}\",\n            compress=15,\n            proxy=self.proxy,\n            headers=WSS_HEADERS,\n            ssl=ssl_ctx,\n        ) as websocket:\n            await websocket.send_str(\n                f\"X-Timestamp:{date_to_string()}\\r\\n\"\n                \"Content-Type:application/json; charset=utf-8\\r\\n\"\n                \"Path:speech.config\\r\\n\\r\\n\"\n                '{\"context\":{\"synthesis\":{\"audio\":{\"metadataoptions\":{'\n                '\"sentenceBoundaryEnabled\":\"false\",\"wordBoundaryEnabled\":\"true\"},'\n                '\"outputFormat\":\"audio-24khz-48kbitrate-mono-mp3\"'\n                \"}}}}\\r\\n\"\n            )\n\n            await websocket.send_str(\n                ssml_headers_plus_data(\n                    connect_id(),\n                    date_to_string(),\n                    mkssml(\n                        self.tts_config,\n                        self.state[\"partial_text\"],\n                    ),\n                )\n            )\n\n            async for received in websocket:\n                if received.type == aiohttp.WSMsgType.TEXT:\n                    encoded_data = received.data.encode(\"utf-8\")\n                    parameters, data = get_headers_and_data(\n                        encoded_data, encoded_data.find(b\"\\r\\n\\r\\n\")\n                    )\n                    path = parameters.get(b\"Path\", None)\n                    if path == b\"audio.metadata\":\n                        parsed_metadata = self.__parse_metadata(data)\n                        yield parsed_metadata\n                        self.state[\"last_duration_offset\"] = (\n                            parsed_metadata[\"offset\"] + parsed_metadata[\"duration\"]\n                        )\n                    elif path == b\"turn.end\":\n                        self.state[\"offset_compensation\"] = self.state[\n                            \"last_duration_offset\"\n                        ]\n                        self.state[\"offset_compensation\"] += 8_750_000\n                        break\n                elif received.type == aiohttp.WSMsgType.BINARY:\n                    header_length = int.from_bytes(received.data[:2], \"big\")\n                    parameters, data = get_headers_and_data(\n                        received.data, header_length\n                    )\n                    if parameters.get(b\"Path\") == b\"audio\":\n                        audio_was_received = True\n                        yield {\"type\": \"audio\", \"data\": data}\n                elif received.type == aiohttp.WSMsgType.ERROR:\n                    raise WebSocketError(received.data if received.data else \"Unknown error\")\n\n            if not audio_was_received:\n                raise NoAudioReceived(\"No audio was received.\")\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        if self.state[\"stream_was_called\"]:\n            raise RuntimeError(\"stream can only be called once.\")\n        self.state[\"stream_was_called\"] = True\n\n        for self.state[\"partial_text\"] in self.texts:\n            try:\n                async for message in self.__stream():\n                    yield message\n            except aiohttp.ClientResponseError as e:\n                if e.status != 403:\n                    raise\n                DRM.handle_client_response_error(e)\n                async for message in self.__stream():\n                    yield message\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        def fetch_async_items(queue: Queue) -> None:\n            async def get_items() -> None:\n                async for item in self.stream():\n                    queue.put(item)\n                queue.put(None)\n\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            loop.run_until_complete(get_items())\n            loop.close()\n\n        queue: Queue = Queue()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            executor.submit(fetch_async_items, queue)\n            while True:\n                item = queue.get()\n                if item is None:\n                    break\n                yield item",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport aiohttp\nfrom typing import AsyncGenerator, Generator, List, Optional, Dict, Any\nfrom dataclasses import dataclass\nfrom enum import Enum\n\n@dataclass\nclass TTSChunk:\n    audio: bytes\n    metadata: Dict[str, Any]\n    is_final: bool\n\nclass CommunicateState(Enum):\n    IDLE = \"idle\"\n    STREAMING = \"streaming\"\n    PAUSED = \"paused\"\n    ERROR = \"error\"\n\nclass TTSConfig:\n    def __init__(self, voice: str, rate: str, volume: str, pitch: str):\n        self.voice = voice\n        self.rate = rate\n        self.volume = volume\n        self.pitch = pitch\n\nclass Communicate:\n    def __init__(\n        self,\n        text: str,\n        voice: str = \"default_voice\",\n        *,\n        rate: str = \"+0%\",\n        volume: str = \"+0%\",\n        pitch: str = \"+0Hz\",\n        connector: Optional[aiohttp.BaseConnector] = None,\n        proxy: Optional[str] = None,\n        connect_timeout: Optional[int] = 10,\n        receive_timeout: Optional[int] = 60\n    ) -> None:\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts: List[str] = [text]\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(\n            connect=connect_timeout, total=None, sock_read=receive_timeout\n        )\n        self.connector = connector\n        self.state: Dict[str, Any] = {\n            \"partial_text\": \"\",\n            \"offset\": 0,\n            \"stream_status\": CommunicateState.IDLE\n        }\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        try:\n            async with aiohttp.ClientSession(connector=self.connector, timeout=self.session_timeout) as session:\n                async with session.ws_connect(\"wss://tts.example.com\", proxy=self.proxy) as ws:\n                    self.state[\"stream_status\"] = CommunicateState.STREAMING\n                    for text in self.texts:\n                        await ws.send_str(text)\n                        while True:\n                            msg = await ws.receive()\n                            if msg.type == aiohttp.WSMsgType.TEXT:\n                                metadata = {\"chunk\": msg.data}\n                                yield TTSChunk(audio=b\"\", metadata=metadata, is_final=False)\n                            elif msg.type == aiohttp.WSMsgType.BINARY:\n                                yield TTSChunk(audio=msg.data, metadata={}, is_final=False)\n                            elif msg.type == aiohttp.WSMsgType.CLOSED:\n                                yield TTSChunk(audio=b\"\", metadata={\"status\": \"closed\"}, is_final=True)\n                                break\n                            elif msg.type == aiohttp.WSMsgType.ERROR:\n                                raise Exception(f\"WebSocket error: {msg}\")\n                    yield TTSChunk(audio=b\"\", metadata={\"status\": \"complete\"}, is_final=True)\n        except Exception as e:\n            yield TTSChunk(audio=b\"\", metadata={\"error\": str(e)}, is_final=True)\n            self.state[\"stream_status\"] = CommunicateState.ERROR\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        async for chunk in self.__stream():\n            yield chunk\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n        return loop.run_until_complete(self.stream())"
  },
  {
    "Task_id": 438,
    "Instruction": "Task Description: Implement a WebSocket client class in Python using asyncio and websockets libraries to handle persistent WebSocket connections, send/receive messages, and manage connection lifecycle.\n\nClass Description: The PersistentWebSocket class manages a persistent WebSocket connection with automatic reconnection handling and proper resource cleanup. It's designed to be used as an asynchronous context manager.\n\nAttributes:\n- ws: Optional[WebSocketClientProtocol] - The active WebSocket connection object\n- endpoint_uri: str - The WebSocket server URI to connect to\n- websocket_kwargs: Any - Additional keyword arguments for the WebSocket connection\n\nMethods:\n- __aenter__() -> WebSocketClientProtocol - Asynchronously establishes a connection if none exists and returns the WebSocket client protocol\n- __aexit__(exc_type: type, exc_val: BaseException, exc_tb: Any) -> None - Handles connection cleanup on context exit, closing the connection if an exception occurred\n\nClass Description: The LegacyWebSocketProvider class extends JSONBaseProvider to provide WebSocket-based JSON-RPC functionality with timeout support and batch request handling.\n\nAttributes:\n- _loop: ClassVar[Any] - The asyncio event loop used for running coroutines\n- endpoint_uri: Optional[Union[str, URI]] - The WebSocket server endpoint URI\n- websocket_timeout: int - Timeout value for WebSocket operations\n- conn: PersistentWebSocket - The persistent WebSocket connection instance\n\nMethods:\n- coro_make_request(request_data: bytes) -> RPCResponse - Coroutine that sends a request and waits for a response through the WebSocket connection\n- make_request(method: RPCEndpoint, params: Any) -> RPCResponse - Synchronous method to make a single RPC request\n- make_batch_request(requests: List[Tuple[RPCEndpoint, Any]]) -> List[RPCResponse] - Synchronous method to make a batch of RPC requests",
    "Canonical_solution": "import asyncio\nimport json\nfrom typing import (\n    Any,\n    List,\n    Optional,\n    Tuple,\n    Union,\n    cast,\n)\nfrom websockets.client import (\n    connect,\n)\nfrom websockets.legacy.client import (\n    WebSocketClientProtocol,\n)\nfrom web3.providers.base import (\n    JSONBaseProvider,\n)\nfrom web3.types import (\n    RPCEndpoint,\n    RPCResponse,\n)\n\nclass PersistentWebSocket:\n    def __init__(self, endpoint_uri: str, websocket_kwargs: Any) -> None:\n        self.ws: Optional[WebSocketClientProtocol] = None\n        self.endpoint_uri = endpoint_uri\n        self.websocket_kwargs = websocket_kwargs\n\n    async def __aenter__(self) -> WebSocketClientProtocol:\n        if self.ws is None:\n            self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n        return self.ws\n\n    async def __aexit__(\n        self,\n        exc_type: type,\n        exc_val: BaseException,\n        exc_tb: Any,\n    ) -> None:\n        if exc_val is not None:\n            try:\n                await self.ws.close()\n            except Exception:\n                pass\n            self.ws = None\n\nclass LegacyWebSocketProvider(JSONBaseProvider):\n    _loop = None\n\n    def __init__(\n        self,\n        endpoint_uri: Optional[Union[str, URI]] = None,\n        websocket_kwargs: Optional[Any] = None,\n        websocket_timeout: int = 30,\n        **kwargs: Any,\n    ) -> None:\n        self.endpoint_uri = endpoint_uri\n        self.websocket_timeout = websocket_timeout\n        if websocket_kwargs is None:\n            websocket_kwargs = {}\n        self.conn = PersistentWebSocket(self.endpoint_uri, websocket_kwargs)\n        super().__init__(**kwargs)\n\n    async def coro_make_request(self, request_data: bytes) -> RPCResponse:\n        async with self.conn as conn:\n            await asyncio.wait_for(\n                conn.send(request_data), timeout=self.websocket_timeout\n            )\n            return json.loads(\n                await asyncio.wait_for(conn.recv(), timeout=self.websocket_timeout)\n            )\n\n    def make_request(self, method: RPCEndpoint, params: Any) -> RPCResponse:\n        request_data = self.encode_rpc_request(method, params)\n        future = asyncio.run_coroutine_threadsafe(\n            self.coro_make_request(request_data), LegacyWebSocketProvider._loop\n        )\n        return future.result()\n\n    def make_batch_request(\n        self, requests: List[Tuple[RPCEndpoint, Any]]\n    ) -> List[RPCResponse]:\n        request_data = self.encode_batch_rpc_request(requests)\n        future = asyncio.run_coroutine_threadsafe(\n            self.coro_make_request(request_data), LegacyWebSocketProvider._loop\n        )\n        response = cast(List[RPCResponse], future.result())\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport websockets\nfrom typing import Optional, Any, List, Tuple, Union, ClassVar, AsyncGenerator\nimport json\n\nclass RPCResponse:\n    def __init__(self, data: dict):\n        self.data = data\n\nclass JSONBaseProvider:\n    pass\n\nclass PersistentWebSocket:\n    def __init__(self, endpoint_uri: str, websocket_kwargs: Any = None):\n        self.ws: Optional[websockets.protocol.WebSocketClientProtocol] = None\n        self.endpoint_uri = endpoint_uri\n        self.websocket_kwargs = websocket_kwargs or {}\n\n    async def __aenter__(self) -> 'websockets.protocol.WebSocketClientProtocol':\n        if not self.ws:\n            self.ws = await websockets.connect(self.endpoint_uri, **self.websocket_kwargs)\n        return self.ws\n\n    async def __aexit__(self, exc_type: type, exc_val: BaseException, exc_tb: Any) -> None:\n        if self.ws:\n            await self.ws.close()\n\nclass LegacyWebSocketProvider(JSONBaseProvider):\n    _loop: ClassVar[Any] = asyncio.get_event_loop()\n    endpoint_uri: Optional[Union[str, URI]] = None\n    websocket_timeout: int = 10\n    conn: PersistentWebSocket\n\n    def __init__(self, endpoint_uri: Optional[Union[str, URI]] = None, websocket_timeout: int = 10):\n        self.endpoint_uri = endpoint_uri\n        self.websocket_timeout = websocket_timeout\n        self.conn = PersistentWebSocket(endpoint_uri, {'timeout': websocket_timeout})\n\n    async def coro_make_request(self, request_data: bytes) -> RPCResponse:\n        async with self.conn as ws:\n            await ws.send(request_data)\n            response = await ws.recv()\n            return RPCResponse(json.loads(response))\n\n    def make_request(self, method: str, params: Any) -> RPCResponse:\n        request_data = json.dumps({'jsonrpc': '2.0', 'method': method, 'params': params, 'id': 1})\n        return self._loop.run_until_complete(self.coro_make_request(request_data.encode()))\n\n    def make_batch_request(self, requests: List[Tuple[str, Any]]) -> List[RPCResponse]:\n        batch = [{'jsonrpc': '2.0', 'method': method, 'params': params, 'id': i} for i, (method, params) in enumerate(requests)]\n        request_data = json.dumps(batch)\n        responses = self._loop.run_until_complete(self.coro_make_request(request_data.encode()))\n        return [responses]"
  },
  {
    "Task_id": 439,
    "Instruction": "Task Description: Implement a WebSocket client class for streaming financial market data with authentication, subscription management, and message handling capabilities.\n\nClass Description: The _DataStream class establishes and maintains a WebSocket connection to a financial data streaming service. It handles authentication, manages subscriptions to different types of market data (trades, quotes, bars), processes incoming messages, and provides methods for controlling the connection lifecycle.\n\nAttributes:\n- _endpoint: str - WebSocket server URL\n- _key_id: str - API key for authentication\n- _secret_key: str - API secret for authentication\n- _ws: WebSocketClientProtocol - Active WebSocket connection\n- _running: bool - Connection status flag\n- _loop: asyncio.AbstractEventLoop - Event loop reference\n- _raw_data: bool - Flag for raw data processing\n- _stop_stream_queue: queue.Queue - Queue for stop signals\n- _handlers: Dict[str, Dict] - Dictionary of message handlers per data type\n- _name: str - Connection name identifier\n- _should_run: bool - Control flag for main loop\n- _max_frame_size: int - Maximum WebSocket frame size\n- _websocket_params: Dict - WebSocket connection parameters\n\nMethods:\n- __init__(endpoint: str, key_id: str, secret_key: str, raw_data: bool = False, websocket_params: Optional[Dict] = None) -> None - Initialize the data stream with connection parameters\n- _connect() -> None - Establish WebSocket connection\n- _auth() -> None - Authenticate with the server\n- _start_ws() -> None - Combined connection and authentication\n- close() -> None - Close the WebSocket connection\n- stop_ws() -> None - Signal to stop the WebSocket connection\n- _consume() -> None - Main message processing loop\n- _dispatch(msg: Dict) -> None - Route messages to appropriate handlers\n- _subscribe(handler: Callable, symbols: List[str], handlers: Dict) -> None - Internal subscription management\n- _subscribe_all() -> None - Send all active subscriptions to server\n- _run_forever() -> None - Main connection management loop\n- subscribe_trades(handler: Callable, *symbols: str) -> None - Subscribe to trade data\n- subscribe_quotes(handler: Callable, *symbols: str) -> None - Subscribe to quote data\n- subscribe_bars(handler: Callable, *symbols: str) -> None - Subscribe to bar data\n- subscribe_updated_bars(handler: Callable, *symbols: str) -> None - Subscribe to updated bar data\n- subscribe_daily_bars(handler: Callable, *symbols: str) -> None - Subscribe to daily bar data\n- stop() -> None - Stop the WebSocket connection and processing",
    "Canonical_solution": "import asyncio\nimport websockets\nimport msgpack\nimport queue\nfrom typing import Dict, Optional\n\nclass _DataStream:\n    def __init__(self,\n                 endpoint: str,\n                 key_id: str,\n                 secret_key: str,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key\n        self._ws = None\n        self._running = False\n        self._loop = None\n        self._raw_data = raw_data\n        self._stop_stream_queue = queue.Queue()\n        self._handlers = {\n            'trades':      {},\n            'quotes':      {},\n            'bars':        {},\n            'updatedBars': {},\n            'dailyBars':   {},\n        }\n        self._name = 'data'\n        self._should_run = True\n        self._max_frame_size = 32768\n        self._websocket_params = websocket_params or {\n            \"ping_interval\": 10,\n            \"ping_timeout\": 180,\n            \"max_queue\": 1024,\n        }\n\n    async def _connect(self):\n        self._ws = await websockets.connect(\n            self._endpoint,\n            extra_headers={'Content-Type': 'application/msgpack'},\n            **self._websocket_params\n        )\n        r = await self._ws.recv()\n        msg = msgpack.unpackb(r)\n        if msg[0]['T'] != 'success' or msg[0]['msg'] != 'connected':\n            raise ValueError('connected message not received')\n\n    async def _auth(self):\n        await self._ws.send(\n            msgpack.packb({\n                'action': 'auth',\n                'key':    self._key_id,\n                'secret': self._secret_key,\n            }))\n        r = await self._ws.recv()\n        msg = msgpack.unpackb(r)\n        if msg[0]['T'] == 'error':\n            raise ValueError(msg[0].get('msg', 'auth failed'))\n        if msg[0]['T'] != 'success' or msg[0]['msg'] != 'authenticated':\n            raise ValueError('failed to authenticate')\n\n    async def _start_ws(self):\n        await self._connect()\n        await self._auth()\n\n    async def close(self):\n        if self._ws:\n            await self._ws.close()\n            self._ws = None\n            self._running = False\n\n    async def stop_ws(self):\n        self._should_run = False\n        if self._stop_stream_queue.empty():\n            self._stop_stream_queue.put_nowait({\"should_stop\": True})\n\n    async def _consume(self):\n        while True:\n            if not self._stop_stream_queue.empty():\n                self._stop_stream_queue.get(timeout=1)\n                await self.close()\n                break\n            else:\n                try:\n                    r = await asyncio.wait_for(self._ws.recv(), 5)\n                    msgs = msgpack.unpackb(r)\n                    for msg in msgs:\n                        await self._dispatch(msg)\n                except asyncio.TimeoutError:\n                    pass\n\n    async def _dispatch(self, msg):\n        msg_type = msg.get('T')\n        symbol = msg.get('S')\n        if msg_type == 't':\n            handler = self._handlers['trades'].get(\n                symbol, self._handlers['trades'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'q':\n            handler = self._handlers['quotes'].get(\n                symbol, self._handlers['quotes'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'b':\n            handler = self._handlers['bars'].get(\n                symbol, self._handlers['bars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'u':\n            handler = self._handlers['updatedBars'].get(\n                symbol, self._handlers['updatedBars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'd':\n            handler = self._handlers['dailyBars'].get(\n                symbol, self._handlers['dailyBars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'error':\n            log.error(f'error: {msg.get(\"msg\")} ({msg.get(\"code\")})')\n\n    def _subscribe(self, handler, symbols, handlers):\n        for symbol in symbols:\n            handlers[symbol] = handler\n        if self._running:\n            asyncio.run_coroutine_threadsafe(\n                self._subscribe_all(), self._loop\n            ).result()\n\n    async def _subscribe_all(self):\n        msg = defaultdict(list)\n        for k, v in self._handlers.items():\n            if v:\n                for s in v.keys():\n                    msg[k].append(s)\n        msg['action'] = 'subscribe'\n        bs = msgpack.packb(msg)\n        frames = (bs[i:i+self._max_frame_size]\n                  for i in range(0, len(bs), self._max_frame_size))\n        await self._ws.send(frames)\n\n    async def _run_forever(self):\n        self._loop = asyncio.get_running_loop()\n        while not any(v for k, v in self._handlers.items()):\n            if not self._stop_stream_queue.empty():\n                self._stop_stream_queue.get(timeout=1)\n                return\n            await asyncio.sleep(0.1)\n        self._should_run = True\n        self._running = False\n        while True:\n            try:\n                if not self._should_run:\n                    return\n                if not self._running:\n                    await self._start_ws()\n                    await self._subscribe_all()\n                    self._running = True\n                await self._consume()\n            except websockets.WebSocketException as wse:\n                await self.close()\n                self._running = False\n            finally:\n                await asyncio.sleep(0.01)\n\n    def subscribe_trades(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['trades'])\n\n    def subscribe_quotes(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['quotes'])\n\n    def subscribe_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['bars'])\n\n    def subscribe_updated_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['updatedBars'])\n\n    def subscribe_daily_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['dailyBars'])\n\n    def stop(self):\n        if self._loop.is_running():\n            asyncio.run_coroutine_threadsafe(\n                self.stop_ws(),\n                self._loop).result()",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport queue\nimport threading\nfrom typing import Optional, Dict, List, Callable, Any\nfrom websockets import connect as ws_connect\nfrom websockets.exceptions import ConnectionClosed\n\nclass _DataStream:\n    def __init__(self, endpoint: str, key_id: str, secret_key: str, raw_data: bool = False, websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key\n        self._ws = None\n        self._running = False\n        self._loop = asyncio.get_event_loop()\n        self._raw_data = raw_data\n        self._stop_stream_queue = queue.Queue()\n        self._handlers = {}\n        self._name = \"data_stream\"\n        self._should_run = True\n        self._max_frame_size = 1024 * 1024 * 10\n        self._websocket_params = websocket_params or {}\n\n    async def _connect(self) -> None:\n        try:\n            self._ws = await ws_connect(self._endpoint, **self._websocket_params)\n            self._running = True\n            self._loop.create_task(self._consume())\n        except Exception as e:\n            print(f\"Connection failed: {e}\")\n            self._running = False\n\n    def _auth(self) -> None:\n        auth_data = {\n            \"action\": \"auth\",\n            \"key_id\": self._key_id,\n            \"secret_key\": self._secret_key\n        }\n        self._loop.run_until_complete(self._ws.send(str(auth_data)))\n\n    async def _consume(self) -> None:\n        while self._running and self._should_run:\n            try:\n                msg = await self._ws.recv()\n                if self._raw_data:\n                    self._dispatch({\"raw\": msg})\n                else:\n                    self._dispatch(eval(msg))\n            except ConnectionClosed:\n                print(\"Connection closed\")\n                self._running = False\n                break\n            except Exception as e:\n                print(f\"Error receiving message: {e}\")\n                self._running = False\n                break\n\n    def _dispatch(self, msg: Dict) -> None:\n        data_type = msg.get(\"type\")\n        if data_type in self._handlers:\n            for handler in self._handlers[data_type]:\n                handler(msg)\n\n    def _subscribe(self, handler: Callable, symbols: List[str], handlers: Dict) -> None:\n        for symbol in symbols:\n            if symbol not in handlers:\n                handlers[symbol] = []\n            handlers[symbol].append(handler)\n\n    def _subscribe_all(self) -> None:\n        for data_type, subscriptions in self._handlers.items():\n            for symbol, handlers in subscriptions.items():\n                for handler in handlers:\n                    self._loop.run_until_complete(self._ws.send(f\"subscribe:{data_type}:{symbol}\"))\n\n    async def _run_forever(self) -> None:\n        await self._connect()\n        self._auth()\n        while self._running and self._should_run:\n            try:\n                await asyncio.sleep(1)\n            except Exception as e:\n                print(f\"Run loop error: {e}\")\n                self._running = False\n\n    def subscribe_trades(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers.get(\"trades\", {}))\n        self._handlers[\"trades\"] = self._handlers.get(\"trades\", {})\n\n    def subscribe_quotes(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers.get(\"quotes\", {}))\n        self._handlers[\"quotes\"] = self._handlers.get(\"quotes\", {})\n\n    def subscribe_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers.get(\"bars\", {}))\n        self._handlers[\"bars\"] = self._handlers.get(\"bars\", {})\n\n    def subscribe_updated_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers.get(\"updated_bars\", {}))\n        self._handlers[\"updated_bars\"] = self._handlers.get(\"updated_bars\", {})\n\n    def subscribe_daily_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers.get(\"daily_bars\", {}))\n        self._handlers[\"daily_bars\"] = self._handlers.get(\"daily_bars\", {})\n\n    def close(self) -> None:\n        if self._ws:\n            self._loop.run_until_complete(self._ws.close())\n            self._running = False\n\n    def stop_ws(self) -> None:\n        self._should_run = False\n        self._stop_stream_queue.put(True)\n\n    def stop(self) -> None:\n        self.stop_ws()\n        self.close()"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create asynchronous HTTP client functions to retrieve user and group avatars from specified URLs using the httpx library with retry logic for error handling.\n\nFunction Description: The functions make HTTP GET requests to fetch avatar images (in bytes) from predefined URL patterns. Each function implements retry logic (3 attempts) and error logging if the request fails.\n\nInput:\n- For get_user_avatar: uid (int | str) - User ID to construct the avatar URL\n- For get_group_avatar: gid (int | str) - Group ID to construct the avatar URL\n\nOutput:\n- bytes | None: Returns the avatar image content as bytes if successful, or None if all attempts fail after retries",
    "Canonical_solution": "import httpx\nfrom zhenxun.services.log import logger\n\nasync def get_user_avatar(uid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u6237\u5934\u50cf\n\n    \u53c2\u6570:\n        uid: \u7528\u6237id\n    \"\"\"\n    url = f\"http://q1.qlogo.cn/g?b=qq&nk={uid}&s=160\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7528\u6237\u5934\u50cf\u9519\u8bef\", \"Util\", target=uid)\n    return None\n\nasync def get_group_avatar(gid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u7fa4\u5934\u50cf\n\n    \u53c2\u6570:\n        gid: \u7fa4\u53f7\n    \"\"\"\n    url = f\"http://p.qlogo.cn/gh/{gid}/{gid}/640/\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7fa4\u5934\u50cf\u9519\u8bef\", \"Util\", target=gid)\n    return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport logging\nfrom typing import Optional, Union\n\nasync def get_user_avatar(uid: Union[int, str]) -> Optional[bytes]:\n    url = f\"https://example.com/api/user/avatar/{uid}\"\n    retries = 3\n    for attempt in range(retries):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=10.0)\n                response.raise_for_status()\n                return response.content\n        except (httpx.HTTPStatusError, httpx.NetworkError, httpx.TimeoutException) as e:\n            logging.error(f\"Attempt {attempt + 1} failed for user avatar {uid}: {e}\")\n            if attempt == retries - 1:\n                return None\n    return None\n\nasync def get_group_avatar(gid: Union[int, str]) -> Optional[bytes]:\n    url = f\"https://example.com/api/group/avatar/{gid}\"\n    retries = 3\n    for attempt in range(retries):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=10.0)\n                response.raise_for_status()\n                return response.content\n        except (httpx.HTTPStatusError, httpx.NetworkError, httpx.TimeoutException) as e:\n            logging.error(f\"Attempt {attempt + 1} failed for group avatar {gid}: {e}\")\n            if attempt == retries - 1:\n                return None\n    return None"
  },
  {
    "Task_id": 441,
    "Instruction": "Task Description: Implement a WebSocket client class for chat functionality that handles connection, message sending/receiving, and error handling with proper thread management.\n\nClass Description: ChatNewWebSocket is a WebSocket client implementation for chat applications that manages WebSocket connections, message queuing, and event callbacks in separate threads. It provides methods for starting/stopping connections, sending messages, and handling WebSocket events.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object for callback handling\n- ws: [WebSocketApp] - WebSocketApp instance for managing the connection\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with parent reference and starts send thread\n- parent() -> object - Property to dereference the weak parent reference\n- Stop() -> None - Stops the send thread by putting empty string in queue\n- SendDataRun() -> None - Thread target function that processes outgoing messages from queue\n- _SendData(data) -> None - Internal method to send data through WebSocket and emit appropriate events\n- _Send(msg) -> None - Internal method to send raw message through WebSocket\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(roomId, token, url) -> None - Starts WebSocket connection with given parameters in new thread\n- Close() -> None - Closes active WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, roomId, token, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"?token={}&room={}\".format(token, roomId)\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport queue\nimport weakref\nimport websocket\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun, daemon=True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            data = self._inQueue.get()\n            if data == \"\":\n                break\n            self._SendData(data)\n\n    def _SendData(self, data):\n        if self.ws and self.ws.connected:\n            self._Send(data)\n        else:\n            self.parent().OnConnectError(\"WebSocket not connected\")\n\n    def _Send(self, msg):\n        try:\n            self.ws.send(msg)\n        except Exception as e:\n            self.parent().OnSendError(e)\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent().OnMessage(message)\n\n    def on_error(self, ws, error):\n        self.parent().OnConnectError(error)\n\n    def on_close(self, ws):\n        self.parent().OnClose()\n\n    def on_open(self, ws):\n        self.parent().OnOpen()\n\n    def Start(self, roomId, token, url):\n        def run():\n            self.ws = websocket.WebSocketApp(url,\n                                             on_message=self.on_message,\n                                             on_error=self.on_error,\n                                             on_close=self.on_close,\n                                             on_open=self.on_open)\n            self.ws.run_forever()\n        threading.Thread(target=run, daemon=True).start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()"
  },
  {
    "Task_id": 443,
    "Instruction": "Task Description: Implement a WebSocket client class for chat applications that handles connection, message sending/receiving, and error events with proper threading and queue management.\n\nClass Description: ChatWebSocket is a WebSocket client implementation that manages WebSocket connections for chat applications. It handles message sending/receiving, connection events, and errors while maintaining thread safety through queue-based message processing.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object to avoid circular references\n- ws: [WebSocketApp] - The WebSocket client instance\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with a parent reference and starts the send thread\n- parent() -> object - Property that dereferences the weakref to the parent object\n- Stop() -> None - Stops the send thread by putting an empty string in the queue\n- SendDataRun() -> None - Thread target function that processes messages from the queue\n- _SendData(data) -> None - Internal method for sending data and emitting appropriate events\n- _Send(msg) -> None - Internal method for sending raw WebSocket messages\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(url) -> None - Starts the WebSocket connection on the specified URL\n- Close() -> None - Closes the WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"/socket.io/?EIO=3&transport=websocket\"\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport queue\nimport weakref\nfrom websocket import WebSocketApp\n\nclass ChatWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun, daemon=True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            data = self._inQueue.get()\n            if data == \"\":\n                break\n            self._SendData(data)\n\n    def _SendData(self, data):\n        if self.ws and self.ws.connected:\n            self._Send(data)\n        else:\n            print(\"WebSocket not connected, message not sent.\")\n\n    def _Send(self, msg):\n        self.ws.send(msg)\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent().on_message_received(message)\n\n    def on_error(self, ws, error):\n        self.parent().on_error_occurred(error)\n\n    def on_close(self, ws):\n        self.parent().on_connection_closed()\n\n    def on_open(self, ws):\n        self.parent().on_connection_opened()\n\n    def Start(self, url):\n        self.ws = WebSocketApp(url,\n                               on_message=self.on_message,\n                               on_error=self.on_error,\n                               on_close=self.on_close,\n                               on_open=self.on_open)\n        self.ws.run_forever()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()"
  },
  {
    "Task_id": 444,
    "Instruction": "Task Description: Implement a WebSocket client class in Python that establishes and manages connections to both control and data WebSocket servers, handles message exchange, and provides methods for parameter manipulation and audio data transmission.\n\nClass Description: WebSocketClient is a dual-connection WebSocket client that maintains separate connections for control commands and data transmission. It implements asynchronous communication with a server using callback-based event handling and provides thread-safe parameter operations.\n\nAttributes:\n- control_url: str - URL for the control WebSocket connection\n- data_url: str - URL for the data WebSocket connection\n- debug_mode: bool - Flag to enable debug output\n- is_running: bool - Flag indicating if the client is active\n- connection_established: threading.Event - Synchronization event for connection status\n- request_counter: int - Counter for generating unique request IDs\n- pending_requests: dict - Dictionary tracking pending parameter requests\n\nMethods:\n- __init__(control_url: str = DEFAULT_CONTROL_URL, data_url: str = DEFAULT_DATA_URL, debug_mode: bool = False) -> None - Initializes the WebSocket client with connection URLs and debug mode\n- connect() -> bool - Establishes connections to both control and data WebSocket servers\n- feed_audio(chunk: bytes, original_sample_rate: int = 16000) -> None - Sends audio data with metadata to the data WebSocket\n- on_control_message(ws: WebSocketApp, message: str) -> None - Callback for handling control channel messages\n- on_data_message(ws: WebSocketApp, message: str) -> None - Callback for handling data channel messages\n- on_error(ws: WebSocketApp, error: Exception) -> None - Callback for WebSocket errors\n- on_close(ws: WebSocketApp, close_status_code: int, close_msg: str) -> None - Callback for connection close events\n- on_control_open(ws: WebSocketApp) -> None - Callback for control connection opening\n- on_data_open(ws: WebSocketApp) -> None - Callback for data connection opening\n- set_parameter(parameter: str, value: Any) -> None - Sends a parameter set command to the server\n- get_parameter(parameter: str) -> Optional[Any] - Requests a parameter value from the server and waits for response\n- call_method(method: str, args: Optional[List] = None, kwargs: Optional[dict] = None) -> None - Calls a remote method on the server\n- shutdown() -> None - Gracefully shuts down both WebSocket connections",
    "Canonical_solution": "from typing import List, Optional, Union\nfrom urllib.parse import urlparse\nfrom websocket import WebSocketApp\nfrom websocket import ABNF\nimport threading\nimport socket\nimport struct\nimport json\n\nDEFAULT_CONTROL_URL = \"ws://127.0.0.1:8011\"\nDEFAULT_DATA_URL = \"ws://127.0.0.1:8012\"\n\nclass WebSocketClient:\n    def __init__(self, control_url: str = DEFAULT_CONTROL_URL, data_url: str = DEFAULT_DATA_URL, debug_mode: bool = False):\n        self.control_url = control_url\n        self.data_url = data_url\n        self.debug_mode = debug_mode\n        self.is_running = True\n        self.connection_established = threading.Event()\n        self.request_counter = 0\n        self.pending_requests = {}  # Map from request_id to threading.Event and value\n\n    def connect(self):\n        try:\n            # Connect to control WebSocket\n            self.control_ws = WebSocketApp(self.control_url,\n                                         on_message=self.on_control_message,\n                                         on_error=self.on_error,\n                                         on_close=self.on_close,\n                                         on_open=self.on_control_open)\n\n            self.control_ws_thread = threading.Thread(target=self.control_ws.run_forever)\n            self.control_ws_thread.daemon = False\n            self.control_ws_thread.start()\n\n            # Connect to data WebSocket\n            self.data_ws = WebSocketApp(self.data_url,\n                                      on_message=self.on_data_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close,\n                                      on_open=self.on_data_open)\n\n            self.data_ws_thread = threading.Thread(target=self.data_ws.run_forever)\n            self.data_ws_thread.daemon = False\n            self.data_ws_thread.start()\n\n            # Wait for the connections to be established\n            if not self.connection_established.wait(timeout=10):\n                if self.debug_mode:\n                    print(\"Timeout while connecting to the server.\")\n                return False\n\n            if self.debug_mode:\n                print(\"WebSocket connections established successfully.\")\n            return True\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error while connecting to the server: {e}\")\n            return False\n\n    def feed_audio(self, chunk, original_sample_rate=16000):\n        metadata = {\"sampleRate\": original_sample_rate}\n        metadata_json = json.dumps(metadata)\n        metadata_length = len(metadata_json)\n        message = struct.pack('<I', metadata_length) + metadata_json.encode('utf-8') + chunk\n\n        if self.is_running:\n            self.data_ws.send(message, opcode=ABNF.OPCODE_BINARY)\n\n    def on_control_message(self, ws, message):\n        try:\n            data = json.loads(message)\n            if 'status' in data:\n                if data['status'] == 'success':\n                    if 'parameter' in data and 'value' in data:\n                        request_id = data.get('request_id')\n                        if request_id is not None and request_id in self.pending_requests:\n                            if self.debug_mode:\n                                print(f\"Parameter {data['parameter']} = {data['value']}\")\n                            self.pending_requests[request_id]['value'] = data['value']\n                            self.pending_requests[request_id]['event'].set()\n                elif data['status'] == 'error':\n                    if self.debug_mode:\n                        print(f\"Server Error: {data.get('message', '')}\")\n            else:\n                if self.debug_mode:\n                    print(f\"Unknown control message format: {data}\")\n        except json.JSONDecodeError:\n            if self.debug_mode:\n                print(f\"Received non-JSON control message: {message}\")\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error processing control message: {e}\")\n\n    def on_data_message(self, ws, message):\n        try:\n            data = json.loads(message)\n            if self.debug_mode:\n                print(f\"Received data message: {data}\")\n        except json.JSONDecodeError:\n            if self.debug_mode:\n                print(f\"Received non-JSON data message: {message}\")\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error processing data message: {e}\")\n\n    def on_error(self, ws, error):\n        if self.debug_mode:\n            print(f\"WebSocket error: {error}\")\n\n    def on_close(self, ws, close_status_code, close_msg):\n        if self.debug_mode:\n            if ws == self.data_ws:\n                print(f\"Data WebSocket connection closed: {close_status_code} - {close_msg}\")\n            elif ws == self.control_ws:\n                print(f\"Control WebSocket connection closed: {close_status_code} - {close_msg}\")\n        \n        self.is_running = False\n\n    def on_control_open(self, ws):\n        if self.debug_mode:\n            print(\"Control WebSocket connection opened.\")\n        self.connection_established.set()\n\n    def on_data_open(self, ws):\n        if self.debug_mode:\n            print(\"Data WebSocket connection opened.\")\n\n    def set_parameter(self, parameter, value):\n        command = {\n            \"command\": \"set_parameter\",\n            \"parameter\": parameter,\n            \"value\": value\n        }\n        self.control_ws.send(json.dumps(command))\n\n    def get_parameter(self, parameter):\n        request_id = self.request_counter\n        self.request_counter += 1\n\n        command = {\n            \"command\": \"get_parameter\",\n            \"parameter\": parameter,\n            \"request_id\": request_id\n        }\n\n        event = threading.Event()\n        self.pending_requests[request_id] = {'event': event, 'value': None}\n\n        self.control_ws.send(json.dumps(command))\n\n        if event.wait(timeout=5):\n            value = self.pending_requests[request_id]['value']\n            del self.pending_requests[request_id]\n            return value\n        else:\n            if self.debug_mode:\n                print(f\"Timeout waiting for get_parameter {parameter}\")\n            del self.pending_requests[request_id]\n            return None\n\n    def call_method(self, method, args=None, kwargs=None):\n        command = {\n            \"command\": \"call_method\",\n            \"method\": method,\n            \"args\": args or [],\n            \"kwargs\": kwargs or {}\n        }\n        self.control_ws.send(json.dumps(command))\n\n    def shutdown(self):\n        self.is_running = False\n        if hasattr(self, 'control_ws'):\n            self.control_ws.close()\n        if hasattr(self, 'data_ws'):\n            self.data_ws.close()\n\n        if hasattr(self, 'control_ws_thread'):\n            self.control_ws_thread.join()\n        if hasattr(self, 'data_ws_thread'):\n            self.data_ws_thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport websocket\nimport json\nfrom typing import Any, Optional, List, Dict\nfrom queue import Queue\n\nDEFAULT_CONTROL_URL = \"ws://control.example.com\"\nDEFAULT_DATA_URL = \"ws://data.example.com\"\n\nclass WebSocketClient:\n    def __init__(self, control_url: str = DEFAULT_CONTROL_URL, data_url: str = DEFAULT_DATA_URL, debug_mode: bool = False) -> None:\n        self.control_url = control_url\n        self.data_url = data_url\n        self.debug_mode = debug_mode\n        self.is_running = False\n        self.connection_established = threading.Event()\n        self.request_counter = 0\n        self.pending_requests = {}\n        self.control_ws = None\n        self.data_ws = None\n        self.message_queue = Queue()\n        self.lock = threading.Lock()\n\n    def connect(self) -> bool:\n        if self.is_running:\n            return True\n\n        self.is_running = True\n        self.connection_established.clear()\n\n        try:\n            self.control_ws = websocket.WebSocketApp(\n                self.control_url,\n                on_message=self.on_control_message,\n                on_error=self.on_error,\n                on_close=self.on_close,\n                on_open=self.on_control_open\n            )\n            self.data_ws = websocket.WebSocketApp(\n                self.data_url,\n                on_message=self.data_message,\n                on_error=self.on_error,\n                on_close=self.on_close,\n                on_open=self.on_data_open\n            )\n\n            control_thread = threading.Thread(target=self.control_ws.run_forever)\n            data_thread = threading.Thread(target=self.data_ws.run_forever)\n\n            control_thread.start()\n            data_thread.start()\n\n            if self.connection_established.wait(timeout=10):\n                return True\n            else:\n                self.shutdown()\n                return False\n        except Exception as e:\n            self.shutdown()\n            return False\n\n    def feed_audio(self, chunk: bytes, original_sample_rate: int = 16000) -> None:\n        if self.data_ws and self.data_ws.sock and self.data_ws.sock.connected:\n            audio_data = {\n                \"audio\": chunk.hex(),\n                \"sample_rate\": original_sample_rate\n            }\n            self.data_ws.send(json.dumps(audio_data))\n\n    def on_control_message(self, ws: websocket.WebSocketApp, message: str) -> None:\n        if self.debug_mode:\n            print(f\"Control Message Received: {message}\")\n        try:\n            data = json.loads(message)\n            request_id = data.get(\"request_id\")\n            if request_id in self.pending_requests:\n                self.pending_requests[request_id][\"response\"] = data.get(\"result\")\n                self.pending_requests[request_id][\"event\"].set()\n        except json.JSONDecodeError:\n            if self.debug_mode:\n                print(\"Received invalid JSON message on control channel\")\n\n    def on_data_message(self, ws: websocket.WebSocketApp, message: str) -> None:\n        if self.debug_mode:\n            print(f\"Data Message Received: {message}\")\n\n    def on_error(self, ws: websocket.WebSocketApp, error: Exception) -> None:\n        if self.debug_mode:\n            print(f\"WebSocket Error: {error}\")\n        self.shutdown()\n\n    def on_close(self, ws: websocket.WebSocketApp, close_status_code: int, close_msg: str) -> None:\n        if self.debug_mode:\n            print(f\"Connection closed: {close_status_code} - {close_msg}\")\n        self.shutdown()\n\n    def on_control_open(self, ws: websocket.WebSocketApp) -> None:\n        if self.debug_mode:\n            print(\"Control connection opened\")\n        self.connection_established.set()\n\n    def on_data_open(self, ws: websocket.WebSocketApp) -> None:\n        if self.debug_mode:\n            print(\"Data connection opened\")\n\n    def set_parameter(self, parameter: str, value: Any) -> None:\n        request_id = self._generate_request_id()\n        payload = {\n            \"command\": \"set\",\n            \"parameter\": parameter,\n            \"value\": value,\n            \"request_id\": request_id\n        }\n        if self.control_ws and self.control_ws.sock and self.control_ws.sock.connected:\n            self.control_ws.send(json.dumps(payload))\n\n    def get_parameter(self, parameter: str) -> Optional[Any]:\n        request_id = self._generate_request_id()\n        event = threading.Event()\n        self.pending_requests[request_id] = {\"event\": event, \"response\": None}\n        payload = {\n            \"command\": \"get\",\n            \"parameter\": parameter,\n            \"request_id\": request_id\n        }\n        if self.control_ws and self.control_ws.sock and self.control_ws.sock.connected:\n            self.control_ws.send(json.dumps(payload))\n        event.wait(timeout=5)\n        result = self.pending_requests.get(request_id, {}).get(\"response\")\n        del self.pending_requests[request_id]\n        return result\n\n    def call_method(self, method: str, args: Optional[List] = None, kwargs: Optional[Dict] = None) -> None:\n        request_id = self._generate_request_id()\n        payload = {\n            \"command\": \"call\",\n            \"method\": method,\n            \"args\": args or [],\n            \"kwargs\": kwargs or {},\n            \"request_id\": request_id\n        }\n        if self.control_ws and self.control_ws.sock and self.control_ws.sock.connected:\n            self.control_ws.send(json.dumps(payload))\n\n    def shutdown(self) -> None:\n        self.is_running = False\n        if self.control_ws:\n            self.control_ws.close()\n        if self.data_ws:\n            self.data_ws.close()"
  },
  {
    "Task_id": 445,
    "Instruction": "Task Description: Implement a WebSocket server using FastAPI that validates user sessions by performing a bitwise operation on received user and session IDs.\n\nFunction Description: The function `websocket_endpoint` establishes a WebSocket connection, receives binary data containing user and session IDs, validates them using a specific bitwise operation, and sends back the validation result as binary data.\n\nInput: \n- websocket: WebSocket - The WebSocket connection object provided by FastAPI\n- data: bytes - Binary data received from the client containing packed user_id and session_id (two unsigned 32-bit integers in little-endian format)\n\nOutput: \n- None (The function sends binary data back through the WebSocket connection but doesn't return anything)\n- The sent data contains a packed unsigned 32-bit integer (little-endian) representing the validation result (1 for valid, 0 for invalid)",
    "Canonical_solution": "from fastapi import FastAPI, WebSocket\nimport struct\n\napp = FastAPI()\n\n@app.websocket('/validate_session_ws')\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        user_id, session_id = struct.unpack('<II', data)\n        result = (user_id ^ session_id) % 23 == 0\n        await websocket.send_bytes(struct.pack('<I', result))",
    "Code_level": "Function-level",
    "FSMID_for_test": 48,
    "right_result": "import asyncio\nimport struct\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        if len(data) != 8:\n            await websocket.send_bytes(struct.pack('<I', 0))\n            continue\n        try:\n            user_id, session_id = struct.unpack('<II', data)\n        except struct.error:\n            await websocket.send_bytes(struct.pack('<I', 0))\n            continue\n        result = (user_id & session_id) >> 31\n        await websocket.send_bytes(struct.pack('<I', result))"
  },
  {
    "Task_id": 446,
    "Instruction": "Task Description: Create a WebSocket server using FastAPI that accepts client connections, sends a sequence of numbers at a specified interval, and then closes the connection.\n\nFunction Description: The function `websocket_endpoint` establishes a WebSocket connection with a client, sends a sequence of numbers (0 to 4) at a specified time interval, and then closes the connection. It handles any exceptions that may occur during the process.\n\nInput:  \n- `websocket`: WebSocket - The WebSocket connection instance provided by FastAPI.  \n- `interval`: int (default: 1) - The time interval (in seconds) between sending consecutive numbers.  \n\nOutput: None (The function sends messages over the WebSocket but does not return any value.)",
    "Canonical_solution": "import asyncio\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket, interval: int = 1):\n    await websocket.accept()\n    try:\n        for i in range(5):\n            await websocket.send_text(str(i))\n            await asyncio.sleep(interval)\n        await websocket.close()\n    except Exception as e:\n        print(e)",
    "Code_level": "Function-level",
    "FSMID_for_test": 48,
    "right_result": "from fastapi import FastAPI, WebSocket\nimport asyncio\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket, interval: int = 1):\n    await websocket.accept()\n    try:\n        for i in range(5):\n            await websocket.send_text(str(i))\n            await asyncio.sleep(interval)\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        await websocket.close()"
  },
  {
    "Task_id": 448,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python that handles WebSocket connections, processes incoming messages, and manages connection lifecycle events.\n\nClass Description: WebSocketServer is a class that sets up a Tornado WebSocket server with an echo handler that sends received messages back to the client.\n\nAttributes:\n- close_future: [Future] - A Future object used to track when the WebSocket connection is closed.\n- app: [Application] - The Tornado web application instance that routes WebSocket connections.\n\nMethods:\n- __init__: [__init__]() -> [None] - Initializes the WebSocket server, creates the Application instance, and sets up the echo handler route.\n- get_app: [get_app]() -> [Application] - Returns the Tornado web application instance.\n- ws_connect: [ws_connect](path: str, **kwargs: dict) -> [WebSocketClientConnection] - Establishes a WebSocket connection to the specified path with optional connection parameters.\n\nClass Description: TestWebSocketHandler is a base WebSocket handler class that provides common functionality for WebSocket connections.\n\nAttributes:\n- close_future: [Future] - A Future object used to signal when the connection is closed.\n- compression_options: [dict] - Options for WebSocket compression.\n\nMethods:\n- initialize: [initialize](close_future: Future = None, compression_options: dict = None) -> [None] - Initializes the handler with optional close_future and compression_options.\n- get_compression_options: [get_compression_options]() -> [dict] - Returns the compression options for the WebSocket connection.\n- on_close: [on_close]() -> [None] - Called when the WebSocket connection is closed; resolves the close_future if it exists.\n\nClass Description: EchoHandler is a WebSocket handler that echoes received messages back to the client.\n\nMethods:\n- on_message: [on_message](message: str or bytes) -> [None] - Handles incoming WebSocket messages and echoes them back to the client. Handles cancellation and closed connection errors gracefully.",
    "Canonical_solution": "from tornado.websocket import WebSocketHandler\nfrom tornado.web import Application\nfrom tornado.concurrent import Future\nfrom tornado import gen\n\nclass TestWebSocketHandler(WebSocketHandler):\n    def initialize(self, close_future=None, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options\n\n    def get_compression_options(self):\n        return self.compression_options\n\n    def on_close(self):\n        if self.close_future is not None:\n            self.close_future.set_result((self.close_code, self.close_reason))\n\nclass EchoHandler(TestWebSocketHandler):\n    @gen.coroutine\n    def on_message(self, message):\n        try:\n            yield self.write_message(message, isinstance(message, bytes))\n        except asyncio.CancelledError:\n            pass\n        except WebSocketClosedError:\n            pass\n\nclass WebSocketServer:\n    def __init__(self):\n        self.close_future = Future()\n        self.app = Application([\n            (\"/echo\", EchoHandler, dict(close_future=self.close_future))\n        ])\n\n    def get_app(self):\n        return self.app\n\n    @gen.coroutine\n    def ws_connect(self, path, **kwargs):\n        ws = yield websocket_connect(\n            \"ws://127.0.0.1:%d%s\" % (self.get_http_port(), path), **kwargs\n        )\n        raise gen.Return(ws)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nfrom tornado.concurrent import Future\n\nclass TestWebSocketHandler(tornado.websocket.WebSocketHandler):\n    def __init__(self, *args, **kwargs):\n        self.close_future = kwargs.pop('close_future', None)\n        self.compression_options = kwargs.pop('compression_options', {})\n        super().__init__(*args, **kwargs)\n\n    def get_compression_options(self):\n        return self.compression_options\n\n    def on_close(self):\n        if self.close_future:\n            self.close_future.set_result(None)\n\nclass EchoHandler(TestWebSocketHandler):\n    def on_message(self, message):\n        try:\n            self.write_message(message)\n        except tornado.websocket.WebSocketClosedError:\n            pass\n        except Exception as e:\n            self.close()\n            raise e\n\nclass WebSocketServer:\n    def __init__(self):\n        self.close_future = Future()\n        self.app = tornado.web.Application([\n            (r'/websocket', EchoHandler, {'close_future': self.close_future, 'compression_options': {}})\n        ])\n\n    def get_app(self):\n        return self.app\n\n    def ws_connect(self, path, **kwargs):\n        return tornado.websocket.websocket_connect(path, **kwargs)"
  },
  {
    "Task_id": 450,
    "Instruction": "Task Description: Create a WebSocket server using Tornado in Python to handle WebSocket connections, messages, and disconnections.\n\nClass Description: The WebSocketServer class initializes and starts a Tornado-based WebSocket server that listens on a specified port. It uses a WebSocketHandler to manage individual WebSocket connections.\n\nAttributes:\n- port: int - The port number on which the WebSocket server will listen.\n- app: tornado.web.Application - The Tornado application instance that routes WebSocket connections.\n- server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the WebSocket application.\n\nMethods:\n- __init__(port: int = 8080) -> None - Initializes the WebSocketServer with the specified port (default: 8080).\n- start() -> None - Starts the WebSocket server and begins listening for incoming connections.\n\nClass Description: The WebSocketHandler class extends tornado.websocket.WebSocketHandler to handle WebSocket connection events.\n\nMethods:\n- open() -> None - Called when a new WebSocket connection is opened.\n- on_message(msg: str) -> None - Called when a message is received from the WebSocket client.\n- on_close() -> None - Called when the WebSocket connection is closed.\n- check_origin(origin: str) -> bool - Overrides the origin check to allow connections from any origin (returns True).",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport tornado.httpserver\nimport tornado.ioloop\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        print('opened')\n\n    def on_message(self, msg):\n        print('onmessage', msg)\n\n    def on_close(self):\n        print('closed')\n\n    def check_origin(self, origin):\n        return True\n\nclass WebSocketServer:\n    def __init__(self, port=8080):\n        self.port = port\n        self.app = tornado.web.Application([\n            ('.*', WebSocketHandler)\n        ])\n        self.server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        print(\"WebSocket opened\")\n\n    def on_message(self, msg):\n        print(f\"Received message: {msg}\")\n        self.write_message(f\"Echo: {msg}\")\n\n    def on_close(self):\n        print(\"WebSocket closed\")\n\n    def check_origin(self, origin):\n        return True\n\nclass WebSocketServer:\n    def __init__(self, port: int = 8080):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/websocket\", WebSocketHandler),\n        ])\n        self.server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.server.listen(self.port)\n        print(f\"WebSocket server started on port {self.port}\")\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 451,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python to handle real-time communication with clients, including processing video frames and managing participant data.\n\nClass Description: WebSocketHandler is a Tornado WebSocket handler class that manages WebSocket connections, processes incoming messages, and handles the lifecycle of WebSocket connections.\n\nAttributes:\n- None explicitly defined in the class (uses global variables for state management)\n\nMethods:\n- open() -> None - Called when a new WebSocket connection is established. Initializes participant position and calls newParticipant.\n- on_message(message: str) -> None - Handles incoming WebSocket messages. Processes different message types (identified by 'msgID') to manage video frame extraction, data writing to CSV, and frame navigation.\n- on_close() -> None - Called when the WebSocket connection is closed (currently empty implementation).\n- on_error() -> None - Called when an error occurs (not shown in the reference code but typically part of WebSocketHandler).\n\nClass Description: Application is a Tornado web application class that routes WebSocket and static file requests.\n\nAttributes:\n- None explicitly defined (inherits from tornado.web.Application)\n\nMethods:\n- __init__() -> None - Initializes the application with URL handlers for WebSocket connections and static files, and configures template paths.\n\nNote: The reference code also uses several global variables and helper functions (newParticipant, sendVideoEnd, sendVideoFrame, writeDataToCSV, writeScreenCapOutputFrames, closeScreenCapOutVideo) which are not part of the class definitions but are used by the WebSocketHandler methods.",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport tornado.escape\nimport json\nimport csv\nimport os\nimport glob\nimport numpy as np\nimport subprocess\nimport re\nfrom itertools import chain\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        global_variables.participantPos = -1\n        newParticipant(self)\n\n    def on_message(self, message):\n        msg = tornado.escape.json_decode(message)\n        \n        if msg['msgID'] == '1':\n            global_variables.participant.videosPos += 1\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            video = global_variables.participant.directory + '/' + pv.filename\n            \n            outDir = outputPrefix + video + \"_frames\" + '/'\n            if not os.path.isdir(outDir):\n                os.makedirs(outDir)\n\n            gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n            gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n            \n            if os.path.isfile(gpCSVDone):\n                sendVideoEnd(self)\n                return\n            elif os.path.isfile(gpCSV):\n                os.remove(gpCSV)\n                if writeCSV:\n                    with open(gpCSV, 'w', newline='') as csvfile:\n                        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',', quoting=csv.QUOTE_ALL)\n                        writer.writeheader()\n\n            framesDoneFile = outDir + '/' + \"framesExtracted.txt\"\n            if not os.path.isfile(framesDoneFile):\n                completedProcess = subprocess.run('ffmpeg -i \"./' + video + '\" -vf showinfo \"' + outDir + 'frame_%08d.png\"',\n                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, shell=True)\n\n                nFrames = len(glob.glob(outDir + '*.png'))\n                if nFrames == 0:\n                    sendVideoEnd(self)\n                    return\n\n                allPts = np.ones(nFrames, dtype=np.int) * -1\n                ptsTimebase = -1\n                framerate = -1\n                lines = completedProcess.stderr.splitlines()\n                for l in lines:\n                    if l.startswith(\"[Parsed_showinfo_0 @\"):\n                        timebase = l.find(\"config in time_base:\")\n                        fr = l.find(\", frame_rate:\")\n                        nStart = l.find(\"n:\")\n                        ptsStart = l.find(\"pts:\")\n                        pts_timeStart = l.find(\"pts_time:\")\n                        if nStart >= 0 and ptsStart >= 0:\n                            frameNum = int(l[nStart+2:ptsStart-1].strip())\n                            pts = int(l[ptsStart+4:pts_timeStart].strip())\n                            allPts[frameNum] = pts\n                        elif timebase >= 0:\n                            ptsTimebase = l[timebase+20:fr].strip()\n                            framerate = l[fr+13:].strip()\n                            sl = framerate.find(\"/\")\n                            if sl > 0:\n                                frPre = framerate[0:sl]\n                                frPost = framerate[sl+1:]\n                                framerate = float(frPre) / float(frPost)\n                            else:\n                                framerate = float(framerate)\n\n                prev = 0\n                for i in range(0, nFrames):\n                    if allPts[i] == -1:\n                        allPts[i] = prev + int(1000/framerate)\n                    prev = allPts[i]\n\n                for i in range(0, nFrames):\n                    inputFile = outDir + frameExtractFormat.format(i+1)\n                    outputFile = outDir + frameOutFormat.format(i, allPts[i])\n                    os.rename(inputFile, outputFile)\n\n                with open(framesDoneFile, 'w') as f:\n                    f.write(\"Done.\")\n\n            pv.frameFilesList = sorted(glob.glob(outDir + '*.png'))\n            pv.frameFilesPos = 0\n            sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n        elif msg['msgID'] == '3':\n            frameTimeEpoch = writeDataToCSV(global_variables.participant, msg)\n\n            if global_variables.writeScreenCapVideo:\n                writeScreenCapOutputFrames(global_variables.participant, frameTimeEpoch)\n\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            pv.frameFilesPos += 1\n\n            if pv.frameFilesPos >= len(pv.frameFilesList):\n                if global_variables.writeScreenCapVideo:\n                    closeScreenCapOutVideo(global_variables.participant)\n\n                gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n                gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n                if os.path.isfile(gpCSV):\n                    os.rename(gpCSV, gpCSVDone)\n\n                sendVideoEnd(self)\n            else:\n                sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n    def on_close(self):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r'/websocket', WebSocketHandler),\n            (r'/(.*)', tornado.web.StaticFileHandler, {'path': '.', 'default_filename': ''}),\n        ]\n        settings = {\n            'template_path': 'templates'\n        }\n        tornado.web.Application.__init__(self, handlers, **settings)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nimport cv2\nimport numpy as np\nimport csv\nimport os\n\nglobal participants\nparticipants = {}\n\ndef newParticipant(participant_id):\n    participants[participant_id] = {\n        'position': (0, 0),\n        'video_frames': [],\n        'screen_cap_frames': []\n    }\n\ndef sendVideoEnd(participant_id):\n    pass\n\ndef sendVideoFrame(participant_id, frame):\n    pass\n\ndef writeDataToCSV(participant_id, data):\n    with open(f\"{participant_id}_data.csv\", \"a\", newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(data)\n\ndef writeScreenCapOutputFrames(participant_id, frame):\n    participants[participant_id]['screen_cap_frames'].append(frame)\n\ndef closeScreenCapOutVideo(participant_id):\n    pass\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        participant_id = self.get_argument(\"id\")\n        newParticipant(participant_id)\n        print(f\"Connection opened for participant {participant_id}\")\n\n    def on_message(self, message):\n        try:\n            data = eval(message)\n            msgID = data.get('msgID')\n            if msgID == 'video_frame':\n                participant_id = data.get('id')\n                frame_data = data.get('frame')\n                frame = np.frombuffer(frame_data, dtype=np.uint8)\n                frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)\n                participants[participant_id]['video_frames'].append(frame)\n                writeDataToCSV(participant_id, [len(participants[participant_id]['video_frames'])])\n                sendVideoFrame(participant_id, frame)\n            elif msgID == 'screen_cap':\n                participant_id = data.get('id')\n                frame_data = data.get('frame')\n                frame = np.frombuffer(frame_data, dtype=np.uint8)\n                frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)\n                writeScreenCapOutputFrames(participant_id, frame)\n            elif msgID == 'navigate_frame':\n                participant_id = data.get('id')\n                frame_num = data.get('frame_num')\n                frame = participants[participant_id]['video_frames'][frame_num]\n                sendVideoFrame(participant_id, frame)\n            elif msgID == 'end_video':\n                participant_id = data.get('id')\n                sendVideoEnd(participant_id)\n                closeScreenCapOutVideo(participant_id)\n        except Exception as e:\n            print(f\"Error processing message: {e}\")\n\n    def on_close(self):\n        print(\"WebSocket closed\")\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/websocket\", WebSocketHandler),\n            (r\"/(.*)\", tornado.web.StaticFileHandler, {\"path\": os.path.join(os.path.dirname(__file__), \"static\")}),\n        ]\n        settings = {\n            \"template_path\": os.path.join(os.path.dirname(__file__), \"templates\"),\n            \"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n        }\n        super().__init__(handlers, **settings)\n\nif __name__ == \"__main__\":\n    app = Application()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 456,
    "Instruction": "Task Description: Create a WebSocket echo server using Autobahn and Twisted in Python that can handle multiple WebSocket endpoints with different prefixes for echoing messages.\n\nClass Description: WebSocketEchoServer is a class that implements a WebSocket server capable of handling multiple WebSocket endpoints (paths) with configurable echo prefixes. It uses Twisted's reactor pattern and Autobahn's WebSocket implementation.\n\nAttributes:\n- port: int - The TCP port number on which the WebSocket server will listen (default: 9000)\n- paths: dict - A dictionary mapping WebSocket paths to their corresponding echo prefixes (default: {\"echo1\": \"Echo 1\", \"echo2\": \"Echo 2\"})\n- resources: dict - A dictionary to store the created WebSocket resources for each path\n\nMethods:\n- __init__(port: int = 9000, paths: dict = None) -> None - Initializes the WebSocket echo server with optional port and path configurations\n- create_factory(protocol_class: class, prefix: str) -> WebSocketResource - Creates and configures a WebSocket server factory with the given protocol class and prefix\n- run() -> None - Starts the WebSocket server by creating resources for all paths, setting up the site, and running the reactor loop",
    "Canonical_solution": "from twisted.internet import reactor\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom autobahn.twisted.resource import WebSocketResource\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def __init__(self, prefix=\"Echo\"):\n        self.prefix = prefix\n\n    def onMessage(self, payload, isBinary):\n        if not isBinary:\n            msg = \"{} - {}\".format(self.prefix, payload.decode('utf8'))\n            print(msg)\n            self.sendMessage(msg.encode('utf8'))\n\nclass WebSocketEchoServer:\n    def __init__(self, port=9000, paths=None):\n        self.port = port\n        self.paths = paths or {\"echo1\": \"Echo 1\", \"echo2\": \"Echo 2\"}\n        self.resources = {}\n\n    def create_factory(self, protocol_class, prefix):\n        factory = WebSocketServerFactory()\n        factory.protocol = protocol_class\n        factory.prefix = prefix\n        factory.startFactory()\n        return WebSocketResource(factory)\n\n    def run(self):\n        for path, prefix in self.paths.items():\n            protocol = lambda: EchoServerProtocol(prefix)\n            self.resources[path] = self.create_factory(protocol, prefix)\n\n        root = Data(\"\", \"text/plain\")\n        for path, resource in self.resources.items():\n            root.putChild(path.encode('utf8'), resource)\n\n        site = Site(root)\n        reactor.listenTCP(self.port, site)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "right_result": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.web.server import Site\nfrom twisted.web.resource import Resource\nfrom twisted.internet import reactor\n\n\nclass EchoWebSocketProtocol(WebSocketServerProtocol):\n    def __init__(self, prefix):\n        self.prefix = prefix\n\n    def onMessage(self, payload, isBinary):\n        message = payload.decode('utf8')\n        echo_message = f\"{self.prefix}: {message}\"\n        self.sendMessage(echo_message.encode('utf8'), isBinary)\n\n\nclass WebSocketEchoServer:\n    def __init__(self, port: int = 9000, paths: dict = None):\n        self.port = port\n        self.paths = paths or {\"echo1\": \"Echo 1\", \"echo2\": \"Echo 2\"}\n        self.resources = {}\n\n    def create_factory(self, protocol_class, prefix):\n        factory = WebSocketServerFactory()\n        factory.protocol = lambda: protocol_class(prefix)\n        resource = Resource()\n        resource.putChild(b\"\", factory)\n        self.resources[prefix] = resource\n        return resource\n\n    def run(self):\n        root = Resource()\n        for path, prefix in self.paths.items():\n            resource = self.create_factory(EchoWebSocketProtocol, prefix)\n            root.putChild(path.encode('utf8'), resource)\n\n        site = Site(root)\n        reactor.listenTCP(self.port, site)\n        reactor.run()"
  },
  {
    "Task_id": 458,
    "Instruction": "Task Description: Implement a WebSocket server using Autobahn and Twisted in Python that handles incoming connections and echoes received messages back to clients.\n\nClass Description: The WebSocketServer class creates and manages a WebSocket server that listens for incoming connections, handles WebSocket protocols, and serves static files.\n\nAttributes:\n- host: str - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 8080)\n- path: str - The URL path for WebSocket connections (default: \"ws\")\n- factory: WebSocketServerFactory - The factory that manages WebSocket protocol instances\n- resource: WebSocketResource - The WebSocket resource to handle WebSocket connections\n- root: File - The root filesystem resource for serving static files\n- site: Site - The Twisted web site that serves both WebSocket and static content\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 8080, path: str = \"ws\") -> None - Initializes the WebSocket server with specified host, port, and path\n- run() -> None - Starts the WebSocket server and begins listening for connections",
    "Canonical_solution": "from twisted.internet import reactor\nfrom twisted.python import log\nfrom twisted.web.server import Site\nfrom twisted.web.static import File\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom autobahn.twisted.resource import WebSocketResource\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"WebSocket connection request: {}\".format(request))\n\n    def onMessage(self, payload, isBinary):\n        self.sendMessage(payload, isBinary)\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=8080, path=\"ws\"):\n        self.host = host\n        self.port = port\n        self.path = path\n\n        self.factory = WebSocketServerFactory(\"ws://{}:{}\".format(host, port))\n        self.factory.protocol = EchoServerProtocol\n\n        self.resource = WebSocketResource(self.factory)\n        self.root = File(\".\")\n        self.root.putChild(path.encode(), self.resource)\n        self.site = Site(self.root)\n\n    def run(self):\n        log.startLogging(sys.stdout)\n        reactor.listenTCP(self.port, self.site)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "right_result": "from twisted.web.server import Site\nfrom twisted.web.static import File\nfrom twisted.internet import reactor\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\n\nclass EchoWebSocketServerProtocol(WebSocketServerProtocol):\n    def onMessage(self, payload, isBinary):\n        self.sendMessage(payload, isBinary)\n\nclass WebSocketServer:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 8080, path: str = \"ws\"):\n        self.host = host\n        self.port = port\n        self.path = path\n        self.factory = WebSocketServerFactory(u\"ws://{}:{}/{}\".format(host, port, path), debug=False)\n        self.factory.protocol = EchoWebSocketServerProtocol\n        self.resource = self.factory.get_resource()\n        self.root = File(\".\")\n        self.root.putChild(path.encode('utf-8'), self.resource)\n        self.site = Site(self.root)\n\n    def run(self):\n        reactor.listenTCP(self.port, self.site)\n        reactor.run()"
  },
  {
    "Task_id": 460,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections asynchronously, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and starts the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, processing messages as they arrive)\n- For each message processed, sends a JSON response back through the WebSocket connection\n\nMethods:\n- server(websocket, path) -> None - Handles incoming WebSocket connections and message processing\n- start_websocket_server() -> None - Starts the WebSocket server and runs the event loop",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            operation = data.get(\"operation\")\n            payload = data.get(\"payload\", \"\")\n\n            if operation == \"echo\":\n                response = {\"status\": \"success\", \"message\": f\"Echo: {payload}\"}\n            elif operation == \"ask\":\n                response = {\"status\": \"success\", \"message\": f\"Asked: {payload}\"}\n            elif operation == \"throw\":\n                response = {\"status\": \"error\", \"message\": \"Operation not allowed\"}\n            else:\n                response = {\"status\": \"error\", \"message\": \"Unknown operation\"}\n\n            await websocket.send(json.dumps(response))\n        except json.JSONDecodeError:\n            await websocket.send(json.dumps({\"status\": \"error\", \"message\": \"Invalid JSON\"}))\n\ndef start_websocket_server():\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(websockets.serve(server, \"localhost\", 8765))\n    loop.run_forever()"
  },
  {
    "Task_id": 463,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- For the server function: None (continuously processes messages until connection ends)\n- For start_websocket_server function: None (runs indefinitely until interrupted)\n\nMethods:\n- server: async (websocket, path) -> None - Handles WebSocket connections and message processing\n- start_websocket_server: () -> None - Starts and runs the WebSocket server\n\nNote: The server expects JSON messages with a 'function' field (either 'echo', 'ask', or 'throw') and an 'args' array. It will respond with a modified JSON object containing either a 'return' field with the result or a 'throw' field with an error message.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            func = data.get('function')\n            args = data.get('args', [])\n            \n            if func == 'echo':\n                result = f\"Echo: {args[0]}\" if args else \"Echo: No argument provided\"\n                await websocket.send(json.dumps({\"return\": result}))\n            elif func == 'ask':\n                question = args[0] if args else \"What is your name?\"\n                await websocket.send(json.dumps({\"return\": f\"Answer: {question}\"}))\n            elif func == 'throw':\n                error_msg = args[0] if args else \"An unknown error occurred\"\n                await websocket.send(json.dumps({\"throw\": error_msg}))\n            else:\n                await websocket.send(json.dumps({\"throw\": \"Invalid function specified\"}))\n        except json.JSONDecodeError:\n            await websocket.send(json.dumps({\"throw\": \"Invalid JSON format\"}))\n\ndef start_websocket_server():\n    start_server = websockets.serve(server, \"localhost\", 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 464,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send appropriate responses based on the requested function.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, and responds based on the specified function in the message. It supports three main operations: echo (returns the first argument), ask (prompts user input for the first argument), and throw (returns an error with the first argument). Unknown functions result in an error response.\n\nInput: \n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely, sending responses back through the WebSocket connection)\n\nTask Description: Create a WebSocket server that listens on a specified host and port, handles client connections asynchronously, and processes JSON-formatted requests with different function calls.\n\nFunction Description: The start_websocket_server function initializes and starts a WebSocket server that runs indefinitely, using the server function to handle incoming connections and messages.\n\nInput: None\n\nOutput: None (The function runs the server indefinitely until interrupted)",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            func = data.get(\"function\")\n            args = data.get(\"args\", [])\n            if not args:\n                await websocket.send(json.dumps({\"error\": \"No arguments provided\"}))\n                continue\n            arg1 = args[0]\n            if func == \"echo\":\n                response = {\"result\": arg1}\n            elif func == \"ask\":\n                user_input = input(f\"Enter value for {arg1}: \")\n                response = {\"result\": user_input}\n            elif func == \"throw\":\n                response = {\"error\": arg1}\n            else:\n                response = {\"error\": \"Unknown function\"}\n            await websocket.send(json.dumps(response))\n        except json.JSONDecodeError:\n            await websocket.send(json.dumps({\"error\": \"Invalid JSON format\"}))\n\ndef start_websocket_server():\n    start_server = websockets.serve(server, \"localhost\", 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 465,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON data, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, maintaining the WebSocket connection and processing messages)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": str (one of 'echo', 'ask', 'throw', or other),\n  \"args\": list (arguments for the specified function),\n  \"return\": any (will be populated in response),\n  \"throw\": any (will be populated in case of errors)\n}",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            function = data.get(\"function\")\n            args = data.get(\"args\", [])\n            response = {\"return\": None, \"throw\": None}\n\n            if function == \"echo\":\n                response[\"return\"] = args\n            elif function == \"ask\":\n                response[\"return\"] = f\"Asked with {args}\"\n            elif function == \"throw\":\n                response[\"throw\"] = f\"Error: {args[0]}\"\n            else:\n                response[\"throw\"] = \"Unknown function\"\n\n            await websocket.send(json.dumps(response))\n        except json.JSONDecodeError:\n            await websocket.send(json.dumps({\"return\": None, \"throw\": \"Invalid JSON\"}))\n        except Exception as e:\n            await websocket.send(json.dumps({\"return\": None, \"throw\": str(e)}))\n\ndef start_websocket_server():\n    start_server = websockets.serve(server, \"localhost\", 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 466,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, processing messages and sending responses through the WebSocket connection)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": \"echo|ask|throw\",  // Operation to perform\n  \"args\": [...]                // Arguments for the operation\n}",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        data = json.loads(message)\n        func = data.get(\"function\")\n        args = data.get(\"args\", [])\n        \n        if func == \"echo\":\n            response = {\"result\": args[0] if args else None}\n        elif func == \"ask\":\n            response = {\"result\": \"answered\"}\n        elif func == \"throw\":\n            response = {\"error\": \"an error occurred\"}\n        else:\n            response = {\"error\": \"unknown function\"}\n        \n        await websocket.send(json.dumps(response))\n\ndef start_websocket_server():\n    start_server = websockets.serve(server, \"localhost\", 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 468,
    "Instruction": "Task Description: Implement a WebSocket client for bidirectional audio streaming that connects to a server, records audio when a key is pressed, streams it to the server, and plays back received audio. The client should handle connection retries and manage audio streams efficiently.\n\nClass Description: The `Device` class represents a WebSocket client for audio streaming. It handles WebSocket connection management, audio recording and playback, and keyboard input for controlling the recording state.\n\nAttributes:\n- server_url: str - The URL of the WebSocket server to connect to.\n- p: pyaudio.PyAudio - PyAudio instance for handling audio streams.\n- websocket: websockets.WebSocketClientProtocol - The WebSocket connection object.\n- recording: bool - Flag indicating whether audio is currently being recorded.\n- input_stream: pyaudio.Stream - Audio input stream for recording.\n- output_stream: pyaudio.Stream - Audio output stream for playback.\n- spinner: yaspin.Yaspin - Spinner object for visual feedback during recording.\n- play_audio: bool - Flag controlling whether received audio should be played.\n- CHUNK: int - Number of audio frames per buffer.\n- FORMAT: int - Audio sample format (paInt16).\n- CHANNELS: int - Number of audio channels (1 for mono).\n- RECORDING_RATE: int - Sample rate for recording (16000 Hz).\n- PLAYBACK_RATE: int - Sample rate for playback (24000 Hz).\n\nMethods:\n- __init__() -> None - Initializes the Device instance with default values.\n- connect_with_retry(max_retries: int = 50, retry_delay: int = 2) -> None - Attempts to connect to the WebSocket server with retry logic.\n- send_audio() -> None - Handles audio recording and streaming to the server while recording is active.\n- receive_audio() -> None - Receives audio data from the server and plays it back if enabled.\n- on_press(key: keyboard.Key) -> None - Callback for key press events (starts recording when CTRL is pressed).\n- on_release(key: keyboard.Key) -> None - Callback for key release events (stops recording when CTRL is released).\n- main() -> None - Main coroutine that manages the WebSocket connection and audio tasks.\n- start() -> None - Starts the asyncio event loop to run the main coroutine.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport pyaudio\nfrom pynput import keyboard\nimport json\nfrom yaspin import yaspin\n\nclass Device:\n    def __init__(self):\n        self.server_url = \"0.0.0.0:10001\"\n        self.p = pyaudio.PyAudio()\n        self.websocket = None\n        self.recording = False\n        self.input_stream = None\n        self.output_stream = None\n        self.spinner = yaspin()\n        self.play_audio = True\n        self.CHUNK = 1024\n        self.FORMAT = pyaudio.paInt16\n        self.CHANNELS = 1\n        self.RECORDING_RATE = 16000\n        self.PLAYBACK_RATE = 24000\n\n    async def connect_with_retry(self, max_retries=50, retry_delay=2):\n        for attempt in range(max_retries):\n            try:\n                self.websocket = await websockets.connect(f\"ws://{self.server_url}\")\n                return\n            except ConnectionRefusedError:\n                if attempt % 8 == 0 and attempt != 0:\n                    print(f\"Loading...\")\n                await asyncio.sleep(retry_delay)\n        raise Exception(\"Failed to connect to the server after multiple attempts\")\n\n    async def send_audio(self):\n        self.input_stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, rate=self.RECORDING_RATE, input=True, frames_per_buffer=self.CHUNK)\n        while True:\n            if self.recording:\n                try:\n                    await self.websocket.send(json.dumps({\"role\": \"user\", \"type\": \"audio\", \"format\": \"bytes.wav\", \"start\": True}))\n                    while self.recording:\n                        data = self.input_stream.read(self.CHUNK, exception_on_overflow=False)\n                        await self.websocket.send(data)\n                    await self.websocket.send(json.dumps({\"role\": \"user\", \"type\": \"audio\", \"format\": \"bytes.wav\", \"end\": True}))\n                except Exception as e:\n                    print(f\"Error in send_audio: {e}\")\n            await asyncio.sleep(0.01)\n\n    async def receive_audio(self):\n        self.output_stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, rate=self.PLAYBACK_RATE, output=True, frames_per_buffer=self.CHUNK)\n        while True:\n            try:\n                data = await self.websocket.recv()\n                if self.play_audio and isinstance(data, bytes) and not self.recording:\n                    self.output_stream.write(data)\n            except Exception as e:\n                await self.connect_with_retry()\n\n    def on_press(self, key):\n        if key == keyboard.Key.ctrl and not self.recording:\n            print(\"\")\n            self.spinner.start()\n            self.recording = True\n\n    def on_release(self, key):\n        if key == keyboard.Key.ctrl:\n            self.spinner.stop()\n            self.recording = False\n\n    async def main(self):\n        await self.connect_with_retry()\n        print(\"\\nHold CTRL to speak to your assistant. Press 'CTRL-C' to quit.\")\n        listener = keyboard.Listener(on_press=self.on_press, on_release=self.on_release)\n        listener.start()\n        await asyncio.gather(self.send_audio(), self.receive_audio())\n\n    def start(self):\n        asyncio.run(self.main())",
    "Code_level": "Class-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport pyaudio\nimport keyboard\nimport yaspin\nimport json\n\nclass Device:\n    def __init__(self):\n        self.server_url = \"ws://localhost:8765\"\n        self.p = pyaudio.PyAudio()\n        self.websocket = None\n        self.recording = False\n        self.input_stream = None\n        self.output_stream = None\n        self.spinner = yaspin.Yaspin(text=\"Recording...\", color=\"green\")\n        self.play_audio = True\n        self.CHUNK = 1024\n        self.FORMAT = pyaudio.paInt16\n        self.CHANNELS = 1\n        self.RECORDING_RATE = 16000\n        self.PLAYBACK_RATE = 24000\n\n    async def connect_with_retry(self, max_retries=50, retry_delay=2):\n        for attempt in range(max_retries):\n            try:\n                self.websocket = await websockets.connect(self.server_url)\n                print(\"Connected to server.\")\n                return\n            except Exception as e:\n                print(f\"Connection failed. Retrying in {retry_delay} seconds... (Attempt {attempt + 1}/{max_retries})\")\n                await asyncio.sleep(retry_delay)\n        print(\"Failed to connect after maximum retries.\")\n\n    def send_audio(self):\n        if not self.recording:\n            return\n        try:\n            data = self.input_stream.read(self.CHUNK)\n            self.websocket.send(data)\n        except Exception as e:\n            print(f\"Error sending audio: {e}\")\n\n    async def receive_audio(self):\n        while True:\n            try:\n                data = await self.websocket.recv()\n                if self.play_audio and self.output_stream is not None:\n                    self.output_stream.write(data)\n            except websockets.exceptions.ConnectionClosed:\n                print(\"Server connection closed.\")\n                break\n            except Exception as e:\n                print(f\"Error receiving audio: {e}\")\n                break\n\n    def on_press(self, key):\n        if key == keyboard.Key.ctrl:\n            self.recording = True\n            self.spinner.start()\n            self.input_stream = self.p.open(format=self.FORMAT,\n                                            channels=self.CHANNELS,\n                                            rate=self.RECORDING_RATE,\n                                            input=True,\n                                            frames_per_buffer=self.CHUNK)\n            print(\"Started recording.\")\n\n    def on_release(self, key):\n        if key == keyboard.Key.ctrl:\n            self.recording = False\n            self.spinner.stop()\n            self.input_stream.stop_stream()\n            self.input_stream.close()\n            print(\"Stopped recording.\")\n\n    async def main(self):\n        await self.connect_with_retry()\n        self.output_stream = self.p.open(format=self.FORMAT,\n                                        channels=self.CHANNELS,\n                                        rate=self.PLAYBACK_RATE,\n                                        output=True,\n                                        frames_per_buffer=self.CHUNK)\n        keyboard.on_press(self.on_press)\n        keyboard.on_release(self.on_release)\n\n        send_task = asyncio.create_task(self._send_audio_loop())\n        receive_task = asyncio.create_task(self.receive_audio())\n\n        await asyncio.gather(send_task, receive_task)\n\n    async def _send_audio_loop(self):\n        while True:\n            if self.recording and self.input_stream is not None:\n                self.send_audio()\n            else:\n                await asyncio.sleep(0.1)\n\n    def start(self):\n        asyncio.run(self.main())"
  },
  {
    "Task_id": 469,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle bidirectional communication between clients and the server, with support for message production and consumption through multiprocessing queues.\n\nFunction Description: The SocketWorker function establishes a WebSocket server that manages client connections, processes incoming messages, and sends messages to specific clients based on their unique IDs. It uses asynchronous programming to handle multiple clients concurrently.\n\nInput:\n- queueX: multiprocessing.Queue - Queue for outgoing messages to clients (format: (client_id, message))\n- queueZ: multiprocessing.Queue - Queue for incoming messages from clients (format: (client_id, message))\n\nOutput: None (The function runs indefinitely as a server process)\n\nMethods (nested async functions within SocketWorker):\n\n1. producer() -> Union[Tuple[str, str], str] - Generates messages to be sent to clients, either from queueX or periodic ping messages.\n\n2. producer_handler(websocket: WebSocketServerProtocol, path: str) -> None - Handles sending messages to connected clients via the WebSocket connection.\n\n3. consumer(websocket: WebSocketServerProtocol, msg: str) -> None - Processes incoming messages from clients, handling pong responses and forwarding valid requests to queueZ.\n\n4. consumer_handler(websocket: WebSocketServerProtocol, path: str) -> None - Continuously receives messages from a client connection and processes them.\n\n5. server(websocket: WebSocketServerProtocol, path: str) -> None - Main connection handler that manages client lifecycle, assigning unique IDs and coordinating producer/consumer tasks.\n\n6. srv_exception(loop: asyncio.AbstractEventLoop, context: dict) -> None - Exception handler for the WebSocket server event loop.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport signal\nimport json\nimport random\nimport time\nfrom multiprocessing import Queue\n\n_DEBUG_LEVEL_ = 2\nPORT_NUM = 8266\n\ndef SocketWorker(queueX, queueZ):\n    signal.signal(signal.SIGINT, signal.SIG_DFL)\n    USERS = set()\n\n    async def producer():\n        hasData = False\n        try:\n            K, out = queueX.get(timeout=0.05)\n            hasData = True\n        except:\n            pass\n        if hasData:\n            return (K, out)\n        else:\n            await asyncio.sleep(0.001)\n            if random.random() < -0.003:\n                return '[PING]'\n            else:\n                return ''\n\n    async def producer_handler(websocket, path):\n        while True:\n            msg = await producer()\n            if isinstance(msg, tuple):\n                K, msg = msg\n                for x in USERS:\n                    if x.client_id == K:\n                        await x.send(msg)\n                        break\n            elif msg != '':\n                await websocket.send(msg)\n\n    async def consumer(websocket, msg):\n        if msg == '[PONG]':\n            return\n        try:\n            msg = json.loads(msg)\n            if msg['op'].lower() == 'get':\n                queueZ.put((websocket.client_id, msg['txt']))\n        except Exception as e:\n            print(e)\n            pass\n\n    async def consumer_handler(websocket, path):\n        while True:\n            msg = await websocket.recv()\n            await consumer(websocket, msg)\n\n    async def server(websocket, path):\n        websocket.client_id = '%020x' % random.randrange(16**20)\n        USERS.add(websocket)\n        print(\"[ws connect]\", len(USERS), 'users @',\n              time.strftime(\"%Y %b %d %H:%M:%S\", time.localtime(time.time())))\n        try:\n            await websocket.send('id_' + websocket.client_id)\n            consumer_task = asyncio.ensure_future(\n                consumer_handler(websocket, path))\n            producer_task = asyncio.ensure_future(\n                producer_handler(websocket, path))\n            done, pending = await asyncio.wait(\n                [consumer_task, producer_task],\n                return_when=asyncio.FIRST_COMPLETED)\n            for task in pending:\n                task.cancel()\n        finally:\n            USERS.remove(websocket)\n            print(\"[ws disconnect]\", len(USERS))\n\n    def srv_exception(loop, context):\n        if _DEBUG_LEVEL_ > 1:\n            print('exception', loop, context)\n        pass\n\n    try:\n        start_server = websockets.serve(server, \"127.0.0.1\", PORT_NUM)\n        asyncio.get_event_loop().run_until_complete(start_server)\n        asyncio.get_event_loop().set_exception_handler(srv_exception)\n        asyncio.get_event_loop().run_forever()\n    except Exception as e:\n        print('[srv error]', e)",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\nfrom typing import Tuple, Union, AsyncGenerator\nimport multiprocessing\n\nasync def producer():\n    while True:\n        try:\n            item = queueX.get_nowait()\n            yield item\n        except multiprocessing.QueueEmpty:\n            yield (\"ping\", \"ping\")\n\nasync def producer_handler(websocket, path):\n    async for client_id, message in producer():\n        if client_id:\n            await websocket.send(json.dumps({\"id\": client_id, \"message\": message}))\n\nasync def consumer(websocket, msg):\n    try:\n        data = json.loads(msg)\n        client_id = data.get(\"id\")\n        message = data.get(\"message\")\n        if message == \"pong\":\n            return\n        if client_id and message:\n            queueZ.put((client_id, message))\n    except Exception:\n        pass\n\nasync def consumer_handler(websocket, path):\n    async for message in websocket:\n        await consumer(websocket, message)\n\nasync def server(websocket, path):\n    client_id = id(websocket)\n    try:\n        await websocket.send(json.dumps({\"id\": client_id, \"message\": \"connected\"}))\n        await asyncio.gather(\n            producer_handler(websocket, path),\n            consumer_handler(websocket, path)\n        )\n    finally:\n        await websocket.send(json.dumps({\"id\": client_id, \"message\": \"disconnected\"}))\n\ndef srv_exception(loop, context):\n    print(context[\"message\"], context[\"exception\"], context[\"future\"])\n\ndef SocketWorker(queueX: multiprocessing.Queue, queueZ: multiprocessing.Queue):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    start_server = websockets.serve(server, \"localhost\", 8765, loop=loop)\n    loop.run_until_complete(start_server)\n    loop.run_forever()"
  },
  {
    "Task_id": 471,
    "Instruction": "Task Description: Implement a ZeroMQ-based RPC client class in Python that subscribes to messages from a publisher, handles heartbeats, and manages connection states.\n\nClass Description: The RpcClient class establishes a ZeroMQ SUB socket to receive messages from a publisher, monitors connection health through heartbeats, and provides callback functionality for message processing.\n\nAttributes:\n- _context: zmq.Context - ZeroMQ context for socket management\n- _socket_sub: zmq.Socket - SUB socket for receiving messages\n- _active: bool - Flag indicating if the client is running\n- _thread: threading.Thread - Thread for running the message loop\n- _lock: threading.Lock - Thread synchronization lock\n- _last_received_ping: float - Timestamp of last received heartbeat\n\nMethods:\n- __init__() -> None - Initializes the ZeroMQ context and SUB socket with keepalive options\n- start(sub_address: str) -> None - Connects to the publisher and starts the message loop thread\n- stop() -> None - Stops the message loop thread\n- join() -> None - Waits for the message loop thread to complete\n- run() -> None - Main message processing loop (handles heartbeats and disconnections)\n- callback(topic: str, data: Any) -> None - Abstract method for processing received messages (to be implemented by subclasses)\n- subscribe_topic(topic: str) -> None - Subscribes to a specific message topic\n- on_disconnected() -> None - Handles disconnection events (prints warning message)",
    "Canonical_solution": "import threading\nfrom time import time\nfrom functools import lru_cache\nfrom typing import Any\nimport zmq\n\nclass RpcClient:\n    def __init__(self) -> None:\n        self._context: zmq.Context = zmq.Context()\n        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)\n        \n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE, 1)\n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)\n\n        self._active: bool = False\n        self._thread: threading.Thread = None\n        self._lock: threading.Lock = threading.Lock()\n        self._last_received_ping: time = time()\n\n    def start(self, sub_address: str) -> None:\n        if self._active:\n            return\n\n        self._socket_sub.connect(sub_address)\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n        self._last_received_ping = time()\n\n    def stop(self) -> None:\n        if not self._active:\n            return\n        self._active = False\n\n    def join(self) -> None:\n        if self._thread and self._thread.is_alive():\n            self._thread.join()\n        self._thread = None\n\n    def run(self) -> None:\n        pull_tolerance: int = HEARTBEAT_TOLERANCE * 1000\n\n        while self._active:\n            if not self._socket_sub.poll(pull_tolerance):\n                self.on_disconnected()\n                continue\n\n            topic, data = self._socket_sub.recv_pyobj(flags=zmq.NOBLOCK)\n\n            if topic == HEARTBEAT_TOPIC:\n                self._last_received_ping = data\n            else:\n                self.callback(topic, data)\n\n        self._socket_sub.close()\n\n    def callback(self, topic: str, data: Any) -> None:\n        raise NotImplementedError\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt_string(zmq.SUBSCRIBE, topic)\n\n    def on_disconnected(self):\n        msg: str = f\"RpcServer has no response over {HEARTBEAT_TOLERANCE} seconds, please check you connection.\"\n        print(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport threading\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import Any\n\nclass RpcClient(ABC):\n    def __init__(self):\n        self._context = zmq.Context()\n        self._socket_sub = self._context.socket(zmq.SUB)\n        self._socket_sub.setsockopt(zmq.RECONNECT_IVL, 1000)\n        self._socket_sub.setsockopt(zmq.HEARTBEAT_INTERVAL, 5000)\n        self._active = False\n        self._thread = None\n        self._lock = threading.Lock()\n        self._last_received_ping = 0.0\n\n    def start(self, sub_address: str) -> None:\n        self._socket_sub.connect(sub_address)\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n\n    def stop(self) -> None:\n        with self._lock:\n            self._active = False\n        self._socket_sub.disconnect(\"\")\n\n    def join(self) -> None:\n        if self._thread:\n            self._thread.join()\n\n    def run(self) -> None:\n        while self._active:\n            try:\n                topic = self._socket_sub.recv_string(flags=zmq.NOBLOCK)\n                data = self._socket_sub.recv_pyobj(flags=zmq.NOBLOCK)\n                self._last_received_ping = time.time()\n                self.callback(topic, data)\n            except zmq.Again:\n                if time.time() - self._last_received_ping > 10:\n                    self.on_disconnected()\n                time.sleep(0.1)\n            except Exception as e:\n                print(f\"Error in message loop: {e}\")\n                time.sleep(1)\n\n    @abstractmethod\n    def callback(self, topic: str, data: Any) -> None:\n        pass\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt(zmq.SUBSCRIBE, topic.encode())\n\n    def on_disconnected(self) -> None:\n        print(\"Warning: Connection lost to publisher.\")"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a ZeroMQ consumer class in Python that subscribes to messages from a publisher using the PUB/SUB pattern, with timeout handling for message reception.\n\nClass Description: The ZeroMQConsumer class establishes a connection to a ZeroMQ publisher, subscribes to all messages, and provides methods to receive messages and clean up resources.\n\nAttributes:\n- _zmq_context: zmq.Context - The ZeroMQ context for managing sockets\n- socket: zmq.Socket - The SUB socket for receiving messages from the publisher\n\nMethods:\n- __init__(zmq_port: int) -> None - Initializes the consumer with a connection to the specified port\n  - Input: zmq_port (int) - The port number to connect to the publisher\n  - Output: None\n- receive_message() -> Dict[str, Any] - Receives and parses a message from the publisher\n  - Input: None\n  - Output: Dict[str, Any] - The parsed message content or empty dict if timeout occurs\n- close() -> None - Closes the socket and terminates the context\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import zmq\nfrom typing import Dict, Any\nimport ujson\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int):\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n        self.socket.setsockopt(zmq.RCVTIMEO, 100)  # ZMQ_RECV_TIMEOUT\n\n    def receive_message(self) -> Dict[str, Any]:\n        try:\n            json_data = self.socket.recv_string()\n            return ujson.loads(json_data)\n        except zmq.Again:\n            return {}\n\n    def close(self):\n        self.socket.close()\n        self._zmq_context.term()",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nfrom typing import Dict, Any\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int) -> None:\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt(zmq.SUBSCRIBE, b'')\n\n    def receive_message(self) -> Dict[str, Any]:\n        try:\n            message = self.socket.recv_string(flags=zmq.NOBLOCK)\n            return {\"content\": message}\n        except zmq.Again:\n            return {}\n\n    def close(self) -> None:\n        self.socket.close()\n        self._zmq_context.term()"
  },
  {
    "Task_id": 473,
    "Instruction": "Task Description: Implement a ZeroMQ-based message manager class for handling publish-subscribe communication between processes, supporting both message publishing and subscription functionalities.\n\nClass Description: The ZmqManager class provides an interface for ZeroMQ-based inter-process communication using PUB/SUB and PUSH/PULL patterns. It handles message serialization/deserialization and manages connections to publisher/subscriber endpoints.\n\nAttributes:\n- sink: [zmq.Socket] - ZeroMQ PUSH socket for sending messages to the publisher\n- sub: [zmq.Socket] - ZeroMQ SUB socket for receiving messages from the publisher\n- channel: [str] - The communication channel identifier for message filtering\n\nMethods:\n- __init__(url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None - Initializes the ZeroMQ connections. Parses the connection URL and sets up both PUSH and SUB sockets.\n- _publish(data: Any) -> None - Serializes and publishes data to the specified channel using pickle.\n- zmq_listen() -> Generator[bytes, None, None] - Continuously listens for incoming messages from the SUB socket and yields raw byte messages.\n- _listen() -> Generator[Any, None, None] - Listens for messages, deserializes them using pickle, and yields only messages matching the specified channel.",
    "Canonical_solution": "import pickle\nimport re\nfrom eventlet.green import zmq\n\nclass ZmqManager:\n    def __init__(self, url='zmq+tcp://localhost:5555+5556', channel='socketio', write_only=False):\n        r = re.compile(r':\\d+\\+\\d+$')\n        if not (url.startswith('zmq+tcp://') and r.search(url)):\n            raise RuntimeError('unexpected connection string: ' + url)\n\n        url = url.replace('zmq+', '')\n        (sink_url, sub_port) = url.split('+')\n        sink_port = sink_url.split(':')[-1]\n        sub_url = sink_url.replace(sink_port, sub_port)\n\n        sink = zmq.Context().socket(zmq.PUSH)\n        sink.connect(sink_url)\n\n        sub = zmq.Context().socket(zmq.SUB)\n        sub.setsockopt_string(zmq.SUBSCRIBE, '')\n        sub.connect(sub_url)\n\n        self.sink = sink\n        self.sub = sub\n        self.channel = channel\n\n    def _publish(self, data):\n        pickled_data = pickle.dumps(\n            {\n                'type': 'message',\n                'channel': self.channel,\n                'data': data\n            }\n        )\n        return self.sink.send(pickled_data)\n\n    def zmq_listen(self):\n        while True:\n            response = self.sub.recv()\n            if response is not None:\n                yield response\n\n    def _listen(self):\n        for message in self.zmq_listen():\n            if isinstance(message, bytes):\n                try:\n                    message = pickle.loads(message)\n                except Exception:\n                    pass\n            if isinstance(message, dict) and \\\n                    message['type'] == 'message' and \\\n                    message['channel'] == self.channel and \\\n                    'data' in message:\n                yield message['data']\n        return",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport pickle\nfrom typing import Any, Generator\n\nclass ZmqManager:\n    def __init__(self, url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None:\n        self.channel = channel\n        self.write_only = write_only\n        self._setup_sockets(url)\n\n    def _setup_sockets(self, url: str):\n        parts = url.split('://')[1].split('+')\n        pub_url = f'tcp://{parts[0]}'\n        sub_url = f'tcp://{parts[1]}'\n\n        context = zmq.Context()\n        self.sink = context.socket(zmq.PUSH)\n        self.sink.connect(pub_url)\n\n        self.sub = context.socket(zmq.SUB)\n        self.sub.connect(sub_url)\n        self.sub.setsockopt(zmq.SUBSCRIBE, self.channel.encode())\n\n    def _publish(self, data: Any) -> None:\n        serialized = pickle.dumps((self.channel, data))\n        self.sink.send(serialized)\n\n    def zmq_listen(self) -> Generator[bytes, None, None]:\n        while True:\n            message = self.sub.recv()\n            yield message\n\n    def _listen(self) -> Generator[Any, None, None]:\n        for message in self.zmq_listen():\n            try:\n                channel, data = pickle.loads(message)\n                if channel == self.channel:\n                    yield data\n            except Exception:\n                continue"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a ZeroMQ-based client class for bidirectional communication with a server, capable of sending text data and receiving processed results as NumPy arrays.\n\nClass Description: BertClient is a ZeroMQ client that establishes PUSH-SUB pattern communication with a server. It sends text data for processing and subscribes to receive the processed results as NumPy arrays.\n\nAttributes:\n- context: zmq.Context - ZeroMQ context for socket management\n- sender: zmq.Socket - PUSH socket for sending requests to server\n- receiver: zmq.Socket - SUB socket for receiving responses from server\n- identity: bytes - Unique client identifier\n- request_id: int - Counter for tracking pending requests\n- timeout: int - Timeout setting for operations\n- pending_request: set - Set of outstanding request IDs\n\nMethods:\n- __init__(ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1) -> None - Initializes the client with server connection details\n- close() -> None - Closes sockets and terminates context\n- _send(msg, msg_len=0) -> None - Internal method for sending messages to server\n- _recv() -> Response - Internal method for receiving raw responses\n- _recv_ndarray() -> Response - Internal method for receiving and decoding NumPy array responses\n- encode(texts, blocking=True) -> Optional[np.ndarray] - Sends texts for encoding and returns processed arrays\n- fetch(delay=0.0) -> Generator[Response, None, None] - Yields pending responses with optional delay\n- fetch_all(sort=True, concat=False) -> Union[List[np.ndarray], np.ndarray] - Retrieves all pending responses with sorting and concatenation options",
    "Canonical_solution": "import sys\nimport uuid\nimport zmq\nfrom zmq.utils import jsonapi\nimport numpy as np\nimport pickle\nfrom collections import namedtuple\n\nResponse = namedtuple('Response', ['id', 'content'])\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.sender.setsockopt(zmq.LINGER, 0)\n        self.identity = identity or str(uuid.uuid4()).encode('ascii')\n        self.sender.connect('tcp://%s:%d' % (ip, port))\n\n        self.receiver = self.context.socket(zmq.SUB)\n        self.receiver.setsockopt(zmq.LINGER, 0)\n        self.receiver.setsockopt(zmq.SUBSCRIBE, self.identity)\n        self.receiver.connect('tcp://%s:%d' % (ip, port_out))\n\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n\n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0):\n        self.sender.send_multipart([self.identity, msg, b'%d' % self.request_id, b'%d' % msg_len])\n        self.pending_request.add(self.request_id)\n        self.request_id += 1\n\n    def _recv(self):\n        response = self.receiver.recv_multipart()\n        request_id = int(response[-1])\n        self.pending_request.remove(request_id)\n        return Response(request_id, response)\n\n    def _recv_ndarray(self):\n        request_id, response = self._recv()\n        arr_info, arr_val = jsonapi.loads(response[1]), response[2]\n        X = np.frombuffer(memoryview(arr_val), dtype=str(arr_info['dtype']))\n        return Response(request_id, X.reshape(arr_info['shape']))\n\n    def encode(self, texts, blocking=True):\n        self._send(jsonapi.dumps(texts), len(texts))\n        rst = self._recv_ndarray().content if blocking else None\n        return rst\n\n    def fetch(self, delay=.0):\n        time.sleep(delay)\n        while self.pending_request:\n            yield self._recv_ndarray()\n\n    def fetch_all(self, sort=True, concat=False):\n        if self.pending_request:\n            tmp = list(self.fetch())\n            if sort:\n                tmp = sorted(tmp, key=lambda v: v.id)\n            tmp = [v.content for v in tmp]\n            if concat:\n                tmp = np.concatenate(tmp, axis=0)\n            return tmp",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport numpy as np\nimport time\nfrom typing import Optional, Generator, List, Union, Set\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.receiver = self.context.socket(zmq.SUB)\n        self.identity = identity.encode('utf-8') if identity else b''\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request: Set[int] = set()\n        self.sender.connect(f\"tcp://{ip}:{port}\")\n        self.receiver.connect(f\"tcp://{ip}:{port_out}\")\n        self.receiver.setsockopt(zmq.SUBSCRIBE, b'')\n\n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0):\n        if msg_len == 0:\n            msg_len = len(msg)\n        self.sender.send_multipart([self.identity, msg_len.to_bytes(4, 'little'), msg])\n\n    def _recv(self):\n        try:\n            parts = self.receiver.recv_multipart(flags=zmq.NOBLOCK)\n            if not parts:\n                return None\n            req_id = int.from_bytes(parts[0], 'little')\n            data = parts[1]\n            return (req_id, data)\n        except zmq.Again:\n            return None\n\n    def _recv_ndarray(self):\n        while True:\n            response = self._recv()\n            if response is None:\n                return None\n            req_id, data = response\n            try:\n                arr = np.frombuffer(data, dtype=np.float32)\n                return (req_id, arr)\n            except Exception:\n                continue\n\n    def encode(self, texts, blocking=True) -> Optional[np.ndarray]:\n        if not isinstance(texts, list):\n            texts = [texts]\n        msg = '\\n'.join(texts).encode('utf-8')\n        self._send(msg)\n        self.request_id += 1\n        self.pending_request.add(self.request_id)\n        if blocking:\n            return self.fetch_all(concat=True)\n        return None\n\n    def fetch(self, delay=0.0) -> Generator:\n        while self.pending_request:\n            time.sleep(delay)\n            result = self._recv_ndarray()\n            if result is None:\n                continue\n            req_id, arr = result\n            self.pending_request.discard(req_id)\n            yield arr\n\n    def fetch_all(self, sort=True, concat=False) -> Union[List[np.ndarray], np.ndarray]:\n        results = []\n        for req_id in sorted(self.pending_request) if sort else self.pending_request:\n            result = self._recv_ndarray()\n            if result is not None:\n                _, arr = result\n                results.append(arr)\n        if concat and len(results) > 0:\n            return np.vstack(results)\n        return results"
  },
  {
    "Task_id": 475,
    "Instruction": "Task Description: Implement a ZeroMQ subscriber in Python that connects to a publisher and continuously receives messages.\n\nFunction Description: The function `setup_zmq_subscriber` initializes a ZeroMQ subscriber socket, connects it to a specified publisher endpoint, and configures it to subscribe to all messages. The function `receive_messages` continuously listens for and prints messages received through the socket.\n\nInput: \n- `remote_ip` (str, optional): The endpoint address of the ZeroMQ publisher in the format 'tcp://IP_ADDRESS:PORT'. Defaults to 'tcp://REMOTE_IP_ADDRESS:5555'.\n\nOutput: \n- `socket` (zmq.Socket): A configured ZeroMQ SUB socket ready to receive messages.\n- None (for `receive_messages`): The function runs indefinitely, printing received messages.",
    "Canonical_solution": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt_string(zmq.SUBSCRIBE, '')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        msg = socket.recv_string()\n        print(msg)",
    "Code_level": "Function-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt(zmq.SUBSCRIBE, b'')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        message = socket.recv_string()\n        print(f\"Received message: {message}\")"
  },
  {
    "Task_id": 476,
    "Instruction": "Task Description: Create a Python class that connects to a remote progress bar using ZeroMQ's PUB/SUB pattern to receive and display progress updates from a separate process.\n\nClass Description: The RemoteProgress class establishes a ZeroMQ SUB socket to subscribe to progress updates broadcast by a publisher process. It continuously receives messages containing progress percentages and labels, displaying them in a formatted way until interrupted.\n\nAttributes:\n- hostname: str - The hostname or IP address of the publisher (default: 'localhost')\n- port: int - The port number to connect to (default: 8080)\n- label: str - The current progress label received from the publisher\n\nMethods:\n- __init__(port: int = 8080, hostname: str = 'localhost') -> None - Initializes the RemoteProgress instance with connection parameters\n- __call__() -> None - Main method that establishes the connection, receives messages, and displays progress (runs in an infinite loop until interrupted)\n- _display_progress(percentage: float) -> None - Helper method that formats and displays the progress percentage (private method)",
    "Canonical_solution": "import zmq\nfrom typing import Optional\n\nclass RemoteProgress:\n    \"\"\"\n    Connect to a progress bar in a separate process with output_mode\n    set to 'broadcast' in order to display the results (to stdout).\n    \"\"\"\n\n    def __init__(self, port: int = 8080, hostname: str = 'localhost'):\n        self.hostname = hostname\n        self.port = port\n        self.label = \"\"\n\n    def __call__(self):\n        context = zmq.Context()\n        sock = context.socket(zmq.SUB)\n        sock.setsockopt(zmq.SUBSCRIBE, b'')\n        sock.connect('tcp://' + self.hostname +':'+str(self.port))\n        \n        percent = None\n        while True:\n            try:\n                message = sock.recv()\n                [percent_str, label] = message.split(b'|')\n                percent = float(percent_str)\n                self.label = label.decode()\n                self._display_progress(percent)\n            except KeyboardInterrupt:\n                if percent is not None:\n                    print(f\"Exited at {percent:.3f}% completion\")\n                break\n            except Exception:\n                print(f\"Could not process socket message: {message!r}\")\n\n    def _display_progress(self, percentage: float):\n        print(f\"\\r{self.label}: {percentage:.1f}%\", end='')",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\n\nclass RemoteProgress:\n    def __init__(self, port: int = 8080, hostname: str = 'localhost'):\n        self.hostname = hostname\n        self.port = port\n        self.label = \"\"\n\n    def __call__(self):\n        context = zmq.Context()\n        socket = context.socket(zmq.SUB)\n        socket.connect(f\"tcp://{self.hostname}:{self.port}\")\n        socket.setsockopt(zmq.SUBSCRIBE, b'')\n\n        try:\n            while True:\n                message = socket.recv_string()\n                if message.startswith(\"progress:\"):\n                    parts = message.split(\":\")\n                    percentage = float(parts[1])\n                    self._display_progress(percentage)\n        except KeyboardInterrupt:\n            pass\n\n    def _display_progress(self, percentage: float):\n        print(f\"\\r{self.label}: {percentage:.2f}%\", end=\"\")"
  },
  {
    "Task_id": 477,
    "Instruction": "Task Description: Implement a ZeroMQ-based network communication class that supports PUB/SUB pattern for sending and receiving messages between processes, with optional frame compression and message handling.\n\nClass Description: NetGear is a ZeroMQ wrapper class that facilitates network communication using various messaging patterns, with a focus on PUB/SUB pattern. It handles socket creation, connection management, message serialization, and frame compression/decompression.\n\nAttributes:\n- __logging: bool - Enables/disables logging functionality\n- __msg_context: zmq.Context - ZeroMQ context instance for socket management\n- __receive_mode: bool - Flag indicating if instance is in receive mode\n- __pattern: int - Selected messaging pattern (0: PAIR, 1: REQ/REP, 2: PUB/SUB)\n- __terminate: bool - Flag for graceful termination\n- __msg_socket: zmq.Socket - ZeroMQ socket instance\n- __subscriber_timeout: int - Timeout value for subscriber socket (in seconds)\n- __queue: deque - Buffer for storing received frames (receiver only)\n- __thread: Thread - Background thread for message handling (receiver only)\n\nMethods:\n- __init__(address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options) -> None - Initializes the NetGear instance with specified parameters\n- __recv_handler() -> None - Internal thread handler for receiving messages (receiver only)\n- recv() -> np.ndarray|None - Receives and returns a frame from the queue (receiver only)\n- send(frame, message=None) -> None - Sends a frame with optional metadata (sender only)\n- close(kill=False) -> None - Closes the connection and cleans up resources",
    "Canonical_solution": "import os\nimport time\nimport asyncio\nimport platform\nimport string\nimport secrets\nimport numpy as np\nimport logging as log\nfrom threading import Thread\nfrom collections import deque\nfrom os.path import expanduser\nimport zmq\nfrom zmq import auth\nfrom zmq.auth.thread import ThreadAuthenticator\nfrom zmq.error import ZMQError\n\nclass NetGear:\n    def __init__(\n        self,\n        address=None,\n        port=None,\n        protocol=None,\n        pattern=0,\n        receive_mode=False,\n        logging=False,\n        **options\n    ):\n        self.__logging = logging if isinstance(logging, bool) else False\n        self.__msg_context = zmq.Context.instance()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n\n        valid_messaging_patterns = {\n            0: (zmq.PAIR, zmq.PAIR),\n            1: (zmq.REQ, zmq.REP),\n            2: (zmq.PUB, zmq.SUB),\n        }\n\n        msg_pattern = valid_messaging_patterns[pattern]\n        self.__msg_socket = self.__msg_context.socket(msg_pattern[1 if receive_mode else 0])\n\n        if pattern == 2:  # PUB/SUB pattern\n            if receive_mode:  # SUB socket\n                self.__msg_socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n                self.__subscriber_timeout = options.get('subscriber_timeout', None)\n                if self.__subscriber_timeout:\n                    self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000)\n                    self.__msg_socket.setsockopt(zmq.LINGER, 0)\n            else:  # PUB socket\n                self.__msg_socket.set_hwm(1)\n\n        if receive_mode:\n            address = \"*\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.bind(f\"{protocol}://{address}:{port}\")\n        else:\n            address = \"localhost\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.connect(f\"{protocol}://{address}:{port}\")\n\n        if receive_mode and pattern == 2:\n            self.__queue = deque(maxlen=96)\n            self.__thread = Thread(target=self.__recv_handler, name=\"NetGear\")\n            self.__thread.daemon = True\n            self.__thread.start()\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                msg_json = self.__msg_socket.recv_json(flags=zmq.NOBLOCK)\n                msg_data = self.__msg_socket.recv(flags=zmq.NOBLOCK)\n                \n                if msg_json[\"terminate_flag\"]:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n                if msg_json[\"compression\"]:\n                    frame = simplejpeg.decode_jpeg(\n                        msg_data,\n                        colorspace=msg_json[\"compression\"][\"colorspace\"],\n                        fastdct=msg_json[\"compression\"][\"dct\"],\n                        fastupsample=msg_json[\"compression\"][\"ups\"],\n                    )\n                else:\n                    frame_buffer = np.frombuffer(msg_data, dtype=msg_json[\"dtype\"])\n                    frame = frame_buffer.reshape(msg_json[\"shape\"])\n\n                self.__queue.append(frame)\n\n            except zmq.ZMQError as e:\n                if e.errno == zmq.EAGAIN:\n                    time.sleep(0.00001)\n                    continue\n                else:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n    def recv(self):\n        if not self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"recv() can only be used in receive mode with PUB/SUB pattern\")\n\n        while not self.__terminate:\n            if len(self.__queue) > 0:\n                return self.__queue.popleft()\n            time.sleep(0.00001)\n        return None\n\n    def send(self, frame, message=None):\n        if self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"send() can only be used in send mode with PUB/SUB pattern\")\n\n        exit_flag = True if (frame is None or self.__terminate) else False\n\n        msg_dict = {\n            \"terminate_flag\": exit_flag,\n            \"compression\": False,\n            \"message\": message,\n            \"pattern\": str(self.__pattern),\n            \"dtype\": str(frame.dtype),\n            \"shape\": frame.shape\n        }\n\n        self.__msg_socket.send_json(msg_dict, zmq.SNDMORE)\n        self.__msg_socket.send(frame, copy=False)\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__receive_mode and self.__pattern == 2:\n            if self.__thread is not None:\n                if kill:\n                    self.__msg_context.destroy()\n                self.__thread.join()\n                self.__thread = None\n        self.__msg_socket.close(linger=0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport numpy as np\nfrom threading import Thread\nfrom collections import deque\nimport time\n\nclass NetGear:\n    def __init__(self, address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options):\n        self.__logging = logging\n        self.__msg_context = zmq.Context()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n        self.__subscriber_timeout = options.get('subscriber_timeout', 1000)\n        self.__queue = deque()\n        self.__thread = None\n        self.__msg_socket = None\n\n        if address is None or port is None:\n            raise ValueError(\"Address and port must be specified\")\n\n        self.address = f\"tcp://{address}:{port}\"\n\n        if self.__receive_mode:\n            if self.__pattern == 2:\n                self.__msg_socket = self.__msg_context.socket(zmq.SUB)\n                self.__msg_socket.setsockopt(zmq.SUBSCRIBE, b'')\n                self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout)\n                self.__msg_socket.connect(self.address)\n                self.__thread = Thread(target=self.__recv_handler)\n                self.__thread.start()\n            else:\n                raise ValueError(\"Only PUB/SUB pattern is supported in receive mode\")\n        else:\n            if self.__pattern == 2:\n                self.__msg_socket = self.__msg_context.socket(zmq.PUB)\n                self.__msg_socket.bind(self.address)\n            else:\n                raise ValueError(\"Only PUB/SUB pattern is supported in send mode\")\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                frame = self.__msg_socket.recv_pyobj(flags=zmq.NOBLOCK)\n                if isinstance(frame, np.ndarray):\n                    self.__queue.append(frame)\n            except zmq.Again:\n                time.sleep(0.1)\n\n    def recv(self):\n        if self.__queue:\n            return self.__queue.popleft()\n        return None\n\n    def send(self, frame, message=None):\n        if message is not None:\n            self.__msg_socket.send_pyobj((frame, message))\n        else:\n            self.__msg_socket.send_pyobj(frame)\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__thread:\n            self.__thread.join()\n        if self.__msg_socket:\n            self.__msg_socket.close()\n        self.__msg_context.term()"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Implement a ZeroMQ-based consumer class in Python that subscribes to messages from a publisher, processes token information from shared memory requests, and manages resource recycling.\n\nClass Description: The ZeroMQConsumer class is responsible for receiving and processing messages from a detokenization service via ZeroMQ's PUB/SUB pattern. It manages shared memory requests, tracks request statuses, and handles resource recycling when requests are completed.\n\nAttributes:\n- context: zmq.asyncio.Context - ZeroMQ asynchronous context for managing sockets\n- recv_from_detokenization: zmq.SUB - SUB socket for receiving messages from the publisher\n- shm_req_manager: ShmReqManager - Manager for shared memory request objects\n- req_id_to_out_inf: Dict[int, ReqStatus] - Dictionary mapping request IDs to their status objects\n- recycle_event: asyncio.Event - Event flag for triggering resource recycling\n\nMethods:\n- __init__(zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None - Initializes the consumer with ZeroMQ configuration and shared memory manager\n- handle_loop() -> None - Main processing loop that receives messages and manages token output\n- recycle_resource_loop() -> None - Background loop for recycling completed request resources\n\nHelper Class (ReqStatus):\n- __init__(group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None - Tracks status of a request group\n- can_release() -> bool - Determines if all requests in the group can be released",
    "Canonical_solution": "import zmq\nimport zmq.asyncio\nfrom typing import Dict\nfrom lightllm.server.core.objs import Req\nfrom lightllm.server.core.objs.shm_req_manager import ShmReqManager\nfrom lightllm.server.core.objs.io_objs import GroupReqObjs\nimport asyncio\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager):\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"{zmq_mode}127.0.0.1:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b\"\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self):\n        asyncio.create_task(self.recycle_resource_loop())\n        \n        while True:\n            try:\n                await asyncio.wait_for(self.recv_from_detokenization.recv_pyobj(), timeout=0.05)\n            except asyncio.TimeoutError:\n                pass\n\n            for req_status in self.req_id_to_out_inf.values():\n                token_list = []\n                for req in req_status.group_req_objs.shm_req_objs:\n                    req_id = req.request_id\n                    if not req.out_tokens_queue.is_empty():\n                        text, src_index, special, count_output_tokens = req.out_tokens_queue.peek()\n                        metadata = {\n                            \"id\": int(req.shm_prompt_ids.arr[src_index]),\n                            \"logprob\": float(req.shm_logprobs.arr[src_index]),\n                            \"special\": special,\n                            \"count_output_tokens\": count_output_tokens,\n                            \"prompt_cache_len\": req.prompt_cache_len,\n                        }\n                        req.out_tokens_queue.pop_no_ret()\n\n                        if req.finish_token_index != src_index:\n                            token_list.append((req_id, text, metadata, FinishStatus()))\n                        else:\n                            finish_status = FinishStatus(req.finish_status.status)\n                            token_list.append((req_id, text, metadata, finish_status))\n\n                async with req_status.lock:\n                    req_status.out_token_info_list.extend(token_list)\n                    req_status.event.set()\n\n            self.recycle_event.set()\n\n    async def recycle_resource_loop(self):\n        while True:\n            try:\n                await asyncio.wait_for(self.recycle_event.wait(), timeout=0.02)\n            except asyncio.TimeoutError:\n                pass\n            self.recycle_event.clear()\n\n            release_req_status = []\n            for req_status in self.req_id_to_out_inf.values():\n                if req_status.can_release():\n                    release_req_status.append(req_status)\n\n            for req_status in release_req_status:\n                self.req_id_to_out_inf.pop(req_status.group_req_objs.group_req_id, None)\n                for req in req_status.group_req_objs.shm_req_objs:\n                    await self.shm_req_manager.async_put_back_req_obj(req)\n                    await self.shm_req_manager.async_release_req_index(req.index_in_shm_mem)\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.lock = asyncio.Lock()\n        self.event = asyncio.Event()\n        self.group_req_objs = GroupReqObjs(\n            group_req_id=group_request_id,\n            multimodal_params=multimodal_params,\n            shm_req_objs=req_objs,\n            time_mark=start_time,\n        )\n        self.out_token_info_list = []\n\n    def can_release(self):\n        for req in self.group_req_objs.shm_req_objs:\n            if not req.can_release():\n                return False\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import asyncio\nimport zmq\nimport zmq.asyncio\nfrom typing import Dict, List\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time):\n        self.group_request_id = group_request_id\n        self.multimodal_params = multimodal_params\n        self.req_objs = req_objs\n        self.start_time = start_time\n\n    def can_release(self) -> bool:\n        return all(req.is_complete for req in self.req_objs)\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager):\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"tcp://localhost:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b'')\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self):\n        while True:\n            message = await self.recv_from_detokenization.recv_multipart()\n            if not message:\n                continue\n            request_id, token_data = message\n            request_id = int(request_id.decode())\n            if request_id in self.req_id_to_out_inf:\n                status = self.req_id_to_out_inf[request_id]\n                status.req_objs.append(token_data)\n                if status.can_release():\n                    self.recycle_event.set()\n\n    async def recycle_resource_loop(self):\n        while True:\n            await self.recycle_event.wait()\n            for req_id, status in list(self.req_id_to_out_inf.items()):\n                if status.can_release():\n                    self.shm_req_manager.release_resources(status.group_request_id)\n                    del self.req_id_to_out_inf[req_id]\n            self.recycle_event.clear()\n            await asyncio.sleep(1)"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates from multiple workers using the REQ/REP pattern. The server should manage a queue of tasks, distribute them to workers, and handle task success/failure notifications.\n\nFunction Description: The `server` function sets up a ZeroMQ REP socket to listen for worker requests. It manages a task queue (`remaining_entries`) and worker count (`running_workers`), distributing tasks to workers and processing their success/failure responses. The server runs indefinitely until all tasks are completed or workers disconnect.\n\nInput:\n- `--channel-ip` (str, optional): IP address for ZeroMQ communication (default: None, binds to all interfaces)\n- `--channel-port` (int, optional): Port number for ZeroMQ communication (default: 5555)\n\nOutput: None (runs indefinitely as a server process)\n\nNote: The function maintains internal state for:\n1. `remaining_entries`: List of pending task IDs\n2. `running_workers`: Count of active workers\nThese should be initialized before the main loop (not shown in reference code)",
    "Canonical_solution": "import zmq\nimport time\nimport argparse\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "import zmq\nimport argparse\n\ndef server(channel_ip=None, channel_port=5555):\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if channel_ip:\n        socket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n    else:\n        socket.bind(f\"tcp://*:{channel_port}\")\n\n    remaining_entries = []\n    running_workers = 0\n\n    while True:\n        try:\n            message = socket.recv_string()\n            if message == \"READY\":\n                if remaining_entries:\n                    task_id = remaining_entries.pop(0)\n                    socket.send_string(task_id)\n                    running_workers += 1\n                else:\n                    socket.send_string(\"NO_TASK\")\n            elif message.startswith(\"SUCCESS:\"):\n                task_id = message.split(\":\")[1]\n                print(f\"Task {task_id} succeeded\")\n                running_workers -= 1\n            elif message.startswith(\"FAILURE:\"):\n                task_id = message.split(\":\")[1]\n                print(f\"Task {task_id} failed\")\n                remaining_entries.append(task_id)\n                running_workers -= 1\n            else:\n                socket.send_string(\"UNKNOWN_COMMAND\")\n        except Exception as e:\n            print(f\"Server error: {e}\")\n            break\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--channel-ip\", type=str)\n    parser.add_argument(\"--channel-port\", type=int, default=5555)\n    args = parser.parse_args()\n    server(args.channel_ip, args.channel_port)"
  },
  {
    "Task_id": 480,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates between multiple workers using the REQ/REP pattern.\n\nFunction Description: The server function establishes a ZeroMQ REP socket to listen for worker requests. It manages a pool of tasks (remaining_entries) and distributes them to workers. Workers can request tasks (\"pull\") or report task completion status (\"success\"/\"failure\"). The server responds accordingly and tracks active workers. The loop continues until all tasks are completed and all workers have finished.\n\nInput:\n- --channel-ip (str, optional): IP address for ZeroMQ channel (default: None)\n- --channel-port (int): Port number for ZeroMQ channel (default: 5555)\n\nOutput: None (The function runs indefinitely until all tasks are completed and all workers have disconnected)\n\nNote: The function uses two global variables:\n- remaining_entries: List of pending task IDs\n- running_workers: Count of currently active workers\n\nThe server expects and sends JSON messages with the following formats:\nReceived messages:\n- {\"rank\": [worker_id], \"action\": \"pull\"}\n- {\"rank\": [worker_id], \"action\": \"success\"/\"failure\", \"task_id\": [task_id]}\n\nSent responses:\n- {\"task_id\": [task_id]} (for pull requests)\n- {\"task_id\": None} (when no tasks remain)\n- {\"pong\": 1} (acknowledgment for status updates)\n\nThe server maintains task state by:\n1. Removing tasks when assigned\n2. Re-adding tasks if workers report failure\n3. Tracking active workers until all complete their tasks",
    "Canonical_solution": "import zmq\nimport time\nimport torch\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "import zmq\nimport json\nimport sys\nimport threading\n\nremaining_entries = []\nrunning_workers = 0\n\ndef server(channel_ip=None, channel_port=5555):\n    global remaining_entries, running_workers\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if channel_ip:\n        socket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n    else:\n        socket.bind(f\"tcp://*:{channel_port}\")\n\n    while True:\n        try:\n            message = socket.recv_string()\n            data = json.loads(message)\n            if data[\"action\"] == \"pull\":\n                if remaining_entries:\n                    task_id = remaining_entries.pop(0)\n                    socket.send_string(json.dumps({\"task_id\": task_id}))\n                else:\n                    socket.send_string(json.dumps({\"task_id\": None}))\n            elif data[\"action\"] in [\"success\", \"failure\"]:\n                task_id = data[\"task_id\"]\n                if data[\"action\"] == \"failure\":\n                    remaining_entries.append(task_id)\n                socket.send_string(json.dumps({\"pong\": 1}))\n                running_workers -= 1\n                if not remaining_entries and running_workers <= 0:\n                    break\n        except Exception as e:\n            print(f\"Server error: {e}\")\n            break\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--channel-ip\", type=str, default=None)\n    parser.add_argument(\"--channel-port\", type=int, default=5555)\n    args = parser.parse_args()\n    server(args.channel_ip, args.channel_port)"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Create a ZeroMQ Publisher (PUB) handler class that can send metrics over a TCP connection using the PUB/SUB pattern.\n\nClass Description: The `zmqHandler` class is a ZeroMQ-based publisher that inherits from a base `Handler` class. It establishes a PUB socket to publish metrics to subscribers. The class handles socket creation, binding, and message sending.\n\nAttributes:\n- context: [zmq.Context] - ZeroMQ context for managing sockets\n- socket: [zmq.Socket] - PUB socket for sending messages\n- port: [int] - Port number to bind the socket to\n- enabled: [bool] - Flag indicating if the handler is operational (inherited)\n- config: [dict] - Configuration dictionary (inherited)\n- log: [Logger] - Logger instance (inherited)\n\nMethods:\n- __init__(config: dict) -> None - Constructor that initializes the handler with configuration\n  Input: config - Dictionary containing configuration parameters\n  Output: None\n\n- _bind() -> None - Internal method to create and bind the PUB socket\n  Input: None\n  Output: None\n\n- process(metric: Any) -> None - Publishes a metric through the PUB socket\n  Input: metric - The data to be published (converted to string)\n  Output: None",
    "Canonical_solution": "import zmq\nfrom Handler import Handler\n\nclass zmqHandler(Handler):\n    def __init__(self, config=None):\n        Handler.__init__(self, config)\n        \n        if not zmq:\n            self.log.error('zmq import failed. Handler disabled')\n            self.enabled = False\n            return\n\n        self.context = None\n        self.socket = None\n        self.port = int(self.config['port'])\n        self._bind()\n\n    def _bind(self):\n        if not zmq:\n            return\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.PUB)\n        self.socket.bind(\"tcp://*:%i\" % self.port)\n\n    def process(self, metric):\n        if not zmq:\n            return\n        self.socket.send(\"%s\" % str(metric))",
    "Code_level": "Class-level",
    "FSMID_for_test": 88,
    "right_result": "import zmq\n\n\nclass Handler:\n    def __init__(self, config: dict):\n        self.enabled = config.get('enabled', False)\n        self.config = config\n        self.log = None\n\n\nclass zmqHandler(Handler):\n    def __init__(self, config: dict):\n        super().__init__(config)\n        self.context = zmq.Context()\n        self.socket = None\n        self.port = config.get('port', 5555)\n        self._bind()\n\n    def _bind(self) -> None:\n        self.socket = self.context.socket(zmq.PUB)\n        self.socket.bind(f\"tcp://*:{self.port}\")\n        self.log.info(f\"ZeroMQ PUB socket bound to port {self.port}\")\n\n    def process(self, metric: any) -> None:\n        if self.enabled:\n            try:\n                self.socket.send_string(str(metric))\n            except Exception as e:\n                self.log.error(f\"Failed to send metric: {e}\")"
  },
  {
    "Task_id": 483,
    "Instruction": "Task Description: Implement a distributed task processing system using ZeroMQ's REQ/REP pattern where a client requests tasks from a server, processes them, and reports back the results or failures.\n\nFunction Description: The function `run_generation_distributed` establishes a ZeroMQ REQ socket connection to a server, continuously requests tasks, processes them, and writes the results to a file. It handles task distribution, processing, and status reporting (success/failure) back to the server.\n\nInput:\n- `args`: [object] - Configuration object containing:\n  - `channel_ip`: [str] - IP address of the ZeroMQ server\n  - `channel_port`: [int] - Port of the ZeroMQ server\n  - `output_path`: [str] - Directory path for output files\n  - `task_name`: [str] - Base name for output files\n  - `temperature`: [float] - Processing parameter\n  - `top_p`: [float] - Processing parameter\n  - `samples_per_problem`: [int] - Number of samples per task\n  - `rank`: [int] - Worker identifier\n- `model`: [object] - Model used for processing tasks (not directly used in shown code)\n- `tokenizer`: [object] - Tokenizer used for processing tasks (not directly used in shown code)\n\nOutput:\n- None (direct output) - Results are written to a JSONL file in the specified output directory\n- Side Effects:\n  - Creates output directory if it doesn't exist\n  - Writes processed results to a JSONL file\n  - Communicates task status (success/failure) back to server",
    "Canonical_solution": "import zmq\n\ndef run_generation_distributed(args, model, tokenizer):\n    logger.info(f\"Connecting to tcp://{args.channel_ip}:{args.channel_port}\")\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n    \n    os.makedirs(args.output_path, exist_ok=True)\n    output_path = os.path.join(\n        args.output_path,\n        f\"{args.task_name}-t{args.temperature}-topp{args.top_p}-ns{args.samples_per_problem}-rank{args.rank}.jsonl\",\n    )\n    \n    fout = open(output_path, \"w\", encoding=\"utf-8\")\n    while True:\n        socket.send_json({\"rank\": args.rank, \"action\": \"pull\"})\n        resp = socket.recv_json()\n        try:\n            if resp[\"task_id\"] is None:\n                break\n\n            current_spec = resp[\"task_id\"]\n            results = process(current_spec)\n            \n            for res in results:\n                fout.write(json.dumps(res, ensure_ascii=False) + \"\\n\")\n                fout.flush()\n\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"success\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n\n        except Exception as e:\n            logger.error(f\"*** (rank={args.rank}) crashed.\")\n            logger.error(f\"    error: {repr(e)}\")\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"fail\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n            continue",
    "Code_level": "Function-level",
    "FSMID_for_test": 86,
    "right_result": "import zmq\nimport os\nimport json\nimport time\n\ndef run_generation_distributed(args, model, tokenizer):\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n    \n    output_dir = args.output_path\n    os.makedirs(output_dir, exist_ok=True)\n    output_file = os.path.join(output_dir, f\"{args.task_name}_rank_{args.rank}.jsonl\")\n    \n    try:\n        while True:\n            socket.send_json({\"request\": \"task\", \"rank\": args.rank})\n            task_message = socket.recv_json()\n            \n            if \"error\" in task_message:\n                print(f\"Error from server: {task_message['error']}\")\n                break\n            \n            task_id = task_message.get(\"task_id\")\n            prompt = task_message.get(\"prompt\")\n            max_new_tokens = task_message.get(\"max_new_tokens\")\n            \n            if not task_id or not prompt or not max_new_tokens:\n                print(\"Invalid task received\")\n                socket.send_json({\"task_id\": task_id, \"status\": \"failure\", \"message\": \"Invalid task data\"})\n                continue\n            \n            try:\n                results = []\n                for _ in range(args.samples_per_problem):\n                    result = generate_result(prompt, max_new_tokens, temperature=args.temperature, top_p=args.top_p)\n                    results.append(result)\n                \n                with open(output_file, \"a\") as f:\n                    for result in results:\n                        f.write(json.dumps({\"task_id\": task_id, \"result\": result}) + \"\\n\")\n                \n                socket.send_json({\"task_id\": task_id, \"status\": \"success\", \"results\": results})\n            except Exception as e:\n                socket.send_json({\"task_id\": task_id, \"status\": \"failure\", \"message\": str(e)})\n    \n    except KeyboardInterrupt:\n        print(\"Client interrupted\")\n    finally:\n        socket.close()\n        context.term()\n\ndef generate_result(prompt, max_new_tokens, temperature=0.7, top_p=0.9):\n    # Placeholder for actual generation logic using model and tokenizer\n    return {\"text\": \"generated_text\", \"tokens\": 100}"
  },
  {
    "Task_id": 484,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread-safe queues for inter-process communication.\n\nClass Description: The implementation consists of two classes:\n1. NetworkComputeBridgeWorkerServicer - A gRPC servicer that processes incoming requests using thread-safe queues\n2. GRPCServer - Manages the gRPC server lifecycle and configuration\n\nAttributes:\n\nNetworkComputeBridgeWorkerServicer:\n- thread_input_queue: [Queue] - Queue for receiving incoming requests from other processes\n- thread_output_queue: [Queue] - Queue for sending responses back to other processes\n- _lock: [Lock] - Thread synchronization lock for queue operations\n\nGRPCServer:\n- port: [int] - Port number for the server to listen on\n- request_queue: [Queue] - Shared queue for incoming requests\n- response_queue: [Queue] - Shared queue for outgoing responses\n\nMethods:\n\nNetworkComputeBridgeWorkerServicer:\n- WorkerCompute(request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes compute requests by putting them in input queue and waiting for response from output queue\n- ListAvailableModels(request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes model listing requests by putting them in input queue and waiting for response from output queue\n\nGRPCServer:\n- start() -> [grpc.Server] - Initializes and starts the gRPC server with thread pool executor, binds it to the specified port, and registers the servicer",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom multiprocessing import Lock, Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\nclass GRPCServer:\n    def __init__(self, port, request_queue, response_queue):\n        self.port = port\n        self.request_queue = request_queue\n        self.response_queue = response_queue\n\n    def start(self):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n            NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue), server)\n        server.add_insecure_port(f'[::]:{self.port}')\n        server.start()\n        return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nfrom concurrent import futures\nfrom queue import Queue, Empty\nfrom threading import Lock\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            try:\n                response = self.thread_output_queue.get(timeout=10)\n                return network_compute_bridge_pb2.NetworkComputeResponse(result=response.result)\n            except Empty:\n                return network_compute_bridge_pb2.NetworkComputeResponse(result=\"Timeout waiting for response\")\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            try:\n                response = self.thread_output_queue.get(timeout=10)\n                return network_compute_bridge_pb2.ListAvailableModelsResponse(models=response.models)\n            except Empty:\n                return network_compute_bridge_pb2.ListAvailableModelsResponse(models=[])\n\nclass GRPCServer:\n    def __init__(self, port, request_queue, response_queue):\n        self.port = port\n        self.request_queue = request_queue\n        self.response_queue = response_queue\n        self.server = None\n\n    def start(self):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n            NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue), self.server)\n        self.server.add_insecure_port(f'[::]:{self.port}')\n        self.server.start()\n        return self.server"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides speech recognition and language processing services using gRPC for inter-process communication.\n\nClass Description: The implementation consists of two main classes: ApiService (which handles the actual service logic) and GrpcServer (which manages the server lifecycle).\n\nAttributes:\n\nApiService:\n- speech_model: [Any] - The model used for speech recognition\n- language_model: [Any] - The model used for language processing\n\nGrpcServer:\n- host: [str] - The host address to bind the server to\n- port: [str] - The port number to bind the server to\n- max_workers: [int] - Maximum number of worker threads in the thread pool\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nApiService:\n- Speech(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [SpeechResponse] - Processes speech recognition requests\n- Language(request: [LanguageRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes language translation requests\n- All(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes combined speech recognition and language translation\n- Stream(request_iterator: [Iterator[SpeechRequest]], context: [grpc.ServicerContext]) -> [Iterator[TextResponse]] - Handles streaming speech recognition and processing\n\nGrpcServer:\n- start(service: [ApiService]) -> [None] - Starts the gRPC server with the specified service and runs it indefinitely\n  - Input: service - An instance of ApiService to handle incoming requests\n  - Output: None (runs indefinitely until interrupted)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom assets.asrt_pb2_grpc import AsrtGrpcServiceServicer, add_AsrtGrpcServiceServicer_to_server\nfrom assets.asrt_pb2 import SpeechResponse, TextResponse\nimport time\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\nclass ApiService(AsrtGrpcServiceServicer):\n    def __init__(self, speech_model, language_model):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        return SpeechResponse(status_code=200000, status_message='',\n                            result_data=result)\n\n    def Language(self, request, context):\n        result = self.language_model.pinyin_to_text(list(request.pinyins))\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def All(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        result = self.language_model.pinyin_to_text(result_speech)\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def Stream(self, request_iterator, context):\n        result = list()\n        tmp_result_last = list()\n        beam_size = 100\n\n        for request in request_iterator:\n            wav_data = request.wav_data\n            wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                         channels=wav_data.channels,\n                                         byte_width=wav_data.byte_width)\n            result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n\n            for item_pinyin in result_speech:\n                tmp_result = self.language_model.pinyin_stream_decode(tmp_result_last, item_pinyin, beam_size)\n                if len(tmp_result) == 0 and len(tmp_result_last) > 0:\n                    result.append(tmp_result_last[0][0])\n                    yield TextResponse(status_code=200000, status_message='',\n                                   text_result=''.join(result))\n                    result = list()\n                    tmp_result = self.language_model.pinyin_stream_decode([], item_pinyin, beam_size)\n                tmp_result_last = tmp_result\n                yield TextResponse(status_code=206000, status_message='',\n                               text_result=''.join(tmp_result[0][0]))\n\n        if len(tmp_result_last) > 0:\n            result.append(tmp_result_last[0][0])\n            yield TextResponse(status_code=200000, status_message='',\n                           text_result=''.join(result))\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers=10):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=self.max_workers))\n\n    def start(self, service):\n        add_AsrtGrpcServiceServicer_to_server(service, self.server)\n        self.server.add_insecure_port(''.join([self.host, ':', self.port]))\n        self.server.start()\n        try:\n            while True:\n                time.sleep(_ONE_DAY_IN_SECONDS)\n        except KeyboardInterrupt:\n            self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nfrom typing import Iterator, Any\n\nclass ApiService:\n    def __init__(self, speech_model: Any, language_model: Any):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        # Process speech recognition\n        text = self.speech_model.recognize(request.audio)\n        return SpeechResponse(text=text)\n\n    def Language(self, request, context):\n        # Process language translation\n        translated_text = self.language_model.translate(request.text, request.source_language, request.target_language)\n        return TextResponse(text=translated_text)\n\n    def All(self, request, context):\n        # Process combined speech and language\n        text = self.speech_model.recognize(request.audio)\n        translated_text = self.language_model.translate(text, request.source_language, request.target_language)\n        return TextResponse(text=translated_text)\n\n    def Stream(self, request_iterator, context):\n        for request in request_iterator:\n            text = self.speech_model.recognize(request.audio)\n            translated_text = self.language_model.translate(text, request.source_language, request.target_language)\n            yield TextResponse(text=translated_text)\n\nclass GrpcServer:\n    def __init__(self, host: str, port: str, max_workers: int):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n\n    def start(self, service: ApiService):\n        add_ApiServiceServicer_to_server(service, self.server)\n        self.server.add_insecure_port(f\"{self.host}:{self.port}\")\n        self.server.start()\n        self.server.wait_for_termination()"
  },
  {
    "Task_id": 487,
    "Instruction": "Task Description: Create a gRPC server implementation in Python that handles E-Stop (Emergency Stop) functionality for robotic systems, including endpoint registration and check-in procedures with challenge-response verification.\n\nClass Description: The implementation consists of two classes:\n1. MockEstopServicer - Handles the actual gRPC service implementation for E-Stop functionality\n2. GRPCServer - Manages the gRPC server lifecycle and service registration\n\nAttributes:\n\nMockEstopServicer:\n- VALID_STOP_LEVEL: [int] - The valid stop level for E-Stop operations\n- NAME_FOR_ENDPOINT_UNKNOWN: [str] - Special endpoint name that triggers unknown endpoint status\n- NAME_FOR_SERVER_ERROR: [str] - Special endpoint name that triggers server error\n- STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE: [set] - Set of statuses that skip challenge generation\n- _rpc_delay: [int] - Artificial delay for RPC calls (for testing)\n- _challenge: [int] - Current challenge value for verification\n\nGRPCServer:\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nMockEstopServicer:\n- __init__(rpc_delay: int = 0) -> None - Initializes the servicer with optional RPC delay\n- RegisterEstopEndpoint(request, context) -> None - Handles endpoint registration (stub implementation)\n- EstopCheckIn(request, context) -> bosdyn.api.estop_pb2.EstopCheckInResponse - Processes E-Stop check-in requests with challenge-response verification\n\nGRPCServer:\n- __init__() -> None - Initializes the gRPC server with thread pool executor\n- add_service(servicer: MockEstopServicer) -> None - Registers the E-Stop service with the server\n- start(port: int = 0) -> int - Starts the server on specified port (0 for auto-assigned) and returns bound port\n- stop() -> None - Stops the server gracefully",
    "Canonical_solution": "import grpc\nimport concurrent.futures\nimport bosdyn.api.estop_pb2\nimport bosdyn.api.estop_service_pb2_grpc\n\nclass MockEstopServicer(bosdyn.api.estop_service_pb2_grpc.EstopServiceServicer):\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = 'mystery'\n    NAME_FOR_SERVER_ERROR = 'little-bobby-drop-tables'\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = \\\n        set([bosdyn.api.estop_pb2.EstopCheckInResponse.STATUS_UNKNOWN])\n\n    def __init__(self, rpc_delay=0):\n        super(MockEstopServicer, self).__init__()\n        self._rpc_delay = rpc_delay\n        self._challenge = 0\n\n    def RegisterEstopEndpoint(self, request, context):\n        pass\n\n    def EstopCheckIn(self, request, context):\n        resp = bosdyn.api.estop_pb2.EstopCheckInResponse()\n        resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_OK\n        if request.endpoint.name == self.NAME_FOR_SERVER_ERROR:\n            resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_INTERNAL_SERVER_ERROR\n        elif request.endpoint.name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            resp.status = resp.STATUS_ENDPOINT_UNKNOWN\n        else:\n            if not request.challenge:\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            elif request.response != bosdyn.client.estop.response_from_challenge(request.challenge):\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            else:\n                resp.status = resp.STATUS_OK\n        if resp.status not in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            if request.challenge is not None:\n                self._challenge = request.challenge + 1\n            else:\n                self._challenge = 0\n            resp.challenge = self._challenge\n        return resp\n\nclass GRPCServer:\n    def __init__(self):\n        self.server = grpc.server(concurrent.futures.ThreadPoolExecutor(max_workers=10))\n\n    def add_service(self, servicer):\n        bosdyn.api.estop_service_pb2_grpc.add_EstopServiceServicer_to_server(servicer, self.server)\n\n    def start(self, port=0):\n        port = self.server.add_insecure_port(f'127.0.0.1:{port}')\n        self.server.start()\n        return port\n\n    def stop(self):\n        self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport bosdyn.api.estop_pb2\nimport bosdyn.api.estop_pb2_grpc\n\n\nclass MockEstopServicer(bosdyn.api.estop_pb2_grpc.EstopServicer):\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = \"unknown\"\n    NAME_FOR_SERVER_ERROR = \"error\"\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = {bosdyn.api.estop_pb2.EstopStatus.STATUS_OK}\n    _rpc_delay = 0\n    _challenge = 0\n\n    def __init__(self, rpc_delay: int = 0):\n        self._rpc_delay = rpc_delay\n        self._challenge = 42\n\n    def RegisterEstopEndpoint(self, request, context):\n        if self._rpc_delay > 0:\n            import time\n            time.sleep(self._rpc_delay)\n        return bosdyn.api.estop_pb2.RegisterEstopEndpointResponse()\n\n    def EstopCheckIn(self, request, context):\n        if self._rpc_delay > 0:\n            import time\n            time.sleep(self._rpc_delay)\n\n        endpoint_name = request.endpoint_name\n        status = request.status\n\n        if endpoint_name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            context.set_code(grpc.StatusCode.UNKNOWN)\n            return bosdyn.api.estop_pb2.EstopCheckInResponse()\n\n        if endpoint_name == self.NAME_FOR_SERVER_ERROR:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            return bosdyn.api.estop_pb2.EstopCheckInResponse()\n\n        if status not in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            response = bosdyn.api.estop_pb2.EstopCheckInResponse(\n                challenge=self._challenge,\n                stop_level=self.VALID_STOP_LEVEL\n            )\n            self._challenge += 1\n            return response\n\n        return bosdyn.api.estop_pb2.EstopCheckInResponse()\n\n\nclass GRPCServer:\n    def __init__(self):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n\n    def add_service(self, servicer: MockEstopServicer):\n        bosdyn.api.estop_pb2_grpc.add_EstopServicer_to_server(servicer, self.server)\n\n    def start(self, port: int = 0) -> int:\n        self.server.add_insecure_port(f'[::]:{port}')\n        self.server.start()\n        return self.server._state.port\n\n    def stop(self):\n        self.server.stop(0)"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a gRPC server class in Python that handles multiple types of RPC calls (Call, Train, Index, Search, StreamCall) and manages concurrent requests using a thread pool. The server should integrate with a ZeroMQ client for message passing and provide proper context management for resource cleanup.\n\nClass Description: FrontendService is a gRPC server implementation that processes incoming gRPC requests and forwards them to a backend service via ZeroMQ. It handles concurrent requests, manages server lifecycle, and provides streaming capabilities.\n\nAttributes:\n\n- server: [grpc.Server] - The gRPC server instance handling incoming requests\n- bind_address: [str] - The address and port where the server listens (format \"host:port\")\n- _stop_event: [threading.Event] - Event object used to signal server shutdown\n- args: [Namespace/object] - Configuration arguments for server setup (max_concurrency, max_message_size, etc.)\n\nMethods:\n\n- __init__(args) -> [None] - Initializes the gRPC server with thread pool executor and configures message size limits\n  Input: args - Configuration object containing server parameters\n- __enter__() -> [FrontendService] - Starts the gRPC server and clears stop event (context manager entry)\n- __exit__(exc_type, exc_val, exc_tb) -> [None] - Stops the gRPC server and triggers cleanup (context manager exit)\n  Input: exc_type, exc_val, exc_tb - Exception information if any occurred\n- stop() -> [None] - Signals the server to stop by setting the stop event\n- join() -> [None] - Waits for the server to complete shutdown\n- _Servicer: [Nested class] - Handles actual gRPC method implementations\n  Methods:\n    - Call(request, context) -> [gnes_pb2.Response] - Processes standard RPC calls\n      Input: request - gRPC request message, context - gRPC context object\n      Output: Processed response message\n    - Train(request, context) -> [gnes_pb2.Response] - Handles training requests\n    - Index(request, context) -> [gnes_pb2.Response] - Handles indexing requests\n    - Search(request, context) -> [gnes_pb2.Response] - Handles search requests\n    - StreamCall(request_iterator, context) -> [Iterator[gnes_pb2.Response]] - Handles streaming RPC calls\n      Input: request_iterator - Iterator of incoming streaming requests\n      Output: Iterator of response messages\n    - ZmqContext: [Nested class] - Manages ZeroMQ client lifecycle\n      Methods:\n        - __init__(args) -> [None] - Initializes thread-local storage for ZMQ client\n        - __enter__() -> [ZmqClient] - Creates and returns a ZMQ client instance\n        - __exit__(exc_type, exc_value, exc_traceback) -> [None] - Cleans up ZMQ client resources",
    "Canonical_solution": "import grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom ..proto import gnes_pb2_grpc, gnes_pb2\nfrom ..client.base import ZmqClient\nimport threading\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=args.max_concurrency),\n            options=[('grpc.max_send_message_length', args.max_message_size),\n                     ('grpc.max_receive_message_length', args.max_message_size)])\n        gnes_pb2_grpc.add_GnesRPCServicer_to_server(self._Servicer(args), self.server)\n        self.bind_address = '{0}:{1}'.format(args.grpc_host, args.grpc_port)\n        self.server.add_insecure_port(self.bind_address)\n        self._stop_event = threading.Event()\n\n    def __enter__(self):\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n        self.stop()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self._stop_event.wait()\n\n    class _Servicer(gnes_pb2_grpc.GnesRPCServicer):\n        def __init__(self, args):\n            self.args = args\n            self.zmq_context = self.ZmqContext(args)\n            self.request_id_cnt = 0\n            self.send_recv_kwargs = dict(\n                check_version=self.args.check_version,\n                timeout=self.args.timeout,\n                squeeze_pb=self.args.squeeze_pb)\n            self.pending_request = 0\n\n        def Call(self, request, context):\n            with self.zmq_context as zmq_client:\n                zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                return self.remove_envelope(zmq_client.recv_message(**self.send_recv_kwargs))\n\n        def Train(self, request, context):\n            return self.Call(request, context)\n\n        def Index(self, request, context):\n            return self.Call(request, context)\n\n        def Search(self, request, context):\n            return self.Call(request, context)\n\n        def StreamCall(self, request_iterator, context):\n            self.pending_request = 0\n\n            def get_response(num_recv, blocked=False):\n                for _ in range(num_recv):\n                    if blocked or zmq_client.receiver.poll(1):\n                        msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                        self.pending_request -= 1\n                        yield self.remove_envelope(msg)\n\n                while zmq_client.receiver.poll(1):\n                    msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                    self.pending_request -= 1\n                    yield self.remove_envelope(msg)\n\n            with self.zmq_context as zmq_client:\n                for request in request_iterator:\n                    num_recv = max(self.pending_request - self.args.max_pending_request, 1)\n                    yield from get_response(num_recv, num_recv > 1)\n                    zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                    self.pending_request += 1\n\n                yield from get_response(self.pending_request, blocked=True)\n\n        class ZmqContext:\n            def __init__(self, args):\n                self.args = args\n                self.tlocal = threading.local()\n                self.tlocal.client = None\n\n            def __enter__(self):\n                client = ZmqClient(self.args)\n                self.tlocal.client = client\n                return client\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self.tlocal.client.close()\n                self.tlocal.client = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nfrom concurrent import futures\nimport zmq\nfrom gnes_pb2 import Response\nfrom gnes_pb2_grpc import FrontendServiceServicer, add_FrontendServiceServicer_to_server\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=args.max_concurrency))\n        self.bind_address = args.bind_address\n        self._stop_event = threading.Event()\n        self.args = args\n        self._configure_server()\n\n    def _configure_server(self):\n        self.server.add_insecure_port(self.bind_address)\n        add_FrontendServiceServicer_to_server(self._Servicer(), self.server)\n\n    def __enter__(self):\n        self._stop_event.clear()\n        self.server.start()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.stop()\n        self.join()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self.server.stop(5.0)\n\n    class _Servicer(FrontendServiceServicer):\n        def __init__(self):\n            pass\n\n        def Call(self, request, context):\n            with self.ZmqContext(self.args) as zmq_client:\n                response = zmq_client.process(request)\n            return response\n\n        def Train(self, request, context):\n            with self.ZmqContext(self.args) as zmq_client:\n                response = zmq_client.process(request)\n            return response\n\n        def Index(self, request, context):\n            with self.ZmqContext(self.args) as zmq_client:\n                response = zmq_client.process(request)\n            return response\n\n        def Search(self, request, context):\n            with self.ZmqContext(self.args) as zmq_client:\n                response = zmq_client.process(request)\n            return response\n\n        def StreamCall(self, request_iterator, context):\n            for request in request_iterator:\n                with self.ZmqContext(self.args) as zmq_client:\n                    response = zmq_client.process(request)\n                    yield response\n\n        class ZmqContext:\n            def __init__(self, args):\n                self._context = zmq.Context.instance()\n                self._socket = self._context.socket(zmq.DEALER)\n                self._socket.connect(args.zmq_connect)\n\n            def __enter__(self):\n                return self\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self._socket.close()\n                self._context.term()\n\n            def process(self, request):\n                self._socket.send_pyobj(request)\n                response = self._socket.recv_pyobj()\n                return response"
  },
  {
    "Task_id": 489,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles model inference requests, supports both single and streaming responses, and provides graceful termination capabilities.\n\nClass Description: ModelResponse is a gRPC servicer class that implements model inference services. It manages request processing, response generation, and server lifecycle events.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag for server termination control\n- inference_pipeline: [AsyncPipeline] - Pipeline for handling asynchronous inference requests\n- method_name_to_task: [Dict[str, str]] - Mapping between gRPC method names and task types\n- lock: [threading.Lock] - Thread synchronization primitive for concurrent access control\n\nMethods:\n- __init__: [Name](async_pipeline: AsyncPipeline = None) -> None - Initializes the servicer with an optional async pipeline\n- Terminate: [Name](request: google.protobuf.Empty, context: grpc.ServicerContext) -> google.protobuf.Empty - Signals server to stop processing new requests\n- get_stop_event: [Name]() -> threading.Event - Returns the stop event for server control\n- GeneratorReply: [Name](request: ModelRequest, context: grpc.ServicerContext) -> ModelResponse - Handles batch inference requests and returns a single response\n- GeneratorReplyStream: [Name](request: ModelRequest, context: grpc.ServicerContext) -> Iterator[ModelResponse] - Handles streaming inference requests and yields multiple responses\n- _get_task_methods: [Name](method_name: str) -> Dict[str, TaskMethods] - Retrieves task-specific methods for request processing\n\nFunction Description: _do_serve sets up and runs the gRPC server with specified configuration and service implementation.\n\nInput:\n- service_impl: [ModelResponse] - The service implementation instance\n- port: [int] - Port number for server binding\n- interceptors: [List[grpc.ServerInterceptor]] - Optional list of gRPC interceptors\n\nOutput: None (runs the server until termination signal is received)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Dict\nimport threading\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom mii.grpc_related.proto import modelresponse_pb2_grpc\nfrom mii.constants import LB_MAX_WORKER_THREADS, GRPC_MAX_MSG_SIZE, SERVER_SHUTDOWN_TIMEOUT\n\nclass ModelResponse(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, async_pipeline=None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {m.method: t for t, m in TASK_METHODS_DICT.items()}\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uids_put_order, uids_running, uids_complete_order, responses = [], [], [], []\n\n        try:\n            for p in prompts:\n                request_kwargs = kwargs.copy()\n                uid = self.inference_pipeline.put_request(p, request_kwargs)\n                uids_put_order.append(uid)\n                uids_running.append(uid)\n\n            while uids_running:\n                uid, response = self.inference_pipeline.get_response()\n                if uid == -1:\n                    uid = uids_running[0]\n                responses.append(response)\n                self.inference_pipeline.flush_uid(uid)\n                uids_complete_order.append(uids_put_order.index(uid))\n                uids_running.remove(uid)\n\n            responses = [\n                r for idx,\n                r in sorted(zip(uids_complete_order,\n                                responses),\n                            key=lambda pair: pair[0])\n            ]\n            return task_methods.pack_response_to_proto(responses)\n        finally:\n            [self.inference_pipeline.flush_uid(uid) for uid in uids_running]\n\n    def GeneratorReplyStream(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uid = self.inference_pipeline.put_request(prompts[0], kwargs)\n\n        while True:\n            response_uid, r = self.inference_pipeline.get_response()\n            assert uid == response_uid, \"uid mismatch\"\n            done = r.finish_reason != GenerationFinishReason.NONE\n            response = task_methods.pack_response_to_proto([r])\n            yield response\n            if done:\n                break\n\n        self.inference_pipeline.flush_uid(uid)\n\n    def _get_task_methods(self, method_name: str) -> Dict[str, TaskMethods]:\n        if method_name not in self.method_name_to_task:\n            raise ValueError(f\"unknown method: {method_name}\")\n\n        task = self.method_name_to_task[method_name]\n        if task not in TASK_METHODS_DICT:\n            raise ValueError(f\"unknown task: {task}\")\n\n        return TASK_METHODS_DICT[task]\n\ndef _do_serve(service_impl, port, interceptors=[]):\n    stop_event = service_impl.get_stop_event()\n    server = grpc.server(\n        futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n        interceptors=interceptors,\n        options=[\n            (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n            (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE)\n        ]\n    )\n    modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, server)\n    server.add_insecure_port(f\"[::]:{port}\")\n    server.start()\n    stop_event.wait()\n    server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import threading\nimport grpc\nfrom concurrent import futures\nfrom google.protobuf import empty_pb2\nfrom your_module import ModelRequest, ModelResponse, TaskMethods, AsyncPipeline\n\nclass ModelResponse:\n    def __init__(self, async_pipeline=None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {}\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return empty_pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        # Handle batch inference request and return a single response\n        with self.lock:\n            task_methods = self._get_task_methods(request.method_name)\n            result = task_methods.process(request)\n            return ModelResponse(result=result)\n\n    def GeneratorReplyStream(self, request, context):\n        # Handle streaming inference request and yield multiple responses\n        with self.lock:\n            task_methods = self._get_task_methods(request.method_name)\n            for result in task_methods.process_stream(request):\n                yield ModelResponse(result=result)\n\n    def _get_task_methods(self, method_name):\n        return self.method_name_to_task.get(method_name, {})\n\ndef _do_serve(service_impl, port, interceptors=None):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=interceptors)\n    service_impl.method_name_to_task = {\n        'BatchInference': {'process': service_impl.inference_pipeline.batch_inference},\n        'StreamInference': {'process_stream': service_impl.inference_pipeline.stream_inference}\n    }\n    add_ModelResponseServicer_to_server(service_impl, server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    try:\n        while not service_impl.get_stop_event().is_set():\n            server.wait_for_termination(1)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        server.stop(0)"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement an asynchronous HTTP client for making secure API requests with payload validation and error handling.\n\nClass Description: ExternalActionsRequester is a class designed to handle secure asynchronous HTTP requests to an external API endpoint. It includes payload signing, request sending, and response validation capabilities.\n\nAttributes:\n- url: str - The target URL for API requests\n\nMethods:\n- __init__(url: str) -> None - Initializes the requester with the target URL\n- send_request(payload: Dict[str, Any], signature_secret: str, additional_payload_values: Dict[str, Any] = {}, additional_headers: Dict[str, str] = {}, transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2)) -> ExternalActionResponse - Sends an asynchronous POST request with signed payload and handles response/errors\n- _encode_payload(payload: bytes, signature_secret: str) -> str - Creates a HMAC-SHA256 signature for the payload\n- _validate_response(response: Dict[str, Any]) -> ExternalActionResponse - Validates and parses the API response into a structured format",
    "Canonical_solution": "import base64\nimport hashlib\nimport hmac\nimport json\nfrom typing import Any, Dict, Optional\nimport httpx\nfrom pydantic.v1 import BaseModel\n\nclass ExternalActionResponse(BaseModel):\n    result: dict\n    success: bool\n    agent_message: Optional[str] = None\n\nclass ExternalActionsRequester:\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    async def send_request(\n        self,\n        payload: Dict[str, Any],\n        signature_secret: str,\n        additional_payload_values: Dict[str, Any] = {},\n        additional_headers: Dict[str, str] = {},\n        transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2),\n    ) -> ExternalActionResponse:\n        encoded_payload = json.dumps({\"payload\": payload} | additional_payload_values).encode(\"utf-8\")\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"x-vocode-signature\": self._encode_payload(encoded_payload, signature_secret),\n            **additional_headers,\n        }\n\n        async with httpx.AsyncClient(\n            headers=headers,\n            transport=transport,\n            timeout=10,\n        ) as client:\n            try:\n                response = await client.post(self.url, content=encoded_payload)\n                response.raise_for_status()\n                data = response.json()\n                return self._validate_response(data)\n            except httpx.HTTPStatusError as e:\n                if e.response.status_code == 401:\n                    return ExternalActionResponse(result={\"info\": \"Unauthorized\"}, success=False)\n                elif e.response.status_code == 403:\n                    return ExternalActionResponse(result={\"info\": \"Forbidden\"}, success=False)\n                elif 400 <= e.response.status_code < 500:\n                    return ExternalActionResponse(result={\"info\": \"Client error\"}, success=False)\n                elif e.response.status_code >= 500:\n                    return ExternalActionResponse(result={\"info\": \"Server error\"}, success=False)\n                else:\n                    raise e\n\n    def _encode_payload(self, payload: bytes, signature_secret: str) -> str:\n        signature_as_bytes = base64.b64decode(signature_secret)\n        digest = hmac.new(signature_as_bytes, payload, hashlib.sha256).digest()\n        return base64.b64encode(digest).decode()\n\n    def _validate_response(self, response: Dict[str, Any]) -> ExternalActionResponse:\n        if \"result\" not in response:\n            raise ValueError(\"Invalid response format: missing 'result'\")\n        if not isinstance(response[\"result\"], dict):\n            raise ValueError(\"Invalid response format: 'result' must be a dict\")\n        if \"agent_message\" in response and not isinstance(response[\"agent_message\"], str):\n            raise ValueError(\"Invalid response format: 'agent_message' must be a string\")\n        return ExternalActionResponse(\n            result=response[\"result\"],\n            agent_message=response.get(\"agent_message\"),\n            success=True,\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import Dict, Any\nfrom dataclasses import dataclass\nfrom hmac import new as hmac_new\nfrom hashlib import sha256\n\n@dataclass\nclass ExternalActionResponse:\n    status: int\n    content: Dict[str, Any]\n    error: str = \"\"\n\nclass ExternalActionsRequester:\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    async def send_request(self, payload: Dict[str, Any], signature_secret: str, additional_payload_values: Dict[str, Any] = {}, additional_headers: Dict[str, str] = {}, transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2)) -> ExternalActionResponse:\n        full_payload = {**payload, **additional_payload_values}\n        payload_bytes = bytes(str(full_payload), 'utf-8')\n        signature = self._encode_payload(payload_bytes, signature_secret)\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Signature {signature}\",\n            **additional_headers\n        }\n        async with httpx.AsyncClient(transport=transport) as client:\n            try:\n                response = await client.post(self.url, json=full_payload, headers=headers)\n                return self._validate_response(response.json())\n            except httpx.HTTPStatusError as e:\n                return ExternalActionResponse(status=e.response.status_code, content={}, error=str(e))\n            except Exception as e:\n                return ExternalActionResponse(status=500, content={}, error=str(e))\n\n    def _encode_payload(self, payload: bytes, signature_secret: str) -> str:\n        hmac = hmac_new(signature_secret.encode('utf-8'), payload, sha256)\n        return hmac.hexdigest()\n\n    def _validate_response(self, response: Dict[str, Any]) -> ExternalActionResponse:\n        if response.get(\"status\") == \"success\":\n            return ExternalActionResponse(status=200, content=response.get(\"data\", {}))\n        else:\n            return ExternalActionResponse(status=400, content={}, error=response.get(\"error\", \"Unknown error\"))"
  },
  {
    "Task_id": 491,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides session validation functionality using the grpcio library. The server should handle concurrent requests and validate sessions based on a specific mathematical operation between user_id and session_id.\n\nClass Description: ValidateServiceService is a gRPC service implementation that validates user sessions. It inherits from the generated LoginServiceServicer class and provides methods for session validation and server management.\n\nAttributes:\n- None explicitly defined (inherits attributes from parent class)\n\nMethods:\n- Validate(request, context) -> pb2.ValidateResponse: Validates a user session by performing a mathematical operation (XOR followed by modulo 23) on the user_id and session_id from the request. Returns a ValidateResponse with a boolean result.\n  Input: \n    - request: pb2.ValidateRequest - Contains user_id and session_id to validate\n    - context: grpc.ServicerContext - gRPC context object\n  Output: pb2.ValidateResponse - Contains validation result (True/False)\n\n- serve(port, max_workers) -> None: Starts and runs the gRPC server on the specified port with the given number of worker threads.\n  Input:\n    - port: str (default='50051') - Port number to bind the server to\n    - max_workers: int (default=10) - Maximum number of worker threads\n  Output: None (runs indefinitely until terminated)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport validate_session_pb2_grpc as pb2_grpc\nimport validate_session_pb2 as pb2\n\nclass ValidateServiceService(pb2_grpc.LoginServiceServicer):\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def Validate(self, request, context):\n        return pb2.ValidateResponse(result=((request.user_id ^ request.session_id) % 23 == 0))\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        pb2_grpc.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port(f'[::]:{port}')\n        server.start()\n        server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport pb2\nimport pb2_grpc\n\nclass ValidateServiceServicer(pb2_grpc.LoginServiceServicer):\n    def Validate(self, request, context):\n        user_id = request.user_id\n        session_id = request.session_id\n        result = (user_id ^ session_id) % 23\n        return pb2.ValidateResponse(valid=result == 0)\n\ndef serve(port='50051', max_workers=10):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n    pb2_grpc.add_LoginServiceServicer_to_server(ValidateServiceServicer(), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    server.wait_for_termination()"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles various model inference requests concurrently, with thread-safe operations and graceful shutdown capabilities.\n\nClass Description: The GRPCServer class encapsulates a gRPC server implementation that manages multiple model inference services. It provides concurrent request handling, message size configuration, and proper shutdown mechanisms.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance that handles incoming requests\n- stop_event: [threading.Event] - Event flag used to signal server termination\n\nMethods:\n- __init__: [Name](service_impl: [ModelResponseServicer], port: [int]) -> [None] - Initializes the gRPC server with thread pool executor, message size limits, and binds it to the specified port\n- start: [Name]() -> [None] - Starts the server and waits for termination signal before shutting down gracefully\n\nClass Description: The ModelResponseServicer class implements the actual gRPC service methods for various model inference tasks, providing thread-safe operation through locking mechanisms.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag used to signal service termination\n- inference_pipeline: [object] - The underlying inference processing pipeline\n- lock: [threading.Lock] - Lock for thread-safe operations\n\nMethods:\n- __init__: [Name](inference_pipeline: [object]) -> [None] - Initializes the servicer with inference pipeline and synchronization primitives\n- Terminate: [Name](request: [google.protobuf.Empty], context: [grpc.ServicerContext]) -> [google.protobuf.Empty] - Signals the server to terminate\n- get_stop_event: [Name]() -> [threading.Event] - Returns the stop event for server control\n- _run_inference: [Name](method_name: [str], request_proto: [object]) -> [object] - Internal thread-safe method for processing inference requests\n- GeneratorReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles generator model requests\n- Txt2ImgReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles text-to-image model requests\n- ClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles classification model requests\n- QuestionAndAnswerReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles Q&A model requests\n- FillMaskReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles fill-mask model requests\n- TokenClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles token classification requests\n- ZeroShotImgClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles zero-shot image classification\n- InpaintingReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles image inpainting requests",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom .proto import legacymodelresponse_pb2_grpc as modelresponse_pb2_grpc\nimport threading\nfrom mii.legacy.constants import (\n    GRPC_MAX_MSG_SIZE,\n    LB_MAX_WORKER_THREADS,\n    SERVER_SHUTDOWN_TIMEOUT\n)\n\nclass ModelResponseServicer(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            response = self.inference_pipeline.process_request(method_name, request_proto)\n        return response\n\n    def GeneratorReply(self, request, context):\n        return self._run_inference(\"GeneratorReply\", request)\n\n    def Txt2ImgReply(self, request, context):\n        return self._run_inference(\"Txt2ImgReply\", request)\n\n    def ClassificationReply(self, request, context):\n        return self._run_inference(\"ClassificationReply\", request)\n\n    def QuestionAndAnswerReply(self, request, context):\n        return self._run_inference(\"QuestionAndAnswerReply\", request)\n\n    def FillMaskReply(self, request, context):\n        return self._run_inference(\"FillMaskReply\", request)\n\n    def TokenClassificationReply(self, request, context):\n        return self._run_inference(\"TokenClassificationReply\", request)\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        return self._run_inference(\"ZeroShotImgClassificationReply\", request)\n\n    def InpaintingReply(self, request, context):\n        return self._run_inference(\"InpaintingReply\", request)\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(\n            futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n            options=[\n                (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n                (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE),\n            ]\n        )\n        modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, self.server)\n        self.server.add_insecure_port(f\"[::]:{port}\")\n        self.stop_event = service_impl.get_stop_event()\n\n    def start(self):\n        self.server.start()\n        self.stop_event.wait()\n        self.server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nfrom concurrent import futures\nimport google.protobuf.empty_pb2 as empty_pb2\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        service_impl.register_with_server(self.server)\n        self.stop_event = threading.Event()\n        self.port = port\n\n    def start(self):\n        self.server.add_insecure_port(f'[::]:{self.port}')\n        self.server.start()\n        self.stop_event.wait()\n        self.server.stop(5)\n\nclass ModelResponseServicer:\n    def __init__(self, inference_pipeline):\n        self.inference_pipeline = inference_pipeline\n        self._stop_event = threading.Event()\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return empty_pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            return getattr(self.inference_pipeline, method_name)(request_proto)\n\n    def GeneratorReply(self, request, context):\n        return self._run_inference('generator_reply', request)\n\n    def Txt2ImgReply(self, request, context):\n        return self._run_inference('txt2img_reply', request)\n\n    def ClassificationReply(self, request, context):\n        return self._run_inference('classification_reply', request)\n\n    def QuestionAndAnswerReply(self, request, context):\n        return self._run_inference('question_and_answer_reply', request)\n\n    def FillMaskReply(self, request, context):\n        return self._run_inference('fill_mask_reply', request)\n\n    def TokenClassificationReply(self, request, context):\n        return self._run_inference('token_classification_reply', request)\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        return self._run_inference('zero_shot_img_classification_reply', request)\n\n    def InpaintingReply(self, request, context):\n        return self._run_inference('inpainting_reply', request)"
  },
  {
    "Task_id": 493,
    "Instruction": "Task Description: Implement a gRPC server class in Python that handles various types of requests (prompts, tensors, examples) for a distributed node service, with health check capability.\n\nClass Description: GRPCServer is a gRPC server implementation that processes different types of requests for a node service, including prompt processing, tensor processing, and example processing with training capabilities. It manages server lifecycle and handles large message sizes.\n\nAttributes:\n- node: [Any] - The node instance that processes the actual requests\n- host: [str] - The host address where the server will run\n- port: [int] - The port number where the server will listen\n- server: [grpc.aio.Server] - The gRPC server instance (initialized as None)\n\nMethods:\n- start() -> None - Initializes and starts the gRPC server with thread pool executor and configured message size limits\n- stop() -> None - Gracefully stops the gRPC server with a 5-second grace period\n- SendPrompt(request: [node_service_pb2.PromptRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.Tensor] - Processes prompt requests and returns tensor results\n- SendTensor(request: [node_service_pb2.TensorRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.Tensor] - Processes tensor requests and returns tensor results\n- SendExample(request: [node_service_pb2.ExampleRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.Loss] - Processes training examples and returns loss/gradients\n- HealthCheck(request: [node_service_pb2.HealthCheckRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.HealthCheckResponse] - Provides health check status of the server",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport numpy as np\nfrom asyncio import CancelledError\nfrom . import node_service_pb2\nfrom . import node_service_pb2_grpc\n\nclass GRPCServer(node_service_pb2_grpc.NodeServiceServicer):\n    def __init__(self, node, host: str, port: int):\n        self.node = node\n        self.host = host\n        self.port = port\n        self.server = None\n\n    async def start(self) -> None:\n        self.server = grpc.aio.server(\n            futures.ThreadPoolExecutor(max_workers=10),\n            options=[\n                (\"grpc.max_metadata_size\", 32*1024*1024),\n                (\"grpc.max_send_message_length\", 128*1024*1024),\n                (\"grpc.max_receive_message_length\", 128*1024*1024),\n            ],\n        )\n        node_service_pb2_grpc.add_NodeServiceServicer_to_server(self, self.server)\n        listen_addr = f\"{self.host}:{self.port}\"\n        self.server.add_insecure_port(listen_addr)\n        await self.server.start()\n\n    async def stop(self) -> None:\n        if self.server:\n            try:\n                await self.server.stop(grace=5)\n                await self.server.wait_for_termination()\n            except CancelledError:\n                pass\n\n    async def SendPrompt(self, request, context):\n        shard = Shard(\n            model_id=request.shard.model_id,\n            start_layer=request.shard.start_layer,\n            end_layer=request.shard.end_layer,\n            n_layers=request.shard.n_layers,\n        )\n        prompt = request.prompt\n        request_id = request.request_id\n        result = await self.node.process_prompt(shard, prompt, request_id)\n        tensor_data = result.tobytes() if result is not None else None\n        return node_service_pb2.Tensor(tensor_data=tensor_data, shape=result.shape, dtype=str(result.dtype)) if result is not None else node_service_pb2.Tensor()\n\n    async def SendTensor(self, request, context):\n        shard = Shard(\n            model_id=request.shard.model_id,\n            start_layer=request.shard.start_layer,\n            end_layer=request.shard.end_layer,\n            n_layers=request.shard.n_layers,\n        )\n        tensor = np.frombuffer(request.tensor.tensor_data, dtype=np.dtype(request.tensor.dtype)).reshape(request.tensor.shape)\n        request_id = request.request_id\n        result = await self.node.process_tensor(shard, tensor, request_id)\n        tensor_data = result.tobytes() if result is not None else None\n        return node_service_pb2.Tensor(tensor_data=tensor_data, shape=result.shape, dtype=str(result.dtype)) if result is not None else node_service_pb2.Tensor()\n\n    async def SendExample(self, request, context):\n        shard = Shard(\n            model_id=request.shard.model_id,\n            start_layer=request.shard.start_layer,\n            end_layer=request.shard.end_layer,\n            n_layers=request.shard.n_layers,\n        )\n        example = np.frombuffer(request.example.tensor_data, dtype=np.dtype(request.example.dtype)).reshape(request.example.shape)\n        target = np.frombuffer(request.target.tensor_data, dtype=np.dtype(request.target.dtype)).reshape(request.target.shape)\n        length = np.frombuffer(request.length.tensor_data, dtype=np.dtype(request.length.dtype)).reshape(request.length.shape)\n        train = request.train\n        request_id = request.request_id\n\n        if train and not shard.is_first_layer():\n            loss, grad = await self.node.process_example(shard, example, target, length, train, request_id)\n            tensor_data = grad.tobytes()\n            grad_tensor = node_service_pb2.Tensor(tensor_data=tensor_data, shape=grad.shape, dtype=str(grad.dtype))\n            return node_service_pb2.Loss(loss=loss, grads=grad_tensor)\n        else:\n            loss = await self.node.process_example(shard, example, target, length, train, request_id)\n            return node_service_pb2.Loss(loss=loss, grads=None)\n\n    async def HealthCheck(self, request, context):\n        return node_service_pb2.HealthCheckResponse(is_healthy=True)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import asyncio\nimport grpc\nfrom concurrent import futures\nimport node_service_pb2\nimport node_service_pb2_grpc\n\nclass GRPCServer:\n    def __init__(self, node, host='localhost', port=50051):\n        self.node = node\n        self.host = host\n        self.port = port\n        self.server = None\n\n    async def SendPrompt(self, request, context):\n        result = await self.node.process_prompt(request.prompt)\n        return node_service_pb2.Tensor(tensor=result)\n\n    async def SendTensor(self, request, context):\n        result = await self.node.process_tensor(request.tensor)\n        return node_service_pb2.Tensor(tensor=result)\n\n    async def SendExample(self, request, context):\n        loss = await self.node.train_example(request.example)\n        return node_service_pb2.Loss(loss=loss)\n\n    async def HealthCheck(self, request, context):\n        return node_service_pb2.HealthCheckResponse(status=\"healthy\")\n\n    def start(self):\n        server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n        node_service_pb2_grpc.add_NodeServiceServicer_to_server(self, server)\n        server.add_insecure_port(f\"{self.host}:{self.port}\")\n        server.max_message_length(1024 * 1024 * 1024)  # 1 GB\n        self.server = server\n        asyncio.get_event_loop().run_until_complete(server.start())\n        print(f\"Server started on {self.host}:{self.port}\")\n\n    async def stop(self):\n        if self.server:\n            await self.server.stop(5)\n            print(\"Server stopped gracefully\")"
  },
  {
    "Task_id": 494,
    "Instruction": "Task Description: Implement a gRPC server class in Python that can handle concurrent requests and manage the server lifecycle (start, run, wait, and stop).\n\nClass Description: The GRPCServer class is responsible for creating and managing a gRPC server instance. It initializes the server with a thread pool executor for handling concurrent requests, binds the server to a specified host and port, and provides methods to start, run, wait for termination, and stop the server.\n\nAttributes:\n- _server: grpc.Server - The gRPC server instance that handles incoming requests.\n\nMethods:\n- __init__(api_service: 'APIService', max_workers: int = 20) -> None - Initializes the gRPC server with a thread pool executor and binds the API service implementation to the server.\n- start(host: str, port: int) -> None - Starts the gRPC server by binding it to the specified host and port.\n- run(host: str, port: int) -> None - Combines the start and wait methods to run the server indefinitely.\n- wait() -> None - Blocks the current thread until the server is terminated.\n- stop() -> None - Stops the gRPC server gracefully.",
    "Canonical_solution": "import typing as T\nimport inspect\nimport traceback\nfrom concurrent import futures\nimport grpc\nfrom towhee.serve.io import JSON, TEXT, BYTES, NDARRAY\nfrom towhee.serve.api_service import RouterConfig\nfrom towhee.utils.log import engine_log\n\nclass GRPCServer:\n    def __init__(self, api_service: 'APIService', max_workers: int = 20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        service_pb2_grpc.add_PipelineServicesServicer_to_server(_PipelineImpl(api_service), self._server)\n\n    def start(self, host: str, port: int):\n        uri = str(host) + ':' + str(port)\n        self._server.add_insecure_port(uri)\n        self._server.start()\n        engine_log.info('Start grpc server at %s.', uri)\n\n    def run(self, host: str, port: int):\n        self.start(host, port)\n        self.wait()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\n\nclass GRPCServer:\n    def __init__(self, api_service, max_workers=20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        api_service.add_to_server(self._server)\n\n    def start(self, host, port):\n        self._server.add_insecure_port(f\"{host}:{port}\")\n\n    def run(self, host, port):\n        self.start(host, port)\n        self._server.start()\n        self.wait()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(grace=5)"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC server in Python that can handle multiple versions of a service concurrently, with support for server reflection and interceptors.\n\nFunction Description: The `serve()` function initializes and starts two gRPC servers on different ports. The first server handles versions 1 and 2 of the Greeter service, while the second server handles version 3 with reflection enabled. Both servers use thread pool executors for concurrency and share the same interceptors for request logging.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts servers that run indefinitely)\n\nNote: The function uses threading.Event().wait() to keep the servers running indefinitely. The servers are configured with:\n1. ThreadPoolExecutor with 10 workers for concurrent request handling\n2. LoggingInterceptor for request logging\n3. Insecure ports (50051 and 50052) for communication\n4. Different service versions (v1, v2 on port 50051; v3 with reflection on port 50052)",
    "Canonical_solution": "import logging\nimport threading\nfrom concurrent import futures\nimport grpc\nimport helloworld_v1_precompiled_pb2_grpc as helloworld_pb2_grpc_v1\nimport helloworld_v2_compiled_pb2_grpc as helloworld_pb2_grpc_v2\nimport helloworld_v3_reflected_pb2_grpc as helloworld_pb2_grpc_v3\nfrom grpc_interceptor import ServerInterceptor\nfrom grpc_reflection.v1alpha import reflection\n\ndef serve():\n    interceptors = [LoggingInterceptor()]\n    executor = futures.ThreadPoolExecutor(max_workers=10)\n\n    # One server which exposes these two\n    server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v1.add_GreeterServicer_to_server(GreeterV1(), server)\n    helloworld_pb2_grpc_v2.add_GreeterServicer_to_server(GreeterV2(), server)\n\n    server.add_insecure_port(\"0.0.0.0:50051\")\n    server.start()\n\n    # One server which exposes the V3 API and has reflection turned on\n    reflecting_server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v3.add_GreeterServicer_to_server(GreeterV3(), reflecting_server)\n    service_names = (\n        helloworld_pb2_v3.DESCRIPTOR.services_by_name[\"Greeter\"].full_name,\n        reflection.SERVICE_NAME,\n    )\n    reflection.enable_server_reflection(service_names, reflecting_server)\n    reflecting_server.add_insecure_port(\"0.0.0.0:50052\")\n    reflecting_server.start()\n\n    logging.info(\"Starting grpc server\")\n    event = threading.Event()\n    event.wait()",
    "Code_level": "Function-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport threading\nimport logging\n\nclass LoggingInterceptor(grpc.ServerInterceptor):\n    def intercept_service(self, continuation, handler_call_details):\n        logging.info(f\"Received request: {handler_call_details.method}\")\n        return continuation(handler_call_details)\n\ndef serve():\n    server1 = grpc.server(futures.ThreadPoolExecutor(max_workers=10),\n                          interceptors=(LoggingInterceptor(),))\n    server2 = grpc.server(futures.ThreadPoolExecutor(max_workers=10),\n                          interceptors=(LoggingInterceptor(),))\n\n    # Register service versions for server1 (v1 and v2)\n    # Add your service registration code here for Greeter v1 and v2\n\n    # Register service version for server2 (v3) with reflection\n    server2.add_reflection_service(\n        grpc.reflection.v1alpha.reflection_server.ReflectionServicer()\n    )\n    # Add your service registration code here for Greeter v3\n\n    server1.add_insecure_port('[::]:50051')\n    server2.add_insecure_port('[::]:50052')\n\n    server1.start()\n    server2.start()\n\n    stop_event = threading.Event()\n    stop_event.wait()"
  },
  {
    "Task_id": 497,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency, implements service methods, and supports server reflection.\n\nClass Description: GRPCServer is a class that encapsulates the functionality of a gRPC server, including initialization with a thread pool, service implementation, and server lifecycle management (start/stop).\n\nAttributes:\n- _server: grpc.Server - The underlying gRPC server instance\n- _service_impl: ServiceImpl - The implementation of the gRPC service methods\n\nMethods:\n- __init__(max_workers: int = 5) -> None - Initializes the gRPC server with a thread pool executor of specified size and sets up service implementation\n- start(port: int) -> None - Binds the server to the specified port and starts listening for incoming requests\n- stop(grace_period: float = 1.0) -> None - Stops the server with the specified grace period for ongoing requests\n\nNested Class Description: ServiceImpl implements the actual gRPC service methods defined in the protobuf service.\n\nMethods:\n- Empty(request: Any, context) -> Any - Handles empty requests and returns an empty response\n- SimpleTest(request: test_services_pb2.DummyRequest, context: grpc.ServicerContext) -> test_services_pb2.DummyResponse - Processes a dummy request, validates input, and returns a response or aborts with error if validation fails",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Any\nfrom . import test_services_pb2, test_services_pb2_grpc\n\nclass ServiceImpl(test_services_pb2_grpc.DummyServiceServicer):\n    def Empty(self, request: Any, context) -> Any:\n        return test_services_pb2.Empty()\n\n    def SimpleTest(\n        self, request: test_services_pb2.DummyRequest, context: grpc.ServicerContext\n    ) -> test_services_pb2.DummyResponse:\n        if request.request_id > 1000:\n            context.abort(grpc.StatusCode.FAILED_PRECONDITION, \"number too big!\")\n        return test_services_pb2.DummyResponse(response_id=request.request_id + 1)\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_DummyServiceServicer_to_server(self._service_impl, self._server)\n        \n        service_names = (\n            test_services_pb2.DESCRIPTOR.services_by_name[\"DummyService\"].full_name,\n            reflection.SERVICE_NAME,\n        )\n        reflection.enable_server_reflection(service_names, self._server)\n\n    def start(self, port: int) -> None:\n        self._server.add_insecure_port(f\"127.0.0.1:{port}\")\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0) -> None:\n        self._server.stop(grace_period)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport test_services_pb2\nimport test_services_pb2_grpc\n\n\nclass ServiceImpl(test_services_pb2_grpc.TestServiceServicer):\n    def Empty(self, request, context):\n        return test_services_pb2.EmptyResponse()\n\n    def SimpleTest(self, request, context):\n        if request.value < 0:\n            context.abort(grpc.StatusCode.INVALID_ARGUMENT, \"Value must be non-negative\")\n        return test_services_pb2.DummyResponse(result=request.value + 1)\n\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_TestServiceServicer_to_server(self._service_impl, self._server)\n        self._server.add_insecure_port('localhost:0')\n\n    def start(self, port: int):\n        self._server.add_insecure_port(f'localhost:{port}')\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0):\n        self._server.stop(grace_period)"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement asynchronous HTTP client functions to interact with a gacha information API, retrieving lists of available gacha and their detailed information.\n\nFunction Description: The code consists of two asynchronous functions that use httpx library to make HTTP requests to a gacha information API. The first function retrieves a list of available gacha, while the second fetches detailed information for a specific gacha using its ID.\n\nInput: \n- For `gacha_info_list()`: None\n- For `gacha_info(gacha_id)`: \n  - gacha_id: [str] - The unique identifier of the gacha to fetch details for\n\nOutput: \n- For `gacha_info_list()`: [list] - A list of available gacha items\n- For `gacha_info(gacha_id)`: [dict] - A dictionary containing detailed information about the specified gacha",
    "Canonical_solution": "import httpx\n\nBASE_URL = 'https://operation-webstatic.mihoyo.com/gacha_info/hk4e/cn_gf01/%s'\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % 'gacha/list.json')\n        json_data = res.json()\n        return json_data['data']['list']\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % gacha_id + '/zh-cn.json')\n        return res.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        response = await client.get('https://api.example.com/gacha/list')\n        return response.json()\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f'https://api.example.com/gacha/{gacha_id}')\n        return response.json()"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread pools for concurrency and inter-process communication queues for request/response handling.\n\nClass Description: NetworkComputeBridgeWorkerServicer is a gRPC servicer class that processes incoming network compute requests and model listing requests, using input/output queues for inter-process communication.\n\nAttributes:\n- thread_input_queue: [multiprocessing.Queue] - Queue for receiving incoming requests from gRPC clients\n- thread_output_queue: [multiprocessing.Queue] - Queue for sending responses back to gRPC clients\n\nMethods:\n- NetworkCompute: [Name](request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes a network compute request by putting it in the input queue and waiting for response from output queue\n- ListAvailableModels: [Name](request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes a model listing request by putting it in the input queue and waiting for response from output queue\n\nFunction Description: start_grpc_server creates and starts a gRPC server instance with thread pool executor, registers the servicer, and binds it to a specified port.\n\nInput:\n- port: [int] - The port number on which the gRPC server should listen\n\nOutput:\n- server: [grpc.Server] - The running gRPC server instance",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport multiprocessing\nfrom multiprocessing import Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\nimport bosdyn.api.header_pb2 as header_pb2\n\nREQUEST_QUEUE = Queue()\nRESPONSE_QUEUE = Queue()\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n        NetworkComputeBridgeWorkerServicer(REQUEST_QUEUE, RESPONSE_QUEUE), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport multiprocessing\nimport threading\nfrom concurrent import futures\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(('NetworkCompute', request))\n        response = self.thread_output_queue.get()\n        return response\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(('ListAvailableModels', request))\n        response = self.thread_output_queue.get()\n        return response\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(NetworkComputeBridgeWorkerServicer(None, None), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    return server"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Implement a gRPC server class for Vizier service that handles concurrent requests and manages service lifecycle.\n\nClass Description: DefaultVizierServer is a class that sets up and manages a gRPC server for Vizier service, including initialization, startup, and configuration of related services. It handles concurrent requests using a thread pool and provides access to the server's datastore and endpoint.\n\nAttributes:\n- _host: [str] - The host address where the server will run (default: 'localhost')\n- _database_url: [Optional[str]] - URL for the database connection\n- _policy_factory: [Any] - Factory for creating policy objects (default: service_policy_factory_lib.DefaultPolicyFactory)\n- _early_stop_recycle_period: [datetime.timedelta] - Time period for early stop recycling (default: 0.1 seconds)\n- _port: [int] - The port number selected for the server\n- _servicer: [Any] - The Vizier service implementation\n- _server: [grpc.Server] - The gRPC server instance\n- stub: [Any] - The client stub for the server\n\nMethods:\n- __init__(host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)) -> None - Initializes the server with configuration parameters\n- datastore() -> [property] - Returns the datastore from the servicer\n- endpoint() -> [property] - Returns the server endpoint as 'host:port'\n- start() -> None - Starts the gRPC server and initializes services\n- wait_for_early_stop_recycle_period() -> None - Waits for the configured early stop recycle period",
    "Canonical_solution": "from concurrent import futures\nimport datetime\nimport time\nfrom typing import Optional\nimport grpc\nimport portpicker\nfrom vizier._src.service import vizier_service\nfrom vizier._src.service import vizier_service_pb2_grpc\nfrom vizier._src.service import stubs_util\nfrom vizier._src.service import pythia_service\nfrom vizier._src.service import pythia_service_pb2_grpc\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, \n                 policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)):\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = portpicker.pick_unused_port()\n        \n        # Initialize non-user-settable fields\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self):\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self):\n        return f'{self._host}:{self._port}'\n\n    def start(self):\n        # Setup Vizier server\n        self._servicer = vizier_service.VizierServicer(\n            database_url=self._database_url,\n            early_stop_recycle_period=self._early_stop_recycle_period\n        )\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=30))\n        vizier_service_pb2_grpc.add_VizierServiceServicer_to_server(\n            self._servicer, self._server\n        )\n        self._server.add_insecure_port(self.endpoint)\n        self._server.start()\n        self.stub = stubs_util.create_vizier_server_stub(self.endpoint)\n\n        # Setup default Pythia Service\n        default_pythia_service = pythia_service.PythiaServicer(\n            self._servicer, policy_factory=self._policy_factory\n        )\n        self._servicer.default_pythia_service = default_pythia_service\n\n    def wait_for_early_stop_recycle_period(self):\n        time.sleep(self._early_stop_recycle_period.total_seconds())",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nfrom datetime import timedelta\nfrom typing import Optional, Any\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: timedelta = timedelta(seconds=0.1)) -> None:\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory()\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = 50051\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self):\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self):\n        return f\"{self._host}:{self._port}\"\n\n    def start(self) -> None:\n        self._server = grpc.server(thread_pool=threading.ThreadPoolExecutor(max_workers=10))\n        vizier_pb2_grpc.add_VizierServicer_to_server(self._servicer, self._server)\n        self._server.add_insecure_port(f\"{self._host}:{self._port}\")\n        self._server.start()\n\n    def wait_for_early_stop_recycle_period(self) -> None:\n        self._server.wait_for_termination(timeout=self._early_stop_recycle_period.total_seconds())"
  },
  {
    "Task_id": 502,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency and implements a dummy API for testing purposes.\n\nClass Description: The DummyServer class implements a gRPC server that listens on a specified address and handles incoming requests through a servicer class. It manages server lifecycle and provides a simple echo service.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance configured with thread pool executor and message size limits\n- bind_address: [str] - The network address and port where the server will listen for incoming connections\n\nMethods:\n- __init__: [Name](bind_address: str) -> None - Initializes the gRPC server with thread pool executor, configures message size limits, and binds to the specified address\n- __enter__: [Name]() -> DummyServer - Starts the server and returns the instance (for context manager usage)\n- __exit__: [Name](exc_type, exc_val, exc_tb) -> None - Stops the server when exiting context (for context manager usage)\n- GNESServicer.dummyAPI: [Name](request, context) -> request - Servicer method that echoes back received requests (implements dummy API)",
    "Canonical_solution": "import os\nimport grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tests.proto_s import dummy_pb2_grpc\n\nclass DummyServer:\n    def __init__(self, bind_address):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=1),\n            options=[('grpc.max_send_message_length', 1 * 1024 * 1024),\n                     ('grpc.max_receive_message_length', 1 * 1024 * 1024)])\n        dummy_pb2_grpc.add_DummyGRPCServiceServicer_to_server(self.GNESServicer(), self.server)\n        self.bind_address = bind_address\n        self.server.add_insecure_port(self.bind_address)\n\n    def __enter__(self):\n        self.server.start()\n        print('dummy server is listening at: %s' % self.bind_address)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n\n    class GNESServicer(dummy_pb2_grpc.DummyGRPCServiceServicer):\n        def dummyAPI(self, request, context):\n            print('the dummy server received something: %s' % request)\n            return request",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\n\nclass DummyServer:\n    def __init__(self, bind_address: str):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self.bind_address = bind_address\n        grpc.add_dummy_apiServicer_to_server(DummyServicer(), self.server)\n        self.server.add_insecure_port(bind_address)\n        self.server._thread_pool.maxsize = 100\n        self.server._max_message_length = 1024 * 1024 * 10\n\n    def __enter__(self):\n        self.server.start()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(0)\n\nclass DummyServicer:\n    def dummyAPI(self, request, context):\n        return request"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create an asynchronous function to check the health status of a server by querying its live and ready endpoints.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send HTTP GET requests to a server's health endpoints (/v1/health/live and /v1/health/ready). It returns a tuple indicating whether the server is live and ready based on the HTTP status codes received.\n\nInput: \n- url (str): The base URL of the server to check\n\nOutput: \n- Tuple[bool, bool]: A tuple where the first element indicates if the server is live (HTTP 200 status) and the second element indicates if the server is ready (HTTP 200 status)",
    "Canonical_solution": "from typing import Tuple\nimport httpx\n\nasync def _get_health(url: str) -> Tuple[bool, bool]:\n    \"\"\"\n    Query {url}/v1/health/{live,ready} to check if the server is running and ready\n\n    Args:\n        url (str): URL of the server\n\n    Returns:\n        Tuple[bool, bool]: (is_live, is_ready)\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        live = await client.get(f\"{url}/v1/health/live\")\n        ready = await client.get(f\"{url}/v1/health/ready\")\n        return live.status_code == 200, ready.status_code == 200",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import Tuple\nimport asyncio\n\nasync def check_server_health(url: str) -> Tuple[bool, bool]:\n    async with httpx.AsyncClient() as client:\n        live_response = await client.get(f\"{url}/v1/health/live\")\n        ready_response = await client.get(f\"{url}/v1/health/ready\")\n        is_live = live_response.status_code == 200\n        is_ready = ready_response.status_code == 200\n        return (is_live, is_ready)"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create an asynchronous function to send an HTTP POST request with candidate and role data to a specified endpoint, and return the response as a dictionary.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send a POST request containing candidate information and role details to a server endpoint. It handles the response by converting it to JSON format and returns the result. The function is designed to be non-blocking and should be called within an async context.\n\nInput:\n- candidates: list[dict] - A list of candidate dictionaries, each containing:\n  - name: str - The candidate's name\n  - self_identified_seniority: int - The candidate's self-assessed seniority level\n  - bio: str - The candidate's biography/description\n- role: dict - A dictionary containing role details:\n  - title: str - The job title\n  - desired_seniority: int - The desired seniority level for the role\n  - description: str - The job description\n\nOutput:\n- dict - The JSON-decoded response from the server containing the processed results",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\nasync def send_http_request(candidates: list, role: dict) -> dict:\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"http://localhost:8000/interview\",\n            json={\"candidates\": candidates, \"role\": role},\n        )\n        result = response.json()\n        return result\n\nif __name__ == \"__main__\":\n    candidates = [\n        {\n            \"name\": \"Alice\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"10 years with postgres, 5 years with python, 3 years with django.\",\n        },\n        {\n            \"name\": \"Bob\",\n            \"self_identified_seniority\": 1,\n            \"bio\": \"I just graduated from a coding bootcamp and I'm ready to take on the world!\",\n        },\n        {\n            \"name\": \"Charlie\",\n            \"self_identified_seniority\": 2,\n            \"bio\": \"graduated 2 years ago and i can make you a react app in no time\",\n        },\n        {\n            \"name\": \"David\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"i just been riding that SCRUM wave for 10 years fam\",\n        },\n    ]\n    role = {\n        \"title\": \"Senior Software Engineer\",\n        \"desired_seniority\": 3,\n        \"description\": \"Build and maintain a large-scale web application with a team of 10+ engineers.\",\n    }\n    result = asyncio.run(send_http_request(candidates, role))\n    print(json.dumps(result, indent=2))",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def send_candidate_role_data(candidates: list[dict], role: dict) -> dict:\n    async with httpx.AsyncClient() as client:\n        payload = {\n            \"candidates\": candidates,\n            \"role\": role\n        }\n        response = await client.post(\"https://api.example.com/match\", json=payload)\n        return response.json()"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create an asynchronous function to fetch data from a specified URL using HTTP GET request with customizable headers, handling potential HTTP errors.\n\nFunction Description: The function uses httpx library with asyncio to make asynchronous HTTP requests. It creates an async client, sends a GET request to the provided URL, checks for successful response status, and returns the response object. Default headers are provided but can be overridden.\n\nInput:\n- url: str - The target URL to fetch data from\n- headers: dict (optional) - Custom headers to include in the request (defaults to common browser User-Agent if not provided)\n\nOutput:\n- Returns: httpx.Response - The HTTP response object containing status code, headers, and content\n- Raises: httpx.HTTPStatusError - If the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import os\nimport httpx\nimport aiofiles\n\nasync def fetch_data(url: str, headers: dict = None):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n    } if headers is None else headers.get('headers')\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url, headers=headers)\n        response.raise_for_status()  # Ensure successful response\n        return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def fetch_data(url: str, headers: dict = None) -> httpx.Response:\n    default_headers = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n    }\n    if headers:\n        default_headers.update(headers)\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url, headers=default_headers)\n        response.raise_for_status()\n        return response"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement an asynchronous function to fetch and filter GitHub contributors for a repository, then retrieve their detailed user information.\n\nFunction Description: This function asynchronously retrieves contributors from a GitHub repository using the GitHub API, filters them based on specific criteria (user type, ignored logins, and acknowledgements), and then fetches detailed information for each qualifying contributor. The function uses httpx for asynchronous HTTP requests and handles pagination to retrieve all contributors.\n\nInput:\n- auth: Tuple[str, str] - A tuple containing GitHub username and password/token for authentication\n- GITHUB_API_CONTRIBUTORS: str - The GitHub API endpoint for contributors\n- PER_PAGE: int - Number of contributors to fetch per page\n- GITHUB_USER_TYPE: str - The type of contributor to filter for (e.g., 'User')\n- IGNORED_AUTHOR_LOGINS: List[str] - List of GitHub logins to ignore\n- ACKNOWLEDGEMENTS: str - String containing acknowledged contributors to exclude\n\nOutput:\n- List[Dict] - A list of dictionaries containing detailed user information for unacknowledged contributors who meet the filtering criteria",
    "Canonical_solution": "import asyncio\nimport httpx\n\nasync def main():\n    auth = (input(\"Github Username: \"), getpass())\n    async with httpx.AsyncClient() as client:\n        page = 0\n        results = []\n        contributors = []\n        while not page or len(results) == PER_PAGE:\n            page += 1\n            response = await client.get(\n                f\"{GITHUB_API_CONTRIBUTORS}?per_page={PER_PAGE}&page={page}\", auth=auth\n            )\n            results = response.json()\n            contributors.extend(\n                (\n                    contributor\n                    for contributor in results\n                    if contributor[\"type\"] == GITHUB_USER_TYPE\n                    and contributor[\"login\"] not in IGNORED_AUTHOR_LOGINS\n                    and f\"@{contributor['login'].lower()}\" not in ACKNOWLEDGEMENTS\n                )\n            )\n\n        unacknowledged_users = await asyncio.gather(\n            *(client.get(contributor[\"url\"], auth=auth) for contributor in contributors)\n        )\n        unacknowledged_users = [request.json() for request in unacknowledged_users]",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import List, Dict, Tuple\n\nasync def get_contributors_info(\n    auth: Tuple[str, str],\n    GITHUB_API_CONTRIBUTORS: str,\n    PER_PAGE: int,\n    GITHUB_USER_TYPE: str,\n    IGNORED_AUTHOR_LOGINS: List[str],\n    ACKNOWLEDGEMENTS: str\n) -> List[Dict]:\n    async with httpx.AsyncClient(auth=auth) as client:\n        contributors = []\n        page = 1\n        while True:\n            params = {\"page\": page, \"per_page\": PER_PAGE}\n            response = await client.get(GITHUB_API_CONTRIBUTORS, params=params)\n            if response.status_code != 200:\n                break\n            data = response.json()\n            if not data:\n                break\n            for contributor in data:\n                login = contributor[\"login\"]\n                if login in IGNORED_AUTHOR_LOGINS or login in ACKNOWLEDGEMENTS:\n                    continue\n                user_url = contributor[\"url\"]\n                user_response = await client.get(user_url)\n                if user_response.status_code == 200:\n                    user_data = user_response.json()\n                    if user_data.get(\"type\") == GITHUB_USER_TYPE:\n                        contributors.append(user_data)\n            page += 1\n        return contributors"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement an HTTP connection pool class to manage and reuse HTTP connections efficiently, supporting both HTTP and HTTPS protocols with configurable pooling behavior.\n\nClass Description: HTTPConnectionPool is a connection pooling implementation that manages a pool of HTTP/HTTPS connections to a specific host, allowing for connection reuse and efficient resource management. It handles connection creation, retrieval, and release with support for timeouts, retries, and proxy configurations.\n\nAttributes:\n- scheme: str - The URL scheme (either \"http\" or \"https\")\n- ConnectionCls: class - The connection class to use (HTTPConnection or HTTPSConnection)\n- QueueCls: class - The queue class to use for connection pooling (default: queue.LifoQueue)\n- host: str - The target host for connections\n- port: Optional[int] - The target port for connections\n- timeout: Union[Timeout, float, None] - Connection and read timeout settings\n- retries: Union[Retry, bool, int, None] - Retry configuration for failed requests\n- pool: queue.LifoQueue - The connection pool queue\n- block: bool - Whether to block when pool is full/empty\n- proxy: Optional[Url] - Proxy configuration\n- proxy_headers: Optional[Mapping[str, str]] - Headers for proxy connections\n- headers: Optional[Mapping[str, str]] - Default headers for requests\n- conn_kw: Any - Additional connection keyword arguments\n\nMethods:\n- __init__(host: str, port: Optional[int] = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Optional[Mapping[str, str]] = None, retries: Union[Retry, bool, int, None] = None, _proxy: Optional[Url] = None, _proxy_headers: Optional[Mapping[str, str]] = None, **conn_kw: Any) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout: Optional[float] = None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn: Optional[HTTPConnection]) -> None - Returns a connection to the pool\n- _make_request(conn: HTTPConnection, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> BaseHTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Union[Timeout, float, None] = None, pool_timeout: Optional[int] = None, **response_kw: Any) -> BaseHTTPResponse - Main method to execute HTTP requests using pooled connections\n- _close_pool_connections(pool: queue.LifoQueue) -> None - Closes all connections in the pool\n- close() -> None - Closes the connection pool and all its connections",
    "Canonical_solution": "from socket import timeout as SocketTimeout\nfrom types import TracebackType\nfrom typing import Any, Mapping, Optional, Union\nimport queue\nimport weakref\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    ClosedPoolError,\n    EmptyPoolError,\n    FullPoolError,\n    HostChangedError,\n    LocationValueError,\n    MaxRetryError,\n    NewConnectionError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n)\nfrom .response import BaseHTTPResponse\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import Url, parse_url\nfrom .util.util import to_str\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n    QueueCls = queue.LifoQueue\n\n    def __init__(\n        self,\n        host: str,\n        port: Optional[int] = None,\n        timeout: Union[Timeout, float, None] = None,\n        maxsize: int = 1,\n        block: bool = False,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Union[Retry, bool, int, None] = None,\n        _proxy: Optional[Url] = None,\n        _proxy_headers: Optional[Mapping[str, str]] = None,\n        **conn_kw: Any,\n    ):\n        if not host:\n            raise LocationValueError(\"No host specified.\")\n\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.pool = self.QueueCls(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.headers = headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n        weakref.finalize(self, self._close_pool_connections, self.pool)\n\n    def _new_conn(self) -> HTTPConnection:\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw,\n        )\n\n    def _get_conn(self, timeout: Optional[float] = None) -> HTTPConnection:\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool is empty and blocking is enabled.\")\n            conn = self._new_conn()\n\n        if conn and is_connection_dropped(conn):\n            conn.close()\n            conn = self._new_conn()\n\n        return conn or self._new_conn()\n\n    def _put_conn(self, conn: Optional[HTTPConnection]) -> None:\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            if conn:\n                conn.close()\n\n    def _make_request(\n        self,\n        conn: HTTPConnection,\n        method: str,\n        url: str,\n        body: Optional[Any] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Optional[Retry] = None,\n        timeout: Union[Timeout, float, None] = None,\n        **response_kw: Any,\n    ) -> BaseHTTPResponse:\n        timeout_obj = self.timeout if timeout is None else Timeout.from_float(timeout)\n        \n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n            )\n            response = conn.getresponse()\n            response._pool = self\n            return response\n        except (SocketTimeout, BaseSSLError, OSError) as e:\n            conn.close()\n            raise\n\n    def urlopen(\n        self,\n        method: str,\n        url: str,\n        body: Optional[Any] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Optional[Retry] = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: Union[Timeout, float, None] = None,\n        pool_timeout: Optional[int] = None,\n        **response_kw: Any,\n    ) -> BaseHTTPResponse:\n        conn = None\n        try:\n            conn = self._get_conn(timeout=pool_timeout)\n            response = self._make_request(\n                conn,\n                method,\n                url,\n                body=body,\n                headers=headers,\n                retries=retries,\n                timeout=timeout,\n                **response_kw,\n            )\n            return response\n        except (EmptyPoolError, MaxRetryError, HostChangedError) as e:\n            raise\n        except (TimeoutError, HTTPException, OSError) as e:\n            if conn:\n                conn.close()\n            raise\n        finally:\n            if conn:\n                self._put_conn(conn)\n\n    def _close_pool_connections(self, pool: queue.LifoQueue) -> None:\n        try:\n            while True:\n                conn = pool.get(block=False)\n                if conn:\n                    conn.close()\n        except queue.Empty:\n            pass\n\n    def close(self) -> None:\n        if self.pool:\n            self._close_pool_connections(self.pool)\n            self.pool = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import queue\nfrom typing import Optional, Union, Mapping, Any, Dict, List\nfrom urllib.parse import urlparse\nfrom http.client import HTTPConnection, HTTPSConnection, HTTPResponse\nfrom urllib3.util import Timeout, Retry, Url\n\nclass HTTPConnectionPool:\n    def __init__(self, host: str, port: Optional[int] = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Optional[Mapping[str, str]] = None, retries: Union[Retry, bool, int, None] = None, _proxy: Optional[Url] = None, _proxy_headers: Optional[Mapping[str, str]] = None, **conn_kw: Any) -> None:\n        self.scheme = \"http\" if port is None or port == 80 else \"https\" if port == 443 else \"http\"\n        self.ConnectionCls = HTTPSConnection if self.scheme == \"https\" else HTTPConnection\n        self.QueueCls = queue.LifoQueue\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = self.QueueCls(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.headers = headers\n        self.conn_kw = conn_kw\n\n    def _new_conn(self) -> HTTPConnection:\n        conn = self.ConnectionCls(host=self.host, port=self.port, **self.conn_kw)\n        return conn\n\n    def _get_conn(self, timeout: Optional[float] = None) -> HTTPConnection:\n        try:\n            conn = self.pool.get(timeout=timeout)\n        except queue.Empty:\n            if self.block:\n                conn = self._new_conn()\n            else:\n                raise queue.Empty(\"No connection available in the pool\")\n        return conn\n\n    def _put_conn(self, conn: Optional[HTTPConnection]) -> None:\n        if conn:\n            self.pool.put(conn)\n\n    def _make_request(self, conn: HTTPConnection, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> HTTPResponse:\n        conn.request(method, url, body=body, headers=headers)\n        response = conn.getresponse(**response_kw)\n        return response\n\n    def urlopen(self, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Union[Timeout, float, None] = None, pool_timeout: Optional[int] = None, **response_kw: Any) -> HTTPResponse:\n        parsed_url = urlparse(url)\n        if assert_same_host and parsed_url.hostname != self.host:\n            raise ValueError(f\"Host mismatch: expected {self.host}, got {parsed_url.hostname}\")\n        conn = self._get_conn(timeout=pool_timeout)\n        try:\n            response = self._make_request(conn, method, url, body=body, headers=headers, retries=retries, timeout=timeout, **response_kw)\n            return response\n        finally:\n            self._put_conn(conn)\n\n    def _close_pool_connections(self, pool: queue.LifoQueue) -> None:\n        while not pool.empty():\n            conn = pool.get_nowait()\n            conn.close()\n\n    def close(self) -> None:\n        self._close_pool_connections(self.pool)"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Implement a set of functions for interacting with an OCR (Optical Character Recognition) service through HTTP requests, including uploading files for OCR processing, making OCR requests, and retrieving results.\n\nFunction Description: The functions provide a client-side interface to communicate with an OCR service API, handling file uploads, processing requests, and result retrieval.\n\nInput:\n- ocr_upload():\n  - file_path: str - Path to the file to be processed\n  - ocr_cache: bool - Whether to cache the OCR results\n  - prompt: str - Optional prompt text for the OCR processing\n  - prompt_file: str - Optional path to a file containing the prompt\n  - model: str - Model to use for OCR (default: 'llama3.1')\n  - strategy: str - Processing strategy (default: 'llama_vision')\n  - storage_profile: str - Storage profile to use (default: 'default')\n  - storage_filename: str - Optional custom filename for storage\n  - language: str - Language for OCR processing (default: 'en')\n\n- ocr_request():\n  - file_path: str - Path to the file to be processed\n  - ocr_cache: bool - Whether to cache the OCR results\n  - prompt: str - Optional prompt text for the OCR processing\n  - prompt_file: str - Optional path to a file containing the prompt\n  - model: str - Model to use for OCR (default: 'llama3.1')\n  - strategy: str - Processing strategy (default: 'llama_vision')\n  - storage_profile: str - Storage profile to use (default: 'default')\n  - storage_filename: str - Optional custom filename for storage\n  - language: str - Language for OCR processing (default: 'en')\n\n- get_result():\n  - task_id: str - The task ID returned from upload/request\n  - print_progress: bool - Whether to print progress updates (default: False)\n\nOutput:\n- ocr_upload() and ocr_request():\n  - Returns: dict - Either contains 'task_id' for async processing or 'text' for immediate results\n  - Returns None on failure\n\n- get_result():\n  - Returns: dict - The final OCR result when state is 'SUCCESS'\n  - Returns None if task failed or encountered errors",
    "Canonical_solution": "import os\nimport requests\nimport base64\n\ndef ocr_upload(file_path, ocr_cache, prompt, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    ocr_url = os.getenv('OCR_UPLOAD_URL', 'http://localhost:8000/ocr/upload')\n    files = {'file': open(file_path, 'rb')}\n    data = {'ocr_cache': ocr_cache, 'model': model, 'strategy': strategy, 'storage_profile': storage_profile, 'language': language}\n\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    \n    try:\n        if prompt_file:\n            prompt = open(prompt_file, 'r').read()\n    except FileNotFoundError:\n        print(f\"Prompt file not found: {prompt_file}\")\n        return None\n    \n    if prompt:\n        data['prompt'] = prompt\n\n    response = requests.post(ocr_url, files=files, data=data)\n    if response.status_code == 200:\n        respObject = response.json()\n        if respObject.get('task_id'):\n            return {\n                \"task_id\": respObject.get('task_id')\n            }\n        else:\n            return {\n                \"text\": respObject.get('text')\n            }\n    else:\n        print(f\"Failed to upload file: {response.text}\")\n        return None\n\ndef ocr_request(file_path, ocr_cache, prompt, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    ocr_url = os.getenv('OCR_REQUEST_URL', 'http://localhost:8000/ocr/request')\n    with open(file_path, 'rb') as f:\n        file_content = base64.b64encode(f.read()).decode('utf-8')\n    \n    data = {\n        'ocr_cache': ocr_cache,\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'file': file_content,\n        'language': language\n    }\n\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    \n    if prompt_file:\n        try:\n            prompt = open(prompt_file, 'r').read()\n        except FileNotFoundError:\n            print(f\"Prompt file not found: {prompt_file}\")\n            return None\n    \n    if prompt:\n        data['prompt'] = prompt\n    \n    response = requests.post(ocr_url, json=data)\n    if response.status_code == 200:\n        respObject = response.json()\n        if respObject.get('task_id'):\n            return {\n                \"task_id\": respObject.get('task_id')\n            }\n        else:\n            return {\n                \"text\": respObject.get('text')\n            }\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None\n\ndef get_result(task_id, print_progress = False):\n    extracted_text_printed_once = False\n    result_url = os.getenv('RESULT_URL', f'http://localhost:8000/ocr/result/')\n    while True:\n        response = requests.get(result_url + task_id)\n        result = response.json()\n        if result['state'] != 'SUCCESS' and print_progress:\n            task_info = result.get('info')\n            if task_info is not None:\n                if task_info.get('extracted_text'):\n                    if not extracted_text_printed_once:\n                        extracted_text_printed_once = True\n                        print(\"Extracted text: \" + task_info.get('extracted_text'))\n                    else:\n                        del task_info['extracted_text']\n                del task_info['start_time']\n            print(result)\n        if response.status_code == 200:\n            if result['state'] == 'SUCCESS':\n                return result['result']\n            elif result['state'] == 'FAILURE':\n                print(\"OCR task failed.\")\n                return None\n        time.sleep(2)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport os\nimport time\n\ndef ocr_upload(file_path, ocr_cache=False, prompt=None, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    files = {'file': open(file_path, 'rb')}\n    data = {\n        'ocr_cache': str(ocr_cache),\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'language': language\n    }\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    if prompt:\n        data['prompt'] = prompt\n    elif prompt_file and os.path.exists(prompt_file):\n        with open(prompt_file, 'r') as f:\n            data['prompt'] = f.read()\n    response = requests.post('https://api.ocrservice.com/upload', files=files, data=data)\n    if response.status_code == 200:\n        result = response.json()\n        return result if 'text' in result else {'task_id': result['task_id']}\n    return None\n\ndef ocr_request(file_path, ocr_cache=False, prompt=None, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    files = {'file': open(file_path, 'rb')}\n    data = {\n        'ocr_cache': str(ocr_cache),\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'language': language\n    }\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    if prompt:\n        data['prompt'] = prompt\n    elif prompt_file and os.path.exists(prompt_file):\n        with open(prompt_file, 'r') as f:\n            data['prompt'] = f.read()\n    response = requests.post('https://api.ocrservice.com/request', files=files, data=data)\n    if response.status_code == 200:\n        result = response.json()\n        return result if 'text' in result else {'task_id': result['task_id']}\n    return None\n\ndef get_result(task_id, print_progress=False):\n    while True:\n        response = requests.get(f'https://api.ocrservice.com/result/{task_id}')\n        if response.status_code == 200:\n            result = response.json()\n            if result.get('state') == 'SUCCESS':\n                return result\n            elif result.get('state') == 'FAILURE':\n                return None\n            if print_progress:\n                print(f\"Task {task_id} status: {result.get('state')}\")\n            time.sleep(5)\n        else:\n            return None"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a Python class to interact with the Walmart Marketplace API, handling authentication, order management, and inventory operations.\n\nClass Description: The WalmartAPI class provides methods to authenticate with and interact with the Walmart Marketplace API. It supports user verification, order retrieval and acknowledgment, as well as inventory management operations.\n\nAttributes:\napi_key: str - Walmart API key for authentication\naccess_token: str - Access token for API authorization\nmarketplace_id: str - Marketplace identifier for API requests\n\nMethods:\nverify_user: verify_user() -> None - Verifies the current access token corresponds to a valid user. Raises exception if verification fails.\nget_orders: get_orders(status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict] - Retrieves orders from Walmart Marketplace with optional filters for status, date range, and limit.\nacknowledge_order: acknowledge_order(purchase_order_id: str) -> str - Acknowledges a specific order by purchase order ID.\nget_inventory: get_inventory(sku_list: List[str]) -> List[Dict] - Gets inventory levels for specified SKUs or all inventory if no SKUs provided.\nupdate_inventory: update_inventory(sku: str, quantity: int) -> str - Updates inventory quantity for a specific SKU.",
    "Canonical_solution": "import os\nimport logging\nimport requests\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\n\nclass WalmartAPI:\n    def __init__(self, api_key: str = None, access_token: str = None, marketplace_id: str = None):\n        self.api_key = api_key\n        self.access_token = access_token\n        self.marketplace_id = marketplace_id\n\n    def verify_user(self):\n        \"\"\"\n        Verifies that the current access token corresponds to a valid user.\n        If verification fails, raises an exception.\n        \"\"\"\n        logging.info(f\"Verifying user with token: {self.access_token}\")\n        headers = {\n            \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n            \"WM_SVC.NAME\": \"Walmart Marketplace\",\n            \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n            \"Accept\": \"application/json\",\n        }\n\n        response = requests.get(\n            \"https://marketplace.walmartapis.com/v3/seller/info\", headers=headers\n        )\n\n        if response.status_code != 200:\n            raise Exception(\n                f\"User verification failed. Status: {response.status_code}, \"\n                f\"Response: {response.text}\"\n            )\n\n    async def get_orders(\n        self,\n        status: str = \"Created\",\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None,\n        limit: int = 100,\n    ) -> List[Dict]:\n        \"\"\"\n        Retrieves orders from Walmart Marketplace.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            if not start_date:\n                start_date = datetime.now() - timedelta(days=7)\n            if not end_date:\n                end_date = datetime.now()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {\n                \"status\": status,\n                \"createdStartDate\": start_date.isoformat(),\n                \"createdEndDate\": end_date.isoformat(),\n                \"limit\": limit,\n            }\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/orders\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch orders: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving orders: {str(e)}\")\n            return []\n\n    async def acknowledge_order(self, purchase_order_id: str) -> str:\n        \"\"\"\n        Acknowledges a Walmart Marketplace order.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            response = requests.post(\n                f\"https://marketplace.walmartapis.com/v3/orders/{purchase_order_id}/acknowledge\",\n                headers=headers,\n            )\n\n            if response.status_code == 204:\n                return \"Order acknowledged successfully.\"\n            else:\n                raise Exception(f\"Failed to acknowledge order: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error acknowledging order: {str(e)}\")\n            return f\"Failed to acknowledge order: {str(e)}\"\n\n    async def get_inventory(self, sku_list: List[str] = None) -> List[Dict]:\n        \"\"\"\n        Gets inventory levels for specified SKUs.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {}\n            if sku_list:\n                params[\"sku\"] = \",\".join(sku_list)\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch inventory: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving inventory: {str(e)}\")\n            return []\n\n    async def update_inventory(self, sku: str, quantity: int) -> str:\n        \"\"\"\n        Updates inventory quantity for a specific SKU.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            data = {\"sku\": sku, \"quantity\": {\"unit\": \"EACH\", \"amount\": quantity}}\n\n            response = requests.put(\n                f\"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                json=data,\n            )\n\n            if response.status_code == 200:\n                return \"Inventory updated successfully.\"\n            else:\n                raise Exception(f\"Failed to update inventory: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error updating inventory: {str(e)}\")\n            return f\"Failed to update inventory: {str(e)}\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import List, Dict, Optional\nfrom datetime import datetime\n\nclass WalmartAPI:\n    def __init__(self, api_key: str, access_token: str, marketplace_id: str):\n        self.api_key = api_key\n        self.access_token = access_token\n        self.marketplace_id = marketplace_id\n        self.base_url = \"https://marketplace.walmartapis.com\"\n\n    def verify_user(self) -> None:\n        headers = {\n            \"WM_Seller_Id\": self.api_key,\n            \"Authorization\": f\"Bearer {self.access_token}\"\n        }\n        response = requests.get(f\"{self.base_url}/v3/users\", headers=headers)\n        if response.status_code != 200:\n            raise Exception(\"User verification failed\")\n\n    def get_orders(self, status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict]:\n        params = {\"status\": status, \"limit\": limit}\n        if start_date:\n            params[\"startDate\"] = start_date.isoformat()\n        if end_date:\n            params[\"endDate\"] = end_date.isoformat()\n\n        headers = {\n            \"WM_Seller_Id\": self.api_key,\n            \"Authorization\": f\"Bearer {self.access_token}\"\n        }\n        response = requests.get(f\"{self.base_url}/v3/orders\", headers=headers, params=params)\n        return response.json() if response.status_code == 200 else []\n\n    def acknowledge_order(self, purchase_order_id: str) -> str:\n        headers = {\n            \"WM_Seller_Id\": self.api_key,\n            \"Authorization\": f\"Bearer {self.access_token}\"\n        }\n        response = requests.post(\n            f\"{self.base_url}/v3/orders/{purchase_order_id}/acknowledge\",\n            headers=headers\n        )\n        return response.text if response.status_code == 200 else \"Order acknowledgment failed\"\n\n    def get_inventory(self, sku_list: List[str]) -> List[Dict]:\n        headers = {\n            \"WM_Seller_Id\": self.api_key,\n            \"Authorization\": f\"Bearer {self.access_token}\"\n        }\n        if sku_list:\n            params = {\"sku\": \",\".join(sku_list)}\n        else:\n            params = {}\n\n        response = requests.get(f\"{self.base_url}/v3/inventory\", headers=headers, params=params)\n        return response.json() if response.status_code == 200 else []\n\n    def update_inventory(self, sku: str, quantity: int) -> str:\n        payload = {\"quantity\": quantity}\n        headers = {\n            \"WM_Seller_Id\": self.api_key,\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        response = requests.put(\n            f\"{self.base_url}/v3/inventory/{sku}\",\n            headers=headers,\n            json=payload\n        )\n        return response.text if response.status_code == 200 else \"Inventory update failed\""
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Implement HTTP client functions to interact with the Augie video creation API, including creating videos and checking their status.\n\nFunction Description: The first function creates a video on the Augie platform by sending a POST request with the provided parameters. The second function checks the status of a video creation process by sending a GET request with the video ID.\n\nInput: \n1. For create_augie: \n   - params: dict - A dictionary containing video creation parameters (e.g., script, voice settings, etc.)\n2. For get_augie_status: \n   - augie_id: str - The unique identifier of the Augie video to check\n\nOutput:\n1. For create_augie: \n   - dict - The API response containing video creation details if successful (status code 201)\n   - Exception - If the request fails (status code other than 201)\n2. For get_augie_status: \n   - dict - A status dictionary with either {\"status\": \"completed\", \"video_url\": [url]} or {\"status\": \"processing\"}\n   - Exception - If the request fails (status code other than 200)",
    "Canonical_solution": "@func.register_function(\n  metadata={\"description\": \"Creates a video on Augie platform.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef create_augie(params):\n  \"\"\"Function to create a video on Augie platform with parameters.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY,\n      'Content-Type': 'application/json'\n  }\n\n  import requests\n  response = requests.post(f'{BASE_URL}/augies', json=params, headers=headers)\n\n  if response.status_code == 201:\n      return response.json()  # Returns the creation response\n  else:\n      raise Exception(f\"Failed to create Augie: {response.text}\")\n\n\n@func.register_function(\n  metadata={\"description\": \"Checks the status of the created video.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef get_augie_status(augie_id):\n  \"\"\"Function to check the status of an Augie video creation.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY\n  }\n\n  import requests\n  response = requests.get(f'{BASE_URL}/augies/{augie_id}/status', headers=headers)\n\n  if response.status_code == 200:\n      status_data = response.json()\n      if status_data.get('status') == 'succeeded' and 'output' in status_data and 'video' in status_data['output']:\n          return {\"status\": \"completed\", \"video_url\": status_data['output']['video']}\n      else:\n          return {\"status\": \"processing\"}\n  else:\n      raise Exception(f\"Failed to get Augie status: {response.text}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef create_augie(params):\n    url = \"https://api.augie.com/videos\"\n    headers = {\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer YOUR_ACCESS_TOKEN\"}\n    response = requests.post(url, json=params, headers=headers)\n    if response.status_code == 201:\n        return response.json()\n    else:\n        raise Exception(f\"Failed to create video: {response.status_code} - {response.text}\")\n\ndef get_augie_status(augie_id):\n    url = f\"https://api.augie.com/videos/{augie_id}\"\n    headers = {\"Authorization\": \"Bearer YOUR_ACCESS_TOKEN\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        if data.get(\"status\") == \"completed\":\n            return {\"status\": \"completed\", \"video_url\": data.get(\"video_url\")}\n        else:\n            return {\"status\": \"processing\"}\n    else:\n        raise Exception(f\"Failed to get video status: {response.status_code} - {response.text}\")"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Implement a Python class that serves as a client for the Pushover notification service, capable of sending both text messages and file attachments through HTTP requests.\n\nClass Description: The PushoverClient class provides functionality to interact with the Pushover API, allowing users to send notifications with optional HTML formatting, titles, URLs, and file attachments. It handles HTTP communication and error logging.\n\nAttributes:\n- token: str - The API token for authenticating with Pushover\n- user: str - The user key identifying the recipient\n- device: str - The target device for the notification\n- pushover_url: str - The Pushover API endpoint URL\n\nMethods:\n- send_message(title: str, message: str, send_as_html: bool, additional_url: str) -> None - Sends a text notification with optional HTML formatting, title, and URL\n- send_file(file_name: str, contents: bytes, title: str, message: str, send_as_html: bool, additional_url: str) -> None - Sends a notification with a file attachment (converts SVG to PNG if needed) along with text content",
    "Canonical_solution": "import logging\nimport requests\n\nclass PushoverClient:\n    def __init__(self, token: str, user: str, device: str, pushover_url: str):\n        self.token = str(token)\n        self.user = str(user)\n        self.device = str(device)\n        self.pushover_url = str(pushover_url)\n\n    def send_message(self, title: str, message: str, send_as_html: bool, additional_url: str):\n        message_json = {\n            \"token\": self.token,\n            \"user\": self.user,\n            \"html\": 1 if send_as_html else \"\",\n            \"title\": title,\n            \"message\": message,\n            \"url\": additional_url,\n            \"device\": self.device\n        }\n\n        response = requests.post(self.pushover_url, json=message_json)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send pushover message with reason being: {response.reason} {response.text}\"\n            )\n\n    def send_file(self, file_name: str, contents: bytes, title: str, message: str, send_as_html: bool, additional_url: str):\n        if not is_image(file_name):\n            return\n            \n        if file_name.endswith(SVG_SUFFIX):\n            contents = convert_svg_to_png(contents)\n            file_name = file_name.replace(SVG_SUFFIX, PNG_SUFFIX)\n        files = {\"photo\": (file_name, contents.decode())}\n\n        message_json = {\n            \"token\": self.token,\n            \"user\": self.user,\n            \"html\": 1 if send_as_html else \"\",\n            \"title\": title,\n            \"message\": message,\n            \"url\": additional_url,\n            \"device\": self.device\n        }\n\n        response = requests.post(self.pushover_url, json=message_json, files=files)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send pushover message with reason being: {response.reason} {response.text}\"\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport os\nfrom PIL import Image\nimport io\n\nclass PushoverClient:\n    def __init__(self, token: str, user: str, device: str):\n        self.token = token\n        self.user = user\n        self.device = device\n        self.pushover_url = \"https://api.pushover.net/1/messages.json\"\n\n    def send_message(self, title: str, message: str, send_as_html: bool, additional_url: str) -> None:\n        payload = {\n            \"token\": self.token,\n            \"user\": self.user,\n            \"title\": title,\n            \"message\": message,\n            \"device\": self.device,\n            \"html\": 1 if send_as_html else 0\n        }\n        if additional_url:\n            payload[\"url\"] = additional_url\n        response = requests.post(self.pushover_url, data=payload)\n        if response.status_code != 200:\n            print(f\"Failed to send message: {response.text}\")\n\n    def send_file(self, file_name: str, contents: bytes, title: str, message: str, send_as_html: bool, additional_url: str) -> None:\n        if file_name.lower().endswith(\".svg\"):\n            image = Image.open(io.BytesIO(contents))\n            img_byte_arr = io.BytesIO()\n            image.save(img_byte_arr, format='PNG')\n            contents = img_byte_arr.getvalue()\n            file_name = os.path.splitext(file_name)[0] + \".png\"\n\n        files = {'attachment': (file_name, contents)}\n        payload = {\n            \"token\": self.token,\n            \"user\": self.user,\n            \"title\": title,\n            \"message\": message,\n            \"device\": self.device,\n            \"html\": 1 if send_as_html else 0\n        }\n        if additional_url:\n            payload[\"url\"] = additional_url\n        response = requests.post(self.pushover_url, data=payload, files=files)\n        if response.status_code != 200:\n            print(f\"Failed to send file: {response.text}\")"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Python class that interacts with the AccuWeather API to fetch weather information for a given city using an API key.\n\nClass Description: The AccuWeatherClient class provides functionality to retrieve weather data from AccuWeather's API. It handles API key management and makes HTTP requests to fetch location keys and weather information.\n\nAttributes:\napi_key: str - The AccuWeather API key required for authentication\n\nMethods:\n__init__: (api_key: str = \"\") -> None - Initializes the AccuWeatherClient with an optional API key\nget_weather: (city: str, extensions: str = \"all\") -> str - Fetches weather data for the specified city. The 'extensions' parameter can be \"all\" for current conditions or \"base\" for 5-day forecast. Returns formatted weather information or an error message if no API key is provided.",
    "Canonical_solution": "import json\nimport requests\n\nclass FreeApi:\n    def __init__(self, api_url: str):\n        self.api_url = api_url\n\n    def get_result(self) -> str:\n        response = requests.get(self.api_url)\n        if response.status_code == 200:\n            return response.text\n        else:\n            return None\n\nclass AccuWeatherClient:\n    def __init__(self, api_key: str = \"\"):\n        self.api_key = api_key\n\n    def get_weather(self, city: str, extensions: str = \"all\") -> str:\n        if not self.api_key:\n            return \"\u8bf7\u5148\u5728\u5de5\u5177\uff08tools\uff09\u4e2d\u8f93\u5165accuweather\u7684key\"\n\n        # Query city location key\n        location_api = FreeApi(\n            f\"http://dataservice.accuweather.com/locations/v1/cities/search?apikey={self.api_key}&q={city}&language=zh-CN&details=false\"\n        )\n        result = location_api.get_result()\n\n        if result:\n            data = json.loads(result)\n            city_key = data[0][\"Key\"]\n\n            # Query weather based on key\n            if extensions == \"all\":\n                weather_api = FreeApi(\n                    f\"http://dataservice.accuweather.com/currentconditions/v1/{city_key}?apikey={self.api_key}&language=zh-CN&details=false\"\n                )\n            elif extensions == \"base\":\n                weather_api = FreeApi(\n                    f\"http://dataservice.accuweather.com/forecasts/v1/daily/5day/{city_key}?apikey={self.api_key}&language=zh-CN&details=false\"\n                )\n\n            result = weather_api.get_result()\n            if result:\n                data = json.loads(result)\n                if extensions == \"all\":\n                    return f\"\u67e5\u8be2\u5230\u7684\u5929\u6c14\u4fe1\u606f\u5982\u4e0b\uff1a{str(data[0])}\u8bf7\u6839\u636e\u5929\u6c14\u4fe1\u606f\u56de\u7b54\u7528\u6237\u95ee\u9898\"\n                elif extensions == \"base\":\n                    return f\"\u67e5\u8be2\u5230\u7684\u5929\u6c14\u4fe1\u606f\u5982\u4e0b\uff1a{str(data['DailyForecasts'])}\u8bf7\u6839\u636e\u5929\u6c14\u4fe1\u606f\u56de\u7b54\u7528\u6237\u95ee\u9898\"\n        return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass AccuWeatherClient:\n    def __init__(self, api_key: str = \"\"):\n        self.api_key = api_key\n        self.base_url = \"http://dataservice.accuweather.com\"\n\n    def get_location_key(self, city: str):\n        url = f\"{self.base_url}/locations/v1/cities/search\"\n        params = {\n            \"q\": city,\n            \"apikey\": self.api_key\n        }\n        response = requests.get(url, params=params)\n        if response.status_code == 200:\n            data = response.json()\n            if data:\n                return data[0][\"Key\"]\n        return None\n\n    def get_weather(self, city: str, extensions: str = \"all\"):\n        if not self.api_key:\n            return \"Error: API key is required.\"\n        location_key = self.get_location_key(city)\n        if not location_key:\n            return f\"Error: Could not find location key for {city}.\"\n        url = f\"{self.base_url}/currentconditions/v1/{location_key}\"\n        params = {\n            \"apikey\": self.api_key,\n            \"details\": \"true\",\n            \"metric\": \"true\"\n        }\n        response = requests.get(url, params=params)\n        if response.status_code == 200:\n            data = response.json()\n            if data:\n                weather_info = data[0]\n                formatted_info = (\n                    f\"Weather in {city}:\\n\"\n                    f\"Temperature: {weather_info['Temperature']['Metric']['Value']}\u00b0C\\n\"\n                    f\"Condition: {weather_info['WeatherText']}\\n\"\n                    f\"Humidity: {weather_info['RelativeHumidity']}%\\n\"\n                    f\"Wind Speed: {weather_info['Wind']['Speed']['Metric']['Value']} km/h\"\n                )\n                return formatted_info\n        return \"Error: Failed to retrieve weather information.\""
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a GitHub Single Sign-On (SSO) class to handle authentication and user information retrieval using GitHub's OAuth API.\n\nClass Description: The GitHubSSO class provides functionality to authenticate with GitHub's OAuth system, manage access tokens, and retrieve user information including email and name details.\n\nAttributes:\n- access_token: str - GitHub OAuth access token for API authentication\n- refresh_token: str - GitHub OAuth refresh token for obtaining new access tokens\n- client_id: str - GitHub OAuth application client ID\n- client_secret: str - GitHub OAuth application client secret\n- user_info: dict - Dictionary containing user information (email, first name, last name)\n\nMethods:\n- get_new_token() -> str - Requests a new access token using the refresh token\n  Input: None\n  Output: str - New access token\n\n- get_user_info() -> dict - Retrieves user information from GitHub API\n  Input: None\n  Output: dict - Contains user's primary email, first name, and last name\n    Returns format: {\n      \"email\": str,\n      \"first_name\": str,\n      \"last_name\": str\n    }\n  Throws: HTTPException if there's an error retrieving user info",
    "Canonical_solution": "import requests\nimport logging\nfrom fastapi import HTTPException\nfrom Globals import getenv\n\nclass GitHubSSO:\n    def __init__(\n        self,\n        access_token=None,\n        refresh_token=None,\n    ):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = getenv(\"GITHUB_CLIENT_ID\")\n        self.client_secret = getenv(\"GITHUB_CLIENT_SECRET\")\n        self.user_info = self.get_user_info()\n\n    def get_new_token(self):\n        response = requests.post(\n            \"https://github.com/login/oauth/access_token\",\n            headers={\"Accept\": \"application/json\"},\n            data={\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"refresh_token\": self.refresh_token,\n                \"grant_type\": \"refresh_token\",\n            },\n        )\n        return response.json()[\"access_token\"]\n\n    def get_user_info(self):\n        uri = \"https://api.github.com/user\"\n        response = requests.get(\n            uri,\n            headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n        )\n        if response.status_code == 401:\n            self.access_token = self.get_new_token()\n            response = requests.get(\n                uri,\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n        try:\n            data = response.json()\n            email_response = requests.get(\n                \"https://api.github.com/user/emails\",\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n            email_data = email_response.json()\n            primary_email = next(\n                email[\"email\"] for email in email_data if email[\"primary\"]\n            )\n            return {\n                \"email\": primary_email,\n                \"first_name\": (\n                    data.get(\"name\", \"\").split()[0] if data.get(\"name\") else \"\"\n                ),\n                \"last_name\": (\n                    data.get(\"name\", \"\").split()[-1] if data.get(\"name\") else \"\"\n                ),\n            }\n        except Exception as e:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Error getting user info from GitHub\",\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import Dict\nfrom fastapi import HTTPException\n\nclass GitHubSSO:\n    def __init__(self, client_id: str, client_secret: str, access_token: str = None, refresh_token: str = None):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.user_info = {}\n\n    def get_new_token(self) -> str:\n        url = \"https://github.com/login/oauth/access_token\"\n        headers = {\n            \"Accept\": \"application/json\"\n        }\n        data = {\n            \"client_id\": self.client_id,\n            \"client_secret\": self.client_secret,\n            \"grant_type\": \"refresh_token\",\n            \"refresh_token\": self.refresh_token\n        }\n        response = requests.post(url, headers=headers, data=data)\n        response.raise_for_status()\n        token_data = response.json()\n        self.access_token = token_data.get(\"access_token\")\n        return self.access_token\n\n    def get_user_info(self) -> Dict:\n        if not self.access_token:\n            raise HTTPException(status_code=401, detail=\"Access token is missing\")\n        url = \"https://api.github.com/user\"\n        headers = {\n            \"Authorization\": f\"token {self.access_token}\"\n        }\n        response = requests.get(url, headers=headers)\n        if response.status_code != 200:\n            raise HTTPException(status_code=response.status_code, detail=\"Failed to retrieve user info\")\n        user_data = response.json()\n        email_url = \"https://api.github.com/user/emails\"\n        email_response = requests.get(email_url, headers=headers)\n        if email_response.status_code != 200:\n            raise HTTPException(status_code=email_response.status_code, detail=\"Failed to retrieve user emails\")\n        emails = email_response.json()\n        primary_email = next((email[\"email\"] for email in emails if email[\"primary\"]), None)\n        if not primary_email:\n            raise HTTPException(status_code=404, detail=\"Primary email not found\")\n        self.user_info = {\n            \"email\": primary_email,\n            \"first_name\": user_data.get(\"name\", \"\").split()[0] if user_data.get(\"name\") else \"\",\n            \"last_name\": user_data.get(\"name\", \"\").split()[-1] if user_data.get(\"name\") else \"\"\n        }\n        return self.user_info"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a Python class that implements HTTP client functionality for interacting with the RunKeeper API, including rate limiting, authorization handling, and standard HTTP methods (GET, POST, DELETE).\n\nClass Description: The RunKeeperAPI class provides methods to interact with the RunKeeper web service API. It handles rate limiting, authorization, and provides wrapper methods for common HTTP operations. The class includes rate limit tracking and proper error handling for API responses.\n\nAttributes:\n_RATE_LIMIT_KEY: str - Redis key used for tracking global rate limit status\n\nMethods:\n_rate_limit: [Name](endpoint: str, req_lambda: Callable) -> requests.Response - Handles rate limiting logic by checking Redis for existing rate limits and processing API responses for rate limit errors\n_api_headers: [Name](service_record: object) -> dict - Generates authorization headers for API requests using the service record's token\nget_request: [Name](url: str, service_record: object) -> dict - Performs an HTTP GET request to the specified URL with authorization headers and returns parsed JSON response\npost_request: [Name](url: str, service_record: object, data: Optional[dict]) -> requests.Response - Performs an HTTP POST request to the specified URL with optional data and authorization headers\ndelete_request: [Name](url: str, service_record: object) -> requests.Response - Performs an HTTP DELETE request to the specified URL with authorization headers\noauth_token_request: [Name](params: dict) -> str - Handles OAuth token requests by posting to the RunKeeper token endpoint and returns the access token",
    "Canonical_solution": "from tapiriik.settings import WEB_ROOT, RUNKEEPER_CLIENT_ID, RUNKEEPER_CLIENT_SECRET\nfrom tapiriik.services.api import APIException, UserException, UserExceptionType\nimport requests\nimport urllib.parse\nimport json\nfrom datetime import timedelta\nimport re\n\nclass RunKeeperAPI:\n    _RATE_LIMIT_KEY = \"rk:rate_limit:hit\"\n\n    def _rate_limit(self, endpoint, req_lambda):\n        if redis.get(self._RATE_LIMIT_KEY) is not None:\n            raise APIException(\"RK global rate limit previously reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n        response = req_lambda()\n        if response.status_code == 429:\n            if \"user\" not in response.text:\n                timeout = timedelta(minutes=15)\n                timeout_match = re.search(r\"(\\d+) (second|minute|hour|day)\", response.text)\n                if timeout_match:\n                    timeout = timedelta(**{\"%ss\" % timeout_match.group(2): float(timeout_match.group(1))}\n                redis.setex(self._RATE_LIMIT_KEY, response.text, timeout)\n                raise APIException(\"RK global rate limit reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n            else:\n                raise APIException(\"RK user rate limit reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n        return response\n\n    def _api_headers(self, service_record):\n        return {\"Authorization\": \"Bearer \" + service_record.Authorization[\"Token\"],\n                \"Accept-Charset\": \"UTF-8\"}\n\n    def get_request(self, url, service_record):\n        response = self._rate_limit(\"get_request\",\n                                  lambda: requests.get(url,\n                                                      headers=self._api_headers(service_record)))\n        if response.status_code != 200:\n            if response.status_code in [401, 403]:\n                raise APIException(\"No authorization\", block=True, user_exception=UserException(UserExceptionType.Authorization, intervention_required=True))\n            raise APIException(\"Request failed: %s %s\" % (response.status_code, response.text))\n        return response.json()\n\n    def post_request(self, url, service_record, data=None):\n        response = self._rate_limit(\"post_request\",\n                                  lambda: requests.post(url,\n                                                       headers=self._api_headers(service_record),\n                                                       data=data))\n        response.raise_for_status()\n        return response\n\n    def delete_request(self, url, service_record):\n        response = self._rate_limit(\"delete_request\",\n                                  lambda: requests.delete(url,\n                                                         headers=self._api_headers(service_record)))\n        response.raise_for_status()\n        return response\n\n    def oauth_token_request(self, params):\n        response = self._rate_limit(\"auth_token\",\n                                  lambda: requests.post(\"https://runkeeper.com/apps/token\",\n                                                      data=urllib.parse.urlencode(params),\n                                                      headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}))\n        if response.status_code != 200:\n            raise APIException(\"Invalid code\")\n        return response.json()[\"access_token\"]",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport redis\nfrom typing import Callable, Optional, Dict, Any\n\nclass RunKeeperAPI:\n    _RATE_LIMIT_KEY = \"runkeeper_rate_limit\"\n\n    def __init__(self, redis_host: str, redis_port: int):\n        self.redis_client = redis.Redis(host=redis_host, port=redis_port)\n\n    def _rate_limit(self, endpoint: str, req_lambda: Callable) -> requests.Response:\n        rate_limit_key = f\"{self._RATE_LIMIT_KEY}:{endpoint}\"\n        current_count = self.redis_client.incr(rate_limit_key)\n        if current_count == 1:\n            self.redis_client.expire(rate_limit_key, 60)\n        if current_count > 10:\n            raise Exception(\"Rate limit exceeded\")\n        response = req_lambda()\n        if response.status_code == 429:\n            raise Exception(\"Rate limit exceeded by API\")\n        return response\n\n    def _api_headers(self, service_record: object) -> dict:\n        return {\n            \"Authorization\": f\"Bearer {service_record.token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_request(self, url: str, service_record: object) -> dict:\n        def request_wrapper():\n            headers = self._api_headers(service_record)\n            return requests.get(url, headers=headers)\n        response = self._rate_limit(url, request_wrapper)\n        return response.json()\n\n    def post_request(self, url: str, service_record: object, data: Optional[Dict[str, Any]] = None) -> requests.Response:\n        def request_wrapper():\n            headers = self._api_headers(service_record)\n            return requests.post(url, headers=headers, json=data)\n        return self._rate_limit(url, request_wrapper)\n\n    def delete_request(self, url: str, service_record: object) -> requests.Response:\n        def request_wrapper():\n            headers = self._api_headers(service_record)\n            return requests.delete(url, headers=headers)\n        return self._rate_limit(url, request_wrapper)\n\n    def oauth_token_request(self, params: Dict[str, Any]) -> str:\n        token_url = \"https://runkeeper.com/apps/token\"\n        response = requests.post(token_url, data=params)\n        if response.status_code == 200:\n            return response.json().get(\"access_token\")\n        else:\n            raise Exception(\"Failed to obtain OAuth token\")"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Implement a Python function to authenticate with the GitHub API using Basic Authentication, handling both regular credentials and two-factor authentication cases.\n\nFunction Description: The function prompts the user for GitHub credentials (username and password) and attempts to authenticate with the GitHub API. If two-factor authentication is detected (status code 401 with X-Github-OTP header), it guides the user to create and use a personal access token instead. The function returns an authentication object that can be used for subsequent API requests.\n\nInput: None (user input is collected interactively)\n\nOutput: requests.auth.HTTPBasicAuth - An authentication object containing either:\n        1. The provided username and password (if 2FA not required)\n        2. A personal access token (if 2FA is required)\n\nTask Description: Implement a Python function to create multiple labels in a GitHub repository using the GitHub API.\n\nFunction Description: The function reads label definitions from a CSV file and creates them in a specified GitHub repository using authenticated API requests. Each label is created via a separate POST request to the GitHub API.\n\nInput:\n1. auth (requests.auth.HTTPBasicAuth) - Authentication object for GitHub API\n2. filename (str, optional) - Path to CSV file containing label definitions (default: 'etc/default_labels.csv')\n\nOutput: None (side effect: creates labels in GitHub repository)",
    "Canonical_solution": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nimport logging\nimport os\nimport app_config\n\nlogging.basicConfig(format=app_config.LOG_FORMAT)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(app_config.LOG_LEVEL)\n\ndef get_auth():\n    \"\"\"\n    Construct a basic auth object from a username and password\n    \"\"\"\n    username = raw_input('Username: ')\n    password = getpass.getpass('Password: ')\n\n    auth = HTTPBasicAuth(username, password)\n\n    # Test auth by requesting repo events\n    response = requests.get('https://api.github.com/notifications', auth=auth)\n\n    if response.status_code == 401:\n        otp = response.headers.get('X-Github-OTP')\n        if otp and otp.startswith('required'):\n            logger.warn('You are using 2-factor authentication. Please create a personal access token at https://github.com/settings/applications#personal-access-tokens and provide it here')\n            access_token = raw_input('Personal access token: ')\n            auth = HTTPBasicAuth(access_token, '')\n        else:\n            raise Exception('Invalid username or password')\n\n    return auth\n\ndef create_labels(auth, filename='etc/default_labels.csv'):\n    \"\"\"\n    Creates labels in Github issues.\n    \"\"\"\n    url = 'https://api.github.com/repos/%s/labels' % get_repo_path()\n\n    with open(filename) as f:\n        labels = list(csv.DictReader(f))\n\n    logger.info('Creating %i labels' % len(labels))\n\n    for label in labels:\n        logger.info('Creating label \"%s\"' % label['name'])\n        data = json.dumps(label)\n\n        requests.post(url, data=data, auth=auth)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport csv\nfrom getpass import getpass\n\ndef authenticate_github():\n    username = input(\"Enter your GitHub username: \")\n    password = getpass(\"Enter your GitHub password or personal access token: \")\n    auth = requests.auth.HTTPBasicAuth(username, password)\n    \n    try:\n        response = requests.get('https://api.github.com/user', auth=auth)\n        if response.status_code == 401 and 'X-Github-OTP' in response.headers:\n            print(\"Two-factor authentication is required. Please generate a personal access token from GitHub and use it instead of your password.\")\n            return authenticate_github()\n        elif response.status_code != 200:\n            print(\"Authentication failed. Please check your credentials.\")\n            return None\n        return auth\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred during authentication: {e}\")\n        return None\n\ndef create_labels(auth, filename='etc/default_labels.csv'):\n    if not auth:\n        print(\"Authentication failed. Cannot create labels.\")\n        return\n    \n    try:\n        with open(filename, newline='') as csvfile:\n            reader = csv.DictReader(csvfile)\n            for row in reader:\n                label_data = {\n                    'name': row['name'],\n                    'color': row['color'],\n                    'description': row.get('description', '')\n                }\n                url = f'https://api.github.com/repos/{row[\"repo\"]}/labels'\n                response = requests.post(url, json=label_data, auth=auth)\n                if response.status_code == 201:\n                    print(f\"Label '{label_data['name']}' created successfully.\")\n                else:\n                    print(f\"Failed to create label '{label_data['name']}'. Status code: {response.status_code}, Response: {response.text}\")\n    except FileNotFoundError:\n        print(f\"The file {filename} was not found.\")\n    except Exception as e:\n        print(f\"An error occurred while creating labels: {e}\")"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Python function that interacts with a REST API to retrieve node version information for installation or to list all available versions of a node.\n\nFunction Description: The function should use the Python requests library to make HTTP GET requests to a specified API endpoint. It should handle both the case where a specific version is requested and where all versions are requested. The function should properly process successful responses and handle errors.\n\nInput:\n- For install_node function:\n  - node_id (str): The unique identifier of the node\n  - version (str, optional): Specific version of the node to retrieve (defaults to None for latest version)\n\n- For all_versions_of_node function:\n  - node_id (str): The unique identifier of the node\n\nOutput:\n- For install_node function:\n  - On success (HTTP 200): Returns parsed NodeVersion data (converted from JSON response)\n  - On failure: Returns None\n\n- For all_versions_of_node function:\n  - On success (HTTP 200): Returns the JSON response containing all versions\n  - On failure: Returns None",
    "Canonical_solution": "import requests\nbase_url = \"https://api.comfy.org\"\n\ndef install_node(node_id, version=None):\n    \"\"\"\n    Retrieves the node version for installation.\n\n    Args:\n      node_id (str): The unique identifier of the node.\n      version (str, optional): Specific version of the node to retrieve. If omitted, the latest version is returned.\n\n    Returns:\n      NodeVersion: Node version data or error message.\n    \"\"\"\n    if version is None:\n        url = f\"{base_url}/nodes/{node_id}/install\"\n    else:\n        url = f\"{base_url}/nodes/{node_id}/install?version={version}\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        # Convert the API response to a NodeVersion object\n        return map_node_version(response.json())\n    else:\n        return None\n\ndef all_versions_of_node(node_id):\n    url = f\"https://api.comfy.org/nodes/{node_id}/versions\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef install_node(node_id, version=None):\n    url = f\"https://api.example.com/nodes/{node_id}/versions\"\n    if version:\n        url += f\"/{version}\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return response.json()\n        return None\n    except requests.RequestException:\n        return None\n\ndef all_versions_of_node(node_id):\n    url = f\"https://api.example.com/nodes/{node_id}/versions\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return response.json()\n        return None\n    except requests.RequestException:\n        return None"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a function that queries DNS information from both Google and Cloudflare DNS APIs for a given domain and record type, handling potential errors gracefully.\n\nFunction Description: The function makes parallel DNS queries to Google's and Cloudflare's DNS-over-HTTPS APIs, returning the responses in a list. It includes error handling for failed requests and invalid responses.\n\nInput:\n- domain (str): The domain name to query (e.g., \"example.com\")\n- record_type (str): The DNS record type to query (e.g., \"A\", \"AAAA\", \"MX\")\n\nOutput:\n- list: A list containing two elements (Google's response first, then Cloudflare's), where each element is either:\n  - A dictionary containing the JSON response from the DNS API\n  - None if the request failed or returned non-200 status code",
    "Canonical_solution": "import requests\n\ndef make_dns_request(domain, record_type):\n    \"\"\"\n    Makes DNS requests to both Google and Cloudflare DNS APIs.\n\n    Args:\n        domain (str): The domain to query.\n        record_type (str): The type of DNS record to query.\n\n    Returns:\n        list: A list containing the JSON responses from Google and Cloudflare.\n    \"\"\"\n    urls = [\n        f\"https://dns.google/resolve?name={domain}&type={record_type}\",\n        f\"https://cloudflare-dns.com/dns-query?name={domain}&type={record_type}\"\n    ]\n\n    headers = {\n        \"accept\": \"application/dns-json\"\n    }\n\n    responses = []\n    for url in urls:\n        try:\n            response = requests.get(url, headers=headers)\n            if response.status_code == 200:\n                json_response = response.json()\n                responses.append(json_response)\n            else:\n                responses.append(None)\n        except Exception as e:\n            print(f\"URL: {url}, DNS Exception: {e}\")\n            responses.append(None)\n\n    return responses",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport concurrent.futures\n\ndef query_dns(domain, record_type):\n    def query_google_dns(domain, record_type):\n        url = \"https://dns.google/resolve\"\n        params = {\n            \"name\": domain,\n            \"type\": record_type\n        }\n        try:\n            response = requests.get(url, params=params, timeout=5)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return None\n        except requests.RequestException:\n            return None\n\n    def query_cloudflare_dns(domain, record_type):\n        url = \"https://cloudflare-dns.com/dns-query\"\n        headers = {\n            \"accept\": \"application/dns-json\"\n        }\n        params = {\n            \"name\": domain,\n            \"type\": record_type\n        }\n        try:\n            response = requests.get(url, headers=headers, params=params, timeout=5)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return None\n        except requests.RequestException:\n            return None\n\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        google_future = executor.submit(query_google_dns, domain, record_type)\n        cloudflare_future = executor.submit(query_cloudflare_dns, domain, record_type)\n        google_result = google_future.result()\n        cloudflare_result = cloudflare_future.result()\n\n    return [google_result, cloudflare_result]"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, with support for retries and timeouts.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that maintains a pool of reusable connections to a specified host and port. It handles connection lifecycle, retries on failures, and timeout management.\n\nAttributes:\n- scheme: [str] - The URL scheme (default 'http')\n- ConnectionCls: [class] - The connection class to use (default HTTPConnection)\n- host: [str] - The target host for connections\n- port: [int] - The target port for connections\n- timeout: [Timeout] - Default timeout configuration\n- retries: [Retry] - Retry configuration for failed requests\n- pool: [LifoQueue] - Queue holding the connection pool\n- block: [bool] - Whether to block when pool is empty\n- proxy: [dict] - Proxy configuration\n- proxy_headers: [dict] - Headers for proxy requests\n- conn_kw: [dict] - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw) -> HTTPResponse - Main method to execute HTTP requests with retry and timeout handling\n- close() -> None - Closes all connections in the pool",
    "Canonical_solution": "from socket import error as SocketError, timeout as SocketTimeout\nimport socket\nfrom .connection import HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection\nfrom .exceptions import (\n    MaxRetryError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n    HTTPException,\n    BaseSSLError,\n    NewConnectionError,\n    ProxyError\n)\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.queue import LifoQueue\nimport queue\nimport sys\nimport warnings\n\nclass HTTPConnectionPool:\n    scheme = 'http'\n    ConnectionCls = HTTPConnection\n\n    def __init__(self, host, port=None, strict=False,\n                 timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,\n                 headers=None, retries=None,\n                 _proxy=None, _proxy_headers=None,\n                 **conn_kw):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            httplib_response = conn.getresponse()\n            return httplib_response\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, timeout=_Default, **response_kw):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=timeout_obj.connect_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError) as e:\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method, url, body, headers,\n                retries=retries, redirect=redirect,\n                timeout=timeout, **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                if conn:\n                    conn.close()\n            except queue.Empty:\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import threading\nfrom queue import LifoQueue\nfrom urllib.parse import urlparse\nfrom http.client import HTTPConnection, HTTPResponse\nfrom socket import timeout as socket_timeout\nfrom time import time\n\nclass Timeout:\n    DEFAULT_TIMEOUT = 10.0\n\nclass Retry:\n    def __init__(self, retries=3):\n        self.retries = retries\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.ConnectionCls = HTTPConnection\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries or Retry()\n        self.pool = LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy or {}\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n        self.headers = headers or {}\n\n    def _new_conn(self):\n        conn = self.ConnectionCls(self.host, self.port, strict=self.strict, **self.conn_kw)\n        return conn\n\n    def _get_conn(self, timeout=None):\n        if not self.pool.empty():\n            return self.pool.get()\n        else:\n            if self.block:\n                return self._new_conn()\n            else:\n                raise Exception(\"No connection available in the pool\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except:\n            pass\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            response = conn.getresponse()\n            return response\n        except socket_timeout:\n            raise socket_timeout(\"Request timed out\")\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw):\n        retries = retries or self.retries\n        for i in range(retries.retries + 1):\n            try:\n                conn = self._get_conn(timeout=timeout)\n                response = self._make_request(conn, method, url, timeout=timeout, body=body, headers=headers)\n                self._put_conn(conn)\n                return response\n            except socket_timeout:\n                if i < retries.retries:\n                    continue\n                else:\n                    raise\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get()\n            conn.close()"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Python function that extends a FastAPI application with a new REST endpoint and tests it using the requests library.\n\nFunction Description: The function `test_extend_fastapi` demonstrates how to extend a FastAPI application (wrapped in a Jina Flow) with a new GET endpoint '/hello' that returns a simple JSON message. It then tests this endpoint by making an HTTP request and verifying the response.\n\nInput: None (The function takes no parameters as it's self-contained for demonstration purposes)\n\nOutput: None (The function performs assertions to verify the endpoint works correctly but doesn't return any value)",
    "Canonical_solution": "import requests\nfrom jina import Flow\n\ndef test_extend_fastapi():\n    def extend_rest_function(app):\n        @app.get('/hello', tags=['My Extended APIs'])\n        async def foo():\n            return {'msg': 'hello world'}\n\n        return app\n\n    jina.helper.extend_rest_interface = extend_rest_function\n    f = Flow(protocol='http')\n\n    with f:\n        response = requests.get(f'http://localhost:{f.port}/hello')\n        assert response.status_code == 200\n        assert response.json() == {'msg': 'hello world'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import uvicorn\nfrom fastapi import FastAPI\nimport requests\nfrom jina import Flow\n\ndef test_extend_fastapi():\n    app = FastAPI()\n\n    @app.get('/hello')\n    async def hello():\n        return {'message': 'Hello, World!'}\n\n    flow = Flow().add(uses=app)\n\n    with flow:\n        uvicorn.run(app, host='0.0.0.0', port=8080)\n\n    response = requests.get('http://localhost:8080/hello')\n    assert response.status_code == 200\n    assert response.json()['message'] == 'Hello, World!'"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a Python function to interact with GitHub and ZenHub APIs to retrieve repository, board, and issue information.\n\nFunction Description: The function will make HTTP requests to GitHub and ZenHub APIs to fetch specific data about repositories, boards, and issues. It handles authentication, sends requests, checks responses, and returns the parsed data.\n\nInput:\n- github_token: [str] - GitHub personal access token for authentication\n- github_org: [str] - GitHub organization name\n- github_repo: [str] - GitHub repository name\n- zenhub_token: [str] - ZenHub API token for authentication\n- issue_number: [int] - GitHub issue number to query (for issue-related functions)\n\nOutput:\n- For get_github_repo_id: [int] - Returns the GitHub repository ID\n- For get_zenhub_board: [dict] - Returns the ZenHub board data as a dictionary\n- For get_github_issue: [dict] - Returns GitHub issue data as a dictionary\n- For get_zenhub_issue_info: [dict] - Returns ZenHub issue information as a dictionary\n\nMethods:\n1. get_github_repo_id(github_token, github_org, github_repo) -> int - Retrieves the repository ID from GitHub API\n2. get_zenhub_board(zenhub_token, github_repo_id) -> dict - Fetches ZenHub board data for a given repository ID\n3. get_github_issue(github_token, github_org, github_repo, issue_number) -> dict - Gets GitHub issue details\n4. get_zenhub_issue_info(zenhub_token, github_repo_id, issue_number) -> dict - Retrieves ZenHub-specific issue information",
    "Canonical_solution": "import requests\nimport os\n\nGITHUB_API_URL = \"https://api.github.com\"\nGITHUB_GRAPHQL_URL = \"https://api.github.com/graphql\"\nZENHUB_API_URL = \"https://api.zenhub.com/p1/repositories/{repo_id}/board\"\n\ndef get_github_repo_id(github_token, github_org, github_repo):\n    url = f\"{GITHUB_API_URL}/repos/{github_org}/{github_repo}\"\n    headers = {\n        \"Authorization\": github_token\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json().get(\"id\")\n    else:\n        response.raise_for_status()\n\ndef get_zenhub_board(zenhub_token, github_repo_id):\n    url = ZENHUB_API_URL.format(repo_id=github_repo_id)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Authentication-Token\": zenhub_token\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\ndef get_github_issue(github_token, github_org, github_repo, issue_number):\n    url = f\"https://api.github.com/repos/{github_org}/{github_repo}/issues/{issue_number}\"\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\ndef get_zenhub_issue_info(zenhub_token, github_repo_id, issue_number):\n    url = f\"https://api.zenhub.com/p1/repositories/{github_repo_id}/issues/{issue_number}\"\n    headers = {\n        \"X-Authentication-Token\": zenhub_token,\n        \"Accept\": \"application/json\"\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 403:\n        print(\"Rate limit exceeded. Sleeping for 1 minute\")\n    else:\n        response.raise_for_status()",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef get_github_repo_id(github_token, github_org, github_repo):\n    url = f\"https://api.github.com/orgs/{github_org}/repos\"\n    headers = {\"Authorization\": f\"token {github_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        for repo in response.json():\n            if repo[\"name\"] == github_repo:\n                return repo[\"id\"]\n    return None\n\ndef get_zenhub_board(zenhub_token, github_repo_id):\n    url = f\"https://api.zenhub.io/p1/repositories/{github_repo_id}/boards\"\n    headers = {\"X-Authentication-Token\": zenhub_token}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    return {}\n\ndef get_github_issue(github_token, github_org, github_repo, issue_number):\n    url = f\"https://api.github.com/repos/{github_org}/{github_repo}/issues/{issue_number}\"\n    headers = {\"Authorization\": f\"token {github_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    return {}\n\ndef get_zenhub_issue_info(zenhub_token, github_repo_id, issue_number):\n    url = f\"https://api.zenhub.io/p1/repositories/{github_repo_id}/issues/{issue_number}\"\n    headers = {\"X-Authentication-Token\": zenhub_token}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    return {}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Implement a Python class for interacting with Amazon Cognito's OAuth2 endpoints to handle Single Sign-On (SSO) functionality, including token management and user information retrieval.\n\nClass Description: The AmazonSSO class provides methods to authenticate users via Amazon Cognito, refresh access tokens, and retrieve user information. It handles OAuth2 flows including authorization code and refresh token grants.\n\nAttributes:\n- access_token: str - The OAuth2 access token for API authorization\n- refresh_token: str - The refresh token used to obtain new access tokens\n- client_id: str - AWS Cognito application client ID\n- client_secret: str - AWS Cognito application client secret\n- user_pool_id: str - AWS Cognito user pool identifier\n- region: str - AWS region where the user pool is hosted\n- user_info: dict - Dictionary containing user profile information\n\nMethods:\n- __init__(access_token: str = None, refresh_token: str = None) -> None - Initializes the AmazonSSO instance with optional tokens\n- get_new_token() -> str - Obtains a new access token using the refresh token\n- get_user_info() -> dict - Retrieves user information using the current access token\n- amazon_sso(code: str, redirect_uri: str = None) -> tuple[AmazonSSO, None] | tuple[None, None] - Static method that exchanges an authorization code for tokens",
    "Canonical_solution": "import requests\nimport logging\nfrom fastapi import HTTPException\nfrom Globals import getenv\n\nclass AmazonSSO:\n    def __init__(\n        self,\n        access_token=None,\n        refresh_token=None,\n    ):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = getenv(\"AWS_CLIENT_ID\")\n        self.client_secret = getenv(\"AWS_CLIENT_SECRET\")\n        self.user_pool_id = getenv(\"AWS_USER_POOL_ID\")\n        self.region = getenv(\"AWS_REGION\")\n        self.user_info = self.get_user_info()\n\n    def get_new_token(self):\n        response = requests.post(\n            f\"https://{self.user_pool_id}.auth.{self.region}.amazoncognito.com/oauth2/token\",\n            data={\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"refresh_token\": self.refresh_token,\n                \"grant_type\": \"refresh_token\",\n                \"scope\": \"openid email profile\",\n            },\n        )\n        return response.json()[\"access_token\"]\n\n    def get_user_info(self):\n        uri = f\"https://{self.user_pool_id}.auth.{self.region}.amazoncognito.com/oauth2/userInfo\"\n        response = requests.get(\n            uri,\n            headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n        )\n        if response.status_code == 401:\n            self.access_token = self.get_new_token()\n            response = requests.get(\n                uri,\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n        try:\n            data = response.json()\n            first_name = data.get(\"given_name\", \"\")\n            last_name = data.get(\"family_name\", \"\")\n            email = data[\"email\"]\n            return {\n                \"email\": email,\n                \"first_name\": first_name,\n                \"last_name\": last_name,\n            }\n        except:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Error getting user info from AWS\",\n            )\n\n    @staticmethod\n    def amazon_sso(code, redirect_uri=None):\n        if not redirect_uri:\n            redirect_uri = getenv(\"MAGIC_LINK_URL\")\n        code = (\n            str(code)\n            .replace(\"%2F\", \"/\")\n            .replace(\"%3D\", \"=\")\n            .replace(\"%3F\", \"?\")\n            .replace(\"%3D\", \"=\")\n        )\n        response = requests.post(\n            f\"https://{getenv('AWS_USER_POOL_ID')}.auth.{getenv('AWS_REGION')}.amazoncognito.com/oauth2/token\",\n            data={\n                \"client_id\": getenv(\"AWS_CLIENT_ID\"),\n                \"client_secret\": getenv(\"AWS_CLIENT_SECRET\"),\n                \"code\": code,\n                \"grant_type\": \"authorization_code\",\n                \"redirect_uri\": redirect_uri,\n            },\n        )\n        if response.status_code != 200:\n            logging.error(f\"Error getting AWS access token: {response.text}\")\n            return None, None\n        data = response.json()\n        access_token = data[\"access_token\"]\n        refresh_token = data[\"refresh_token\"]\n        return AmazonSSO(access_token=access_token, refresh_token=refresh_token)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\n\nclass AmazonSSO:\n    def __init__(self, access_token: str = None, refresh_token: str = None):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = ''\n        self.client_secret = ''\n        self.user_pool_id = ''\n        self.region = ''\n        self.user_info = {}\n\n    def get_new_token(self):\n        url = f\"https://{self.user_pool_id}.auth.{self.region}.amazoncognito.com/oauth2/token\"\n        data = {\n            \"grant_type\": \"refresh_token\",\n            \"client_id\": self.client_id,\n            \"client_secret\": self.client_secret,\n            \"refresh_token\": self.refresh_token\n        }\n        headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        response = requests.post(url, data=data, headers=headers)\n        if response.status_code == 200:\n            token_data = response.json()\n            self.access_token = token_data.get(\"access_token\")\n            self.refresh_token = token_data.get(\"refresh_token\")\n            return self.access_token\n        return None\n\n    def get_user_info(self):\n        if not self.access_token:\n            return {}\n        url = f\"https://{self.user_pool_id}.auth.{self.region}.amazoncognito.com/oauth2/userInfo\"\n        headers = {\"Authorization\": f\"Bearer {self.access_token}\"}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            self.user_info = response.json()\n            return self.user_info\n        return {}\n\n    @staticmethod\n    def amazon_sso(code: str, redirect_uri: str = None):\n        instance = AmazonSSO()\n        if not redirect_uri:\n            redirect_uri = \"\"\n        url = f\"https://{instance.user_pool_id}.auth.{instance.region}.amazoncognito.com/oauth2/token\"\n        data = {\n            \"grant_type\": \"authorization_code\",\n            \"client_id\": instance.client_id,\n            \"client_secret\": instance.client_secret,\n            \"code\": code,\n            \"redirect_uri\": redirect_uri\n        }\n        headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        response = requests.post(url, data=data, headers=headers)\n        if response.status_code == 200:\n            token_data = response.json()\n            instance.access_token = token_data.get(\"access_token\")\n            instance.refresh_token = token_data.get(\"refresh_token\")\n            return instance, None\n        return None, None"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with given headers and data, and returns the response status code and content.\n\nFunction Description: The function uses the Python `requests` library to send an HTTP POST request to the provided URL. It includes custom headers and sends the data in JSON format. The function then returns the HTTP status code and the response body as text.\n\nInput:  \n- `url` (str): The target URL to which the POST request will be sent.  \n- `headers` (dict): A dictionary containing HTTP headers to be included in the request.  \n- `data` (dict): A dictionary containing the data to be sent in the request body, which will be converted to JSON format.  \n\nOutput:  \n- Returns a tuple containing:  \n  - `status_code` (int): The HTTP status code of the response (e.g., 200, 404, 500).  \n  - `response_text` (str): The response body as plain text.",
    "Canonical_solution": "import requests\nimport json\n\ndef send_http_request(url, headers, data):\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    return response.status_code, response.text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef send_post_request(url, headers, data):\n    response = requests.post(url, headers=headers, json=data)\n    return response.status_code, response.text"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create a function to convert a PyTorch tensor to a base64-encoded PNG image and upload it to a specified image hosting service (either SM.MS or imgbb.com) using their respective APIs, returning the hosted image URL.\n\nFunction Description: The function should accept a PyTorch tensor and an API key, convert the tensor to a PNG image, encode it in base64, and upload it to the specified image hosting service. It should handle different response formats from the services and return the hosted image URL or an error message.\n\nInput:\n- image_tensor: torch.Tensor - A PyTorch tensor representing the image to be uploaded\n- api_key: str - The API key for authenticating with the image hosting service\n- service: str (optional) - The image hosting service to use ('smms' or 'imgbb'). Defaults to 'smms'\n\nOutput:\n- str - The URL of the uploaded image on success, or an error message string on failure\n- None - Returned when the input is not a PyTorch tensor or when the upload fails without an error message",
    "Canonical_solution": "import base64\nimport requests\nfrom io import BytesIO\nfrom PIL import Image\nimport numpy as np\nimport torch\n\ndef tensor_to_url_sm(image_tensor, api_key):\n    \"\"\"\n    \u5c06PyTorch\u5f20\u91cf\u8f6c\u6362\u4e3aPNG\u683c\u5f0f\u7684base64\u7f16\u7801\u5b57\u7b26\u4e32\u5e76\u4e0a\u4f20\u81f3SM.MS\u56fe\u5e8a\uff0c\u8fd4\u56de\u4e0a\u4f20\u540e\u7684\u56fe\u7247URL\u3002\n    \n    \u53c2\u6570:\n    - image_tensor: PyTorch\u5f20\u91cf\u3002\n    - api_key: SM.MS API\u5bc6\u94a5\u3002\n    \n    \u8fd4\u56de:\n    - \u56fe\u7247\u4e0a\u4f20\u6210\u529f\u540e\u7684URL\u6216\u5df2\u5b58\u5728\u7684\u56fe\u7247URL\uff0c\u5982\u679c\u5931\u8d25\u5219\u8fd4\u56deNone\u3002\n    \"\"\"\n    if isinstance(image_tensor, torch.Tensor):\n        i = 255.0 * image_tensor.cpu().numpy()\n    else:\n        raise TypeError(\"Input should be a PyTorch Tensor.\")\n\n    img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n\n    files = {'smfile': ('image.png', base64.b64decode(img_str), 'image/png')}\n    headers = {'Authorization': api_key}\n\n    try:\n        response = requests.post('https://sm.ms/api/v2/upload', files=files, headers=headers)\n        response.raise_for_status()\n        \n        result = response.json()\n        if result['success']:\n            return result['data']['url']\n        elif result.get('code') == 'image_repeated':\n            return result['images']\n        else:\n            print(f\"Error: {result.get('message')}\")\n            return None\n    except requests.exceptions.RequestException as e:\n        print(f\"HTTP Request Error: {e}\")\n        return None\n\ndef tensor_to_url_imgbb(image_tensor, api_key):\n    \"\"\"\n    \u5c06PyTorch\u5f20\u91cf\u8f6c\u6362\u4e3aPNG\u683c\u5f0f\u7684base64\u7f16\u7801\u5b57\u7b26\u4e32\u5e76\u4e0a\u4f20\u81f3imgbb.com\u56fe\u5e8a\uff0c\u8fd4\u56de\u4e0a\u4f20\u540e\u7684\u56fe\u7247URL\u3002\n\n    \u53c2\u6570:\n    - image_tensor: PyTorch\u5f20\u91cf\u3002\n    - api_key: imgbb.com API\u5bc6\u94a5\u3002\n\n    \u8fd4\u56de:\n    - \u56fe\u7247\u4e0a\u4f20\u6210\u529f\u540e\u7684URL\u6216\u5df2\u5b58\u5728\u7684\u56fe\u7247URL\uff0c\u5982\u679c\u5931\u8d25\u5219\u8fd4\u56deNone\u3002\n    \"\"\"\n    if isinstance(image_tensor, torch.Tensor):\n        i = 255.0 * image_tensor.cpu().numpy()\n    else:\n        raise TypeError(\"Input should be a PyTorch Tensor.\")\n\n    img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n    url = \"https://api.imgbb.com/1/upload\"\n    payload = {\"key\": api_key, \"image\": img_str}\n    response = requests.post(url, data=payload)\n    if response.status_code == 200:\n        result = response.json()\n        img_url = result[\"data\"][\"url\"]\n        return img_url\n    else:\n        return \"Error: \" + response.text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import torch\nimport base64\nimport requests\nfrom io import BytesIO\nfrom PIL import Image\n\ndef tensor_to_image_url(image_tensor, api_key, service='smms'):\n    if not isinstance(image_tensor, torch.Tensor):\n        return None\n\n    # Convert tensor to PIL image\n    if image_tensor.dim() == 3:\n        image = Image.fromarray(image_tensor.permute(1, 2, 0).cpu().numpy())\n    elif image_tensor.dim() == 4:\n        image = Image.fromarray(image_tensor[0].permute(1, 2, 0).cpu().numpy())\n    else:\n        return None\n\n    # Convert image to bytes\n    img_byte_arr = BytesIO()\n    image.save(img_byte_arr, format='PNG')\n    img_bytes = img_byte_arr.getvalue()\n\n    # Encode image to base64\n    encoded_img = base64.b64encode(img_bytes).decode('utf-8')\n\n    # Upload to the specified service\n    if service == 'smms':\n        url = 'https://sm.ms/api/v2/upload'\n        payload = {'image': encoded_img}\n        headers = {'Authorization': api_key}\n        response = requests.post(url, data=payload, headers=headers)\n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                return result['data']['url']\n            else:\n                return result.get('message', 'Upload failed')\n        else:\n            return 'Upload failed with status code {}'.format(response.status_code)\n\n    elif service == 'imgbb':\n        url = 'https://api.imgbb.com/1/upload'\n        payload = {'key': api_key, 'image': encoded_img}\n        response = requests.post(url, data=payload)\n        if response.status_code == 200:\n            result = response.json()\n            if result.get('success'):\n                return result['data']['url']\n            else:\n                return result.get('error', 'Upload failed')\n        else:\n            return 'Upload failed with status code {}'.format(response.status_code)\n\n    else:\n        return 'Unsupported service'"
  }
]